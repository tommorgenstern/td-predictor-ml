{"custom_id": "keras#92f66a279a3564420c9b7003f297c2fc12d40a7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 41 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,6 +22,8 @@ def set_floatx(floatx):\n     global _FLOATX\n     if floatx not in {'float32', 'float64'}:\n         raise Exception('Unknown floatx type: ' + str(floatx))\n+    if isinstance(floatx, unicode):\n+        floatx = floatx.encode('ascii')\n     _FLOATX = floatx\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#861c8a8e21e18a31438960addce2e625a756507c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 10/7 | Churn Δ: 51 | Churn Cumulative: 6431 | Contributors (this commit): 34 | Commits (past 90d): 108 | Contributors (cumulative): 44 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,7 +4,7 @@ from __future__ import print_function\n \n from collections import OrderedDict\n from .. import backend as K\n-from ..layers.core import Layer, Merge, Siamese, SiameseHead\n+from ..layers.core import Layer, Merge, Siamese, SiameseHead, Pass\n from six.moves import range\n \n \n@@ -23,6 +23,23 @@ class Sequential(Layer):\n         for layer in layers:\n             self.add(layer)\n \n+    def __call__(self, X):\n+        # temporally substitute layer input\n+        tmp1 = self.layers[0].input\n+        if hasattr(self.layers[0], 'previous'):\n+            tmp2 = self.layers[0].previous\n+            flag = True\n+        self.layers[0].input = X\n+        # define X as the new input\n+        self.layers[0].previous = Pass(X)\n+        # Calculate output given X\n+        Y = self.get_output()\n+        # Reset original inputs\n+        self.layers[0].input = tmp1\n+        if flag:\n+            self.layers[0].previous = tmp2\n+        return Y\n+\n     def set_previous(self, layer):\n         self.layers[0].previous = layer\n \n\n@@ -17,6 +17,19 @@ import types\n import sys\n \n \n+class Pass:\n+    ''' Dummy class. Passes placeholder ahead'''\n+    def __init__(self, X, output_shape=None):\n+        self.X = X\n+\n+    def get_output(self, train=False):\n+        return self.X\n+\n+    @property\n+    def output_shape(self):\n+        return self.output_shape\n+\n+\n class Layer(object):\n     def __init__(self, **kwargs):\n         allowed_kwargs = {'input_shape',\n@@ -33,6 +46,25 @@ class Layer(object):\n         if not hasattr(self, 'params'):\n             self.params = []\n \n+    def __call__(self, X):\n+        # temporally substitute layer input\n+        if hasattr(self, 'previous'):\n+            tmp = self.previous\n+            self.previous = Pass(X)\n+            Y = self.get_output()\n+            self.previous = tmp\n+        else:\n+            if hasattr(self, 'input'):\n+                tmp = self.input\n+                flag = True\n+            else:\n+                flag = False\n+            self.input = X\n+            Y = self.get_output()\n+            if flag:\n+                self.input = tmp\n+        return Y\n+\n     def set_previous(self, layer, connection_map={}):\n         assert self.nb_input == layer.nb_output == 1, \"Cannot connect layers: input count and output count should be 1.\"\n         if hasattr(self, 'input_ndim'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2161910a53604bdc48027c5c4e71f9af4228cbaa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1 | Churn Cumulative: 42 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,7 +22,6 @@ def set_floatx(floatx):\n     global _FLOATX\n     if floatx not in {'float32', 'float64'}:\n         raise Exception('Unknown floatx type: ' + str(floatx))\n-    if isinstance(floatx, unicode):\n     floatx = floatx.encode('ascii')\n     _FLOATX = floatx\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d2a150406060797f6e4d3602305c2ea3b13f146a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5607 | Contributors (this commit): 32 | Commits (past 90d): 89 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ import types\n import sys\n \n \n-class Pass:\n+class Pass(object):\n     ''' Dummy class. Passes placeholder ahead'''\n     def __init__(self, X, output_shape=None):\n         self.X = X\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#9c3060d8ca0142dc79e979f5ba281d9a8590cda6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 43 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,7 +22,6 @@ def set_floatx(floatx):\n     global _FLOATX\n     if floatx not in {'float32', 'float64'}:\n         raise Exception('Unknown floatx type: ' + str(floatx))\n-    if isinstance(floatx, unicode):\n     floatx = floatx.encode('ascii')\n     _FLOATX = floatx\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f295ecb302ea3298ab61dda892f323c7c7807d02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 45 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ def set_floatx(floatx):\n     global _FLOATX\n     if floatx not in {'float32', 'float64'}:\n         raise Exception('Unknown floatx type: ' + str(floatx))\n-    floatx = floatx.encode('ascii')\n+    floatx = str(floatx)\n     _FLOATX = floatx\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ff647e04eed9aa8d42ca96bf6999c640c6e6842d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 47 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ def set_floatx(floatx):\n     global _FLOATX\n     if floatx not in {'float32', 'float64'}:\n         raise Exception('Unknown floatx type: ' + str(floatx))\n-    floatx = floatx.encode('ascii')\n+    floatx = str(floatx)\n     _FLOATX = floatx\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6c1ce0f6e9059c93c87d839b7e091d857cbfc0de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): -15/0 | Churn Δ: 25 | Churn Cumulative: 3095 | Contributors (this commit): 13 | Commits (past 90d): 46 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -51,7 +51,7 @@ Y_test = np_utils.to_categorical(y_test, nb_classes)\n model = Sequential()\n \n model.add(Convolution2D(nb_filters, nb_conv, nb_conv,\n-                        border_mode='same',\n+                        border_mode='valid',\n                         input_shape=(1, img_rows, img_cols)))\n model.add(Activation('relu'))\n model.add(Convolution2D(nb_filters, nb_conv, nb_conv))\n\n@@ -502,7 +502,8 @@ def dropout(x, level, seed=None):\n # CONVOLUTIONS\n \n \n-def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th'):\n+def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n+           image_shape=None, filter_shape=None):\n     '''\n     Run on cuDNN if available.\n     border_mode: string, \"same\" or \"valid\".\n\n@@ -515,7 +515,8 @@ def dropout(x, level, seed=None):\n # CONVOLUTIONS\n \n \n-def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th'):\n+def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n+           image_shape=None, filter_shape=None):\n     '''\n     Run on cuDNN if available.\n     border_mode: string, \"same\" or \"valid\".\n@@ -532,6 +533,12 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th'):\n         # TF kernel shape: (rows, cols, input_depth, depth)\n         x = x.dimshuffle((0, 3, 1, 2))\n         kernel = kernel.dimshuffle((3, 2, 0, 1))\n+        if image_shape:\n+            image_shape = (image_shape[0], image_shape[3],\n+                           image_shape[1], image_shape[2])\n+        if filter_shape:\n+            filter_shape = (filter_shape[3], filter_shape[2],\n+                            filter_shape[0], filter_shape[1])\n \n     if _on_gpu() and dnn.dnn_available():\n         if border_mode == 'same':\n@@ -558,7 +565,9 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th'):\n \n         conv_out = T.nnet.conv.conv2d(x, kernel,\n                                       border_mode=th_border_mode,\n-                                      subsample=strides)\n+                                      subsample=strides,\n+                                      image_shape=image_shape,\n+                                      filter_shape=filter_shape)\n         if border_mode == 'same':\n             shift_x = (kernel.shape[2] - 1) // 2\n             shift_y = (kernel.shape[3] - 1) // 2\n\n@@ -93,7 +93,8 @@ class Convolution1D(Layer):\n         X = K.expand_dims(X, -1)  # add a dimension of the right\n         X = K.permute_dimensions(X, (0, 2, 1, 3))\n         conv_out = K.conv2d(X, self.W, strides=self.subsample,\n-                            border_mode=self.border_mode, dim_ordering='th')\n+                            border_mode=self.border_mode,\n+                            dim_ordering='th')\n \n         output = conv_out + K.reshape(self.b, (1, self.nb_filter, 1, 1))\n         output = self.activation(output)\n@@ -212,7 +213,9 @@ class Convolution2D(Layer):\n         X = self.get_input(train)\n         conv_out = K.conv2d(X, self.W, strides=self.subsample,\n                             border_mode=self.border_mode,\n-                            dim_ordering=self.dim_ordering)\n+                            dim_ordering=self.dim_ordering,\n+                            image_shape=self.input_shape,\n+                            filter_shape=self.W_shape)\n \n         output = conv_out + K.reshape(self.b, (1, self.nb_filter, 1, 1))\n         output = self.activation(output)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7b401f0b9954f2af1e85e049e41aa1ad06444bd2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 37 | Churn Cumulative: 466 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,6 +11,7 @@ from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data\n import pickle\n import sys\n+import os\n \n input_dim = 32\n nb_hidden = 16\n@@ -61,14 +62,16 @@ class TestSequential(unittest.TestCase):\n         model.get_config(verbose=0)\n \n         print('test weight saving')\n-        model.save_weights('test_sequential_temp.h5', overwrite=True)\n+        fname = 'test_sequential_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n         model = Sequential()\n         model.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         model.add(Activation('relu'))\n         model.add(Dense(nb_class))\n         model.add(Activation('softmax'))\n         model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n-        model.load_weights('test_sequential_temp.h5')\n+        model.load_weights(fname)\n+        os.remove(fname)\n \n         nloss = model.evaluate(X_train, y_train, verbose=0)\n         assert(loss == nloss)\n@@ -114,7 +117,8 @@ class TestSequential(unittest.TestCase):\n         model.get_config(verbose=0)\n \n         print('test weight saving')\n-        model.save_weights('test_merge_sum_temp.h5', overwrite=True)\n+        fname = 'test_merge_sum_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         left.add(Activation('relu'))\n@@ -125,7 +129,8 @@ class TestSequential(unittest.TestCase):\n         model.add(Merge([left, right], mode='sum'))\n         model.add(Dense(nb_class))\n         model.add(Activation('softmax'))\n-        model.load_weights('test_merge_sum_temp.h5')\n+        model.load_weights(fname)\n+        os.remove(fname)\n         model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n \n         nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n@@ -205,7 +210,8 @@ class TestSequential(unittest.TestCase):\n         model.get_config(verbose=0)\n \n         print('test weight saving')\n-        model.save_weights('test_merge_concat_temp.h5', overwrite=True)\n+        fname = 'test_merge_concat_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         left.add(Activation('relu'))\n@@ -221,7 +227,8 @@ class TestSequential(unittest.TestCase):\n         model.add(Activation('softmax'))\n \n         model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n-        model.load_weights('test_merge_concat_temp.h5')\n+        model.load_weights(fname)\n+        os.remove(fname)\n \n         nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n         assert(loss == nloss)\n@@ -268,8 +275,10 @@ class TestSequential(unittest.TestCase):\n         model.predict_proba([X_test, X_test, X_test], verbose=0)\n         model.get_config(verbose=0)\n \n-        model.save_weights('test_merge_recursivity_temp.h5', overwrite=True)\n-        model.load_weights('test_merge_recursivity_temp.h5')\n+        fname = 'test_merge_recursivity_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n+        model.load_weights(fname)\n+        os.remove(fname)\n \n         nloss = model.evaluate([X_train, X_train, X_train], y_train, verbose=0)\n         print(nloss)\n@@ -305,8 +314,10 @@ class TestSequential(unittest.TestCase):\n         model.predict_proba(X_test, verbose=0)\n         model.get_config(verbose=0)\n \n-        model.save_weights('test_merge_overlap_temp.h5', overwrite=True)\n-        model.load_weights('test_merge_overlap_temp.h5')\n+        fname = 'test_merge_overlap_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n+        model.load_weights(fname)\n+        os.remove(fname)\n \n         nloss = model.evaluate(X_train, y_train, verbose=0)\n         print(nloss)\n@@ -359,7 +370,8 @@ class TestSequential(unittest.TestCase):\n         model.get_config(verbose=0)\n \n         print('test weight saving')\n-        model.save_weights('test_lambda_temp.h5', overwrite=True)\n+        fname = 'test_lambda_temp.h5'\n+        model.save_weights(fname, overwrite=True)\n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         left.add(Activation('relu'))\n@@ -371,8 +383,9 @@ class TestSequential(unittest.TestCase):\n                               output_shape=output_shape))\n         model.add(Dense(nb_class))\n         model.add(Lambda(activation))\n-        model.load_weights('test_lambda_temp.h5')\n+        model.load_weights(fname)\n         model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n+        os.remove(fname)\n \n         nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n         assert(loss == nloss)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b002d00347dfb4885f798fa1ebd5f5695b75a162", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 12 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 77 | Churn Cumulative: 903 | Contributors (this commit): 13 | Commits (past 90d): 22 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,20 +24,21 @@ class Sequential(Layer):\n             self.add(layer)\n \n     def __call__(self, X):\n-        # temporally substitute layer input\n-        tmp1 = self.layers[0].input\n         if hasattr(self.layers[0], 'previous'):\n-            tmp2 = self.layers[0].previous\n-            flag = True\n-        self.layers[0].input = X\n-        # define X as the new input\n-        self.layers[0].previous = Pass(X)\n-        # Calculate output given X\n+            tmp = self.layers[0].previous\n+            self.previous = Pass(X)\n+            Y = self.get_output()\n+            self.layers[0].previous = tmp\n+        else:\n+            if hasattr(self.layers[0], 'input'):\n+                tmp = self.layers[0].input\n+                flag = True\n+            else:\n+                flag = False\n+            self.layers[0].input = X\n             Y = self.get_output()\n-        # Reset original inputs\n-        self.layers[0].input = tmp1\n             if flag:\n-            self.layers[0].previous = tmp2\n+                self.layers[0].input = tmp\n         return Y\n \n     def set_previous(self, layer):\n@@ -321,7 +322,7 @@ class Graph(Layer):\n                 raise Exception('Duplicate node identifier: ' + o)\n         if merge_mode:\n             if merge_mode not in {'sum', 'ave', 'mul', 'dot', 'cos', 'concat', 'join'}:\n-                raise Eception(\"Invalid merge mode\")\n+                raise Exception(\"Invalid merge mode\")\n         layers = []\n         for i in range(len(inputs)):\n             input = inputs[i]\n\n@@ -0,0 +1,52 @@\n+# encoding: utf-8\n+\"\"\"Test seya.layers.recurrent module\"\"\"\n+\n+from __future__ import print_function\n+\n+import unittest\n+import numpy as np\n+import theano\n+\n+from numpy.testing import assert_allclose\n+\n+from keras import backend as K\n+from keras.layers.core import Layer, Dense\n+from keras.models import Sequential\n+floatX = K.common._FLOATX\n+\n+\n+class TestCall(unittest.TestCase):\n+    \"\"\"Test __call__ methods\"\"\"\n+\n+    def test_layer_call(self):\n+        \"\"\"Test keras.layers.Layer.__call__\"\"\"\n+        nb_samples, input_dim = 3, 10\n+        layer = Layer()\n+        X = K.placeholder(ndim=2)\n+        Y = layer(X)\n+        F = theano.function([X], Y)\n+\n+        x = np.random.randn(nb_samples, input_dim).astype(floatX)\n+        y = F(x)\n+        assert_allclose(x, y)\n+\n+    def test_sequential_call(self):\n+        \"\"\"Test keras.layers.Layer.__call__\"\"\"\n+        nb_samples, input_dim, output_dim = 3, 10, 5\n+        model = Sequential()\n+        model.add(Dense(output_dim=output_dim, input_dim=input_dim))\n+        model.compile('sgd', 'mse')\n+\n+        X = K.placeholder(ndim=2)\n+        Y = model(X)\n+        F = theano.function([X], Y)\n+\n+        x = np.random.randn(nb_samples, input_dim).astype(floatX)\n+        y1 = F(x)\n+        y2 = model.predict(x)\n+        assert_allclose(y1, y2)\n+\n+\n+if __name__ == '__main__':\n+    theano.config.exception_verbosity = 'high'\n+    unittest.main(verbosity=2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#4b40c34c532f3d3f8b2222a19ba5038eb61a1ee4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 57 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ class TestCall(unittest.TestCase):\n     \"\"\"Test __call__ methods\"\"\"\n \n     def test_layer_call(self):\n-        \"\"\"Test keras.layers.Layer.__call__\"\"\"\n+        \"\"\"Test keras.layers.core.Layer.__call__\"\"\"\n         nb_samples, input_dim = 3, 10\n         layer = Layer()\n         X = K.placeholder(ndim=2)\n@@ -31,7 +31,7 @@ class TestCall(unittest.TestCase):\n         assert_allclose(x, y)\n \n     def test_sequential_call(self):\n-        \"\"\"Test keras.layers.Layer.__call__\"\"\"\n+        \"\"\"Test keras.models.Sequential.__call__\"\"\"\n         nb_samples, input_dim, output_dim = 3, 10, 5\n         model = Sequential()\n         model.add(Dense(output_dim=output_dim, input_dim=input_dim))\n@@ -44,6 +44,7 @@ class TestCall(unittest.TestCase):\n         x = np.random.randn(nb_samples, input_dim).astype(floatX)\n         y1 = F(x)\n         y2 = model.predict(x)\n+        # results of __call__ should match model.predict\n         assert_allclose(y1, y2)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f2e4e2ddcef7aab7c6dd3d66b91a2ec62240a57d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 47 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 62 | Churn Cumulative: 6520 | Contributors (this commit): 34 | Commits (past 90d): 112 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,7 +4,7 @@ from __future__ import print_function\n \n from collections import OrderedDict\n from .. import backend as K\n-from ..layers.core import Layer, Merge, Siamese, SiameseHead, Pass\n+from ..layers.core import Layer, Merge, Siamese, SiameseHead\n from six.moves import range\n \n \n@@ -23,22 +23,13 @@ class Sequential(Layer):\n         for layer in layers:\n             self.add(layer)\n \n-    def __call__(self, X):\n-        if hasattr(self.layers[0], 'previous'):\n-            tmp = self.layers[0].previous\n-            self.previous = Pass(X)\n-            Y = self.get_output()\n-            self.layers[0].previous = tmp\n-        else:\n-            if hasattr(self.layers[0], 'input'):\n-                tmp = self.layers[0].input\n-                flag = True\n-            else:\n-                flag = False\n-            self.layers[0].input = X\n-            Y = self.get_output()\n-            if flag:\n-                self.layers[0].input = tmp\n+    def __call__(self, X, train=False):\n+        # temporally substitute input of first layer\n+        tmp = self.layers[0].get_input\n+        self.layers[0].get_input = lambda _: X\n+        Y = self.get_output(train=train)\n+        # return input to first layer to what it was\n+        self.layers[0].get_input = tmp\n         return Y\n \n     def set_previous(self, layer):\n\n@@ -17,19 +17,6 @@ import types\n import sys\n \n \n-class Pass(object):\n-    ''' Dummy class. Passes placeholder ahead'''\n-    def __init__(self, X, output_shape=None):\n-        self.X = X\n-\n-    def get_output(self, train=False):\n-        return self.X\n-\n-    @property\n-    def output_shape(self):\n-        return self.output_shape\n-\n-\n class Layer(object):\n     def __init__(self, **kwargs):\n         allowed_kwargs = {'input_shape',\n@@ -46,23 +33,13 @@ class Layer(object):\n         if not hasattr(self, 'params'):\n             self.params = []\n \n-    def __call__(self, X):\n-        # temporally substitute layer input\n-        if hasattr(self, 'previous'):\n-            tmp = self.previous\n-            self.previous = Pass(X)\n-            Y = self.get_output()\n-            self.previous = tmp\n-        else:\n-            if hasattr(self, 'input'):\n-                tmp = self.input\n-                flag = True\n-            else:\n-                flag = False\n-            self.input = X\n-            Y = self.get_output()\n-            if flag:\n-                self.input = tmp\n+    def __call__(self, X, train=False):\n+        # temporally substitute input\n+        tmp = self.get_input\n+        self.get_input = lambda _: X\n+        Y = self.get_output(train=train)\n+        # return input to what it was\n+        self.get_input = tmp\n         return Y\n \n     def set_previous(self, layer, connection_map={}):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e1c7d287dcb7714f35815e7cedfc1773fea91a32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 65 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -24,10 +24,10 @@ class TestCall(unittest.TestCase):\n         layer = Layer()\n         X = K.placeholder(ndim=2)\n         Y = layer(X)\n-        F = theano.function([X], Y)\n+        F = K.function([X], Y)\n \n         x = np.random.randn(nb_samples, input_dim).astype(floatX)\n-        y = F(x)\n+        y = F([x, ])\n         assert_allclose(x, y)\n \n     def test_sequential_call(self):\n@@ -39,10 +39,10 @@ class TestCall(unittest.TestCase):\n \n         X = K.placeholder(ndim=2)\n         Y = model(X)\n-        F = theano.function([X], Y)\n+        F = K.function([X], Y)\n \n         x = np.random.randn(nb_samples, input_dim).astype(floatX)\n-        y1 = F(x)\n+        y1 = F([x, ])\n         y2 = model.predict(x)\n         # results of __call__ should match model.predict\n         assert_allclose(y1, y2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#61b30997eb7e8833484e74ea1bc9df0bcb4b7617", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 291 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -16,13 +16,13 @@ def mean_absolute_error(y_true, y_pred):\n \n \n def mean_absolute_percentage_error(y_true, y_pred):\n-    diff = K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K._EPSILON, np.inf))\n+    diff = K.abs((y_true - y_pred) / K.clip(K.abs(y_true), K.epsilon(), np.inf))\n     return 100. * K.mean(diff, axis=-1)\n \n \n def mean_squared_logarithmic_error(y_true, y_pred):\n-    first_log = K.log(K.clip(y_pred, K._EPSILON, np.inf) + 1.)\n-    second_log = K.log(K.clip(y_true, K._EPSILON, np.inf) + 1.)\n+    first_log = K.log(K.clip(y_pred, K.epsilon(), np.inf) + 1.)\n+    second_log = K.log(K.clip(y_true, K.epsilon(), np.inf) + 1.)\n     return K.mean(K.square(first_log - second_log), axis=-1)\n \n \n@@ -45,7 +45,7 @@ def binary_crossentropy(y_true, y_pred):\n \n \n def poisson_loss(y_true, y_pred):\n-    return K.mean(y_pred - y_true * K.log(y_pred + K._EPSILON), axis=-1)\n+    return K.mean(y_pred - y_true * K.log(y_pred + K.epsilon()), axis=-1)\n \n # aliases\n mse = MSE = mean_squared_error\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#90e9da4093e357dc49d5631d2792221092516854", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 84 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -5,12 +5,11 @@ from __future__ import print_function\n \n import unittest\n import numpy as np\n-import theano\n \n from numpy.testing import assert_allclose\n \n from keras import backend as K\n-from keras.layers.core import Layer, Dense\n+from keras.layers.core import Dense\n from keras.models import Sequential\n floatX = K.common._FLOATX\n \n@@ -20,15 +19,16 @@ class TestCall(unittest.TestCase):\n \n     def test_layer_call(self):\n         \"\"\"Test keras.layers.core.Layer.__call__\"\"\"\n-        nb_samples, input_dim = 3, 10\n-        layer = Layer()\n+        nb_samples, input_dim, output_dim = 3, 10, 5\n+        layer = Dense(output_dim, input_dim=input_dim)\n+        W = np.asarray(K.eval(layer.W))\n         X = K.placeholder(ndim=2)\n         Y = layer(X)\n-        F = K.function([X], Y)\n+        F = K.function([X], [Y])\n \n         x = np.random.randn(nb_samples, input_dim).astype(floatX)\n-        y = F([x, ])\n-        assert_allclose(x, y)\n+        y = F([x])[0]\n+        assert_allclose(np.dot(x, W), y)\n \n     def test_sequential_call(self):\n         \"\"\"Test keras.models.Sequential.__call__\"\"\"\n@@ -39,15 +39,14 @@ class TestCall(unittest.TestCase):\n \n         X = K.placeholder(ndim=2)\n         Y = model(X)\n-        F = K.function([X], Y)\n+        F = K.function([X], [Y])\n \n         x = np.random.randn(nb_samples, input_dim).astype(floatX)\n-        y1 = F([x, ])\n+        y1 = F([x])[0]\n         y2 = model.predict(x)\n         # results of __call__ should match model.predict\n         assert_allclose(y1, y2)\n \n \n if __name__ == '__main__':\n-    theano.config.exception_verbosity = 'high'\n     unittest.main(verbosity=2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a4f334c1ab2f53dbaa17a52b88e4bb890d584c69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 82 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 8 | Complexity Δ (Sum/Max): 13/13 | Churn Δ: 83 | Churn Cumulative: 1665 | Contributors (this commit): 13 | Commits (past 90d): 25 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -240,7 +240,63 @@ class Convolution2D(Layer):\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n-class MaxPooling1D(Layer):\n+class Pooling1D(Layer):\n+    input_dim = 3\n+\n+    def __init__(self, pool_length=2, stride=None, border_mode='valid', **kwargs):\n+        super(Pooling1D, self).__init__(**kwargs)\n+        if stride is None:\n+            stride = pool_length\n+        self.pool_length = pool_length\n+        self.stride = stride\n+        self.st = (self.stride, 1)\n+        self.input = K.placeholder(ndim=3)\n+        self.pool_size = (pool_length, 1)\n+        assert border_mode in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n+        self.border_mode = border_mode\n+\n+    @property\n+    def output_shape(self):\n+        input_shape = self.input_shape\n+        length = conv_output_length(input_shape[1], self.pool_length,\n+                                    self.border_mode, self.stride)\n+        return (input_shape[0], length, input_shape[2])\n+\n+    def pooling_function(self, back_end, inputs, pool_size, strides, border_mode, dim_ordering):\n+        raise NotImplementedError\n+\n+    def get_output(self, train=False):\n+        X = self.get_input(train)\n+        X = K.expand_dims(X, -1)   # add dummy last dimension\n+        X = K.permute_dimensions(X, (0, 2, 1, 3))\n+        output = self.pooling_function(back_end=K, inputs=X, pool_size=self.pool_size,\n+                             strides=self.st,\n+                             border_mode=self.border_mode,\n+                             dim_ordering='th')\n+        output = K.permute_dimensions(output, (0, 2, 1, 3))\n+        return K.squeeze(output, 3)  # remove dummy last dimension\n+\n+    def get_config(self):\n+        config = {\"name\": self.__class__.__name__,\n+                  \"stride\": self.stride,\n+                  \"pool_length\": self.pool_length,\n+                  \"border_mode\": self.border_mode}\n+        base_config = super(MaxPooling1D, self).get_config()\n+        return dict(list(base_config.items()) + list(config.items()))\n+\n+\n+class MaxPooling1D(Pooling1D):\n+    def __init__(self, **kwargs):\n+        super(MaxPooling1D, self).__init__(**kwargs)\n+\n+    def pooling_function(self, back_end, inputs, pool_size, strides, border_mode, dim_ordering):\n+        output = back_end.maxpool2d(inputs, pool_size=self.pool_size, strides=self.st,\n+                border_mode=self.border_mode,\n+                dim_ordering='th')\n+        return output\n+\n+\n+class _MaxPooling1D(Layer):\n     input_ndim = 3\n \n     def __init__(self, pool_length=2, stride=None,\n@@ -506,3 +562,28 @@ class ZeroPadding2D(Layer):\n                   \"padding\": self.padding}\n         base_config = super(ZeroPadding2D, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n+\n+\n+\n+class GlobalPooling2D(Layer):\n+    \"\"\"\n+    By @entron\n+    Borrowed and modified from here: https://github.com/fchollet/keras/pull/522\n+    \"\"\"\n+    def __init__(self, pooling_function='average'):\n+        super(GlobalPooling2D, self).__init__()\n+        if pooling_function not in {'average', 'max'}:\n+            raise Exception('Invalid pooling function for GlobalPooling2D:', pooling_function)\n+        if pooling_function == 'average':\n+            self.pooling_function = K.mean\n+        else:\n+            self.pooling_function = K.max\n+        self.input = K.placeholder(ndim=4)\n+\n+    def get_output(self, train):\n+        X = self.get_input(train)\n+        return self.pooling_function(self.pooling_function(X, axis=-1), axis=-1)\n+\n+    def get_config(self):\n+        return {\"name\": self.__class__.__name__,\n+                \"pooling_function\": self.pooling_function.__name__}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c3f3db64af2370901697800e8ffcf873a9b67b0b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 10 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 78 | Churn Cumulative: 1743 | Contributors (this commit): 13 | Commits (past 90d): 26 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -296,48 +296,76 @@ class MaxPooling1D(Pooling1D):\n         return output\n \n \n-class _MaxPooling1D(Layer):\n-    input_ndim = 3\n+class Pooling2D(Layer):\n+    input_ndim = 4\n \n-    def __init__(self, pool_length=2, stride=None,\n-                 border_mode='valid', **kwargs):\n-        super(MaxPooling1D, self).__init__(**kwargs)\n-        if stride is None:\n-            stride = pool_length\n-        self.pool_length = pool_length\n-        self.stride = stride\n-        self.st = (self.stride, 1)\n-        self.input = K.placeholder(ndim=3)\n-        self.pool_size = (pool_length, 1)\n+    def __init__(self, pool_size=(2, 2), strides=None, border_mode='valid',\n+                 dim_ordering='th', **kwargs):\n+        super(Pooling2D, self).__init__(**kwargs)\n+        self.input = K.placeholder(ndim=4)\n+        self.pool_size = tuple(pool_size)\n+        if strides is None:\n+            strides = self.pool_size\n+        self.strides = tuple(strides)\n         assert border_mode in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n         self.border_mode = border_mode\n+        assert dim_ordering in {'tf', 'th'}, 'dim_ordering must be in {tf, th}'\n+        self.dim_ordering = dim_ordering\n \n     @property\n     def output_shape(self):\n         input_shape = self.input_shape\n-        length = conv_output_length(input_shape[1], self.pool_length,\n-                                    self.border_mode, self.stride)\n-        return (input_shape[0], length, input_shape[2])\n+        if self.dim_ordering == 'th':\n+            rows = input_shape[2]\n+            cols = input_shape[3]\n+        elif self.dim_ordering == 'tf':\n+            rows = input_shape[1]\n+            cols = input_shape[2]\n+        else:\n+            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n+\n+        rows = conv_output_length(rows, self.pool_size[0],\n+                                  self.border_mode, self.strides[0])\n+        cols = conv_output_length(cols, self.pool_size[1],\n+                                  self.border_mode, self.strides[1])\n+\n+        if self.dim_ordering == 'th':\n+            return (input_shape[0], input_shape[1], rows, cols)\n+        elif self.dim_ordering == 'tf':\n+            return (input_shape[0], rows, cols, input_shape[3])\n+        else:\n+            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n+\n+    def pooling_function(self, back_end, inputs, pool_size, strides, border_mode, dim_ordering):\n+        raise NotImplementedError\n \n     def get_output(self, train=False):\n         X = self.get_input(train)\n-        X = K.expand_dims(X, -1)   # add dummy last dimension\n-        X = K.permute_dimensions(X, (0, 2, 1, 3))\n-        output = K.maxpool2d(X, pool_size=self.pool_size, strides=self.st,\n+        output = self.pooling_function(back_end=K, inputs=X, pool_size=self.pool_size,\n+                strides=self.st,\n                 border_mode=self.border_mode,\n                 dim_ordering='th')\n-        output = K.permute_dimensions(output, (0, 2, 1, 3))\n-        return K.squeeze(output, 3)  # remove dummy last dimension\n+        return output\n \n     def get_config(self):\n         config = {\"name\": self.__class__.__name__,\n-                  \"stride\": self.stride,\n-                  \"pool_length\": self.pool_length,\n-                  \"border_mode\": self.border_mode}\n-        base_config = super(MaxPooling1D, self).get_config()\n+                  \"pool_size\": self.pool_size,\n+                  \"border_mode\": self.border_mode,\n+                  \"strides\": self.strides,\n+                  \"dim_ordering\": self.dim_ordering}\n+        base_config = super(MaxPooling2D, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n+class MaxPooling2D(Pooling2D):\n+    def __init__(self, **kwargs):\n+        super(MaxPooling2D, self).__init__(**kwargs)\n+        output = K.maxpool2d(X, pool_size=self.pool_size,\n+                             strides=self.strides,\n+                             border_mode=self.border_mode,\n+                             dim_ordering=self.dim_ordering)\n+        return output\n+\n class MaxPooling2D(Layer):\n     input_ndim = 4\n \n@@ -396,6 +424,7 @@ class MaxPooling2D(Layer):\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n+\n class UpSampling1D(Layer):\n     input_ndim = 3\n \n@@ -587,3 +616,4 @@ class GlobalPooling2D(Layer):\n     def get_config(self):\n         return {\"name\": self.__class__.__name__,\n                 \"pooling_function\": self.pooling_function.__name__}\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c600a4450c9bbc716a0cfacff6b61e78853dbc52", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 26 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 26 | Churn Cumulative: 1769 | Contributors (this commit): 13 | Commits (past 90d): 27 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -591,29 +591,3 @@ class ZeroPadding2D(Layer):\n                   \"padding\": self.padding}\n         base_config = super(ZeroPadding2D, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n-\n-\n-\n-class GlobalPooling2D(Layer):\n-    \"\"\"\n-    By @entron\n-    Borrowed and modified from here: https://github.com/fchollet/keras/pull/522\n-    \"\"\"\n-    def __init__(self, pooling_function='average'):\n-        super(GlobalPooling2D, self).__init__()\n-        if pooling_function not in {'average', 'max'}:\n-            raise Exception('Invalid pooling function for GlobalPooling2D:', pooling_function)\n-        if pooling_function == 'average':\n-            self.pooling_function = K.mean\n-        else:\n-            self.pooling_function = K.max\n-        self.input = K.placeholder(ndim=4)\n-\n-    def get_output(self, train):\n-        X = self.get_input(train)\n-        return self.pooling_function(self.pooling_function(X, axis=-1), axis=-1)\n-\n-    def get_config(self):\n-        return {\"name\": self.__class__.__name__,\n-                \"pooling_function\": self.pooling_function.__name__}\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6bfb3c648bb0b79d97916e1a53f130a2f6fbd5b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 58 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): -8/0 | Churn Δ: 58 | Churn Cumulative: 1827 | Contributors (this commit): 13 | Commits (past 90d): 28 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -366,64 +366,6 @@ class MaxPooling2D(Pooling2D):\n                              dim_ordering=self.dim_ordering)\n         return output\n \n-class MaxPooling2D(Layer):\n-    input_ndim = 4\n-\n-    def __init__(self, pool_size=(2, 2), strides=None, border_mode='valid',\n-                 dim_ordering='th', **kwargs):\n-        super(MaxPooling2D, self).__init__(**kwargs)\n-        self.input = K.placeholder(ndim=4)\n-        self.pool_size = tuple(pool_size)\n-        if strides is None:\n-            strides = self.pool_size\n-        self.strides = tuple(strides)\n-        assert border_mode in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n-        self.border_mode = border_mode\n-        assert dim_ordering in {'tf', 'th'}, 'dim_ordering must be in {tf, th}'\n-        self.dim_ordering = dim_ordering\n-\n-    @property\n-    def output_shape(self):\n-        input_shape = self.input_shape\n-        if self.dim_ordering == 'th':\n-            rows = input_shape[2]\n-            cols = input_shape[3]\n-        elif self.dim_ordering == 'tf':\n-            rows = input_shape[1]\n-            cols = input_shape[2]\n-        else:\n-            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n-\n-        rows = conv_output_length(rows, self.pool_size[0],\n-                                  self.border_mode, self.strides[0])\n-        cols = conv_output_length(cols, self.pool_size[1],\n-                                  self.border_mode, self.strides[1])\n-\n-        if self.dim_ordering == 'th':\n-            return (input_shape[0], input_shape[1], rows, cols)\n-        elif self.dim_ordering == 'tf':\n-            return (input_shape[0], rows, cols, input_shape[3])\n-        else:\n-            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n-\n-    def get_output(self, train=False):\n-        X = self.get_input(train)\n-        output = K.maxpool2d(X, pool_size=self.pool_size,\n-                             strides=self.strides,\n-                             border_mode=self.border_mode,\n-                             dim_ordering=self.dim_ordering)\n-        return output\n-\n-    def get_config(self):\n-        config = {\"name\": self.__class__.__name__,\n-                  \"pool_size\": self.pool_size,\n-                  \"border_mode\": self.border_mode,\n-                  \"strides\": self.strides,\n-                  \"dim_ordering\": self.dim_ordering}\n-        base_config = super(MaxPooling2D, self).get_config()\n-        return dict(list(base_config.items()) + list(config.items()))\n-\n-\n \n class UpSampling1D(Layer):\n     input_ndim = 3\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#61e5ea1f87dfd2949d9a5bb22998dfaaaca8b0c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 1833 | Contributors (this commit): 13 | Commits (past 90d): 29 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -342,7 +342,7 @@ class Pooling2D(Layer):\n     def get_output(self, train=False):\n         X = self.get_input(train)\n         output = self.pooling_function(back_end=K, inputs=X, pool_size=self.pool_size,\n-                strides=self.st,\n+                strides=self.strides,\n                 border_mode=self.border_mode,\n                 dim_ordering='th')\n         return output\n@@ -360,7 +360,9 @@ class Pooling2D(Layer):\n class MaxPooling2D(Pooling2D):\n     def __init__(self, **kwargs):\n         super(MaxPooling2D, self).__init__(**kwargs)\n-        output = K.maxpool2d(X, pool_size=self.pool_size,\n+\n+    def pooling_function(self, back_end, inputs, pool_size, strides, border_mode, dim_ordering):\n+        output = back_end.maxpool2d(inputs, pool_size=self.pool_size,\n                              strides=self.strides,\n                              border_mode=self.border_mode,\n                              dim_ordering=self.dim_ordering)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#82971dedc435ef90978c72b12d4b9aac32e84492", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1837 | Contributors (this commit): 13 | Commits (past 90d): 30 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -281,7 +281,7 @@ class Pooling1D(Layer):\n                   \"stride\": self.stride,\n                   \"pool_length\": self.pool_length,\n                   \"border_mode\": self.border_mode}\n-        base_config = super(MaxPooling1D, self).get_config()\n+        base_config = super(Pooling1D, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n@@ -353,7 +353,7 @@ class Pooling2D(Layer):\n                   \"border_mode\": self.border_mode,\n                   \"strides\": self.strides,\n                   \"dim_ordering\": self.dim_ordering}\n-        base_config = super(MaxPooling2D, self).get_config()\n+        base_config = super(Pooling2D, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
