{"custom_id": "fastapi#d5e782074f8036ebab58dfded913f67c873044df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 412 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -6,6 +6,9 @@ from pydantic import BaseModel, Schema as PSchema\n from pydantic.types import UrlStr\n \n try:\n+    import email_validator\n+\n+    assert email_validator  # make autoflake ignore the unused import\n     from pydantic.types import EmailStr  # type: ignore\n except ImportError:  # pragma: no cover\n     logging.warning(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0a65c41909d5e259542d8419a941687f2bd9c7af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 100 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 56 | Contributors (this commit): 1 | Commits (past 90d): 105 | Contributors (cumulative): 100 | DMM Complexity: None\n\nDIFF:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@@ -2,7 +2,7 @@\n from pathlib import Path, PurePath\n from string import digits\n \n-directory = Path(\"./docs/tutorial/src\")\n+directory = Path(\"./docs/src\")\n skip_names = {\"bigger_applications\"}\n skip_dirs = {directory / name for name in skip_names}\n dirs = sorted([Path(f) for f in directory.iterdir() if f not in skip_dirs])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b097a538ab4da1812ac73fe2d7f63fab6b351e5c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 37 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.11\"\n+__version__ = \"0.1.12\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c25a71e35218518c64cbacc3532548839b7c7aa2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 165 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 168 | Churn Cumulative: 2062 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 3 | DMM Complexity: 0.8235294117647058\n\nDIFF:\n@@ -51,8 +51,7 @@ def get_app(\n         try:\n             body = None\n             if body_field:\n-                body_bytes = await request.body()\n-                if body_bytes and is_body_form:\n+                if is_body_form:\n                     raw_body = await request.form()\n                     body = {}\n                     for field, value in raw_body.items():\n@@ -60,7 +59,11 @@ def get_app(\n                             body[field] = await value.read()\n                         else:\n                             body[field] = value\n-                elif body_bytes:\n+                    if not body:\n+                        body = None\n+                else:\n+                    body_bytes = await request.body()\n+                    if body_bytes:\n                         body = await request.json()\n         except Exception as e:\n             logging.error(\"Error getting request body\", e)\n\n\n@@ -0,0 +1,159 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from request_forms.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/login/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login Post\",\n+                \"operationId\": \"login_login__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_login\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_login\": {\n+                \"title\": \"Body_login\",\n+                \"required\": [\"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+password_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"password\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+username_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"username\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+username_and_password_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"username\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"password\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/login/\",\n+            {\"username\": \"Foo\", \"password\": \"secret\"},\n+            200,\n+            {\"username\": \"Foo\"},\n+        ),\n+        (\"/login/\", {\"username\": \"Foo\"}, 422, password_required),\n+        (\"/login/\", {\"password\": \"secret\"}, 422, username_required),\n+        (\"/login/\", None, 422, username_and_password_required),\n+    ],\n+)\n+def test_post_body_form(path, body, expected_status, expected_response):\n+    response = client.post(path, data=body)\n+    print(response.text)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n+    print(response.text)\n+    assert response.status_code == 422\n+    assert response.json() == username_and_password_required\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b38fb937b0581d67493164624946d4430475c6df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 420 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -143,6 +143,5 @@ item_id_not_int = {\n )\n def test_post_body(path, body, expected_status, expected_response):\n     response = client.put(path, json=body)\n-    print(response.text)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n\n@@ -1,5 +1,3 @@\n-import sys\n-\n import pytest\n from starlette.testclient import TestClient\n \n@@ -8,8 +6,6 @@ from body_schema.tutorial001 import app\n client = TestClient(app)\n \n \n-print(sys.path)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n\n@@ -1,5 +1,3 @@\n-import sys\n-\n import pytest\n from starlette.testclient import TestClient\n \n@@ -8,8 +6,6 @@ from header_params.tutorial001 import app\n client = TestClient(app)\n \n \n-print(sys.path)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#748dc375db577f62a79bc86776bdc9dca1060d3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 121 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 127 | Churn Cumulative: 711 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -241,7 +241,6 @@ class Form(Body):\n         self,\n         default: Any,\n         *,\n-        sub_key: bool = False,\n         media_type: str = \"application/x-www-form-urlencoded\",\n         alias: str = None,\n         title: str = None,\n@@ -257,7 +256,7 @@ class Form(Body):\n     ):\n         super().__init__(\n             default,\n-            embed=sub_key,\n+            embed=True,\n             media_type=media_type,\n             alias=alias,\n             title=title,\n@@ -278,7 +277,6 @@ class File(Form):\n         self,\n         default: Any,\n         *,\n-        sub_key: bool = False,\n         media_type: str = \"multipart/form-data\",\n         alias: str = None,\n         title: str = None,\n@@ -294,7 +292,6 @@ class File(Form):\n     ):\n         super().__init__(\n             default,\n-            embed=sub_key,\n             media_type=media_type,\n             alias=alias,\n             title=title,\n\n\n@@ -0,0 +1,120 @@\n+import os\n+\n+from starlette.testclient import TestClient\n+\n+from request_files.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/files/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create File Post\",\n+                \"operationId\": \"create_file_files__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_file\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_create_file\": {\n+                \"title\": \"Body_create_file\",\n+                \"required\": [\"file\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422\n+    assert response.json() == file_required\n+\n+\n+def test_multipart_request_files(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    assert response.json() == {\"file_size\": 14}\n\n@@ -147,13 +147,11 @@ username_and_password_required = {\n )\n def test_post_body_form(path, body, expected_status, expected_response):\n     response = client.post(path, data=body)\n-    print(response.text)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n def test_post_body_json():\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    print(response.text)\n     assert response.status_code == 422\n     assert response.json() == username_and_password_required\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f1808de18e087668ba2229f7d92ce443aa7e876d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 174 | Lines Deleted: 11 | Files Changed: 5 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 185 | Churn Cumulative: 640 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -172,3 +172,9 @@ def test_post_body(path, body, expected_status, expected_response):\n     response = client.post(path, json=body)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_post_broken_body():\n+    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"There was an error parsing the body\"}\n\n@@ -110,11 +110,12 @@ def test_post_body_json():\n     assert response.json() == file_required\n \n \n-def test_multipart_request_files(tmpdir):\n+def test_post_file(tmpdir):\n     path = os.path.join(tmpdir, \"test.txt\")\n     with open(path, \"wb\") as file:\n         file.write(b\"<file content>\")\n \n     client = TestClient(app)\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    assert response.status_code == 200\n     assert response.json() == {\"file_size\": 14}\n\n@@ -87,16 +87,6 @@ def test_openapi_scheme():\n     assert response.json() == openapi_schema\n \n \n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n password_required = {\n     \"detail\": [\n         {\n\n\n@@ -0,0 +1,166 @@\n+import os\n+\n+from starlette.testclient import TestClient\n+\n+from request_forms_and_files.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/files/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create File Post\",\n+                \"operationId\": \"create_file_files__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_file\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_create_file\": {\n+                \"title\": \"Body_create_file\",\n+                \"required\": [\"file\", \"token\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n+                    \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+token_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"token\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+file_and_token_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"token\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422\n+    assert response.json() == file_and_token_required\n+\n+\n+def test_post_form_no_file():\n+    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n+    assert response.status_code == 422\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n+    assert response.status_code == 422\n+    assert response.json() == file_and_token_required\n+\n+\n+def test_post_file_no_token(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    assert response.status_code == 422\n+    assert response.json() == token_required\n+\n+\n+def test_post_file_and_token(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\n+        \"/files/\", data={\"token\": \"foo\"}, files={\"file\": open(path, \"rb\")}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"file_size\": 14, \"token\": \"foo\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3269e6a95c2f5afc01d92bd685941a4bb4852e13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 83 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 83 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n\n@@ -0,0 +1,36 @@\n+from starlette.testclient import TestClient\n+\n+from custom_response.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,47 @@\n+from starlette.testclient import TestClient\n+\n+from custom_response.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"text/html\": {\"schema\": {\"type\": \"string\"}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+html_contents = \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.text == html_contents\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d498b7feb33fae599105f9298d78e48944bc6c2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 120 | Churn Cumulative: 120 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n\n@@ -0,0 +1,120 @@\n+from starlette.testclient import TestClient\n+\n+from response_model.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/user/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User Post\",\n+                \"operationId\": \"create_user_user__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"UserOut\": {\n+                \"title\": \"UserOut\",\n+                \"required\": [\"username\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"UserIn\": {\n+                \"title\": \"UserIn\",\n+                \"required\": [\"username\", \"password\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post_user():\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3180f35bdd88a67294d2f1937973c09628b2109a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 179 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -107,8 +107,8 @@ openapi_schema = {\n }\n \n \n-def openapi_schema():\n-    response = client.put(\"/openapi.json\")\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#75407b92952d4a5fabe9b2d7084fddce5725dcbd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1913 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -53,14 +53,14 @@ def get_app(\n             if body_field:\n                 if is_body_form:\n                     raw_body = await request.form()\n-                    body = {}\n+                    form_fields = {}\n                     for field, value in raw_body.items():\n                         if isinstance(value, UploadFile):\n-                            body[field] = await value.read()\n+                            form_fields[field] = await value.read()\n                         else:\n-                            body[field] = value\n-                    if not body:\n-                        body = None\n+                            form_fields[field] = value\n+                    if form_fields:\n+                        body = form_fields\n                 else:\n                     body_bytes = await request.body()\n                     if body_bytes:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a73709507c0778f97584ce67683901ec9da28d2a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 242 | Lines Deleted: 38 | Files Changed: 6 | Hunks: 16 | Methods Changed: 9 | Complexity Δ (Sum/Max): 6/7 | Churn Δ: 280 | Churn Cumulative: 2678 | Contributors (this commit): 1 | Commits (past 90d): 29 | Contributors (cumulative): 6 | DMM Complexity: 0.6363636363636364\n\nDIFF:\n@@ -0,0 +1,27 @@\n+from datetime import datetime, time, timedelta\n+from uuid import UUID\n+\n+from fastapi import Body, FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def read_items(\n+    item_id: UUID,\n+    start_datetime: datetime = Body(None),\n+    end_datetime: datetime = Body(None),\n+    repeat_at: time = Body(None),\n+    process_after: timedelta = Body(None),\n+):\n+    start_process = start_datetime + process_after\n+    duration = end_datetime - start_process\n+    return {\n+        \"item_id\": item_id,\n+        \"start_datetime\": start_datetime,\n+        \"end_datetime\": end_datetime,\n+        \"repeat_at\": repeat_at,\n+        \"process_after\": process_after,\n+        \"start_process\": start_process,\n+        \"duration\": duration,\n+    }\n\n@@ -1,7 +1,10 @@\n import asyncio\n import inspect\n from copy import deepcopy\n+from datetime import date, datetime, time, timedelta\n+from decimal import Decimal\n from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type\n+from uuid import UUID\n \n from fastapi import params\n from fastapi.dependencies.models import Dependant, SecurityRequirement\n@@ -16,7 +19,18 @@ from pydantic.utils import lenient_issubclass\n from starlette.concurrency import run_in_threadpool\n from starlette.requests import Request\n \n-param_supported_types = (str, int, float, bool)\n+param_supported_types = (\n+    str,\n+    int,\n+    float,\n+    bool,\n+    UUID,\n+    date,\n+    datetime,\n+    time,\n+    timedelta,\n+    Decimal,\n+)\n \n \n def get_sub_dependant(*, param: inspect.Parameter, path: str) -> Dependant:\n@@ -74,7 +88,7 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n             assert (\n                 lenient_issubclass(param.annotation, param_supported_types)\n                 or param.annotation == param.empty\n-            ), f\"Path params must be of type str, int, float or boot: {param}\"\n+            ), f\"Path params must be of one of the supported types\"\n             param = signature_params[param_name]\n             add_param_to_fields(\n                 param=param,\n\n@@ -12,11 +12,64 @@ def jsonable_encoder(\n     exclude: Set[str] = set(),\n     by_alias: bool = False,\n     include_none: bool = True,\n+    root_encoder: bool = True,\n+) -> Any:\n+    errors = []\n+    try:\n+        return known_data_encoder(\n+            obj,\n+            include=include,\n+            exclude=exclude,\n+            by_alias=by_alias,\n+            include_none=include_none,\n+        )\n+    except Exception as e:\n+        if not root_encoder:\n+            raise e\n+        errors.append(e)\n+    try:\n+        data = dict(obj)\n+        return jsonable_encoder(\n+            data,\n+            include=include,\n+            exclude=exclude,\n+            by_alias=by_alias,\n+            include_none=include_none,\n+            root_encoder=False,\n+        )\n+    except Exception as e:\n+        if not root_encoder:\n+            raise e\n+        errors.append(e)\n+    try:\n+        data = vars(obj)\n+        return jsonable_encoder(\n+            data,\n+            include=include,\n+            exclude=exclude,\n+            by_alias=by_alias,\n+            include_none=include_none,\n+            root_encoder=False,\n+        )\n+    except Exception as e:\n+        if not root_encoder:\n+            raise e\n+        errors.append(e)\n+        raise ValueError(errors)\n+\n+\n+def known_data_encoder(\n+    obj: Any,\n+    include: Set[str] = None,\n+    exclude: Set[str] = set(),\n+    by_alias: bool = False,\n+    include_none: bool = True,\n ) -> Any:\n     if isinstance(obj, BaseModel):\n         return jsonable_encoder(\n             obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n             include_none=include_none,\n+            root_encoder=False,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n@@ -25,8 +78,10 @@ def jsonable_encoder(\n     if isinstance(obj, dict):\n         return {\n             jsonable_encoder(\n-                key, by_alias=by_alias, include_none=include_none\n-            ): jsonable_encoder(value, by_alias=by_alias, include_none=include_none)\n+                key, by_alias=by_alias, include_none=include_none, root_encoder=False\n+            ): jsonable_encoder(\n+                value, by_alias=by_alias, include_none=include_none, root_encoder=False\n+            )\n             for key, value in obj.items()\n             if value is not None or include_none\n         }\n@@ -38,6 +93,7 @@ def jsonable_encoder(\n                 exclude=exclude,\n                 by_alias=by_alias,\n                 include_none=include_none,\n+                root_encoder=False,\n             )\n             for item in obj\n         ]\n\n@@ -22,9 +22,10 @@ from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n \n def serialize_response(*, field: Field = None, response: Response) -> Any:\n+    encoded = jsonable_encoder(response)\n     if field:\n         errors = []\n-        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n+        value, errors_ = field.validate(encoded, {}, loc=(\"response\",))\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n         elif isinstance(errors_, list):\n@@ -33,7 +34,7 @@ def serialize_response(*, field: Field = None, response: Response) -> Any:\n             raise ValidationError(errors)\n         return jsonable_encoder(value)\n     else:\n-        return jsonable_encoder(response)\n+        return encoded\n \n \n def get_app(\n@@ -86,40 +87,10 @@ def get_app(\n                 raw_response = await run_in_threadpool(dependant.call, **values)\n             if isinstance(raw_response, Response):\n                 return raw_response\n-            if isinstance(raw_response, BaseModel):\n-                return content_type(\n-                    content=serialize_response(\n+            response_data = serialize_response(\n                 field=response_field, response=raw_response\n-                    ),\n-                    status_code=status_code,\n             )\n-            errors = []\n-            try:\n-                return content_type(\n-                    content=serialize_response(\n-                        field=response_field, response=raw_response\n-                    ),\n-                    status_code=status_code,\n-                )\n-            except Exception as e:\n-                errors.append(e)\n-            try:\n-                response = dict(raw_response)\n-                return content_type(\n-                    content=serialize_response(field=response_field, response=response),\n-                    status_code=status_code,\n-                )\n-            except Exception as e:\n-                errors.append(e)\n-            try:\n-                response = vars(raw_response)\n-                return content_type(\n-                    content=serialize_response(field=response_field, response=response),\n-                    status_code=status_code,\n-                )\n-            except Exception as e:\n-                errors.append(e)\n-                raise ValueError(errors)\n+            return content_type(content=response_data, status_code=status_code)\n \n     return app\n \n\n\n@@ -0,0 +1,136 @@\n+from starlette.testclient import TestClient\n+\n+from extra_data_types.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Put\",\n+                \"operationId\": \"read_items_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item_Id\",\n+                            \"type\": \"string\",\n+                            \"format\": \"uuid\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_read_items\"}\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_read_items\": {\n+                \"title\": \"Body_read_items\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"start_datetime\": {\n+                        \"title\": \"Start_Datetime\",\n+                        \"type\": \"string\",\n+                        \"format\": \"date-time\",\n+                    },\n+                    \"end_datetime\": {\n+                        \"title\": \"End_Datetime\",\n+                        \"type\": \"string\",\n+                        \"format\": \"date-time\",\n+                    },\n+                    \"repeat_at\": {\n+                        \"title\": \"Repeat_At\",\n+                        \"type\": \"string\",\n+                        \"format\": \"time\",\n+                    },\n+                    \"process_after\": {\n+                        \"title\": \"Process_After\",\n+                        \"type\": \"string\",\n+                        \"format\": \"time-delta\",\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_extra_types():\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200\n+    assert response.json() == expected_response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#510fec9bee23a9c31157090a2081f2038f7ae5cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 69 | Lines Deleted: 60 | Files Changed: 2 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): 7/11 | Churn Δ: 129 | Churn Cumulative: 228 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,7 +3,7 @@ from types import GeneratorType\n from typing import Any, Set\n \n from pydantic import BaseModel\n-from pydantic.json import pydantic_encoder\n+from pydantic.json import ENCODERS_BY_TYPE\n \n \n def jsonable_encoder(\n@@ -12,64 +12,11 @@ def jsonable_encoder(\n     exclude: Set[str] = set(),\n     by_alias: bool = False,\n     include_none: bool = True,\n-    root_encoder: bool = True,\n-) -> Any:\n-    errors = []\n-    try:\n-        return known_data_encoder(\n-            obj,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n-            include_none=include_none,\n-        )\n-    except Exception as e:\n-        if not root_encoder:\n-            raise e\n-        errors.append(e)\n-    try:\n-        data = dict(obj)\n-        return jsonable_encoder(\n-            data,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n-            include_none=include_none,\n-            root_encoder=False,\n-        )\n-    except Exception as e:\n-        if not root_encoder:\n-            raise e\n-        errors.append(e)\n-    try:\n-        data = vars(obj)\n-        return jsonable_encoder(\n-            data,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n-            include_none=include_none,\n-            root_encoder=False,\n-        )\n-    except Exception as e:\n-        if not root_encoder:\n-            raise e\n-        errors.append(e)\n-        raise ValueError(errors)\n-\n-\n-def known_data_encoder(\n-    obj: Any,\n-    include: Set[str] = None,\n-    exclude: Set[str] = set(),\n-    by_alias: bool = False,\n-    include_none: bool = True,\n ) -> Any:\n     if isinstance(obj, BaseModel):\n         return jsonable_encoder(\n             obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n             include_none=include_none,\n-            root_encoder=False,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n@@ -78,10 +25,8 @@ def known_data_encoder(\n     if isinstance(obj, dict):\n         return {\n             jsonable_encoder(\n-                key, by_alias=by_alias, include_none=include_none, root_encoder=False\n-            ): jsonable_encoder(\n-                value, by_alias=by_alias, include_none=include_none, root_encoder=False\n-            )\n+                key, by_alias=by_alias, include_none=include_none\n+            ): jsonable_encoder(value, by_alias=by_alias, include_none=include_none)\n             for key, value in obj.items()\n             if value is not None or include_none\n         }\n@@ -93,8 +38,22 @@ def known_data_encoder(\n                 exclude=exclude,\n                 by_alias=by_alias,\n                 include_none=include_none,\n-                root_encoder=False,\n             )\n             for item in obj\n         ]\n-    return pydantic_encoder(obj)\n+    errors = []\n+    try:\n+        encoder = ENCODERS_BY_TYPE[type(obj)]\n+        return encoder(obj)\n+    except KeyError as e:\n+        errors.append(e)\n+        try:\n+            data = dict(obj)\n+        except Exception as e:\n+            errors.append(e)\n+            try:\n+                data = vars(obj)\n+            except Exception as e:\n+                errors.append(e)\n+                raise ValueError(errors)\n+    return jsonable_encoder(data, by_alias=by_alias, include_none=include_none)\n\n@@ -0,0 +1,50 @@\n+import pytest\n+from fastapi.encoders import jsonable_encoder\n+\n+\n+class Person:\n+    def __init__(self, name: str):\n+        self.name = name\n+\n+\n+class Pet:\n+    def __init__(self, owner: Person, name: str):\n+        self.owner = owner\n+        self.name = name\n+\n+\n+class DictablePerson(Person):\n+    def __iter__(self):\n+        return ((k, v) for k, v in self.__dict__.items())\n+\n+\n+class DictablePet(Pet):\n+    def __iter__(self):\n+        return ((k, v) for k, v in self.__dict__.items())\n+\n+\n+class Unserializable:\n+    def __iter__(self):\n+        raise NotImplementedError()\n+\n+    @property\n+    def __dict__(self):\n+        raise NotImplementedError()\n+\n+\n+def test_encode_class():\n+    person = Person(name=\"Foo\")\n+    pet = Pet(owner=person, name=\"Firulais\")\n+    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+\n+\n+def test_encode_dictable():\n+    person = DictablePerson(name=\"Foo\")\n+    pet = DictablePet(owner=person, name=\"Firulais\")\n+    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+\n+\n+def test_encode_unsupported():\n+    unserializable = Unserializable()\n+    with pytest.raises(ValueError):\n+        jsonable_encoder(unserializable)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
