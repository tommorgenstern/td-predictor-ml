{"custom_id": "requests#cb15310d6aacd1c1e3b3345b6096d24ea2b79d49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 1370 | Contributors (this commit): 22 | Commits (past 90d): 16 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -414,7 +414,7 @@ def unquote_unreserved(uri):\n         parts = uri.split('%')\n         for i in range(1, len(parts)):\n             h = parts[i][0:2]\n-            if len(h) == 2:\n+            if len(h) == 2 and h.isalnum():\n                 c = chr(int(h, 16))\n                 if c in UNRESERVED_SET:\n                     parts[i] = c + parts[i][2:]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77a57c0e7e669173241a56670ba4d096a303c75e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 347 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.12.1'\n-__build__ = 0x001201\n+__version__ = '0.13.0'\n+__build__ = 0x001300\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#662c3edacc76d6a0e7b55b569c9fea38f8b0bc78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 448 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -30,7 +30,6 @@ import traceback\n \n HOOKS = ('args', 'pre_request', 'pre_send', 'post_request', 'response')\n \n-\n def dispatch_hook(key, hooks, hook_data):\n     \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n \n@@ -44,7 +43,10 @@ def dispatch_hook(key, hooks, hook_data):\n \n         for hook in hooks:\n             try:\n-                hook_data = hook(hook_data) or hook_data\n+                _hook_data = hook(hook_data)\n+                if _hook_data is not None:\n+                    hook_data = _hook_data\n+\n             except Exception:\n                 traceback.print_exc()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c803e3af55e38a848e6c9340cd2f141cb012bc87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 130 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 10 | Complexity Δ (Sum/Max): 21/21 | Churn Δ: 130 | Churn Cumulative: 639 | Contributors (this commit): 8 | Commits (past 90d): 17 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,8 +8,10 @@ This module contains the authentication handlers for Requests.\n \"\"\"\n \n import os\n+import re\n import time\n import hashlib\n+import logging\n \n from base64 import b64encode\n \n@@ -25,6 +27,13 @@ except (ImportError, SyntaxError):\n     SIGNATURE_HMAC = None\n     SIGNATURE_TYPE_AUTH_HEADER = None\n \n+try:\n+    import kerberos as k\n+except ImportError as exc:\n+    k = None\n+\n+log = logging.getLogger(__name__)\n+\n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n \n def _basic_auth_str(username, password):\n@@ -227,3 +236,124 @@ class HTTPDigestAuth(AuthBase):\n     def __call__(self, r):\n         r.register_hook('response', self.handle_401)\n         return r\n+\n+def _negotiate_value(r):\n+    \"\"\"Extracts the gssapi authentication token from the appropriate header\"\"\"\n+\n+    authreq = r.headers.get('www-authenticate', None)\n+\n+    if authreq:\n+        rx = re.compile('(?:.*,)*\\s*Negotiate\\s*([^,]*),?', re.I)\n+        mo = rx.search(authreq)\n+        if mo:\n+            return mo.group(1)\n+\n+    return None\n+\n+class HTTPKerberosAuth(AuthBase):\n+    \"\"\"Attaches HTTP GSSAPI/Kerberos Authentication to the given Request object.\"\"\"\n+    def __init__(self, require_mutual_auth=True):\n+        if k is None:\n+            raise Exception(\"Kerberos libraries unavailable\")\n+        self.context = None\n+        self.require_mutual_auth = require_mutual_auth\n+\n+    def generate_request_header(self, r):\n+        \"\"\"Generates the gssapi authentication token with kerberos\"\"\"\n+\n+        host = urlparse(r.url).netloc\n+        tail, _, head = host.rpartition(':')\n+        domain = tail if tail else head\n+\n+        result, self.context = k.authGSSClientInit(\"HTTP@%s\" % domain)\n+\n+        if result < 1:\n+            raise Exception(\"authGSSClientInit failed\")\n+\n+        result = k.authGSSClientStep(self.context, _negotiate_value(r))\n+\n+        if result < 0:\n+            raise Exception(\"authGSSClientStep failed\")\n+\n+        response = k.authGSSClientResponse(self.context)\n+\n+        return \"Negotiate %s\" % response\n+\n+    def authenticate_user(self, r):\n+        \"\"\"Handles user authentication with gssapi/kerberos\"\"\"\n+\n+        auth_header = self.generate_request_header(r)\n+        log.debug(\"authenticate_user(): Authorization header: %s\" % auth_header)\n+        r.request.headers['Authorization'] = auth_header\n+        r.request.send(anyway=True)\n+        _r = r.request.response\n+        _r.history.append(r)\n+        log.debug(\"authenticate_user(): returning %s\" % _r)\n+        return _r\n+\n+    def handle_401(self, r):\n+        \"\"\"Handles 401's, attempts to use gssapi/kerberos authentication\"\"\"\n+\n+        log.debug(\"handle_401(): Handling: 401\")\n+        if _negotiate_value(r) is not None:\n+            _r = self.authenticate_user(r)\n+            log.debug(\"handle_401(): returning %s\" % _r)\n+            return _r\n+        else:\n+            log.debug(\"handle_401(): Kerberos is not supported\")\n+            log.debug(\"handle_401(): returning %s\" % r)\n+            return r\n+\n+    def handle_other(self, r):\n+        \"\"\"Handles all responses with the exception of 401s.\n+\n+        This is necessary so that we can authenticate responses if requested\"\"\"\n+\n+        log.debug(\"handle_other(): Handling: %d\" % r.status_code)\n+        self.deregister(r)\n+        if self.require_mutual_auth:\n+            if _negotiate_value(r) is not None:\n+                log.debug(\"handle_other(): Authenticating the server\")\n+                _r = self.authenticate_server(r)\n+                log.debug(\"handle_other(): returning %s\" % _r)\n+                return _r\n+            else:\n+                log.error(\"handle_other(): Mutual authentication failed\")\n+                raise Exception(\"Mutual authentication failed\")\n+        else:\n+            log.debug(\"handle_other(): returning %s\" % r)\n+            return r\n+\n+    def authenticate_server(self, r):\n+        \"\"\"Uses GSSAPI to authenticate the server\"\"\"\n+\n+        log.debug(\"authenticate_server(): Authenticate header: %s\" % _negotiate_value(r))\n+        result = k.authGSSClientStep(self.context, _negotiate_value(r))\n+        if  result < 1:\n+            raise Exception(\"authGSSClientStep failed\")\n+        _r = r.request.response\n+        log.debug(\"authenticate_server(): returning %s\" % _r)\n+        return _r\n+\n+    def handle_response(self, r):\n+        \"\"\"Takes the given response and tries kerberos-auth, as needed.\"\"\"\n+\n+        if r.status_code == 401:\n+            _r = self.handle_401(r)\n+            log.debug(\"handle_response returning %s\" % _r)\n+            return _r\n+        else:\n+            _r = self.handle_other(r)\n+            log.debug(\"handle_response returning %s\" % _r)\n+            return _r\n+\n+        log.debug(\"handle_response returning %s\" % r)\n+        return r\n+\n+    def deregister(self, r):\n+        \"\"\"Deregisters the response handler\"\"\"\n+        r.request.deregister_hook('response', self.handle_response)\n+\n+    def __call__(self, r):\n+        r.register_hook('response', self.handle_response)\n+        return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#62a23bfbdecf54e13e571237df5a175e53d539cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 252 | Contributors (this commit): 6 | Commits (past 90d): 11 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -30,11 +30,14 @@ packages = [\n     'requests.packages.urllib3.packages.mimetools_choose_boundary',\n ]\n \n-# certifi is a Python package containing a CA certificate bundle for SSL verification.\n-# On certain supported platforms (e.g., Red Hat / Debian / FreeBSD), Requests can\n-# use the system CA bundle instead; see `requests.utils` for details.\n-# If your platform is supported, set `requires` to [] instead:\n-requires = ['certifi>=0.0.7']\n+requires = []\n+\n+# certifi is a Python package containing a CA certificate bundle for SSL\n+# verification.  On certain supported platforms (e.g., Red Hat / Debian /\n+# FreeBSD), Requests can use the system CA bundle instead; see `requests.utils`\n+# for details.\n+if not requests.utils.get_os_ca_bundle_path():\n+    requires.append('certifi>=0.0.7')\n \n # chardet is used to optimally guess the encodings of pages that don't declare one.\n # At this time, chardet is not a required dependency. However, it's sufficiently\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#488a51d619c7175248fba1f904a834224c009966", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 265 | Contributors (this commit): 6 | Commits (past 90d): 12 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -30,14 +30,11 @@ packages = [\n     'requests.packages.urllib3.packages.mimetools_choose_boundary',\n ]\n \n-requires = []\n-\n-# certifi is a Python package containing a CA certificate bundle for SSL\n-# verification.  On certain supported platforms (e.g., Red Hat / Debian /\n-# FreeBSD), Requests can use the system CA bundle instead; see `requests.utils`\n-# for details.\n-if not requests.utils.get_os_ca_bundle_path():\n-    requires.append('certifi>=0.0.7')\n+# certifi is a Python package containing a CA certificate bundle for SSL verification.\n+# On certain supported platforms (e.g., Red Hat / Debian / FreeBSD), Requests can\n+# use the system CA bundle instead; see `requests.utils` for details.\n+# If your platform is supported, set `requires` to [] instead:\n+requires = ['certifi>=0.0.7']\n \n # chardet is used to optimally guess the encodings of pages that don't declare one.\n # At this time, chardet is not a required dependency. However, it's sufficiently\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f0e327f979edcd5e0ef0d03a0f48987bc411bcb6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 27 | Churn Cumulative: 5944 | Contributors (this commit): 67 | Commits (past 90d): 84 | Contributors (cumulative): 79 | DMM Complexity: 0.875\n\nDIFF:\n@@ -90,7 +90,7 @@ class Request(object):\n         #: HTTP Method to use.\n         self.method = method\n \n-        #: Dictionary or byte of request body data to attach to the\n+        #: Dictionary, bytes or file stream of request body data to attach to the\n         #: :class:`Request <Request>`.\n         self.data = None\n \n@@ -323,6 +323,8 @@ class Request(object):\n             return data\n         if isinstance(data, str):\n             return data\n+        elif hasattr(data, 'read'):\n+            return data\n         elif hasattr(data, '__iter__'):\n             try:\n                 dict(data)\n@@ -507,7 +509,7 @@ class Request(object):\n             if self.data:\n \n                 body = self._encode_params(self.data)\n-                if isinstance(self.data, str):\n+                if isinstance(self.data, str) or hasattr(self.data, 'read'):\n                     content_type = None\n                 else:\n                     content_type = 'application/x-www-form-urlencoded'\n\n@@ -12,6 +12,7 @@ import json\n import os\n import unittest\n import pickle\n+import tempfile\n \n import requests\n from requests.compat import str, StringIO\n@@ -463,6 +464,26 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert rbody.get('form') in (None, {})\n             self.assertEqual(rbody.get('data'), 'fooaowpeuf')\n \n+    def test_file_post_data(self):\n+\n+        filecontent = \"fooaowpeufbarasjhf\"\n+        testfile = tempfile.NamedTemporaryFile()\n+        testfile.write(filecontent)\n+        testfile.flush()\n+\n+        for service in SERVICES:\n+\n+            r = post(service('post'), data=open(testfile.name, \"rb\"),\n+                    headers={\"content-type\": \"application/octet-stream\"})\n+\n+            self.assertEqual(r.status_code, 200)\n+            self.assertEqual(r.headers['content-type'], 'application/json')\n+            self.assertEqual(r.url, service('post'))\n+\n+            rbody = json.loads(r.text)\n+            assert rbody.get('form') in (None, {})\n+            self.assertEqual(rbody.get('data'), filecontent)\n+\n     def test_urlencoded_post_querystring(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e8f3fc33bb66fccde7d7316ab0afef7d1d601183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 620 | Contributors (this commit): 13 | Commits (past 90d): 23 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -913,5 +913,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r2 = requests.get(httpbin('get'), config=dict(keep_alive=False))\n         self.assertEqual(r2.headers['Connection'].lower(), 'close')\n \n+    def test_head_content(self):\n+        \"\"\"Test that empty bodies are properly supported.\"\"\"\n+\n+        r = requests.head(httpbin('headers'))\n+        r.content\n+        r.text\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#843672f4fe1158fc21e2bdabba44c178707766a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 5334 | Contributors (this commit): 66 | Commits (past 90d): 56 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -785,6 +785,9 @@ class Response(object):\n         content = None\n         encoding = self.encoding\n \n+        if not self.content:\n+            return u''\n+\n         # Fallback to auto-detected encoding.\n         if self.encoding is None:\n             if chardet is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fadcf799def168cc2ac3c2f09c865745813fd043", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5336 | Contributors (this commit): 66 | Commits (past 90d): 57 | Contributors (cumulative): 66 | DMM Complexity: None\n\nDIFF:\n@@ -786,7 +786,7 @@ class Response(object):\n         encoding = self.encoding\n \n         if not self.content:\n-            return u''\n+            return str('')\n \n         # Fallback to auto-detected encoding.\n         if self.encoding is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c2306baec8da79f0e4b879127b77a7b37760bbc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 351 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.0'\n-__build__ = 0x001300\n+__version__ = '0.13.1'\n+__build__ = 0x001301\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#10d23981736e0cd7d864b12cd8d12edd9a4d8b6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 624 | Contributors (this commit): 13 | Commits (past 90d): 24 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -466,7 +466,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n     def test_file_post_data(self):\n \n-        filecontent = \"fooaowpeufbarasjhf\"\n+        filecontent = b\"fooaowpeufbarasjhf\"\n         testfile = tempfile.NamedTemporaryFile()\n         testfile.write(filecontent)\n         testfile.flush()\n@@ -482,7 +482,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             rbody = json.loads(r.text)\n             assert rbody.get('form') in (None, {})\n-            self.assertEqual(rbody.get('data'), filecontent)\n+            self.assertEqual(rbody.get('data'), filecontent.decode('ascii'))\n \n     def test_urlencoded_post_querystring(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#98b8316c0c1343f94749c3dde785ffaf7e70a04b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 487 | Contributors (this commit): 4 | Commits (past 90d): 12 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -39,7 +39,7 @@ class MockRequest(object):\n     def get_origin_req_host(self):\n         if self._r.response.history:\n             r = self._r.response.history[0]\n-            return urlparse(r).netloc\n+            return urlparse(r.url).netloc\n         else:\n             return self.get_host()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8d75cdf7fede6a8059e683dd2a32cc7f42691cc6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 632 | Contributors (this commit): 13 | Commits (past 90d): 25 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -467,15 +467,18 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_file_post_data(self):\n \n         filecontent = b\"fooaowpeufbarasjhf\"\n-        testfile = tempfile.NamedTemporaryFile()\n+        testfile = tempfile.NamedTemporaryFile(delete=False)\n         testfile.write(filecontent)\n         testfile.flush()\n+        testfile.close()\n \n         for service in SERVICES:\n \n-            r = post(service('post'), data=open(testfile.name, \"rb\"),\n+            data = open(testfile.name, \"rb\")\n+            r = post(service('post'), data=data,\n                     headers={\"content-type\": \"application/octet-stream\"})\n \n+            data.close()\n             self.assertEqual(r.status_code, 200)\n             self.assertEqual(r.headers['content-type'], 'application/json')\n             self.assertEqual(r.url, service('post'))\n@@ -483,6 +486,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             rbody = json.loads(r.text)\n             assert rbody.get('form') in (None, {})\n             self.assertEqual(rbody.get('data'), filecontent.decode('ascii'))\n+        os.remove(testfile.name)\n \n     def test_urlencoded_post_querystring(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#66ef8886c6523e59d75bed40fedd3145fe0afe25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1374 | Contributors (this commit): 23 | Commits (past 90d): 20 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -40,6 +40,10 @@ POSSIBLE_CA_BUNDLE_PATHS = [\n         '/etc/ssl/certs/ca-certificates.crt',\n         # FreeBSD (provided by the ca_root_nss package):\n         '/usr/local/share/certs/ca-root-nss.crt',\n+        # openSUSE (provided by the ca-certificates package), the 'certs' directory is the\n+        # preferred way but may not be supported by the SSL module, thus it has 'ca-bundle.pem'\n+        # as a fallback (which is generated from pem files in the 'certs' directory):\n+        '/etc/ssl/ca-bundle.pem',\n ]\n \n def get_os_ca_bundle_path():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d3acb783b95623d0378db02bd9832fb11850204b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 54 | Files Changed: 4 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/4 | Churn Δ: 96 | Churn Cumulative: 2558 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -258,6 +258,9 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         if sock:\n             sock.settimeout(timeout)\n \n+        try: # Python 2.7+, use buffering of HTTP responses\n+            httplib_response = conn.getresponse(buffering=True)\n+        except TypeError: # Python 2.6 and older\n             httplib_response = conn.getresponse()\n \n         # AppEngine doesn't have a version attr.\n\n@@ -7,11 +7,7 @@\n import codecs\n import mimetypes\n \n-try:\n-    from mimetools import choose_boundary\n-except ImportError:\n-    from .packages.mimetools_choose_boundary import choose_boundary\n-\n+from uuid import uuid4\n from io import BytesIO\n \n from .packages import six\n@@ -20,6 +16,13 @@ from .packages.six import b\n writer = codecs.lookup('utf-8')[3]\n \n \n+def choose_boundary():\n+    \"\"\"\n+    Our embarassingly-simple replacement for mimetools.choose_boundary.\n+    \"\"\"\n+    return uuid4().hex\n+\n+\n def get_content_type(filename):\n     return mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n \n\n@@ -1,47 +0,0 @@\n-\"\"\"The function mimetools.choose_boundary() from Python 2.7, which seems to\n-have disappeared in Python 3 (although email.generator._make_boundary() might\n-work as a replacement?).\n-\n-Tweaked to use lock from threading rather than thread.\n-\"\"\"\n-import os\n-from threading import Lock\n-_counter_lock = Lock()\n-\n-_counter = 0\n-def _get_next_counter():\n-    global _counter\n-    with _counter_lock:\n-        _counter += 1\n-        return _counter\n-\n-_prefix = None\n-\n-def choose_boundary():\n-    \"\"\"Return a string usable as a multipart boundary.\n-\n-    The string chosen is unique within a single program run, and\n-    incorporates the user id (if available), process id (if available),\n-    and current time.  So it's very unlikely the returned string appears\n-    in message text, but there's no guarantee.\n-\n-    The boundary contains dots so you have to quote it in the header.\"\"\"\n-\n-    global _prefix\n-    import time\n-    if _prefix is None:\n-        import socket\n-        try:\n-            hostid = socket.gethostbyname(socket.gethostname())\n-        except socket.gaierror:\n-            hostid = '127.0.0.1'\n-        try:\n-            uid = repr(os.getuid())\n-        except AttributeError:\n-            uid = '1'\n-        try:\n-            pid = repr(os.getpid())\n-        except AttributeError:\n-            pid = '1'\n-        _prefix = hostid + '.' + uid + '.' + pid\n-    return \"%s.%.3f.%d\" % (_prefix, time.time(), _get_next_counter())\n\n@@ -72,6 +72,32 @@ def make_headers(keep_alive=None, accept_encoding=None, user_agent=None,\n     return headers\n \n \n+def split_first(s, delims):\n+    \"\"\"\n+    Given a string and an iterable of delimiters, split on the first found\n+    delimiter. Return two split parts.\n+\n+    If not found, then the first part is the full input string.\n+\n+    Scales linearly with number of delims. Not ideal for large number of delims.\n+    \"\"\"\n+    min_idx = None\n+    for d in delims:\n+        idx = s.find(d)\n+        if idx < 0:\n+            continue\n+\n+        if not min_idx:\n+            min_idx = idx\n+        else:\n+            min_idx = min(idx, min_idx)\n+\n+    if min_idx < 0:\n+        return s, ''\n+\n+    return s[:min_idx], s[min_idx+1:]\n+\n+\n def get_host(url):\n     \"\"\"\n     Given a url, return its scheme, host and port (None if it's not there).\n@@ -91,8 +117,11 @@ def get_host(url):\n \n     if '://' in url:\n         scheme, url = url.split('://', 1)\n-    if '/' in url:\n-        url, _path = url.split('/', 1)\n+\n+    # Find the earliest Authority Terminator\n+    # http://tools.ietf.org/html/rfc3986#section-3.2\n+    url, _path = split_first(url, ['/', '?', '#'])\n+\n     if '@' in url:\n         _auth, url = url.split('@', 1)\n     if ':' in url:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c7514faf4aa55be634d6e25ce16eb72974b948ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 5 | Churn Cumulative: 5341 | Contributors (this commit): 66 | Commits (past 90d): 54 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -815,6 +815,11 @@ class Response(object):\n         except ValueError:\n             return None\n \n+    @property\n+    def reason(self):\n+        \"\"\"The HTTP Reason for the response.\"\"\"\n+        return self.raw.reason\n+\n     def raise_for_status(self, allow_redirects=True):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4e568c18991fb033290375f467b74384da10a60b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -21/0 | Churn Δ: 4 | Churn Cumulative: 643 | Contributors (this commit): 9 | Commits (past 90d): 17 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -83,12 +83,12 @@ class OAuth1(AuthBase):\n                 # to preserve body. \n                 r.headers['Content-Type'] = 'multipart/form-encoded'\n                 r.url, r.headers, _ = self.client.sign(\n-                    unicode(r.url), unicode(r.method), None, r.headers)\n+                    unicode(r.full_url), unicode(r.method), None, r.headers)\n             else:\n                 # Normal signing\n                 r.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n                 r.url, r.headers, r.data = self.client.sign(\n-                    unicode(r.url), unicode(r.method), r.data, r.headers)\n+                    unicode(r.full_url), unicode(r.method), r.data, r.headers)\n \n             # Having the authorization header, key or value, in unicode will\n             # result in UnicodeDecodeErrors when the request is concatenated\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80ceaa47dadf10fd0feffeb4c51c9cd5ab6a6482", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 266 | Contributors (this commit): 7 | Commits (past 90d): 13 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,6 @@ packages = [\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.packages.ssl_match_hostname',\n-    'requests.packages.urllib3.packages.mimetools_choose_boundary',\n ]\n \n # certifi is a Python package containing a CA certificate bundle for SSL verification.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8f0ac668da796b04df9901db58f5d4215be308dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 13 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 57 | Churn Cumulative: 2439 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -28,7 +28,7 @@ from .util import make_headers, get_host\n \n # Set default logging handler to avoid \"No handler found\" warnings.\n import logging\n-try:\n+try:  # Python 2.7+\n     from logging import NullHandler\n except ImportError:\n     class NullHandler(logging.Handler):\n@@ -37,6 +37,22 @@ except ImportError:\n \n logging.getLogger(__name__).addHandler(NullHandler())\n \n+def add_stderr_logger(level=logging.DEBUG):\n+    \"\"\"\n+    Helper for quickly adding a StreamHandler to the logger. Useful for\n+    debugging.\n+\n+    Returns the handler after adding it.\n+    \"\"\"\n+    # This method needs to be in this __init__.py to get the __name__ correct\n+    # even if urllib3 is vendored within another package.\n+    logger = logging.getLogger(__name__)\n+    handler = logging.StreamHandler()\n+    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))\n+    logger.addHandler(handler)\n+    logger.setLevel(level)\n+    logger.debug('Added an stderr logging handler to logger: %s' % __name__)\n+    return handler\n+\n # ... Clean up.\n-del logging\n del NullHandler\n\n@@ -264,7 +264,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             httplib_response = conn.getresponse()\n \n         # AppEngine doesn't have a version attr.\n-        http_version = getattr(conn, '_http_vsn_str', 'HTTP/?'),\n+        http_version = getattr(conn, '_http_vsn_str', 'HTTP/?')\n         log.debug(\"\\\"%s %s %s\\\" %s %s\" % (method, url, http_version,\n                                           httplib_response.status,\n                                           httplib_response.length))\n@@ -324,8 +324,8 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             Number of retries to allow before raising a MaxRetryError exception.\n \n         :param redirect:\n-            Automatically handle redirects (status codes 301, 302, 303, 307),\n-            each redirect counts as a retry.\n+            If True, automatically handle redirects (status codes 301, 302,\n+            303, 307). Each redirect counts as a retry.\n \n         :param assert_same_host:\n             If ``True``, will make sure that the host of the pool requests is\n\n@@ -110,30 +110,47 @@ def get_host(url):\n         ('http', 'google.com', 80)\n     \"\"\"\n \n-    # This code is actually similar to urlparse.urlsplit, but much\n-    # simplified for our needs.\n-    port = None\n-    scheme = 'http'\n+    # While this code has overlap with stdlib's urlparse, it is much\n+    # simplified for our needs and less annoying.\n+    # Additionally, this imeplementations does silly things to be optimal\n+    # on CPython.\n \n+    scheme = 'http'\n+    host = None\n+    port = None\n+\n+    # Scheme\n     if '://' in url:\n         scheme, url = url.split('://', 1)\n \n     # Find the earliest Authority Terminator\n-    # http://tools.ietf.org/html/rfc3986#section-3.2\n+    # (http://tools.ietf.org/html/rfc3986#section-3.2)\n     url, _path = split_first(url, ['/', '?', '#'])\n \n+    # Auth\n     if '@' in url:\n         _auth, url = url.split('@', 1)\n+\n+    # IPv6\n+    if url and url[0] == '[':\n+        host, url = url[1:].split(']', 1)\n+\n+    # Port\n     if ':' in url:\n-        url, port = url.split(':', 1)\n+        _host, port = url.split(':', 1)\n+\n+        if not host:\n+            host = _host\n \n         if not port.isdigit():\n             raise LocationParseError(\"Failed to parse: %s\" % url)\n \n         port = int(port)\n \n-    return scheme, url, port\n+    elif not host:\n+        host = url\n \n+    return scheme, host, port\n \n \n def is_connection_dropped(conn):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#74a4d06d58106ac0e258df1ede94c5ecfad33945", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 5343 | Contributors (this commit): 67 | Commits (past 90d): 51 | Contributors (cumulative): 67 | DMM Complexity: None\n\nDIFF:\n@@ -569,7 +569,7 @@ class Request(object):\n             conn.cert_reqs = 'CERT_NONE'\n             conn.ca_certs = None\n \n-        if self.cert and self.verify:\n+        if self.cert:\n             if len(self.cert) == 2:\n                 conn.cert_file = self.cert[0]\n                 conn.key_file = self.cert[1]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c3ad7af06c5fdd603d4ac114cfa114a12a386d10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 31 | Churn Cumulative: 1405 | Contributors (this commit): 23 | Commits (past 90d): 16 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,27 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+ceritfi.py\n+~~~~~~~~~~\n+\n+This module returns the installation location of cacert.pem.\n+\"\"\"\n+\n+import os\n+try:\n+    import certifi\n+except ImportError:\n+    certifi = None\n+\n+\n+def where():\n+\n+    if certifi:\n+        return certifi.where()\n+    else:\n+        f = os.path.split(__file__)[0]\n+        return os.path.join(f, 'cacert.pem')\n+\n+if __name__ == '__main__':\n+    print(where())\n\n@@ -25,8 +25,8 @@ _hush_pyflakes = (RequestsCookieJar,)\n CERTIFI_BUNDLE_PATH = None\n try:\n     # see if requests's own CA certificate bundle is installed\n-    import certifi\n-    CERTIFI_BUNDLE_PATH = certifi.where()\n+    from . import certs\n+    CERTIFI_BUNDLE_PATH = certs.where()\n except ImportError:\n     pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a17fdf622403d487504af67708b8e6d973760eb7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 5470 | Contributors (this commit): 68 | Commits (past 90d): 54 | Contributors (cumulative): 70 | DMM Complexity: None\n\nDIFF:\n@@ -85,6 +85,7 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n+    from .packages import chardet\n \n     bytes = str\n     str = unicode\n@@ -98,6 +99,7 @@ elif is_py3:\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n     from io import StringIO\n+    from .packages import chardet2 as chardet\n \n     str = str\n     bytes = bytes\n\n@@ -32,15 +32,7 @@ from .utils import (\n     DEFAULT_CA_BUNDLE_PATH)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n-    StringIO, is_py2)\n-\n-# Import chardet if it is available.\n-try:\n-    import chardet\n-    # hush pyflakes\n-    chardet\n-except ImportError:\n-    chardet = None\n+    StringIO, is_py2, chardet)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35f6671ec583e75b90a026167e18cb41cdb7d760", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 289 | Contributors (this commit): 7 | Commits (past 90d): 14 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ import os\n import sys\n \n import requests\n-from requests.compat import is_py3\n+from requests.compat import is_py2\n \n try:\n     from setuptools import setup\n@@ -24,28 +24,18 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n+    'requests.packages.chardet',\n+    'requests.packages.chardet2',\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.packages.ssl_match_hostname',\n ]\n \n-# certifi is a Python package containing a CA certificate bundle for SSL verification.\n-# On certain supported platforms (e.g., Red Hat / Debian / FreeBSD), Requests can\n-# use the system CA bundle instead; see `requests.utils` for details.\n-# If your platform is supported, set `requires` to [] instead:\n-requires = ['certifi>=0.0.7']\n+requires = []\n \n-# chardet is used to optimally guess the encodings of pages that don't declare one.\n-# At this time, chardet is not a required dependency. However, it's sufficiently\n-# important that pip/setuptools should install it when it's unavailable.\n-if is_py3:\n-    chardet_package = 'chardet2'\n-else:\n-    chardet_package = 'chardet>=1.0.0'\n+if is_py2:\n     requires.append('oauthlib>=0.1.0,<0.2.0')\n \n-requires.append(chardet_package)\n-\n setup(\n     name='requests',\n     version=requests.__version__,\n@@ -56,7 +46,8 @@ setup(\n     author_email='me@kennethreitz.com',\n     url='http://python-requests.org',\n     packages=packages,\n-    package_data={'': ['LICENSE', 'NOTICE']},\n+    package_data={'': ['LICENSE', 'NOTICE'], 'requests': ['*.pem']},\n+    package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n     license=open(\"LICENSE\").read(),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a1fd038d2cc5ffe9a9a68bf37deec65ff5de64b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 672 | Contributors (this commit): 9 | Commits (past 90d): 19 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,23 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests._oauth\n+~~~~~~~~~~~~~~~\n+\n+This module comtains the path hack neccesary for oauthlib to be vendored into requests\n+while allowing upstream changes.\n+\"\"\"\n+\n+import os\n+import sys\n+\n+try:\n+    from oauthlib.oauth1 import rfc5849\n+    from oauthlib.common import extract_params\n+    from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n+except ImportError:\n+    path = os.path.abspath('/'.join(__file__.split('/')[:-1]+['packages']))\n+    sys.path.insert(0, path)\n+    from oauthlib.oauth1 import rfc5849\n+    from oauthlib.common import extract_params\n+    from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n\\ No newline at end of file\n\n@@ -17,10 +17,8 @@ from .compat import urlparse, str\n from .utils import parse_dict_header\n \n try:\n-    from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n-    from oauthlib.common import extract_params\n-    # hush pyflakes:\n-    SIGNATURE_HMAC; SIGNATURE_TYPE_AUTH_HEADER\n+    from ._oauth import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER, extract_params)\n+\n except (ImportError, SyntaxError):\n     SIGNATURE_HMAC = None\n     SIGNATURE_TYPE_AUTH_HEADER = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fb2ce4f0dc063decfb7ce7da0e91b52f41646896", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 663 | Contributors (this commit): 9 | Commits (past 90d): 25 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.1'\n-__build__ = 0x001301\n+__version__ = '0.13.2'\n+__build__ = 0x001302\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n@@ -1,9 +1,5 @@\n #!/usr/bin/env python\n \n-\"\"\"\n-distutils/setuptools install script. See inline comments for packaging documentation.\n-\"\"\"\n-\n import os\n import sys\n \n@@ -11,8 +7,6 @@ import requests\n \n try:\n     from setuptools import setup\n-    # hush pyflakes\n-    setup\n except ImportError:\n     from distutils.core import setup\n \n@@ -23,6 +17,11 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n+    'requests.packages.oauthlib',\n+    'requests.packages.oauthlib.oauth1',\n+    'requests.packages.oauthlib.oauth1.rfc5849',\n+    'requests.packages.oauthlib.oauth2',\n+    'requests.packages.oauthlib.oauth2.draft25',\n     'requests.packages.chardet',\n     'requests.packages.chardet2',\n     'requests.packages.urllib3',\n@@ -46,7 +45,7 @@ setup(\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n-    license=open(\"LICENSE\").read(),\n+    license=open('LICENSE').read(),\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n         'Intended Audience :: Developers',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#254adf9dc8f11257c59961408b06a3d80af086c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 324 | Contributors (this commit): 7 | Commits (past 90d): 17 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -4,6 +4,7 @@ import os\n import sys\n \n import requests\n+import requests.compat import is_py2\n \n try:\n     from setuptools import setup\n@@ -17,17 +18,22 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n+    'requests.packages.urllib3',\n+    'requests.packages.urllib3.packages',\n+    'requests.packages.urllib3.packages.ssl_match_hostname'\n+]\n+\n+if is_py2:\n+    packages.extend([\n         'requests.packages.oauthlib',\n         'requests.packages.oauthlib.oauth1',\n         'requests.packages.oauthlib.oauth1.rfc5849',\n         'requests.packages.oauthlib.oauth2',\n         'requests.packages.oauthlib.oauth2.draft25',\n         'requests.packages.chardet',\n-    'requests.packages.chardet2',\n-    'requests.packages.urllib3',\n-    'requests.packages.urllib3.packages',\n-    'requests.packages.urllib3.packages.ssl_match_hostname'\n-]\n+    ])\n+else:\n+    packages.append('requests.packages.chardet2')\n \n requires = []\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d983cfabe232e99f379ef9f0f63bc85993a5217f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 326 | Contributors (this commit): 7 | Commits (past 90d): 18 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ import os\n import sys\n \n import requests\n-import requests.compat import is_py2\n+from requests.compat import is_py2\n \n try:\n     from setuptools import setup\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#982268a2019b451b587f717675039ebccf00a658", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 33 | Churn Cumulative: 196 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -26,14 +26,41 @@ Configurations:\n \n SCHEMAS = ['http', 'https']\n \n+import platform\n+import sys\n+\n from . import __version__\n \n defaults = dict()\n \n \n+_implementation = platform.python_implementation()\n+\n+if _implementation == 'CPython':\n+    _implementation_version = platform.python_version()\n+elif _implementation == 'PyPy':\n+    _implementation_version = '%s.%s.%s' % (\n+                                                sys.pypy_version_info.major,\n+                                                sys.pypy_version_info.minor,\n+                                                sys.pypy_version_info.micro\n+                                            )\n+    if sys.pypy_version_info.releaselevel != 'final':\n+        _implementation_version = ''.join([_implementation_version, sys.pypy_version_info.releaselevel])\n+elif _implementation == 'Jython':\n+    # @@@ Is there a better way of getting this?\n+    _implementation_version = platform.python_version()\n+elif _implementation == 'IronPython':\n+    # @@@ Is there a better way of getting this?\n+    _implementation_version = platform.python_version()\n+else:\n+    _implementation_version = 'Unknown'\n+\n+\n defaults['base_headers'] = {\n-    'User-Agent': 'python-requests/%s' % __version__,\n-    'Accept-Encoding': ', '.join(('identity', 'deflate', 'compress', 'gzip')),\n+    'User-Agent': \" \".join([\n+            'python-requests/%s' % __version__,\n+            '%s/%s' % (_implementation, _implementation_version),\n+        ]),\n     'Accept': '*/*'\n }\n \n@@ -49,5 +76,3 @@ defaults['keep_alive'] = True\n defaults['encode_uri'] = True\n defaults['trust_env'] = True\n defaults['store_cookies'] = True\n-\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
