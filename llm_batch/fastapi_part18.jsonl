{"custom_id": "fastapi#2bd775988f77df397aee3a1caf4de90146b7f363", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 795 | Lines Deleted: 598 | Files Changed: 19 | Hunks: 76 | Methods Changed: 88 | Complexity Δ (Sum/Max): 31/13 | Churn Δ: 1393 | Churn Cumulative: 7407 | Contributors (this commit): 4 | Commits (past 90d): 63 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    value: str\n+\n+\n+class Message(BaseModel):\n+    message: str\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\n+async def read_item(item_id: str):\n+    if item_id == \"foo\":\n+        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+    else:\n+        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import FileResponse\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    value: str\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\n+    \"/items/{item_id}\",\n+    response_model=Item,\n+    responses={\n+        200: {\n+            \"content\": {\"image/png\": {}},\n+            \"description\": \"Return the JSON item or an image.\",\n+        }\n+    },\n+)\n+async def read_item(item_id: str, img: bool = None):\n+    if img:\n+        return FileResponse(\"image.png\", media_type=\"image/png\")\n+    else:\n+        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n@@ -0,0 +1,37 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    value: str\n+\n+\n+class Message(BaseModel):\n+    message: str\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\n+    \"/items/{item_id}\",\n+    response_model=Item,\n+    responses={\n+        404: {\"model\": Message, \"description\": \"The item was not found\"},\n+        200: {\n+            \"description\": \"Item requested by ID\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n+                }\n+            },\n+        },\n+    },\n+)\n+async def read_item(item_id: str):\n+    if item_id == \"foo\":\n+        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+    else:\n+        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n\n@@ -0,0 +1,30 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import FileResponse\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    value: str\n+\n+\n+responses = {\n+    404: {\"description\": \"Item not found\"},\n+    302: {\"description\": \"The item was moved\"},\n+    403: {\"description\": \"Not enough privileges\"},\n+}\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\n+    \"/items/{item_id}\",\n+    response_model=Item,\n+    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n+)\n+async def read_item(item_id: str, img: bool = None):\n+    if img:\n+        return FileResponse(\"image.png\", media_type=\"image/png\")\n+    else:\n+        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n\n@@ -5,4 +5,9 @@ from .routers import items, users\n app = FastAPI()\n \n app.include_router(users.router)\n-app.include_router(items.router, prefix=\"/items\", tags=[\"items\"])\n+app.include_router(\n+    items.router,\n+    prefix=\"/items\",\n+    tags=[\"items\"],\n+    responses={404: {\"description\": \"Not found\"}},\n+)\n\n@@ -1,4 +1,4 @@\n-from fastapi import APIRouter\n+from fastapi import APIRouter, HTTPException\n \n router = APIRouter()\n \n@@ -11,3 +11,14 @@ async def read_items():\n @router.get(\"/{item_id}\")\n async def read_item(item_id: str):\n     return {\"name\": \"Fake Specific Item\", \"item_id\": item_id}\n+\n+\n+@router.put(\n+    \"/{item_id}\",\n+    tags=[\"custom\"],\n+    responses={403: {\"description\": \"Operation forbidden\"}},\n+)\n+async def update_item(item_id: str):\n+    if item_id != \"foo\":\n+        raise HTTPException(status_code=403, detail=\"You can only update the item: foo\")\n+    return {\"item_id\": item_id, \"name\": \"The Fighters\"}\n\n@@ -1,8 +1,7 @@\n-from typing import Any, Callable, Dict, List, Optional, Type\n+from typing import Any, Callable, Dict, List, Optional, Type, Union\n \n from fastapi import routing\n from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n-from fastapi.openapi.models import AdditionalResponse\n from fastapi.openapi.utils import get_openapi\n from pydantic import BaseModel\n from starlette.applications import Starlette\n@@ -115,7 +114,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n@@ -132,7 +131,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=methods,\n             operation_id=operation_id,\n@@ -151,7 +150,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n@@ -169,7 +168,7 @@ class FastAPI(Starlette):\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n-                additional_responses=additional_responses,\n+                responses=responses or {},\n                 deprecated=deprecated,\n                 methods=methods,\n                 operation_id=operation_id,\n@@ -187,10 +186,10 @@ class FastAPI(Starlette):\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         self.router.include_router(\n-            router, prefix=prefix, tags=tags, additional_responses=additional_responses\n+            router, prefix=prefix, tags=tags, responses=responses or {}\n         )\n \n     def get(\n@@ -203,7 +202,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -218,7 +217,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -236,7 +235,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -251,7 +250,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -269,7 +268,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -284,7 +283,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -302,7 +301,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -317,7 +316,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -335,7 +334,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -350,7 +349,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -368,7 +367,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -383,7 +382,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -401,7 +400,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -416,7 +415,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n@@ -434,7 +433,7 @@ class FastAPI(Starlette):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -449,7 +448,7 @@ class FastAPI(Starlette):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n\n@@ -3,7 +3,6 @@ from enum import Enum\n from typing import Any, Dict, List, Optional, Union\n \n from pydantic import BaseModel, Schema as PSchema\n-from pydantic.fields import Field\n from pydantic.types import UrlStr\n \n try:\n@@ -344,28 +343,6 @@ class Tag(BaseModel):\n     externalDocs: Optional[ExternalDocumentation] = None\n \n \n-class BaseAdditionalResponse(BaseModel):\n-    description: str\n-    content_type: Optional[str] = None\n-\n-\n-class AdditionalResponse(BaseAdditionalResponse):\n-    status_code: int = PSchema(\n-        ..., ge=100, le=540, title=\"Status Code\", description=\"HTTP status code\"\n-    )\n-    # NOTE: waiting for pydantic to allow `typing.Type[BasicModel]` type\n-    # so, going for `Any` and extra validation on\n-    # routing methods\n-    models: List[Any] = PSchema([], title=\"Additional Response Models\")\n-\n-\n-class AdditionalResponseDescription(BaseAdditionalResponse):\n-    schema_field: Optional[Field] = None\n-\n-    class Config:\n-        arbitrary_types_allowed = True\n-\n-\n class OpenAPI(BaseModel):\n     openapi: str\n     info: Info\n\n@@ -178,6 +178,23 @@ def get_openapi_path(\n                         definitions[\n                             \"HTTPValidationError\"\n                         ] = validation_error_response_definition\n+            if route.responses:\n+                for (additional_status_code, response) in route.responses.items():\n+                    assert isinstance(\n+                        response, dict\n+                    ), \"An additional response must be a dict\"\n+                    field = route.response_fields.get(additional_status_code)\n+                    if field:\n+                        response_schema, _ = field_schema(\n+                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n+                        )\n+                        response.setdefault(\"content\", {}).setdefault(\n+                            \"application/json\", {}\n+                        )[\"schema\"] = response_schema\n+                    response.setdefault(\"description\", \"Additional Response\")\n+                    operation.setdefault(\"responses\", {})[\n+                        str(additional_status_code)\n+                    ] = response\n             status_code = str(route.status_code)\n             response_schema = {\"type\": \"string\"}\n             if lenient_issubclass(route.content_type, JSONResponse):\n@@ -189,13 +206,14 @@ def get_openapi_path(\n                     )\n                 else:\n                     response_schema = {}\n-            content = {route.content_type.media_type: {\"schema\": response_schema}}\n-            operation[\"responses\"] = {\n-                status_code: {\n-                    \"description\": route.response_description,\n-                    \"content\": content,\n-                }\n-            }\n+            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n+                \"description\"\n+            ] = route.response_description\n+            operation.setdefault(\"responses\", {}).setdefault(\n+                status_code, {}\n+            ).setdefault(\"content\", {}).setdefault(route.content_type.media_type, {})[\n+                \"schema\"\n+            ] = response_schema\n             if all_route_params or route.body_field:\n                 operation[\"responses\"][str(HTTP_422_UNPROCESSABLE_ENTITY)] = {\n                     \"description\": \"Validation Error\",\n@@ -205,24 +223,6 @@ def get_openapi_path(\n                         }\n                     },\n                 }\n-            for add_response_code, add_response in route.additional_responses.items():\n-                add_response_schema: Dict[str, Any] = {}\n-                if (\n-                    add_response.content_type or route.content_type.media_type\n-                ) == \"application/json\" and add_response.schema_field is not None:\n-                    add_response_schema, _ = field_schema(\n-                        add_response.schema_field,\n-                        model_name_map=model_name_map,\n-                        ref_prefix=REF_PREFIX,\n-                    )\n-                add_content = {\n-                    add_response.content_type\n-                    or route.content_type.media_type: {\"schema\": add_response_schema}\n-                }\n-                operation[\"responses\"][str(add_response_code)] = {\n-                    \"description\": add_response.description,\n-                    \"content\": add_content,\n-                }\n             path[method.lower()] = operation\n     return path, security_schemes, definitions\n \n\n@@ -7,7 +7,6 @@ from fastapi import params\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n from fastapi.encoders import jsonable_encoder\n-from fastapi.openapi.models import AdditionalResponse, AdditionalResponseDescription\n from fastapi.utils import UnconstrainedConfig\n from pydantic import BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n@@ -105,7 +104,7 @@ class APIRoute(routing.Route):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         name: str = None,\n         methods: List[str] = None,\n@@ -139,35 +138,30 @@ class APIRoute(routing.Route):\n         self.summary = summary\n         self.description = description or self.endpoint.__doc__\n         self.response_description = response_description\n-        self.additional_responses: Dict[int, AdditionalResponseDescription] = {}\n-        existed_codes = [self.status_code, 422]\n-        for add_response in additional_responses:\n-            assert (\n-                add_response.status_code not in existed_codes\n-            ), f\"(Duplicated Status Code): Response with status code [{add_response.status_code}] already defined!\"\n-            existed_codes.append(add_response.status_code)\n-            response_models: List[Any] = [m for m in add_response.models]\n-            schema_field = None\n-            if (\n-                add_response.content_type == \"application/json\"\n-                or lenient_issubclass(content_type, JSONResponse)\n-                and len(response_models)\n-            ):\n-                schema_field = Field(\n-                    name=f\"Additional_response_{add_response.status_code}\",\n-                    type_=Union[tuple(response_models)],\n-                    class_validators=[],\n+        self.responses = responses or {}\n+        response_fields = {}\n+        for additional_status_code, response in self.responses.items():\n+            assert isinstance(response, dict), \"An additional response must be a dict\"\n+            model = response.get(\"model\")\n+            if model:\n+                assert lenient_issubclass(\n+                    model, BaseModel\n+                ), \"A response model must be a Pydantic model\"\n+                response_name = f\"Response_{additional_status_code}_{self.name}\"\n+                response_field = Field(\n+                    name=response_name,\n+                    type_=model,\n+                    class_validators=None,\n                     default=None,\n                     required=False,\n                     model_config=UnconstrainedConfig,\n                     schema=Schema(None),\n                 )\n-            add_resp_description = AdditionalResponseDescription(\n-                description=add_response.description,\n-                content_type=add_response.content_type,\n-                schema_field=schema_field,\n-            )\n-            self.additional_responses[add_response.status_code] = add_resp_description\n+                response_fields[additional_status_code] = response_field\n+        if response_fields:\n+            self.response_fields: Dict[Union[int, str], Field] = response_fields\n+        else:\n+            self.response_fields = {}\n         self.deprecated = deprecated\n         if methods is None:\n             methods = [\"GET\"]\n@@ -205,7 +199,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n@@ -222,7 +216,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=methods,\n             operation_id=operation_id,\n@@ -242,7 +236,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n@@ -260,7 +254,7 @@ class APIRouter(routing.Router):\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n-                additional_responses=additional_responses,\n+                responses=responses or {},\n                 deprecated=deprecated,\n                 methods=methods,\n                 operation_id=operation_id,\n@@ -278,7 +272,7 @@ class APIRouter(routing.Router):\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n@@ -287,6 +281,9 @@ class APIRouter(routing.Router):\n             ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n         for route in router.routes:\n             if isinstance(route, APIRoute):\n+                if responses is None:\n+                    responses = {}\n+                responses = {**responses, **route.responses}\n                 self.add_api_route(\n                     prefix + route.path,\n                     route.endpoint,\n@@ -296,7 +293,7 @@ class APIRouter(routing.Router):\n                     summary=route.summary,\n                     description=route.description,\n                     response_description=route.response_description,\n-                    additional_responses=additional_responses,\n+                    responses=responses,\n                     deprecated=route.deprecated,\n                     methods=route.methods,\n                     operation_id=route.operation_id,\n@@ -323,7 +320,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -338,7 +335,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"GET\"],\n             operation_id=operation_id,\n@@ -357,7 +354,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -372,7 +369,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"PUT\"],\n             operation_id=operation_id,\n@@ -391,7 +388,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -406,7 +403,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"POST\"],\n             operation_id=operation_id,\n@@ -425,7 +422,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -440,7 +437,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"DELETE\"],\n             operation_id=operation_id,\n@@ -459,7 +456,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -474,7 +471,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"OPTIONS\"],\n             operation_id=operation_id,\n@@ -493,7 +490,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -508,7 +505,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"HEAD\"],\n             operation_id=operation_id,\n@@ -527,7 +524,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -542,7 +539,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"PATCH\"],\n             operation_id=operation_id,\n@@ -561,7 +558,7 @@ class APIRouter(routing.Router):\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n-        additional_responses: List[AdditionalResponse] = [],\n+        responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n@@ -576,7 +573,7 @@ class APIRouter(routing.Router):\n             summary=summary,\n             description=description,\n             response_description=response_description,\n-            additional_responses=additional_responses,\n+            responses=responses or {},\n             deprecated=deprecated,\n             methods=[\"TRACE\"],\n             operation_id=operation_id,\n\n@@ -30,10 +30,8 @@ def get_flat_models_from_routes(\n                 body_fields_from_routes.append(route.body_field)\n             if route.response_field:\n                 responses_from_routes.append(route.response_field)\n-            if route.additional_responses:\n-                for _, add_response in route.additional_responses.items():\n-                    if add_response.schema_field is not None:\n-                        responses_from_routes.append(add_response.schema_field)\n+            if route.response_fields:\n+                responses_from_routes.extend(route.response_fields.values())\n     flat_models = get_flat_models_from_fields(\n         body_fields_from_routes + responses_from_routes\n     )\n\n@@ -0,0 +1,52 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.testclient import TestClient\n+\n+router = APIRouter()\n+\n+sub_router = APIRouter()\n+\n+app = FastAPI()\n+\n+\n+@sub_router.get(\"/\")\n+def read_item():\n+    return {\"id\": \"foo\"}\n+\n+\n+router.include_router(sub_router, prefix=\"/items\")\n+\n+app.include_router(router)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"id\": \"foo\"}\n\n@@ -1,471 +0,0 @@\n-import pytest\n-from fastapi import FastAPI\n-from fastapi.openapi.models import AdditionalResponse\n-from pydantic import BaseModel\n-from starlette.responses import JSONResponse\n-from starlette.testclient import TestClient\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    price: float = None\n-\n-\n-class Response400(BaseModel):\n-    \"\"\"HTTP 4xx Response Schema\"\"\"\n-\n-    title: str\n-    detail: str\n-    error_code: int  # functional error ref\n-\n-\n-response_403 = AdditionalResponse(\n-    status_code=403, description=\"Forbidden\", models=[Response400]\n-)\n-\n-additional_responses = [response_403]\n-\n-\n-@app.api_route(\n-    \"/items/{item_id}\", methods=[\"GET\"], additional_responses=additional_responses\n-)\n-def get_items(item_id: str):\n-    return {\"item_id\": item_id}\n-\n-\n-def get_not_decorated(item_id: str):\n-    return {\"item_id\": item_id}\n-\n-\n-app.add_api_route(\n-    \"/items-not-decorated/{item_id}\",\n-    get_not_decorated,\n-    additional_responses=additional_responses,\n-)\n-\n-\n-@app.delete(\"/items/{item_id}\", additional_responses=additional_responses)\n-def delete_item(item_id: str, item: Item):\n-    return {\"item_id\": item_id, \"item\": item}\n-\n-\n-@app.head(\"/items/{item_id}\", additional_responses=additional_responses)\n-def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n-\n-\n-@app.options(\"/items/{item_id}\", additional_responses=additional_responses)\n-def options_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n-\n-\n-@app.patch(\"/items/{item_id}\", additional_responses=additional_responses)\n-def patch_item(item_id: str, item: Item):\n-    return {\"item_id\": item_id, \"item\": item}\n-\n-\n-@app.trace(\"/items/{item_id}\", additional_responses=additional_responses)\n-def trace_item(item_id: str):\n-    return JSONResponse(media_type=\"message/http\")\n-\n-\n-client = TestClient(app)\n-\n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/{item_id}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Get Items Get\",\n-                \"operationId\": \"get_items_items__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-            \"delete\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Delete Item Delete\",\n-                \"operationId\": \"delete_item_items__item_id__delete\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            },\n-            \"options\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Options Item Options\",\n-                \"operationId\": \"options_item_items__item_id__options\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-            \"head\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Head Item Head\",\n-                \"operationId\": \"head_item_items__item_id__head\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-            \"patch\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Patch Item Patch\",\n-                \"operationId\": \"patch_item_items__item_id__patch\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            },\n-            \"trace\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Trace Item Trace\",\n-                \"operationId\": \"trace_item_items__item_id__trace\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-        },\n-        \"/items-not-decorated/{item_id}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"403\": {\n-                        \"description\": \"Forbidden\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Response400\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Get Not Decorated Get\",\n-                \"operationId\": \"get_not_decorated_items-not-decorated__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Item\": {\n-                \"title\": \"Item\",\n-                \"required\": [\"name\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                },\n-            },\n-            \"Response400\": {\n-                \"title\": \"Response400\",\n-                \"description\": \"HTTP 4xx Response Schema\",\n-                \"required\": [\"title\", \"detail\", \"error_code\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                    \"detail\": {\"title\": \"Detail\", \"type\": \"string\"},\n-                    \"error_code\": {\"title\": \"Error_Code\", \"type\": \"integer\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"type\": \"string\"},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_uncompatible_response_model_undecorated():\n-    app = FastAPI()\n-\n-    class NotBaseModel:\n-        pass\n-\n-    response_403 = AdditionalResponse(\n-        status_code=403, description=\"Forbidden\", models=[NotBaseModel]\n-    )\n-    with pytest.raises(RuntimeError):\n-        app.add_api_route(\"/\", get_not_decorated, additional_responses=[response_403])\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_api_route():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\"}\n-\n-\n-def test_get_api_route_not_decorated():\n-    response = client.get(\"/items-not-decorated/foo\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\"}\n-\n-\n-def test_delete():\n-    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_head():\n-    response = client.head(\"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_options():\n-    response = client.options(\"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_patch():\n-    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_trace():\n-    response = client.request(\"trace\", \"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"content-type\"] == \"message/http\"\n\n\n@@ -0,0 +1,116 @@\n+from starlette.testclient import TestClient\n+\n+from additional_responses.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"404\": {\n+                        \"description\": \"Additional Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"id\", \"value\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n+                    \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\"message\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404\n+    assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -0,0 +1,115 @@\n+import os\n+import shutil\n+\n+from starlette.testclient import TestClient\n+\n+from additional_responses.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"image/png\": {},\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            },\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Img\", \"type\": \"boolean\"},\n+                        \"name\": \"img\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"id\", \"value\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n+                    \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_img():\n+    shutil.copy(\"./docs/img/favicon.png\", \"./image.png\")\n+    response = client.get(\"/items/foo?img=1\")\n+    assert response.status_code == 200\n+    assert response.headers[\"Content-Type\"] == \"image/png\"\n+    assert len(response.content)\n+    os.remove(\"./image.png\")\n\n@@ -0,0 +1,117 @@\n+from starlette.testclient import TestClient\n+\n+from additional_responses.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"404\": {\n+                        \"description\": \"The item was not found\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"},\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"id\", \"value\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n+                    \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\"message\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404\n+    assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -0,0 +1,118 @@\n+import os\n+import shutil\n+\n+from starlette.testclient import TestClient\n+\n+from additional_responses.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"404\": {\"description\": \"Item not found\"},\n+                    \"302\": {\"description\": \"The item was moved\"},\n+                    \"403\": {\"description\": \"Not enough privileges\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"image/png\": {},\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            },\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Img\", \"type\": \"boolean\"},\n+                        \"name\": \"img\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"id\", \"value\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n+                    \"value\": {\"title\": \"Value\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_img():\n+    shutil.copy(\"./docs/img/favicon.png\", \"./image.png\")\n+    response = client.get(\"/items/foo?img=1\")\n+    assert response.status_code == 200\n+    assert response.headers[\"Content-Type\"] == \"image/png\"\n+    assert len(response.content)\n+    os.remove(\"./image.png\")\n\n@@ -69,10 +69,11 @@ openapi_schema = {\n         \"/items/\": {\n             \"get\": {\n                 \"responses\": {\n+                    \"404\": {\"description\": \"Not found\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n+                    },\n                 },\n                 \"tags\": [\"items\"],\n                 \"summary\": \"Read Items Get\",\n@@ -82,6 +83,7 @@ openapi_schema = {\n         \"/items/{item_id}\": {\n             \"get\": {\n                 \"responses\": {\n+                    \"404\": {\"description\": \"Not found\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n@@ -108,7 +110,38 @@ openapi_schema = {\n                         \"in\": \"path\",\n                     }\n                 ],\n+            },\n+            \"put\": {\n+                \"responses\": {\n+                    \"404\": {\"description\": \"Not found\"},\n+                    \"403\": {\"description\": \"Operation forbidden\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                 }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"tags\": [\"custom\", \"items\"],\n+                \"summary\": \"Update Item Put\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n         },\n     },\n     \"components\": {\n@@ -158,3 +191,15 @@ def test_get_path(path, expected_status, expected_response):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_put():\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"name\": \"The Fighters\"}\n+\n+\n+def test_put_forbidden():\n+    response = client.put(\"/items/bar\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"You can only update the item: foo\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
