{"custom_id": "fastapi#c5817912d2be25bb310bf9da517882f57bbe7bb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 79 | Churn Cumulative: 1192 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: 0.7037037037037037\n\nDIFF:\n@@ -559,6 +559,8 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n     for f in flat_dependant.body_params:\n         BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n     required = any(True for f in flat_dependant.body_params if f.required)\n+\n+    BodySchema_kwargs: Dict[str, Any] = dict(default=None)\n     if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n         BodySchema: Type[params.Body] = params.File\n     elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n@@ -566,6 +568,14 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n     else:\n         BodySchema = params.Body\n \n+        body_param_media_types = [\n+            getattr(f.schema, \"media_type\")\n+            for f in flat_dependant.body_params\n+            if isinstance(f.schema, params.Body)\n+        ]\n+        if len(set(body_param_media_types)) == 1:\n+            BodySchema_kwargs[\"media_type\"] = body_param_media_types[0]\n+\n     field = Field(\n         name=\"body\",\n         type_=BodyModel,\n@@ -574,6 +584,6 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n         model_config=BaseConfig,\n         class_validators={},\n         alias=\"body\",\n-        schema=BodySchema(None),\n+        schema=BodySchema(**BodySchema_kwargs),\n     )\n     return field\n\n@@ -0,0 +1,67 @@\n+import typing\n+\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+media_type = \"application/vnd.api+json\"\n+\n+# NOTE: These are not valid JSON:API resources\n+# but they are fine for testing requestBody with custom media_type\n+class Product(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class Shop(BaseModel):\n+    name: str\n+\n+\n+@app.post(\"/products\")\n+async def create_product(data: Product = Body(..., media_type=media_type, embed=True)):\n+    pass  # pragma: no cover\n+\n+\n+@app.post(\"/shops\")\n+async def create_shop(\n+    data: Shop = Body(..., media_type=media_type),\n+    included: typing.List[Product] = Body([], media_type=media_type),\n+):\n+    pass  # pragma: no cover\n+\n+\n+create_product_request_body = {\n+    \"content\": {\n+        \"application/vnd.api+json\": {\n+            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_product_products_post\"}\n+        }\n+    },\n+    \"required\": True,\n+}\n+\n+create_shop_request_body = {\n+    \"content\": {\n+        \"application/vnd.api+json\": {\n+            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"}\n+        }\n+    },\n+    \"required\": True,\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    openapi_schema = response.json()\n+    assert (\n+        openapi_schema[\"paths\"][\"/products\"][\"post\"][\"requestBody\"]\n+        == create_product_request_body\n+    )\n+    assert (\n+        openapi_schema[\"paths\"][\"/shops\"][\"post\"][\"requestBody\"]\n+        == create_shop_request_body\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3025a368c6ea7cc9260fe81c20b8af30e9d8aab5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 192 | Lines Deleted: 21 | Files Changed: 5 | Hunks: 14 | Methods Changed: 31 | Complexity Δ (Sum/Max): 20/6 | Churn Δ: 213 | Churn Cumulative: 444 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 9 | DMM Complexity: 0.9726027397260274\n\nDIFF:\n@@ -1,4 +1,5 @@\n import re\n+from dataclasses import is_dataclass\n from typing import Any, Dict, List, Sequence, Set, Type, cast\n \n from fastapi import routing\n@@ -52,6 +53,8 @@ def get_path_param_names(path: str) -> Set[str]:\n \n def create_cloned_field(field: Field) -> Field:\n     original_type = field.type_\n+    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n+        original_type = original_type.__pydantic_model__  # type: ignore\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n\n@@ -1,8 +1,7 @@\n from typing import List\n \n-import pytest\n from fastapi import FastAPI\n-from pydantic import BaseModel, ValidationError\n+from pydantic import BaseModel\n from starlette.testclient import TestClient\n \n app = FastAPI()\n@@ -14,38 +13,45 @@ class Item(BaseModel):\n     owner_ids: List[int] = None\n \n \n-@app.get(\"/items/invalid\", response_model=Item)\n-def get_invalid():\n-    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+@app.get(\"/items/valid\", response_model=Item)\n+def get_valid():\n+    return {\"name\": \"valid\", \"price\": 1.0}\n \n \n-@app.get(\"/items/innerinvalid\", response_model=Item)\n-def get_innerinvalid():\n-    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+@app.get(\"/items/coerce\", response_model=Item)\n+def get_coerce():\n+    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n \n \n-@app.get(\"/items/invalidlist\", response_model=List[Item])\n-def get_invalidlist():\n+@app.get(\"/items/validlist\", response_model=List[Item])\n+def get_validlist():\n     return [\n         {\"name\": \"foo\"},\n-        {\"name\": \"bar\", \"price\": \"bar\"},\n-        {\"name\": \"baz\", \"price\": \"baz\"},\n+        {\"name\": \"bar\", \"price\": 1.0},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n     ]\n \n \n client = TestClient(app)\n \n \n-def test_invalid():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/invalid\")\n+def test_valid():\n+    response = client.get(\"/items/valid\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n \n \n-def test_double_invalid():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/innerinvalid\")\n+def test_coerce():\n+    response = client.get(\"/items/coerce\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n \n \n-def test_invalid_list():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/invalidlist\")\n+def test_validlist():\n+    response = client.get(\"/items/validlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n\n@@ -0,0 +1,58 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic.dataclasses import dataclass\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/valid\", response_model=Item)\n+def get_valid():\n+    return {\"name\": \"valid\", \"price\": 1.0}\n+\n+\n+@app.get(\"/items/coerce\", response_model=Item)\n+def get_coerce():\n+    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n+\n+\n+@app.get(\"/items/validlist\", response_model=List[Item])\n+def get_validlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": 1.0},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_valid():\n+    response = client.get(\"/items/valid\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n+\n+\n+def test_coerce():\n+    response = client.get(\"/items/coerce\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n+\n+\n+def test_validlist():\n+    response = client.get(\"/items/validlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n\n@@ -0,0 +1,51 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel, ValidationError\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/invalid\", response_model=Item)\n+def get_invalid():\n+    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+\n+\n+@app.get(\"/items/innerinvalid\", response_model=Item)\n+def get_innerinvalid():\n+    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+\n+\n+@app.get(\"/items/invalidlist\", response_model=List[Item])\n+def get_invalidlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": \"bar\"},\n+        {\"name\": \"baz\", \"price\": \"baz\"},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalid\")\n+\n+\n+def test_double_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/innerinvalid\")\n+\n+\n+def test_invalid_list():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidlist\")\n\n@@ -0,0 +1,53 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import ValidationError\n+from pydantic.dataclasses import dataclass\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/invalid\", response_model=Item)\n+def get_invalid():\n+    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+\n+\n+@app.get(\"/items/innerinvalid\", response_model=Item)\n+def get_innerinvalid():\n+    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+\n+\n+@app.get(\"/items/invalidlist\", response_model=List[Item])\n+def get_invalidlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": \"bar\"},\n+        {\"name\": \"baz\", \"price\": \"baz\"},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalid\")\n+\n+\n+def test_double_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/innerinvalid\")\n+\n+\n+def test_invalid_list():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidlist\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6c6bdb62337ab2e05438d99fce66113e375ddb04", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 2991 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -45,6 +45,8 @@ def serialize_response(\n ) -> Any:\n     if field:\n         errors = []\n+        if skip_defaults and isinstance(response, BaseModel):\n+            response = response.dict(skip_defaults=skip_defaults)\n         value, errors_ = field.validate(response, {}, loc=(\"response\",))\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n@@ -52,8 +54,6 @@ def serialize_response(\n             errors.extend(errors_)\n         if errors:\n             raise ValidationError(errors)\n-        if skip_defaults and isinstance(response, BaseModel):\n-            value = response.dict(skip_defaults=skip_defaults)\n         return jsonable_encoder(\n             value,\n             include=include,\n\n@@ -16,9 +16,13 @@ class Model(BaseModel):\n     sub: SubModel\n \n \n+class ModelSubclass(Model):\n+    y: int\n+\n+\n @app.get(\"/\", response_model=Model, response_model_skip_defaults=True)\n-def get() -> Model:\n-    return Model(sub={})\n+def get() -> ModelSubclass:\n+    return ModelSubclass(sub={}, y=1)\n \n \n client = TestClient(app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c90c4fb6c1ed5d8d8f32dd2e31a022a2bb4aca41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 17 | Churn Cumulative: 332 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -56,6 +56,7 @@ def get_redoc_html(\n     title: str,\n     redoc_js_url: str = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n     redoc_favicon_url: str = \"https://fastapi.tiangolo.com/img/favicon.png\",\n+    with_google_fonts: bool = True,\n ) -> HTMLResponse:\n     html = f\"\"\"\n     <!DOCTYPE html>\n@@ -65,7 +66,12 @@ def get_redoc_html(\n     <!-- needed for adaptive design -->\n     <meta charset=\"utf-8\"/>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+    \"\"\"\n+    if with_google_fonts:\n+        html += \"\"\"\n     <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n+    \"\"\"\n+    html += f\"\"\"\n     <link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\">\n     <!--\n     ReDoc doesn't change outer page styles\n\n@@ -54,3 +54,14 @@ def test_strings_in_custom_redoc():\n     body_content = html.body.decode()\n     assert redoc_js_url in body_content\n     assert redoc_favicon_url in body_content\n+\n+\n+def test_google_fonts_in_generated_redoc():\n+    body_with_google_fonts = get_redoc_html(\n+        openapi_url=\"/docs\", title=\"title\"\n+    ).body.decode()\n+    assert \"fonts.googleapis.com\" in body_with_google_fonts\n+    body_without_google_fonts = get_redoc_html(\n+        openapi_url=\"/docs\", title=\"title\", with_google_fonts=False\n+    ).body.decode()\n+    assert \"fonts.googleapis.com\" not in body_without_google_fonts\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c70f3f119885d299c2987ee86a1e867beeb9ff3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2958 | Contributors (this commit): 10 | Commits (past 90d): 13 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -317,11 +317,13 @@ class APIRouter(routing.Router):\n         redirect_slashes: bool = True,\n         default: ASGIApp = None,\n         dependency_overrides_provider: Any = None,\n+        route_class: Type[APIRoute] = APIRoute,\n     ) -> None:\n         super().__init__(\n             routes=routes, redirect_slashes=redirect_slashes, default=default\n         )\n         self.dependency_overrides_provider = dependency_overrides_provider\n+        self.route_class = route_class\n \n     def add_api_route(\n         self,\n@@ -347,7 +349,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> None:\n-        route = APIRoute(\n+        route = self.route_class(\n             path,\n             endpoint=endpoint,\n             response_model=response_model,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#53da56146ec5c2933b9844d7a1f9fd910b31158c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 181 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.36.0\"\n+__version__ = \"0.37.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fc7d123347591c0d79505ee0c6a3a5ace70192f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 57 | Files Changed: 6 | Hunks: 38 | Methods Changed: 50 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 124 | Churn Cumulative: 5428 | Contributors (this commit): 13 | Commits (past 90d): 22 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n-from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n+from typing import Any, Callable, Dict, List, Optional, Sequence, Type, Union\n \n from fastapi import routing\n+from fastapi.encoders import DictIntStrAny, SetIntStr\n from fastapi.exception_handlers import (\n     http_exception_handler,\n     request_validation_exception_handler,\n@@ -138,8 +139,8 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -184,8 +185,8 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -262,8 +263,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -305,8 +306,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -348,8 +349,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -391,8 +392,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -434,8 +435,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -477,8 +478,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -520,8 +521,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -563,8 +564,8 @@ class FastAPI(Starlette):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n\n@@ -1,15 +1,18 @@\n from enum import Enum\n from types import GeneratorType\n-from typing import Any, List, Set\n+from typing import Any, Dict, List, Set, Union\n \n from pydantic import BaseModel\n from pydantic.json import ENCODERS_BY_TYPE\n \n+SetIntStr = Set[Union[int, str]]\n+DictIntStrAny = Dict[Union[int, str], Any]\n+\n \n def jsonable_encoder(\n     obj: Any,\n-    include: Set[str] = None,\n-    exclude: Set[str] = set(),\n+    include: Union[SetIntStr, DictIntStrAny] = None,\n+    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n     by_alias: bool = True,\n     skip_defaults: bool = False,\n     include_none: bool = True,\n\n@@ -1,7 +1,10 @@\n-from typing import Any\n+from typing import Any, Sequence\n \n from pydantic import ValidationError\n+from pydantic.error_wrappers import ErrorList\n+from requests import Request\n from starlette.exceptions import HTTPException as StarletteHTTPException\n+from starlette.websockets import WebSocket\n \n \n class HTTPException(StarletteHTTPException):\n@@ -13,8 +16,10 @@ class HTTPException(StarletteHTTPException):\n \n \n class RequestValidationError(ValidationError):\n-    pass\n+    def __init__(self, errors: Sequence[ErrorList]) -> None:\n+        super().__init__(errors, Request)\n \n \n class WebSocketRequestValidationError(ValidationError):\n-    pass\n+    def __init__(self, errors: Sequence[ErrorList]) -> None:\n+        super().__init__(errors, WebSocket)\n\n@@ -11,7 +11,7 @@ from fastapi.dependencies.utils import (\n     get_parameterless_sub_dependant,\n     solve_dependencies,\n )\n-from fastapi.encoders import jsonable_encoder\n+from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from fastapi.utils import create_cloned_field, generate_operation_id_for_path\n from pydantic import BaseConfig, BaseModel, Schema\n@@ -38,8 +38,8 @@ def serialize_response(\n     *,\n     field: Field = None,\n     response: Response,\n-    include: Set[str] = None,\n-    exclude: Set[str] = set(),\n+    include: Union[SetIntStr, DictIntStrAny] = None,\n+    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n     by_alias: bool = True,\n     skip_defaults: bool = False,\n ) -> Any:\n@@ -53,7 +53,7 @@ def serialize_response(\n         elif isinstance(errors_, list):\n             errors.extend(errors_)\n         if errors:\n-            raise ValidationError(errors)\n+            raise ValidationError(errors, field.type_)\n         return jsonable_encoder(\n             value,\n             include=include,\n@@ -71,8 +71,8 @@ def get_app(\n     status_code: int = 200,\n     response_class: Type[Response] = JSONResponse,\n     response_field: Field = None,\n-    response_model_include: Set[str] = None,\n-    response_model_exclude: Set[str] = set(),\n+    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n     response_model_by_alias: bool = True,\n     response_model_skip_defaults: bool = False,\n     dependency_overrides_provider: Any = None,\n@@ -195,8 +195,8 @@ class APIRoute(routing.Route):\n         name: str = None,\n         methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -341,8 +341,8 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -389,8 +389,8 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -518,8 +518,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -563,8 +563,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -607,8 +607,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -651,8 +651,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -695,8 +695,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -739,8 +739,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -783,8 +783,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n@@ -827,8 +827,8 @@ class APIRouter(routing.Router):\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         operation_id: str = None,\n-        response_model_include: Set[str] = None,\n-        response_model_exclude: Set[str] = set(),\n+        response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n+        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n\n@@ -81,7 +81,7 @@ def test_get_validation_error():\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 400\n     validation_error_str_lines = [\n-        b\"1 validation error\",\n+        b\"1 validation error for Request\",\n         b\"path -> item_id\",\n         b\"  value is not a valid integer (type=type_error.integer)\",\n     ]\n\n@@ -106,8 +106,9 @@ def test_openapi():\n             {\n                 \"detail\": [\n                     {\n+                        \"ctx\": {\"enum_values\": [\"alexnet\", \"resnet\", \"lenet\"]},\n                         \"loc\": [\"path\", \"model_name\"],\n-                        \"msg\": \"value is not a valid enumeration member\",\n+                        \"msg\": \"value is not a valid enumeration member; permitted: 'alexnet', 'resnet', 'lenet'\",\n                         \"type\": \"type_error.enum\",\n                     }\n                 ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#203e10596f7de81eda52925113440ebc9a1278a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 183 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.37.0\"\n+__version__ = \"0.38.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4642f63a1ebde30da9c9169229bb37a4932cce63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 35 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -2,8 +2,8 @@ from typing import Any, Sequence\n \n from pydantic import ValidationError\n from pydantic.error_wrappers import ErrorList\n-from requests import Request\n from starlette.exceptions import HTTPException as StarletteHTTPException\n+from starlette.requests import Request\n from starlette.websockets import WebSocket\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#580cf8f4e2aac3d4f298fbb3ca1426f9ea6265de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 185 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.38.0\"\n+__version__ = \"0.38.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d8fe307d61a55148a4d95c550f0ef33148ba8681", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 11 | Files Changed: 4 | Hunks: 11 | Methods Changed: 10 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 53 | Churn Cumulative: 2134 | Contributors (this commit): 9 | Commits (past 90d): 10 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,7 +26,7 @@ from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n from pydantic.fields import Field, Required, Shape\n from pydantic.schema import get_annotation_from_schema\n-from pydantic.utils import lenient_issubclass\n+from pydantic.utils import ForwardRef, evaluate_forwardref, lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n@@ -171,6 +171,30 @@ def is_scalar_sequence_field(field: Field) -> bool:\n     return False\n \n \n+def get_typed_signature(call: Callable) -> inspect.Signature:\n+    signature = inspect.signature(call)\n+    globalns = getattr(call, \"__globals__\", {})\n+    typed_params = [\n+        inspect.Parameter(\n+            name=param.name,\n+            kind=param.kind,\n+            default=param.default,\n+            annotation=get_typed_annotation(param, globalns),\n+        )\n+        for param in signature.parameters.values()\n+    ]\n+    typed_signature = inspect.Signature(typed_params)\n+    return typed_signature\n+\n+\n+def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any:\n+    annotation = param.annotation\n+    if isinstance(annotation, str):\n+        annotation = ForwardRef(annotation)\n+        annotation = evaluate_forwardref(annotation, globalns, globalns)\n+    return annotation\n+\n+\n def get_dependant(\n     *,\n     path: str,\n@@ -180,7 +204,7 @@ def get_dependant(\n     use_cache: bool = True,\n ) -> Dependant:\n     path_param_names = get_path_param_names(path)\n-    endpoint_signature = inspect.signature(call)\n+    endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n     dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n@@ -329,8 +353,12 @@ async def solve_dependencies(\n ]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n-    response = response or Response(  # type: ignore\n-        content=None, status_code=None, headers=None, media_type=None, background=None\n+    response = response or Response(\n+        content=None,\n+        status_code=None,  # type: ignore\n+        headers=None,\n+        media_type=None,\n+        background=None,\n     )\n     dependency_cache = dependency_cache or {}\n     sub_dependant: Dependant\n@@ -405,7 +433,7 @@ async def solve_dependencies(\n     values.update(cookie_values)\n     errors += path_errors + query_errors + header_errors + cookie_errors\n     if dependant.body_params:\n-        body_values, body_errors = await request_body_to_args(  # type: ignore # body_params checked above\n+        body_values, body_errors = await request_body_to_args(  # body_params checked above\n             required_params=dependant.body_params, received_body=body\n         )\n         values.update(body_values)\n\n@@ -11,7 +11,7 @@ try:\n     import email_validator\n \n     assert email_validator  # make autoflake ignore the unused import\n-    from pydantic.types import EmailStr  # type: ignore\n+    from pydantic.types import EmailStr\n except ImportError:  # pragma: no cover\n     logger.warning(\n         \"email-validator not installed, email fields will be treated as str.\\n\"\n\n@@ -58,10 +58,10 @@ def create_cloned_field(field: Field) -> Field:\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n-        use_type = create_model(  # type: ignore\n+        use_type = create_model(\n             original_type.__name__,\n             __config__=original_type.__config__,\n-            __validators__=original_type.__validators__,\n+            __validators__=original_type.__validators__,  # type: ignore\n         )\n         for f in original_type.__fields__.values():\n             use_type.__fields__[f.name] = f\n\n@@ -21,18 +21,21 @@ class User(BaseModel):\n     username: str\n \n \n-def get_current_user(oauth_header: str = Security(reusable_oauth2)):\n+# Here we use string annotations to test them\n+def get_current_user(oauth_header: \"str\" = Security(reusable_oauth2)):\n     user = User(username=oauth_header)\n     return user\n \n \n @app.post(\"/login\")\n-def read_current_user(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n+# Here we use string annotations to test them\n+def read_current_user(form_data: \"OAuth2PasswordRequestFormStrict\" = Depends()):\n     return form_data\n \n \n @app.get(\"/users/me\")\n-def read_current_user(current_user: User = Depends(get_current_user)):\n+# Here we use string annotations to test them\n+def read_current_user(current_user: \"User\" = Depends(get_current_user)):\n     return current_user\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f803c77515662cd2382674d9fc8df1e6641b3ba7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 467 | Lines Deleted: 39 | Files Changed: 5 | Hunks: 45 | Methods Changed: 84 | Complexity Δ (Sum/Max): 71/29 | Churn Δ: 506 | Churn Cumulative: 6234 | Contributors (this commit): 16 | Commits (past 90d): 18 | Contributors (cumulative): 32 | DMM Complexity: 0.9902439024390244\n\nDIFF:\n@@ -33,11 +33,13 @@ class FastAPI(Starlette):\n         version: str = \"0.1.0\",\n         openapi_url: Optional[str] = \"/openapi.json\",\n         openapi_prefix: str = \"\",\n+        default_response_class: Type[Response] = JSONResponse,\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n         swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n         **extra: Dict[str, Any],\n     ) -> None:\n+        self.default_response_class = default_response_class\n         self._debug = debug\n         self.router: routing.APIRouter = routing.APIRouter(\n             routes, dependency_overrides_provider=self\n@@ -144,7 +146,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> None:\n         self.router.add_api_route(\n@@ -166,7 +168,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -190,7 +192,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n@@ -213,7 +215,7 @@ class FastAPI(Starlette):\n                 response_model_by_alias=response_model_by_alias,\n                 response_model_skip_defaults=response_model_skip_defaults,\n                 include_in_schema=include_in_schema,\n-                response_class=response_class,\n+                response_class=response_class or self.default_response_class,\n                 name=name,\n             )\n             return func\n@@ -240,6 +242,7 @@ class FastAPI(Starlette):\n         tags: List[str] = None,\n         dependencies: Sequence[Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n+        default_response_class: Optional[Type[Response]] = None,\n     ) -> None:\n         self.router.include_router(\n             router,\n@@ -247,6 +250,8 @@ class FastAPI(Starlette):\n             tags=tags,\n             dependencies=dependencies,\n             responses=responses or {},\n+            default_response_class=default_response_class\n+            or self.default_response_class,\n         )\n \n     def get(\n@@ -268,7 +273,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.get(\n@@ -288,7 +293,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -311,7 +316,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.put(\n@@ -331,7 +336,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -354,7 +359,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.post(\n@@ -374,7 +379,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -397,7 +402,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.delete(\n@@ -417,7 +422,7 @@ class FastAPI(Starlette):\n             operation_id=operation_id,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -440,7 +445,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.options(\n@@ -460,7 +465,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -483,7 +488,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.head(\n@@ -503,7 +508,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -526,7 +531,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.patch(\n@@ -546,7 +551,7 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n \n@@ -569,7 +574,7 @@ class FastAPI(Starlette):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.router.trace(\n@@ -589,6 +594,6 @@ class FastAPI(Starlette):\n             response_model_by_alias=response_model_by_alias,\n             response_model_skip_defaults=response_model_skip_defaults,\n             include_in_schema=include_in_schema,\n-            response_class=response_class,\n+            response_class=response_class or self.default_response_class,\n             name=name,\n         )\n\n@@ -151,6 +151,10 @@ def get_openapi_path(\n     security_schemes: Dict[str, Any] = {}\n     definitions: Dict[str, Any] = {}\n     assert route.methods is not None, \"Methods must be a list\"\n+    assert (\n+        route.response_class and route.response_class.media_type\n+    ), \"A response class with media_type is needed to generate OpenAPI\"\n+    route_response_media_type: str = route.response_class.media_type\n     if route.include_in_schema:\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n@@ -185,7 +189,7 @@ def get_openapi_path(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n-                            route.response_class.media_type, {}\n+                            route_response_media_type, {}\n                         )[\"schema\"] = response_schema\n                     status_text: Optional[str] = status_code_ranges.get(\n                         str(additional_status_code).upper()\n@@ -213,7 +217,7 @@ def get_openapi_path(\n             ] = route.response_description\n             operation.setdefault(\"responses\", {}).setdefault(\n                 status_code, {}\n-            ).setdefault(\"content\", {}).setdefault(route.response_class.media_type, {})[\n+            ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                 \"schema\"\n             ] = response_schema\n \n\n@@ -200,7 +200,7 @@ class APIRoute(routing.Route):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Optional[Type[Response]] = None,\n         dependency_overrides_provider: Any = None,\n     ) -> None:\n         self.path = path\n@@ -215,9 +215,6 @@ class APIRoute(routing.Route):\n         )\n         self.response_model = response_model\n         if self.response_model:\n-            assert lenient_issubclass(\n-                response_class, JSONResponse\n-            ), \"To declare a type the response must be a JSON response\"\n             response_name = \"Response_\" + self.unique_id\n             self.response_field: Optional[Field] = Field(\n                 name=response_name,\n@@ -299,7 +296,7 @@ class APIRoute(routing.Route):\n                 dependant=self.dependant,\n                 body_field=self.body_field,\n                 status_code=self.status_code,\n-                response_class=self.response_class,\n+                response_class=self.response_class or JSONResponse,\n                 response_field=self.secure_cloned_response_field,\n                 response_model_include=self.response_model_include,\n                 response_model_exclude=self.response_model_exclude,\n@@ -346,7 +343,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> None:\n         route = self.route_class(\n@@ -394,7 +391,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n@@ -445,6 +442,7 @@ class APIRouter(routing.Router):\n         tags: List[str] = None,\n         dependencies: Sequence[params.Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n+        default_response_class: Optional[Type[Response]] = None,\n     ) -> None:\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n@@ -484,7 +482,7 @@ class APIRouter(routing.Router):\n                     response_model_by_alias=route.response_model_by_alias,\n                     response_model_skip_defaults=route.response_model_skip_defaults,\n                     include_in_schema=route.include_in_schema,\n-                    response_class=route.response_class,\n+                    response_class=route.response_class or default_response_class,\n                     name=route.name,\n                 )\n             elif isinstance(route, routing.Route):\n@@ -523,10 +521,9 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n-\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -568,7 +565,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -612,7 +609,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -656,7 +653,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -700,7 +697,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -744,7 +741,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -788,7 +785,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -832,7 +829,7 @@ class APIRouter(routing.Router):\n         response_model_by_alias: bool = True,\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n-        response_class: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = None,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n\n@@ -0,0 +1,216 @@\n+from typing import Any\n+\n+import orjson\n+from fastapi import APIRouter, FastAPI\n+from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n+from starlette.testclient import TestClient\n+\n+\n+class ORJSONResponse(JSONResponse):\n+    media_type = \"application/x-orjson\"\n+\n+    def render(self, content: Any) -> bytes:\n+        return orjson.dumps(content)\n+\n+\n+class OverrideResponse(JSONResponse):\n+    media_type = \"application/x-override\"\n+\n+\n+app = FastAPI(default_response_class=ORJSONResponse)\n+router_a = APIRouter()\n+router_a_a = APIRouter()\n+router_a_b_override = APIRouter()  # Overrides default class\n+router_b_override = APIRouter()  # Overrides default class\n+router_b_a = APIRouter()\n+router_b_a_c_override = APIRouter()  # Overrides default class again\n+\n+\n+@app.get(\"/\")\n+def get_root():\n+    return {\"msg\": \"Hello World\"}\n+\n+\n+@app.get(\"/override\", response_class=PlainTextResponse)\n+def get_path_override():\n+    return \"Hello World\"\n+\n+\n+@router_a.get(\"/\")\n+def get_a():\n+    return {\"msg\": \"Hello A\"}\n+\n+\n+@router_a.get(\"/override\", response_class=PlainTextResponse)\n+def get_a_path_override():\n+    return \"Hello A\"\n+\n+\n+@router_a_a.get(\"/\")\n+def get_a_a():\n+    return {\"msg\": \"Hello A A\"}\n+\n+\n+@router_a_a.get(\"/override\", response_class=PlainTextResponse)\n+def get_a_a_path_override():\n+    return \"Hello A A\"\n+\n+\n+@router_a_b_override.get(\"/\")\n+def get_a_b():\n+    return \"Hello A B\"\n+\n+\n+@router_a_b_override.get(\"/override\", response_class=HTMLResponse)\n+def get_a_b_path_override():\n+    return \"Hello A B\"\n+\n+\n+@router_b_override.get(\"/\")\n+def get_b():\n+    return \"Hello B\"\n+\n+\n+@router_b_override.get(\"/override\", response_class=HTMLResponse)\n+def get_b_path_override():\n+    return \"Hello B\"\n+\n+\n+@router_b_a.get(\"/\")\n+def get_b_a():\n+    return \"Hello B A\"\n+\n+\n+@router_b_a.get(\"/override\", response_class=HTMLResponse)\n+def get_b_a_path_override():\n+    return \"Hello B A\"\n+\n+\n+@router_b_a_c_override.get(\"/\")\n+def get_b_a_c():\n+    return \"Hello B A C\"\n+\n+\n+@router_b_a_c_override.get(\"/override\", response_class=OverrideResponse)\n+def get_b_a_c_path_override():\n+    return {\"msg\": \"Hello B A C\"}\n+\n+\n+router_b_a.include_router(\n+    router_b_a_c_override, prefix=\"/c\", default_response_class=HTMLResponse\n+)\n+router_b_override.include_router(router_b_a, prefix=\"/a\")\n+router_a.include_router(router_a_a, prefix=\"/a\")\n+router_a.include_router(\n+    router_a_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n+)\n+app.include_router(router_a, prefix=\"/a\")\n+app.include_router(\n+    router_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n+)\n+\n+\n+client = TestClient(app)\n+\n+orjson_type = \"application/x-orjson\"\n+text_type = \"text/plain; charset=utf-8\"\n+html_type = \"text/html; charset=utf-8\"\n+override_type = \"application/x-override\"\n+\n+\n+def test_app():\n+    with client:\n+        response = client.get(\"/\")\n+    assert response.json() == {\"msg\": \"Hello World\"}\n+    assert response.headers[\"content-type\"] == orjson_type\n+\n+\n+def test_app_override():\n+    with client:\n+        response = client.get(\"/override\")\n+    assert response.content == b\"Hello World\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a():\n+    with client:\n+        response = client.get(\"/a\")\n+    assert response.json() == {\"msg\": \"Hello A\"}\n+    assert response.headers[\"content-type\"] == orjson_type\n+\n+\n+def test_router_a_override():\n+    with client:\n+        response = client.get(\"/a/override\")\n+    assert response.content == b\"Hello A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_a():\n+    with client:\n+        response = client.get(\"/a/a\")\n+    assert response.json() == {\"msg\": \"Hello A A\"}\n+    assert response.headers[\"content-type\"] == orjson_type\n+\n+\n+def test_router_a_a_override():\n+    with client:\n+        response = client.get(\"/a/a/override\")\n+    assert response.content == b\"Hello A A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_b():\n+    with client:\n+        response = client.get(\"/a/b\")\n+    assert response.content == b\"Hello A B\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_b_override():\n+    with client:\n+        response = client.get(\"/a/b/override\")\n+    assert response.content == b\"Hello A B\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b():\n+    with client:\n+        response = client.get(\"/b\")\n+    assert response.content == b\"Hello B\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_b_override():\n+    with client:\n+        response = client.get(\"/b/override\")\n+    assert response.content == b\"Hello B\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a():\n+    with client:\n+        response = client.get(\"/b/a\")\n+    assert response.content == b\"Hello B A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_b_a_override():\n+    with client:\n+        response = client.get(\"/b/a/override\")\n+    assert response.content == b\"Hello B A\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a_c():\n+    with client:\n+        response = client.get(\"/b/a/c\")\n+    assert response.content == b\"Hello B A C\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a_c_override():\n+    with client:\n+        response = client.get(\"/b/a/c/override\")\n+    assert response.json() == {\"msg\": \"Hello B A C\"}\n+    assert response.headers[\"content-type\"] == override_type\n\n@@ -0,0 +1,206 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n+from starlette.testclient import TestClient\n+\n+\n+class OverrideResponse(JSONResponse):\n+    media_type = \"application/x-override\"\n+\n+\n+app = FastAPI()\n+router_a = APIRouter()\n+router_a_a = APIRouter()\n+router_a_b_override = APIRouter()  # Overrides default class\n+router_b_override = APIRouter()  # Overrides default class\n+router_b_a = APIRouter()\n+router_b_a_c_override = APIRouter()  # Overrides default class again\n+\n+\n+@app.get(\"/\")\n+def get_root():\n+    return {\"msg\": \"Hello World\"}\n+\n+\n+@app.get(\"/override\", response_class=PlainTextResponse)\n+def get_path_override():\n+    return \"Hello World\"\n+\n+\n+@router_a.get(\"/\")\n+def get_a():\n+    return {\"msg\": \"Hello A\"}\n+\n+\n+@router_a.get(\"/override\", response_class=PlainTextResponse)\n+def get_a_path_override():\n+    return \"Hello A\"\n+\n+\n+@router_a_a.get(\"/\")\n+def get_a_a():\n+    return {\"msg\": \"Hello A A\"}\n+\n+\n+@router_a_a.get(\"/override\", response_class=PlainTextResponse)\n+def get_a_a_path_override():\n+    return \"Hello A A\"\n+\n+\n+@router_a_b_override.get(\"/\")\n+def get_a_b():\n+    return \"Hello A B\"\n+\n+\n+@router_a_b_override.get(\"/override\", response_class=HTMLResponse)\n+def get_a_b_path_override():\n+    return \"Hello A B\"\n+\n+\n+@router_b_override.get(\"/\")\n+def get_b():\n+    return \"Hello B\"\n+\n+\n+@router_b_override.get(\"/override\", response_class=HTMLResponse)\n+def get_b_path_override():\n+    return \"Hello B\"\n+\n+\n+@router_b_a.get(\"/\")\n+def get_b_a():\n+    return \"Hello B A\"\n+\n+\n+@router_b_a.get(\"/override\", response_class=HTMLResponse)\n+def get_b_a_path_override():\n+    return \"Hello B A\"\n+\n+\n+@router_b_a_c_override.get(\"/\")\n+def get_b_a_c():\n+    return \"Hello B A C\"\n+\n+\n+@router_b_a_c_override.get(\"/override\", response_class=OverrideResponse)\n+def get_b_a_c_path_override():\n+    return {\"msg\": \"Hello B A C\"}\n+\n+\n+router_b_a.include_router(\n+    router_b_a_c_override, prefix=\"/c\", default_response_class=HTMLResponse\n+)\n+router_b_override.include_router(router_b_a, prefix=\"/a\")\n+router_a.include_router(router_a_a, prefix=\"/a\")\n+router_a.include_router(\n+    router_a_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n+)\n+app.include_router(router_a, prefix=\"/a\")\n+app.include_router(\n+    router_b_override, prefix=\"/b\", default_response_class=PlainTextResponse\n+)\n+\n+\n+client = TestClient(app)\n+\n+json_type = \"application/json\"\n+text_type = \"text/plain; charset=utf-8\"\n+html_type = \"text/html; charset=utf-8\"\n+override_type = \"application/x-override\"\n+\n+\n+def test_app():\n+    with client:\n+        response = client.get(\"/\")\n+    assert response.json() == {\"msg\": \"Hello World\"}\n+    assert response.headers[\"content-type\"] == json_type\n+\n+\n+def test_app_override():\n+    with client:\n+        response = client.get(\"/override\")\n+    assert response.content == b\"Hello World\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a():\n+    with client:\n+        response = client.get(\"/a\")\n+    assert response.json() == {\"msg\": \"Hello A\"}\n+    assert response.headers[\"content-type\"] == json_type\n+\n+\n+def test_router_a_override():\n+    with client:\n+        response = client.get(\"/a/override\")\n+    assert response.content == b\"Hello A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_a():\n+    with client:\n+        response = client.get(\"/a/a\")\n+    assert response.json() == {\"msg\": \"Hello A A\"}\n+    assert response.headers[\"content-type\"] == json_type\n+\n+\n+def test_router_a_a_override():\n+    with client:\n+        response = client.get(\"/a/a/override\")\n+    assert response.content == b\"Hello A A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_b():\n+    with client:\n+        response = client.get(\"/a/b\")\n+    assert response.content == b\"Hello A B\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_a_b_override():\n+    with client:\n+        response = client.get(\"/a/b/override\")\n+    assert response.content == b\"Hello A B\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b():\n+    with client:\n+        response = client.get(\"/b\")\n+    assert response.content == b\"Hello B\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_b_override():\n+    with client:\n+        response = client.get(\"/b/override\")\n+    assert response.content == b\"Hello B\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a():\n+    with client:\n+        response = client.get(\"/b/a\")\n+    assert response.content == b\"Hello B A\"\n+    assert response.headers[\"content-type\"] == text_type\n+\n+\n+def test_router_b_a_override():\n+    with client:\n+        response = client.get(\"/b/a/override\")\n+    assert response.content == b\"Hello B A\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a_c():\n+    with client:\n+        response = client.get(\"/b/a/c\")\n+    assert response.content == b\"Hello B A C\"\n+    assert response.headers[\"content-type\"] == html_type\n+\n+\n+def test_router_b_a_c_override():\n+    with client:\n+        response = client.get(\"/b/a/c/override\")\n+    assert response.json() == {\"msg\": \"Hello B A C\"}\n+    assert response.headers[\"content-type\"] == override_type\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
