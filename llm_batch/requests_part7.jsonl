{"custom_id": "requests#8ba12ff4f3fb17ad5b9f21076474cbd7558ca881", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 8 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 538 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ import zlib\n from urllib2 import HTTPError\n from urlparse import urlparse\n \n-from .monkeys import _Request, _HTTPBasicAuthHandler, _HTTPDigestAuthHandler\n+from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler\n \n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n@@ -405,8 +405,8 @@ class AuthObject(object):\n     \"\"\"\n \n     _handlers = {\n-        'basic': _HTTPBasicAuthHandler,\n-        'digest': _HTTPDigestAuthHandler,\n+        'basic': HTTPBasicAuthHandler,\n+        'digest': HTTPDigestAuthHandler,\n         'proxy_basic': urllib2.ProxyBasicAuthHandler,\n         'proxy_digest': urllib2.ProxyDigestAuthHandler\n     }\n\n@@ -4,18 +4,14 @@\n requests.monkeys\n ~~~~~~~~~~~~~~~~\n \n-Monkey patches to urllib2 and the like.\n+Urllib2 Monkey patches.\n \n \"\"\"\n \n-# import requests\n-# import urllib\n import urllib2\n-# import socket\n-# import zlib\n \n \n-class _Request(urllib2.Request):\n+class Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n     setting of HTTP methods.\n     \"\"\"\n@@ -31,7 +27,7 @@ class _Request(urllib2.Request):\n         return urllib2.Request.get_method(self)\n \n \n-class _HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n+class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n     # from mercurial\n \n     def __init__(self, *args, **kwargs):\n@@ -54,7 +50,7 @@ class _HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n \n \n \n-class _HTTPDigestAuthHandler(urllib2.HTTPDigestAuthHandler):\n+class HTTPDigestAuthHandler(urllib2.HTTPDigestAuthHandler):\n \n     def __init__(self, *args, **kwargs):\n         urllib2.HTTPDigestAuthHandler.__init__(self, *args, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fa1db9581477b8748b76344623e9b3eb8f77f4f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2603 | Contributors (this commit): 7 | Commits (past 90d): 97 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.3.3'\n-__build__ = 0x000303\n+__version__ = '0.3.4'\n+__build__ = 0x000304\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5172d24e66d748459963bc6a344a68023e44e183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 351 | Files Changed: 1 | Hunks: 7 | Methods Changed: 35 | Complexity Δ (Sum/Max): -44/0 | Churn Δ: 406 | Churn Cumulative: 766 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.17525773195876287\n\nDIFF:\n@@ -1,360 +1,64 @@\n+# -*- coding: utf-8 -*-\n \n-# from: werkzeug\n+\"\"\"\n+requests.structures\n+~~~~~~~~~~~~~~~~~~~\n+\n+Datastructures that power Requests.\n \n-class TypeConversionDict(dict):\n-    \"\"\"Works like a regular dict but the :meth:`get` method can perform\n-    type conversions.  :class:`MultiDict` and :class:`CombinedMultiDict`\n-    are subclasses of this class and provide the same feature.\n \"\"\"\n \n-    def get(self, key, default=None, type=None):\n-        \"\"\"Return the default value if the requested data doesn't exist.\n-        If `type` is provided and is a callable it should convert the value,\n-        return it or raise a :exc:`ValueError` if that is not possible.  In\n-        this case the function will return the default as if the value was not\n-        found:\n-\n-        >>> d = TypeConversionDict(foo='42', bar='blub')\n-        >>> d.get('foo', type=int)\n-        42\n-        >>> d.get('bar', -1, type=int)\n-        -1\n-\n-        :param key: The key to be looked up.\n-        :param default: The default value to be returned if the key can't\n-                        be looked up.  If not further specified `None` is\n-                        returned.\n-        :param type: A callable that is used to cast the value in the\n-                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n-                     by this callable the default value is returned.\n-        \"\"\"\n-        try:\n-            rv = self[key]\n-            if type is not None:\n-                rv = type(rv)\n-        except (KeyError, ValueError):\n-            rv = default\n-        return rv\n+from UserDict import DictMixin\n \n \n+class CaseInsensitiveDict(DictMixin):\n+    \"\"\"docstring for CaseInsensitiveDict\"\"\"\n \n-# from: werkzeug\n-\n-class MultiDict(TypeConversionDict):\n-    \"\"\"A :class:`MultiDict` is a dictionary subclass customized to deal with\n-    multiple values for the same key which is for example used by the parsing\n-    functions in the wrappers.  This is necessary because some HTML form\n-    elements pass multiple values for the same key.\n-\n-    :class:`MultiDict` implements all standard dictionary methods.\n-    Internally, it saves all values for a key as a list, but the standard dict\n-    access methods will only return the first value for a key. If you want to\n-    gain access to the other values, too, you have to use the `list` methods as\n-    explained below.\n-\n-    Basic Usage:\n-\n-    >>> d = MultiDict([('a', 'b'), ('a', 'c')])\n-    >>> d\n-    MultiDict([('a', 'b'), ('a', 'c')])\n-    >>> d['a']\n-    'b'\n-    >>> d.getlist('a')\n-    ['b', 'c']\n-    >>> 'a' in d\n-    True\n-\n-    It behaves like a normal dict thus all dict functions will only return the\n-    first value when multiple values for one key are found.\n-\n-    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a\n-    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will\n-    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP\n-    exceptions.\n-\n-    A :class:`MultiDict` can be constructed from an iterable of\n-    ``(key, value)`` tuples, a dict, a :class:`MultiDict` or from Werkzeug 0.2\n-    onwards some keyword parameters.\n-\n-    :param mapping: the initial value for the :class:`MultiDict`.  Either a\n-                    regular dict, an iterable of ``(key, value)`` tuples\n-                    or `None`.\n-    \"\"\"\n-\n-    # the key error this class raises.  Because of circular dependencies\n-    # with the http exception module this class is created at the end of\n-    # this module.\n-    KeyError = None\n-\n-    def __init__(self, mapping=None):\n-        if isinstance(mapping, MultiDict):\n-            dict.__init__(self, ((k, l[:]) for k, l in mapping.iterlists()))\n-        elif isinstance(mapping, dict):\n-            tmp = {}\n-            for key, value in mapping.iteritems():\n-                if isinstance(value, (tuple, list)):\n-                    value = list(value)\n-                else:\n-                    value = [value]\n-                tmp[key] = value\n-            dict.__init__(self, tmp)\n-        else:\n-            tmp = {}\n-            for key, value in mapping or ():\n-                tmp.setdefault(key, []).append(value)\n-            dict.__init__(self, tmp)\n-\n-    def __getstate__(self):\n-        return dict(self.lists())\n-\n-    def __setstate__(self, value):\n-        dict.clear(self)\n-        dict.update(self, value)\n-\n-    def __iter__(self):\n-        return self.iterkeys()\n-\n-    def __getitem__(self, key):\n-        \"\"\"Return the first data value for this key;\n-        raises KeyError if not found.\n-\n-        :param key: The key to be looked up.\n-        :raise KeyError: if the key does not exist.\n-        \"\"\"\n-        if key in self:\n-            return dict.__getitem__(self, key)[0]\n-        raise self.KeyError(key)\n-\n-    def __setitem__(self, key, value):\n-        \"\"\"Like :meth:`add` but removes an existing key first.\n-\n-        :param key: the key for the value.\n-        :param value: the value to set.\n-        \"\"\"\n-        dict.__setitem__(self, key, [value])\n-\n-    def add(self, key, value):\n-        \"\"\"Adds a new value for the key.\n-\n-        .. versionadded:: 0.6\n-\n-        :param key: the key for the value.\n-        :param value: the value to add.\n-        \"\"\"\n-        dict.setdefault(self, key, []).append(value)\n-\n-    def getlist(self, key, type=None):\n-        \"\"\"Return the list of items for a given key. If that key is not in the\n-        `MultiDict`, the return value will be an empty list.  Just as `get`\n-        `getlist` accepts a `type` parameter.  All items will be converted\n-        with the callable defined there.\n-\n-        :param key: The key to be looked up.\n-        :param type: A callable that is used to cast the value in the\n-                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n-                     by this callable the value will be removed from the list.\n-        :return: a :class:`list` of all the values for the key.\n-        \"\"\"\n-        try:\n-            rv = dict.__getitem__(self, key)\n-        except KeyError:\n-            return []\n-        if type is None:\n-            return list(rv)\n-        result = []\n-        for item in rv:\n-            try:\n-                result.append(type(item))\n-            except ValueError:\n-                pass\n-        return result\n-\n-    def setlist(self, key, new_list):\n-        \"\"\"Remove the old values for a key and add new ones.  Note that the list\n-        you pass the values in will be shallow-copied before it is inserted in\n-        the dictionary.\n-\n-        >>> d = MultiDict()\n-        >>> d.setlist('foo', ['1', '2'])\n-        >>> d['foo']\n-        '1'\n-        >>> d.getlist('foo')\n-        ['1', '2']\n-\n-        :param key: The key for which the values are set.\n-        :param new_list: An iterable with the new values for the key.  Old values\n-                         are removed first.\n-        \"\"\"\n-        dict.__setitem__(self, key, list(new_list))\n-\n-    def setdefault(self, key, default=None):\n-        \"\"\"Returns the value for the key if it is in the dict, otherwise it\n-        returns `default` and sets that value for `key`.\n-\n-        :param key: The key to be looked up.\n-        :param default: The default value to be returned if the key is not\n-                        in the dict.  If not further specified it's `None`.\n-        \"\"\"\n-        if key not in self:\n-            self[key] = default\n-        else:\n-            default = self[key]\n-        return default\n-\n-    def setlistdefault(self, key, default_list=None):\n-        \"\"\"Like `setdefault` but sets multiple values.  The list returned\n-        is not a copy, but the list that is actually used internally.  This\n-        means that you can put new values into the dict by appending items\n-        to the list:\n-\n-        >>> d = MultiDict({\"foo\": 1})\n-        >>> d.setlistdefault(\"foo\").extend([2, 3])\n-        >>> d.getlist(\"foo\")\n-        [1, 2, 3]\n-\n-        :param key: The key to be looked up.\n-        :param default: An iterable of default values.  It is either copied\n-                        (in case it was a list) or converted into a list\n-                        before returned.\n-        :return: a :class:`list`\n-        \"\"\"\n-        if key not in self:\n-            default_list = list(default_list or ())\n-            dict.__setitem__(self, key, default_list)\n-        else:\n-            default_list = dict.__getitem__(self, key)\n-        return default_list\n-\n-    def items(self, multi=False):\n-        \"\"\"Return a list of ``(key, value)`` pairs.\n-\n-        :param multi: If set to `True` the list returned will have a\n-                      pair for each value of each key.  Otherwise it\n-                      will only contain pairs for the first value of\n-                      each key.\n-\n-        :return: a :class:`list`\n-        \"\"\"\n-        return list(self.iteritems(multi))\n-\n-    def lists(self):\n-        \"\"\"Return a list of ``(key, values)`` pairs, where values is the list of\n-        all values associated with the key.\n-\n-        :return: a :class:`list`\n-        \"\"\"\n-        return list(self.iterlists())\n-\n-    def values(self):\n-        \"\"\"Returns a list of the first value on every key's value list.\n-\n-        :return: a :class:`list`.\n-        \"\"\"\n-        return [self[key] for key in self.iterkeys()]\n-\n-    def listvalues(self):\n-        \"\"\"Return a list of all values associated with a key.  Zipping\n-        :meth:`keys` and this is the same as calling :meth:`lists`:\n-\n-        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n-        >>> zip(d.keys(), d.listvalues()) == d.lists()\n-        True\n-\n-        :return: a :class:`list`\n-        \"\"\"\n-        return list(self.iterlistvalues())\n-\n-    def iteritems(self, multi=False):\n-        \"\"\"Like :meth:`items` but returns an iterator.\"\"\"\n-        for key, values in dict.iteritems(self):\n-            if multi:\n-                for value in values:\n-                    yield key, value\n-            else:\n-                yield key, values[0]\n-\n-    def iterlists(self):\n-        \"\"\"Like :meth:`items` but returns an iterator.\"\"\"\n-        for key, values in dict.iteritems(self):\n-            yield key, list(values)\n-\n-    def itervalues(self):\n-        \"\"\"Like :meth:`values` but returns an iterator.\"\"\"\n-        for values in dict.itervalues(self):\n-            yield values[0]\n-\n-    def iterlistvalues(self):\n-        \"\"\"Like :meth:`listvalues` but returns an iterator.\"\"\"\n-        return dict.itervalues(self)\n-\n-    def copy(self):\n-        \"\"\"Return a shallow copy of this object.\"\"\"\n-        return self.__class__(self)\n-\n-    def to_dict(self, flat=True):\n-        \"\"\"Return the contents as regular dict.  If `flat` is `True` the\n-        returned dict will only have the first item present, if `flat` is\n-        `False` all values will be returned as lists.\n-\n-        :param flat: If set to `False` the dict returned will have lists\n-                     with all the values in it.  Otherwise it will only\n-                     contain the first value for each key.\n-        :return: a :class:`dict`\n-        \"\"\"\n-        if flat:\n-            return dict(self.iteritems())\n-        return dict(self.lists())\n-\n-    def update(self, other_dict):\n-        \"\"\"update() extends rather than replaces existing key lists.\"\"\"\n-        for key, value in iter_multi_items(other_dict):\n-            MultiDict.add(self, key, value)\n-\n-    def pop(self, key, default=_missing):\n-        \"\"\"Pop the first item for a list on the dict.  Afterwards the\n-        key is removed from the dict, so additional values are discarded:\n-\n-        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n-        >>> d.pop(\"foo\")\n-        1\n-        >>> \"foo\" in d\n-        False\n-\n-        :param key: the key to pop.\n-        :param default: if provided the value to return if the key was\n-                        not in the dictionary.\n-        \"\"\"\n-        try:\n-            return dict.pop(self, key)[0]\n-        except KeyError, e:\n-            if default is not _missing:\n-                return default\n-            raise self.KeyError(str(e))\n-\n-    def popitem(self):\n-        \"\"\"Pop an item from the dict.\"\"\"\n-        try:\n-            item = dict.popitem(self)\n-            return (item[0], item[1][0])\n-        except KeyError, e:\n-            raise self.KeyError(str(e))\n-\n-    def poplist(self, key):\n-        \"\"\"Pop the list for a key from the dict.  If the key is not in the dict\n-        an empty list is returned.\n-\n-        .. versionchanged:: 0.5\n-           If the key does no longer exist a list is returned instead of\n-           raising an error.\n-        \"\"\"\n-        return dict.pop(self, key, [])\n-\n-    def popitemlist(self):\n-        \"\"\"Pop a ``(key, list)`` tuple from the dict.\"\"\"\n-        try:\n-            return dict.popitem(self)\n-        except KeyError, e:\n-            raise self.KeyError(str(e))\n+    def __init__(self):\n+        # super(CaseInsensitiveDict, self).__init__()\n+        self.data = dict()\n \n     def __repr__(self):\n-        return '%s(%r)' % (self.__class__.__name__, self.items(multi=True))\n+        return self.data.__repr__()\n+\n+    def __getstate__(self):\n+        return self.data.copy()\n+\n+    def __setstate__(self, d):\n+        self.data = d\n+\n+    @property\n+    def _lower_keys(self):\n+        return map(str.lower, self.data.keys())\n+\n+\n+    def __contains__(self, key):\n+        return key.lower() in self._lower_keys\n+\n+\n+    def __getitem__(self, key):\n+\n+        if key.lower() in self:\n+            return self.items()[self._lower_keys.index(key.lower())][1]\n+\n+        raise KeyError\n+\n+\n+    def __setitem__(self, key, value):\n+        return self.data.__setitem__(key, value)\n+\n+\n+    def __delitem__(self, key):\n+        return self.data.__delitem__(key)\n+\n+\n+    def __keys__(self):\n+        return self.data.__keys__()\n+\n+\n+    def __iter__(self):\n+        return self.data.__iter__()\n+\n+\n+    def iteritems(self):\n+        return self.data.iteritems()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e8ff405fce85bce50d41f57a894aa14331a1b564", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 81 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -39,10 +39,3 @@ if not 'eventlet' in locals():\n \n \n from .core import *\n-\n-\n-__all__ = [\n-    'Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', \n-    'auth_manager', 'AuthObject','RequestException', 'AuthenticationError', \n-    'URLRequired', 'InvalidMethod', 'HTTPError'\n-]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#29aa7736ca24bb714996b8fe6c701ded7bae52e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 773 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -27,21 +27,18 @@ class CaseInsensitiveDict(DictMixin):\n     def __setstate__(self, d):\n         self.data = d\n \n-    @property\n     def _lower_keys(self):\n         return map(str.lower, self.data.keys())\n \n \n     def __contains__(self, key):\n-        return key.lower() in self._lower_keys\n+        return key.lower() in self._lower_keys()\n \n \n     def __getitem__(self, key):\n \n         if key.lower() in self:\n-            return self.items()[self._lower_keys.index(key.lower())][1]\n-\n-        raise KeyError\n+            return self.items()[self._lower_keys().index(key.lower())][1]\n \n \n     def __setitem__(self, key, value):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#85b8b2bd446ecfc7cee8b6e2f781f5f6f6e510a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 13 | Churn Cumulative: 454 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -16,7 +16,7 @@ from urllib2 import HTTPError\n from urlparse import urlparse\n \n from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler\n-\n+from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n \n@@ -120,19 +120,16 @@ class Request(object):\n \n     def _build_response(self, resp):\n         \"\"\"Build internal Response object from given response.\"\"\"\n-        if isinstance(resp, HTTPError):\n-            # print resp.__dict__\n-            pass\n \n         self.response.status_code = getattr(resp, 'code', None)\n \n         try:\n-            self.response.headers = getattr(resp.info(), 'dict', None)\n+            self.response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n             self.response.content = resp.read()\n-        except AttributeError, why:\n+        except AttributeError:\n             pass\n \n-        if self.response.headers.get('content-encoding', None) == 'gzip':\n+        if self.response.headers['content-encoding'] == 'gzip':\n             try:\n                 self.response.content = zlib.decompress(self.response.content, 16+zlib.MAX_WBITS)\n             except zlib.error:\n@@ -225,7 +222,7 @@ class Response(object):\n     def __init__(self):\n         self.content = None\n         self.status_code = None\n-        self.headers = dict()\n+        self.headers = CaseInsensitiveDict()\n         self.url = None\n         self.ok = False\n         self.error = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35beda21b8187f7a5e99d76084c7ddbd05f4b738", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 777 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -14,9 +14,9 @@ from UserDict import DictMixin\n class CaseInsensitiveDict(DictMixin):\n     \"\"\"docstring for CaseInsensitiveDict\"\"\"\n \n-    def __init__(self):\n+    def __init__(self, *args, **kwargs):\n         # super(CaseInsensitiveDict, self).__init__()\n-        self.data = dict()\n+        self.data = dict(*args, **kwargs)\n \n     def __repr__(self):\n         return self.data.__repr__()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cd8ce63a3b6850afb5ba3c3677f5715907468f7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 16 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 74 | Churn Cumulative: 625 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 0.9166666666666666\n\nDIFF:\n@@ -15,7 +15,7 @@ import zlib\n from urllib2 import HTTPError\n from urlparse import urlparse\n \n-from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler\n+from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n@@ -30,7 +30,7 @@ class Request(object):\n     _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n-                 data=dict(), auth=None, cookiejar=None, timeout=None):\n+                 data=dict(), auth=None, cookiejar=None, timeout=None, redirect=True):\n \n         socket.setdefaulttimeout(timeout)\n \n@@ -38,7 +38,8 @@ class Request(object):\n         self.headers = headers\n         self.files = files\n         self.method = method\n-        self.data = {}\n+        self.data = dict()\n+        self.redirect = redirect\n \n         # self.data = {}\n         if hasattr(data, 'items'):\n@@ -101,10 +102,18 @@ class Request(object):\n \n             _handlers.append(self.auth.handler)\n \n+\n+        _handlers.append(HTTPRedirectHandler)\n+        # print _handlers\n+        # print '^^'\n+        # print '!'\n+\n         if not _handlers:\n             return urllib2.urlopen\n \n+        if self.data or self.files:\n             _handlers.extend(get_handlers())\n+\n         opener = urllib2.build_opener(*_handlers)\n \n         if self.headers:\n@@ -121,21 +130,50 @@ class Request(object):\n     def _build_response(self, resp):\n         \"\"\"Build internal Response object from given response.\"\"\"\n \n-        self.response.status_code = getattr(resp, 'code', None)\n+        def build(resp):\n+\n+            response = Response()\n+            response.status_code = getattr(resp, 'code', None)\n \n             try:\n-            self.response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n-            self.response.content = resp.read()\n+                response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n+                response.content = resp.read()\n             except AttributeError:\n                 pass\n \n-        if self.response.headers['content-encoding'] == 'gzip':\n+            if response.headers['content-encoding'] == 'gzip':\n                 try:\n-                self.response.content = zlib.decompress(self.response.content, 16+zlib.MAX_WBITS)\n+                    response.content = zlib.decompress(response.content, 16+zlib.MAX_WBITS)\n                 except zlib.error:\n                     pass\n \n-        self.response.url = getattr(resp, 'url', None)\n+            response.url = getattr(resp, 'url', None)\n+\n+            return response\n+\n+\n+        history = []\n+\n+        r = build(resp)\n+\n+        if self.redirect:\n+\n+            while 'location' in r.headers:\n+\n+                history.append(r)\n+\n+                url = r.headers['location']\n+\n+                request = Request(\n+                    url, self.headers, self.files, self.method,\n+                    self.data, self.auth, self.cookiejar, redirect=False\n+                )\n+                request.send()\n+                r = request.response\n+\n+            r.history = history\n+\n+        self.response = r\n \n \n     @staticmethod\n@@ -227,6 +265,7 @@ class Response(object):\n         self.ok = False\n         self.error = None\n         self.cached = False\n+        self.history = []\n \n \n     def __repr__(self):\n\n@@ -27,8 +27,19 @@ class Request(urllib2.Request):\n         return urllib2.Request.get_method(self)\n \n \n+class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n+\n+    def http_error_301(self, req, fp, code, msg, headers):\n+        # print \"Cookie Manip Right Here\"\n+        # print 'HEY'\n+        pass\n+        # return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)\n+\n+    http_error_302 = http_error_303 = http_error_307 = http_error_301\n+\n+\n+\n class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n-    # from mercurial\n \n     def __init__(self, *args, **kwargs):\n         urllib2.HTTPBasicAuthHandler.__init__(self, *args, **kwargs)\n@@ -45,8 +56,10 @@ class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n         if req is not self.retried_req:\n             self.retried_req = req\n             self.retried = 0\n+\n         return urllib2.HTTPBasicAuthHandler.http_error_auth_reqed(\n-                        self, auth_header, host, req, headers)\n+            self, auth_header, host, req, headers\n+        )\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c40deefb8a192c83ceab0cfe745ed2bdf378130c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 117 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -30,10 +30,7 @@ class Request(urllib2.Request):\n class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n \n     def http_error_301(self, req, fp, code, msg, headers):\n-        # print \"Cookie Manip Right Here\"\n-        # print 'HEY'\n         pass\n-        # return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)\n \n     http_error_302 = http_error_303 = http_error_307 = http_error_301\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5708fe95657f2e00050acce95963b5cf72e8827c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2608 | Contributors (this commit): 7 | Commits (past 90d): 82 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -19,5 +19,6 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n-from .models import HTTPError, auth_manager\n-from .api import *\n+\n+from models import HTTPError, auth_manager\n+from api import *\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3cec61481cd8b9dd8d208437d52fb6d5014f7c1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 512 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -232,6 +232,7 @@ class Request(object):\n \n             except urllib2.HTTPError, why:\n                 self._build_response(why)\n+                if not self.redirect:\n                     self.response.error = why\n             else:\n                 self._build_response(resp)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#51360e1ede1fd48ff46117ff36737cf4bca411a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2612 | Contributors (this commit): 7 | Commits (past 90d): 80 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.3.4'\n-__build__ = 0x000304\n+__version__ = '0.4.0'\n+__build__ = 0x000400\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e45e4ba51addaa8c65b34864d272e9b8bad014b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 86 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 86 | Churn Cumulative: 86 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,86 @@\n+# flasky extensions.  flasky pygments style based on tango style\n+from pygments.style import Style\n+from pygments.token import Keyword, Name, Comment, String, Error, \\\n+     Number, Operator, Generic, Whitespace, Punctuation, Other, Literal\n+\n+\n+class FlaskyStyle(Style):\n+    background_color = \"#f8f8f8\"\n+    default_style = \"\"\n+\n+    styles = {\n+        # No corresponding class for the following:\n+        #Text:                     \"\", # class:  ''\n+        Whitespace:                \"underline #f8f8f8\",      # class: 'w'\n+        Error:                     \"#a40000 border:#ef2929\", # class: 'err'\n+        Other:                     \"#000000\",                # class 'x'\n+\n+        Comment:                   \"italic #8f5902\", # class: 'c'\n+        Comment.Preproc:           \"noitalic\",       # class: 'cp'\n+\n+        Keyword:                   \"bold #004461\",   # class: 'k'\n+        Keyword.Constant:          \"bold #004461\",   # class: 'kc'\n+        Keyword.Declaration:       \"bold #004461\",   # class: 'kd'\n+        Keyword.Namespace:         \"bold #004461\",   # class: 'kn'\n+        Keyword.Pseudo:            \"bold #004461\",   # class: 'kp'\n+        Keyword.Reserved:          \"bold #004461\",   # class: 'kr'\n+        Keyword.Type:              \"bold #004461\",   # class: 'kt'\n+\n+        Operator:                  \"#582800\",   # class: 'o'\n+        Operator.Word:             \"bold #004461\",   # class: 'ow' - like keywords\n+\n+        Punctuation:               \"bold #000000\",   # class: 'p'\n+\n+        # because special names such as Name.Class, Name.Function, etc.\n+        # are not recognized as such later in the parsing, we choose them\n+        # to look the same as ordinary variables.\n+        Name:                      \"#000000\",        # class: 'n'\n+        Name.Attribute:            \"#c4a000\",        # class: 'na' - to be revised\n+        Name.Builtin:              \"#004461\",        # class: 'nb'\n+        Name.Builtin.Pseudo:       \"#3465a4\",        # class: 'bp'\n+        Name.Class:                \"#000000\",        # class: 'nc' - to be revised\n+        Name.Constant:             \"#000000\",        # class: 'no' - to be revised\n+        Name.Decorator:            \"#888\",           # class: 'nd' - to be revised\n+        Name.Entity:               \"#ce5c00\",        # class: 'ni'\n+        Name.Exception:            \"bold #cc0000\",   # class: 'ne'\n+        Name.Function:             \"#000000\",        # class: 'nf'\n+        Name.Property:             \"#000000\",        # class: 'py'\n+        Name.Label:                \"#f57900\",        # class: 'nl'\n+        Name.Namespace:            \"#000000\",        # class: 'nn' - to be revised\n+        Name.Other:                \"#000000\",        # class: 'nx'\n+        Name.Tag:                  \"bold #004461\",   # class: 'nt' - like a keyword\n+        Name.Variable:             \"#000000\",        # class: 'nv' - to be revised\n+        Name.Variable.Class:       \"#000000\",        # class: 'vc' - to be revised\n+        Name.Variable.Global:      \"#000000\",        # class: 'vg' - to be revised\n+        Name.Variable.Instance:    \"#000000\",        # class: 'vi' - to be revised\n+\n+        Number:                    \"#990000\",        # class: 'm'\n+\n+        Literal:                   \"#000000\",        # class: 'l'\n+        Literal.Date:              \"#000000\",        # class: 'ld'\n+\n+        String:                    \"#4e9a06\",        # class: 's'\n+        String.Backtick:           \"#4e9a06\",        # class: 'sb'\n+        String.Char:               \"#4e9a06\",        # class: 'sc'\n+        String.Doc:                \"italic #8f5902\", # class: 'sd' - like a comment\n+        String.Double:             \"#4e9a06\",        # class: 's2'\n+        String.Escape:             \"#4e9a06\",        # class: 'se'\n+        String.Heredoc:            \"#4e9a06\",        # class: 'sh'\n+        String.Interpol:           \"#4e9a06\",        # class: 'si'\n+        String.Other:              \"#4e9a06\",        # class: 'sx'\n+        String.Regex:              \"#4e9a06\",        # class: 'sr'\n+        String.Single:             \"#4e9a06\",        # class: 's1'\n+        String.Symbol:             \"#4e9a06\",        # class: 'ss'\n+\n+        Generic:                   \"#000000\",        # class: 'g'\n+        Generic.Deleted:           \"#a40000\",        # class: 'gd'\n+        Generic.Emph:              \"italic #000000\", # class: 'ge'\n+        Generic.Error:             \"#ef2929\",        # class: 'gr'\n+        Generic.Heading:           \"bold #000080\",   # class: 'gh'\n+        Generic.Inserted:          \"#00A000\",        # class: 'gi'\n+        Generic.Output:            \"#888\",           # class: 'go'\n+        Generic.Prompt:            \"#745334\",        # class: 'gp'\n+        Generic.Strong:            \"bold #000000\",   # class: 'gs'\n+        Generic.Subheading:        \"bold #800080\",   # class: 'gu'\n+        Generic.Traceback:         \"bold #a40000\",   # class: 'gt'\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#27dd96cf3db0feb03afa325724d9c3aeb9d995ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 252 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,9 @@ import sys, os\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath('.'))\n+sys.path.insert(0, os.path.abspath('..'))\n+import requests\n+from requests import __version__\n \n # -- General configuration -----------------------------------------------------\n \n@@ -48,7 +50,7 @@ copyright = u'2011, Kenneth Reitz'\n # built documents.\n #\n # The short X.Y version.\n-version = '0.3.3'\n+version = __version__\n # The full version, including alpha/beta/rc tags.\n release = version\n \n@@ -81,7 +83,7 @@ exclude_patterns = ['_build']\n #show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = 'sphinx'\n+pygments_style = 'flask_theme_support.FlaskyStyle'\n \n # A list of ignored prefixes for module index sorting.\n #modindex_common_prefix = []\n@@ -230,3 +232,7 @@ texinfo_documents = [\n \n # Documents to append as an appendix to all manuals.\n texinfo_appendices = []\n+\n+sys.path.append(os.path.abspath('_themes'))\n+html_theme_path = ['_themes']\n+html_theme = 'kr'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f1f578806657a6b123cc159129906199cfd04a57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#58d5e0318e688f08373496dc3fee1d4977902958", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7970c2a463041d3dd7efa2d205f3bd08cb7aba7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 258 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2011, Kenneth Reitz'\n+copyright = u'2011. A Kenneth Reitz Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -149,10 +149,10 @@ html_static_path = ['_static']\n #html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+html_show_sourcelink = True\n \n # If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+html_show_sphinx = False\n \n # If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n #html_show_copyright = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ba45b9d8904c3982ebe1a0bc0290b36f859f23c2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 268 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2011. A Kenneth Reitz Project'\n+copyright = u'2011. A <a href=\"http://kennethreitz.com\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -114,6 +114,7 @@ html_theme = 'default'\n # of the sidebar.\n #html_logo = None\n \n+\n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n@@ -133,7 +134,12 @@ html_static_path = ['_static']\n #html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# Custom sidebar templates, maps document names to template names.\n+html_sidebars = {\n+    'index':    ['sidebarintro.html', 'sourcelink.html', 'searchbox.html'],\n+    '**':       ['sidebarlogo.html', 'localtoc.html', 'relations.html',\n+                 'sourcelink.html', 'searchbox.html']\n+}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e13e7343d2d1a37fe61365c7658984bcf4d9194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 29 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 62 | Churn Cumulative: 1466 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,7 @@ __all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n \n \n def request(method, url, **kwargs):\n-    \"\"\"Sends a `method` request. Returns :class:`Response` object.\n+    \"\"\"Sends a Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n\n@@ -23,7 +23,7 @@ from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n class Request(object):\n-    \"\"\"The :class:`Request` object. It carries out all functionality of\n+    \"\"\"The :class:`Request <models.Request>` object. It carries out all functionality of\n     Requests. Recommended interface is with the Requests functions.\n     \"\"\"\n \n@@ -34,11 +34,18 @@ class Request(object):\n \n         socket.setdefaulttimeout(timeout)\n \n+        #: Request URL.\n         self.url = url\n+        #: Dictonary of HTTP Headers to attach to the :class:`Request <models.Request>`.\n         self.headers = headers\n+        #: Dictionary of files to multipart upload (``{filename: content}``).\n         self.files = files\n+        #: HTTP Method to use. Available: GET, HEAD, PUT, POST, DELETE.\n         self.method = method\n+        #: Form or Byte data to attach to the :class:`Request <models.Request>`.\n         self.data = dict()\n+        #: True if :class:`Request <models.Request>` is part of a redirect chain (disables history\n+        #: and HTTPError storage).\n         self.redirect = redirect\n \n         # self.data = {}\n@@ -55,15 +62,19 @@ class Request(object):\n         else:\n             self._enc_data = data\n \n-\n+        #: :class:`Response <models.Response>` instance, containing\n+        #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n         self.response = Response()\n \n         if isinstance(auth, (list, tuple)):\n             auth = AuthObject(*auth)\n         if not auth:\n             auth = auth_manager.get_auth(self.url)\n+        #: :class:`AuthObject` to attach to :class:`Request <models.Request>`.\n         self.auth = auth\n+        #: CookieJar to attach to :class:`Request <models.Request>`.\n         self.cookiejar = cookiejar\n+        #: True if Request has been sent.\n         self.sent = False\n \n \n@@ -104,9 +115,6 @@ class Request(object):\n \n \n         _handlers.append(HTTPRedirectHandler)\n-        # print _handlers\n-        # print '^^'\n-        # print '!'\n \n         if not _handlers:\n             return urllib2.urlopen\n@@ -128,7 +136,7 @@ class Request(object):\n         return opener.open\n \n     def _build_response(self, resp):\n-        \"\"\"Build internal Response object from given response.\"\"\"\n+        \"\"\"Build internal :class:`Response <models.Response>` object from given response.\"\"\"\n \n         def build(resp):\n \n@@ -253,19 +261,34 @@ class Request(object):\n \n \n class Response(object):\n-    \"\"\"The :class:`Request` object. All :class:`Request` objects contain a\n-    :class:`Request.response <response>` attribute, which is an instance of\n-    this class.\n+    \"\"\"The core :class:`Response <models.Response>` object. All\n+    :class:`Request <models.Request>` objects contain a\n+    :class:`response <models.Response>` attribute, which is an instance\n+    of this class.\n     \"\"\"\n \n     def __init__(self):\n+        #: Raw content of the response, in bytes.\n+        #: If ``content-encoding`` of response was set to ``gzip``, the\n+        #: response data will be automatically deflated.\n         self.content = None\n+        #: Integer Code of responded HTTP Status.\n         self.status_code = None\n+        #: Case-insensitive Dictionary of Response Headers.\n+        #: For example, ``headers['content-encoding']`` will return the\n+        #: value of a ``'Content-Encoding'`` response header.\n         self.headers = CaseInsensitiveDict()\n+        #: Final URL location of Response.\n         self.url = None\n+        #: True if no :attr:`error` occured.\n         self.ok = False\n+        #: Resulting :class:`HTTPError` of request, if one occured.\n         self.error = None\n+        #: True, if the response :attr:`content` is cached locally.\n         self.cached = False\n+        #: A list of :class:`Response <models.Response>` objects from\n+        #: the history of the Request. Any redirect responses will end\n+        #: up here.\n         self.history = []\n \n \n@@ -274,22 +297,24 @@ class Response(object):\n \n \n     def __nonzero__(self):\n-        \"\"\"Returns true if status_code is 'OK'.\"\"\"\n+        \"\"\"Returns true if :attr:`status_code` is 'OK'.\"\"\"\n         return not self.error\n \n \n     def raise_for_status(self):\n-        \"\"\"Raises stored HTTPError if one exists.\"\"\"\n+        \"\"\"Raises stored :class:`HTTPError`, if one occured.\"\"\"\n         if self.error:\n             raise self.error\n \n     def read(self, *args):\n+        \"\"\"Returns :attr:`content`. Used for file-like object compatiblity.\"\"\"\n+\n         return self.content\n \n \n \n class AuthManager(object):\n-    \"\"\"Authentication Manager.\"\"\"\n+    \"\"\"Requests Authentication Manager.\"\"\"\n \n     def __new__(cls):\n         singleton = cls.__dict__.get('__singleton__')\n@@ -458,6 +483,12 @@ class AuthObject(object):\n         else:\n             self.handler = handler\n \n+\n+# ----------\n+# Exceptions\n+# ----------\n+\n+\n class RequestException(Exception):\n     \"\"\"There was an ambiguous exception that occured while handling your\n     request.\"\"\"\n\n@@ -12,7 +12,10 @@ from UserDict import DictMixin\n \n \n class CaseInsensitiveDict(DictMixin):\n-    \"\"\"docstring for CaseInsensitiveDict\"\"\"\n+    \"\"\"Case-insensitive Dictionary for :class:`Response <models.Response>` Headers.\n+\n+    For example, ``headers['content-encoding']`` will return the\n+    value of a ``'Content-Encoding'`` response header.\"\"\"\n \n     def __init__(self, *args, **kwargs):\n         # super(CaseInsensitiveDict, self).__init__()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
