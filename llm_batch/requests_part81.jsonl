{"custom_id": "requests#8ed941fa6991355753e698f6b253096d57f6c7e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 10 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 22 | Churn Cumulative: 12166 | Contributors (this commit): 167 | Commits (past 90d): 21 | Contributors (cumulative): 193 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,6 +46,8 @@ DEFAULT_REDIRECT_LIMIT = 30\n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n \n+json_dumps = json.dumps\n+\n \n class RequestEncodingMixin(object):\n     @property\n@@ -189,8 +191,8 @@ class Request(RequestHooksMixin):\n     :param url: URL to send.\n     :param headers: dictionary of headers to send.\n     :param files: dictionary of {filename: fileobject} files to multipart upload.\n-    :param data: the body to attach the request. If a dictionary is provided, form-encoding will take place.\n-    :param json: json for the body to attach the request.\n+    :param data: the body to attach to the request. If a dictionary is provided, form-encoding will take place.\n+    :param json: json for the body to attach to the request (if data is not specified).\n     :param params: dictionary of URL parameters to append to the URL.\n     :param auth: Auth handler or (user, pass) tuple.\n     :param cookies: dictionary or CookieJar of cookies to attach to this request.\n@@ -218,7 +220,6 @@ class Request(RequestHooksMixin):\n \n         # Default empty dicts for dict params.\n         data = [] if data is None else data\n-        json = [] if json is None else json\n         files = [] if files is None else files\n         headers = {} if headers is None else headers\n         params = {} if params is None else params\n@@ -294,7 +295,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.hooks = default_hooks()\n \n     def prepare(self, method=None, url=None, headers=None, files=None,\n-                data=None, json=None, params=None, auth=None, cookies=None, hooks=None):\n+                data=None, params=None, auth=None, cookies=None, hooks=None,\n+                json=None):\n         \"\"\"Prepares the entire request with the given parameters.\"\"\"\n \n         self.prepare_method(method)\n@@ -402,7 +404,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         else:\n             self.headers = CaseInsensitiveDict()\n \n-    def prepare_body(self, data, files, _json=None):\n+    def prepare_body(self, data, files, json=None):\n         \"\"\"Prepares the given HTTP body data.\"\"\"\n \n         # Check if file, fo, generator, iterator.\n@@ -413,9 +415,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         content_type = None\n         length = None\n \n-        if _json is not None:\n+        if json is not None:\n             content_type = 'application/json'\n-            data = json.dumps(_json)\n+            body = json_dumps(json)\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n@@ -442,7 +444,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             if files:\n                 (body, content_type) = self._encode_files(files, data)\n             else:\n-                if data and _json is None:\n+                if data and json is None:\n                     body = self._encode_params(data)\n                     if isinstance(data, basestring) or hasattr(data, 'read'):\n                         content_type = None\n@@ -452,7 +454,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             self.prepare_content_length(body)\n \n             # Add content-type if it wasn't explicitly provided.\n-            if (content_type) and (not 'content-type' in self.headers):\n+            if content_type and ('content-type' not in self.headers):\n                 self.headers['Content-Type'] = content_type\n \n         self.body = body\n\n@@ -430,7 +430,7 @@ class Session(SessionRedirectMixin):\n             headers = headers,\n             files = files,\n             data = data or {},\n-            json = json or {},\n+            json = json,\n             params = params or {},\n             auth = auth,\n             cookies = cookies,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b1f3a2dd66f1da05976d7f60261ce0665d4b6469", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 2967 | Contributors (this commit): 58 | Commits (past 90d): 11 | Contributors (cumulative): 58 | DMM Complexity: None\n\nDIFF:\n@@ -271,9 +271,10 @@ class Session(SessionRedirectMixin):\n     \"\"\"\n \n     __attrs__ = [\n-        'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n-        'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream',\n-        'trust_env', 'max_redirects', 'redirect_cache']\n+        'headers', 'cookies', 'auth', 'proxies', 'hooks', 'params', 'verify',\n+        'cert', 'prefetch', 'adapters', 'stream', 'trust_env',\n+        'max_redirects', 'redirect_cache'\n+    ]\n \n     def __init__(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79f56e2e7e9cf1828da8287735751a998269a5f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 5 | Churn Cumulative: 2194 | Contributors (this commit): 52 | Commits (past 90d): 4 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -351,10 +351,7 @@ def get_unicode_from_response(r):\n     Tried:\n \n     1. charset from content-type\n-\n-    2. every encodings from ``<meta ... charset=XXX>``\n-\n-    3. fall back and replace all unicode characters\n+    2. fall back and replace all unicode characters\n \n     \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#779c001e44ed436a805a6fea5b4d2895b381d7b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 557 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ Requests is an HTTP library, written in Python, for human beings. Basic GET\n usage:\n \n    >>> import requests\n-   >>> r = requests.get('http://python.org')\n+   >>> r = requests.get('https://www.python.org')\n    >>> r.status_code\n    200\n    >>> 'Python is a programming language' in r.content\n@@ -22,7 +22,7 @@ usage:\n ... or POST:\n \n    >>> payload = dict(key1='value1', key2='value2')\n-   >>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n+   >>> r = requests.post('http://httpbin.org/post', data=payload)\n    >>> print(r.text)\n    {\n      ...\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.4.1'\n-__build__ = 0x020401\n+__version__ = '2.4.2'\n+__build__ = 0x020402\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca2ebc5b682452bc870efb2f7123feda9a80a8ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 12 | Churn Cumulative: 14016 | Contributors (this commit): 171 | Commits (past 90d): 29 | Contributors (cumulative): 222 | DMM Complexity: 1.0\n\nDIFF:\n@@ -338,9 +338,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         #: as this will include the bytestring indicator (b'')\n         #: on python 3.x.\n         #: https://github.com/kennethreitz/requests/pull/2238\n-        try:\n+        if isinstance(url, bytes):\n             url = url.decode('utf8')\n-        except AttributeError:\n+        else:\n             url = unicode(url) if is_py2 else str(url)\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n\n@@ -1507,5 +1507,13 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+def test_prepare_unicode_url():\n+    p = PreparedRequest()\n+    p.prepare(\n+        method='GET',\n+        url=u('http://www.example.com/üniçø∂é')\n+    )\n+    assert_copy(p, p.copy())\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0e4efab270780726fbf4f8b6704f8f22741399d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 12185 | Contributors (this commit): 168 | Commits (past 90d): 25 | Contributors (cumulative): 194 | DMM Complexity: None\n\nDIFF:\n@@ -213,11 +213,11 @@ class Request(RequestHooksMixin):\n         headers=None,\n         files=None,\n         data=None,\n-        json=None,\n         params=None,\n         auth=None,\n         cookies=None,\n-        hooks=None):\n+        hooks=None,\n+        json=None):\n \n         # Default empty dicts for dict params.\n         data = [] if data is None else data\n\n@@ -378,7 +378,6 @@ class Session(SessionRedirectMixin):\n     def request(self, method, url,\n         params=None,\n         data=None,\n-        json=None,\n         headers=None,\n         cookies=None,\n         files=None,\n@@ -389,7 +388,8 @@ class Session(SessionRedirectMixin):\n         hooks=None,\n         stream=None,\n         verify=None,\n-        cert=None):\n+        cert=None,\n+        json=None):\n         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n         Returns :class:`Response <Response>` object.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#46d646064ca0836a7d7b4d50ea2c762d12ff8ce1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 561 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.4.2'\n-__build__ = 0x020402\n+__version__ = '2.4.3'\n+__build__ = 0x020403\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ff6f756c034ad0a946c711d0e136cfbd077ab62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 1250 | Contributors (this commit): 31 | Commits (past 90d): 2 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -17,6 +17,7 @@ from base64 import b64encode\n from .compat import urlparse, str\n from .cookies import extract_cookies_to_jar\n from .utils import parse_dict_header, to_native_string\n+from .status_codes import codes\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n@@ -150,13 +151,12 @@ class HTTPDigestAuth(AuthBase):\n \n         return 'Digest %s' % (base)\n \n-    def handle_302(self, r, **kwargs):\n+    def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n-        try:\n-            delattr(self, 'num_401_calls')\n-        except AttributeError:\n-            pass\n-        return r\n+        if r.status_code in (\n+                codes.temporary_redirect,\n+                codes.permanent_redirect):\n+            setattr(self, 'num_401_calls', 1)\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n@@ -190,7 +190,7 @@ class HTTPDigestAuth(AuthBase):\n \n             return _r\n \n-        setattr(self, 'num_401_calls', 1)\n+        setattr(self, 'num_401_calls', num_401_calls + 1)\n         return r\n \n     def __call__(self, r):\n@@ -202,5 +202,5 @@ class HTTPDigestAuth(AuthBase):\n         except AttributeError:\n             pass\n         r.register_hook('response', self.handle_401)\n-        r.register_hook('response', self.handle_302)\n+        r.register_hook('response', self.handle_redirect)\n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4594667f07cac83ea95a19747dea1588aa2cb59e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 2196 | Contributors (this commit): 53 | Commits (past 90d): 5 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -567,7 +567,7 @@ def parse_header_links(value):\n \n     replace_chars = \" '\\\"\"\n \n-    for val in value.split(\",\"):\n+    for val in re.split(\",\\ *<\",value):\n         try:\n             url, params = val.split(\";\", 1)\n         except ValueError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8339b60fd5bbe0ef9dae1764b3964f515364a54f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2198 | Contributors (this commit): 53 | Commits (past 90d): 6 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -567,7 +567,7 @@ def parse_header_links(value):\n \n     replace_chars = \" '\\\"\"\n \n-    for val in re.split(\",\\ *<\", value):\n+    for val in re.split(\", *<\", value):\n         try:\n             url, params = val.split(\";\", 1)\n         except ValueError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5ff05be1ed04bcc50e33af28fb54382466a32e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 9220 | Contributors (this commit): 137 | Commits (past 90d): 13 | Contributors (cumulative): 137 | DMM Complexity: 0.0\n\nDIFF:\n@@ -682,7 +682,7 @@ class Response(object):\n \n         return chunks\n \n-    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None):\n+    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, newline=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n         stream=True is set on the request, this avoids reading the\n         content at once into memory for large responses.\n@@ -694,6 +694,10 @@ class Response(object):\n \n             if pending is not None:\n                 chunk = pending + chunk\n+\n+            if newline:\n+                lines = chunk.split(newline)\n+            else:\n                 lines = chunk.splitlines()\n \n             if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3d8823cafc82fd9849eef6650a54a61554079b61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1254 | Contributors (this commit): 31 | Commits (past 90d): 3 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -153,9 +153,7 @@ class HTTPDigestAuth(AuthBase):\n \n     def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n-        if r.status_code in (\n-                codes.temporary_redirect,\n-                codes.permanent_redirect):\n+        if r.is_redirect:\n             setattr(self, 'num_401_calls', 1)\n \n     def handle_401(self, r, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3602690886a0b1795f721664e93c96f4b4c9f5a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9226 | Contributors (this commit): 137 | Commits (past 90d): 13 | Contributors (cumulative): 137 | DMM Complexity: None\n\nDIFF:\n@@ -682,7 +682,7 @@ class Response(object):\n \n         return chunks\n \n-    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, newline=None):\n+    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n         stream=True is set on the request, this avoids reading the\n         content at once into memory for large responses.\n@@ -695,8 +695,8 @@ class Response(object):\n             if pending is not None:\n                 chunk = pending + chunk\n \n-            if newline:\n-                lines = chunk.split(newline)\n+            if delimiter:\n+                lines = chunk.split(delimiter)\n             else:\n                 lines = chunk.splitlines()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfd6e25749dd17c6b511043a6720b672f74029ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 9227 | Contributors (this commit): 138 | Commits (past 90d): 14 | Contributors (cumulative): 138 | DMM Complexity: 1.0\n\nDIFF:\n@@ -511,6 +511,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare_hooks(self, hooks):\n         \"\"\"Prepares the given hooks.\"\"\"\n+        if hooks is not None:\n             for event in hooks:\n                 self.register_hook(event, hooks[event])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77687de5099b6b65cde5901a29a3b1c5e751b8a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1 | Churn Cumulative: 9228 | Contributors (this commit): 138 | Commits (past 90d): 15 | Contributors (cumulative): 138 | DMM Complexity: 0.0\n\nDIFF:\n@@ -511,7 +511,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare_hooks(self, hooks):\n         \"\"\"Prepares the given hooks.\"\"\"\n-        if hooks is not None:\n         for event in hooks:\n             self.register_hook(event, hooks[event])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#26ed7c2e1dce4271f3a3b111a167a6dcca3acddf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 9230 | Contributors (this commit): 138 | Commits (past 90d): 16 | Contributors (cumulative): 138 | DMM Complexity: None\n\nDIFF:\n@@ -310,7 +310,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         # such as OAuth to work on a fully prepared request.\n \n         # This MUST go after prepare_auth. Authenticators could add a hook\n-        self.prepare_hooks(hooks)\n+        self.prepare_hooks(hooks if hooks is not None else [])\n \n     def __repr__(self):\n         return '<PreparedRequest [%s]>' % (self.method)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8e69c9f0a16b37990df4430eb81a5138520689ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 9232 | Contributors (this commit): 138 | Commits (past 90d): 17 | Contributors (cumulative): 138 | DMM Complexity: None\n\nDIFF:\n@@ -310,7 +310,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         # such as OAuth to work on a fully prepared request.\n \n         # This MUST go after prepare_auth. Authenticators could add a hook\n-        self.prepare_hooks(hooks if hooks is not None else [])\n+        self.prepare_hooks(hooks)\n \n     def __repr__(self):\n         return '<PreparedRequest [%s]>' % (self.method)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#583859b8204a1e9dd8a337f1ca06e31e8f79b5f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4809 | Contributors (this commit): 87 | Commits (past 90d): 15 | Contributors (cumulative): 87 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1511,7 +1511,8 @@ def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n-        url=u('http://www.example.com/üniçø∂é')\n+        url=u('http://www.example.com/üniçø∂é'),\n+        hooks=[]\n     )\n     assert_copy(p, p.copy())\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d505b94fa47dbce4eae4db09d0056b7808b71b01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2209 | Contributors (this commit): 53 | Commits (past 90d): 7 | Contributors (cumulative): 53 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,6 +19,7 @@ import re\n import sys\n import socket\n import struct\n+import warnings\n \n from . import __version__\n from . import certs\n@@ -287,6 +288,11 @@ def get_encodings_from_content(content):\n \n     :param content: bytestring to extract encodings from.\n     \"\"\"\n+    warnings.warn((\n+        'In requests 3.0, get_encodings_from_content will be removed. For '\n+        'more information, please see the discussion on issue #2266. (This'\n+        ' warning should only appear once.)'),\n+        DeprecationWarning)\n \n     charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)\n     pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)\n@@ -354,6 +360,11 @@ def get_unicode_from_response(r):\n     2. fall back and replace all unicode characters\n \n     \"\"\"\n+    warnings.warn((\n+        'In requests 3.0, get_unicode_from_response will be removed. For '\n+        'more information, please see the discussion on issue #2266. (This'\n+        ' warning should only appear once.)'),\n+        DeprecationWarning)\n \n     tried_encodings = []\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#387c8f852cbb6ee2bdbb073b23871e18b7767d53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2975 | Contributors (this commit): 59 | Commits (past 90d): 12 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -21,6 +21,7 @@ from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers, to_native_string\n from .exceptions import (\n     TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)\n+from .packages.urllib3._collections import RecentlyUsedContainer\n from .structures import CaseInsensitiveDict\n \n from .adapters import HTTPAdapter\n@@ -327,7 +328,8 @@ class Session(SessionRedirectMixin):\n         self.mount('https://', HTTPAdapter())\n         self.mount('http://', HTTPAdapter())\n \n-        self.redirect_cache = {}\n+        # Only store 1000 redirects to prevent using infinite memory\n+        self.redirect_cache = RecentlyUsedContainer(1000)\n \n     def __enter__(self):\n         return self\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a703e24573d46871f5cd63631e33778281981f24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 880 | Contributors (this commit): 26 | Commits (past 90d): 7 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -60,8 +60,10 @@ class HTTPAdapter(BaseAdapter):\n     :param pool_connections: The number of urllib3 connection pools to cache.\n     :param pool_maxsize: The maximum number of connections to save in the pool.\n     :param int max_retries: The maximum number of retries each connection\n-        should attempt. Note, this applies only to failed connections and\n-        timeouts, never to requests where the server returns a response.\n+        should attempt. Note, this applies only to failed DNS lookups, socket\n+        connections and connection timeouts, never to requests where data has\n+        made it to the server. By default, Requests does not retry failed\n+        connections.\n     :param pool_block: Whether the connection pool should block for connections.\n \n     Usage::\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#29ef1081583115c8bb2c8a592b883dc7c835240c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 7793 | Contributors (this commit): 118 | Commits (past 90d): 28 | Contributors (cumulative): 146 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,7 +13,7 @@ from collections import Mapping\n from datetime import datetime\n \n from .auth import _basic_auth_str\n-from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str\n+from .compat import cookielib, OrderedDict, urljoin, urlparse\n from .cookies import (\n     cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n@@ -425,7 +425,7 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n-        method = builtin_str(method)\n+        method = to_native_string(method)\n \n         # Create the Request.\n         req = Request(\n\n@@ -1389,6 +1389,11 @@ class TestTimeout:\n         except ConnectTimeout:\n             pass\n \n+    def test_encoded_methods(self):\n+        \"\"\"See: https://github.com/kennethreitz/requests/issues/2316\"\"\"\n+        r = requests.request(b'GET', httpbin('get'))\n+        assert r.ok\n+\n \n SendCall = collections.namedtuple('SendCall', ('args', 'kwargs'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f28bde7250cfe18a2bb9351dae17908783d8a93e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 882 | Contributors (this commit): 26 | Commits (past 90d): 8 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -123,7 +123,7 @@ class HTTPAdapter(BaseAdapter):\n         self._pool_block = block\n \n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize,\n-                                       block=block, **pool_kwargs)\n+                                       block=block, strict=True, **pool_kwargs)\n \n     def proxy_manager_for(self, proxy, **proxy_kwargs):\n         \"\"\"Return urllib3 ProxyManager for the given proxy.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3155bc99362a8c6ab136b6a3bb999732617cd2e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 1112 | Contributors (this commit): 31 | Commits (past 90d): 2 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,7 +46,12 @@ def request(method, url, **kwargs):\n     \"\"\"\n \n     session = sessions.Session()\n-    return session.request(method=method, url=url, **kwargs)\n+    response = session.request(method=method, url=url, **kwargs)\n+    # By explicitly closing the session, we avoid leaving sockets open which\n+    # can trigger a ResourceWarning in some cases, and look like a memory leak\n+    # in others.\n+    session.close()\n+    return response\n \n \n def get(url, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#34f6088c8f3f2bac942c84ce2ffa92dfdee5aa4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 4822 | Contributors (this commit): 88 | Commits (past 90d): 16 | Contributors (cumulative): 88 | DMM Complexity: 1.0\n\nDIFF:\n@@ -103,6 +103,14 @@ class RequestsTestCase(unittest.TestCase):\n         head_req = requests.Request('HEAD', httpbin('head')).prepare()\n         assert 'Content-Length' not in head_req.headers\n \n+    def test_override_content_length(self):\n+        headers = {\n+            'Content-Length': 'not zero'\n+        }\n+        r = requests.Request('POST', httpbin('post'), headers=headers).prepare()\n+        assert 'Content-Length' in r.headers\n+        assert r.headers['Content-Length'] == 'not zero'\n+\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request('GET', \"http://0.0.0.0/get/test case\").prepare()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ee50afef59ca47879144448ae056a2836f3d4534", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 9234 | Contributors (this commit): 139 | Commits (past 90d): 17 | Contributors (cumulative): 139 | DMM Complexity: None\n\nDIFF:\n@@ -472,7 +472,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             l = super_len(body)\n             if l:\n                 self.headers['Content-Length'] = builtin_str(l)\n-        elif self.method not in ('GET', 'HEAD'):\n+        elif (self.method not in ('GET', 'HEAD')) and (self.headers.get('Content-Length') is None):\n             self.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth, url=''):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#67c505781cece96763b86c47967efb785f33b079", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1260 | Contributors (this commit): 31 | Commits (past 90d): 4 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -198,7 +198,11 @@ class HTTPDigestAuth(AuthBase):\n         try:\n             self.pos = r.body.tell()\n         except AttributeError:\n-            pass\n+            # In the case of HTTPDigestAuth being reused and the body of\n+            # the previous request was a file-like object, pos has the\n+            # file position of the previous body. Ensure it's set to\n+            # None.\n+            self.pos = None\n         r.register_hook('response', self.handle_401)\n         r.register_hook('response', self.handle_redirect)\n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2bc7762cb6c91f49e5b116d3eb9f93af01e331f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 891 | Contributors (this commit): 26 | Commits (past 90d): 10 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,7 +33,7 @@ from .auth import _basic_auth_str\n \n DEFAULT_POOLBLOCK = False\n DEFAULT_POOLSIZE = 10\n-DEFAULT_RETRIES = 0\n+DEFAULT_RETRIES = object()\n \n \n class BaseAdapter(object):\n@@ -79,7 +79,10 @@ class HTTPAdapter(BaseAdapter):\n     def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n                  pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n                  pool_block=DEFAULT_POOLBLOCK):\n-        self.max_retries = max_retries\n+        if max_retries is DEFAULT_RETRIES:\n+            self.max_retries = Retry(0, read=False)\n+        else:\n+            self.max_retries = Retry.from_int(max_retries)\n         self.config = {}\n         self.proxy_manager = {}\n \n@@ -360,7 +363,7 @@ class HTTPAdapter(BaseAdapter):\n                     assert_same_host=False,\n                     preload_content=False,\n                     decode_content=False,\n-                    retries=Retry(self.max_retries, read=False),\n+                    retries=self.max_retries,\n                     timeout=timeout\n                 )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f54a4e3de186495a5254d21ae698c677c71b90c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 97 | Lines Deleted: 26 | Files Changed: 7 | Hunks: 30 | Methods Changed: 13 | Complexity Δ (Sum/Max): 17/9 | Churn Δ: 123 | Churn Cumulative: 5770 | Contributors (this commit): 15 | Commits (past 90d): 11 | Contributors (cumulative): 43 | DMM Complexity: 0.3055555555555556\n\nDIFF:\n@@ -14,7 +14,7 @@ try: # Python 2.7+\n     from collections import OrderedDict\n except ImportError:\n     from .packages.ordered_dict import OrderedDict\n-from .packages.six import itervalues\n+from .packages.six import iterkeys, itervalues\n \n \n __all__ = ['RecentlyUsedContainer', 'HTTPHeaderDict']\n@@ -85,8 +85,7 @@ class RecentlyUsedContainer(MutableMapping):\n     def clear(self):\n         with self.lock:\n             # Copy pointers to all values, then wipe the mapping\n-            # under Python 2, this copies the list of values twice :-|\n-            values = list(self._container.values())\n+            values = list(itervalues(self._container))\n             self._container.clear()\n \n         if self.dispose_func:\n@@ -95,7 +94,7 @@ class RecentlyUsedContainer(MutableMapping):\n \n     def keys(self):\n         with self.lock:\n-            return self._container.keys()\n+            return list(iterkeys(self._container))\n \n \n class HTTPHeaderDict(MutableMapping):\n\n@@ -3,6 +3,7 @@ import sys\n import socket\n from socket import timeout as SocketTimeout\n import warnings\n+from .packages import six\n \n try:  # Python 3\n     from http.client import HTTPConnection as _HTTPConnection, HTTPException\n@@ -26,12 +27,19 @@ except (ImportError, AttributeError):  # Platform-specific: No SSL.\n         pass\n \n \n+try:  # Python 3:\n+    # Not a no-op, we're adding this to the namespace so it can be imported.\n+    ConnectionError = ConnectionError\n+except NameError:  # Python 2:\n+    class ConnectionError(Exception):\n+        pass\n+\n+\n from .exceptions import (\n     ConnectTimeoutError,\n     SystemTimeWarning,\n )\n from .packages.ssl_match_hostname import match_hostname\n-from .packages import six\n \n from .util.ssl_ import (\n     resolve_cert_reqs,\n@@ -40,8 +48,8 @@ from .util.ssl_ import (\n     assert_fingerprint,\n )\n \n-from .util import connection\n \n+from .util import connection\n \n port_by_scheme = {\n     'http': 80,\n\n@@ -32,7 +32,7 @@ from .connection import (\n     port_by_scheme,\n     DummyConnection,\n     HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection,\n-    HTTPException, BaseSSLError,\n+    HTTPException, BaseSSLError, ConnectionError\n )\n from .request import RequestMethods\n from .response import HTTPResponse\n@@ -542,7 +542,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             release_conn = True\n             raise SSLError(e)\n \n-        except (TimeoutError, HTTPException, SocketError) as e:\n+        except (TimeoutError, HTTPException, SocketError, ConnectionError) as e:\n             if conn:\n                 # Discard the connection for these exceptions. It will be\n                 # be replaced during the next _get_conn() call.\n\n@@ -29,7 +29,7 @@ Now you can use :mod:`urllib3` as you normally would, and it will support SNI\n when the required modules are installed.\n \n Activating this module also has the positive side effect of disabling SSL/TLS\n-encryption in Python 2 (see `CRIME attack`_).\n+compression in Python 2 (see `CRIME attack`_).\n \n If you want to configure the default list of supported cipher suites, you can\n set the ``urllib3.contrib.pyopenssl.DEFAULT_SSL_CIPHER_LIST`` variable.\n@@ -199,8 +199,21 @@ class WrappedSocket(object):\n     def settimeout(self, timeout):\n         return self.socket.settimeout(timeout)\n \n+    def _send_until_done(self, data):\n+        while True:\n+            try:\n+                return self.connection.send(data)\n+            except OpenSSL.SSL.WantWriteError:\n+                _, wlist, _ = select.select([], [self.socket], [],\n+                                            self.socket.gettimeout())\n+                if not wlist:\n+                    raise timeout()\n+                continue\n+\n     def sendall(self, data):\n-        return self.connection.sendall(data)\n+        while len(data):\n+            sent = self._send_until_done(data)\n+            data = data[sent:]\n \n     def close(self):\n         if self._makefile_refs < 1:\n@@ -248,6 +261,7 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                     ssl_version=None):\n     ctx = OpenSSL.SSL.Context(_openssl_versions[ssl_version])\n     if certfile:\n+        keyfile = keyfile or certfile  # Match behaviour of the normal python ssl library\n         ctx.use_certificate_file(certfile)\n     if keyfile:\n         ctx.use_privatekey_file(keyfile)\n\n@@ -72,11 +72,8 @@ class MaxRetryError(RequestError):\n     def __init__(self, pool, url, reason=None):\n         self.reason = reason\n \n-        message = \"Max retries exceeded with url: %s\" % url\n-        if reason:\n-            message += \" (Caused by %r)\" % reason\n-        else:\n-            message += \" (Caused by redirect)\"\n+        message = \"Max retries exceeded with url: %s (Caused by %r)\" % (\n+            url, reason)\n \n         RequestError.__init__(self, pool, url, message)\n \n@@ -141,6 +138,12 @@ class LocationParseError(LocationValueError):\n         self.location = location\n \n \n+class ResponseError(HTTPError):\n+    \"Used as a container for an error reason supplied in a MaxRetryError.\"\n+    GENERIC_ERROR = 'too many error responses'\n+    SPECIFIC_ERROR = 'too many {status_code} error responses'\n+\n+\n class SecurityWarning(HTTPWarning):\n     \"Warned when perfoming security reducing actions\"\n     pass\n\n@@ -2,10 +2,11 @@ import time\n import logging\n \n from ..exceptions import (\n-    ProtocolError,\n     ConnectTimeoutError,\n-    ReadTimeoutError,\n     MaxRetryError,\n+    ProtocolError,\n+    ReadTimeoutError,\n+    ResponseError,\n )\n from ..packages import six\n \n@@ -36,7 +37,6 @@ class Retry(object):\n     Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless\n     retries are disabled, in which case the causing exception will be raised.\n \n-\n     :param int total:\n         Total number of retries to allow. Takes precedence over other counts.\n \n@@ -184,8 +184,8 @@ class Retry(object):\n         return isinstance(err, ConnectTimeoutError)\n \n     def _is_read_error(self, err):\n-        \"\"\" Errors that occur after the request has been started, so we can't\n-        assume that the server did not process any of it.\n+        \"\"\" Errors that occur after the request has been started, so we should\n+        assume that the server began processing it.\n         \"\"\"\n         return isinstance(err, (ReadTimeoutError, ProtocolError))\n \n@@ -198,8 +198,7 @@ class Retry(object):\n         return self.status_forcelist and status_code in self.status_forcelist\n \n     def is_exhausted(self):\n-        \"\"\" Are we out of retries?\n-        \"\"\"\n+        \"\"\" Are we out of retries? \"\"\"\n         retry_counts = (self.total, self.connect, self.read, self.redirect)\n         retry_counts = list(filter(None, retry_counts))\n         if not retry_counts:\n@@ -230,6 +229,7 @@ class Retry(object):\n         connect = self.connect\n         read = self.read\n         redirect = self.redirect\n+        cause = 'unknown'\n \n         if error and self._is_connection_error(error):\n             # Connect retry?\n@@ -251,10 +251,16 @@ class Retry(object):\n             # Redirect retry?\n             if redirect is not None:\n                 redirect -= 1\n+            cause = 'too many redirects'\n \n         else:\n-            # FIXME: Nothing changed, scenario doesn't make sense.\n+            # Incrementing because of a server error like a 500 in\n+            # status_forcelist and a the given method is in the whitelist\n             _observed_errors += 1\n+            cause = ResponseError.GENERIC_ERROR\n+            if response and response.status:\n+                cause = ResponseError.SPECIFIC_ERROR.format(\n+                    status_code=response.status)\n \n         new_retry = self.new(\n             total=total,\n@@ -262,7 +268,7 @@ class Retry(object):\n             _observed_errors=_observed_errors)\n \n         if new_retry.is_exhausted():\n-            raise MaxRetryError(_pool, url, error)\n+            raise MaxRetryError(_pool, url, error or ResponseError(cause))\n \n         log.debug(\"Incremented Retry for (url='%s'): %r\" % (url, new_retry))\n \n\n@@ -40,6 +40,48 @@ class Url(namedtuple('Url', url_attrs)):\n             return '%s:%d' % (self.host, self.port)\n         return self.host\n \n+    @property\n+    def url(self):\n+        \"\"\"\n+        Convert self into a url\n+\n+        This function should more or less round-trip with :func:`.parse_url`. The\n+        returned url may not be exactly the same as the url inputted to\n+        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls\n+        with a blank port will have : removed).\n+\n+        Example: ::\n+\n+            >>> U = parse_url('http://google.com/mail/')\n+            >>> U.url\n+            'http://google.com/mail/'\n+            >>> Url('http', 'username:password', 'host.com', 80,\n+            ... '/path', 'query', 'fragment').url\n+            'http://username:password@host.com:80/path?query#fragment'\n+        \"\"\"\n+        scheme, auth, host, port, path, query, fragment = self\n+        url = ''\n+\n+        # We use \"is not None\" we want things to happen with empty strings (or 0 port)\n+        if scheme is not None:\n+            url += scheme + '://'\n+        if auth is not None:\n+            url += auth + '@'\n+        if host is not None:\n+            url += host\n+        if port is not None:\n+            url += ':' + str(port)\n+        if path is not None:\n+            url += path\n+        if query is not None:\n+            url += '?' + query\n+        if fragment is not None:\n+            url += '#' + fragment\n+\n+        return url\n+\n+    def __str__(self):\n+        return self.url\n \n def split_first(s, delims):\n     \"\"\"\n@@ -84,7 +126,7 @@ def parse_url(url):\n     Example::\n \n         >>> parse_url('http://google.com/mail/')\n-        Url(scheme='http', host='google.com', port=None, path='/', ...)\n+        Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n         >>> parse_url('google.com:80')\n         Url(scheme=None, host='google.com', port=80, path=None, ...)\n         >>> parse_url('/foo?bar')\n@@ -162,7 +204,6 @@ def parse_url(url):\n \n     return Url(scheme, auth, host, port, path, query, fragment)\n \n-\n def get_host(url):\n     \"\"\"\n     Deprecated. Use :func:`.parse_url` instead.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2eb7e3c80b345f6c6e13fadf6f1ba98efccdd2e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 29 | Churn Cumulative: 5912 | Contributors (this commit): 108 | Commits (past 90d): 34 | Contributors (cumulative): 130 | DMM Complexity: 0.8\n\nDIFF:\n@@ -26,14 +26,15 @@ from .packages.urllib3.exceptions import ProxyError as _ProxyError\n from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n+from .packages.urllib3.exceptions import ResponseError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n-                         ProxyError)\n+                         ProxyError, RetryError)\n from .auth import _basic_auth_str\n \n DEFAULT_POOLBLOCK = False\n DEFAULT_POOLSIZE = 10\n-DEFAULT_RETRIES = object()\n+DEFAULT_RETRIES = 0\n \n \n class BaseAdapter(object):\n@@ -79,7 +80,7 @@ class HTTPAdapter(BaseAdapter):\n     def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n                  pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n                  pool_block=DEFAULT_POOLBLOCK):\n-        if max_retries is DEFAULT_RETRIES:\n+        if max_retries == DEFAULT_RETRIES:\n             self.max_retries = Retry(0, read=False)\n         else:\n             self.max_retries = Retry.from_int(max_retries)\n@@ -415,6 +416,9 @@ class HTTPAdapter(BaseAdapter):\n             if isinstance(e.reason, ConnectTimeoutError):\n                 raise ConnectTimeout(e, request=request)\n \n+            if isinstance(e.reason, ResponseError):\n+                raise RetryError(e, request=request)\n+\n             raise ConnectionError(e, request=request)\n \n         except _ProxyError as e:\n\n@@ -90,5 +90,10 @@ class ChunkedEncodingError(RequestException):\n class ContentDecodingError(RequestException, BaseHTTPError):\n     \"\"\"Failed to decode response content\"\"\"\n \n+\n class StreamConsumedError(RequestException, TypeError):\n     \"\"\"The content for this response was already consumed\"\"\"\n+\n+\n+class RetryError(RequestException):\n+    \"\"\"Custom retries logic failed\"\"\"\n\n@@ -20,7 +20,7 @@ from requests.compat import (\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (ConnectionError, ConnectTimeout,\n                                  InvalidSchema, InvalidURL, MissingSchema,\n-                                 ReadTimeout, Timeout)\n+                                 ReadTimeout, Timeout, RetryError)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -1520,6 +1520,7 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1529,5 +1530,16 @@ def test_prepare_unicode_url():\n     )\n     assert_copy(p, p.copy())\n \n+\n+def test_urllib3_retries():\n+    from requests.packages.urllib3.util import Retry\n+    s = requests.Session()\n+    s.mount('https://', HTTPAdapter(max_retries=Retry(\n+        total=2, status_forcelist=[500]\n+    )))\n+\n+    with pytest.raises(RetryError):\n+        s.get('https://httpbin.org/status/500')\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
