{"custom_id": "fastapi#cf760d6802d33d6fd3c72bcd6d57029419fdb33a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 225 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.50.0\"\n+__version__ = \"0.51.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#94ee932351ac25a40ae9eb0adcc2de7376fe1b9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 60 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI\n+from fastapi.responses import ORJSONResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", response_class=ORJSONResponse)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -1,3 +1,5 @@\n+from typing import Any\n+\n from starlette.responses import FileResponse  # noqa\n from starlette.responses import HTMLResponse  # noqa\n from starlette.responses import JSONResponse  # noqa\n@@ -6,3 +8,16 @@ from starlette.responses import RedirectResponse  # noqa\n from starlette.responses import Response  # noqa\n from starlette.responses import StreamingResponse  # noqa\n from starlette.responses import UJSONResponse  # noqa\n+\n+try:\n+    import orjson\n+except ImportError:  # pragma: nocover\n+    orjson = None  # type: ignore\n+\n+\n+class ORJSONResponse(JSONResponse):\n+    media_type = \"application/json\"\n+\n+    def render(self, content: Any) -> bytes:\n+        assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n+        return orjson.dumps(content)\n\n@@ -0,0 +1,36 @@\n+from fastapi.testclient import TestClient\n+\n+from custom_response.tutorial001b import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#025b38df40a18f94322fab445aee13024fe783da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 227 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.51.0\"\n+__version__ = \"0.52.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6205935323ded4767438ee81623892621b353415", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 344 | Lines Deleted: 4 | Files Changed: 209 | Hunks: 4 | Methods Changed: 16 | Complexity Δ (Sum/Max): 51/51 | Churn Δ: 348 | Churn Cumulative: 614 | Contributors (this commit): 2 | Commits (past 90d): 212 | Contributors (cumulative): 211 | DMM Complexity: 0.5056603773584906\n\nDIFF:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@@ -0,0 +1,340 @@\n+import os\n+import shutil\n+from http.server import HTTPServer, SimpleHTTPRequestHandler\n+from pathlib import Path\n+from typing import Dict, Optional, Tuple\n+\n+import mkdocs.commands.build\n+import mkdocs.commands.serve\n+import mkdocs.config\n+import mkdocs.utils\n+import typer\n+import yaml\n+\n+app = typer.Typer()\n+\n+mkdocs_name = \"mkdocs.yml\"\n+\n+missing_translation_snippet = \"\"\"\n+{!../../../docs/missing-translation.md!}\n+\"\"\"\n+\n+docs_path = Path(\"docs\")\n+\n+\n+def lang_callback(lang: Optional[str]):\n+    if lang is None:\n+        return\n+    if not lang.isalpha() or len(lang) != 2:\n+        typer.echo(\"Use a 2 letter language code, like: es\")\n+        raise typer.Abort()\n+    lang = lang.lower()\n+    return lang\n+\n+\n+def complete_existing_lang(incomplete: str):\n+    lang_path: Path\n+    for lang_path in docs_path.iterdir():\n+        if lang_path.is_dir() and lang_path.name.startswith(incomplete):\n+            yield lang_path.name\n+\n+\n+@app.command()\n+def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n+    \"\"\"\n+    Generate a new docs translation directory for the language LANG.\n+\n+    LANG should be a 2-letter language code, like: en, es, de, pt, etc.\n+    \"\"\"\n+    new_path: Path = Path(\"docs\") / lang\n+    if new_path.exists():\n+        typer.echo(f\"The language was already created: {lang}\")\n+        raise typer.Abort()\n+    new_path.mkdir()\n+    en_docs_path = Path(\"docs/en\")\n+    en_config_path: Path = en_docs_path / mkdocs_name\n+    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text())\n+    fastapi_url_base = \"https://fastapi.tiangolo.com/\"\n+    new_config = {}\n+    new_config[\"site_name\"] = en_config[\"site_name\"]\n+    new_config[\"site_description\"] = en_config[\"site_description\"]\n+    new_config[\"site_url\"] = en_config[\"site_url\"] + f\"{lang}/\"\n+    new_config[\"theme\"] = en_config[\"theme\"]\n+    new_config[\"theme\"][\"logo\"] = fastapi_url_base + en_config[\"theme\"][\"logo\"]\n+    new_config[\"theme\"][\"favicon\"] = fastapi_url_base + en_config[\"theme\"][\"favicon\"]\n+    new_config[\"theme\"][\"language\"] = lang\n+    new_config[\"repo_name\"] = en_config[\"repo_name\"]\n+    new_config[\"repo_url\"] = en_config[\"repo_url\"]\n+    new_config[\"edit_uri\"] = en_config[\"edit_uri\"]\n+    new_config[\"google_analytics\"] = en_config[\"google_analytics\"]\n+    new_config[\"nav\"] = en_config[\"nav\"][:2]\n+\n+    new_config[\"markdown_extensions\"] = en_config[\"markdown_extensions\"]\n+    new_config[\"extra\"] = en_config[\"extra\"]\n+\n+    extra_css = []\n+    css: str\n+    for css in en_config[\"extra_css\"]:\n+        if css.startswith(\"http\"):\n+            extra_css.append(css)\n+        else:\n+            extra_css.append(fastapi_url_base + css)\n+    new_config[\"extra_css\"] = extra_css\n+\n+    extra_js = []\n+    js: str\n+    for js in en_config[\"extra_javascript\"]:\n+        if js.startswith(\"http\"):\n+            extra_js.append(js)\n+        else:\n+            extra_js.append(fastapi_url_base + js)\n+    new_config[\"extra_javascript\"] = extra_js\n+    new_config_path: Path = Path(new_path) / mkdocs_name\n+    new_config_path.write_text(yaml.dump(new_config, sort_keys=False, width=200))\n+    new_config_docs_path: Path = new_path / \"docs\"\n+    new_config_docs_path.mkdir()\n+    en_index_path: Path = en_docs_path / \"docs\" / \"index.md\"\n+    new_index_path: Path = new_config_docs_path / \"index.md\"\n+    en_index_content = en_index_path.read_text()\n+    new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n+    new_index_path.write_text(new_index_content)\n+    typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n+    update_languages(lang=None)\n+\n+\n+@app.command()\n+def build_lang(\n+    lang: str = typer.Argument(\n+        ..., callback=lang_callback, autocompletion=complete_existing_lang\n+    )\n+):\n+    \"\"\"\n+    Build the docs for a language, filling missing pages with translation notifications.\n+    \"\"\"\n+    lang_path: Path = Path(\"docs\") / lang\n+    if not lang_path.is_dir():\n+        typer.echo(f\"The language translation doesn't seem to exist yet: {lang}\")\n+        raise typer.Abort()\n+    typer.echo(f\"Building docs for: {lang}\")\n+    build_dir_path = Path(\"docs_build\")\n+    build_dir_path.mkdir(exist_ok=True)\n+    build_lang_path = build_dir_path / lang\n+    en_lang_path = Path(\"docs/en\")\n+    site_path = Path(\"site\").absolute()\n+    if lang == \"en\":\n+        dist_path = site_path\n+    else:\n+        dist_path: Path = site_path / lang\n+    shutil.rmtree(build_lang_path, ignore_errors=True)\n+    shutil.copytree(lang_path, build_lang_path)\n+    en_config_path: Path = en_lang_path / mkdocs_name\n+    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text())\n+    nav = en_config[\"nav\"]\n+    lang_config_path: Path = lang_path / mkdocs_name\n+    lang_config: dict = mkdocs.utils.yaml_load(lang_config_path.read_text())\n+    lang_nav = lang_config[\"nav\"]\n+    # Exclude first 2 entries FastAPI and Languages, for custom handling\n+    use_nav = nav[2:]\n+    lang_use_nav = lang_nav[2:]\n+    file_to_nav = get_file_to_nav_map(use_nav)\n+    sections = get_sections(use_nav)\n+    lang_file_to_nav = get_file_to_nav_map(lang_use_nav)\n+    use_lang_file_to_nav = get_file_to_nav_map(lang_use_nav)\n+    for file in file_to_nav:\n+        file_path = Path(file)\n+        lang_file_path: Path = build_lang_path / \"docs\" / file_path\n+        en_file_path: Path = en_lang_path / \"docs\" / file_path\n+        lang_file_path.parent.mkdir(parents=True, exist_ok=True)\n+        if not lang_file_path.is_file():\n+            en_text = en_file_path.read_text()\n+            lang_text = get_text_with_translate_missing(en_text)\n+            lang_file_path.write_text(lang_text)\n+            file_key = file_to_nav[file]\n+            use_lang_file_to_nav[file] = file_key\n+            if file_key:\n+                composite_key = ()\n+                new_key = ()\n+                for key_part in file_key:\n+                    composite_key += (key_part,)\n+                    key_first_file = sections[composite_key]\n+                    if key_first_file in lang_file_to_nav:\n+                        new_key = lang_file_to_nav[key_first_file]\n+                    else:\n+                        new_key += (key_part,)\n+                use_lang_file_to_nav[file] = new_key\n+    key_to_section = {(): []}\n+    for file, file_key in use_lang_file_to_nav.items():\n+        section = get_key_section(key_to_section=key_to_section, key=file_key)\n+        section.append(file)\n+    new_nav = key_to_section[()]\n+    export_lang_nav = [lang_nav[0], nav[1]] + new_nav\n+    lang_config[\"nav\"] = export_lang_nav\n+    build_lang_config_path: Path = build_lang_path / mkdocs_name\n+    build_lang_config_path.write_text(\n+        yaml.dump(lang_config, sort_keys=False, width=200)\n+    )\n+    current_dir = os.getcwd()\n+    os.chdir(build_lang_path)\n+    mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(dist_path)))\n+    os.chdir(current_dir)\n+    typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)\n+\n+\n+@app.command()\n+def build_all():\n+    \"\"\"\n+    Build mkdocs site for en, and then build each language inside, end result is located\n+    at directory ./site/ with each language inside.\n+    \"\"\"\n+    site_path = Path(\"site\").absolute()\n+    update_languages(lang=None)\n+    en_build_path: Path = docs_path / \"en\"\n+    current_dir = os.getcwd()\n+    os.chdir(en_build_path)\n+    typer.echo(f\"Building docs for: en\")\n+    mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(site_path)))\n+    os.chdir(current_dir)\n+    for lang in docs_path.iterdir():\n+        if lang == en_build_path or not lang.is_dir():\n+            continue\n+        build_lang(lang.name)\n+    typer.echo(\"Copying en index.md to README.md\")\n+    en_index = en_build_path / \"docs\" / \"index.md\"\n+    shutil.copyfile(en_index, \"README.md\")\n+\n+\n+@app.command()\n+def update_languages(\n+    lang: str = typer.Argument(\n+        None, callback=lang_callback, autocompletion=complete_existing_lang\n+    )\n+):\n+    \"\"\"\n+    Update the mkdocs.yml file Languages section including all the available languages.\n+\n+    The LANG argument is a 2-letter language code. If it's not provided, update all the\n+    mkdocs.yml files (for all the languages).\n+    \"\"\"\n+    if lang is None:\n+        for lang_path in docs_path.iterdir():\n+            if lang_path.is_dir():\n+                typer.echo(f\"Updating {lang_path.name}\")\n+                update_config(lang_path.name)\n+    else:\n+        typer.echo(f\"Updating {lang}\")\n+        update_config(lang)\n+\n+\n+@app.command()\n+def serve():\n+    \"\"\"\n+    A quick server to preview a built site with translations.\n+\n+    For development, prefer the command live (or just mkdocs serve).\n+\n+    This is here only to preview a site with translations already built.\n+\n+    Make sure you run the build-all command first.\n+    \"\"\"\n+    typer.echo(\n+        \"Warning: this is a very simple server.\"\n+        + \"For development, use mkdocs serve instead.\"\n+    )\n+    typer.echo(\"This is here only to preview a site with translations already built.\")\n+    typer.echo(\"Make sure you run the build-all command first.\")\n+    os.chdir(\"site\")\n+    server_address = (\"\", 8008)\n+    server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n+    typer.echo(f\"Serving at: http://0.0.0.0:8008\")\n+    server.serve_forever()\n+\n+\n+@app.command()\n+def live(\n+    lang: str = typer.Argument(\n+        None, callback=lang_callback, autocompletion=complete_existing_lang\n+    )\n+):\n+    \"\"\"\n+    Serve with livereload a docs site for a specific language.\n+\n+    This only shows the actual translated files, not the placeholders created with\n+    build-all.\n+\n+    Takes an optional LANG argument with the name of the language to serve, by default\n+    en.\n+    \"\"\"\n+    if lang is None:\n+        lang = \"en\"\n+    lang_path: Path = docs_path / lang\n+    os.chdir(lang_path)\n+    mkdocs.commands.serve.serve(dev_addr=\"0.0.0.0:8008\")\n+\n+\n+def update_config(lang: str):\n+    lang_path: Path = docs_path / lang\n+    config_path = lang_path / mkdocs_name\n+    config: dict = mkdocs.utils.yaml_load(config_path.read_text())\n+    languages = [{\"en\": \"/\"}]\n+    for lang in docs_path.iterdir():\n+        if lang.name == \"en\" or not lang.is_dir():\n+            continue\n+        name = lang.name\n+        languages.append({name: f\"/{name}/\"})\n+    config[\"nav\"][1] = {\"Languages\": languages}\n+    config_path.write_text(yaml.dump(config, sort_keys=False, width=200))\n+\n+\n+def get_key_section(\n+    *, key_to_section: Dict[Tuple[str, ...], list], key: Tuple[str, ...]\n+) -> list:\n+    if key in key_to_section:\n+        return key_to_section[key]\n+    super_key = key[:-1]\n+    title = key[-1]\n+    super_section = get_key_section(key_to_section=key_to_section, key=super_key)\n+    new_section = []\n+    super_section.append({title: new_section})\n+    key_to_section[key] = new_section\n+    return new_section\n+\n+\n+def get_text_with_translate_missing(text: str) -> str:\n+    lines = text.splitlines()\n+    lines.insert(1, missing_translation_snippet)\n+    new_text = \"\\n\".join(lines)\n+    return new_text\n+\n+\n+def get_file_to_nav_map(nav: list) -> Dict[str, Tuple[str, ...]]:\n+    file_to_nav = {}\n+    for item in nav:\n+        if type(item) is str:\n+            file_to_nav[item] = tuple()\n+        elif type(item) is dict:\n+            item_key = list(item.keys())[0]\n+            sub_nav = item[item_key]\n+            sub_file_to_nav = get_file_to_nav_map(sub_nav)\n+            for k, v in sub_file_to_nav.items():\n+                file_to_nav[k] = (item_key,) + v\n+    return file_to_nav\n+\n+\n+def get_sections(nav: list) -> Dict[Tuple[str, ...], str]:\n+    sections = {}\n+    for item in nav:\n+        if type(item) is str:\n+            continue\n+        elif type(item) is dict:\n+            item_key = list(item.keys())[0]\n+            sub_nav = item[item_key]\n+            sections[(item_key,)] = sub_nav[0]\n+            sub_sections = get_sections(sub_nav)\n+            for k, v in sub_sections.items():\n+                new_key = (item_key,) + k\n+                sections[new_key] = v\n+    return sections\n+\n+\n+if __name__ == \"__main__\":\n+    app()\n\n@@ -107,7 +107,7 @@ def test_path_operation():\n \n \n def test_path_operation_img():\n-    shutil.copy(\"./docs/img/favicon.png\", \"./image.png\")\n+    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n     response = client.get(\"/items/foo?img=1\")\n     assert response.status_code == 200\n     assert response.headers[\"Content-Type\"] == \"image/png\"\n\n@@ -110,7 +110,7 @@ def test_path_operation():\n \n \n def test_path_operation_img():\n-    shutil.copy(\"./docs/img/favicon.png\", \"./image.png\")\n+    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n     response = client.get(\"/items/foo?img=1\")\n     assert response.status_code == 200\n     assert response.headers[\"Content-Type\"] == \"image/png\"\n\n@@ -4,8 +4,8 @@ from fastapi.testclient import TestClient\n \n \n def test_main():\n-    shutil.copytree(\"./docs/src/templates/templates/\", \"./templates\")\n-    shutil.copytree(\"./docs/src/templates/static/\", \"./static\")\n+    shutil.copytree(\"./docs_src/templates/templates/\", \"./templates\")\n+    shutil.copytree(\"./docs_src/templates/static/\", \"./static\")\n     from templates.tutorial001 import app\n \n     client = TestClient(app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c13b54ad0e60a662ff16a17ea102021ca3c48b8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 344 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -245,7 +245,7 @@ def serve():\n     os.chdir(\"site\")\n     server_address = (\"\", 8008)\n     server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n-    typer.echo(f\"Serving at: http://0.0.0.0:8008\")\n+    typer.echo(f\"Serving at: http://127.0.0.1:8008\")\n     server.serve_forever()\n \n \n@@ -268,7 +268,7 @@ def live(\n         lang = \"en\"\n     lang_path: Path = docs_path / lang\n     os.chdir(lang_path)\n-    mkdocs.commands.serve.serve(dev_addr=\"0.0.0.0:8008\")\n+    mkdocs.commands.serve.serve(dev_addr=\"127.0.0.1:8008\")\n \n \n def update_config(lang: str):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7625e1e386dd2bbe21300703a7d9377cb001d673", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 350 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -236,10 +236,8 @@ def serve():\n \n     Make sure you run the build-all command first.\n     \"\"\"\n-    typer.echo(\n-        \"Warning: this is a very simple server.\"\n-        + \"For development, use mkdocs serve instead.\"\n-    )\n+    typer.echo(\"Warning: this is a very simple server.\")\n+    typer.echo(\"For development, use the command live instead.\")\n     typer.echo(\"This is here only to preview a site with translations already built.\")\n     typer.echo(\"Make sure you run the build-all command first.\")\n     os.chdir(\"site\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aea04ee32ee1942e6e1a904527bb8da6ba76abd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 179 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 3 | Methods Changed: 18 | Complexity Δ (Sum/Max): 20/16 | Churn Δ: 186 | Churn Cumulative: 3603 | Contributors (this commit): 18 | Commits (past 90d): 11 | Contributors (cumulative): 19 | DMM Complexity: 0.84\n\nDIFF:\n@@ -48,6 +48,28 @@ except ImportError:  # pragma: nocover\n     from pydantic.fields import Field as ModelField  # type: ignore\n \n \n+def _prepare_response_content(\n+    res: Any, *, by_alias: bool = True, exclude_unset: bool\n+) -> Any:\n+    if isinstance(res, BaseModel):\n+        if PYDANTIC_1:\n+            return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)\n+        else:\n+            return res.dict(\n+                by_alias=by_alias, skip_defaults=exclude_unset\n+            )  # pragma: nocover\n+    elif isinstance(res, list):\n+        return [\n+            _prepare_response_content(item, exclude_unset=exclude_unset) for item in res\n+        ]\n+    elif isinstance(res, dict):\n+        return {\n+            k: _prepare_response_content(v, exclude_unset=exclude_unset)\n+            for k, v in res.items()\n+        }\n+    return res\n+\n+\n async def serialize_response(\n     *,\n     field: ModelField = None,\n@@ -60,13 +82,9 @@ async def serialize_response(\n ) -> Any:\n     if field:\n         errors = []\n-        if exclude_unset and isinstance(response_content, BaseModel):\n-            if PYDANTIC_1:\n-                response_content = response_content.dict(exclude_unset=exclude_unset)\n-            else:\n-                response_content = response_content.dict(\n-                    skip_defaults=exclude_unset\n-                )  # pragma: nocover\n+        response_content = _prepare_response_content(\n+            response_content, by_alias=by_alias, exclude_unset=exclude_unset\n+        )\n         if is_coroutine:\n             value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n         else:\n\n@@ -0,0 +1,154 @@\n+from typing import Dict, List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel, Field\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str = Field(..., alias=\"aliased_name\")\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/valid\", response_model=Item)\n+def get_valid():\n+    return Item(aliased_name=\"valid\", price=1.0)\n+\n+\n+@app.get(\"/items/coerce\", response_model=Item)\n+def get_coerce():\n+    return Item(aliased_name=\"coerce\", price=\"1.0\")\n+\n+\n+@app.get(\"/items/validlist\", response_model=List[Item])\n+def get_validlist():\n+    return [\n+        Item(aliased_name=\"foo\"),\n+        Item(aliased_name=\"bar\", price=1.0),\n+        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    ]\n+\n+\n+@app.get(\"/items/validdict\", response_model=Dict[str, Item])\n+def get_validdict():\n+    return {\n+        \"k1\": Item(aliased_name=\"foo\"),\n+        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n+        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    }\n+\n+\n+@app.get(\n+    \"/items/valid-exclude-unset\", response_model=Item, response_model_exclude_unset=True\n+)\n+def get_valid_exclude_unset():\n+    return Item(aliased_name=\"valid\", price=1.0)\n+\n+\n+@app.get(\n+    \"/items/coerce-exclude-unset\",\n+    response_model=Item,\n+    response_model_exclude_unset=True,\n+)\n+def get_coerce_exclude_unset():\n+    return Item(aliased_name=\"coerce\", price=\"1.0\")\n+\n+\n+@app.get(\n+    \"/items/validlist-exclude-unset\",\n+    response_model=List[Item],\n+    response_model_exclude_unset=True,\n+)\n+def get_validlist_exclude_unset():\n+    return [\n+        Item(aliased_name=\"foo\"),\n+        Item(aliased_name=\"bar\", price=1.0),\n+        Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    ]\n+\n+\n+@app.get(\n+    \"/items/validdict-exclude-unset\",\n+    response_model=Dict[str, Item],\n+    response_model_exclude_unset=True,\n+)\n+def get_validdict_exclude_unset():\n+    return {\n+        \"k1\": Item(aliased_name=\"foo\"),\n+        \"k2\": Item(aliased_name=\"bar\", price=1.0),\n+        \"k3\": Item(aliased_name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    }\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_valid():\n+    response = client.get(\"/items/valid\")\n+    response.raise_for_status()\n+    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n+\n+\n+def test_coerce():\n+    response = client.get(\"/items/coerce\")\n+    response.raise_for_status()\n+    assert response.json() == {\n+        \"aliased_name\": \"coerce\",\n+        \"price\": 1.0,\n+        \"owner_ids\": None,\n+    }\n+\n+\n+def test_validlist():\n+    response = client.get(\"/items/validlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n+\n+\n+def test_validdict():\n+    response = client.get(\"/items/validdict\")\n+    response.raise_for_status()\n+    assert response.json() == {\n+        \"k1\": {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    }\n+\n+\n+def test_valid_exclude_unset():\n+    response = client.get(\"/items/valid-exclude-unset\")\n+    response.raise_for_status()\n+    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0}\n+\n+\n+def test_coerce_exclude_unset():\n+    response = client.get(\"/items/coerce-exclude-unset\")\n+    response.raise_for_status()\n+    assert response.json() == {\"aliased_name\": \"coerce\", \"price\": 1.0}\n+\n+\n+def test_validlist_exclude_unset():\n+    response = client.get(\"/items/validlist-exclude-unset\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"aliased_name\": \"foo\"},\n+        {\"aliased_name\": \"bar\", \"price\": 1.0},\n+        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n+\n+\n+def test_validdict_exclude_unset():\n+    response = client.get(\"/items/validdict-exclude-unset\")\n+    response.raise_for_status()\n+    assert response.json() == {\n+        \"k1\": {\"aliased_name\": \"foo\"},\n+        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0},\n+        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#15241b53a834d90fb4aa98225efab8fc29a67441", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 101 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/files/{file_path:path}\")\n-async def read_user_me(file_path: str):\n+async def read_file(file_path: str):\n     return {\"file_path\": file_path}\n\n@@ -26,8 +26,8 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Read User Me\",\n-                \"operationId\": \"read_user_me_files__file_path__get\",\n+                \"summary\": \"Read File\",\n+                \"operationId\": \"read_file_files__file_path__get\",\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1f53fef70a7cbb20267e0fb1166c29f90c84cba1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 414 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -81,7 +81,7 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n \n     grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n         This dependency is strict about it. If you want to be permissive, use instead the\n-        OAuth2PasswordRequestFormStrict dependency class.\n+        OAuth2PasswordRequestForm dependency class.\n     username: username string. The OAuth2 spec requires the exact field name \"username\".\n     password: password string. The OAuth2 spec requires the exact field name \"password\".\n     scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#56e43ba204e6a7f2f7468d55c8cc835e7b5616c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 229 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.52.0\"\n+__version__ = \"0.53.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#459f0e11e5e09b7a380f3f859b58e20455378f50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 49 | Files Changed: 4 | Hunks: 15 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 68 | Churn Cumulative: 480 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n-from flask import Flask, escape, request\n from fastapi import FastAPI\n from fastapi.middleware.wsgi import WSGIMiddleware\n+from flask import Flask, escape, request\n \n flask_app = Flask(__name__)\n \n\n@@ -53,7 +53,7 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n     new_path.mkdir()\n     en_docs_path = Path(\"docs/en\")\n     en_config_path: Path = en_docs_path / mkdocs_name\n-    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text())\n+    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n     fastapi_url_base = \"https://fastapi.tiangolo.com/\"\n     new_config = {}\n     new_config[\"site_name\"] = en_config[\"site_name\"]\n@@ -90,14 +90,16 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n             extra_js.append(fastapi_url_base + js)\n     new_config[\"extra_javascript\"] = extra_js\n     new_config_path: Path = Path(new_path) / mkdocs_name\n-    new_config_path.write_text(yaml.dump(new_config, sort_keys=False, width=200))\n+    new_config_path.write_text(\n+        yaml.dump(new_config, sort_keys=False, width=200), encoding=\"utf-8\"\n+    )\n     new_config_docs_path: Path = new_path / \"docs\"\n     new_config_docs_path.mkdir()\n     en_index_path: Path = en_docs_path / \"docs\" / \"index.md\"\n     new_index_path: Path = new_config_docs_path / \"index.md\"\n-    en_index_content = en_index_path.read_text()\n+    en_index_content = en_index_path.read_text(encoding=\"utf-8\")\n     new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n-    new_index_path.write_text(new_index_content)\n+    new_index_path.write_text(new_index_content, encoding=\"utf-8\")\n     typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n     update_languages(lang=None)\n \n@@ -128,10 +130,12 @@ def build_lang(\n     shutil.rmtree(build_lang_path, ignore_errors=True)\n     shutil.copytree(lang_path, build_lang_path)\n     en_config_path: Path = en_lang_path / mkdocs_name\n-    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text())\n+    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n     nav = en_config[\"nav\"]\n     lang_config_path: Path = lang_path / mkdocs_name\n-    lang_config: dict = mkdocs.utils.yaml_load(lang_config_path.read_text())\n+    lang_config: dict = mkdocs.utils.yaml_load(\n+        lang_config_path.read_text(encoding=\"utf-8\")\n+    )\n     lang_nav = lang_config[\"nav\"]\n     # Exclude first 2 entries FastAPI and Languages, for custom handling\n     use_nav = nav[2:]\n@@ -146,9 +150,9 @@ def build_lang(\n         en_file_path: Path = en_lang_path / \"docs\" / file_path\n         lang_file_path.parent.mkdir(parents=True, exist_ok=True)\n         if not lang_file_path.is_file():\n-            en_text = en_file_path.read_text()\n+            en_text = en_file_path.read_text(encoding=\"utf-8\")\n             lang_text = get_text_with_translate_missing(en_text)\n-            lang_file_path.write_text(lang_text)\n+            lang_file_path.write_text(lang_text, encoding=\"utf-8\")\n             file_key = file_to_nav[file]\n             use_lang_file_to_nav[file] = file_key\n             if file_key:\n@@ -171,7 +175,7 @@ def build_lang(\n     lang_config[\"nav\"] = export_lang_nav\n     build_lang_config_path: Path = build_lang_path / mkdocs_name\n     build_lang_config_path.write_text(\n-        yaml.dump(lang_config, sort_keys=False, width=200)\n+        yaml.dump(lang_config, sort_keys=False, width=200), encoding=\"utf-8\"\n     )\n     current_dir = os.getcwd()\n     os.chdir(build_lang_path)\n@@ -272,7 +276,7 @@ def live(\n def update_config(lang: str):\n     lang_path: Path = docs_path / lang\n     config_path = lang_path / mkdocs_name\n-    config: dict = mkdocs.utils.yaml_load(config_path.read_text())\n+    config: dict = mkdocs.utils.yaml_load(config_path.read_text(encoding=\"utf-8\"))\n     languages = [{\"en\": \"/\"}]\n     for lang in docs_path.iterdir():\n         if lang.name == \"en\" or not lang.is_dir():\n@@ -280,7 +284,9 @@ def update_config(lang: str):\n         name = lang.name\n         languages.append({name: f\"/{name}/\"})\n     config[\"nav\"][1] = {\"Languages\": languages}\n-    config_path.write_text(yaml.dump(config, sort_keys=False, width=200))\n+    config_path.write_text(\n+        yaml.dump(config, sort_keys=False, width=200), encoding=\"utf-8\"\n+    )\n \n \n def get_key_section(\n\n@@ -15,4 +15,4 @@ def test_get_timed():\n     response = client.get(\"/timed\")\n     assert response.json() == {\"message\": \"It's the time of my life\"}\n     assert \"X-Response-Time\" in response.headers\n-    assert float(response.headers[\"X-Response-Time\"]) > 0\n+    assert float(response.headers[\"X-Response-Time\"]) >= 0\n\n@@ -1,36 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from custom_response.tutorial001 import app\n-\n-client = TestClient(app)\n-\n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-            }\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_custom_response():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200\n-    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0f152b4e97a102c0105f26d76d6e1bba3b12fc2a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 97 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 102 | Churn Cumulative: 473 | Contributors (this commit): 10 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: 0.7692307692307693\n\nDIFF:\n@@ -131,17 +131,26 @@ def create_response_field(\n         )\n \n \n-def create_cloned_field(field: ModelField) -> ModelField:\n+def create_cloned_field(\n+    field: ModelField, *, cloned_types: Dict[Type[BaseModel], Type[BaseModel]] = None,\n+) -> ModelField:\n+    # _cloned_types has already cloned types, to support recursive models\n+    if cloned_types is None:\n+        cloned_types = dict()\n     original_type = field.type_\n     if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n         original_type = original_type.__pydantic_model__  # type: ignore\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n+        use_type = cloned_types.get(original_type)\n+        if use_type is None:\n             use_type = create_model(original_type.__name__, __base__=original_type)\n+            cloned_types[original_type] = use_type\n             for f in original_type.__fields__.values():\n-            use_type.__fields__[f.name] = create_cloned_field(f)\n-\n+                use_type.__fields__[f.name] = create_cloned_field(\n+                    f, cloned_types=cloned_types\n+                )\n     new_field = create_response_field(name=field.name, type_=use_type)\n     new_field.has_alias = field.has_alias\n     new_field.alias = field.alias\n@@ -157,10 +166,13 @@ def create_cloned_field(field: ModelField) -> ModelField:\n     new_field.validate_always = field.validate_always\n     if field.sub_fields:\n         new_field.sub_fields = [\n-            create_cloned_field(sub_field) for sub_field in field.sub_fields\n+            create_cloned_field(sub_field, cloned_types=cloned_types)\n+            for sub_field in field.sub_fields\n         ]\n     if field.key_field:\n-        new_field.key_field = create_cloned_field(field.key_field)\n+        new_field.key_field = create_cloned_field(\n+            field.key_field, cloned_types=cloned_types\n+        )\n     new_field.validators = field.validators\n     if PYDANTIC_1:\n         new_field.pre_validators = field.pre_validators\n\n@@ -0,0 +1,80 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class RecursiveItem(BaseModel):\n+    sub_items: List[\"RecursiveItem\"] = []\n+    name: str\n+\n+\n+RecursiveItem.update_forward_refs()\n+\n+\n+class RecursiveSubitemInSubmodel(BaseModel):\n+    sub_items2: List[\"RecursiveItemViaSubmodel\"] = []\n+    name: str\n+\n+\n+class RecursiveItemViaSubmodel(BaseModel):\n+    sub_items1: List[RecursiveSubitemInSubmodel] = []\n+    name: str\n+\n+\n+RecursiveSubitemInSubmodel.update_forward_refs()\n+\n+\n+@app.get(\"/items/recursive\", response_model=RecursiveItem)\n+def get_recursive():\n+    return {\"name\": \"item\", \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}]}\n+\n+\n+@app.get(\"/items/recursive-submodel\", response_model=RecursiveItemViaSubmodel)\n+def get_recursive_submodel():\n+    return {\n+        \"name\": \"item\",\n+        \"sub_items1\": [\n+            {\n+                \"name\": \"subitem\",\n+                \"sub_items2\": [\n+                    {\n+                        \"name\": \"subsubitem\",\n+                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n+                    }\n+                ],\n+            }\n+        ],\n+    }\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_recursive():\n+    response = client.get(\"/items/recursive\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n+        \"name\": \"item\",\n+    }\n+\n+    response = client.get(\"/items/recursive-submodel\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"item\",\n+        \"sub_items1\": [\n+            {\n+                \"name\": \"subitem\",\n+                \"sub_items2\": [\n+                    {\n+                        \"name\": \"subsubitem\",\n+                        \"sub_items1\": [{\"name\": \"subsubsubitem\", \"sub_items2\": []}],\n+                    }\n+                ],\n+            }\n+        ],\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#016a4b74910572f85e4aabcd932e5a92bf2ee95c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 17 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, Field\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str = Field(..., example=\"Foo\")\n+    description: str = Field(None, example=\"A very nice Item\")\n+    price: float = Field(..., example=35.4)\n+    tax: float = Field(None, example=3.2)\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e6b3b994be71896c9228be78aba3def8f02ca9e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 231 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.53.0\"\n+__version__ = \"0.53.1\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#544afaff97c7abadaa9b2bed2264638a79104b84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 27 | Churn Cumulative: 27 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,27 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+    class Config:\n+        schema_extra = {\n+            \"example\": {\n+                \"name\": \"Foo\",\n+                \"description\": \"A very nice Item\",\n+                \"price\": 35.4,\n+                \"tax\": 3.2,\n+            }\n+        }\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#06eaa32bf0a7e3272d5175c26645fe0845286180", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 390 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,6 +22,10 @@ missing_translation_snippet = \"\"\"\n docs_path = Path(\"docs\")\n \n \n+def get_lang_paths():\n+    return sorted(docs_path.iterdir())\n+\n+\n def lang_callback(lang: Optional[str]):\n     if lang is None:\n         return\n@@ -34,7 +38,7 @@ def lang_callback(lang: Optional[str]):\n \n def complete_existing_lang(incomplete: str):\n     lang_path: Path\n-    for lang_path in docs_path.iterdir():\n+    for lang_path in get_lang_paths():\n         if lang_path.is_dir() and lang_path.name.startswith(incomplete):\n             yield lang_path.name\n \n@@ -198,7 +202,7 @@ def build_all():\n     typer.echo(f\"Building docs for: en\")\n     mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(site_path)))\n     os.chdir(current_dir)\n-    for lang in docs_path.iterdir():\n+    for lang in get_lang_paths():\n         if lang == en_build_path or not lang.is_dir():\n             continue\n         build_lang(lang.name)\n@@ -220,7 +224,7 @@ def update_languages(\n     mkdocs.yml files (for all the languages).\n     \"\"\"\n     if lang is None:\n-        for lang_path in docs_path.iterdir():\n+        for lang_path in get_lang_paths():\n             if lang_path.is_dir():\n                 typer.echo(f\"Updating {lang_path.name}\")\n                 update_config(lang_path.name)\n@@ -278,7 +282,7 @@ def update_config(lang: str):\n     config_path = lang_path / mkdocs_name\n     config: dict = mkdocs.utils.yaml_load(config_path.read_text(encoding=\"utf-8\"))\n     languages = [{\"en\": \"/\"}]\n-    for lang in docs_path.iterdir():\n+    for lang in get_lang_paths():\n         if lang.name == \"en\" or not lang.is_dir():\n             continue\n         name = lang.name\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#02441ff0313d5b471b662293244c53e712f1243f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 35 | Churn Cumulative: 3556 | Contributors (this commit): 19 | Commits (past 90d): 13 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -498,7 +498,12 @@ class APIRouter(routing.Router):\n     def add_api_websocket_route(\n         self, path: str, endpoint: Callable, name: str = None\n     ) -> None:\n-        route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n+        route = APIWebSocketRoute(\n+            path,\n+            endpoint=endpoint,\n+            name=name,\n+            dependency_overrides_provider=self.dependency_overrides_provider,\n+        )\n         self.routes.append(route)\n \n     def websocket(self, path: str, name: str = None) -> Callable:\n\n@@ -1,4 +1,4 @@\n-from fastapi import APIRouter, FastAPI, WebSocket\n+from fastapi import APIRouter, Depends, FastAPI, WebSocket\n from fastapi.testclient import TestClient\n \n router = APIRouter()\n@@ -34,6 +34,19 @@ async def routerindex(websocket: WebSocket):\n     await websocket.close()\n \n \n+async def ws_dependency():\n+    return \"Socket Dependency\"\n+\n+\n+@router.websocket(\"/router-ws-depends/\")\n+async def router_ws_decorator_depends(\n+    websocket: WebSocket, data=Depends(ws_dependency)\n+):\n+    await websocket.accept()\n+    await websocket.send_text(data)\n+    await websocket.close()\n+\n+\n app.include_router(router)\n app.include_router(prefix_router, prefix=\"/prefix\")\n \n@@ -64,3 +77,16 @@ def test_router2():\n     with client.websocket_connect(\"/router2\") as websocket:\n         data = websocket.receive_text()\n         assert data == \"Hello, router!\"\n+\n+\n+def test_router_ws_depends():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n+        assert websocket.receive_text() == \"Socket Dependency\"\n+\n+\n+def test_router_ws_depends_with_override():\n+    client = TestClient(app)\n+    app.dependency_overrides[ws_dependency] = lambda: \"Override\"\n+    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n+        assert websocket.receive_text() == \"Override\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
