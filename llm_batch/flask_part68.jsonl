{"custom_id": "flask#e7cd68ba58b78309a342fbce68f6ef1edef3e5e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 41 | Churn Cumulative: 3277 | Contributors (this commit): 37 | Commits (past 90d): 20 | Contributors (cumulative): 42 | DMM Complexity: 1.0\n\nDIFF:\n@@ -405,7 +405,7 @@ class SecureCookieSessionInterface(SessionInterface):\n \n         # Add a \"Vary: Cookie\" header if the session was accessed at all.\n         if session.accessed:\n-            response.headers.add('Vary', 'Cookie')\n+            self._patch_vary_cookie_header(response)\n \n         if not self.should_set_cookie(app, session):\n             return\n@@ -423,3 +423,16 @@ class SecureCookieSessionInterface(SessionInterface):\n             path=path,\n             secure=secure\n         )\n+\n+    def _patch_vary_cookie_header(self, response):\n+        \"\"\"\n+        Add a 'Cookie' value to the 'Vary' header if one is not already present.\n+        \"\"\"\n+        header = response.headers.get('Vary', '')\n+        headers = [h.strip() for h in header.split(',') if h]\n+\n+        if not any(h.lower() == 'cookie' for h in headers):\n+            headers.append('Cookie')\n+\n+        updated_header = ', '.join(headers)\n+        response.headers['Vary'] = updated_header\n\n@@ -520,15 +520,31 @@ def test_session_vary_cookie(app, client):\n     def setdefault():\n         return flask.session.setdefault('test', 'default')\n \n+    @app.route('/vary-cookie-header-set')\n+    def vary_cookie_header_set():\n+        response = flask.Response()\n+        response.headers['Vary'] = 'Cookie'\n+        flask.session['test'] = 'test'\n+        return response\n+\n+    @app.route('/vary-header-set')\n+    def vary_header_set():\n+        response = flask.Response()\n+        response.headers['Vary'] = 'Accept-Encoding, Accept-Language'\n+        flask.session['test'] = 'test'\n+        return response\n+\n     @app.route('/no-vary-header')\n     def no_vary_header():\n         return ''\n \n-    def expect(path, header=True):\n+    def expect(path, header_value='Cookie'):\n         rv = client.get(path)\n \n-        if header:\n-            assert rv.headers['Vary'] == 'Cookie'\n+        if header_value:\n+            # The 'Vary' key should exist in the headers only once.\n+            assert len(rv.headers.get_all('Vary')) == 1\n+            assert rv.headers['Vary'] == header_value\n         else:\n             assert 'Vary' not in rv.headers\n \n@@ -536,7 +552,9 @@ def test_session_vary_cookie(app, client):\n     expect('/get')\n     expect('/getitem')\n     expect('/setdefault')\n-    expect('/no-vary-header', False)\n+    expect('/vary-cookie-header-set')\n+    expect('/vary-header-set', 'Accept-Encoding, Accept-Language, Cookie')\n+    expect('/no-vary-header', None)\n \n \n def test_flashes(app, req_ctx):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7106fb63578deef49741096d3d5aa04db89e15ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 84 | Lines Deleted: 15 | Files Changed: 3 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 11/8 | Churn Δ: 99 | Churn Cumulative: 2238 | Contributors (this commit): 29 | Commits (past 90d): 19 | Contributors (cumulative): 39 | DMM Complexity: 0.38596491228070173\n\nDIFF:\n@@ -9,7 +9,10 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import ast\n+import inspect\n import os\n+import re\n import sys\n import traceback\n from functools import update_wrapper\n@@ -55,20 +58,20 @@ def find_best_app(script_info, module):\n             ' one.'.format(module=module.__name__)\n         )\n \n-    # Search for app factory callables.\n+    # Search for app factory functions.\n     for attr_name in ('create_app', 'make_app'):\n         app_factory = getattr(module, attr_name, None)\n \n-        if callable(app_factory):\n+        if inspect.isfunction(app_factory):\n             try:\n                 app = call_factory(app_factory, script_info)\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n                 raise NoAppException(\n-                    'Auto-detected \"{callable}()\" in module \"{module}\", but '\n+                    'Auto-detected \"{function}()\" in module \"{module}\", but '\n                     'could not call it without specifying arguments.'.format(\n-                        callable=attr_name, module=module.__name__\n+                        function=attr_name, module=module.__name__\n                     )\n                 )\n \n@@ -150,10 +153,45 @@ def locate_app(script_info, app_id):\n     if app_obj is None:\n         app = find_best_app(script_info, mod)\n     else:\n-        app = getattr(mod, app_obj, None)\n+        function_regex = r'^([\\w_][\\w_\\d]*)\\((.*)\\)$'\n+        match = re.match(function_regex, app_obj)\n+        try:\n+            if match:\n+                function_name = match.group(1)\n+                arguments = match.group(2)\n+                if arguments:\n+                    arguments = ast.literal_eval(\n+                        \"({arguments}, )\".format(arguments=arguments))\n+                else:\n+                    arguments = ()\n+                app_factory = getattr(mod, function_name, None)\n+                app_factory_arg_names = getargspec(app_factory).args\n+                if 'script_info' in app_factory_arg_names:\n+                    app = app_factory(*arguments, script_info=script_info)\n+                elif arguments:\n+                    app = app_factory(*arguments)\n+                elif not arguments and len(app_factory_arg_names) == 1:\n+                    app = app_factory(script_info)\n+                else:\n+                    app = app_factory()\n+            else:\n+                attr = getattr(mod, app_obj, None)\n+                if inspect.isfunction(attr):\n+                    app = call_factory(attr, script_info)\n+                else:\n+                    app = attr\n+        except TypeError as e:\n+            new_error = NoAppException(\n+                '{e}\\nThe app factory \"{factory}\" in module \"{module}\" could'\n+                ' not be called with the specified arguments (and a'\n+                ' script_info argument automatically added if applicable).'\n+                ' Did you make sure to use the right number of arguments as'\n+                ' well as not using keyword arguments or'\n+                ' non-literals?'.format(e=e, factory=app_obj, module=module))\n+            reraise(NoAppException, new_error, sys.exc_info()[2])\n         if app is None:\n-            raise RuntimeError('Failed to find application in module \"%s\"'\n-                               % module)\n+            raise RuntimeError('Failed to find application in module '\n+                               '\"{name}\"'.format(name=module))\n \n     return app\n \n\n@@ -0,0 +1,15 @@\n+from __future__ import absolute_import, print_function\n+\n+from flask import Flask\n+\n+\n+def create_app():\n+    return Flask('create_app')\n+\n+\n+def create_app2(foo, bar):\n+    return Flask(\"_\".join(['create_app2', foo, bar]))\n+\n+\n+def create_app3(foo, bar, script_info):\n+    return Flask(\"_\".join(['create_app3', foo, bar]))\n\n@@ -150,15 +150,31 @@ def test_locate_app(test_apps):\n     script_info = ScriptInfo()\n     assert locate_app(script_info, \"cliapp.app\").name == \"testapp\"\n     assert locate_app(script_info, \"cliapp.app:testapp\").name == \"testapp\"\n+    assert locate_app(script_info, \"cliapp.factory\").name == \"create_app\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory\").name == \"create_app\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory:create_app\").name == \"create_app\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory:create_app()\").name == \"create_app\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory:create_app2('foo', 'bar')\"\n+    ).name == \"create_app2_foo_bar\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory:create_app3('baz', 'qux')\"\n+    ).name == \"create_app3_baz_qux\"\n     assert locate_app(script_info, \"cliapp.multiapp:app1\").name == \"app1\"\n-    pytest.raises(NoAppException, locate_app,\n-                  script_info, \"notanpp.py\")\n-    pytest.raises(NoAppException, locate_app,\n-                  script_info, \"cliapp/app\")\n-    pytest.raises(RuntimeError, locate_app,\n-                  script_info, \"cliapp.app:notanapp\")\n-    pytest.raises(NoAppException, locate_app,\n-                  script_info, \"cliapp.importerrorapp\")\n+    pytest.raises(\n+        NoAppException, locate_app, script_info, \"notanpp.py\")\n+    pytest.raises(\n+        NoAppException, locate_app, script_info, \"cliapp/app\")\n+    pytest.raises(\n+        RuntimeError, locate_app, script_info, \"cliapp.app:notanapp\")\n+    pytest.raises(\n+        NoAppException, locate_app,\n+        script_info, \"cliapp.factory:create_app2('foo')\")\n+    pytest.raises(\n+        NoAppException, locate_app, script_info, \"cliapp.importerrorapp\")\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7a1a594b2649890fca5d0e2a24db111046d68f39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 41 | Churn Cumulative: 1710 | Contributors (this commit): 22 | Commits (past 90d): 12 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -96,6 +96,29 @@ def call_factory(func, script_info):\n     return func()\n \n \n+def call_factory_from_regex(match, mod, script_info):\n+    \"\"\"Checks if the given regex match has specified arguments and if the \n+    function takes a ``script_info`` argument and calls the function with\n+    the appropriate arguments.\"\"\"\n+    function_name = match.group(1)\n+    arguments = match.group(2)\n+    if arguments:\n+        arguments = ast.literal_eval(\n+            \"({arguments}, )\".format(arguments=arguments))\n+    else:\n+        arguments = ()\n+    app_factory = getattr(mod, function_name, None)\n+    app_factory_arg_names = getargspec(app_factory).args\n+    if 'script_info' in app_factory_arg_names:\n+        app = app_factory(*arguments, script_info=script_info)\n+    elif arguments:\n+        app = app_factory(*arguments)\n+    elif not arguments and len(app_factory_arg_names) == 1:\n+        app = app_factory(script_info)\n+    else:\n+        app = app_factory()\n+    return app\n+\n def prepare_exec_for_file(filename):\n     \"\"\"Given a filename this will try to calculate the python path, add it\n     to the search path and return the actual module name that is expected.\n@@ -157,23 +180,7 @@ def locate_app(script_info, app_id):\n         match = re.match(function_regex, app_obj)\n         try:\n             if match:\n-                function_name = match.group(1)\n-                arguments = match.group(2)\n-                if arguments:\n-                    arguments = ast.literal_eval(\n-                        \"({arguments}, )\".format(arguments=arguments))\n-                else:\n-                    arguments = ()\n-                app_factory = getattr(mod, function_name, None)\n-                app_factory_arg_names = getargspec(app_factory).args\n-                if 'script_info' in app_factory_arg_names:\n-                    app = app_factory(*arguments, script_info=script_info)\n-                elif arguments:\n-                    app = app_factory(*arguments)\n-                elif not arguments and len(app_factory_arg_names) == 1:\n-                    app = app_factory(script_info)\n-                else:\n-                    app = app_factory()\n+                app = call_factory_from_regex(match, mod, script_info)\n             else:\n                 attr = getattr(mod, app_obj, None)\n                 if inspect.isfunction(attr):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bdf31cd423a295de2f6956b2e8da1d8f26c91858", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/10 | Churn Δ: 43 | Churn Cumulative: 3214 | Contributors (this commit): 61 | Commits (past 90d): 15 | Contributors (cumulative): 69 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1004,3 +1004,17 @@ def is_ip(value):\n             return True\n \n     return False\n+\n+\n+def patch_vary_header(response, value):\n+    \"\"\"Add a value to the ``Vary`` header if it is not already present.\"\"\"\n+\n+    header = response.headers.get('Vary', '')\n+    headers = [h for h in (h.strip() for h in header.split(',')) if h]\n+    lower_value = value.lower()\n+\n+    if not any(h.lower() == lower_value for h in headers):\n+        headers.append(value)\n+\n+    updated_header = ', '.join(headers)\n+    response.headers['Vary'] = updated_header\n\n@@ -9,18 +9,20 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import uuid\n import hashlib\n+import uuid\n import warnings\n-from base64 import b64encode, b64decode\n+from base64 import b64decode, b64encode\n from datetime import datetime\n-from werkzeug.http import http_date, parse_date\n+\n+from itsdangerous import BadSignature, URLSafeTimedSerializer\n from werkzeug.datastructures import CallbackDict\n+from werkzeug.http import http_date, parse_date\n+\n+from flask.helpers import patch_vary_header\n from . import Markup, json\n from ._compat import iteritems, text_type\n-from .helpers import total_seconds, is_ip\n-\n-from itsdangerous import URLSafeTimedSerializer, BadSignature\n+from .helpers import is_ip, total_seconds\n \n \n class SessionMixin(object):\n@@ -405,7 +407,7 @@ class SecureCookieSessionInterface(SessionInterface):\n \n         # Add a \"Vary: Cookie\" header if the session was accessed at all.\n         if session.accessed:\n-            self._patch_vary_cookie_header(response)\n+            patch_vary_header(response, 'Cookie')\n \n         if not self.should_set_cookie(app, session):\n             return\n@@ -423,16 +425,3 @@ class SecureCookieSessionInterface(SessionInterface):\n             path=path,\n             secure=secure\n         )\n-\n-    def _patch_vary_cookie_header(self, response):\n-        \"\"\"\n-        Add a 'Cookie' value to the 'Vary' header if one is not already present.\n-        \"\"\"\n-        header = response.headers.get('Vary', '')\n-        headers = [h.strip() for h in header.split(',') if h]\n-\n-        if not any(h.lower() == 'cookie' for h in headers):\n-            headers.append('Cookie')\n-\n-        updated_header = ', '.join(headers)\n-        response.headers['Vary'] = updated_header\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#48c2925664e154711e97385cc197be8bbb59572d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 58 | Files Changed: 2 | Hunks: 9 | Methods Changed: 6 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 123 | Churn Cumulative: 2387 | Contributors (this commit): 29 | Commits (past 90d): 21 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -82,42 +82,67 @@ def find_best_app(script_info, module):\n     )\n \n \n-def call_factory(func, script_info):\n-    \"\"\"Checks if the given app factory function has an argument named \n-    ``script_info`` or just a single argument and calls the function passing \n-    ``script_info`` if so. Otherwise, calls the function without any arguments\n-    and returns the result.\n+def call_factory(app_factory, script_info, arguments=()):\n+    \"\"\"Takes an app factory, a ``script_info` object and  optionally a tuple\n+    of arguments. Checks for the existence of a script_info argument and calls\n+    the app_factory depending on that and the arguments provided.\n     \"\"\"\n-    arguments = getargspec(func).args\n-    if 'script_info' in arguments:\n-        return func(script_info=script_info)\n-    elif len(arguments) == 1:\n-        return func(script_info)\n-    return func()\n-\n-\n-def call_factory_from_regex(match, mod, script_info):\n-    \"\"\"Checks if the given regex match has specified arguments and if the \n-    function takes a ``script_info`` argument and calls the function with\n-    the appropriate arguments.\"\"\"\n-    function_name = match.group(1)\n-    arguments = match.group(2)\n-    if arguments:\n-        arguments = ast.literal_eval(\n-            \"({arguments}, )\".format(arguments=arguments))\n-    else:\n-        arguments = ()\n-    app_factory = getattr(mod, function_name, None)\n-    app_factory_arg_names = getargspec(app_factory).args\n-    if 'script_info' in app_factory_arg_names:\n-        app = app_factory(*arguments, script_info=script_info)\n+    arg_names = getargspec(app_factory).args\n+    if 'script_info' in arg_names:\n+        return app_factory(*arguments, script_info=script_info)\n     elif arguments:\n-        app = app_factory(*arguments)\n-    elif not arguments and len(app_factory_arg_names) == 1:\n-        app = app_factory(script_info)\n+        return app_factory(*arguments)\n+    elif not arguments and len(arg_names) == 1:\n+        return app_factory(script_info)\n+    return app_factory()\n+\n+\n+def find_app_by_string(string, script_info, module):\n+    \"\"\"Checks if the given string is a variable name or a function. If it is \n+    a function, it checks for specified arguments and whether it takes \n+    a ``script_info`` argument and calls the function with the appropriate \n+    arguments. If it is a \"\"\"\n+    from . import Flask\n+    function_regex = r'^(?P<name>\\w+)(?:\\((?P<args>.*)\\))?$'\n+    match = re.match(function_regex, string)\n+    if match:\n+        name, args = match.groups()\n+        try:\n+            if args is not None:\n+                args = args.rstrip(' ,')\n+                if args:\n+                    args = ast.literal_eval(\n+                        \"({args}, )\".format(args=args))\n                 else:\n-        app = app_factory()\n+                    args = ()\n+                app_factory = getattr(module, name, None)\n+                app = call_factory(app_factory, script_info, args)\n+            else:\n+                attr = getattr(module, name, None)\n+                if inspect.isfunction(attr):\n+                    app = call_factory(attr, script_info)\n+                else:\n+                    app = attr\n+\n+            if isinstance(app, Flask):\n                 return app\n+            else:\n+                raise RuntimeError('Failed to find application in module '\n+                                   '\"{name}\"'.format(name=module))\n+        except TypeError as e:\n+            new_error = NoAppException(\n+                '{e}\\nThe app factory \"{factory}\" in module \"{module}\" could'\n+                ' not be called with the specified arguments (and a'\n+                ' script_info argument automatically added if applicable).'\n+                ' Did you make sure to use the right number of arguments as'\n+                ' well as not using keyword arguments or'\n+                ' non-literals?'.format(e=e, factory=string, module=module))\n+            reraise(NoAppException, new_error, sys.exc_info()[2])\n+    else:\n+        raise NoAppException(\n+            'The provided string \"{string}\" is not a valid variable name'\n+            'or function expression.'.format(string=string))\n+\n \n def prepare_exec_for_file(filename):\n     \"\"\"Given a filename this will try to calculate the python path, add it\n@@ -174,33 +199,9 @@ def locate_app(script_info, app_id):\n \n     mod = sys.modules[module]\n     if app_obj is None:\n-        app = find_best_app(script_info, mod)\n+        return find_best_app(script_info, mod)\n     else:\n-        function_regex = r'^([\\w_][\\w_\\d]*)\\((.*)\\)$'\n-        match = re.match(function_regex, app_obj)\n-        try:\n-            if match:\n-                app = call_factory_from_regex(match, mod, script_info)\n-            else:\n-                attr = getattr(mod, app_obj, None)\n-                if inspect.isfunction(attr):\n-                    app = call_factory(attr, script_info)\n-                else:\n-                    app = attr\n-        except TypeError as e:\n-            new_error = NoAppException(\n-                '{e}\\nThe app factory \"{factory}\" in module \"{module}\" could'\n-                ' not be called with the specified arguments (and a'\n-                ' script_info argument automatically added if applicable).'\n-                ' Did you make sure to use the right number of arguments as'\n-                ' well as not using keyword arguments or'\n-                ' non-literals?'.format(e=e, factory=app_obj, module=module))\n-            reraise(NoAppException, new_error, sys.exc_info()[2])\n-        if app is None:\n-            raise RuntimeError('Failed to find application in module '\n-                               '\"{name}\"'.format(name=module))\n-\n-    return app\n+        return find_app_by_string(app_obj, script_info, mod)\n \n \n def find_default_import_path():\n\n@@ -160,6 +160,9 @@ def test_locate_app(test_apps):\n     assert locate_app(\n         script_info, \"cliapp.factory:create_app2('foo', 'bar')\"\n     ).name == \"create_app2_foo_bar\"\n+    assert locate_app(\n+        script_info, \"cliapp.factory:create_app2('foo', 'bar', )\"\n+    ).name == \"create_app2_foo_bar\"\n     assert locate_app(\n         script_info, \"cliapp.factory:create_app3('baz', 'qux')\"\n     ).name == \"create_app3_baz_qux\"\n@@ -173,6 +176,9 @@ def test_locate_app(test_apps):\n     pytest.raises(\n         NoAppException, locate_app,\n         script_info, \"cliapp.factory:create_app2('foo')\")\n+    pytest.raises(\n+        NoAppException, locate_app,\n+        script_info, \"cliapp.factory:create_app ()\")\n     pytest.raises(\n         NoAppException, locate_app, script_info, \"cliapp.importerrorapp\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#386ac92bdd4192450fdff833c7a0d7dbee73ef1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 543 | Contributors (this commit): 14 | Commits (past 90d): 3 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -272,16 +272,9 @@ intersphinx_mapping = {\n     'blinker': ('https://pythonhosted.org/blinker/', None)\n }\n \n-try:\n-    __import__('flask_sphinx_themes')\n-    html_theme = 'flask'\n html_theme_options = {\n     'touch_icon': 'touch-icon.png'\n }\n-except ImportError:\n-    print('Flask theme unavailable; using the default theme.')\n-    print('Install using `pip install Flask-Sphinx-Themes`.')\n-\n \n # unwrap decorators\n def unwrap_decorators():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e26cc8f9043946e7c9259699af9486dfe2148a53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 30 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,15 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr\n-    ~~~~~~\n-\n-    A microblog example application written as Flask tutorial with\n-    Flask and sqlite3.\n-\n-    :copyright: (c) 2015 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from flaskr.factory import create_app\n-\n-app = create_app()\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7c0b36f1467d2d8ea5fdc572d5edfce476a6eb89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1829 | Contributors (this commit): 23 | Commits (past 90d): 14 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -101,7 +101,7 @@ def find_app_by_string(string, script_info, module):\n     \"\"\"Checks if the given string is a variable name or a function. If it is\n     a function, it checks for specified arguments and whether it takes\n     a ``script_info`` argument and calls the function with the appropriate\n-    arguments. If it is a \"\"\"\n+    arguments.\"\"\"\n     from . import Flask\n     function_regex = r'^(?P<name>\\w+)(?:\\((?P<args>.*)\\))?$'\n     match = re.match(function_regex, string)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#11f463f1bdd218437694a0ea947c1647c14ad906", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 66 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ from flaskr.blueprints.flaskr import init_db\n \n \n def create_app(config=None):\n-    app = Flask(__name__)\n+    app = Flask(__name__.split('.')[0])\n \n     app.config.update(dict(\n         DATABASE=os.path.join(app.root_path, 'flaskr.db'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6a8c8c34844334d62bf56258cb0390f5999074c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 74 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ from flaskr.blueprints.flaskr import init_db\n \n \n def create_app(config=None):\n-    app = Flask(__name__.split('.')[0])\n+    app = Flask('flaskr')\n \n     app.config.update(dict(\n         DATABASE=os.path.join(app.root_path, 'flaskr.db'),\n\n@@ -25,7 +25,7 @@ DEBUG = True\n SECRET_KEY = 'development key'\n \n # create our little application :)\n-app = Flask(__name__)\n+app = Flask('minitwit')\n app.config.from_object(__name__)\n app.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n \n\n@@ -1,4 +1,4 @@\n from flask import Flask\n-app = Flask(__name__)\n+app = Flask('yourapplication')\n \n import yourapplication.views\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4f689c41d9d5aa1161b185de9bd7fb6d85b6cc25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 1836 | Contributors (this commit): 24 | Commits (past 90d): 15 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -87,12 +87,15 @@ def call_factory(app_factory, script_info, arguments=()):\n     of arguments. Checks for the existence of a script_info argument and calls\n     the app_factory depending on that and the arguments provided.\n     \"\"\"\n-    arg_names = getargspec(app_factory).args\n+    args_spec = getargspec(app_factory)\n+    arg_names = args_spec.args\n+    arg_defaults = args_spec.defaults\n+\n     if 'script_info' in arg_names:\n         return app_factory(*arguments, script_info=script_info)\n     elif arguments:\n         return app_factory(*arguments)\n-    elif not arguments and len(arg_names) == 1:\n+    elif not arguments and len(arg_names) == 1 and arg_defaults is None:\n         return app_factory(script_info)\n     return app_factory()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3c7625e8c0243fc7777031253e081b7140f57604", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 382 | Contributors (this commit): 21 | Commits (past 90d): 5 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -48,14 +48,12 @@ import re\n import ast\n from setuptools import setup\n \n-\n _version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n \n with open('flask/__init__.py', 'rb') as f:\n     version = str(ast.literal_eval(_version_re.search(\n         f.read().decode('utf-8')).group(1)))\n \n-\n setup(\n     name='Flask',\n     version=version,\n@@ -76,6 +74,17 @@ setup(\n         'itsdangerous>=0.21',\n         'click>=4.0',\n     ],\n+    extras_require={\n+        'dev': [\n+            'blinker',\n+            'greenlet',\n+            'pytest>=3',\n+            'coverage',\n+            'tox',\n+            'sphinx',\n+            'sphinxcontrib-log-cabinet'\n+        ],\n+    },\n     classifiers=[\n         'Development Status :: 4 - Beta',\n         'Environment :: Web Environment',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#399ac3c54fff4cb9d5c4673ce98e409a562b5745", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 383 | Contributors (this commit): 21 | Commits (past 90d): 6 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -99,6 +99,7 @@ setup(\n         'Programming Language :: Python :: 3.3',\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n+        'Programming Language :: Python :: 3.6',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4a53840df00c3338e42afbf78811382a0d232484", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/5 | Churn Δ: 12 | Churn Cumulative: 6031 | Contributors (this commit): 98 | Commits (past 90d): 25 | Contributors (cumulative): 117 | DMM Complexity: None\n\nDIFF:\n@@ -307,7 +307,7 @@ class Flask(_PackageBoundObject):\n         'LOGGER_NAME':                          None,\n         'LOGGER_HANDLER_POLICY':               'always',\n         'SERVER_NAME':                          None,\n-        'APPLICATION_ROOT':                     None,\n+        'APPLICATION_ROOT':                     '/',\n         'SESSION_COOKIE_NAME':                  'session',\n         'SESSION_COOKIE_DOMAIN':                None,\n         'SESSION_COOKIE_PATH':                  None,\n@@ -1845,7 +1845,7 @@ class Flask(_PackageBoundObject):\n         if self.config['SERVER_NAME'] is not None:\n             return self.url_map.bind(\n                 self.config['SERVER_NAME'],\n-                script_name=self.config['APPLICATION_ROOT'] or '/',\n+                script_name=self.config['APPLICATION_ROOT'],\n                 url_scheme=self.config['PREFERRED_URL_SCHEME'])\n \n     def inject_url_defaults(self, endpoint, values):\n\n@@ -288,8 +288,8 @@ class SessionInterface(object):\n         config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n         uses ``/`` if it's ``None``.\n         \"\"\"\n-        return app.config['SESSION_COOKIE_PATH'] or \\\n-               app.config['APPLICATION_ROOT'] or '/'\n+        return app.config['SESSION_COOKIE_PATH'] \\\n+               or app.config['APPLICATION_ROOT']\n \n     def get_cookie_httponly(self, app):\n         \"\"\"Returns True if the session cookie should be httponly.  This\n\n@@ -34,13 +34,13 @@ def make_test_environ_builder(\n \n     if base_url is None:\n         http_host = app.config.get('SERVER_NAME') or 'localhost'\n-        app_root = app.config.get('APPLICATION_ROOT') or '/'\n+        app_root = app.config['APPLICATION_ROOT']\n \n         if subdomain:\n             http_host = '{0}.{1}'.format(subdomain, http_host)\n \n         if url_scheme is None:\n-            url_scheme = app.config.get('PREFERRED_URL_SCHEME') or 'http'\n+            url_scheme = app.config['PREFERRED_URL_SCHEME']\n \n         url = url_parse(path)\n         base_url = '{0}://{1}/{2}'.format(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b8eba0a3fa940f85d43aa2a26bd31a75a446eb28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 27 | Files Changed: 3 | Hunks: 9 | Methods Changed: 5 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 40 | Churn Cumulative: 5548 | Contributors (this commit): 77 | Commits (past 90d): 33 | Contributors (cumulative): 92 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1004,17 +1004,3 @@ def is_ip(value):\n             return True\n \n     return False\n-\n-\n-def patch_vary_header(response, value):\n-    \"\"\"Add a value to the ``Vary`` header if it is not already present.\"\"\"\n-\n-    header = response.headers.get('Vary', '')\n-    headers = [h for h in (h.strip() for h in header.split(',')) if h]\n-    lower_value = value.lower()\n-\n-    if not any(h.lower() == lower_value for h in headers):\n-        headers.append(value)\n-\n-    updated_header = ', '.join(headers)\n-    response.headers['Vary'] = updated_header\n\n@@ -19,7 +19,6 @@ from itsdangerous import BadSignature, URLSafeTimedSerializer\n from werkzeug.datastructures import CallbackDict\n from werkzeug.http import http_date, parse_date\n \n-from flask.helpers import patch_vary_header\n from . import Markup, json\n from ._compat import iteritems, text_type\n from .helpers import is_ip, total_seconds\n@@ -407,7 +406,7 @@ class SecureCookieSessionInterface(SessionInterface):\n \n         # Add a \"Vary: Cookie\" header if the session was accessed at all.\n         if session.accessed:\n-            patch_vary_header(response, 'Cookie')\n+            response.vary.add('Cookie')\n \n         if not self.should_set_cookie(app, session):\n             return\n\n@@ -9,20 +9,21 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import pytest\n-\n-import re\n-import uuid\n-import time\n-import flask\n import pickle\n+import re\n+import time\n+import uuid\n from datetime import datetime\n from threading import Thread\n-from flask._compat import text_type\n-from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n+\n+import pytest\n+import werkzeug.serving\n+from werkzeug.exceptions import BadRequest, Forbidden, NotFound\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n-import werkzeug.serving\n+\n+import flask\n+from flask._compat import text_type\n \n \n def test_options_work(app, client):\n@@ -523,14 +524,14 @@ def test_session_vary_cookie(app, client):\n     @app.route('/vary-cookie-header-set')\n     def vary_cookie_header_set():\n         response = flask.Response()\n-        response.headers['Vary'] = 'Cookie'\n+        response.vary.add('Cookie')\n         flask.session['test'] = 'test'\n         return response\n \n     @app.route('/vary-header-set')\n     def vary_header_set():\n         response = flask.Response()\n-        response.headers['Vary'] = 'Accept-Encoding, Accept-Language'\n+        response.vary.update(('Accept-Encoding', 'Accept-Language'))\n         flask.session['test'] = 'test'\n         return response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b9c8c9bad124790ff0a8a9615d3d40a3b6fe2d83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 43 | Churn Cumulative: 5712 | Contributors (this commit): 91 | Commits (past 90d): 22 | Contributors (cumulative): 113 | DMM Complexity: 0.9285714285714286\n\nDIFF:\n@@ -10,6 +10,7 @@\n \"\"\"\n import os\n import sys\n+import warnings\n from datetime import timedelta\n from functools import update_wrapper\n from itertools import chain\n@@ -925,8 +926,17 @@ class Flask(_PackageBoundObject):\n         :attr:`secret_key` is set.  Instead of overriding this method\n         we recommend replacing the :class:`session_interface`.\n \n+        .. deprecated: 1.0\n+            Will be removed in 1.1. Use ``session_interface.open_session``\n+            instead.\n+\n         :param request: an instance of :attr:`request_class`.\n         \"\"\"\n+\n+        warnings.warn(DeprecationWarning(\n+            '\"open_session\" is deprecated and will be removed in 1.1. Use'\n+            ' \"session_interface.open_session\" instead.'\n+        ))\n         return self.session_interface.open_session(self, request)\n \n     def save_session(self, session, response):\n@@ -934,19 +944,37 @@ class Flask(_PackageBoundObject):\n         implementation, check :meth:`open_session`.  Instead of overriding this\n         method we recommend replacing the :class:`session_interface`.\n \n+        .. deprecated: 1.0\n+            Will be removed in 1.1. Use ``session_interface.save_session``\n+            instead.\n+\n         :param session: the session to be saved (a\n                         :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                         object)\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n+\n+        warnings.warn(DeprecationWarning(\n+            '\"save_session\" is deprecated and will be removed in 1.1. Use'\n+            ' \"session_interface.save_session\" instead.'\n+        ))\n         return self.session_interface.save_session(self, session, response)\n \n     def make_null_session(self):\n         \"\"\"Creates a new instance of a missing session.  Instead of overriding\n         this method we recommend replacing the :class:`session_interface`.\n \n+        .. deprecated: 1.0\n+            Will be removed in 1.1. Use ``session_interface.make_null_session``\n+            instead.\n+\n         .. versionadded:: 0.7\n         \"\"\"\n+\n+        warnings.warn(DeprecationWarning(\n+            '\"make_null_session\" is deprecated and will be removed in 1.1. Use'\n+            ' \"session_interface.make_null_session\" instead.'\n+        ))\n         return self.session_interface.make_null_session(self)\n \n     @setupmethod\n@@ -1932,7 +1960,7 @@ class Flask(_PackageBoundObject):\n         for handler in funcs:\n             response = handler(response)\n         if not self.session_interface.is_null_session(ctx.session):\n-            self.save_session(ctx.session, response)\n+            self.session_interface.save_session(self, ctx.session, response)\n         return response\n \n     def do_teardown_request(self, exc=_sentinel):\n\n@@ -329,9 +329,11 @@ class RequestContext(object):\n         # available. This allows a custom open_session method to use the\n         # request context (e.g. code that access database information\n         # stored on `g` instead of the appcontext).\n-        self.session = self.app.open_session(self.request)\n+        session_interface = self.app.session_interface\n+        self.session = session_interface.open_session(self.app, self.request)\n+\n         if self.session is None:\n-            self.session = self.app.make_null_session()\n+            self.session = session_interface.make_null_session(self.app)\n \n     def pop(self, exc=_sentinel):\n         \"\"\"Pops the request context and unbinds it by doing that.  This will\n\n@@ -105,7 +105,8 @@ class FlaskClient(Client):\n         self.cookie_jar.inject_wsgi(environ_overrides)\n         outer_reqctx = _request_ctx_stack.top\n         with app.test_request_context(*args, **kwargs) as c:\n-            sess = app.open_session(c.request)\n+            session_interface = app.session_interface\n+            sess = session_interface.open_session(app, c.request)\n             if sess is None:\n                 raise RuntimeError('Session backend did not open a session. '\n                                    'Check the configuration')\n@@ -124,8 +125,8 @@ class FlaskClient(Client):\n                 _request_ctx_stack.pop()\n \n             resp = app.response_class()\n-            if not app.session_interface.is_null_session(sess):\n-                app.save_session(sess, resp)\n+            if not session_interface.is_null_session(sess):\n+                session_interface.save_session(app, sess, resp)\n             headers = resp.get_wsgi_headers(c.request.environ)\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#045dccaefbb2582c260e324aebaec425d355b725", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 33 | Churn Cumulative: 6284 | Contributors (this commit): 102 | Commits (past 90d): 37 | Contributors (cumulative): 107 | DMM Complexity: 0.0\n\nDIFF:\n@@ -18,7 +18,8 @@ from threading import Lock\n \n from werkzeug.datastructures import ImmutableDict, Headers\n from werkzeug.exceptions import BadRequest, HTTPException, \\\n-    InternalServerError, MethodNotAllowed, default_exceptions\n+    InternalServerError, MethodNotAllowed, default_exceptions, \\\n+    BadRequestKeyError\n from werkzeug.routing import BuildError, Map, RequestRedirect, Rule\n \n from . import cli, json\n@@ -317,7 +318,7 @@ class Flask(_PackageBoundObject):\n         'SESSION_REFRESH_EACH_REQUEST':         True,\n         'MAX_CONTENT_LENGTH':                   None,\n         'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),\n-        'TRAP_BAD_REQUEST_ERRORS':              False,\n+        'TRAP_BAD_REQUEST_ERRORS':              None,\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n         'EXPLAIN_TEMPLATE_LOADING':             False,\n         'PREFERRED_URL_SCHEME':                 'http',\n@@ -1543,12 +1544,20 @@ class Flask(_PackageBoundObject):\n         traceback.  This is helpful for debugging implicitly raised HTTP\n         exceptions.\n         \n+        .. versionchanged:: 1.0\n+            Bad request errors are not trapped by default in debug mode.\n+\n         .. versionadded:: 0.8\n         \"\"\"\n         if self.config['TRAP_HTTP_EXCEPTIONS']:\n             return True\n-        if self.config['TRAP_BAD_REQUEST_ERRORS']:\n+\n+        trap_bad_request = self.config['TRAP_BAD_REQUEST_ERRORS']\n+\n+        # if unset, trap based on debug mode\n+        if (trap_bad_request is None and self.debug) or trap_bad_request:\n             return isinstance(e, BadRequest)\n+\n         return False\n \n     def handle_user_exception(self, e):\n@@ -1559,16 +1568,30 @@ class Flask(_PackageBoundObject):\n         function will either return a response value or reraise the\n         exception with the same traceback.\n \n+        .. versionchanged:: 1.0\n+            Key errors raised from request data like ``form`` show the the bad\n+            key in debug mode rather than a generic bad request message.\n+\n         .. versionadded:: 0.7\n         \"\"\"\n         exc_type, exc_value, tb = sys.exc_info()\n         assert exc_value is e\n-\n         # ensure not to trash sys.exc_info() at that point in case someone\n         # wants the traceback preserved in handle_http_exception.  Of course\n         # we cannot prevent users from trashing it themselves in a custom\n         # trap_http_exception method so that's their fault then.\n \n+        # MultiDict passes the key to the exception, but that's ignored\n+        # when generating the response message. Set an informative\n+        # description for key errors in debug mode.\n+        if (\n+            self.debug\n+            and isinstance(e, BadRequestKeyError)\n+            # only set it if it's still the default description\n+            and e.description is BadRequestKeyError.description\n+        ):\n+            e.description = \"KeyError: '{0}'\".format(*e.args)\n+\n         if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n             return self.handle_http_exception(e)\n \n\n@@ -44,6 +44,7 @@ class TestJSON(object):\n \n     def test_post_empty_json_adds_exception_to_response_content_in_debug(self, app, client):\n         app.config['DEBUG'] = True\n+        app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n \n         @app.route('/json', methods=['POST'])\n         def post_json():\n@@ -56,6 +57,7 @@ class TestJSON(object):\n \n     def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self, app, client):\n         app.config['DEBUG'] = False\n+        app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n \n         @app.route('/json', methods=['POST'])\n         def post_json():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#42905b8a55adf66a77b2b11797092a64b51d526e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 7087 | Contributors (this commit): 95 | Commits (past 90d): 37 | Contributors (cumulative): 107 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1583,9 +1583,9 @@ class Flask(_PackageBoundObject):\n \n         # MultiDict passes the key to the exception, but that's ignored\n         # when generating the response message. Set an informative\n-        # description for key errors in debug mode.\n+        # description for key errors in debug mode or when trapping errors.\n         if (\n-            self.debug\n+            self.debug or self.config['TRAP_BAD_REQUEST_ERRORS']\n             and isinstance(e, BadRequestKeyError)\n             # only set it if it's still the default description\n             and e.description is BadRequestKeyError.description\n\n@@ -975,12 +975,17 @@ def test_trapping_of_bad_request_key_errors(app, client):\n     def fail():\n         flask.request.form['missing_key']\n \n-    assert client.get('/fail').status_code == 400\n+    rv = client.get('/fail')\n+    assert rv.status_code == 400\n+    assert b'missing_key' not in rv.data\n \n     app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n+\n     with pytest.raises(KeyError) as e:\n         client.get(\"/fail\")\n+\n     assert e.errisinstance(BadRequest)\n+    assert 'missing_key' in e.value.description\n \n \n def test_trapping_of_all_http_exceptions(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
