{"custom_id": "keras#445aecdeb77876909fc1e6c3b34e0361c5db9e72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 4 | Churn Cumulative: 9745 | Contributors (this commit): 74 | Commits (past 90d): 82 | Contributors (cumulative): 107 | DMM Complexity: None\n\nDIFF:\n@@ -1216,6 +1216,8 @@ def log(x):\n def round(x):\n     \"\"\"Element-wise rounding to the closest integer.\n     \n+    In case of tie, the rounding mode used is \"half to even\".\n+\n     # Arguments\n         x: input tensor.\n \n\n@@ -389,7 +389,7 @@ def log(x):\n \n \n def round(x):\n-    return T.round(x)\n+    return T.round(x, mode='half_to_even')\n \n \n def sign(x):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#262e5751f474f51197ea13e3457bf348c7d6ff13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 260 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -15,4 +15,4 @@ from . import objectives\n from . import optimizers\r\n from . import regularizers\r\n \r\n-__version__ = '1.2.0'\r\n+__version__ = '1.2.1'\r\n\n@@ -3,12 +3,12 @@ from setuptools import find_packages\n \n \n setup(name='Keras',\n-      version='1.2.0',\n+      version='1.2.1',\n       description='Deep Learning for Python',\n       author='Francois Chollet',\n       author_email='francois.chollet@gmail.com',\n       url='https://github.com/fchollet/keras',\n-      download_url='https://github.com/fchollet/keras/tarball/1.2.0',\n+      download_url='https://github.com/fchollet/keras/tarball/1.2.1',\n       license='MIT',\n       install_requires=['theano', 'pyyaml', 'six'],\n       extras_require={\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#15338cc3dacea0436fafab8087e789d401e543a6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 632 | Contributors (this commit): 6 | Commits (past 90d): 9 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -68,10 +68,7 @@ class TimeDistributed(Wrapper):\n \n     The output will then have shape `(32, 10, 8)`.\n \n-    Note this is strictly equivalent to\n-    using `layers.core.TimeDistributedDense`.\n-    However what is different about `TimeDistributed`\n-    is that it can be used with arbitrary layers, not just `Dense`,\n+    `TimeDistributed` can be used with arbitrary layers, not just `Dense`,\n     for instance with a `Convolution2D` layer:\n \n     ```python\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d87148c56b0bb86669a11697b7d94c24a8d4ff86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 5976 | Contributors (this commit): 56 | Commits (past 90d): 46 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2494,6 +2494,7 @@ def _preprocess_deconv_output_shape(x, shape, dim_ordering):\n \n     if shape[0] is None:\n         shape = (tf.shape(x)[0], ) + tuple(shape[1:])\n+        shape = tf.stack(list(shape))\n     return shape\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c57d1a32194983f28cb944722e6f7bc6de82cb10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 190 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -62,7 +62,7 @@ def preprocess_input(audio_path, dim_ordering='default'):\n \n     logam = librosa.logamplitude\n     melgram = librosa.feature.melspectrogram\n-    x = logam(melgram(y=src, sr=sr, hop_lengthgth=hop_length,\n+    x = logam(melgram(y=src, sr=sr, hop_length=hop_length,\n                       n_fft=n_fft, n_mels=n_mels) ** 2,\n               ref_power=1.0)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d7e0621ed336dd8dd31335b8faa55535722dbd63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 134 | Lines Deleted: 7 | Files Changed: 6 | Hunks: 14 | Methods Changed: 12 | Complexity Δ (Sum/Max): 13/10 | Churn Δ: 141 | Churn Cumulative: 15196 | Contributors (this commit): 85 | Commits (past 90d): 57 | Contributors (cumulative): 119 | DMM Complexity: 1.0\n\nDIFF:\n@@ -89,6 +89,7 @@ from keras.utils import data_utils\n from keras.utils import io_utils\n from keras.utils import layer_utils\n from keras.utils import np_utils\n+from keras.utils import generic_utils\n \n \n EXCLUDE = {\n@@ -265,6 +266,11 @@ PAGES = [\n         'page': 'utils/np_utils.md',\n         'all_module_functions': [np_utils]\n     },\n+    {\n+        'page': 'utils/generic_utils.md',\n+        'all_module_functions': [generic_utils],\n+        'classes': [generic_utils.CustomObjectScope]\n+    },\n ]\n \n ROOT = 'http://keras.io/'\n\n@@ -19,6 +19,7 @@ from ..engine import Layer\n from ..engine import Merge\n from ..utils.generic_utils import func_dump\n from ..utils.generic_utils import func_load\n+from ..utils.generic_utils import get_from_module\n \n \n class Masking(Layer):\n@@ -676,7 +677,7 @@ class Lambda(Layer):\n \n         function_type = config.pop('function_type')\n         if function_type == 'function':\n-            function = globs[config['function']]\n+            function = get_from_module(config['function'], globs, 'core')\n         elif function_type == 'lambda':\n             function = func_load(config['function'], globs=globs)\n         else:\n@@ -684,7 +685,7 @@ class Lambda(Layer):\n \n         output_shape_type = config.pop('output_shape_type')\n         if output_shape_type == 'function':\n-            output_shape = globs[config['output_shape']]\n+            output_shape = get_from_module(config['output_shape'], globs, 'core')\n         elif output_shape_type == 'lambda':\n             output_shape = func_load(config['output_shape'], globs=globs)\n         else:\n\n@@ -3,7 +3,7 @@ from __future__ import absolute_import\n from six.moves import zip\n \n from . import backend as K\n-from .utils.generic_utils import get_from_module\n+from .utils.generic_utils import get_from_module, get_custom_objects\n \n if K.backend() == 'tensorflow':\n     import tensorflow as tf\n@@ -42,6 +42,8 @@ def optimizer_from_config(config, custom_objects=None):\n     class_name = config['class_name']\n     if custom_objects and class_name in custom_objects:\n         cls = custom_objects[class_name]\n+    elif class_name in get_custom_objects():\n+        cls = get_custom_objects()[class_name]\n     else:\n         if class_name.lower() not in all_classes:\n             raise ValueError('Optimizer class not found:', class_name)\n\n@@ -9,10 +9,91 @@ import six\n import marshal\n import types as python_types\n \n+_GLOBAL_CUSTOM_OBJECTS = {}\n+\n+\n+class CustomObjectScope(object):\n+    \"\"\"Provides a scope that changes to `_GLOBAL_CUSTOM_OBJECTS` cannot escape.\n+\n+    Code within a `with` statement will be able to access custom objects\n+    by name. Changes to global custom objects persist within the enclosing `with` statement. At end of the `with`\n+    statement, global custom objects are reverted to state at beginning of the `with` statement.\n+\n+    # Example\n+\n+    Consider a custom object `MyObject`\n+\n+    ```python\n+        with CustomObjectScope({\"MyObject\":MyObject}):\n+            layer = Dense(..., W_regularizer=\"MyObject\")\n+            # save, load, etc. will recognize custom object by name\n+    ```\n+    \"\"\"\n+    def __init__(self, *args):\n+        self.custom_objects = args\n+        self.backup = None\n+\n+    def __enter__(self):\n+        self.backup = _GLOBAL_CUSTOM_OBJECTS.copy()\n+        for objects in self.custom_objects:\n+            _GLOBAL_CUSTOM_OBJECTS.update(objects)\n+        return self\n+\n+    def __exit__(self, type, value, traceback):\n+        _GLOBAL_CUSTOM_OBJECTS.clear()\n+        _GLOBAL_CUSTOM_OBJECTS.update(self.backup)\n+\n+\n+def custom_object_scope(*args):\n+    \"\"\"Provides a scope that changes to `_GLOBAL_CUSTOM_OBJECTS` cannot escape.\n+\n+    Convenience wrapper for `CustomObjectScope`. Code within a `with` statement will be able to access custom objects\n+    by name. Changes to global custom objects persist within the enclosing `with` statement. At end of the `with`\n+    statement, global custom objects are reverted to state at beginning of the `with` statement.\n+\n+    # Example\n+\n+    Consider a custom object `MyObject`\n+\n+    ```python\n+        with custom_object_scope({\"MyObject\":MyObject}):\n+            layer = Dense(..., W_regularizer=\"MyObject\")\n+            # save, load, etc. will recognize custom object by name\n+    ```\n+\n+    # Arguments\n+        *args: Variable length list of dictionaries of name, class pairs to add to custom objects.\n+\n+    # Returns\n+        Object of type `CustomObjectScope`.\n+    \"\"\"\n+    return CustomObjectScope(*args)\n+\n+\n+def get_custom_objects():\n+    \"\"\"Retrieves a live reference to the global dictionary of custom objects (`_GLOBAL_CUSTOM_OBJECTS`).\n+\n+    Updating and clearing custom objects using `custom_object_scope` is preferred, but `get_custom_objects` can\n+    be used to directly access `_GLOBAL_CUSTOM_OBJECTS`.\n+\n+    # Example\n+\n+    ```python\n+        get_custom_objects().clear()\n+        get_custom_objects()[\"MyObject\"] = MyObject\n+    ```\n+\n+    # Returns\n+        Global dictionary of names to classes (`_GLOBAL_CUSTOM_OBJECTS`).\n+    \"\"\"\n+    return _GLOBAL_CUSTOM_OBJECTS\n+\n \n def get_from_module(identifier, module_params, module_name,\n                     instantiate=False, kwargs=None):\n-    \"\"\"Retrieves a class of function member of a module.\n+    \"\"\"Retrieves a class or function member of a module.\n+\n+    First checks `_GLOBAL_CUSTOM_OBJECTS` for `module_name`, then checks `module_params`.\n \n     # Arguments\n         identifier: the object to retrieve. It could be specified\n@@ -34,6 +115,10 @@ def get_from_module(identifier, module_params, module_name,\n         ValueError: if the identifier cannot be found.\n     \"\"\"\n     if isinstance(identifier, six.string_types):\n+        res = None\n+        if identifier in _GLOBAL_CUSTOM_OBJECTS:\n+            res = _GLOBAL_CUSTOM_OBJECTS[identifier]\n+        if not res:\n             res = module_params.get(identifier)\n         if not res:\n             raise ValueError('Invalid ' + str(module_name) + ': ' +\n@@ -46,6 +131,10 @@ def get_from_module(identifier, module_params, module_name,\n             return res\n     elif isinstance(identifier, dict):\n         name = identifier.pop('name')\n+        res = None\n+        if name in _GLOBAL_CUSTOM_OBJECTS:\n+            res = _GLOBAL_CUSTOM_OBJECTS[name]\n+        if not res:\n             res = module_params.get(name)\n         if res:\n             return res(**identifier)\n\n@@ -1,7 +1,7 @@\n from __future__ import print_function\n import inspect\n \n-from .generic_utils import get_from_module\n+from .generic_utils import get_from_module, get_custom_objects\n from .np_utils import convert_kernel\n from ..layers import *\n from ..models import Model, Sequential\n@@ -22,8 +22,7 @@ def layer_from_config(config, custom_objects=None):\n     # Insert custom layers into globals so they can\n     # be accessed by `get_from_module`.\n     if custom_objects:\n-        for cls_key in custom_objects:\n-            globals()[cls_key] = custom_objects[cls_key]\n+        get_custom_objects().update(custom_objects)\n \n     class_name = config['class_name']\n \n\n@@ -0,0 +1,30 @@\n+import pytest\n+import keras\n+from keras import backend as K\n+from keras.utils.generic_utils import custom_object_scope, get_custom_objects, get_from_module\n+\n+\n+def test_custom_object_scope_adds_objects():\n+    get_custom_objects().clear()\n+    assert (len(get_custom_objects()) == 0)\n+    with custom_object_scope({\"Test1\": object, \"Test2\": object}, {\"Test3\": object}):\n+        assert (len(get_custom_objects()) == 3)\n+    assert (len(get_custom_objects()) == 0)\n+\n+\n+class CustomObject(object):\n+    def __init__(self):\n+        pass\n+\n+\n+def test_get_from_module_uses_custom_object():\n+    get_custom_objects().clear()\n+    assert (get_from_module(\"CustomObject\", globals(), \"test_generic_utils\") == CustomObject)\n+    with pytest.raises(ValueError):\n+        get_from_module(\"TestObject\", globals(), \"test_generic_utils\")\n+    with custom_object_scope({\"TestObject\": CustomObject}):\n+        assert (get_from_module(\"TestObject\", globals(), \"test_generic_utils\") == CustomObject)\n+\n+\n+if __name__ == '__main__':\n+    pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5d38b04415fd27d9b0608ea297ac1dcaa49aa81f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1720 | Contributors (this commit): 19 | Commits (past 90d): 13 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -213,6 +213,9 @@ class RMSprop(Optimizer):\n         rho: float >= 0.\n         epsilon: float >= 0. Fuzz factor.\n         decay: float >= 0. Learning rate decay over each update.\n+\n+    # References\n+        - [rmsprop: Divide the gradient by a running average of its recent magnitude](http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)\n     \"\"\"\n \n     def __init__(self, lr=0.001, rho=0.9, epsilon=1e-8, decay=0.,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#72f1ce4ed4396a308f831c717d8c2856a7a4e86b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1167 | Contributors (this commit): 11 | Commits (past 90d): 7 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -84,7 +84,7 @@ class BaseWrapper(object):\n             if params_name not in legal_params:\n                 raise ValueError('{} is not a legal parameter'.format(params_name))\n \n-    def get_params(self, _):\n+    def get_params(self, **params):\n         \"\"\"Gets parameters for this estimator.\n \n         # Returns\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d6759076542aeb3f9c81bd21a2d2000f5976f07a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 6 | Churn Cumulative: 3776 | Contributors (this commit): 52 | Commits (past 90d): 38 | Contributors (cumulative): 52 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1075,6 +1075,8 @@ def rnn(step_function, inputs, initial_states,\n             initial_output = step_function(inputs[0], initial_states + constants)[0] * 0\n             # Theano gets confused by broadcasting patterns in the scan op\n             initial_output = T.unbroadcast(initial_output, 0, 1)\n+            if len(initial_states) > 0:\n+                initial_states[0] = T.unbroadcast(initial_states[0], 0, 1)\n \n             def _step(input, mask, output_tm1, *states):\n                 output, new_states = step_function(input, states)\n@@ -1122,6 +1124,10 @@ def rnn(step_function, inputs, initial_states,\n                 output, new_states = step_function(input, states)\n                 return [output] + new_states\n \n+            # Theano likes to make shape==1 dimensions in the initial states (outputs_info) broadcastable\n+            if len(initial_states) > 0:\n+                initial_states[0] = T.unbroadcast(initial_states[0], 1)\n+\n             results, _ = theano.scan(\n                 _step,\n                 sequences=inputs,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c751f81d0d9c3fedb74f025bee3a195ad4041391", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 16 | Churn Cumulative: 8165 | Contributors (this commit): 60 | Commits (past 90d): 53 | Contributors (cumulative): 85 | DMM Complexity: 0.8461538461538461\n\nDIFF:\n@@ -866,6 +866,8 @@ def batch_dot(x, y, axes=None):\n         (32, 1, 30)\n     ```\n     \"\"\"\n+    if ndim(x) < 3 or ndim(y) < 3:\n+        raise ValueError('Invalid dimensions for batch_dot: ', ndim(x), ndim(y))\n     if isinstance(axes, int):\n         axes = (axes, axes)\n     if axes is not None:\n\n@@ -81,6 +81,12 @@ class TestBackend(object):\n         check_single_tensor_operation('reverse', (4, 3, 2), axes=1)\n         check_single_tensor_operation('reverse', (4, 3, 2), axes=(1, 2))\n \n+    def test_batch_dot_shape(self):\n+        with pytest.raises(ValueError):\n+            x_batch = KTF.ones(shape=(32, 20))\n+            y_batch = KTF.ones(shape=(32, 20))\n+            xy_batch_dot = KTF.batch_dot(x_batch, y_batch, axes=1)\n+\n     def test_shape_operations(self):\n         # concatenate\n         xval = np.random.random((4, 3))\n\n@@ -7,7 +7,7 @@ np.random.seed(1337)\n \n from keras import backend as K\n from keras.models import Sequential\n-from keras.layers.core import Dense, Activation, Merge, Lambda\n+from keras.layers.core import Dense, Activation, Merge, Lambda, Reshape\n from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data, keras_test\n from keras.models import model_from_json, model_from_yaml\n@@ -287,14 +287,17 @@ def test_merge_dot():\n \n     left = Sequential()\n     left.add(Dense(input_dim=input_dim, output_dim=nb_hidden))\n+    left.add(Reshape((nb_hidden, 1)))\n     left.add(Activation('relu'))\n \n     right = Sequential()\n     right.add(Dense(input_dim=input_dim, output_dim=nb_hidden))\n+    right.add(Reshape((nb_hidden, 1)))\n     right.add(Activation('relu'))\n \n     model = Sequential()\n     model.add(Merge([left, right], mode='dot', dot_axes=1))\n+    model.add(Reshape((1,)))\n     model.add(Dense(nb_class))\n     model.add(Activation('softmax'))\n \n@@ -302,14 +305,17 @@ def test_merge_dot():\n \n     left = Sequential()\n     left.add(Dense(input_dim=input_dim, output_dim=nb_hidden))\n+    left.add(Reshape((nb_hidden, 1)))\n     left.add(Activation('relu'))\n \n     right = Sequential()\n     right.add(Dense(input_dim=input_dim, output_dim=nb_hidden))\n+    right.add(Reshape((nb_hidden, 1)))\n     right.add(Activation('relu'))\n \n     model = Sequential()\n     model.add(Merge([left, right], mode='dot', dot_axes=[1, 1]))\n+    model.add(Reshape((1,)))\n     model.add(Dense(nb_class))\n     model.add(Activation('softmax'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d739b3c2cd73ba39948be226a7ea63b5f30eba42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 14 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 48 | Churn Cumulative: 6026 | Contributors (this commit): 57 | Commits (past 90d): 46 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -77,6 +77,9 @@ def learning_phase():\n def set_learning_phase(value):\n     \"\"\"Sets the learning phase to a fixed value,\n     either 0 or 1 (integers).\n+\n+    # Raises\n+        ValueError: if `value` is neither `0` nor `1`.\n     \"\"\"\n     global _GRAPH_LEARNING_PHASES\n     if value not in {0, 1}:\n@@ -1460,6 +1463,9 @@ def resize_images(X, height_factor, width_factor, dim_ordering):\n \n     # Returns\n         A tensor.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'th':\n         original_shape = int_shape(X)\n@@ -1492,6 +1498,9 @@ def resize_volumes(X, depth_factor, height_factor, width_factor, dim_ordering):\n \n     # Returns\n         A tensor.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'th':\n         output = repeat_elements(X, depth_factor, axis=2)\n@@ -1645,6 +1654,9 @@ def spatial_2d_padding(x, padding=(1, 1), dim_ordering='default'):\n \n     # Returns\n         A padded 4D tensor.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -1670,6 +1682,9 @@ def asymmetric_spatial_2d_padding(x, top_pad=1, bottom_pad=1,\n \n     # Returns\n         A padded 4D tensor.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -1698,6 +1713,10 @@ def spatial_3d_padding(x, padding=(1, 1, 1), dim_ordering='default'):\n \n     # Returns\n         A padded 5D tensor.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -1979,6 +1998,12 @@ def rnn(step_function, inputs, initial_states,\n                 at time `t` for sample `s`.\n             new_states: list of tensors, latest states returned by\n                 the step function, of shape `(samples, ...)`.\n+\n+    # Raises\n+        ValueError: if input dimension is less than 3.\n+        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n+        ValueError: if `mask` is provided (not `None`) but states is not provided\n+            (`len(states)` == 0).\n     \"\"\"\n     ndim = len(inputs.get_shape())\n     if ndim < 3:\n@@ -2616,6 +2641,9 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid',\n \n     # Returns\n         A tensor, result of 2D convolution.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2653,6 +2681,9 @@ def deconv2d(x, kernel, output_shape, strides=(1, 1),\n \n     # Returns\n         A tensor, result of transposed 2D convolution.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2690,6 +2721,9 @@ def atrous_conv2d(x, kernel, rate=1,\n \n     # Returns\n         A tensor, result of atrous transposed 2D convolution.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2710,6 +2744,9 @@ def atrous_conv2d(x, kernel, rate=1,\n def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n                      border_mode='valid', dim_ordering='default'):\n     \"\"\"2-D convolution with separable filters.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2744,6 +2781,9 @@ def conv3d(x, kernel, strides=(1, 1, 1),\n \n     # Returns\n         A tensor, result of 3D convolution.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2773,6 +2813,10 @@ def pool2d(x, pool_size, strides=(1, 1),\n \n     # Returns\n         A tensor, result of 2D pooling.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `pool_mode` is neither `max` or `avg`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n@@ -2808,6 +2852,10 @@ def pool3d(x, pool_size, strides=(1, 1, 1), border_mode='valid',\n \n     # Returns\n         A tensor, result of 3D pooling.\n+\n+    # Raises\n+        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `pool_mode` is neither `max` or `avg`.\n     \"\"\"\n     if dim_ordering == 'default':\n         dim_ordering = image_dim_ordering()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#8a53df633897f4d2ff82790825144a77c38d5a77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 24 | Churn Cumulative: 6050 | Contributors (this commit): 57 | Commits (past 90d): 47 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -1471,7 +1471,7 @@ def resize_images(X, height_factor, width_factor, data_format):\n         A tensor.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'channels_first':\n         original_shape = int_shape(X)\n@@ -1506,7 +1506,7 @@ def resize_volumes(X, depth_factor, height_factor, width_factor, data_format):\n         A tensor.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'channels_first':\n         output = repeat_elements(X, depth_factor, axis=2)\n@@ -1662,7 +1662,7 @@ def spatial_2d_padding(x, padding=(1, 1), data_format='default'):\n         A padded 4D tensor.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -1690,7 +1690,7 @@ def asymmetric_spatial_2d_padding(x, top_pad=1, bottom_pad=1,\n         A padded 4D tensor.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -1721,7 +1721,7 @@ def spatial_3d_padding(x, padding=(1, 1, 1), data_format='default'):\n         A padded 5D tensor.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n \n     \"\"\"\n     if data_format == 'default':\n@@ -2649,7 +2649,7 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid',\n         A tensor, result of 2D convolution.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -2689,7 +2689,7 @@ def deconv2d(x, kernel, output_shape, strides=(1, 1),\n         A tensor, result of transposed 2D convolution.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -2729,7 +2729,7 @@ def atrous_conv2d(x, kernel, rate=1,\n         A tensor, result of atrous transposed 2D convolution.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -2752,7 +2752,7 @@ def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n     \"\"\"2-D convolution with separable filters.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -2789,7 +2789,7 @@ def conv3d(x, kernel, strides=(1, 1, 1),\n         A tensor, result of 3D convolution.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n     \"\"\"\n     if data_format == 'default':\n         data_format = image_data_format()\n@@ -2821,7 +2821,7 @@ def pool2d(x, pool_size, strides=(1, 1),\n         A tensor, result of 2D pooling.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n         ValueError: if `pool_mode` is neither `max` or `avg`.\n     \"\"\"\n     if data_format == 'default':\n@@ -2860,7 +2860,7 @@ def pool3d(x, pool_size, strides=(1, 1, 1), border_mode='valid',\n         A tensor, result of 3D pooling.\n \n     # Raises\n-        ValueError: if `dim_ordering` is neither `tf` or `th`.\n+        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n         ValueError: if `pool_mode` is neither `max` or `avg`.\n     \"\"\"\n     if data_format == 'default':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#9736056a60f08988d398f6592b28c97ffbe4e26f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 230 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -75,7 +75,7 @@ def create_base_network(input_dim):\n def compute_accuracy(predictions, labels):\n     '''Compute classification accuracy with a fixed threshold on distances.\n     '''\n-    return np.mean(labels == (predictions.ravel() > 0.5))\n+    return labels[predictions.ravel() < 0.5].mean()\n \n \n # the data, shuffled and split between train and test sets\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#dcb9fac5776285ce07475113b1734ec25b17fd93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 28 | Churn Cumulative: 472 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -37,8 +37,8 @@ base_image_path = args.base_image_path\n result_prefix = args.result_prefix\n \n # dimensions of the generated picture.\n-img_width = 600\n img_height = 600\n+img_width = 600\n \n # path to the model weights file.\n weights_path = 'vgg16_weights.h5'\n@@ -64,7 +64,7 @@ settings = saved_settings['dreamy']\n \n \n def preprocess_image(image_path):\n-    img = load_img(image_path, target_size=(img_width, img_height))\n+    img = load_img(image_path, target_size=(img_height, img_width))\n     img = img_to_array(img)\n     img = np.expand_dims(img, axis=0)\n     img = vgg16.preprocess_input(img)\n@@ -75,10 +75,10 @@ def preprocess_image(image_path):\n \n def deprocess_image(x):\n     if K.image_dim_ordering() == 'th':\n-        x = x.reshape((3, img_width, img_height))\n+        x = x.reshape((3, img_height, img_width))\n         x = x.transpose((1, 2, 0))\n     else:\n-        x = x.reshape((img_width, img_height, 3))\n+        x = x.reshape((img_height, img_width, 3))\n     # Remove zero-center by mean pixel\n     x[:, :, 0] += 103.939\n     x[:, :, 1] += 116.779\n@@ -89,9 +89,9 @@ def deprocess_image(x):\n     return x\n \n if K.image_dim_ordering() == 'th':\n-    img_size = (3, img_width, img_height)\n+    img_size = (3, img_height, img_width)\n else:\n-    img_size = (img_width, img_height, 3)\n+    img_size = (img_height, img_width, 3)\n # this will contain our generated image\n dream = Input(batch_shape=(1,) + img_size)\n \n@@ -110,15 +110,15 @@ layer_dict = dict([(layer.name, layer) for layer in model.layers])\n def continuity_loss(x):\n     assert K.ndim(x) == 4\n     if K.image_dim_ordering() == 'th':\n-        a = K.square(x[:, :, :img_width - 1, :img_height - 1] -\n-                     x[:, :, 1:, :img_height - 1])\n-        b = K.square(x[:, :, :img_width - 1, :img_height - 1] -\n-                     x[:, :, :img_width - 1, 1:])\n+        a = K.square(x[:, :, :img_height - 1, :img_width - 1] -\n+                     x[:, :, 1:, :img_width - 1])\n+        b = K.square(x[:, :, :img_height - 1, :img_width - 1] -\n+                     x[:, :, :img_height - 1, 1:])\n     else:\n-        a = K.square(x[:, :img_width - 1, :img_height - 1, :] -\n-                     x[:, 1:, :img_height - 1, :])\n-        b = K.square(x[:, :img_width - 1, :img_height - 1, :] -\n-                     x[:, :img_width - 1, 1:, :])\n+        a = K.square(x[:, :img_height - 1, :img_width - 1, :] -\n+                     x[:, 1:, :img_width - 1, :])\n+        b = K.square(x[:, :img_height - 1, :img_width - 1, :] -\n+                     x[:, :img_height - 1, 1:, :])\n     return K.sum(K.pow(a + b, 1.25))\n \n # define the loss\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#aabda13a107d99e08eeeb6d5be7c4cccf378c6aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 58 | Churn Cumulative: 3036 | Contributors (this commit): 39 | Commits (past 90d): 25 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -811,7 +811,7 @@ class CSVLogger(Callback):\n         if self.append:\n             if os.path.exists(self.filename):\n                 with open(self.filename) as f:\n-                    self.append_header = bool(len(f.readline()))\n+                    self.append_header = not bool(len(f.readline()))\n             self.csv_file = open(self.filename, 'a')\n         else:\n             self.csv_file = open(self.filename, 'w')\n@@ -828,8 +828,12 @@ class CSVLogger(Callback):\n \n         if not self.writer:\n             self.keys = sorted(logs.keys())\n+\n+            class CustomDialect(csv.excel):\n+                delimiter = self.sep\n+\n             self.writer = csv.DictWriter(self.csv_file,\n-                                         fieldnames=['epoch'] + self.keys)\n+                                         fieldnames=['epoch'] + self.keys, dialect=CustomDialect)\n             if self.append_header:\n                 self.writer.writeheader()\n \n\n@@ -4,6 +4,7 @@ import multiprocessing\n \n import numpy as np\n import pytest\n+from csv import Sniffer\n from keras import optimizers\n \n np.random.seed(1337)\n@@ -203,6 +204,55 @@ def test_ReduceLROnPlateau():\n     assert np.allclose(float(K.get_value(model.optimizer.lr)), 0.1, atol=K.epsilon())\n \n \n+def test_CSVLogger():\n+    filepath = 'log.tsv'\n+    sep = '\\t'\n+    (X_train, y_train), (X_test, y_test) = get_test_data(nb_train=train_samples,\n+                                                         nb_test=test_samples,\n+                                                         input_shape=(input_dim,),\n+                                                         classification=True,\n+                                                         nb_class=nb_class)\n+    y_test = np_utils.to_categorical(y_test)\n+    y_train = np_utils.to_categorical(y_train)\n+\n+    def make_model():\n+        np.random.seed(1337)\n+        model = Sequential()\n+        model.add(Dense(nb_hidden, input_dim=input_dim, activation='relu'))\n+        model.add(Dense(nb_class, activation='softmax'))\n+\n+        model.compile(loss='categorical_crossentropy',\n+                      optimizer=optimizers.SGD(lr=0.1),\n+                      metrics=['accuracy'])\n+        return model\n+\n+    # case 1, create new file with defined separator\n+    model = make_model()\n+    cbks = [callbacks.CSVLogger(filepath, separator=sep)]\n+    model.fit(X_train, y_train, batch_size=batch_size,\n+              validation_data=(X_test, y_test), callbacks=cbks, nb_epoch=1)\n+\n+    assert os.path.exists(filepath)\n+    with open(filepath) as csvfile:\n+        dialect = Sniffer().sniff(csvfile.read())\n+    assert dialect.delimiter == sep\n+    del model\n+    del cbks\n+\n+    # case 2, append data to existing file, skip header\n+    model = make_model()\n+    cbks = [callbacks.CSVLogger(filepath, separator=sep, append=True)]\n+    model.fit(X_train, y_train, batch_size=batch_size,\n+              validation_data=(X_test, y_test), callbacks=cbks, nb_epoch=1)\n+\n+    import re\n+    with open(filepath) as csvfile:\n+        output = \" \".join(csvfile.readlines())\n+        assert len(re.findall('epoch', output)) == 1\n+\n+    os.remove(filepath)\n+\n+\n @pytest.mark.skipif((K.backend() != 'tensorflow'),\n                     reason=\"Requires tensorflow backend\")\n def test_TensorBoard():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c07d0e6448bb63762bc7a19d87814f6fba79fa32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 3063 | Contributors (this commit): 32 | Commits (past 90d): 16 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1124,7 +1124,12 @@ class Model(Container):\n             elif len(validation_data) == 3:\n                 val_x, val_y, val_sample_weight = validation_data\n             else:\n-                raise\n+                raise ValueError('When passing validation_data, '\n+                                 'it must contain 2 (x_val, y_val) '\n+                                 'or 3 (x_val, y_val, val_sample_weights) '\n+                                 'items, however it contains %d items' %\n+                                 len(validation_data))\n+\n             val_x, val_y, val_sample_weights = self._standardize_user_data(\n                 val_x, val_y,\n                 sample_weight=val_sample_weight,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1585b8dd4e877e022e3c5f5dbecec51666b2218c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 5 | Churn Cumulative: 9831 | Contributors (this commit): 77 | Commits (past 90d): 86 | Contributors (cumulative): 111 | DMM Complexity: None\n\nDIFF:\n@@ -1984,8 +1984,7 @@ def rnn(step_function, inputs, initial_states,\n         mask: binary tensor with shape `(samples, time, 1)`,\n             with a zero for every element that is masked.\n         constants: a list of constant values passed at each step.\n-        unroll: with TensorFlow the RNN is always unrolled, but with Theano you\n-            can use this boolean flag to unroll the RNN.\n+        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n         input_length: not relevant in the TensorFlow implementation.\n             Must be specified if using unrolling with Theano.\n \n\n@@ -1008,7 +1008,7 @@ def rnn(step_function, inputs, initial_states,\n         mask: binary tensor with shape (samples, time),\n             with a zero for every element that is masked.\n         constants: a list of constant values passed at each step.\n-        unroll: whether to unroll the RNN or to use a symbolic loop (`scan`).\n+        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n         input_length: must be specified if using `unroll`.\n \n     # Returns\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7174a09d3c7b6e8915bc1aef7aa820131da3a209", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 6056 | Contributors (this commit): 59 | Commits (past 90d): 49 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -714,7 +714,8 @@ def cast(x, dtype):\n         # you need to assign it.\n         >>> input = K.cast(input, dtype='float16')\n         >>> input\n-        <tf.Tensor 'Cast_2:0' shape=(2, 3) dtype=float16>    ```\n+        <tf.Tensor 'Cast_2:0' shape=(2, 3) dtype=float16>    \n+    ```\n     \"\"\"\n     return tf.cast(x, dtype)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3d400116b95074f454605605f5339b90e28b9247", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1026 | Contributors (this commit): 15 | Commits (past 90d): 10 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -102,9 +102,9 @@ class PReLU(Layer):\n         pos = K.relu(x)\n         if K.backend() == 'theano':\n             neg = (K.pattern_broadcast(self.alphas, self.param_broadcast) *\n-                   (x - abs(x)) * 0.5)\n+                   (x - K.abs(x)) * 0.5)\n         else:\n-            neg = self.alphas * (x - abs(x)) * 0.5\n+            neg = self.alphas * (x - K.abs(x)) * 0.5\n         return pos + neg\n \n     def get_config(self):\n@@ -331,7 +331,7 @@ class SReLU(Layer):\n         self.a_right = a_right_init(param_shape,\n                                     name='{}_a_right'.format(self.name))\n         # ensure the the right part is always to the right of the left\n-        self.t_right_actual = self.t_left + abs(self.t_right)\n+        self.t_right_actual = self.t_left + K.abs(self.t_right)\n         self.trainable_weights = [self.t_left, self.a_left,\n                                   self.t_right, self.a_right]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ab3b93e8dd103f1d9729305825791a084c7c8493", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3041 | Contributors (this commit): 40 | Commits (past 90d): 27 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -844,6 +844,7 @@ class CSVLogger(Callback):\n \n     def on_train_end(self, logs=None):\n         self.csv_file.close()\n+        self.writer = None\n \n \n class LambdaCallback(Callback):\n\n@@ -245,6 +245,10 @@ def test_CSVLogger():\n     model.fit(X_train, y_train, batch_size=batch_size,\n               validation_data=(X_test, y_test), callbacks=cbks, nb_epoch=1)\n \n+    # case 3, reuse of CSVLogger object\n+    model.fit(X_train, y_train, batch_size=batch_size,\n+              validation_data=(X_test, y_test), callbacks=cbks, nb_epoch=1)\n+\n     import re\n     with open(filepath) as csvfile:\n         output = \" \".join(csvfile.readlines())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0f4be6d17b3e831163f866edce9fc9552868960d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 33 | Files Changed: 1 | Hunks: 30 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 99 | Churn Cumulative: 380 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -35,22 +35,29 @@ from six.moves import range\n \n \n class CharacterTable(object):\n-    '''\n-    Given a set of characters:\n+    \"\"\"Given a set of characters:\n     + Encode them to a one hot integer representation\n     + Decode the one hot integer representation to their character output\n     + Decode a vector of probabilities to their character output\n-    '''\n+    \"\"\"\n+    def __init__(self, chars):\n+        \"\"\"Initialize character table.\n \n-    def __init__(self, chars, maxlen):\n+        # Arguments\n+            chars: Characters that can appear in the input.\n+        \"\"\"\n         self.chars = sorted(set(chars))\n         self.char_indices = dict((c, i) for i, c in enumerate(self.chars))\n         self.indices_char = dict((i, c) for i, c in enumerate(self.chars))\n-        self.maxlen = maxlen\n \n-    def encode(self, C, maxlen=None):\n-        maxlen = maxlen if maxlen else self.maxlen\n-        X = np.zeros((maxlen, len(self.chars)))\n+    def encode(self, C, num_rows):\n+        \"\"\"One hot encode given string C.\n+\n+        # Arguments\n+            num_rows: Number of rows in the returned one hot encoding. This is\n+                used to keep the # of rows for each data the same.\n+        \"\"\"\n+        X = np.zeros((num_rows, len(self.chars)))\n         for i, c in enumerate(C):\n             X[i, self.char_indices[c]] = 1\n         return X\n@@ -66,40 +73,42 @@ class colors:\n     fail = '\\033[91m'\n     close = '\\033[0m'\n \n-# Parameters for the model and dataset\n+# Parameters for the model and dataset.\n TRAINING_SIZE = 50000\n DIGITS = 3\n INVERT = True\n-# Try replacing GRU, or SimpleRNN\n-RNN = recurrent.LSTM\n-HIDDEN_SIZE = 128\n-BATCH_SIZE = 128\n-LAYERS = 1\n+\n+# Maximum length of input is 'int + int' (e.g., '345+678'). Maximum length of\n+# int is DIGITS.\n MAXLEN = DIGITS + 1 + DIGITS\n \n+# All the numbers, plus sign and space for padding.\n chars = '0123456789+ '\n-ctable = CharacterTable(chars, MAXLEN)\n+ctable = CharacterTable(chars)\n \n questions = []\n expected = []\n seen = set()\n print('Generating data...')\n while len(questions) < TRAINING_SIZE:\n-    f = lambda: int(''.join(np.random.choice(list('0123456789')) for i in range(np.random.randint(1, DIGITS + 1))))\n+    f = lambda: int(''.join(np.random.choice(list('0123456789'))\n+                    for i in range(np.random.randint(1, DIGITS + 1))))\n     a, b = f(), f()\n     # Skip any addition questions we've already seen\n-    # Also skip any such that X+Y == Y+X (hence the sorting)\n+    # Also skip any such that X+Y == Y+X (hence the sorting).\n     key = tuple(sorted((a, b)))\n     if key in seen:\n         continue\n     seen.add(key)\n-    # Pad the data with spaces such that it is always MAXLEN\n+    # Pad the data with spaces such that it is always MAXLEN.\n     q = '{}+{}'.format(a, b)\n     query = q + ' ' * (MAXLEN - len(q))\n     ans = str(a + b)\n-    # Answers can be of maximum size DIGITS + 1\n+    # Answers can be of maximum size DIGITS + 1.\n     ans += ' ' * (DIGITS + 1 - len(ans))\n     if INVERT:\n+        # Reverse the query, e.g., '12+345  ' becomes '  543+21'. (Note the\n+        # space used for padding.)\n         query = query[::-1]\n     questions.append(query)\n     expected.append(ans)\n@@ -109,53 +118,73 @@ print('Vectorization...')\n X = np.zeros((len(questions), MAXLEN, len(chars)), dtype=np.bool)\n y = np.zeros((len(questions), DIGITS + 1, len(chars)), dtype=np.bool)\n for i, sentence in enumerate(questions):\n-    X[i] = ctable.encode(sentence, maxlen=MAXLEN)\n+    X[i] = ctable.encode(sentence, MAXLEN)\n for i, sentence in enumerate(expected):\n-    y[i] = ctable.encode(sentence, maxlen=DIGITS + 1)\n+    y[i] = ctable.encode(sentence, DIGITS + 1)\n \n-# Shuffle (X, y) in unison as the later parts of X will almost all be larger digits\n+# Shuffle (X, y) in unison as the later parts of X will almost all be larger\n+# digits.\n indices = np.arange(len(y))\n np.random.shuffle(indices)\n X = X[indices]\n y = y[indices]\n \n-# Explicitly set apart 10% for validation data that we never train over\n+# Explicitly set apart 10% for validation data that we never train over.\n split_at = len(X) - len(X) // 10\n (X_train, X_val) = (slice_X(X, 0, split_at), slice_X(X, split_at))\n (y_train, y_val) = (y[:split_at], y[split_at:])\n \n+print('Training Data:')\n print(X_train.shape)\n print(y_train.shape)\n \n+print('Validation Data:')\n+print(X_val.shape)\n+print(y_val.shape)\n+\n+# Try replacing GRU, or SimpleRNN.\n+RNN = recurrent.LSTM\n+HIDDEN_SIZE = 128\n+BATCH_SIZE = 128\n+LAYERS = 1\n+\n print('Build model...')\n model = Sequential()\n-# \"Encode\" the input sequence using an RNN, producing an output of HIDDEN_SIZE\n-# note: in a situation where your input sequences have a variable length,\n+# \"Encode\" the input sequence using an RNN, producing an output of HIDDEN_SIZE.\n+# Note: In a situation where your input sequences have a variable length,\n # use input_shape=(None, nb_feature).\n model.add(RNN(HIDDEN_SIZE, input_shape=(MAXLEN, len(chars))))\n-# For the decoder's input, we repeat the encoded input for each time step\n+# As the decoder RNN's input, repeatedly provide with the last hidden state of\n+# RNN for each time step. Repeat 'DIGITS + 1' times as that's the maximum\n+# length of output, e.g., when DIGITS=3, max output is 999+999=1998.\n model.add(RepeatVector(DIGITS + 1))\n-# The decoder RNN could be multiple layers stacked or a single layer\n+# The decoder RNN could be multiple layers stacked or a single layer.\n for _ in range(LAYERS):\n+    # By setting return_sequences to True, return not only the last output but\n+    # all the outputs so far in the form of (nb_samples, timesteps,\n+    # output_dim). This is necessary as TimeDistributed in the below expects\n+    # the first dimension to be the timesteps.\n     model.add(RNN(HIDDEN_SIZE, return_sequences=True))\n \n-# For each of step of the output sequence, decide which character should be chosen\n+# Apply a dense layer to the every temporal slice of an input. For each of step\n+# of the output sequence, decide which character should be chosen.\n model.add(TimeDistributed(Dense(len(chars))))\n model.add(Activation('softmax'))\n-\n model.compile(loss='categorical_crossentropy',\n               optimizer='adam',\n               metrics=['accuracy'])\n+model.summary()\n \n-# Train the model each generation and show predictions against the validation dataset\n+# Train the model each generation and show predictions against the validation\n+# dataset.\n for iteration in range(1, 200):\n     print()\n     print('-' * 50)\n     print('Iteration', iteration)\n     model.fit(X_train, y_train, batch_size=BATCH_SIZE, nb_epoch=1,\n               validation_data=(X_val, y_val))\n-    ###\n-    # Select 10 samples from the validation set at random so we can visualize errors\n+    # Select 10 samples from the validation set at random so we can visualize\n+    # errors.\n     for i in range(10):\n         ind = np.random.randint(0, len(X_val))\n         rowX, rowy = X_val[np.array([ind])], y_val[np.array([ind])]\n@@ -165,5 +194,9 @@ for iteration in range(1, 200):\n         guess = ctable.decode(preds[0], calc_argmax=False)\n         print('Q', q[::-1] if INVERT else q)\n         print('T', correct)\n-        print(colors.ok + '☑' + colors.close if correct == guess else colors.fail + '☒' + colors.close, guess)\n+        if correct == guess:\n+            print(colors.ok + '☑' + colors.close, end=\" \")\n+        else:\n+            print(colors.fail + '☒' + colors.close, end=\" \")\n+        print(guess)\n         print('---')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
