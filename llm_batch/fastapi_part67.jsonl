{"custom_id": "fastapi#8cd7cfc2b622fad03455c324e2ae87014a3fd166", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 84 | Lines Deleted: 458 | Files Changed: 13 | Hunks: 7 | Methods Changed: 19 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 542 | Churn Cumulative: 1266 | Contributors (this commit): 4 | Commits (past 90d): 15 | Contributors (cumulative): 16 | DMM Complexity: 0.0\n\nDIFF:\n\n\n\n@@ -0,0 +1,38 @@\n+from fastapi import FastAPI\n+from fastapi.openapi.docs import (\n+    get_redoc_html,\n+    get_swagger_ui_html,\n+    get_swagger_ui_oauth2_redirect_html,\n+)\n+\n+app = FastAPI(docs_url=None, redoc_url=None)\n+\n+\n+@app.get(\"/docs\", include_in_schema=False)\n+async def custom_swagger_ui_html():\n+    return get_swagger_ui_html(\n+        openapi_url=app.openapi_url,\n+        title=app.title + \" - Swagger UI\",\n+        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n+        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n+        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n+    )\n+\n+\n+@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\n+async def swagger_ui_redirect():\n+    return get_swagger_ui_oauth2_redirect_html()\n+\n+\n+@app.get(\"/redoc\", include_in_schema=False)\n+async def redoc_html():\n+    return get_redoc_html(\n+        openapi_url=app.openapi_url,\n+        title=app.title + \" - ReDoc\",\n+        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n+    )\n+\n+\n+@app.get(\"/users/{username}\")\n+async def read_user(username: str):\n+    return {\"message\": f\"Hello {username}\"}\n\n\n\n@@ -1,6 +1,6 @@\n from fastapi.testclient import TestClient\n \n-from docs_src.extending_openapi.tutorial003 import app\n+from docs_src.configure_swagger_ui.tutorial001 import app\n \n client = TestClient(app)\n \n\n@@ -1,6 +1,6 @@\n from fastapi.testclient import TestClient\n \n-from docs_src.extending_openapi.tutorial004 import app\n+from docs_src.configure_swagger_ui.tutorial002 import app\n \n client = TestClient(app)\n \n\n@@ -1,6 +1,6 @@\n from fastapi.testclient import TestClient\n \n-from docs_src.extending_openapi.tutorial005 import app\n+from docs_src.configure_swagger_ui.tutorial003 import app\n \n client = TestClient(app)\n \n\n\n@@ -0,0 +1,42 @@\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    static_dir: Path = Path(os.getcwd()) / \"static\"\n+    print(static_dir)\n+    static_dir.mkdir(exist_ok=True)\n+    from docs_src.custom_docs_ui.tutorial001 import app\n+\n+    with TestClient(app) as client:\n+        yield client\n+    static_dir.rmdir()\n+\n+\n+def test_swagger_ui_html(client: TestClient):\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200, response.text\n+    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\" in response.text\n+    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\" in response.text\n+\n+\n+def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n+    response = client.get(\"/docs/oauth2-redirect\")\n+    assert response.status_code == 200, response.text\n+    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n+\n+\n+def test_redoc_html(client: TestClient):\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200, response.text\n+    assert \"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\" in response.text\n+\n+\n+def test_api(client: TestClient):\n+    response = client.get(\"/users/john\")\n+    assert response.status_code == 200, response.text\n+    assert response.json()[\"message\"] == \"Hello john\"\n\n@@ -10,7 +10,7 @@ def client():\n     static_dir: Path = Path(os.getcwd()) / \"static\"\n     print(static_dir)\n     static_dir.mkdir(exist_ok=True)\n-    from docs_src.extending_openapi.tutorial002 import app\n+    from docs_src.custom_docs_ui.tutorial002 import app\n \n     with TestClient(app) as client:\n         yield client\n\n@@ -1,454 +0,0 @@\n-import time\n-from pathlib import Path\n-from unittest.mock import MagicMock\n-\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client():\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases_peewee.sql_app.main import app\n-\n-    test_db = Path(\"./test.db\")\n-    with TestClient(app) as c:\n-        yield c\n-    test_db.unlink()\n-\n-\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_pydanticv1\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-time.sleep = MagicMock()\n-\n-\n-@needs_pydanticv1\n-def test_get_slowusers(client):\n-    response = client.get(\"/slowusers/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-@needs_pydanticv1\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-                \"post\": {\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/slowusers/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Slow Users\",\n-                    \"operationId\": \"read_slow_users_slowusers__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Slow Users Slowusers  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ea43f227e5c7128c09e3e2d5dceea212552b19dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1683 | Lines Deleted: 2 | Files Changed: 22 | Hunks: 43 | Methods Changed: 60 | Complexity Δ (Sum/Max): 53/10 | Churn Δ: 1685 | Churn Cumulative: 6985 | Contributors (this commit): 42 | Commits (past 90d): 32 | Contributors (cumulative): 78 | DMM Complexity: 0.9896373056994818\n\nDIFF:\n@@ -0,0 +1,28 @@\n+from typing import List, Union\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Union[str, None] = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> List[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> list[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -0,0 +1,28 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> list[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -0,0 +1,28 @@\n+from typing import List, Union\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Union[str, None] = None\n+\n+\n+app = FastAPI(separate_input_output_schemas=False)\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> List[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+\n+\n+app = FastAPI(separate_input_output_schemas=False)\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> list[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -0,0 +1,28 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+\n+\n+app = FastAPI(separate_input_output_schemas=False)\n+\n+\n+@app.post(\"/items/\")\n+def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\")\n+def read_items() -> list[Item]:\n+    return [\n+        Item(\n+            name=\"Portal Gun\",\n+            description=\"Device to travel through the multi-rick-verse\",\n+        ),\n+        Item(name=\"Plumbus\"),\n+    ]\n\n@@ -181,9 +181,13 @@ if PYDANTIC_V2:\n         field_mapping: Dict[\n             Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n         ],\n+        separate_input_output_schemas: bool = True,\n     ) -> Dict[str, Any]:\n+        override_mode: Union[Literal[\"validation\"], None] = (\n+            None if separate_input_output_schemas else \"validation\"\n+        )\n         # This expects that GenerateJsonSchema was already used to generate the definitions\n-        json_schema = field_mapping[(field, field.mode)]\n+        json_schema = field_mapping[(field, override_mode or field.mode)]\n         if \"$ref\" not in json_schema:\n             # TODO remove when deprecating Pydantic v1\n             # Ref: https://github.com/pydantic/pydantic/blob/d61792cc42c80b13b23e3ffa74bc37ec7c77f7d1/pydantic/schema.py#L207\n@@ -200,14 +204,19 @@ if PYDANTIC_V2:\n         fields: List[ModelField],\n         schema_generator: GenerateJsonSchema,\n         model_name_map: ModelNameMap,\n+        separate_input_output_schemas: bool = True,\n     ) -> Tuple[\n         Dict[\n             Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n         ],\n         Dict[str, Dict[str, Any]],\n     ]:\n+        override_mode: Union[Literal[\"validation\"], None] = (\n+            None if separate_input_output_schemas else \"validation\"\n+        )\n         inputs = [\n-            (field, field.mode, field._type_adapter.core_schema) for field in fields\n+            (field, override_mode or field.mode, field._type_adapter.core_schema)\n+            for field in fields\n         ]\n         field_mapping, definitions = schema_generator.generate_definitions(\n             inputs=inputs\n@@ -429,6 +438,7 @@ else:\n         field_mapping: Dict[\n             Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n         ],\n+        separate_input_output_schemas: bool = True,\n     ) -> Dict[str, Any]:\n         # This expects that GenerateJsonSchema was already used to generate the definitions\n         return field_schema(  # type: ignore[no-any-return]\n@@ -444,6 +454,7 @@ else:\n         fields: List[ModelField],\n         schema_generator: GenerateJsonSchema,\n         model_name_map: ModelNameMap,\n+        separate_input_output_schemas: bool = True,\n     ) -> Tuple[\n         Dict[\n             Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n\n@@ -92,6 +92,7 @@ class FastAPI(Starlette):\n         generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n             generate_unique_id\n         ),\n+        separate_input_output_schemas: bool = True,\n         **extra: Any,\n     ) -> None:\n         self.debug = debug\n@@ -111,6 +112,7 @@ class FastAPI(Starlette):\n         self.swagger_ui_init_oauth = swagger_ui_init_oauth\n         self.swagger_ui_parameters = swagger_ui_parameters\n         self.servers = servers or []\n+        self.separate_input_output_schemas = separate_input_output_schemas\n         self.extra = extra\n         self.openapi_version = \"3.1.0\"\n         self.openapi_schema: Optional[Dict[str, Any]] = None\n@@ -227,6 +229,7 @@ class FastAPI(Starlette):\n                 webhooks=self.webhooks.routes,\n                 tags=self.openapi_tags,\n                 servers=self.servers,\n+                separate_input_output_schemas=self.separate_input_output_schemas,\n             )\n         return self.openapi_schema\n \n\n@@ -95,6 +95,7 @@ def get_openapi_operation_parameters(\n     field_mapping: Dict[\n         Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n     ],\n+    separate_input_output_schemas: bool = True,\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n@@ -107,6 +108,7 @@ def get_openapi_operation_parameters(\n             schema_generator=schema_generator,\n             model_name_map=model_name_map,\n             field_mapping=field_mapping,\n+            separate_input_output_schemas=separate_input_output_schemas,\n         )\n         parameter = {\n             \"name\": param.alias,\n@@ -132,6 +134,7 @@ def get_openapi_operation_request_body(\n     field_mapping: Dict[\n         Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n     ],\n+    separate_input_output_schemas: bool = True,\n ) -> Optional[Dict[str, Any]]:\n     if not body_field:\n         return None\n@@ -141,6 +144,7 @@ def get_openapi_operation_request_body(\n         schema_generator=schema_generator,\n         model_name_map=model_name_map,\n         field_mapping=field_mapping,\n+        separate_input_output_schemas=separate_input_output_schemas,\n     )\n     field_info = cast(Body, body_field.field_info)\n     request_media_type = field_info.media_type\n@@ -211,6 +215,7 @@ def get_openapi_path(\n     field_mapping: Dict[\n         Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n     ],\n+    separate_input_output_schemas: bool = True,\n ) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n     path = {}\n     security_schemes: Dict[str, Any] = {}\n@@ -242,6 +247,7 @@ def get_openapi_path(\n                 schema_generator=schema_generator,\n                 model_name_map=model_name_map,\n                 field_mapping=field_mapping,\n+                separate_input_output_schemas=separate_input_output_schemas,\n             )\n             parameters.extend(operation_parameters)\n             if parameters:\n@@ -263,6 +269,7 @@ def get_openapi_path(\n                     schema_generator=schema_generator,\n                     model_name_map=model_name_map,\n                     field_mapping=field_mapping,\n+                    separate_input_output_schemas=separate_input_output_schemas,\n                 )\n                 if request_body_oai:\n                     operation[\"requestBody\"] = request_body_oai\n@@ -280,6 +287,7 @@ def get_openapi_path(\n                             schema_generator=schema_generator,\n                             model_name_map=model_name_map,\n                             field_mapping=field_mapping,\n+                            separate_input_output_schemas=separate_input_output_schemas,\n                         )\n                         callbacks[callback.name] = {callback.path: cb_path}\n                 operation[\"callbacks\"] = callbacks\n@@ -310,6 +318,7 @@ def get_openapi_path(\n                             schema_generator=schema_generator,\n                             model_name_map=model_name_map,\n                             field_mapping=field_mapping,\n+                            separate_input_output_schemas=separate_input_output_schemas,\n                         )\n                     else:\n                         response_schema = {}\n@@ -343,6 +352,7 @@ def get_openapi_path(\n                             schema_generator=schema_generator,\n                             model_name_map=model_name_map,\n                             field_mapping=field_mapping,\n+                            separate_input_output_schemas=separate_input_output_schemas,\n                         )\n                         media_type = route_response_media_type or \"application/json\"\n                         additional_schema = (\n@@ -433,6 +443,7 @@ def get_openapi(\n     terms_of_service: Optional[str] = None,\n     contact: Optional[Dict[str, Union[str, Any]]] = None,\n     license_info: Optional[Dict[str, Union[str, Any]]] = None,\n+    separate_input_output_schemas: bool = True,\n ) -> Dict[str, Any]:\n     info: Dict[str, Any] = {\"title\": title, \"version\": version}\n     if summary:\n@@ -459,6 +470,7 @@ def get_openapi(\n         fields=all_fields,\n         schema_generator=schema_generator,\n         model_name_map=model_name_map,\n+        separate_input_output_schemas=separate_input_output_schemas,\n     )\n     for route in routes or []:\n         if isinstance(route, routing.APIRoute):\n@@ -468,6 +480,7 @@ def get_openapi(\n                 schema_generator=schema_generator,\n                 model_name_map=model_name_map,\n                 field_mapping=field_mapping,\n+                separate_input_output_schemas=separate_input_output_schemas,\n             )\n             if result:\n                 path, security_schemes, path_definitions = result\n@@ -487,6 +500,7 @@ def get_openapi(\n                 schema_generator=schema_generator,\n                 model_name_map=model_name_map,\n                 field_mapping=field_mapping,\n+                separate_input_output_schemas=separate_input_output_schemas,\n             )\n             if result:\n                 path, security_schemes, path_definitions = result\n\n@@ -0,0 +1,29 @@\n+import subprocess\n+\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_text(\"POST/items/Create Item\").click()\n+    page.get_by_role(\"tab\", name=\"Schema\").first.click()\n+    page.screenshot(\n+        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image01.png\"\n+    )\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n+)\n+try:\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,30 @@\n+import subprocess\n+\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_text(\"GET/items/Read Items\").click()\n+    page.get_by_role(\"button\", name=\"Try it out\").click()\n+    page.get_by_role(\"button\", name=\"Execute\").click()\n+    page.screenshot(\n+        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image02.png\"\n+    )\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n+)\n+try:\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,30 @@\n+import subprocess\n+\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_text(\"GET/items/Read Items\").click()\n+    page.get_by_role(\"tab\", name=\"Schema\").click()\n+    page.get_by_label(\"Schema\").get_by_role(\"button\", name=\"Expand all\").click()\n+    page.screenshot(\n+        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image03.png\"\n+    )\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n+)\n+try:\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,29 @@\n+import subprocess\n+\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_role(\"button\", name=\"Item-Input\").click()\n+    page.get_by_role(\"button\", name=\"Item-Output\").click()\n+    page.set_viewport_size({\"width\": 960, \"height\": 820})\n+    page.screenshot(\n+        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image04.png\"\n+    )\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n+)\n+try:\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,29 @@\n+import subprocess\n+\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_role(\"button\", name=\"Item\", exact=True).click()\n+    page.set_viewport_size({\"width\": 960, \"height\": 700})\n+    page.screenshot(\n+        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image05.png\"\n+    )\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial002:app\"]\n+)\n+try:\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,490 @@\n+from typing import List, Optional\n+\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+from .utils import needs_pydanticv2\n+\n+\n+class SubItem(BaseModel):\n+    subname: str\n+    sub_description: Optional[str] = None\n+    tags: List[str] = []\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    sub: Optional[SubItem] = None\n+\n+\n+def get_app_client(separate_input_output_schemas: bool = True) -> TestClient:\n+    app = FastAPI(separate_input_output_schemas=separate_input_output_schemas)\n+\n+    @app.post(\"/items/\")\n+    def create_item(item: Item):\n+        return item\n+\n+    @app.post(\"/items-list/\")\n+    def create_item_list(item: List[Item]):\n+        return item\n+\n+    @app.get(\"/items/\")\n+    def read_items() -> List[Item]:\n+        return [\n+            Item(\n+                name=\"Portal Gun\",\n+                description=\"Device to travel through the multi-rick-verse\",\n+                sub=SubItem(subname=\"subname\"),\n+            ),\n+            Item(name=\"Plumbus\"),\n+        ]\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_create_item():\n+    client = get_app_client()\n+    client_no = get_app_client(separate_input_output_schemas=False)\n+    response = client.post(\"/items/\", json={\"name\": \"Plumbus\"})\n+    response2 = client_no.post(\"/items/\", json={\"name\": \"Plumbus\"})\n+    assert response.status_code == response2.status_code == 200, response.text\n+    assert (\n+        response.json()\n+        == response2.json()\n+        == {\"name\": \"Plumbus\", \"description\": None, \"sub\": None}\n+    )\n+\n+\n+def test_create_item_with_sub():\n+    client = get_app_client()\n+    client_no = get_app_client(separate_input_output_schemas=False)\n+    data = {\n+        \"name\": \"Plumbus\",\n+        \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\"},\n+    }\n+    response = client.post(\"/items/\", json=data)\n+    response2 = client_no.post(\"/items/\", json=data)\n+    assert response.status_code == response2.status_code == 200, response.text\n+    assert (\n+        response.json()\n+        == response2.json()\n+        == {\n+            \"name\": \"Plumbus\",\n+            \"description\": None,\n+            \"sub\": {\"subname\": \"SubPlumbus\", \"sub_description\": \"Sub WTF\", \"tags\": []},\n+        }\n+    )\n+\n+\n+def test_create_item_list():\n+    client = get_app_client()\n+    client_no = get_app_client(separate_input_output_schemas=False)\n+    data = [\n+        {\"name\": \"Plumbus\"},\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+    ]\n+    response = client.post(\"/items-list/\", json=data)\n+    response2 = client_no.post(\"/items-list/\", json=data)\n+    assert response.status_code == response2.status_code == 200, response.text\n+    assert (\n+        response.json()\n+        == response2.json()\n+        == [\n+            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n+            {\n+                \"name\": \"Portal Gun\",\n+                \"description\": \"Device to travel through the multi-rick-verse\",\n+                \"sub\": None,\n+            },\n+        ]\n+    )\n+\n+\n+def test_read_items():\n+    client = get_app_client()\n+    client_no = get_app_client(separate_input_output_schemas=False)\n+    response = client.get(\"/items/\")\n+    response2 = client_no.get(\"/items/\")\n+    assert response.status_code == response2.status_code == 200, response.text\n+    assert (\n+        response.json()\n+        == response2.json()\n+        == [\n+            {\n+                \"name\": \"Portal Gun\",\n+                \"description\": \"Device to travel through the multi-rick-verse\",\n+                \"sub\": {\"subname\": \"subname\", \"sub_description\": None, \"tags\": []},\n+            },\n+            {\"name\": \"Plumbus\", \"description\": None, \"sub\": None},\n+        ]\n+    )\n+\n+\n+@needs_pydanticv2\n+def test_openapi_schema():\n+    client = get_app_client()\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Item-Output\"\n+                                        },\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            },\n+            \"/items-list/\": {\n+                \"post\": {\n+                    \"summary\": \"Create Item List\",\n+                    \"operationId\": \"create_item_list_items_list__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"items\": {\n+                                        \"$ref\": \"#/components/schemas/Item-Input\"\n+                                    },\n+                                    \"type\": \"array\",\n+                                    \"title\": \"Item\",\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item-Input\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                        \"sub\": {\n+                            \"anyOf\": [\n+                                {\"$ref\": \"#/components/schemas/SubItem-Input\"},\n+                                {\"type\": \"null\"},\n+                            ]\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"Item-Output\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                        \"sub\": {\n+                            \"anyOf\": [\n+                                {\"$ref\": \"#/components/schemas/SubItem-Output\"},\n+                                {\"type\": \"null\"},\n+                            ]\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\", \"description\", \"sub\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"SubItem-Input\": {\n+                    \"properties\": {\n+                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n+                        \"sub_description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Sub Description\",\n+                        },\n+                        \"tags\": {\n+                            \"items\": {\"type\": \"string\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Tags\",\n+                            \"default\": [],\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"subname\"],\n+                    \"title\": \"SubItem\",\n+                },\n+                \"SubItem-Output\": {\n+                    \"properties\": {\n+                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n+                        \"sub_description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Sub Description\",\n+                        },\n+                        \"tags\": {\n+                            \"items\": {\"type\": \"string\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Tags\",\n+                            \"default\": [],\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"subname\", \"sub_description\", \"tags\"],\n+                    \"title\": \"SubItem\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n+\n+\n+@needs_pydanticv2\n+def test_openapi_schema_no_separate():\n+    client = get_app_client(separate_input_output_schemas=False)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            },\n+            \"/items-list/\": {\n+                \"post\": {\n+                    \"summary\": \"Create Item List\",\n+                    \"operationId\": \"create_item_list_items_list__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    \"type\": \"array\",\n+                                    \"title\": \"Item\",\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                        \"sub\": {\n+                            \"anyOf\": [\n+                                {\"$ref\": \"#/components/schemas/SubItem\"},\n+                                {\"type\": \"null\"},\n+                            ]\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"SubItem\": {\n+                    \"properties\": {\n+                        \"subname\": {\"type\": \"string\", \"title\": \"Subname\"},\n+                        \"sub_description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Sub Description\",\n+                        },\n+                        \"tags\": {\n+                            \"items\": {\"type\": \"string\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Tags\",\n+                            \"default\": [],\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"subname\"],\n+                    \"title\": \"SubItem\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n\n@@ -0,0 +1,147 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial001 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Item-Output\"\n+                                        },\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item-Input\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"Item-Output\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\", \"description\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n@@ -0,0 +1,150 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310, needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+@needs_py310\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_py310\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Item-Output\"\n+                                        },\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item-Input\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"Item-Output\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\", \"description\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n@@ -0,0 +1,150 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39, needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial001_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+@needs_py39\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_py39\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Item-Output\"\n+                                        },\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item-Input\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item-Input\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"Item-Output\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\", \"description\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n@@ -0,0 +1,133 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial002 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n@@ -0,0 +1,136 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310, needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial002_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+@needs_py310\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_py310\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n@@ -0,0 +1,136 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39, needs_pydanticv2\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client() -> TestClient:\n+    from docs_src.separate_openapi_schemas.tutorial002_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_create_item(client: TestClient) -> None:\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n+\n+\n+@needs_py39\n+def test_read_items(client: TestClient) -> None:\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\n+            \"name\": \"Portal Gun\",\n+            \"description\": \"Device to travel through the multi-rick-verse\",\n+        },\n+        {\"name\": \"Plumbus\", \"description\": None},\n+    ]\n+\n+\n+@needs_py39\n+@needs_pydanticv2\n+def test_openapi_schema(client: TestClient) -> None:\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                        \"type\": \"array\",\n+                                        \"title\": \"Response Read Items Items  Get\",\n+                                    }\n+                                }\n+                            },\n+                        }\n+                    },\n+                },\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"Item\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"description\": {\n+                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                            \"title\": \"Description\",\n+                        },\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\"],\n+                    \"title\": \"Item\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
