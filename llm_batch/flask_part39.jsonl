{"custom_id": "flask#bb2e20f53fd66981190658a58e206a3f8aa4f3e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 250 | Contributors (this commit): 12 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -93,7 +93,7 @@ setup(\n     install_requires=[\n         'Werkzeug>=0.7',\n         'Jinja2>=2.4',\n-        'itsdangerous>=0.17'\n+        'itsdangerous>=0.21'\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ac04bc78361d5562f8289e8efe16a2e9a97b0d01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 13 | Files Changed: 6 | Hunks: 13 | Methods Changed: 23 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 3714 | Contributors (this commit): 16 | Commits (past 90d): 49 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -529,7 +529,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 pass\n         @app.route('/')\n         def fails():\n-            1/0\n+            1 // 0\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n         self.assert_in(b'Internal Server Error', rv.data)\n@@ -866,7 +866,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             app = flask.Flask(__name__)\n             @app.route('/')\n             def index():\n-                1/0\n+                1 // 0\n             c = app.test_client()\n             if config_key is not None:\n                 app.config[config_key] = True\n@@ -1054,7 +1054,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         @app.route('/fail')\n         def fail_func():\n-            1/0\n+            1 // 0\n \n         c = app.test_client()\n         for x in range(3):\n\n@@ -306,7 +306,7 @@ class LoggingTestCase(FlaskTestCase):\n \n         @app.route('/exc')\n         def exc():\n-            1/0\n+            1 // 0\n \n         with app.test_client() as c:\n             with catch_stderr() as err:\n@@ -340,7 +340,7 @@ class LoggingTestCase(FlaskTestCase):\n \n         @app.route('/')\n         def index():\n-            1/0\n+            1 // 0\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n@@ -349,7 +349,7 @@ class LoggingTestCase(FlaskTestCase):\n         err = out.getvalue()\n         self.assert_in('Exception on / [GET]', err)\n         self.assert_in('Traceback (most recent call last):', err)\n-        self.assert_in('1/0', err)\n+        self.assert_in('1 // 0', err)\n         self.assert_in('ZeroDivisionError:', err)\n \n     def test_processor_exceptions(self):\n@@ -357,11 +357,11 @@ class LoggingTestCase(FlaskTestCase):\n         @app.before_request\n         def before_request():\n             if trigger == 'before':\n-                1/0\n+                1 // 0\n         @app.after_request\n         def after_request(response):\n             if trigger == 'after':\n-                1/0\n+                1 // 0\n             return response\n         @app.route('/')\n         def index():\n\n@@ -83,7 +83,7 @@ class SignalsTestCase(FlaskTestCase):\n \n         @app.route('/')\n         def index():\n-            1/0\n+            1 // 0\n \n         def record(sender, exception):\n             recorded.append(exception)\n\n@@ -30,7 +30,7 @@ class FlaskSubclassingTestCase(FlaskTestCase):\n \n         @app.route('/')\n         def index():\n-            1/0\n+            1 // 0\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n\n@@ -143,7 +143,7 @@ class TestToolsTestCase(FlaskTestCase):\n \n         @app.route('/other')\n         def other():\n-            1/0\n+            1 // 0\n \n         with app.test_client() as c:\n             resp = c.get('/')\n\n@@ -55,9 +55,9 @@ class ViewTestCase(FlaskTestCase):\n \n         class Index(flask.views.MethodView):\n             def get(self):\n-                1/0\n+                1 // 0\n             def post(self):\n-                1/0\n+                1 // 0\n \n         class Other(Index):\n             def get(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#404265110ab52ffd2a5d4991f115913aacba94a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1615 | Contributors (this commit): 26 | Commits (past 90d): 9 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -398,7 +398,7 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n         _request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n             if '_flashes' in session else []\n     if category_filter:\n-        flashes = filter(lambda f: f[0] in category_filter, flashes)\n+        flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n     if not with_categories:\n         return [x[1] for x in flashes]\n     return flashes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#775c76ac5c4365deb31061d0a8ef942d0585f81d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 859 | Contributors (this commit): 9 | Commits (past 90d): 12 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -133,6 +133,7 @@ class JSONTestCase(FlaskTestCase):\n         class ModifiedRequest(flask.Request):\n             url_charset = 'euc-kr'\n         app = flask.Flask(__name__)\n+        app.testing = True\n         app.request_class = ModifiedRequest\n         app.url_map.charset = 'euc-kr'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ffd9296507db6bfad1339b75c0ccdc7fa030cb67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 539 | Contributors (this commit): 8 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -334,6 +334,9 @@ class RequestContext(object):\n             if exc is None:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_request(exc)\n+            request_close = getattr(self.request, 'close', None)\n+            if request_close is not None:\n+                request_close()\n             clear_request = True\n \n         rv = _request_ctx_stack.pop()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#47572c5b4006c54f0991587d5c07d599d0ad3325", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3711 | Contributors (this commit): 28 | Commits (past 90d): 24 | Contributors (cumulative): 33 | DMM Complexity: 0.5\n\nDIFF:\n@@ -516,6 +516,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if file is None:\n             file = open(filename, 'rb')\n             mtime = os.path.getmtime(filename)\n+        headers['Content-Length'] = os.path.getsize(filename)\n         data = wrap_file(request.environ, file)\n \n     rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n\n@@ -786,6 +786,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_static_files(self):\n         app = flask.Flask(__name__)\n+        app.testing = True\n         rv = app.test_client().get('/static/index.html')\n         self.assert_equal(rv.status_code, 200)\n         self.assert_equal(rv.data.strip(), b'<h1>Hello World!</h1>')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb622fb34f0b2433b21b6b5454273a597b77a6d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 22 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 3943 | Contributors (this commit): 11 | Commits (past 90d): 39 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -793,6 +793,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         with app.test_request_context():\n             self.assert_equal(flask.url_for('static', filename='index.html'),\n                               '/static/index.html')\n+        rv.close()\n \n     def test_none_response(self):\n         app = flask.Flask(__name__)\n\n@@ -172,8 +172,10 @@ class ModuleTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, b'Hello from the Admin')\n         rv = c.get('/admin/static/test.txt')\n         self.assert_equal(rv.data.strip(), b'Admin File')\n+        rv.close()\n         rv = c.get('/admin/static/css/test.css')\n         self.assert_equal(rv.data.strip(), b'/* nested file */')\n+        rv.close()\n \n         with app.test_request_context():\n             self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n@@ -354,8 +356,10 @@ class BlueprintTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, b'Hello from the Admin')\n         rv = c.get('/admin/static/test.txt')\n         self.assert_equal(rv.data.strip(), b'Admin File')\n+        rv.close()\n         rv = c.get('/admin/static/css/test.css')\n         self.assert_equal(rv.data.strip(), b'/* nested file */')\n+        rv.close()\n \n         # try/finally, in case other tests use this app for Blueprint tests.\n         max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n@@ -405,6 +409,7 @@ class BlueprintTestCase(FlaskTestCase):\n                 rv = blueprint.send_static_file('index.html')\n                 cc = parse_cache_control_header(rv.headers['Cache-Control'])\n                 self.assert_equal(cc.max_age, 100)\n+                rv.close()\n         finally:\n             app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n\n@@ -159,6 +159,7 @@ class SendfileTestCase(FlaskTestCase):\n             self.assert_equal(rv.mimetype, 'text/html')\n             with app.open_resource('static/index.html') as f:\n                 self.assert_equal(rv.data, f.read())\n+            rv.close()\n \n     def test_send_file_xsendfile(self):\n         app = flask.Flask(__name__)\n@@ -170,6 +171,7 @@ class SendfileTestCase(FlaskTestCase):\n             self.assert_equal(rv.headers['x-sendfile'],\n                 os.path.join(app.root_path, 'static/index.html'))\n             self.assert_equal(rv.mimetype, 'text/html')\n+            rv.close()\n \n     def test_send_file_object(self):\n         app = flask.Flask(__name__)\n@@ -180,6 +182,7 @@ class SendfileTestCase(FlaskTestCase):\n                 with app.open_resource('static/index.html') as f:\n                     self.assert_equal(rv.data, f.read())\n                 self.assert_equal(rv.mimetype, 'text/html')\n+                rv.close()\n             # mimetypes + etag\n             self.assert_equal(len(captured), 2)\n \n@@ -192,6 +195,7 @@ class SendfileTestCase(FlaskTestCase):\n                 self.assert_in('x-sendfile', rv.headers)\n                 self.assert_equal(rv.headers['x-sendfile'],\n                     os.path.join(app.root_path, 'static/index.html'))\n+                rv.close()\n             # mimetypes + etag\n             self.assert_equal(len(captured), 2)\n \n@@ -202,6 +206,7 @@ class SendfileTestCase(FlaskTestCase):\n                 rv = flask.send_file(f)\n                 self.assert_equal(rv.data, b'Test')\n                 self.assert_equal(rv.mimetype, 'application/octet-stream')\n+                rv.close()\n             # etags\n             self.assert_equal(len(captured), 1)\n             with catch_warnings() as captured:\n@@ -209,6 +214,7 @@ class SendfileTestCase(FlaskTestCase):\n                 rv = flask.send_file(f, mimetype='text/plain')\n                 self.assert_equal(rv.data, b'Test')\n                 self.assert_equal(rv.mimetype, 'text/plain')\n+                rv.close()\n             # etags\n             self.assert_equal(len(captured), 1)\n \n@@ -218,6 +224,7 @@ class SendfileTestCase(FlaskTestCase):\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n                 self.assert_not_in('x-sendfile', rv.headers)\n+                rv.close()\n             # etags\n             self.assert_equal(len(captured), 1)\n \n@@ -229,6 +236,7 @@ class SendfileTestCase(FlaskTestCase):\n                 rv = flask.send_file(f, as_attachment=True)\n                 value, options = parse_options_header(rv.headers['Content-Disposition'])\n                 self.assert_equal(value, 'attachment')\n+                rv.close()\n             # mimetypes + etag\n             self.assert_equal(len(captured), 2)\n \n@@ -238,6 +246,7 @@ class SendfileTestCase(FlaskTestCase):\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n             self.assert_equal(value, 'attachment')\n             self.assert_equal(options['filename'], 'index.html')\n+            rv.close()\n \n         with app.test_request_context():\n             rv = flask.send_file(StringIO('Test'), as_attachment=True,\n@@ -247,6 +256,7 @@ class SendfileTestCase(FlaskTestCase):\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n             self.assert_equal(value, 'attachment')\n             self.assert_equal(options['filename'], 'index.txt')\n+            rv.close()\n \n     def test_static_file(self):\n         app = flask.Flask(__name__)\n@@ -256,20 +266,24 @@ class SendfileTestCase(FlaskTestCase):\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 12 * 60 * 60)\n+            rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 12 * 60 * 60)\n+            rv.close()\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n         with app.test_request_context():\n             # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 3600)\n+            rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 3600)\n+            rv.close()\n         class StaticFileApp(flask.Flask):\n             def get_send_file_max_age(self, filename):\n                 return 10\n@@ -279,10 +293,12 @@ class SendfileTestCase(FlaskTestCase):\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 10)\n+            rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 10)\n+            rv.close()\n \n \n class LoggingTestCase(FlaskTestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8aaf3025864acbb803b652495d282bc5aa7a8128", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 877 | Contributors (this commit): 9 | Commits (past 90d): 14 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -158,6 +158,7 @@ class SendfileTestCase(FlaskTestCase):\n             self.assert_true(rv.direct_passthrough)\n             self.assert_equal(rv.mimetype, 'text/html')\n             with app.open_resource('static/index.html') as f:\n+                rv.direct_passthrough = False\n                 self.assert_equal(rv.data, f.read())\n             rv.close()\n \n@@ -179,6 +180,7 @@ class SendfileTestCase(FlaskTestCase):\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n+                rv.direct_passthrough = False\n                 with app.open_resource('static/index.html') as f:\n                     self.assert_equal(rv.data, f.read())\n                 self.assert_equal(rv.mimetype, 'text/html')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#51042f4c9f2c68a63ad5b8ee3000a52518a4b87b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 117 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -87,8 +87,9 @@ class AppContextTestCase(FlaskTestCase):\n             with flask._app_ctx_stack.top:\n                 with flask._request_ctx_stack.top:\n                     pass\n-            self.assert_true(flask._request_ctx_stack.request.environ\n+            self.assert_true(flask._request_ctx_stack.top.request.environ\n                 ['werkzeug.request'] is not None)\n+            return u''\n         c = app.test_client()\n         c.get('/')\n         self.assertEqual(called, ['request', 'app'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bbfef4c406506d89c662038c11c6c67bc97b67e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3254 | Contributors (this commit): 24 | Commits (past 90d): 11 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -1551,7 +1551,7 @@ class Flask(_PackageBoundObject):\n             # set the headers and status.  We do this because there can be\n             # some extra logic involved when creating these objects with\n             # specific values (like default content type selection).\n-            if isinstance(rv, string_types):\n+            if isinstance(rv, string_types + (bytes, )):\n                 rv = self.response_class(rv, headers=headers, status=status)\n                 headers = status = None\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#abc1505196ba3bc9517ec142ced7c1204c3ac21b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 44 | Churn Cumulative: 600 | Contributors (this commit): 7 | Commits (past 90d): 16 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -47,8 +47,6 @@ if not PY2:\n     encode_filename = _identity\n     get_next = lambda x: x.__next__\n \n-    from urllib.parse import urlparse\n-\n else:\n     unichr = unichr\n     text_type = unicode\n@@ -86,8 +84,6 @@ else:\n             return filename.encode('utf-8')\n         return filename\n \n-    from urlparse import urlparse\n-\n \n def with_metaclass(meta, *bases):\n     # This requires a bit of explanation: the basic idea is to make a\n\n@@ -8,10 +8,11 @@\n     :copyright: (c) 2012 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import io\n import uuid\n from datetime import datetime\n from .globals import current_app, request\n-from ._compat import text_type\n+from ._compat import text_type, PY2\n \n from werkzeug.http import http_date\n \n@@ -33,6 +34,20 @@ __all__ = ['dump', 'dumps', 'load', 'loads', 'htmlsafe_dump',\n            'jsonify']\n \n \n+def _wrap_reader_for_text(fp, encoding):\n+    if isinstance(fp.read(0), bytes):\n+        fp = io.TextIOWrapper(io.BufferedReader(fp), encoding)\n+    return fp\n+\n+\n+def _wrap_writer_for_text(fp, encoding):\n+    try:\n+        fp.write('')\n+    except TypeError:\n+        fp = io.TextIOWrapper(fp, encoding)\n+    return fp\n+\n+\n class JSONEncoder(_json.JSONEncoder):\n     \"\"\"The default Flask JSON encoder.  This one extends the default simplejson\n     encoder by also supporting ``datetime`` objects, ``UUID`` as well as\n@@ -100,13 +115,20 @@ def dumps(obj, **kwargs):\n     and can be overriden by the simplejson ``ensure_ascii`` parameter.\n     \"\"\"\n     _dump_arg_defaults(kwargs)\n-    return _json.dumps(obj, **kwargs)\n+    encoding = kwargs.pop('encoding', None)\n+    rv = _json.dumps(obj, **kwargs)\n+    if encoding is not None and isinstance(rv, text_type):\n+        rv = rv.encode(encoding)\n+    return rv\n \n \n def dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n     _dump_arg_defaults(kwargs)\n-    return _json.dump(obj, fp, **kwargs)\n+    encoding = kwargs.pop('encoding', None)\n+    if encoding is not None:\n+        fp = _wrap_writer_for_text(fp, encoding)\n+    _json.dump(obj, fp, **kwargs)\n \n \n def loads(s, **kwargs):\n@@ -115,6 +137,8 @@ def loads(s, **kwargs):\n     application on the stack.\n     \"\"\"\n     _load_arg_defaults(kwargs)\n+    if isinstance(s, bytes):\n+        s = s.decode(kwargs.pop('encoding', None) or 'utf-8')\n     return _json.loads(s, **kwargs)\n \n \n@@ -122,6 +146,8 @@ def load(fp, **kwargs):\n     \"\"\"Like :func:`loads` but reads from a file object.\n     \"\"\"\n     _load_arg_defaults(kwargs)\n+    if not PY2:\n+        fp = _wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')\n     return _json.load(fp, **kwargs)\n \n \n\n@@ -13,7 +13,11 @@\n from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n-from ._compat import urlparse\n+\n+try:\n+    from werkzeug.urls import url_parse\n+except ImportError:\n+    from urlparse import urlsplit as url_parse\n \n \n def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n@@ -21,7 +25,7 @@ def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n     http_host = app.config.get('SERVER_NAME')\n     app_root = app.config.get('APPLICATION_ROOT')\n     if base_url is None:\n-        url = urlparse(path)\n+        url = url_parse(path)\n         base_url = 'http://%s/' % (url.netloc or http_host or 'localhost')\n         if app_root:\n             base_url += app_root.lstrip('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#90e3906d02780c47e813649b1e282bfd279d7cb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 3954 | Contributors (this commit): 11 | Commits (past 90d): 43 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -513,7 +513,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             # test that all teardown_requests get passed the same original\n             # exception.\n             try:\n-                raise TypeError\n+                raise TypeError()\n             except:\n                 pass\n         @app.teardown_request\n@@ -524,7 +524,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             # test that all teardown_requests get passed the same original\n             # exception.\n             try:\n-                raise TypeError\n+                raise TypeError()\n             except:\n                 pass\n         @app.route('/')\n@@ -1098,7 +1098,9 @@ class SubdomainTestCase(FlaskTestCase):\n         app.register_module(mod)\n         c = app.test_client()\n         rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n+        rv.direct_passthrough = False\n         self.assert_equal(rv.data.strip(), b'Hello Subdomain')\n+        rv.close()\n \n     def test_subdomain_matching(self):\n         app = flask.Flask(__name__)\n\n@@ -371,6 +371,7 @@ class BlueprintTestCase(FlaskTestCase):\n             rv = c.get('/admin/static/css/test.css')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, expected_max_age)\n+            rv.close()\n         finally:\n             app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n\n@@ -206,6 +206,7 @@ class SendfileTestCase(FlaskTestCase):\n             with catch_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n+                rv.direct_passthrough = False\n                 self.assert_equal(rv.data, b'Test')\n                 self.assert_equal(rv.mimetype, 'application/octet-stream')\n                 rv.close()\n@@ -214,6 +215,7 @@ class SendfileTestCase(FlaskTestCase):\n             with catch_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f, mimetype='text/plain')\n+                rv.direct_passthrough = False\n                 self.assert_equal(rv.data, b'Test')\n                 self.assert_equal(rv.mimetype, 'text/plain')\n                 rv.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f1918093ac70d589a4d67af0d77140734c06c13d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 33 | Churn Cumulative: 3826 | Contributors (this commit): 27 | Commits (past 90d): 18 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1510,6 +1510,16 @@ class Flask(_PackageBoundObject):\n         rv.allow.update(methods)\n         return rv\n \n+    def should_ignore_error(self, error):\n+        \"\"\"This is called to figure out if an error should be ignored\n+        or not as far as the teardown system is concerned.  If this\n+        function returns `True` then the teardown handlers will not be\n+        passed the error.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        return False\n+\n     def make_response(self, rv):\n         \"\"\"Converts the return value from a view function to a real\n         response object that is an instance of :attr:`response_class`.\n@@ -1790,12 +1800,20 @@ class Flask(_PackageBoundObject):\n                                a list of headers and an optional\n                                exception context to start the response\n         \"\"\"\n-        with self.request_context(environ):\n+        ctx = self.request_context(environ)\n+        ctx.push()\n+        error = None\n+        try:\n             try:\n                 response = self.full_dispatch_request()\n             except Exception as e:\n+                error = e\n                 response = self.make_response(self.handle_exception(e))\n             return response(environ, start_response)\n+        finally:\n+            if self.should_ignore_error(error):\n+                error = None\n+            ctx.auto_pop(error)\n \n     @property\n     def modules(self):\n\n@@ -352,6 +352,13 @@ class RequestContext(object):\n         if app_ctx is not None:\n             app_ctx.pop(exc)\n \n+    def auto_pop(self, exc):\n+        if self.request.environ.get('flask._preserve_context') or \\\n+           (exc is not None and self.app.preserve_context_on_exception):\n+            self.preserved = True\n+        else:\n+            self.pop(exc)\n+\n     def __enter__(self):\n         self.push()\n         return self\n@@ -362,11 +369,7 @@ class RequestContext(object):\n         # access the request object in the interactive shell.  Furthermore\n         # the context can be force kept alive for the test client.\n         # See flask.testing for how this works.\n-        if self.request.environ.get('flask._preserve_context') or \\\n-           (tb is not None and self.app.preserve_context_on_exception):\n-            self.preserved = True\n-        else:\n-            self.pop(exc_value)\n+        self.auto_pop(exc_value)\n \n     def __repr__(self):\n         return '<%s \\'%s\\' [%s] of %s>' % (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e07dcb5562c336975e31ce014aa33d2ab1f5ac98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 182 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -121,7 +121,10 @@ class ExtImportHookTestCase(FlaskTestCase):\n             self.assert_true(tb.tb_frame.f_globals is globals())\n \n             # reraise() adds a second frame so we need to skip that one too.\n+            # On PY3 we even have another one :(\n             next = tb.tb_next.tb_next\n+            if not PY2:\n+                next = next.tb_next\n             self.assert_in('flask_broken/__init__.py', next.tb_frame.f_code.co_filename)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3d9055b3b73b1d09f933bfd070f704e9e8bdff2a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 3534 | Contributors (this commit): 26 | Commits (past 90d): 22 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -290,7 +290,8 @@ class Flask(_PackageBoundObject):\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n         'PREFERRED_URL_SCHEME':                 'http',\n-        'JSON_AS_ASCII':                        True\n+        'JSON_AS_ASCII':                        True,\n+        'JSONIFY_PRETTYPRINT_REGULAR':          True,\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n\n@@ -194,8 +194,16 @@ def jsonify(*args, **kwargs):\n     For security reasons only objects are supported toplevel.  For more\n     information about this, have a look at :ref:`json-security`.\n \n+    This function's response will be pretty printed if it was not requested\n+    with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless\n+    the ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to false.\n+\n     .. versionadded:: 0.2\n     \"\"\"\n+    indent = None\n+    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] \\\n+        and not request.is_xhr:\n+        indent = 2\n     return current_app.response_class(dumps(dict(*args, **kwargs),\n-        indent=None if request.is_xhr else 2),\n+        indent=indent),\n         mimetype='application/json')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#77d293cf49e586f03fbea96d0bae237bc7ed230f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 43 | Churn Cumulative: 4456 | Contributors (this commit): 31 | Commits (past 90d): 40 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -291,6 +291,7 @@ class Flask(_PackageBoundObject):\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n         'PREFERRED_URL_SCHEME':                 'http',\n         'JSON_AS_ASCII':                        True,\n+        'JSON_SORT_KEYS':                       True,\n         'JSONIFY_PRETTYPRINT_REGULAR':          True,\n     })\n \n\n@@ -92,10 +92,12 @@ class JSONDecoder(_json.JSONDecoder):\n \n def _dump_arg_defaults(kwargs):\n     \"\"\"Inject default arguments for dump functions.\"\"\"\n+    kwargs.setdefault('sort_keys', True)\n     if current_app:\n         kwargs.setdefault('cls', current_app.json_encoder)\n         if not current_app.config['JSON_AS_ASCII']:\n             kwargs.setdefault('ensure_ascii', False)\n+        kwargs.setdefault('sort_keys', current_app.config['JSON_SORT_KEYS'])\n \n \n def _load_arg_defaults(kwargs):\n\n@@ -148,6 +148,46 @@ class JSONTestCase(FlaskTestCase):\n     if not has_encoding('euc-kr'):\n         test_modified_url_encoding = None\n \n+    def test_json_key_sorting(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        self.assert_equal(app.config['JSON_SORT_KEYS'], True)\n+        d = dict.fromkeys(range(20), 'foo')\n+\n+        @app.route('/')\n+        def index():\n+            return flask.jsonify(values=d)\n+\n+        c = app.test_client()\n+        rv = c.get('/')\n+        lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n+        self.assert_equal(lines, [\n+            '{',\n+            '\"values\": {',\n+            '\"0\": \"foo\",',\n+            '\"1\": \"foo\",',\n+            '\"2\": \"foo\",',\n+            '\"3\": \"foo\",',\n+            '\"4\": \"foo\",',\n+            '\"5\": \"foo\",',\n+            '\"6\": \"foo\",',\n+            '\"7\": \"foo\",',\n+            '\"8\": \"foo\",',\n+            '\"9\": \"foo\",',\n+            '\"10\": \"foo\",',\n+            '\"11\": \"foo\",',\n+            '\"12\": \"foo\",',\n+            '\"13\": \"foo\",',\n+            '\"14\": \"foo\",',\n+            '\"15\": \"foo\",',\n+            '\"16\": \"foo\",',\n+            '\"17\": \"foo\",',\n+            '\"18\": \"foo\",',\n+            '\"19\": \"foo\"',\n+            '}',\n+            '}'\n+        ])\n+\n \n class SendfileTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c629f69e698fd815969e91e5c8c59323c61a256c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 265 | Contributors (this commit): 4 | Commits (past 90d): 11 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -92,18 +92,22 @@ class JSONDecoder(_json.JSONDecoder):\n \n def _dump_arg_defaults(kwargs):\n     \"\"\"Inject default arguments for dump functions.\"\"\"\n-    kwargs.setdefault('sort_keys', True)\n     if current_app:\n         kwargs.setdefault('cls', current_app.json_encoder)\n         if not current_app.config['JSON_AS_ASCII']:\n             kwargs.setdefault('ensure_ascii', False)\n         kwargs.setdefault('sort_keys', current_app.config['JSON_SORT_KEYS'])\n+    else:\n+        kwargs.setdefault('sort_keys', True)\n+        kwargs.setdefault('cls', JSONEncoder)\n \n \n def _load_arg_defaults(kwargs):\n     \"\"\"Inject default arguments for load functions.\"\"\"\n     if current_app:\n         kwargs.setdefault('cls', current_app.json_decoder)\n+    else:\n+        kwargs.setdefault('cls', JSONDecoder)\n \n \n def dumps(obj, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0190b770a1e3339c2cd96e6a44f44083aeeebb54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 43 | Files Changed: 3 | Hunks: 16 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 51 | Churn Cumulative: 2715 | Contributors (this commit): 27 | Commits (past 90d): 33 | Contributors (cumulative): 37 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,13 +13,10 @@\n import sys\n \n PY2 = sys.version_info[0] == 2\n-PYPY = hasattr(sys, 'pypy_translation_info')\n _identity = lambda x: x\n \n \n if not PY2:\n-    unichr = chr\n-    range_type = range\n     text_type = str\n     string_types = (str,)\n     integer_types = (int, )\n@@ -28,29 +25,17 @@ if not PY2:\n     itervalues = lambda d: iter(d.values())\n     iteritems = lambda d: iter(d.items())\n \n-    import pickle\n-    from io import BytesIO, StringIO\n-    NativeStringIO = StringIO\n+    from io import StringIO\n \n     def reraise(tp, value, tb=None):\n         if value.__traceback__ is not tb:\n             raise value.with_traceback(tb)\n         raise value\n \n-    ifilter = filter\n-    imap = map\n-    izip = zip\n-    intern = sys.intern\n-\n-    implements_iterator = _identity\n     implements_to_string = _identity\n-    encode_filename = _identity\n-    get_next = lambda x: x.__next__\n \n else:\n-    unichr = unichr\n     text_type = unicode\n-    range_type = xrange\n     string_types = (str, unicode)\n     integer_types = (int, long)\n \n@@ -58,32 +43,15 @@ else:\n     itervalues = lambda d: d.itervalues()\n     iteritems = lambda d: d.iteritems()\n \n-    import cPickle as pickle\n-    from cStringIO import StringIO as BytesIO, StringIO\n-    NativeStringIO = BytesIO\n+    from cStringIO import StringIO as StringIO\n \n     exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n \n-    from itertools import imap, izip, ifilter\n-    intern = intern\n-\n-    def implements_iterator(cls):\n-        cls.next = cls.__next__\n-        del cls.__next__\n-        return cls\n-\n     def implements_to_string(cls):\n         cls.__unicode__ = cls.__str__\n         cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n         return cls\n \n-    get_next = lambda x: x.next\n-\n-    def encode_filename(filename):\n-        if isinstance(filename, unicode):\n-            return filename.encode('utf-8')\n-        return filename\n-\n \n def with_metaclass(meta, *bases):\n     # This requires a bit of explanation: the basic idea is to make a\n@@ -103,9 +71,3 @@ def with_metaclass(meta, *bases):\n                 return type.__new__(cls, name, (), d)\n             return meta(name, bases, d)\n     return metaclass('temporary_class', None, {})\n-\n-\n-try:\n-    from urllib.parse import quote_from_bytes as url_quote\n-except ImportError:\n-    from urllib import quote as url_quote\n\n@@ -18,9 +18,12 @@ from time import time\n from zlib import adler32\n from threading import RLock\n from werkzeug.routing import BuildError\n-from werkzeug.urls import url_quote\n from functools import update_wrapper\n \n+try:\n+    from werkzeug.urls import url_quote\n+except ImportError:\n+    from urlparse import quote as url_quote\n \n from werkzeug.datastructures import Headers\n from werkzeug.exceptions import NotFound\n\n@@ -15,7 +15,7 @@ import unittest\n from logging import StreamHandler\n from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n-from flask._compat import StringIO, text_type, implements_iterator\n+from flask._compat import StringIO, text_type\n \n \n def has_encoding(name):\n@@ -546,7 +546,6 @@ class StreamingTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         app.testing = True\n         called = []\n-        @implements_iterator\n         class Wrapper(object):\n             def __init__(self, gen):\n                 self._gen = gen\n@@ -556,6 +555,7 @@ class StreamingTestCase(FlaskTestCase):\n                 called.append(42)\n             def __next__(self):\n                 return next(self._gen)\n+            next = __next__\n         @app.route('/')\n         def index():\n             def generate():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6dfe9332606a497a1931f9cad4a150f2866e3cda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 173 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ else:\n     itervalues = lambda d: d.itervalues()\n     iteritems = lambda d: d.iteritems()\n \n-    from cStringIO import StringIO as StringIO\n+    from cStringIO import StringIO\n \n     exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1b40b3b573f5d98cf9fbc453305cd535c0b2578d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 57 | Churn Cumulative: 5989 | Contributors (this commit): 29 | Commits (past 90d): 40 | Contributors (cumulative): 39 | DMM Complexity: 0.5454545454545454\n\nDIFF:\n@@ -1707,6 +1707,13 @@ class Flask(_PackageBoundObject):\n             rv = func(exc)\n         request_tearing_down.send(self, exc=exc)\n \n+        # If this interpreter supports clearing the exception information\n+        # we do that now.  This will only go into effect on Python 2.x,\n+        # on 3.x it disappears automatically at the end of the exception\n+        # stack.\n+        if hasattr(sys, 'exc_clear'):\n+            sys.exc_clear()\n+\n     def do_teardown_appcontext(self, exc=None):\n         \"\"\"Called when an application context is popped.  This works pretty\n         much the same as :meth:`do_teardown_request` but for the application\n\n@@ -235,6 +235,10 @@ class RequestContext(object):\n         # is pushed the preserved context is popped.\n         self.preserved = False\n \n+        # remembers the exception for pop if there is one in case the context\n+        # preservation kicks in.\n+        self._preserved_exc = None\n+\n         # Functions that should be executed after the request on the response\n         # object.  These will be called before the regular \"after_request\"\n         # functions.\n@@ -296,7 +300,7 @@ class RequestContext(object):\n         # functionality is not active in production environments.\n         top = _request_ctx_stack.top\n         if top is not None and top.preserved:\n-            top.pop()\n+            top.pop(top._preserved_exc)\n \n         # Before we push the request context we have to ensure that there\n         # is an application context.\n@@ -331,9 +335,18 @@ class RequestContext(object):\n         clear_request = False\n         if not self._implicit_app_ctx_stack:\n             self.preserved = False\n+            self._preserved_exc = None\n             if exc is None:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_request(exc)\n+\n+            # If this interpreter supports clearing the exception information\n+            # we do that now.  This will only go into effect on Python 2.x,\n+            # on 3.x it disappears automatically at the end of the exception\n+            # stack.\n+            if hasattr(sys, 'exc_clear'):\n+                sys.exc_clear()\n+\n             request_close = getattr(self.request, 'close', None)\n             if request_close is not None:\n                 request_close()\n@@ -356,6 +369,7 @@ class RequestContext(object):\n         if self.request.environ.get('flask._preserve_context') or \\\n            (exc is not None and self.app.preserve_context_on_exception):\n             self.preserved = True\n+            self._preserved_exc = exc\n         else:\n             self.pop(exc)\n \n\n@@ -1070,6 +1070,40 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_true(flask._request_ctx_stack.top is None)\n         self.assert_true(flask._app_ctx_stack.top is None)\n \n+    def test_preserve_remembers_exception(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        errors = []\n+\n+        @app.route('/fail')\n+        def fail_func():\n+            1 // 0\n+\n+        @app.route('/success')\n+        def success_func():\n+            return 'Okay'\n+\n+        @app.teardown_request\n+        def teardown_handler(exc):\n+            errors.append(exc)\n+\n+        c = app.test_client()\n+\n+        # After this failure we did not yet call the teardown handler\n+        with self.assert_raises(ZeroDivisionError):\n+            c.get('/fail')\n+        self.assert_equal(errors, [])\n+\n+        # But this request triggers it, and it's an error\n+        c.get('/success')\n+        self.assert_equal(len(errors), 2)\n+        self.assert_true(isinstance(errors[0], ZeroDivisionError))\n+\n+        # At this point another request does nothing.\n+        c.get('/success')\n+        self.assert_equal(len(errors), 3)\n+        self.assert_equal(errors[1], None)\n+\n \n class SubdomainTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#56d3b74488346a03b74fb4a9fd633cc5f79191d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 2148 | Contributors (this commit): 7 | Commits (past 90d): 19 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -963,6 +963,18 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         expected = '/login'\n         self.assert_equal(url, expected)\n \n+    def test_nonascii_pathinfo(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        @app.route(u'/киртест')\n+        def index():\n+            return 'Hello World!'\n+\n+        c = app.test_client()\n+        rv = c.get(u'/киртест')\n+        self.assert_equal(rv.data, b'Hello World!')\n+\n     def test_debug_mode_complains_after_first_request(self):\n         app = flask.Flask(__name__)\n         app.debug = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef72b78042d7feffc864e7f2da3f62835fc63ee8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 21 | Files Changed: 3 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 53 | Churn Cumulative: 4526 | Contributors (this commit): 31 | Commits (past 90d): 46 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -659,7 +659,7 @@ class Flask(_PackageBoundObject):\n             session=session,\n             g=g\n         )\n-        rv.filters['tojson'] = json.htmlsafe_dumps\n+        rv.filters['tojson'] = json.tojson_filter\n         return rv\n \n     def create_global_jinja_loader(self):\n@@ -1707,13 +1707,6 @@ class Flask(_PackageBoundObject):\n             rv = func(exc)\n         request_tearing_down.send(self, exc=exc)\n \n-        # If this interpreter supports clearing the exception information\n-        # we do that now.  This will only go into effect on Python 2.x,\n-        # on 3.x it disappears automatically at the end of the exception\n-        # stack.\n-        if hasattr(sys, 'exc_clear'):\n-            sys.exc_clear()\n-\n     def do_teardown_appcontext(self, exc=None):\n         \"\"\"Called when an application context is popped.  This works pretty\n         much the same as :meth:`do_teardown_request` but for the application\n\n@@ -15,6 +15,7 @@ from .globals import current_app, request\n from ._compat import text_type, PY2\n \n from werkzeug.http import http_date\n+from jinja2 import Markup\n \n # Use the same json implementation as itsdangerous on which we\n # depend anyways.\n@@ -160,18 +161,26 @@ def load(fp, **kwargs):\n def htmlsafe_dumps(obj, **kwargs):\n     \"\"\"Works exactly like :func:`dumps` but is safe for use in ``<script>``\n     tags.  It accepts the same arguments and returns a JSON string.  Note that\n-    this is available in templates through the ``|tojson`` filter but it will\n-    have to be wrapped in ``|safe`` unless **true** XHTML is being used.\n+    this is available in templates through the ``|tojson`` filter which will\n+    also mark the result as safe.  Due to how this function escapes certain\n+    characters this is safe even if used outside of ``<script>`` tags.\n+\n+    .. versionchanged:: 0.10\n+       This function's return value is now always safe for HTML usage, even\n+       if outside of script tags or if used in XHTML.\n     \"\"\"\n-    rv = dumps(obj, **kwargs)\n-    if _slash_escape:\n-        rv = rv.replace('/', '\\\\/')\n-    return rv.replace('<!', '<\\\\u0021')\n+    rv = dumps(obj, **kwargs) \\\n+        .replace(u'<', u'\\\\u003c') \\\n+        .replace(u'>', u'\\\\u003e') \\\n+        .replace(u'&', u'\\\\u0026')\n+    if not _slash_escape:\n+        rv = rv.replace('\\\\/', '/')\n+    return rv\n \n \n def htmlsafe_dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`htmlsafe_dumps` but writes into a file object.\"\"\"\n-    fp.write(htmlsafe_dumps(obj, **kwargs))\n+    fp.write(unicode(htmlsafe_dumps(obj, **kwargs)))\n \n \n def jsonify(*args, **kwargs):\n@@ -213,3 +222,7 @@ def jsonify(*args, **kwargs):\n     return current_app.response_class(dumps(dict(*args, **kwargs),\n         indent=indent),\n         mimetype='application/json')\n+\n+\n+def tojson_filter(obj, **kwargs):\n+    return Markup(htmlsafe_dumps(obj, **kwargs))\n\n@@ -92,12 +92,17 @@ class JSONTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         render = flask.render_template_string\n         with app.test_request_context():\n-            rv = render('{{ \"</script>\"|tojson|safe }}')\n-            self.assert_equal(rv, '\"<\\\\/script>\"')\n-            rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n-            self.assert_equal(rv, '\"<\\\\u0000\\\\/script>\"')\n-            rv = render('{{ \"<!--<script>\"|tojson|safe }}')\n-            self.assert_equal(rv, '\"<\\\\u0021--<script>\"')\n+            rv = flask.json.htmlsafe_dumps('</script>')\n+            self.assert_equal(rv, u'\"\\\\u003c/script\\\\u003e\"')\n+            self.assert_equal(type(rv), text_type)\n+            rv = render('{{ \"</script>\"|tojson }}')\n+            self.assert_equal(rv, '\"\\\\u003c/script\\\\u003e\"')\n+            rv = render('{{ \"<\\0/script>\"|tojson }}')\n+            self.assert_equal(rv, '\"\\\\u003c\\\\u0000/script\\\\u003e\"')\n+            rv = render('{{ \"<!--<script>\"|tojson }}')\n+            self.assert_equal(rv, '\"\\\\u003c!--\\\\u003cscript\\\\u003e\"')\n+            rv = render('{{ \"&\"|tojson }}')\n+            self.assert_equal(rv, '\"\\\\u0026\"')\n \n     def test_json_customization(self):\n         class X(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
