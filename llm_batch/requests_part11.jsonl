{"custom_id": "requests#e7e395549f8b60777f00c244dabd2bd9f89271b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 8 | Churn Cumulative: 923 | Contributors (this commit): 8 | Commits (past 90d): 40 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -21,3 +21,6 @@ class URLRequired(RequestException):\n \n class InvalidMethod(RequestException):\n     \"\"\"An inappropriate method was attempted.\"\"\"\n+\n+class TooManyRedirects(RequestException):\n+    \"\"\"Too many redirects.\"\"\"\n\n@@ -20,7 +20,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicA\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod\n+from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod, TooManyRedirects\n \n \n REDIRECT_STATI = (301, 302, 303, 307)\n@@ -192,6 +192,9 @@ class Request(object):\n                 (self.allow_redirects))\n             ):\n \n+                if not len(history) < 30:\n+                    raise TooManyRedirects()\n+\n                 history.append(r)\n \n                 url = r.headers['location']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cf94c96a68904b0c541425bb2eb0ee816d6a4e4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 897 | Contributors (this commit): 8 | Commits (past 90d): 38 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -192,6 +192,8 @@ class Request(object):\n                 (self.allow_redirects))\n             ):\n \n+                r.close()\n+\n                 history.append(r)\n \n                 url = r.headers['location']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a987729712c3fa150fc86550495f6ed2aff4bfc0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 724 | Contributors (this commit): 10 | Commits (past 90d): 26 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -324,15 +324,18 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(rbody.get('form'), None)\n         self.assertEquals(rbody.get('data'), 'foobar')\n \n+\n     def test_idna(self):\n         r = requests.get(u'http://➡.ws/httpbin')\n         assert 'httpbin' in r.url\n \n+\n     def test_urlencoded_get_query_multivalued_param(self):\n         r = requests.get(httpbin('get'), params=dict(test=['foo','baz']))\n         self.assertEquals(r.status_code, 200)\n         self.assertEquals(r.url, httpbin('get?test=foo&test=baz'))\n \n+\n     def test_urlencoded_post_querystring_multivalued(self):\n         r = requests.post(httpbin('post'), params=dict(test=['foo','baz']))\n         self.assertEquals(r.status_code, 200)\n@@ -342,6 +345,7 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(rbody.get('form'), {}) # No form supplied\n         self.assertEquals(rbody.get('data'), '')\n \n+\n     def test_urlencoded_post_query_multivalued_and_data(self):\n         r = requests.post(httpbin('post'), params=dict(test=['foo','baz']),\n                           data=dict(test2=\"foobar\",test3=['foo','baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bb16fe8115420f9ff40faed039f79ec57e4f4323", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 116 | Lines Deleted: 35 | Files Changed: 1 | Hunks: 39 | Methods Changed: 19 | Complexity Δ (Sum/Max): 18/18 | Churn Δ: 151 | Churn Cumulative: 875 | Contributors (this commit): 10 | Commits (past 90d): 27 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,6 +34,9 @@ def httpsbin(*suffix):\n     return HTTPSBIN_URL + '/'.join(suffix)\n \n \n+SERVICES = (httpbin, httpsbin)\n+\n+\n \n class RequestsTestSuite(unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n@@ -129,8 +132,11 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_AUTH_HTTPS_200_OK_GET(self):\n+\n+        for service in SERVICES:\n+\n             auth = ('user', 'pass')\n-        url = httpsbin('basic-auth', 'user', 'pass')\n+            url = service('basic-auth', 'user', 'pass')\n             r = requests.get(url, auth=auth)\n \n             self.assertEqual(r.status_code, 200)\n@@ -143,7 +149,10 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_POSTBIN_GET_POST_FILES(self):\n-        url = httpbin('post')\n+\n+        for service in SERVICES:\n+\n+            url = service('post')\n             post = requests.post(url).raise_for_status()\n \n             post = requests.post(url, data={'some': 'data'})\n@@ -158,31 +167,45 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n \n-        url = httpbin('post')\n-        post = requests.post(url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n+        for service in SERVICES:\n+\n+            url = service('post')\n+            post = requests.post(url,\n+                files={'some': open('test_requests.py')},\n+                data={'some': 'data'})\n+\n             self.assertEqual(post.status_code, 200)\n \n \n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n \n-        url = httpbin('post')\n+        for service in SERVICES:\n \n-        post2 = requests.post(url, files={'some': open('test_requests.py')},\n+            url = service('post')\n+\n+            post2 = requests.post(url,\n+                files={'some': open('test_requests.py')},\n                 headers = {'User-Agent': 'requests-tests'})\n \n             self.assertEqual(post2.status_code, 200)\n \n \n     def test_nonzero_evaluation(self):\n-        r = requests.get(httpbin('status', '500'))\n+\n+        for service in SERVICES:\n+\n+            r = requests.get(service('status', '500'))\n             self.assertEqual(bool(r), False)\n \n-        r = requests.get(httpbin('/'))\n+            r = requests.get(service('/'))\n             self.assertEqual(bool(r), True)\n \n \n     def test_request_ok_set(self):\n-        r = requests.get(httpbin('status', '404'))\n+\n+        for service in SERVICES:\n+\n+            r = requests.get(service('status', '404'))\n             self.assertEqual(r.ok, False)\n \n \n@@ -230,21 +253,31 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(r.status_code, 200)\n \n \n+        requests.auth_manager.add_auth('httpbin.ep.io', http_auth)\n+\n+        r = requests.get(httpsbin('basic-auth', 'user', 'pass'))\n+        self.assertEquals(r.status_code, 200)\n+\n+\n     def test_unicode_get(self):\n \n-        url = httpbin('/')\n+        for service in SERVICES:\n+\n+            url = service('/')\n \n             requests.get(url, params={'foo': u'føø'})\n             requests.get(url, params={u'føø': u'føø'})\n             requests.get(url, params={'føø': 'føø'})\n             requests.get(url, params={'foo': u'foo'})\n-        requests.get(httpbin('ø'), params={'foo': u'foo'})\n+            requests.get(service('ø'), params={'foo': u'foo'})\n \n \n     def test_httpauth_recursion(self):\n+\n         http_auth = ('user', 'BADpass')\n \n-        r = requests.get(httpbin('basic-auth', 'user', 'pass'), auth=http_auth)\n+        for service in SERVICES:\n+            r = requests.get(service('basic-auth', 'user', 'pass'), auth=http_auth)\n             self.assertEquals(r.status_code, 401)\n \n \n@@ -262,20 +295,31 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_urlencoded_post_data(self):\n-        r = requests.post(httpbin('post'), data=dict(test='fooaowpeuf'))\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'), data=dict(test='fooaowpeuf'))\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post'))\n+            self.assertEquals(r.url, service('post'))\n+\n             rbody = json.loads(r.content)\n+\n             self.assertEquals(rbody.get('form'), dict(test='fooaowpeuf'))\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_nonurlencoded_post_data(self):\n-        r = requests.post(httpbin('post'), data='fooaowpeuf')\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'), data='fooaowpeuf')\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post'))\n+            self.assertEquals(r.url, service('post'))\n+\n             rbody = json.loads(r.content)\n             # Body wasn't valid url encoded data, so the server returns None as\n             # \"form\" and the raw body as \"data\".\n@@ -284,43 +328,66 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_urlencoded_post_querystring(self):\n-        r = requests.post(httpbin('post'), params=dict(test='fooaowpeuf'))\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'), params=dict(test='fooaowpeuf'))\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?test=fooaowpeuf'))\n+            self.assertEquals(r.url, service('post?test=fooaowpeuf'))\n+\n             rbody = json.loads(r.content)\n             self.assertEquals(rbody.get('form'), {}) # No form supplied\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_nonurlencoded_post_querystring(self):\n-        r = requests.post(httpbin('post'), params='fooaowpeuf')\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'), params='fooaowpeuf')\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?fooaowpeuf'))\n+            self.assertEquals(r.url, service('post?fooaowpeuf'))\n+\n             rbody = json.loads(r.content)\n             self.assertEquals(rbody.get('form'), {}) # No form supplied\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_urlencoded_post_query_and_data(self):\n-        r = requests.post(httpbin('post'), params=dict(test='fooaowpeuf'),\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(\n+                service('post'),\n+                params=dict(test='fooaowpeuf'),\n                 data=dict(test2=\"foobar\"))\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?test=fooaowpeuf'))\n+            self.assertEquals(r.url, service('post?test=fooaowpeuf'))\n+\n             rbody = json.loads(r.content)\n             self.assertEquals(rbody.get('form'), dict(test2='foobar'))\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_nonurlencoded_post_query_and_data(self):\n-        r = requests.post(httpbin('post'), params='fooaowpeuf',\n-                          data=\"foobar\")\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'),\n+                params='fooaowpeuf', data=\"foobar\")\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?fooaowpeuf'))\n+            self.assertEquals(r.url, service('post?fooaowpeuf'))\n+\n             rbody = json.loads(r.content)\n+\n             self.assertEquals(rbody.get('form'), None)\n             self.assertEquals(rbody.get('data'), 'foobar')\n \n@@ -331,40 +398,54 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_urlencoded_get_query_multivalued_param(self):\n-        r = requests.get(httpbin('get'), params=dict(test=['foo','baz']))\n+\n+        for service in SERVICES:\n+\n+            r = requests.get(service('get'), params=dict(test=['foo','baz']))\n             self.assertEquals(r.status_code, 200)\n-        self.assertEquals(r.url, httpbin('get?test=foo&test=baz'))\n+            self.assertEquals(r.url, service('get?test=foo&test=baz'))\n \n \n     def test_urlencoded_post_querystring_multivalued(self):\n-        r = requests.post(httpbin('post'), params=dict(test=['foo','baz']))\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(service('post'), params=dict(test=['foo','baz']))\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?test=foo&test=baz'))\n+            self.assertEquals(r.url, service('post?test=foo&test=baz'))\n+\n             rbody = json.loads(r.content)\n             self.assertEquals(rbody.get('form'), {}) # No form supplied\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_urlencoded_post_query_multivalued_and_data(self):\n-        r = requests.post(httpbin('post'), params=dict(test=['foo','baz']),\n+\n+        for service in SERVICES:\n+\n+            r = requests.post(\n+                service('post'),\n+                params=dict(test=['foo','baz']),\n                 data=dict(test2=\"foobar\",test3=['foo','baz']))\n+\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-        self.assertEquals(r.url, httpbin('post?test=foo&test=baz'))\n+            self.assertEquals(r.url, service('post?test=foo&test=baz'))\n             rbody = json.loads(r.content)\n             self.assertEquals(rbody.get('form'), dict(test2='foobar',test3='foo'))\n             self.assertEquals(rbody.get('data'), '')\n \n \n     def test_redirect_history(self):\n-        r = requests.get(httpbin('redirect', '3'))\n+\n+        for service in SERVICES:\n+\n+            r = requests.get(service('redirect', '3'))\n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(len(r.history), 3)\n \n-        r = requests.get(httpsbin('redirect', '3'))\n-        self.assertEquals(r.status_code, 200)\n-        self.assertEquals(len(r.history), 3)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b141da36a45f64a717e78e7a2091b6680f015104", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 883 | Contributors (this commit): 10 | Commits (past 90d): 28 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -446,6 +446,14 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(len(r.history), 3)\n \n \n+    def test_relative_redirect_history(self):\n+\n+        for service in SERVICES:\n+\n+            r = requests.get(service('relative-redirect', '3'))\n+            self.assertEquals(r.status_code, 200)\n+            self.assertEquals(len(r.history), 3)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5693314a37ff8815c3c6a4bb7b9ebd5ef1abb5b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 10 | Churn Cumulative: 907 | Contributors (this commit): 8 | Commits (past 90d): 34 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -158,7 +158,7 @@ class Request(object):\n         return opener.open\n \n \n-    def _build_response(self, resp):\n+    def _build_response(self, resp, is_error=False):\n         \"\"\"Build internal :class:`Response <models.Response>` object from given response.\"\"\"\n \n         def build(resp):\n@@ -173,6 +173,9 @@ class Request(object):\n             except AttributeError:\n                 pass\n \n+            if is_error:\n+                response.error = resp\n+\n             response.url = getattr(resp, 'url', None)\n \n             return response\n@@ -312,9 +315,8 @@ class Request(object):\n                     if isinstance(why.reason, socket.timeout):\n                         why = Timeout(why)\n \n-                self._build_response(why)\n-                if not self.redirect:\n-                    self.response.error = why\n+                self._build_response(why, is_error=True)\n+\n \n             else:\n                 self._build_response(resp)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#629d730da606110f2adcf46a16b7a73b829fa159", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 37 | Files Changed: 1 | Hunks: 12 | Methods Changed: 12 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 49 | Churn Cumulative: 418 | Contributors (this commit): 5 | Commits (past 90d): 18 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -55,9 +55,7 @@ def request(method, url,\n     return r.response\n \n \n-def get(url,\n-    params=None, headers=None, cookies=None, auth=None, timeout=None,\n-    proxies=None):\n+def get(url, **kwargs):\n \n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n@@ -70,14 +68,10 @@ def get(url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('GET', url,\n-        params=params, headers=headers, cookies=cookies, auth=auth,\n-        timeout=timeout, proxies=proxies)\n+    return request('GET', url, **kwargs)\n \n \n-def head(url,\n-    params=None, headers=None, cookies=None, auth=None, timeout=None,\n-    proxies=None):\n+def head(url, **kwargs):\n \n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n@@ -90,14 +84,10 @@ def head(url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('HEAD', url,\n-        params=params, headers=headers, cookies=cookies, auth=auth,\n-        timeout=timeout, proxies=proxies)\n+    return request('HEAD', url, **kwargs)\n \n \n-def post(url,\n-    data='', headers=None, files=None, cookies=None, auth=None, timeout=None,\n-    allow_redirects=False, params=None, proxies=None):\n+def post(url, data='', **kwargs):\n \n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n@@ -113,14 +103,10 @@ def post(url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('POST', url,\n-        params=params, data=data, headers=headers, files=files,\n-        cookies=cookies, auth=auth, timeout=timeout,\n-        allow_redirects=allow_redirects, proxies=proxies)\n+    return request('POST', url, data=data, **kwargs)\n \n \n-def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n-        timeout=None, allow_redirects=False, params=None, proxies=None):\n+def put(url, data='', **kwargs):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -135,14 +121,10 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('PUT', url,\n-        params=params, data=data, headers=headers, files=files,\n-        cookies=cookies, auth=auth, timeout=timeout,\n-        allow_redirects=allow_redirects, proxies=proxies)\n+    return request('PUT', url, data=data, **kwargs)\n \n \n-def patch(url, data='', headers=None, files=None, cookies=None, auth=None,\n-        timeout=None, allow_redirects=False, params=None, proxies=None):\n+def patch(url, data='', **kwargs):\n     \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -157,15 +139,10 @@ def patch(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('PATCH', url,\n-        params=params, data=data, headers=headers, files=files,\n-        cookies=cookies, auth=auth, timeout=timeout,\n-        allow_redirects=allow_redirects, proxies=proxies)\n+    return request('PATCH', url, **kwargs)\n \n \n-def delete(url,\n-    params=None, headers=None, cookies=None, auth=None, timeout=None,\n-    allow_redirects=False, proxies=None):\n+def delete(url, **kwargs):\n \n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n@@ -179,6 +156,4 @@ def delete(url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('DELETE', url,\n-        params=params, headers=headers, cookies=cookies, auth=auth,\n-        timeout=timeout, allow_redirects=allow_redirects, proxies=proxies)\n+    return request('DELETE', url, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#10cc4673f9a6570443394c6421042f2e822d2c86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 912 | Contributors (this commit): 8 | Commits (past 90d): 35 | Contributors (cumulative): 8 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -322,13 +322,10 @@ class Request(object):\n                 self._build_response(resp)\n                 self.response.ok = True\n \n-            self.response.cached = False\n         else:\n-            self.response.cached = True\n \n         self.sent = self.response.ok\n \n-\n         return self.sent\n \n \n@@ -357,8 +354,6 @@ class Response(object):\n         self.ok = False\n         #: Resulting :class:`HTTPError` of request, if one occured.\n         self.error = None\n-        #: True, if the response :attr:`content` is cached locally.\n-        self.cached = False\n         #: A list of :class:`Response <models.Response>` objects from\n         #: the history of the Request. Any redirect responses will end\n         #: up here.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2d70647f72fc230aec3453349fc4475cd3341de7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 916 | Contributors (this commit): 8 | Commits (past 90d): 36 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -219,6 +219,7 @@ class Request(object):\n             r.history = history\n \n         self.response = r\n+        self.response.request = self\n \n \n     @staticmethod\n@@ -322,7 +323,6 @@ class Request(object):\n                 self._build_response(resp)\n                 self.response.ok = True\n \n-        else:\n \n         self.sent = self.response.ok\n \n@@ -359,6 +359,8 @@ class Response(object):\n         #: up here.\n         self.history = []\n \n+        self.request = None\n+\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#773630b0109c7671930b7ab38bb71c22ac8a94c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3053 | Contributors (this commit): 10 | Commits (past 90d): 28 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -13,6 +13,7 @@ This module impliments the Requests API.\n \n import config\n from .models import Request, Response, AuthManager, AuthObject, auth_manager\n+from .status_codes import codes\n \n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n\n@@ -22,4 +22,5 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from models import HTTPError, auth_manager\n from api import *\n from exceptions import *\n+from status_codes import codes\n from config import settings\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6cead64345d875d0049ef27655c9d5f650033dc5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 18 | Churn Cumulative: 877 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -45,3 +45,21 @@ class CaseInsensitiveDict(dict):\n             return self[key]\n         else:\n             return default\n+\n+class LookupDict(dict):\n+    \"\"\"Dictionary lookup object.\"\"\"\n+\n+    def __init__(self, name=None):\n+        self.name = name\n+        super(LookupDict, self).__init__()\n+\n+    def __repr__(self):\n+        return '<lookup \\'%s\\'>' % (self.name)\n+\n+    def __getitem__(self, key):\n+        # We allow fall-through here, so values default to None\n+\n+        return self.__dict__.get(key, None)\n+\n+    def get(self, key, default=None):\n+        return self.__dict__.get(key, default)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9469b4bb6939e84b4539e6cd854e12c3d6b5d1fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 74 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 74 | Churn Cumulative: 74 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,74 @@\n+# -*- coding: utf-8 -*-\n+\n+from .structures import LookupDict\n+\n+_codes = {\n+    100: ('continue',),\n+    101: ('switching_protocols',),\n+    102: ('processing',),\n+    103: ('checkpoint',),\n+    122: ('uri_too_long', 'request_uri_too_long'),\n+    200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\o/'),\n+    201: ('created',),\n+    202: ('accepted',),\n+    203: ('non_authoritative_info', 'non_authoritative_information'),\n+    204: ('no_content',),\n+    205: ('reset_content', 'reset'),\n+    206: ('partial_content', 'partial'),\n+    207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),\n+    208: ('im_used',),\n+    300: ('multiple_choices',),\n+    301: ('moved_pemanently', 'moved'),\n+    302: ('found',),\n+    302: ('see_other', 'other'),\n+    304: ('not_modified',),\n+    305: ('use_proxy',),\n+    306: ('switch_proxy',),\n+    307: ('temporary_redirect', 'temporary_moved', 'temporary'),\n+    308: ('resume_incomplete', 'resume'),\n+    400: ('bad_request', 'bad'),\n+    401: ('unauthorized',),\n+    402: ('payment_required', 'payment'),\n+    403: ('forbidden',),\n+    404: ('not_found',),\n+    405: ('method_not_allowed', 'not_allowed'),\n+    406: ('not_acceptable',),\n+    407: ('proxy_authentication_required', 'proxy_auth', 'proxy_authentication'),\n+    408: ('request_timeout', 'timeout'),\n+    409: ('conflict',),\n+    410: ('gone',),\n+    411: ('length_required',),\n+    412: ('precondition_failed', 'precondition'),\n+    413: ('request_entity_too_large',),\n+    414: ('request_uri_too_large',),\n+    415: ('unspported_media_type', 'unspported_media', 'media_type'),\n+    416: ('requested_range_not_satisfiable', 'requested_range', 'range_not_satisfiable'),\n+    417: ('expectation_failed',),\n+    418: ('im_a_teapot', 'teapot', 'i_am_a_teapot'),\n+    422: ('unprocessable_entity', 'unprocessable'),\n+    423: ('locked',),\n+    424: ('failed_depdendency', 'depdendency'),\n+    425: ('unordered_collection', 'unordered'),\n+    426: ('upgrade_required', 'upgrade'),\n+    444: ('no_response', 'none'),\n+    449: ('retry_with', 'retry'),\n+    450: ('blocked_by_windows_parental_controls', 'parental_controls'),\n+    499: ('client_closed_request',),\n+    500: ('iternal_server_error', 'server_error'),\n+    501: ('not_implemented',),\n+    502: ('bad_gateway',),\n+    503: ('service_unavailable', 'unavailable'),\n+    504: ('gateway_timeout',),\n+    505: ('http_version_not_supported', 'http_version'),\n+    506: ('variant_also_negotiates',),\n+    507: ('insufficient_storage',),\n+    509: ('bandwidth_limit_exceeded', 'bandwidth'),\n+    510: ('not_extended',),\n+}\n+\n+codes = LookupDict(name='status_codes')\n+\n+for (code, titles) in _codes.items():\n+    for title in titles:\n+        setattr(codes, title, code)\n+        setattr(codes, title.upper(), code)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47378164ef18323a96b443db4a415057bc3d92ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 77 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ _codes = {\n     102: ('processing',),\n     103: ('checkpoint',),\n     122: ('uri_too_long', 'request_uri_too_long'),\n-    200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\o/'),\n+    200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', r'\\o/'),\n     201: ('created',),\n     202: ('accepted',),\n     203: ('non_authoritative_info', 'non_authoritative_information'),\n@@ -71,4 +71,5 @@ codes = LookupDict(name='status_codes')\n for (code, titles) in _codes.items():\n     for title in titles:\n         setattr(codes, title, code)\n+        if not title.startswith(r'\\'):\n             setattr(codes, title.upper(), code)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce1945c78025af0ec235d70d8cb501bfe7623145", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 81 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ _codes = {\n     102: ('processing',),\n     103: ('checkpoint',),\n     122: ('uri_too_long', 'request_uri_too_long'),\n-    200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', r'\\o/'),\n+    200: ('ok', 'okay', 'all_ok', 'all_okay', 'all_good', '\\\\o/'),\n     201: ('created',),\n     202: ('accepted',),\n     203: ('non_authoritative_info', 'non_authoritative_information'),\n@@ -71,5 +71,5 @@ codes = LookupDict(name='status_codes')\n for (code, titles) in _codes.items():\n     for title in titles:\n         setattr(codes, title, code)\n-        if not title.startswith(r'\\'):\n+        if not title.startswith('\\\\'):\n             setattr(codes, title.upper(), code)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#23ff27ea4b285bb55f7e87a62719e52a491141cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 919 | Contributors (this commit): 8 | Commits (past 90d): 36 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -341,6 +341,7 @@ class Response(object):\n         #: Raw content of the response, in bytes.\n         #: If ``content-encoding`` of response was set to ``gzip``, the\n         #: response data will be automatically deflated.\n+        self.content = None\n         self._content = None\n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -358,7 +359,7 @@ class Response(object):\n         #: the history of the Request. Any redirect responses will end\n         #: up here.\n         self.history = []\n-\n+        #: The Request that created the Response.\n         self.request = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1361506ae6ab1f25fd0d25147335a4576469d8a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 89 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,6 +3,8 @@\n from .structures import LookupDict\n \n _codes = {\n+\n+    # Informational.\n     100: ('continue',),\n     101: ('switching_protocols',),\n     102: ('processing',),\n@@ -17,6 +19,8 @@ _codes = {\n     206: ('partial_content', 'partial'),\n     207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),\n     208: ('im_used',),\n+\n+    # Redirection.\n     300: ('multiple_choices',),\n     301: ('moved_pemanently', 'moved'),\n     302: ('found',),\n@@ -26,6 +30,8 @@ _codes = {\n     306: ('switch_proxy',),\n     307: ('temporary_redirect', 'temporary_moved', 'temporary'),\n     308: ('resume_incomplete', 'resume'),\n+\n+    # Client Error.\n     400: ('bad_request', 'bad'),\n     401: ('unauthorized',),\n     402: ('payment_required', 'payment'),\n@@ -54,6 +60,8 @@ _codes = {\n     449: ('retry_with', 'retry'),\n     450: ('blocked_by_windows_parental_controls', 'parental_controls'),\n     499: ('client_closed_request',),\n+\n+    # Server Error.\n     500: ('iternal_server_error', 'server_error'),\n     501: ('not_implemented',),\n     502: ('bad_gateway',),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#975720a30c0437a2b9076ca699408cf5b0348dfa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 920 | Contributors (this commit): 8 | Commits (past 90d): 37 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -341,7 +341,6 @@ class Response(object):\n         #: Raw content of the response, in bytes.\n         #: If ``content-encoding`` of response was set to ``gzip``, the\n         #: response data will be automatically deflated.\n-        self.content = None\n         self._content = None\n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c510d21e4ee8affe66ad0f5c1de32c659bf04fc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 3 | Churn Cumulative: 954 | Contributors (this commit): 9 | Commits (past 90d): 39 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -300,7 +300,8 @@ class Request(object):\n                 req = _Request(url, data=self._enc_data, method=self.method)\n \n         if self.headers:\n-            req.headers.update(self.headers)\n+            for k,v in self.headers.iteritems():\n+                req.add_header(k, v)\n \n         if not self.sent or anyway:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#647cdd38476f6b21887d3ebcd6e0c79a6c97baa1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 967 | Contributors (this commit): 10 | Commits (past 90d): 40 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -38,7 +38,8 @@ class Request(object):\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n         allow_redirects=False, proxies=None):\n \n-        socket.setdefaulttimeout(timeout)\n+        #socket.setdefaulttimeout(timeout)\n+        self.timeout = timeout\n \n         #: Request URL.\n         self.url = url\n@@ -306,7 +307,17 @@ class Request(object):\n \n             try:\n                 opener = self._get_opener()\n+                try:\n+                    resp = opener(req, timeout=self.timeout)\n+                except TypeError, err:\n+                    # timeout argument is new since Python v2.6\n+                    if not \"timeout\" in str(err):\n+                        raise\n+                    # set global socket timeout\n+                    old_timeout = socket.getdefaulttimeout()\n+                    socket.setdefaulttimeout(self.timeout)\n                     resp = opener(req)\n+                    socket.setdefaulttimeout(old_timeout)\n \n                 if self.cookiejar is not None:\n                     self.cookiejar.extract_cookies(resp, req)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#88f79b74ce70815b343f5eeff871f0ee9e8cec67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 1089 | Contributors (this commit): 11 | Commits (past 90d): 50 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -57,3 +57,4 @@ settings = Settings()\n settings.base_headers = {'User-Agent': 'python-requests.org'}\n settings.accept_gzip = True\n settings.proxies = None\n+settings.timeout_fallback = True # Use socket.setdefaulttimeout() as fallback?\n\n@@ -38,7 +38,7 @@ class Request(object):\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n         allow_redirects=False, proxies=None):\n \n-        #socket.setdefaulttimeout(timeout)\n+        #: Float describ the timeout of the request. (Use socket.setdefaulttimeout() as fallback)\n         self.timeout = timeout\n \n         #: Request URL.\n@@ -313,10 +313,16 @@ class Request(object):\n                     # timeout argument is new since Python v2.6\n                     if not \"timeout\" in str(err):\n                         raise\n-                    # set global socket timeout\n+                    \n+                    if settings.timeout_fallback:\n+                        # fall-back and use global socket timeout (This is not thread-safe!)\n                         old_timeout = socket.getdefaulttimeout()\n                         socket.setdefaulttimeout(self.timeout)\n+                        \n                     resp = opener(req)\n+                    \n+                    if settings.timeout_fallback:\n+                        # restore gobal timeout\n                         socket.setdefaulttimeout(old_timeout)\n \n                 if self.cookiejar is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca428504d485b0495b5e794cdd1b47bbb0bd890f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 44 | Churn Cumulative: 44 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,44 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.session\n+~~~~~~~~~~~~~~~\n+\n+This module provides a Session object to manage and persist settings across\n+requests (cookies, auth, proxies).\n+\n+\"\"\"\n+\n+import requests.api\n+import cookielib\n+\n+class Session(object):\n+    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies']\n+\n+    def __init__(self, **kwargs):\n+        # Set up a CookieJar to be used by default\n+        self.cookies = cookielib.FileCookieJar()\n+        # Map args from kwargs to instance-local variables\n+        map(lambda k, v: (k in self.__attrs__) and setattr(self, k, v),\n+                kwargs.iterkeys(), kwargs.itervalues())\n+        # Map and wrap requests.api methods\n+        self._map_api_methods()\n+        \n+    def _map_api_methods(self):\n+        \"\"\" Reads each available method from requests.api and decorates\n+        them with a wrapper that inserts any instance-local attributes\n+        (from __attrs__) that have been set, combining them with **kwargs \"\"\"\n+        def pass_args(func):\n+            def wrapper_func(*args, **kwargs):\n+                inst_attrs = dict((k, v) for k, v in self.__dict__.iteritems() \n+                        if k in self.__attrs__)\n+                # Combine instance-local values with kwargs values, with \n+                # priority to values in kwargs\n+                kwargs = dict(inst_attrs.items() + kwargs.items())\n+                return func(*args, **kwargs)\n+            return wrapper_func\n+        # Map and decorate each function available in requests.api\n+        map(lambda fn: setattr(self, fn, pass_args(getattr(requests.api, fn))),\n+                requests.api.__all__) \n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#08a821381aa87803e925eb1e9c61269e4186fa80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 93 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ _codes = {\n \n     # Redirection.\n     300: ('multiple_choices',),\n-    301: ('moved_pemanently', 'moved'),\n+    301: ('moved_permanently', 'moved'),\n     302: ('found',),\n     302: ('see_other', 'other'),\n     304: ('not_modified',),\n@@ -62,7 +62,7 @@ _codes = {\n     499: ('client_closed_request',),\n \n     # Server Error.\n-    500: ('iternal_server_error', 'server_error'),\n+    500: ('internal_server_error', 'server_error'),\n     501: ('not_implemented',),\n     502: ('bad_gateway',),\n     503: ('service_unavailable', 'unavailable'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2fd5686950f49128c9d282bf28d440a71225c6b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 24 | Churn Cumulative: 907 | Contributors (this commit): 11 | Commits (past 90d): 29 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,6 +13,7 @@ except ImportError:\n \n import requests\n \n+from requests.session import Session\n \n \n HTTPBIN_URL = 'http://httpbin.org/'\n@@ -455,5 +456,28 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(len(r.history), 3)\n \n \n+    def test_session_HTTP_200_OK_GET(self):\n+        s = Session()\n+        r = s.get(httpbin('/'))\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_session_HTTPS_200_OK_GET(self):\n+        s = Session()\n+        r = s.get(httpsbin('/'))\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_session_persistent_headers(self):\n+        heads = {'User-agent': 'Mozilla/5.0'}\n+        s = Session()\n+        s.headers = heads\n+        # Make 2 requests from Session object, should send header both times\n+        r1 = s.get(httpbin('user-agent')\n+        assert heads['User-agent'] in r1.content\n+        r2 = s.get(httpbin('user-agent')\n+        assert heads['User-agent'] in r2.content\n+        self.assertEqual(r.status_code, 200)\n+    \n+        \n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aad27218d58e82637c43f92c85237fa90f0178c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 11 | Churn Cumulative: 988 | Contributors (this commit): 10 | Commits (past 90d): 42 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -333,12 +333,16 @@ class Request(object):\n         \"\"\"Creates a curl command from the request\"\"\"\n \n         #TODO - Auth. User names and accounts\n-        #TODO - Query string...\n         #TODO - Files...How do I do files???\n \n         #: --location - if there is a redirect, redo request on the new place\n         curl_cmd = 'curl --location '\n \n+        #: --header - Extra header to use when getting a web page\n+        header = ''\n+        if self.headers:\n+            header = header.join(['--header \"' + key + ':' + value + '\" ' for key, value in self.headers.iteritems()])\n+\n         if self.method.upper() == 'HEAD':\n             #: --head - fetch headers only\n             method_opt = '--head '\n@@ -355,8 +359,11 @@ class Request(object):\n             #if data is file:\n             if isinstance(self.data, (list, tuple)):\n                 data = data.join(['--data ' + key + '=' + value + ' ' for key, value in self.data])\n+            else:\n+                data = '--data ' + self._enc_data + ' '\n \n-        curl_cmd = curl_cmd + method_opt + data + self.url\n+        #: Params handled in _build_url\n+        curl_cmd = curl_cmd + method_opt + data + header + '\"' + self._build_url() + '\"'\n \n         return curl_cmd\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
