{"custom_id": "requests#f7c10ca74d0230ad4ece986a9cc4a2ebcb9136bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8574 | Contributors (this commit): 99 | Commits (past 90d): 77 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -392,7 +392,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             body.seek(0, 0)\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\n-        elif self.method in ('POST', 'PUT'):\n+        elif self.method in ('POST', 'PUT', 'PATCH'):\n             self.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8d8865aadb9c76863820c87431229d20e5c23a70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 11252 | Contributors (this commit): 109 | Commits (past 90d): 99 | Contributors (cumulative): 131 | DMM Complexity: 1.0\n\nDIFF:\n@@ -392,7 +392,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             body.seek(0, 0)\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\n-        elif self.method in ('POST', 'PUT', 'PATCH'):\n+        elif self.method not in ('GET', 'HEAD'):\n             self.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth):\n\n@@ -59,8 +59,10 @@ class RequestsTestCase(unittest.TestCase):\n \n \n     def test_no_content_length(self):\n-        req = requests.Request('GET', httpbin('get')).prepare()\n-        self.assertTrue('Content-Length' not in req.headers)\n+        get_req = requests.Request('GET', httpbin('get')).prepare()\n+        self.assertTrue('Content-Length' not in get_req.headers)\n+        head_req = requests.Request('HEAD', httpbin('head')).prepare()\n+        self.assertTrue('Content-Length' not in head_req.headers)\n \n \n     def test_path_is_not_double_encoded(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#250896b7f3a049843dc976f9e466f90e145108cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 23 | Churn Cumulative: 2699 | Contributors (this commit): 33 | Commits (past 90d): 22 | Contributors (cumulative): 33 | DMM Complexity: 1.0\n\nDIFF:\n@@ -282,8 +282,27 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertTrue(hasattr(resp, 'hook_working'))\n \n     def test_links(self):\n-        url = 'https://api.github.com/users/kennethreitz/repos?page=1&per_page=10'\n-        r = requests.head(url=url)\n+        r = requests.Response()\n+        r.headers = {\n+            'cache-control': 'public, max-age=60, s-maxage=60',\n+            'connection': 'keep-alive',\n+            'content-encoding': 'gzip',\n+            'content-type': 'application/json; charset=utf-8',\n+            'date': 'Sat, 26 Jan 2013 16:47:56 GMT',\n+            'etag': '\"6ff6a73c0e446c1f61614769e3ceb778\"',\n+            'last-modified': 'Sat, 26 Jan 2013 16:22:39 GMT',\n+            'link': ('<https://api.github.com/users/kennethreitz/repos?'\n+                     'page=2&per_page=10>; rel=\"next\", <https://api.github.'\n+                     'com/users/kennethreitz/repos?page=7&per_page=10>; '\n+                     ' rel=\"last\"'),\n+            'server': 'GitHub.com',\n+            'status': '200 OK',\n+            'vary': 'Accept',\n+            'x-content-type-options': 'nosniff',\n+            'x-github-media-type': 'github.beta',\n+            'x-ratelimit-limit': '60',\n+            'x-ratelimit-remaining': '57'\n+        }\n         self.assertEqual(r.links['next']['rel'], 'next')\n \n     def test_cookie_parameters(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#40a060cf579a7f0996c92eed578148e526d9416f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 20 | Files Changed: 9 | Hunks: 24 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 39 | Churn Cumulative: 18294 | Contributors (this commit): 151 | Commits (past 90d): 186 | Contributors (cumulative): 254 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -36,6 +36,7 @@ class AuthBase(object):\n     def __call__(self, r):\n         raise NotImplementedError('Auth hooks must be callable.')\n \n+\n class HTTPBasicAuth(AuthBase):\n     \"\"\"Attaches HTTP Basic Authentication to the given Request object.\"\"\"\n     def __init__(self, username, password):\n\n@@ -14,6 +14,7 @@ packaged CA bundle.\n \n import os.path\n \n+\n def where():\n     \"\"\"Return the preferred certificate bundle.\"\"\"\n     # vendored bundle inside Requests\n\n@@ -98,7 +98,6 @@ if is_py2:\n     numeric_types = (int, long, float)\n \n \n-\n elif is_py3:\n     from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus, urldefrag\n     from urllib.request import parse_http_list\n\n@@ -16,6 +16,7 @@ Available hooks:\n \n HOOKS = ['response']\n \n+\n def default_hooks():\n     hooks = {}\n     for event in HOOKS:\n@@ -24,6 +25,7 @@ def default_hooks():\n \n # TODO: response is the only one\n \n+\n def dispatch_hook(key, hooks, hook_data):\n     \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n \n\n@@ -188,7 +188,6 @@ class Request(RequestHooksMixin):\n         cookies=None,\n         hooks=None):\n \n-\n         # Default empty dicts for dict params.\n         data = [] if data is None else data\n         files = [] if files is None else files\n@@ -529,8 +528,7 @@ class Response(object):\n \n         pending = None\n \n-        for chunk in self.iter_content(\n-            chunk_size=chunk_size,\n+        for chunk in self.iter_content(chunk_size=chunk_size,\n                                        decode_unicode=decode_unicode):\n \n             if pending is not None:\n\n@@ -249,7 +249,6 @@ class Session(SessionRedirectMixin):\n             if not verify and verify is not False:\n                 verify = os.environ.get('CURL_CA_BUNDLE')\n \n-\n         # Merge all the kwargs.\n         params = merge_kwargs(params, self.params)\n         headers = merge_kwargs(headers, self.headers)\n@@ -260,7 +259,6 @@ class Session(SessionRedirectMixin):\n         verify = merge_kwargs(verify, self.verify)\n         cert = merge_kwargs(cert, self.cert)\n \n-\n         # Create the Request.\n         req = Request()\n         req.method = method.upper()\n\n@@ -11,6 +11,7 @@ Data structures that power Requests.\n import os\n from itertools import islice\n \n+\n class IteratorProxy(object):\n     \"\"\"docstring for IteratorProxy\"\"\"\n     def __init__(self, i):\n@@ -31,6 +32,7 @@ class IteratorProxy(object):\n     def read(self, n):\n         return \"\".join(islice(self.i, None, n))\n \n+\n class CaseInsensitiveDict(dict):\n     \"\"\"Case-insensitive Dictionary\n \n\n@@ -30,6 +30,7 @@ NETRC_FILES = ('.netrc', '_netrc')\n \n DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n+\n def dict_to_sequence(d):\n     \"\"\"Returns an internal sequence dictionary update.\"\"\"\n \n@@ -38,6 +39,7 @@ def dict_to_sequence(d):\n \n     return d\n \n+\n def super_len(o):\n     if hasattr(o, '__len__'):\n         return len(o)\n@@ -46,6 +48,7 @@ def super_len(o):\n     if hasattr(o, 'fileno'):\n         return os.fstat(o.fileno()).st_size\n \n+\n def get_netrc_auth(url):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n \n@@ -464,11 +467,9 @@ def default_user_agent():\n     if _implementation == 'CPython':\n         _implementation_version = platform.python_version()\n     elif _implementation == 'PyPy':\n-        _implementation_version = '%s.%s.%s' % (\n-                                                sys.pypy_version_info.major,\n+        _implementation_version = '%s.%s.%s' % (sys.pypy_version_info.major,\n                                                 sys.pypy_version_info.minor,\n-                                                sys.pypy_version_info.micro\n-                                            )\n+                                                sys.pypy_version_info.micro)\n         if sys.pypy_version_info.releaselevel != 'final':\n             _implementation_version = ''.join([_implementation_version, sys.pypy_version_info.releaselevel])\n     elif _implementation == 'Jython':\n@@ -485,11 +486,10 @@ def default_user_agent():\n         p_system = 'Unknown'\n         p_release = 'Unknown'\n \n-    return \" \".join([\n-            'python-requests/%s' % __version__,\n+    return \" \".join(['python-requests/%s' % __version__,\n                      '%s/%s' % (_implementation, _implementation_version),\n-            '%s/%s' % (p_system, p_release),\n-        ])\n+                     '%s/%s' % (p_system, p_release)])\n+\n \n def default_headers():\n     return {\n\n@@ -18,10 +18,12 @@ except ImportError:\n \n HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n \n+\n def httpbin(*suffix):\n     \"\"\"Returns url for HTTPBIN resource.\"\"\"\n     return HTTPBIN + '/'.join(suffix)\n \n+\n class RequestsTestCase(unittest.TestCase):\n \n     _multiprocess_can_split_ = True\n@@ -57,14 +59,12 @@ class RequestsTestCase(unittest.TestCase):\n         assert pr.url == req.url\n         assert pr.body == 'life=42'\n \n-\n     def test_no_content_length(self):\n         get_req = requests.Request('GET', httpbin('get')).prepare()\n         self.assertTrue('Content-Length' not in get_req.headers)\n         head_req = requests.Request('HEAD', httpbin('head')).prepare()\n         self.assertTrue('Content-Length' not in head_req.headers)\n \n-\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request('GET', \"http://0.0.0.0/get/test case\").prepare()\n \n@@ -113,16 +113,14 @@ class RequestsTestCase(unittest.TestCase):\n     def test_user_agent_transfers(self):\n \n         heads = {\n-            'User-agent':\n-                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n+            'User-agent': 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n         r = requests.get(httpbin('user-agent'), headers=heads)\n         self.assertTrue(heads['User-agent'] in r.text)\n \n         heads = {\n-            'user-agent':\n-                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n+            'user-agent': 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n         r = requests.get(httpbin('user-agent'), headers=heads)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d4aaef1e9a15a8d37dcaabe89b46f3948329b5a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 11684 | Contributors (this commit): 111 | Commits (past 90d): 137 | Contributors (cumulative): 141 | DMM Complexity: 0.5714285714285714\n\nDIFF:\n@@ -9,6 +9,7 @@ and maintain connections.\n \"\"\"\n \n import socket\n+import time\n \n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n@@ -155,6 +156,7 @@ class HTTPAdapter(BaseAdapter):\n         url = self.request_url(request, proxies)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n+        start = time.time()\n \n         try:\n             if not chunked:\n@@ -198,6 +200,7 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False\n                 )\n+            finish = time.time()\n \n         except socket.error as sockerr:\n             raise ConnectionError(sockerr)\n@@ -214,6 +217,7 @@ class HTTPAdapter(BaseAdapter):\n                 raise Timeout('Request timed out.')\n \n         r = self.build_response(request, resp)\n+        r.time_taken = finish - start\n \n         if not stream:\n             r.content\n\n@@ -471,6 +471,9 @@ class Response(object):\n         #: A CookieJar of Cookies the server sent back.\n         self.cookies = cookiejar_from_dict({})\n \n+        #: The amount of time taken for the response to arrive (in seconds).\n+        self.time_taken = 0.0\n+\n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n \n\n@@ -323,5 +323,10 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(cookie.domain, domain)\n         self.assertEqual(cookie._rest['HttpOnly'], rest['HttpOnly'])\n \n+    def test_time_taken_blank(self):\n+        r = requests.get(httpbin('get'))\n+        self.assertTrue(r.time_taken > 0.0)\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#318300848f0ef96d603e25ae185e6f0a08fd9cc9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 11702 | Contributors (this commit): 111 | Commits (past 90d): 139 | Contributors (cumulative): 141 | DMM Complexity: None\n\nDIFF:\n@@ -9,7 +9,7 @@ and maintain connections.\n \"\"\"\n \n import socket\n-import time\n+import datetime\n \n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n@@ -156,7 +156,7 @@ class HTTPAdapter(BaseAdapter):\n         url = self.request_url(request, proxies)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n-        start = time.time()\n+        start = datetime.datetime.utcnow()\n \n         try:\n             if not chunked:\n@@ -200,7 +200,7 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False\n                 )\n-            finish = time.time()\n+            finish = datetime.datetime.utcnow()\n \n         except socket.error as sockerr:\n             raise ConnectionError(sockerr)\n@@ -217,7 +217,7 @@ class HTTPAdapter(BaseAdapter):\n                 raise Timeout('Request timed out.')\n \n         r = self.build_response(request, resp)\n-        r.time_taken = finish - start\n+        r.elapsed = finish - start\n \n         if not stream:\n             r.content\n\n@@ -9,6 +9,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import logging\n+import datetime\n \n from io import BytesIO\n from .hooks import default_hooks\n@@ -471,8 +472,9 @@ class Response(object):\n         #: A CookieJar of Cookies the server sent back.\n         self.cookies = cookiejar_from_dict({})\n \n-        #: The amount of time taken for the response to arrive (in seconds).\n-        self.time_taken = 0.0\n+        #: The amount of time elapsed between sending the request\n+        #: and the arrival of the response (as a timedelta)\n+        self.elapsed = datetime.timedelta(0)\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n\n@@ -323,9 +323,9 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(cookie.domain, domain)\n         self.assertEqual(cookie._rest['HttpOnly'], rest['HttpOnly'])\n \n-    def test_time_taken_blank(self):\n+    def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n-        self.assertTrue(r.time_taken > 0.0)\n+        self.assertTrue(r.elapsed.total_seconds() > 0.0)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8ad4f0b73bb37d1eecb369142a6d267b77cc994", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2250 | Contributors (this commit): 31 | Commits (past 90d): 83 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,7 +9,6 @@ and maintain connections.\n \"\"\"\n \n import socket\n-import datetime\n \n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n@@ -156,7 +155,6 @@ class HTTPAdapter(BaseAdapter):\n         url = self.request_url(request, proxies)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n-        start = datetime.datetime.utcnow()\n \n         try:\n             if not chunked:\n@@ -200,7 +198,6 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False\n                 )\n-            finish = datetime.datetime.utcnow()\n \n         except socket.error as sockerr:\n             raise ConnectionError(sockerr)\n@@ -217,7 +214,6 @@ class HTTPAdapter(BaseAdapter):\n                 raise Timeout('Request timed out.')\n \n         r = self.build_response(request, resp)\n-        r.elapsed = finish - start\n \n         if not stream:\n             r.content\n\n@@ -9,6 +9,7 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n import os\n+from datetime import datetime\n \n from .compat import cookielib\n from .cookies import cookiejar_from_dict\n@@ -368,7 +369,9 @@ class Session(SessionRedirectMixin):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n         hooks = request.hooks\n         adapter = self.get_adapter(url=request.url)\n+        start = datetime.utcnow()\n         r = adapter.send(request, **kwargs)\n+        r.elapsed = datetime.utcnow() - start\n         # Response manipulation hooks\n         r = dispatch_hook('response', hooks, r)\n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ac391373329b2d8c67d34fd7c056ff9db16a5f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 10 | Churn Cumulative: 11317 | Contributors (this commit): 111 | Commits (past 90d): 108 | Contributors (cumulative): 136 | DMM Complexity: 1.0\n\nDIFF:\n@@ -486,6 +486,10 @@ class Response(object):\n         \"\"\"Returns true if :attr:`status_code` is 'OK'.\"\"\"\n         return self.ok\n \n+    def __iter__(self):\n+        \"\"\"Returns the current object.\"\"\"\n+        return self.iter_content(128)\n+\n     @property\n     def ok(self):\n         try:\n\n@@ -325,6 +325,12 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get(httpbin('get'))\n         self.assertTrue(r.elapsed.total_seconds() > 0.0)\n \n+    def test_response_is_iterable(self):\n+        r = requests.Response()\n+        io = StringIO.StringIO('abc')\n+        r.raw = io\n+        self.assertTrue(iter(r).next())\n+        io.close()\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f7923bc0564ed6c8bb30b4d547cbacccbecaebb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8595 | Contributors (this commit): 101 | Commits (past 90d): 83 | Contributors (cumulative): 101 | DMM Complexity: None\n\nDIFF:\n@@ -487,7 +487,7 @@ class Response(object):\n         return self.ok\n \n     def __iter__(self):\n-        \"\"\"Returns the current object.\"\"\"\n+        \"\"\"Allows you to use a response as an iterator.\"\"\"\n         return self.iter_content(128)\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#95084c9ca8b3c33d6f16bf63f9c041aa6e442641", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2726 | Contributors (this commit): 35 | Commits (past 90d): 27 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -329,7 +329,7 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.Response()\n         io = StringIO.StringIO('abc')\n         r.raw = io\n-        self.assertTrue(iter(r).next())\n+        self.assertTrue(next(iter(r)))\n         io.close()\n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a95bfd30324b59f54de7b18ae6209aecfe5c87fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 12 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 68 | Churn Cumulative: 4645 | Contributors (this commit): 57 | Commits (past 90d): 78 | Contributors (cumulative): 64 | DMM Complexity: 0.0\n\nDIFF:\n@@ -75,7 +75,8 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n class SessionRedirectMixin(object):\n \n-    def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n+    def resolve_redirects(self, resp, req, stream=False, timeout=None,\n+                          verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -276,24 +277,21 @@ class Session(SessionRedirectMixin):\n         prep = req.prepare()\n \n         # Send the request.\n-        resp = self.send(prep, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        send_kwargs = {\n+            'stream': stream,\n+            'timeout': timeout,\n+            'verify': verify,\n+            'cert': cert,\n+            'proxies': proxies,\n+            'allow_redirects': allow_redirects,\n+            'req': req,\n+        }\n+        resp = self.send(prep, **send_kwargs)\n \n         # Persist cookies.\n         for cookie in resp.cookies:\n             self.cookies.set_cookie(cookie)\n \n-        # Redirect resolving generator.\n-        gen = self.resolve_redirects(resp, req, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n-\n-        # Resolve redirects if allowed.\n-        history = [r for r in gen] if allow_redirects else []\n-\n-        # Shuffle things around if there's history.\n-        if history:\n-            history.insert(0, resp)\n-            resp = history.pop()\n-            resp.history = tuple(history)\n-\n         return resp\n \n     def get(self, url, **kwargs):\n@@ -367,13 +365,49 @@ class Session(SessionRedirectMixin):\n \n     def send(self, request, **kwargs):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n+        # Set up variables needed for resolve_redirects and dispatching of\n+        # hooks\n+        allow_redirects = True\n+        if 'allow_redirects' in kwargs:\n+            allow_redirects = kwargs.pop('allow_redirects')\n+        req = None\n+        if 'req' in kwargs:\n+            req = kwargs.pop('req')\n+        stream = kwargs.get('stream', False)\n+        timeout = kwargs.get('timeout')\n+        verify = kwargs.get('verify')\n+        cert = kwargs.get('cert')\n+        proxies = kwargs.get('proxies')\n         hooks = request.hooks\n+\n+        # Get the appropriate adapter to use\n         adapter = self.get_adapter(url=request.url)\n+\n+        # Start time (approximately) of the request\n         start = datetime.utcnow()\n+        # Send the request\n         r = adapter.send(request, **kwargs)\n+        # Total elapsed time of the request (approximately)\n         r.elapsed = datetime.utcnow() - start\n+\n+        # Redirect resolving generator.\n+        gen = self.resolve_redirects(r, req, stream=stream, timeout=timeout,\n+                                     verify=verify, cert=cert, proxies=proxies)\n+\n+        # Resolve redirects if allowed.\n+        history = [resp for resp in gen] if allow_redirects else []\n+\n+        # Shuffle things around if there's history.\n+        if history:\n+            # Insert the first (original) request at the start\n+            history.insert(0, r)\n+            # Get the last request made\n+            r = history.pop()\n+            r.history = tuple(history)\n+\n         # Response manipulation hooks\n         r = dispatch_hook('response', hooks, r)\n+\n         return r\n \n     def get_adapter(self, url):\n\n@@ -3,6 +3,7 @@\n \n \"\"\"Tests for Requests.\"\"\"\n \n+from __future__ import division\n import json\n import os\n import unittest\n@@ -323,7 +324,10 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n-        self.assertTrue(r.elapsed.total_seconds() > 0.0)\n+        td = r.elapsed\n+        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\n+                         * 10**6) / 10**6)\n+        self.assertTrue(total_seconds > 0.0)\n \n     def test_response_is_iterable(self):\n         r = requests.Response()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ba485913b624d997675760120abd6da2e6d69a34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 8 | Churn Cumulative: 1921 | Contributors (this commit): 29 | Commits (past 90d): 51 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -367,12 +367,8 @@ class Session(SessionRedirectMixin):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n         # Set up variables needed for resolve_redirects and dispatching of\n         # hooks\n-        allow_redirects = True\n-        if 'allow_redirects' in kwargs:\n-            allow_redirects = kwargs.pop('allow_redirects')\n-        req = None\n-        if 'req' in kwargs:\n-            req = kwargs.pop('req')\n+        allow_redirects = kwargs.pop('allow_redirects', True)\n+        req = kwargs.pop('req', None)\n         stream = kwargs.get('stream', False)\n         timeout = kwargs.get('timeout')\n         verify = kwargs.get('verify')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9ff8cbe5fb5e917b95dcbd6bc81e43d35dcbbb16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1770 | Contributors (this commit): 39 | Commits (past 90d): 14 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -89,7 +89,7 @@ def guess_filename(obj):\n     \"\"\"Tries to guess the filename of the given object.\"\"\"\n     name = getattr(obj, 'name', None)\n     if name and name[0] != '<' and name[-1] != '>':\n-        return name\n+        return os.path.basename(name)\n \n \n def from_key_val_list(value):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b07c1ebd859a32e1203c1d4ef27f1fb9e154e55e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1923 | Contributors (this commit): 30 | Commits (past 90d): 52 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -106,7 +106,7 @@ class SessionRedirectMixin(object):\n                 url = urljoin(resp.url, requote_uri(url))\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n-            if resp.status_code is codes.see_other and req.method != 'HEAD':\n+            if resp.status_code == codes.see_other and req.method != 'HEAD':\n                 method = 'GET'\n \n             # Do what the browsers do, despite standards...\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#544d08d0f61c35358cf13b4a6b677e4e51dbbe7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 8597 | Contributors (this commit): 101 | Commits (past 90d): 84 | Contributors (cumulative): 101 | DMM Complexity: 0.0\n\nDIFF:\n@@ -387,6 +387,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.body = body\n \n     def prepare_content_length(self, body):\n+        if self.headers.get('Content-Length'):\n+            return\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d437c338d0bfe4a88d9c3efa1a1802603ee9cc97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/4 | Churn Δ: 34 | Churn Cumulative: 4935 | Contributors (this commit): 65 | Commits (past 90d): 79 | Contributors (cumulative): 79 | DMM Complexity: 0.95\n\nDIFF:\n@@ -15,7 +15,7 @@ from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n from .packages.urllib3.response import HTTPResponse\n from .compat import urlparse, basestring, urldefrag\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n-                    prepend_scheme_if_needed)\n+                    prepend_scheme_if_needed, get_auth_from_url)\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import TimeoutError\n@@ -23,6 +23,7 @@ from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n from .cookies import extract_cookies_to_jar\n from .exceptions import ConnectionError, Timeout, SSLError\n+from .auth import _basic_auth_str\n \n DEFAULT_POOLSIZE = 10\n DEFAULT_RETRIES = 0\n@@ -146,6 +147,21 @@ class HTTPAdapter(BaseAdapter):\n \n         return url\n \n+    def add_headers(self, request, **kwargs):\n+        \"\"\"Add any headers needed by the connection. Currently this only adds a\n+        Host: header if a proxy is being used.\"\"\"\n+        proxies = kwargs.get('proxies', {})\n+\n+        if proxies is None:\n+            proxies = {}\n+\n+        proxy = proxies.get(urlparse(request.url).scheme)\n+        username, password = get_auth_from_url(proxy)\n+\n+        if username and password:\n+            request.headers['Proxy-Authorization'] = _basic_auth_str(username,\n+                                                                     password)\n+\n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\"\"\"\n \n@@ -153,6 +169,7 @@ class HTTPAdapter(BaseAdapter):\n \n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n+        self.add_headers(request, proxies=proxies)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n\n@@ -580,3 +580,13 @@ def prepend_scheme_if_needed(url, new_scheme):\n         netloc, path = path, netloc\n \n     return urlunparse((scheme, netloc, path, params, query, fragment))\n+\n+\n+def get_auth_from_url(url):\n+    \"\"\"Given a url with authentication components, extract them into a tuple of\n+    username,password.\"\"\"\n+    if url:\n+        parsed = urlparse(url)\n+        return (parsed.username, parsed.password)\n+    else:\n+        return ('', '')\n\n@@ -336,5 +336,10 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertTrue(next(iter(r)))\n         io.close()\n \n+    def test_get_auth_from_url(self):\n+        url = 'http://user:pass@complex.url.com/path?query=yes'\n+        self.assertEqual(('user', 'pass'),\n+                         requests.utils.get_auth_from_url(url))\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b0657cf163b2ed3781896eb1712a8ae1b14125ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 9 | Churn Cumulative: 4669 | Contributors (this commit): 58 | Commits (past 90d): 83 | Contributors (cumulative): 65 | DMM Complexity: 1.0\n\nDIFF:\n@@ -365,6 +365,11 @@ class Session(SessionRedirectMixin):\n \n     def send(self, request, **kwargs):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n+        # It's possible that users might accidentally send a Request object.\n+        # Guard against that specific failure case.\n+        if getattr(request, 'prepare', None):\n+            raise ValueError('You can only send PreparedRequests.')\n+\n         # Set up variables needed for resolve_redirects and dispatching of\n         # hooks\n         allow_redirects = kwargs.pop('allow_redirects', True)\n\n@@ -341,5 +341,9 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(('user', 'pass'),\n                          requests.utils.get_auth_from_url(url))\n \n+    def test_cannot_send_unprepared_requests(self):\n+        r = requests.Request(url=HTTPBIN)\n+        self.assertRaises(ValueError, requests.Session().send, r)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3299771e3497199adda6ad6354f78742806cd320", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 1963 | Contributors (this commit): 30 | Commits (past 90d): 54 | Contributors (cumulative): 30 | DMM Complexity: 1.0\n\nDIFF:\n@@ -74,9 +74,8 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n \n class SessionRedirectMixin(object):\n-\n-    def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None):\n+    def resolve_redirects(self, resp, prepared_request, stream=False,\n+                          timeout=None, verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -93,7 +92,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n+            method = prepared_request.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n@@ -106,34 +105,35 @@ class SessionRedirectMixin(object):\n                 # Compliant with RFC3986, we percent encode the url.\n                 url = urljoin(resp.url, requote_uri(url))\n \n+            prepared_request.url = url\n+\n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n-            if resp.status_code == codes.see_other and req.method != 'HEAD':\n+            if (resp.status_code == codes.see_other and\n+                    prepared_request.method != 'HEAD'):\n                 method = 'GET'\n \n             # Do what the browsers do, despite standards...\n-            if resp.status_code in (codes.moved, codes.found) and req.method == 'POST':\n+            if (resp.status_code in (codes.moved, codes.found) and\n+                    prepared_request.method == 'POST'):\n                 method = 'GET'\n \n+            prepared_request.method = method\n+\n             # Remove the cookie headers that were sent.\n-            headers = req.headers\n+            headers = prepared_request.headers\n             try:\n                 del headers['Cookie']\n             except KeyError:\n                 pass\n \n-            resp = self.request(\n-                url=url,\n-                method=method,\n-                headers=headers,\n-                auth=req.auth,\n-                cookies=req.cookies,\n-                allow_redirects=False,\n+            resp = self.send(\n+                prepared_request,\n                 stream=stream,\n                 timeout=timeout,\n                 verify=verify,\n                 cert=cert,\n                 proxies=proxies,\n-                hooks=req.hooks,\n+                allow_redirects=False,\n             )\n \n             i += 1\n@@ -392,8 +392,9 @@ class Session(SessionRedirectMixin):\n         r.elapsed = datetime.utcnow() - start\n \n         # Redirect resolving generator.\n-        gen = self.resolve_redirects(r, req, stream=stream, timeout=timeout,\n-                                     verify=verify, cert=cert, proxies=proxies)\n+        gen = self.resolve_redirects(r, request, stream=stream,\n+                                     timeout=timeout, verify=verify, cert=cert,\n+                                     proxies=proxies)\n \n         # Resolve redirects if allowed.\n         history = [resp for resp in gen] if allow_redirects else []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e2ad0d0fe8f4bff1640417f67e7e321f030c1bed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 1968 | Contributors (this commit): 30 | Commits (past 90d): 55 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -121,11 +121,14 @@ class SessionRedirectMixin(object):\n \n             # Remove the cookie headers that were sent.\n             headers = prepared_request.headers\n+            for h in ('Cookie', 'Content-Length'):\n                 try:\n-                del headers['Cookie']\n+                    del headers[h]\n                 except KeyError:\n                     pass\n \n+            prepared_request.body = None\n+\n             resp = self.send(\n                 prepared_request,\n                 stream=stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e7bc9bf1b2c8abb51b56981548632baed3b4fb87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 1980 | Contributors (this commit): 30 | Commits (past 90d): 56 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,7 +13,7 @@ from datetime import datetime\n \n from .compat import cookielib\n from .cookies import cookiejar_from_dict\n-from .models import Request\n+from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import from_key_val_list, default_headers\n from .exceptions import TooManyRedirects, InvalidSchema\n@@ -74,11 +74,17 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n \n class SessionRedirectMixin(object):\n-    def resolve_redirects(self, resp, prepared_request, stream=False,\n-                          timeout=None, verify=True, cert=None, proxies=None):\n+    def resolve_redirects(self, resp, req, stream=False, timeout=None,\n+                          verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = PreparedRequest()\n+        prepared_request.body = req.body\n+        prepared_request.headers = req.headers.copy()\n+        prepared_request.hooks = req.hooks\n+        prepared_request.method = req.method\n+        prepared_request.url = req.url\n \n         # ((resp.status_code is codes.see_other))\n         while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9c8660dbb6e5d9b8694447e91e7936161f868ab0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 1995 | Contributors (this commit): 30 | Commits (past 90d): 57 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -125,16 +125,17 @@ class SessionRedirectMixin(object):\n \n             prepared_request.method = method\n \n-            # Remove the cookie headers that were sent.\n-            headers = prepared_request.headers\n-            for h in ('Cookie', 'Content-Length'):\n-                try:\n-                    del headers[h]\n-                except KeyError:\n-                    pass\n+            if resp.status_code is not codes.temporary:\n+                if 'Content-Length' in prepared_request.headers:\n+                    del prepared_request.headers['Content-Length']\n \n                 prepared_request.body = None\n \n+            try:\n+                del prepared_request.headers['Cookie']\n+            except KeyError:\n+                pass\n+\n             resp = self.send(\n                 prepared_request,\n                 stream=stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9cdc8325ae8ace6fe3b09eb78751d6912410e9cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 1998 | Contributors (this commit): 30 | Commits (past 90d): 58 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -136,6 +136,9 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n+            if response.headers.get('Set-Cookie'):\n+                prepared_request.headers['Cookie'] = response.headers.get('Set-Cookie')\n+\n             resp = self.send(\n                 prepared_request,\n                 stream=stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1da1490bcd120e61f4f7f96062ec570d3b0a905e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 486 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -147,14 +147,24 @@ class PoolManager(RequestMethods):\n class ProxyManager(RequestMethods):\n     \"\"\"\n     Given a ConnectionPool to a proxy, the ProxyManager's ``urlopen`` method\n-    will make requests to any url through the defined proxy.\n+    will make requests to any url through the defined proxy. The ProxyManager\n+    class will automatically set the 'Host' header if it is not provided.\n     \"\"\"\n \n     def __init__(self, proxy_pool):\n         self.proxy_pool = proxy_pool\n \n-    def _set_proxy_headers(self, headers=None):\n+    def _set_proxy_headers(self, url, headers=None):\n+        \"\"\"\n+        Sets headers needed by proxies: specifically, the Accept and Host\n+        headers. Only sets headers not provided by the user.\n+        \"\"\"\n         headers_ = {'Accept': '*/*'}\n+\n+        host = parse_url(url).host\n+        if host:\n+            headers_['Host'] = host\n+\n         if headers:\n             headers_.update(headers)\n \n@@ -163,7 +173,7 @@ class ProxyManager(RequestMethods):\n     def urlopen(self, method, url, **kw):\n         \"Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.\"\n         kw['assert_same_host'] = False\n-        kw['headers'] = self._set_proxy_headers(kw.get('headers'))\n+        kw['headers'] = self._set_proxy_headers(url, headers=kw.get('headers'))\n         return self.proxy_pool.urlopen(method, url, **kw)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0fb13e0b6c092e1acf96e24cf01a621ea4ef5eac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 2746 | Contributors (this commit): 35 | Commits (past 90d): 31 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -111,6 +111,11 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_set_cookie_on_301(self):\n+        url = httpbin('cookies/set/foo/bar')\n+        r = s.get(url)\n+        self.assertTrue(s.cookies['foo'] == 'bar')\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2e3169615636ceffc7aa85469464470c11d3a85e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 20 | Churn Cumulative: 5307 | Contributors (this commit): 64 | Commits (past 90d): 96 | Contributors (cumulative): 76 | DMM Complexity: 0.625\n\nDIFF:\n@@ -240,12 +240,18 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Dict-like __getitem__() for compatibility with client code. Throws exception\n         if there are more than one cookie with name. In that case, use the more\n         explicit get() method instead. Caution: operation is O(n), not O(1).\"\"\"\n+        if isinstance(name, cookielib.Cookie):\n+            name = name.name\n+\n         return self._find_no_duplicates(name)\n \n     def __setitem__(self, name, value):\n         \"\"\"Dict-like __setitem__ for compatibility with client code. Throws exception\n         if there is already a cookie of that name in the jar. In that case, use the more\n         explicit set() method instead.\"\"\"\n+        if isinstance(name, cookielib.Cookie):\n+            name = name.name\n+\n         self.set(name, value)\n \n     def __delitem__(self, name):\n\n@@ -85,6 +85,7 @@ class SessionRedirectMixin(object):\n         prepared_request.hooks = req.hooks\n         prepared_request.method = req.method\n         prepared_request.url = req.url\n+        cookiejar = resp.cookies\n \n         # ((resp.status_code is codes.see_other))\n         while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n@@ -131,13 +132,13 @@ class SessionRedirectMixin(object):\n \n                 prepared_request.body = None\n \n+            headers = prepared_request.headers\n             try:\n-                del prepared_request.headers['Cookie']\n+                del headers['Cookie']\n             except KeyError:\n                 pass\n \n-            if response.headers.get('Set-Cookie'):\n-                prepared_request.headers['Cookie'] = response.headers.get('Set-Cookie')\n+            prepared_request.prepare_cookies(cookiejar)\n \n             resp = self.send(\n                 prepared_request,\n@@ -149,9 +150,13 @@ class SessionRedirectMixin(object):\n                 allow_redirects=False,\n             )\n \n+            cookiejar.update(resp.cookies)\n+\n             i += 1\n             yield resp\n \n+        resp.cookies.update(cookiejar)\n+\n \n class Session(SessionRedirectMixin):\n     \"\"\"A Requests session.\n\n@@ -112,7 +112,8 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n     def test_set_cookie_on_301(self):\n-        url = httpbin('cookies/set/foo/bar')\n+        s = requests.session()\n+        url = httpbin('cookies/set?foo=bar')\n         r = s.get(url)\n         self.assertTrue(s.cookies['foo'] == 'bar')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
