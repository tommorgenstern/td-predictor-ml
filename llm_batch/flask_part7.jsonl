{"custom_id": "flask#5bb2b55a2880b3c91dbcd6580f3d25ee23c6655c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 304 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -234,3 +234,5 @@ intersphinx_mapping = {\n     'http://www.sqlalchemy.org/docs/': None,\n     'http://wtforms.simplecodes.com/docs/0.5/': None\n }\n+\n+pygments_style = 'flask_theme_support.FlaskyStyle'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f80e1d3b5ab8e718cc67c814cbfd9aee9c95f45f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 1728 | Contributors (this commit): 6 | Commits (past 90d): 61 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -249,6 +249,13 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     also explicitly provide one.  For extra security you probably want\n     to sent certain files as attachment (HTML for instance).\n \n+    Please never pass filenames to this function from user sources without\n+    checking them first.  Something like this is usually sufficient to\n+    avoid security problems::\n+\n+        if '..' in filename or filename.startswith('/'):\n+            abort(404)\n+\n     .. versionadded:: 0.2\n \n     :param filename_or_fp: the filename of the file to send.  This is\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b0ab127015186e1a2918221ffad8d79ca346faf5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 93 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ setup(\n         'Jinja2>=2.4'\n     ],\n     classifiers=[\n-        'Development Status :: 3 - Alpha',\n+        'Development Status :: 4 - Beta',\n         'Environment :: Web Environment',\n         'Intended Audience :: Developers',\n         'License :: OSI Approved :: BSD License',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#07581b2404924fe1833f596cfa09caf69868ad5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 95 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ from setuptools import setup\n \n setup(\n     name='Flask',\n-    version='0.2',\n+    version='0.5',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e409bc792d4419ed588afbc60c53b61923c415a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 33/33 | Churn Δ: 2 | Churn Cumulative: 1730 | Contributors (this commit): 6 | Commits (past 90d): 62 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -1113,7 +1113,7 @@ class Flask(_PackageBoundObject):\n             with app.request_context(environ):\n                 do_something_with(request)\n \n-        :params environ: a WSGI environment\n+        :param environ: a WSGI environment\n         \"\"\"\n         return _RequestContext(self, environ)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a5a41d40aaa9f6ed70b487133ddaf48ceb3d054f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1732 | Contributors (this commit): 7 | Commits (past 90d): 63 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -85,7 +85,7 @@ class Response(ResponseBase):\n     :meth:`~flask.Flask.make_response` will take care of that for you.\n \n     If you want to replace the response object used you can subclass this and\n-    set :attr:`~flask.Flask.request_class` to your subclass.\n+    set :attr:`~flask.Flask.response_class` to your subclass.\n     \"\"\"\n     default_mimetype = 'text/html'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#693e4449f87950c764a928690f4437fd6b1b4d7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1736 | Contributors (this commit): 7 | Commits (past 90d): 64 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -562,7 +562,7 @@ class Module(_PackageBoundObject):\n         return f\n \n     def context_processor(self, f):\n-        \"\"\"Like :meth:`Flask.context_processor` but for a modul.  This\n+        \"\"\"Like :meth:`Flask.context_processor` but for a module.  This\n         function is only executed for requests handled by a module.\n         \"\"\"\n         self._record(lambda s: s.app.template_context_processors\n@@ -601,7 +601,7 @@ class Flask(_PackageBoundObject):\n         app = Flask(__name__)\n     \"\"\"\n \n-    #: the class that is used for request objects.  See :class:`~flask.request`\n+    #: the class that is used for request objects.  See :class:`~flask.Request`\n     #: for more information.\n     request_class = Request\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#35ed617fe41b184288892f733ce07d94391b76b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 25/23 | Churn Δ: 62 | Churn Cumulative: 2440 | Contributors (this commit): 7 | Commits (past 90d): 93 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -217,24 +217,49 @@ def get_template_attribute(template_name, attribute):\n                    attribute)\n \n \n-def flash(message):\n+def flash(message, category='message'):\n     \"\"\"Flashes a message to the next request.  In order to remove the\n     flashed message from the session and to display it to the user,\n     the template has to call :func:`get_flashed_messages`.\n \n+    .. versionchanged: 0.5\n+       `category` parameter added.\n+\n     :param message: the message to be flashed.\n+    :param category: the category for the message.  The following values\n+                     are recommended: ``'message'`` for any kind of message,\n+                     ``'error'`` for errors, ``'info'`` for information\n+                     messages and ``'warning'`` for warnings.  However any\n+                     kind of string and be used as category.\n     \"\"\"\n-    session.setdefault('_flashes', []).append(message)\n+    session.setdefault('_flashes', []).append((category, message))\n \n \n-def get_flashed_messages():\n+def get_flashed_messages(with_categories=False):\n     \"\"\"Pulls all flashed messages from the session and returns them.\n     Further calls in the same request to the function will return\n-    the same messages.\n+    the same messages.  By default just the messages are returned,\n+    but when `with_categories` is set to `True`, the return value will\n+    be a list of tuples in the form ``(category, message)`` instead.\n+\n+    Example usage:\n+\n+    .. sourcecode:: html+jinja\n+\n+        {% for category, msg in get_flashed_messages(with_categories=true) %}\n+          <p class=flash-{{ category }}>{{ msg }}\n+        {% endfor %}\n+\n+    .. versionchanged:: 0.5\n+       `with_categories` parameter added.\n+\n+    :param with_categories: set to `True` to also receive categories.\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n         _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', [])\n+    if not with_categories:\n+        return [x[1] for x in flashes]\n     return flashes\n \n \n\n@@ -157,6 +157,35 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             assert flask.session.modified\n             assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n \n+    def test_extended_flashing(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+\n+        @app.route('/')\n+        def index():\n+            flask.flash(u'Hello World')\n+            flask.flash(u'Hello World', 'error')\n+            flask.flash(flask.Markup(u'<em>Testing</em>'), 'warning')\n+            return ''\n+\n+        @app.route('/test')\n+        def test():\n+            messages = flask.get_flashed_messages(with_categories=True)\n+            assert len(messages) == 3\n+            assert messages[0] == ('message', u'Hello World')\n+            assert messages[1] == ('error', u'Hello World')\n+            assert messages[2] == ('warning', flask.Markup(u'<em>Testing</em>'))\n+            return ''\n+            messages = flask.get_flashed_messages()\n+            assert len(messages) == 3\n+            assert messages[0] == u'Hello World'\n+            assert messages[1] == u'Hello World'\n+            assert messages[2] == flask.Markup(u'<em>Testing</em>')\n+\n+        c = app.test_client()\n+        c.get('/')\n+        c.get('/test')\n+\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#931dcc4c80331d372d70d7a0a5c8e6d49223e2bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1771 | Contributors (this commit): 7 | Commits (past 90d): 66 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -230,7 +230,7 @@ def flash(message, category='message'):\n                      are recommended: ``'message'`` for any kind of message,\n                      ``'error'`` for errors, ``'info'`` for information\n                      messages and ``'warning'`` for warnings.  However any\n-                     kind of string and be used as category.\n+                     kind of string can be used as category.\n     \"\"\"\n     session.setdefault('_flashes', []).append((category, message))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e7f67e13339073007a84271cce91200bfdb81006", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 128 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 11 | Methods Changed: 12 | Complexity Δ (Sum/Max): 13/8 | Churn Δ: 138 | Churn Cumulative: 2580 | Contributors (this commit): 7 | Commits (past 90d): 96 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,7 +21,7 @@ from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n      ImmutableDict, cached_property, wrap_file, Headers\n from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException\n+from werkzeug.exceptions import HTTPException, InternalServerError\n from werkzeug.contrib.securecookie import SecureCookie\n \n # try to load the best simplejson implementation available.  If JSON\n@@ -659,6 +659,18 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.2\n     use_x_sendfile = False\n \n+    #: the logging format used for the debug logger.  This is only used when\n+    #: the application is in debug mode, otherwise the attached logging\n+    #: handler does the formatting.\n+    #:\n+    #: .. versionadded:: 0.5\n+    debug_log_format = (\n+        '-' * 80 + '\\n' +\n+        '%(levelname)s in %(module)s, %(filename)s:%(lineno)d]:\\n' +\n+        '%(message)s\\n' +\n+        '-' * 80\n+    )\n+\n     #: options that are passed directly to the Jinja2 environment\n     jinja_options = ImmutableDict(\n         autoescape=True,\n@@ -753,6 +765,24 @@ class Flask(_PackageBoundObject):\n         )\n         self.jinja_env.filters['tojson'] = _tojson_filter\n \n+    @cached_property\n+    def logger(self):\n+        \"\"\"A :class:`logging.Logger` object for this application.  The\n+        default configuration is to log to stderr if the application is\n+        in debug mode.\n+        \"\"\"\n+        from logging import getLogger, StreamHandler, Formatter, DEBUG\n+        class DebugHandler(StreamHandler):\n+            def emit(x, record):\n+                if self.debug:\n+                    StreamHandler.emit(x, record)\n+        handler = DebugHandler()\n+        handler.setLevel(DEBUG)\n+        handler.setFormatter(Formatter(self.debug_log_format))\n+        logger = getLogger(self.import_name)\n+        logger.addHandler(handler)\n+        return logger\n+\n     def create_jinja_loader(self):\n         \"\"\"Creates the Jinja loader.  By default just a package loader for\n         the configured package is returned that looks up templates in the\n@@ -1010,6 +1040,38 @@ class Flask(_PackageBoundObject):\n         self.template_context_processors[None].append(f)\n         return f\n \n+    def handle_http_exception(self, e):\n+        \"\"\"Handles an HTTP exception.  By default this will invoke the\n+        registered error handlers and fall back to returning the\n+        exception as response.\n+\n+        .. versionadded: 0.5\n+        \"\"\"\n+        handler = self.error_handlers.get(e.code)\n+        if handler is None:\n+            return e\n+        return handler(e)\n+\n+    def handle_exception(self, e):\n+        \"\"\"Default exception handling that kicks in when an exception\n+        occours that is not catched.  In debug mode the exception will\n+        be re-raised immediately, otherwise it is logged an the handler\n+        for an 500 internal server error is used.  If no such handler\n+        exists, a default 500 internal server error message is displayed.\n+\n+        .. versionadded: 0.5\n+        \"\"\"\n+        handler = self.error_handlers.get(500)\n+        if self.debug:\n+            raise\n+        self.logger.exception('Exception on %s [%s]' % (\n+            request.path,\n+            request.method\n+        ))\n+        if handler is None:\n+            return InternalServerError()\n+        return handler(e)\n+\n     def dispatch_request(self):\n         \"\"\"Does the request dispatching.  Matches the URL and returns the\n         return value of the view or error handler.  This does not have to\n@@ -1022,15 +1084,9 @@ class Flask(_PackageBoundObject):\n                 raise req.routing_exception\n             return self.view_functions[req.endpoint](**req.view_args)\n         except HTTPException, e:\n-            handler = self.error_handlers.get(e.code)\n-            if handler is None:\n-                return e\n-            return handler(e)\n+            return self.handle_http_exception(e)\n         except Exception, e:\n-            handler = self.error_handlers.get(500)\n-            if self.debug or handler is None:\n-                raise\n-            return handler(e)\n+            return self.handle_exception(e)\n \n     def make_response(self, rv):\n         \"\"\"Converts the return value from a view function to a real\n\n@@ -16,6 +16,7 @@ import sys\n import flask\n import unittest\n import tempfile\n+from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from cStringIO import StringIO\n@@ -26,6 +27,16 @@ sys.path.append(os.path.join(example_path, 'flaskr'))\n sys.path.append(os.path.join(example_path, 'minitwit'))\n \n \n+@contextmanager\n+def catch_stderr():\n+    old_stderr = sys.stderr\n+    sys.stderr = rv = StringIO()\n+    try:\n+        yield rv\n+    finally:\n+        sys.stderr = old_stderr\n+\n+\n class ContextTestCase(unittest.TestCase):\n \n     def test_context_binding(self):\n@@ -585,6 +596,56 @@ class SendfileTestCase(unittest.TestCase):\n             assert options['filename'] == 'index.txt'\n \n \n+class LoggingTestCase(unittest.TestCase):\n+\n+    def test_debug_log(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/')\n+        def index():\n+            app.logger.warning('the standard library is dead')\n+            return ''\n+\n+        @app.route('/exc')\n+        def exc():\n+            1/0\n+        c = app.test_client()\n+\n+        with catch_stderr() as err:\n+            rv = c.get('/')\n+            out = err.getvalue()\n+            assert 'WARNING in flask_tests, flask_tests.py' in out\n+            assert 'the standard library is dead' in out\n+\n+        with catch_stderr() as err:\n+            try:\n+                c.get('/exc')\n+            except ZeroDivisionError:\n+                pass\n+            else:\n+                assert False, 'debug log ate the exception'\n+\n+    def test_exception_logging(self):\n+        from logging import StreamHandler\n+        out = StringIO()\n+        app = flask.Flask(__name__)\n+        app.logger.addHandler(StreamHandler(out))\n+\n+        @app.route('/')\n+        def index():\n+            1/0\n+\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+\n+        err = out.getvalue()\n+        assert 'Exception on / [GET]' in err\n+        assert 'Traceback (most recent call last):' in err\n+        assert '1/0' in err\n+        assert 'ZeroDivisionError:' in err\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n@@ -592,8 +653,9 @@ def suite():\n     suite.addTest(unittest.makeSuite(ContextTestCase))\n     suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n     suite.addTest(unittest.makeSuite(TemplatingTestCase))\n-    suite.addTest(unittest.makeSuite(SendfileTestCase))\n     suite.addTest(unittest.makeSuite(ModuleTestCase))\n+    suite.addTest(unittest.makeSuite(SendfileTestCase))\n+    suite.addTest(unittest.makeSuite(LoggingTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n     suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ea5e654e9e19aab5089f9a71e679bcca11581e86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 7 | Methods Changed: 8 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 38 | Churn Cumulative: 2922 | Contributors (this commit): 7 | Commits (past 90d): 107 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,6 +50,8 @@ import pkg_resources\n # built documents.\n release = __import__('pkg_resources').get_distribution('Flask').version\n version = '.'.join(release.split('.')[:2])\n+if 'dev' in version:\n+    version = version.split('dev')[0]\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n\n@@ -666,7 +666,7 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.5\n     debug_log_format = (\n         '-' * 80 + '\\n' +\n-        '%(levelname)s in %(module)s, %(filename)s:%(lineno)d]:\\n' +\n+        '%(levelname)s in %(module)s, %(pathname)s:%(lineno)d]:\\n' +\n         '%(message)s\\n' +\n         '-' * 80\n     )\n@@ -769,7 +769,12 @@ class Flask(_PackageBoundObject):\n     def logger(self):\n         \"\"\"A :class:`logging.Logger` object for this application.  The\n         default configuration is to log to stderr if the application is\n-        in debug mode.\n+        in debug mode.  This logger can be used to (surprise) log messages.\n+        Here some examples::\n+\n+            app.logger.debug('A value for debugging')\n+            app.logger.warning('A warning ocurred (%d apples)', 42)\n+            app.logger.error('An error occoured')\n         \"\"\"\n         from logging import getLogger, StreamHandler, Formatter, DEBUG\n         class DebugHandler(StreamHandler):\n@@ -1085,8 +1090,6 @@ class Flask(_PackageBoundObject):\n             return self.view_functions[req.endpoint](**req.view_args)\n         except HTTPException, e:\n             return self.handle_http_exception(e)\n-        except Exception, e:\n-            return self.handle_exception(e)\n \n     def make_response(self, rv):\n         \"\"\"Converts the return value from a view function to a real\n@@ -1176,11 +1179,14 @@ class Flask(_PackageBoundObject):\n                                exception context to start the response\n         \"\"\"\n         with self.request_context(environ):\n+            try:\n                 rv = self.preprocess_request()\n                 if rv is None:\n                     rv = self.dispatch_request()\n                 response = self.make_response(rv)\n                 response = self.process_response(response)\n+            except Exception, e:\n+                response = self.make_response(self.handle_exception(e))\n             return response(environ, start_response)\n \n     def request_context(self, environ):\n\n@@ -645,6 +645,28 @@ class LoggingTestCase(unittest.TestCase):\n         assert '1/0' in err\n         assert 'ZeroDivisionError:' in err\n \n+    def test_processor_exceptions(self):\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def before_request():\n+            if trigger == 'before':\n+                1/0\n+        @app.after_request\n+        def after_request(response):\n+            if trigger == 'after':\n+                1/0\n+            return response\n+        @app.route('/')\n+        def index():\n+            return 'Foo'\n+        @app.errorhandler(500)\n+        def internal_server_error(e):\n+            return 'Hello Server Error', 500\n+        for trigger in 'before', 'after':\n+            rv = app.test_client().get('/')\n+            assert rv.status_code == 500\n+            assert rv.data == 'Hello Server Error'\n+\n \n def suite():\n     from minitwit_tests import MiniTwitTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#54c3df60cd533ea80d347f6715ee84f6a560b5d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 310 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -49,9 +49,9 @@ import pkg_resources\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n release = __import__('pkg_resources').get_distribution('Flask').version\n+if 'dev' in release:\n+    release = release.split('dev')[0] + 'dev'\n version = '.'.join(release.split('.')[:2])\n-if 'dev' in version:\n-    version = version.split('dev')[0]\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b26aeba972686b9cb9a9b111e1bc8997e1f259c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 760 | Contributors (this commit): 4 | Commits (past 90d): 31 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -614,7 +614,8 @@ class LoggingTestCase(unittest.TestCase):\n         with catch_stderr() as err:\n             rv = c.get('/')\n             out = err.getvalue()\n-            assert 'WARNING in flask_tests, flask_tests.py' in out\n+            assert 'WARNING in flask_tests,' in out\n+            assert 'flask_tests.py' in out\n             assert 'the standard library is dead' in out\n \n         with catch_stderr() as err:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e84140aba2786655bbddcedb363d16de1e285441", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 50 | Churn Cumulative: 1909 | Contributors (this commit): 7 | Commits (past 90d): 69 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -606,6 +606,21 @@ class Module(_PackageBoundObject):\n         self._register_events.append(func)\n \n \n+class ConfigAttribute(object):\n+    \"\"\"Makes an attribute forward to the config\"\"\"\n+\n+    def __init__(self, name):\n+        self.__name__ = name\n+\n+    def __get__(self, obj, type=None):\n+        if obj is None:\n+            return self\n+        return obj.config[self.__name__]\n+\n+    def __set__(self, obj, value):\n+        obj.config[self.__name__] = value\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -639,25 +654,31 @@ class Flask(_PackageBoundObject):\n     #: and the development server will no longer serve any static files.\n     static_path = '/static'\n \n+    #: the debug flag.  Set this to `True` to enable debugging of the\n+    #: application.  In debug mode the debugger will kick in when an unhandled\n+    #: exception ocurrs and the integrated server will automatically reload\n+    #: the application if changes in the code are detected.\n+    debug = ConfigAttribute('debug')\n+\n     #: if a secret key is set, cryptographic components can use this to\n     #: sign cookies and other things.  Set this to a complex random value\n     #: when you want to use the secure cookie for instance.\n-    secret_key = None\n+    secret_key = ConfigAttribute('secret_key')\n \n     #: The secure cookie uses this for the name of the session cookie\n-    session_cookie_name = 'session'\n+    session_cookie_name = ConfigAttribute('session.cookie_name')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n-    permanent_session_lifetime = timedelta(days=31)\n+    permanent_session_lifetime = ConfigAttribute('session.permanent_lifetime')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n     #: sent with the :func:`send_file` method.\n     #:\n     #: .. versionadded:: 0.2\n-    use_x_sendfile = False\n+    use_x_sendfile = ConfigAttribute('use_x_sendfile')\n \n     #: the logging format used for the debug logger.  This is only used when\n     #: the application is in debug mode, otherwise the attached logging\n@@ -677,15 +698,22 @@ class Flask(_PackageBoundObject):\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n-    def __init__(self, import_name):\n+    #: default configuration parameters\n+    default_config = ImmutableDict({\n+        'debug':                                False,\n+        'secret_key':                           None,\n+        'session.cookie_name':                  'session',\n+        'session.permanent_lifetime':           timedelta(days=31),\n+        'use_x_sendfile':                       False\n+    })\n+\n+    def __init__(self, import_name, config=None):\n         _PackageBoundObject.__init__(self, import_name)\n \n-        #: the debug flag.  Set this to `True` to enable debugging of\n-        #: the application.  In debug mode the debugger will kick in\n-        #: when an unhandled exception ocurrs and the integrated server\n-        #: will automatically reload the application if changes in the\n-        #: code are detected.\n-        self.debug = False\n+        #: the configuration dictionary\n+        self.config = self.default_config.copy()\n+        if config:\n+            self.config.update(config)\n \n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c4cac0abc1a04710a25dcfc8d7f1b2de173546a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 119 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/7 | Churn Δ: 129 | Churn Cumulative: 2798 | Contributors (this commit): 7 | Commits (past 90d): 102 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,8 @@ from itertools import chain\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n-     ImmutableDict, cached_property, wrap_file, Headers\n+     ImmutableDict, cached_property, wrap_file, Headers, \\\n+     import_string\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError\n from werkzeug.contrib.securecookie import SecureCookie\n@@ -621,6 +622,90 @@ class ConfigAttribute(object):\n         obj.config[self.__name__] = value\n \n \n+class Config(dict):\n+    \"\"\"Works exactly like a dict but provides ways to fill it from files\n+    or special dictionaries.  There are two common patterns to populate the\n+    config.\n+\n+    Either you can fill the config from a config file::\n+\n+        app.config.from_pyfile('yourconfig.cfg')\n+\n+    Or alternatively you can define the configuration options in the\n+    module that calls :meth:`from_module` or provide an import path to\n+    a module that should be loaded.  It is also possible to tell it to\n+    use the same module and with that provide the configuration values\n+    just before the call::\n+\n+        DEBUG = True\n+        SECRET_KEY = 'development key'\n+        app.config.from_module(__name__)\n+\n+    In both cases (loading from any Python file or loading from modules),\n+    only uppercase keys are added to the config.  The actual keys in the\n+    config are however lowercased so they are converted for you.  This makes\n+    it possible to use lowercase values in the config file for temporary\n+    values that are not added to the config or to define the config keys in\n+    the same file that implements the application.\n+\n+    :param root_path: path to which files are read relative from.  When the\n+                      config object is created by the application, this is\n+                      the application's :attr:`~flask.Flask.root_path`.\n+    :param defaults: an optional dictionary of default values\n+    \"\"\"\n+\n+    def __init__(self, root_path, defaults=None):\n+        dict.__init__(self, defaults or {})\n+        self.root_path = root_path\n+\n+    def from_pyfile(self, filename):\n+        \"\"\"Updates the values in the config from a Python file.  This function\n+        behaves as if the file was imported as module with the\n+        :meth:`from_module` function.\n+\n+        :param filename: the filename of the config.  This can either be an\n+                         absolute filename or a filename relative to the\n+                         root path.\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        d = type(sys)('config')\n+        d.__file__ = filename\n+        execfile(filename, d.__dict__)\n+        self.from_module(d)\n+\n+    def from_module(self, module):\n+        \"\"\"Updates the values from the given module.  A module can be of one\n+        of the following two types:\n+\n+        -   a string: in this case the module with that name will be imported\n+        -   an actual module reference: that module is used directly\n+\n+        Just the uppercase variables in that module are stored in the config\n+        after lowercasing.  Example usage::\n+\n+            app.config.from_module('yourapplication.default_config')\n+            from yourapplication import default_config\n+            app.config.from_module(default_config)\n+\n+        You should not use this function to load the actual configuration but\n+        rather configuration defaults.  The actual config should be loaded\n+        with :meth;`from_pyfile` and ideally from a location not within the\n+        package because the package might be installed system wide.\n+\n+        :param module: an import name or module\n+        \"\"\"\n+        if isinstance(module, basestring):\n+            d = import_string(module).__dict__\n+        else:\n+            d = module.__dict__\n+        for key, value in d.iteritems():\n+            if key.isupper():\n+                self[key.lower()] = value\n+\n+    def __repr__(self):\n+        return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -666,12 +751,12 @@ class Flask(_PackageBoundObject):\n     secret_key = ConfigAttribute('secret_key')\n \n     #: The secure cookie uses this for the name of the session cookie\n-    session_cookie_name = ConfigAttribute('session.cookie_name')\n+    session_cookie_name = ConfigAttribute('session_cookie_name')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n-    permanent_session_lifetime = ConfigAttribute('session.permanent_lifetime')\n+    permanent_session_lifetime = ConfigAttribute('permanent_session_lifetime')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n@@ -702,18 +787,18 @@ class Flask(_PackageBoundObject):\n     default_config = ImmutableDict({\n         'debug':                                False,\n         'secret_key':                           None,\n-        'session.cookie_name':                  'session',\n-        'session.permanent_lifetime':           timedelta(days=31),\n+        'session_cookie_name':                  'session',\n+        'permanent_session_lifetime':           timedelta(days=31),\n         'use_x_sendfile':                       False\n     })\n \n-    def __init__(self, import_name, config=None):\n+    def __init__(self, import_name):\n         _PackageBoundObject.__init__(self, import_name)\n \n-        #: the configuration dictionary\n-        self.config = self.default_config.copy()\n-        if config:\n-            self.config.update(config)\n+        #: the configuration dictionary as :class:`Config`.  This behaves\n+        #: exactly like a regular dictionary but supports additional methods\n+        #: to load a config from files.\n+        self.config = Config(self.root_path, self.default_config)\n \n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n\n@@ -27,6 +27,11 @@ sys.path.append(os.path.join(example_path, 'flaskr'))\n sys.path.append(os.path.join(example_path, 'minitwit'))\n \n \n+# config keys used for the ConfigTestCase\n+TEST_KEY = 'foo'\n+SECRET_KEY = 'devkey'\n+\n+\n @contextmanager\n def catch_stderr():\n     old_stderr = sys.stderr\n@@ -669,6 +674,24 @@ class LoggingTestCase(unittest.TestCase):\n             assert rv.data == 'Hello Server Error'\n \n \n+class ConfigTestCase(unittest.TestCase):\n+\n+    def common_module_test(self, app):\n+        assert app.secret_key == 'devkey'\n+        assert app.config['test_key'] == 'foo'\n+        assert 'ConfigTestCase' not in app.config\n+\n+    def test_config_from_file(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_pyfile('flask_tests.py')\n+        self.common_module_test(app)\n+\n+    def test_config_from_module(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_module(__name__)\n+        self.common_module_test(app)\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n@@ -679,6 +702,7 @@ def suite():\n     suite.addTest(unittest.makeSuite(ModuleTestCase))\n     suite.addTest(unittest.makeSuite(SendfileTestCase))\n     suite.addTest(unittest.makeSuite(LoggingTestCase))\n+    suite.addTest(unittest.makeSuite(ConfigTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n     suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cbcd15c3b55cfb05f1b27aa2343f909876f8d3d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -12/0 | Churn Δ: 8 | Churn Cumulative: 2332 | Contributors (this commit): 7 | Commits (past 90d): 82 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -190,6 +190,7 @@ latex_elements = {\n     'pointsize':    '12pt',\n     'preamble':     r'\\usepackage{flaskstyle}'\n }\n+latex_use_parts = True\n \n latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n \n\n@@ -1097,6 +1097,8 @@ class Flask(_PackageBoundObject):\n \n         The following types are allowed for `rv`:\n \n+        .. tabularcolumns:: |p{3.5cm}|p{9.5cm}|\n+\n         ======================= ===========================================\n         :attr:`response_class`  the object is returned unchanged\n         :class:`str`            a response object is created with the\n@@ -1222,3 +1224,8 @@ current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n request = LocalProxy(lambda: _request_ctx_stack.top.request)\n session = LocalProxy(lambda: _request_ctx_stack.top.session)\n g = LocalProxy(lambda: _request_ctx_stack.top.g)\n+\n+\n+# script interface to run a development server\n+if __name__ == '__main__':\n+    sys.exit(main(sys.argv))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef0dc1800f7558abbefe070f361b97b9161b2452", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 54 | Churn Cumulative: 2859 | Contributors (this commit): 7 | Commits (past 90d): 105 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -147,15 +147,24 @@ class _RequestContext(object):\n         except HTTPException, e:\n             self.request.routing_exception = e\n \n-    def __enter__(self):\n+    def push(self):\n+        \"\"\"Binds the request context.\"\"\"\n         _request_ctx_stack.push(self)\n \n+    def pop(self):\n+        \"\"\"Pops the request context.\"\"\"\n+        _request_ctx_stack.pop()\n+\n+    def __enter__(self):\n+        self.push()\n+        return self\n+\n     def __exit__(self, exc_type, exc_value, tb):\n         # do not pop the request stack if we are in debug mode and an\n         # exception happened.  This will allow the debugger to still\n         # access the request object in the interactive shell.\n         if tb is None or not self.app.debug:\n-            _request_ctx_stack.pop()\n+            self.pop()\n \n \n def url_for(endpoint, **values):\n@@ -1202,6 +1211,30 @@ class Flask(_PackageBoundObject):\n             with app.request_context(environ):\n                 do_something_with(request)\n \n+        The object returned can also be used without the `with` statement\n+        which is useful for working in the shell.  The example above is\n+        doing exactly the same as this code::\n+\n+            ctx = app.request_context(environ)\n+            ctx.push()\n+            try:\n+                do_something_with(request)\n+            finally:\n+                ctx.pop()\n+\n+        The big advantage of this approach is that you can use it without\n+        the try/finally statement in a shell for interactive testing:\n+\n+        >>> ctx = app.test_request_context()\n+        >>> ctx.bind()\n+        >>> request.path\n+        u'/'\n+        >>> ctx.unbind()\n+\n+        .. versionchanged:: 0.5\n+           Added support for non-with statement usage and `with` statement\n+           is now passed the ctx object.\n+\n         :param environ: a WSGI environment\n         \"\"\"\n         return _RequestContext(self, environ)\n\n@@ -53,6 +53,23 @@ class ContextTestCase(unittest.TestCase):\n         with app.test_request_context('/meh'):\n             assert meh() == 'http://localhost/meh'\n \n+    def test_manual_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+\n+        ctx = app.test_request_context('/?name=World')\n+        ctx.push()\n+        assert index() == 'Hello World!'\n+        ctx.pop()\n+        try:\n+            index()\n+        except AttributeError:\n+            pass\n+        else:\n+            assert 0, 'expected runtime error'\n+\n \n class BasicFunctionalityTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6c095deda51efb34cd18bd23411ebd6f2a0cdfe0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2062 | Contributors (this commit): 7 | Commits (past 90d): 73 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -1004,14 +1004,14 @@ class Flask(_PackageBoundObject):\n         error code.  Example::\n \n             @app.errorhandler(404)\n-            def page_not_found():\n+            def page_not_found(error):\n                 return 'This page does not exist', 404\n \n         You can also register a function as error handler without using\n         the :meth:`errorhandler` decorator.  The following example is\n         equivalent to the one above::\n \n-            def page_not_found():\n+            def page_not_found(error):\n                 return 'This page does not exist', 404\n             app.error_handlers[404] = page_not_found\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9d19b77acf413de77b39ed1c6d972fb1e5fef1c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 629 | Contributors (this commit): 3 | Commits (past 90d): 24 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -140,7 +140,7 @@ html_sidebars = {\n #html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_use_modindex = True\n+html_use_modindex = False\n \n # If false, no index is generated.\n #html_use_index = True\n@@ -152,7 +152,7 @@ html_sidebars = {\n #html_show_sourcelink = True\n \n # If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+html_show_sphinx = False\n \n # If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n #html_show_copyright = True\n\n@@ -127,6 +127,7 @@ def user_timeline(username):\n             follower.who_id = ? and follower.whom_id = ?''',\n             [session['user_id'], profile_user['user_id']],\n             one=True) is not None\n+    broken_just_for_djangocon\n     return render_template('timeline.html', messages=query_db('''\n             select message.*, user.* from message, user where\n             user.user_id = message.author_id and user.user_id = ?\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#74d458b40c0bdb140e7feab9af407642eb3dcea1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2064 | Contributors (this commit): 7 | Commits (past 90d): 74 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -784,6 +784,8 @@ class Flask(_PackageBoundObject):\n             app.logger.debug('A value for debugging')\n             app.logger.warning('A warning ocurred (%d apples)', 42)\n             app.logger.error('An error occoured')\n+\n+        .. versionadded:: 0.5\n         \"\"\"\n         from logging import getLogger, StreamHandler, Formatter, DEBUG\n         class DebugHandler(StreamHandler):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8d356d7cda963e2fa6437c5a5fef035e13cc80c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 319 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -94,7 +94,9 @@ html_theme = 'flask'\n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+html_theme_options = {\n+    'touch_icon':   'touch-icon.png'\n+}\n \n # Add any paths that contain custom themes here, relative to this directory.\n html_theme_path = ['_themes']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e432d833b5f7b4c27e2dca5d5125bbf78a46327d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 315 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -127,7 +127,6 @@ def user_timeline(username):\n             follower.who_id = ? and follower.whom_id = ?''',\n             [session['user_id'], profile_user['user_id']],\n             one=True) is not None\n-    broken_just_for_djangocon\n     return render_template('timeline.html', messages=query_db('''\n             select message.*, user.* from message, user where\n             user.user_id = message.author_id and user.user_id = ?\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
