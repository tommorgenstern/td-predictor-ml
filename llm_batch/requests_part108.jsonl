{"custom_id": "requests#7e297ed95bdbd1018657f5d6000379ecdfa54423", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 19 | Files Changed: 7 | Hunks: 21 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 24099 | Contributors (this commit): 324 | Commits (past 90d): 28 | Contributors (cumulative): 497 | DMM Complexity: None\n\nDIFF:\n@@ -43,6 +43,7 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n+    from collections import Callable, Mapping, MutableMapping\n \n     from urllib3.packages.ordered_dict import OrderedDict\n \n@@ -60,6 +61,7 @@ elif is_py3:\n     from http.cookies import Morsel\n     from io import StringIO\n     from collections import OrderedDict\n+    from collections.abc import Callable, Mapping, MutableMapping\n \n     builtin_str = str\n     str = str\n\n@@ -12,10 +12,9 @@ requests.utils imports from here, so be careful with imports.\n import copy\n import time\n import calendar\n-import collections\n \n from ._internal_utils import to_native_string\n-from .compat import cookielib, urlparse, urlunparse, Morsel\n+from .compat import cookielib, urlparse, urlunparse, Morsel, MutableMapping\n \n try:\n     import threading\n@@ -169,7 +168,7 @@ class CookieConflictError(RuntimeError):\n     \"\"\"\n \n \n-class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n+class RequestsCookieJar(cookielib.CookieJar, MutableMapping):\n     \"\"\"Compatibility class; is a cookielib.CookieJar, but exposes a dict\n     interface.\n \n\n@@ -7,7 +7,6 @@ requests.models\n This module contains the primary objects that power Requests.\n \"\"\"\n \n-import collections\n import datetime\n import sys\n \n@@ -37,6 +36,7 @@ from .utils import (\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len, check_header_validity)\n from .compat import (\n+    Callable, Mapping,\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes,\n     is_py2, chardet, builtin_str, basestring)\n from .compat import json as complexjson\n@@ -178,10 +178,10 @@ class RequestHooksMixin(object):\n         if event not in self.hooks:\n             raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n \n-        if isinstance(hook, collections.Callable):\n+        if isinstance(hook, Callable):\n             self.hooks[event].append(hook)\n         elif hasattr(hook, '__iter__'):\n-            self.hooks[event].extend(h for h in hook if isinstance(h, collections.Callable))\n+            self.hooks[event].extend(h for h in hook if isinstance(h, Callable))\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n@@ -465,7 +465,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n-            not isinstance(data, (basestring, list, tuple, collections.Mapping))\n+            not isinstance(data, (basestring, list, tuple, Mapping))\n         ])\n \n         try:\n\n@@ -10,11 +10,10 @@ requests (cookies, auth, proxies).\n import os\n import sys\n import time\n-from collections import Mapping\n from datetime import timedelta\n \n from .auth import _basic_auth_str\n-from .compat import cookielib, is_py3, OrderedDict, urljoin, urlparse\n+from .compat import cookielib, is_py3, OrderedDict, urljoin, urlparse, Mapping\n from .cookies import (\n     cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n\n@@ -7,16 +7,14 @@ requests.structures\n Data structures that power Requests.\n \"\"\"\n \n-import collections\n-\n-from .compat import OrderedDict\n+from .compat import OrderedDict, Mapping, MutableMapping\n \n \n-class CaseInsensitiveDict(collections.MutableMapping):\n+class CaseInsensitiveDict(MutableMapping):\n     \"\"\"A case-insensitive ``dict``-like object.\n \n     Implements all methods and operations of\n-    ``collections.MutableMapping`` as well as dict's ``copy``. Also\n+    ``MutableMapping`` as well as dict's ``copy``. Also\n     provides ``lower_items``.\n \n     All keys are expected to be strings. The structure remembers the\n@@ -71,7 +69,7 @@ class CaseInsensitiveDict(collections.MutableMapping):\n         )\n \n     def __eq__(self, other):\n-        if isinstance(other, collections.Mapping):\n+        if isinstance(other, Mapping):\n             other = CaseInsensitiveDict(other)\n         else:\n             return NotImplemented\n\n@@ -9,7 +9,6 @@ that are also useful for external consumption.\n \"\"\"\n \n import codecs\n-import collections\n import contextlib\n import io\n import os\n@@ -29,7 +28,7 @@ from .compat import parse_http_list as _parse_list_header\n from .compat import (\n     quote, urlparse, bytes, str, OrderedDict, unquote, getproxies,\n     proxy_bypass, urlunparse, basestring, integer_types, is_py3,\n-    proxy_bypass_environment, getproxies_environment)\n+    proxy_bypass_environment, getproxies_environment, Mapping)\n from .cookies import cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n from .exceptions import (\n@@ -301,7 +300,7 @@ def to_key_val_list(value):\n     if isinstance(value, (str, bytes, bool, int)):\n         raise ValueError('cannot encode objects that are not 2-tuples')\n \n-    if isinstance(value, collections.Mapping):\n+    if isinstance(value, Mapping):\n         value = value.items()\n \n     return list(value)\n\n@@ -29,6 +29,7 @@ from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n+from requests.compat import MutableMapping\n \n from .compat import StringIO, u\n from .utils import override_environ\n@@ -745,7 +746,7 @@ class TestRequests:\n             requests.post(url, files=['bad file data'])\n \n     def test_post_with_custom_mapping(self, httpbin):\n-        class CustomMapping(collections.MutableMapping):\n+        class CustomMapping(MutableMapping):\n             def __init__(self, *args, **kwargs):\n                 self.data = dict(*args, **kwargs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#991e8b76b7a9d21f698b24fa0058d3d5968721bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 1593 | Contributors (this commit): 38 | Commits (past 90d): 7 | Contributors (cumulative): 49 | DMM Complexity: None\n\nDIFF:\n@@ -57,10 +57,10 @@ def check_compatibility(urllib3_version, chardet_version):\n     # Check urllib3 for compatibility.\n     major, minor, patch = urllib3_version  # noqa: F811\n     major, minor, patch = int(major), int(minor), int(patch)\n-    # urllib3 >= 1.21.1, <= 1.22\n+    # urllib3 >= 1.21.1, <= 1.23\n     assert major == 1\n     assert minor >= 21\n-    assert minor <= 22\n+    assert minor <= 23\n \n     # Check chardet for compatibility.\n     major, minor, patch = chardet_version.split('.')[:3]\n\n@@ -5,10 +5,10 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.18.4'\n-__build__ = 0x021804\n+__version__ = '2.19.0'\n+__build__ = 0x021900\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2017 Kenneth Reitz'\n+__copyright__ = 'Copyright 2018 Kenneth Reitz'\n __cake__ = u'\\u2728 \\U0001f370 \\u2728'\n\n@@ -50,7 +50,7 @@ packages = ['requests']\n \n requires = [\n     'chardet>=3.0.2,<3.1.0',\n-    'idna>=2.5,<2.7',\n+    'idna>=2.5,<2.8',\n     'urllib3>=1.21.1,<1.24',\n     'certifi>=2017.4.17'\n \n@@ -90,7 +90,6 @@ setup(\n         'License :: OSI Approved :: Apache Software License',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2',\n-        'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n         'Programming Language :: Python :: 3.4',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8031ec76b88b8039b46a6c5782677746442a9121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 164 | Contributors (this commit): 14 | Commits (past 90d): 1 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -114,6 +114,7 @@ def _init():\n \n     global __doc__\n     __doc__ = (__doc__ + '\\n' +\n-               '\\n'.join(doc(code) for code in sorted(_codes)))\n+               '\\n'.join(doc(code) for code in sorted(_codes))\n+               if __doc__ is not None else None)\n \n _init()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#883caaf145fbe93bd0d208a6b864de9146087312", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 116 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.19.0'\n-__build__ = 0x021900\n+__version__ = '2.19.1'\n+__build__ = 0x021901\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1c13c5e6f35cf05c4de758714bc99919e9bbbb43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 3438 | Contributors (this commit): 93 | Commits (past 90d): 1 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -735,7 +735,12 @@ def session():\n     \"\"\"\n     Returns a :class:`Session` for context-management.\n \n+    .. deprecated:: 1.0.0\n+\n+        This method has been deprecated since version 1.0.0 and is only kept for\n+        backwards compatibility. New code should use :class:`~requests.sessions.Session`\n+        to create a session. This may be removed at a future date.\n+\n     :rtype: Session\n     \"\"\"\n-\n     return Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#28da72b61692c6c2ce11b4a41ce4d2984d190745", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4586 | Contributors (this commit): 69 | Commits (past 90d): 1 | Contributors (cumulative): 69 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1605,13 +1605,11 @@ class TestRequests:\n \n     def test_prepare_body_position_non_stream(self):\n         data = b'the data'\n-        s = requests.Session()\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position is None\n \n     def test_rewind_body(self):\n         data = io.BytesIO(b'the data')\n-        s = requests.Session()\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position == 0\n         assert prep.body.read() == b'the data'\n@@ -1625,7 +1623,6 @@ class TestRequests:\n \n     def test_rewind_partially_read_body(self):\n         data = io.BytesIO(b'the data')\n-        s = requests.Session()\n         data.read(4)  # read some data\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position == 4\n@@ -1650,7 +1647,6 @@ class TestRequests:\n                 return\n \n         data = BadFileObj('the data')\n-        s = requests.Session()\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position == 0\n \n@@ -1674,7 +1670,6 @@ class TestRequests:\n                 return\n \n         data = BadFileObj('the data')\n-        s = requests.Session()\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position == 0\n \n@@ -1695,7 +1690,6 @@ class TestRequests:\n                 return\n \n         data = BadFileObj('the data')\n-        s = requests.Session()\n         prep = requests.Request('GET', 'http://example.com', data=data).prepare()\n         assert prep._body_position is not None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5d9063828150c349dcafffefbd952b194817ba05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1230 | Contributors (this commit): 47 | Commits (past 90d): 1 | Contributors (cumulative): 47 | DMM Complexity: None\n\nDIFF:\n@@ -378,7 +378,7 @@ class HTTPAdapter(BaseAdapter):\n         when subclassing the\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n-        :param proxies: The url of the proxy being used for this request.\n+        :param proxy: The url of the proxy being used for this request.\n         :rtype: dict\n         \"\"\"\n         headers = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b1a360c2f1aca569476093348a9ee70eaab90da9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 166 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \n-\"\"\"\n+r\"\"\"\n The ``codes`` object defines a mapping from common names for HTTP statuses\n to their numerical codes, accessible either as attributes or as dictionary\n items.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2d1b4482c5916433a642d66c6b3d0cd28058b39e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 10 | Files Changed: 3 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 14429 | Contributors (this commit): 254 | Commits (past 90d): 6 | Contributors (cumulative): 325 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,8 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+        object to send in the body of the :class:`Request`.\n     :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n@@ -102,7 +103,8 @@ def post(url, data=None, json=None, **kwargs):\n     r\"\"\"Sends a POST request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+        object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n@@ -116,7 +118,8 @@ def put(url, data=None, **kwargs):\n     r\"\"\"Sends a PUT request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+        object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n@@ -130,7 +133,8 @@ def patch(url, data=None, **kwargs):\n     r\"\"\"Sends a PATCH request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+        object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n\n@@ -204,7 +204,9 @@ class Request(RequestHooksMixin):\n     :param url: URL to send.\n     :param headers: dictionary of headers to send.\n     :param files: dictionary of {filename: fileobject} files to multipart upload.\n-    :param data: the body to attach to the request. If a dictionary is provided, form-encoding will take place.\n+    :param data: the body to attach to the request. If a dictionary or\n+        list of tuples ``[(key, value)]`` is provided, form-encoding will\n+        take place.\n     :param json: json for the body to attach to the request (if files or data is not specified).\n     :param params: dictionary of URL parameters to append to the URL.\n     :param auth: Auth handler or (user, pass) tuple.\n\n@@ -453,8 +453,8 @@ class Session(SessionRedirectMixin):\n         :param url: URL for the new :class:`Request` object.\n         :param params: (optional) Dictionary or bytes to be sent in the query\n             string for the :class:`Request`.\n-        :param data: (optional) Dictionary, bytes, or file-like object to send\n-            in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+            object to send in the body of the :class:`Request`.\n         :param json: (optional) json to send in the body of the\n             :class:`Request`.\n         :param headers: (optional) Dictionary of HTTP Headers to send with the\n@@ -550,7 +550,8 @@ class Session(SessionRedirectMixin):\n         r\"\"\"Sends a POST request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+            object to send in the body of the :class:`Request`.\n         :param json: (optional) json to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         :rtype: requests.Response\n@@ -562,7 +563,8 @@ class Session(SessionRedirectMixin):\n         r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+            object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         :rtype: requests.Response\n         \"\"\"\n@@ -573,7 +575,8 @@ class Session(SessionRedirectMixin):\n         r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n+            object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         :rtype: requests.Response\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c008bf38836a2b5621ba7b352e9fcecacac4ee93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 10988 | Contributors (this commit): 206 | Commits (past 90d): 6 | Contributors (cumulative): 231 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,8 @@ def request(method, url, **kwargs):\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+    :param params: (optional) Dictionary, list of tuples or bytes to send\n+        in the body of the :class:`Request`.\n     :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n         object to send in the body of the :class:`Request`.\n     :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n@@ -63,7 +64,8 @@ def get(url, params=None, **kwargs):\n     r\"\"\"Sends a GET request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+    :param params: (optional) Dictionary, list of tuples or bytes to send\n+        in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n\n@@ -208,7 +208,9 @@ class Request(RequestHooksMixin):\n         list of tuples ``[(key, value)]`` is provided, form-encoding will\n         take place.\n     :param json: json for the body to attach to the request (if files or data is not specified).\n-    :param params: dictionary of URL parameters to append to the URL.\n+    :param params: URL parameters to append to the URL. If a dictionary or\n+        list of tuples ``[(key, value)]`` is provided, form-encoding will\n+        take place.\n     :param auth: Auth handler or (user, pass) tuple.\n     :param cookies: dictionary or CookieJar of cookies to attach to this request.\n     :param hooks: dictionary of callback hooks, for internal usage.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4d51e6d20179bdc906c45506c0817b6b677589ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 4596 | Contributors (this commit): 69 | Commits (past 90d): 2 | Contributors (cumulative): 69 | DMM Complexity: None\n\nDIFF:\n@@ -1400,7 +1400,7 @@ class TestRequests:\n         assert 'http://' in s2.adapters\n         assert 'https://' in s2.adapters\n \n-    def test_session_get_adapter_prefix_matching(self, httpbin):\n+    def test_session_get_adapter_prefix_matching(self):\n         prefix = 'https://example.com'\n         more_specific_prefix = prefix + '/some/path'\n \n@@ -1418,7 +1418,7 @@ class TestRequests:\n         assert s.get_adapter(url_matching_more_specific_prefix) is more_specific_prefix_adapter\n         assert s.get_adapter(url_not_matching_prefix) not in (prefix_adapter, more_specific_prefix_adapter)\n \n-    def test_session_get_adapter_prefix_matching_mixed_case(self, httpbin):\n+    def test_session_get_adapter_prefix_matching_mixed_case(self):\n         mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n         url_matching_prefix = mixed_case_prefix + '/full_url'\n \n@@ -1428,7 +1428,7 @@ class TestRequests:\n \n         assert s.get_adapter(url_matching_prefix) is my_adapter\n \n-    def test_session_get_adapter_prefix_matching_is_case_insensitive(self, httpbin):\n+    def test_session_get_adapter_prefix_matching_is_case_insensitive(self):\n         mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n         url_matching_prefix_with_different_case = 'HtTpS://exaMPLe.cOm/MiXeD_caSE_preFIX/another_url'\n \n@@ -1795,12 +1795,12 @@ class TestRequests:\n         proxies['one'].clear.assert_called_once_with()\n         proxies['two'].clear.assert_called_once_with()\n \n-    def test_proxy_auth(self, httpbin):\n+    def test_proxy_auth(self):\n         adapter = HTTPAdapter()\n         headers = adapter.proxy_headers(\"http://user:pass@httpbin.org\")\n         assert headers == {'Proxy-Authorization': 'Basic dXNlcjpwYXNz'}\n \n-    def test_proxy_auth_empty_pass(self, httpbin):\n+    def test_proxy_auth_empty_pass(self):\n         adapter = HTTPAdapter()\n         headers = adapter.proxy_headers(\"http://user:@httpbin.org\")\n         assert headers == {'Proxy-Authorization': 'Basic dXNlcjo='}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#691e9520ed1ed7d1d686f2fa1cc76a1d5c24e335", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 4602 | Contributors (this commit): 70 | Commits (past 90d): 3 | Contributors (cumulative): 70 | DMM Complexity: 1.0\n\nDIFF:\n@@ -868,6 +868,12 @@ class TestRequests:\n         assert r.status_code == 200\n         assert r.url == httpbin('get?test=foo&test=baz')\n \n+    def test_form_encoded_post_query_multivalued_element(self, httpbin):\n+        r = requests.Request(method='POST', url=httpbin('post'),\n+                             data=dict(test=['foo', 'baz']))\n+        prep = r.prepare()\n+        assert prep.body == 'test=foo&test=baz'\n+\n     def test_different_encodings_dont_break_post(self, httpbin):\n         r = requests.post(httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6686ac173011a302c26c4aedbd992f96d6e58357", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 660 | Contributors (this commit): 29 | Commits (past 90d): 6 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -95,6 +95,7 @@ setup(\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n         'Programming Language :: Python :: Implementation :: CPython',\n         'Programming Language :: Python :: Implementation :: PyPy'\n     ),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#907c927d60f4ba3f09cf3574a5ae90ab76aa1717", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4471 | Contributors (this commit): 92 | Commits (past 90d): 2 | Contributors (cumulative): 114 | DMM Complexity: None\n\nDIFF:\n@@ -466,7 +466,7 @@ def _parse_content_type_header(header):\n             if index_of_equals != -1:\n                 key = param[:index_of_equals].strip(items_to_strip)\n                 value = param[index_of_equals + 1:].strip(items_to_strip)\n-            params_dict[key] = value\n+            params_dict[key.lower()] = value\n     return content_type, params_dict\n \n \n\n@@ -480,6 +480,10 @@ def test_parse_dict_header(value, expected):\n             'application/json ; charset=utf-8',\n             ('application/json', {'charset': 'utf-8'})\n         ),\n+        (\n+            'application/json ; Charset=utf-8',\n+            ('application/json', {'charset': 'utf-8'})\n+        ),\n         (\n             'text/plain',\n             ('text/plain', {})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#72d96a67ef5db73dcc419a7a24d0ed0be26931fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1121 | Contributors (this commit): 30 | Commits (past 90d): 1 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -511,6 +511,7 @@ def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n     :param cookiejar: (optional) A cookiejar to add the cookies to.\n     :param overwrite: (optional) If False, will not replace cookies\n         already in the jar with new ones.\n+    :rtype: CookieJar\n     \"\"\"\n     if cookiejar is None:\n         cookiejar = RequestsCookieJar()\n@@ -529,6 +530,7 @@ def merge_cookies(cookiejar, cookies):\n \n     :param cookiejar: CookieJar object to add the cookies to.\n     :param cookies: Dictionary or CookieJar object to be added.\n+    :rtype: CookieJar\n     \"\"\"\n     if not isinstance(cookiejar, cookielib.CookieJar):\n         raise ValueError('You can only merge into CookieJar')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#489f58ced52fc298c38534ecbed2c29ca8a126dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 665 | Contributors (this commit): 29 | Commits (past 90d): 5 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,5 @@\n #!/usr/bin/env python\n # Learn more: https://github.com/kennethreitz/setup.py\n-\n import os\n import re\n import sys\n@@ -83,7 +82,7 @@ setup(\n     install_requires=requires,\n     license=about['__license__'],\n     zip_safe=False,\n-    classifiers=(\n+    classifiers=[\n         'Development Status :: 5 - Production/Stable',\n         'Intended Audience :: Developers',\n         'Natural Language :: English',\n@@ -98,7 +97,7 @@ setup(\n         'Programming Language :: Python :: 3.7',\n         'Programming Language :: Python :: Implementation :: CPython',\n         'Programming Language :: Python :: Implementation :: PyPy'\n-    ),\n+    ],\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n     extras_require={\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5aa6a9b654cca5666a2e5715936f1694ce8d5ee4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 554 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -376,4 +376,7 @@ epub_exclude_files = ['search.html']\n # If false, no index is generated.\n #epub_use_index = True\n \n-intersphinx_mapping = {'urllib3': ('https://urllib3.readthedocs.io/en/latest', None)}\n+intersphinx_mapping = {\n+    'python': ('https://docs.python.org/3/', None),\n+    'urllib3': ('https://urllib3.readthedocs.io/en/latest', None),\n+}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8023a01dba6f7d6c2ae0336c59a368929ef26ac3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 4476 | Contributors (this commit): 93 | Commits (past 90d): 5 | Contributors (cumulative): 116 | DMM Complexity: 0.0\n\nDIFF:\n@@ -706,6 +706,10 @@ def should_bypass_proxies(url, no_proxy):\n         no_proxy = get_proxy('no_proxy')\n     parsed = urlparse(url)\n \n+    if parsed.hostname is None:\n+        # URLs don't always have hostnames, e.g. file:/// urls.\n+        return True\n+\n     if no_proxy:\n         # We need to check whether we match here. We need to see if we match\n         # the end of the hostname, both with and without the port.\n\n@@ -622,6 +622,7 @@ def test_urldefragauth(url, expected):\n             ('http://172.16.1.12/', False),\n             ('http://172.16.1.12:5000/', False),\n             ('http://google.com:5000/v1.0/', False),\n+            ('file:///some/path/on/disk', True),\n     ))\n def test_should_bypass_proxies(url, expected, monkeypatch):\n     \"\"\"Tests for function should_bypass_proxies to check if proxy\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d1fab0b60ce040b9789d5854719a631aa7fe9802", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 339 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -267,7 +267,7 @@ def test_fragment_not_sent_with_request():\n \n def test_fragment_update_on_redirect():\n     \"\"\"Verify we only append previous fragment if one doesn't exist on new\n-    location. If a new fragment is encounterd in a Location header, it should\n+    location. If a new fragment is encountered in a Location header, it should\n     be added to all subsequent requests.\n     \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3331e2aecdbf575dd60abef4df79c52d78610a83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 16 | Churn Cumulative: 8069 | Contributors (this commit): 143 | Commits (past 90d): 7 | Contributors (cumulative): 166 | DMM Complexity: 0.0\n\nDIFF:\n@@ -242,7 +242,9 @@ class SessionRedirectMixin(object):\n             original_parsed = urlparse(response.request.url)\n             redirect_parsed = urlparse(url)\n \n-            if (original_parsed.hostname != redirect_parsed.hostname):\n+            if (original_parsed.hostname != redirect_parsed.hostname\n+                    or original_parsed.port != redirect_parsed.port\n+                    or original_parsed.scheme != redirect_parsed.scheme):\n                 del headers['Authorization']\n \n         # .netrc might have more auth for us on our new host.\n\n@@ -1581,7 +1581,17 @@ class TestRequests:\n             auth=('user', 'pass'),\n         )\n         assert r.history[0].request.headers['Authorization']\n-        assert not r.request.headers.get('Authorization', '')\n+        assert 'Authorization' not in r.request.headers\n+\n+    def test_auth_is_stripped_on_scheme_redirect(self, httpbin, httpbin_secure, httpbin_ca_bundle):\n+        r = requests.get(\n+            httpbin_secure('redirect-to'),\n+            params={'url': httpbin('get')},\n+            auth=('user', 'pass'),\n+            verify=httpbin_ca_bundle\n+        )\n+        assert r.history[0].request.headers['Authorization']\n+        assert 'Authorization' not in r.request.headers\n \n     def test_auth_is_retained_for_redirect_on_host(self, httpbin):\n         r = requests.get(httpbin('redirect/1'), auth=('user', 'pass'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#857e9b7ac20c3accf4cc328f594aecb8b6a644a6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 18 | Files Changed: 2 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/5 | Churn Δ: 57 | Churn Cumulative: 8126 | Contributors (this commit): 143 | Commits (past 90d): 9 | Contributors (cumulative): 166 | DMM Complexity: 1.0\n\nDIFF:\n@@ -115,6 +115,22 @@ class SessionRedirectMixin(object):\n             return to_native_string(location, 'utf8')\n         return None\n \n+    def should_strip_auth(self, old_url, new_url):\n+        \"\"\"Decide whether Authorization header should be removed when redirecting\"\"\"\n+        old_parsed = urlparse(old_url)\n+        new_parsed = urlparse(new_url)\n+        if old_parsed.hostname != new_parsed.hostname:\n+            return True\n+        # Special case: allow http -> https redirect when using the standard\n+        # ports. This isn't specified by RFC 7235, but is kept to avoid\n+        # breaking backwards compatibility with older versions of requests\n+        # that allowed any redirects on the same host.\n+        if (old_parsed.scheme == 'http' and old_parsed.port in (80, None)\n+                and new_parsed.scheme == 'https' and new_parsed.port in (443, None)):\n+            return False\n+        # Standard case: root URI must match\n+        return old_parsed.port != new_parsed.port or old_parsed.scheme != new_parsed.scheme\n+\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):\n         \"\"\"Receives a Response. Returns a generator of Responses or Requests.\"\"\"\n@@ -236,15 +252,9 @@ class SessionRedirectMixin(object):\n         headers = prepared_request.headers\n         url = prepared_request.url\n \n-        if 'Authorization' in headers:\n+        if 'Authorization' in headers and self.should_strip_auth(response.request.url, url):\n             # If we get redirected to a new host, we should strip out any\n             # authentication headers.\n-            original_parsed = urlparse(response.request.url)\n-            redirect_parsed = urlparse(url)\n-\n-            if (original_parsed.hostname != redirect_parsed.hostname\n-                    or original_parsed.port != redirect_parsed.port\n-                    or original_parsed.scheme != redirect_parsed.scheme):\n             del headers['Authorization']\n \n         # .netrc might have more auth for us on our new host.\n\n@@ -1573,17 +1573,7 @@ class TestRequests:\n             preq = req.prepare()\n             assert test_url == preq.url\n \n-    @pytest.mark.xfail(raises=ConnectionError)\n-    def test_auth_is_stripped_on_redirect_off_host(self, httpbin):\n-        r = requests.get(\n-            httpbin('redirect-to'),\n-            params={'url': 'http://www.google.co.uk'},\n-            auth=('user', 'pass'),\n-        )\n-        assert r.history[0].request.headers['Authorization']\n-        assert 'Authorization' not in r.request.headers\n-\n-    def test_auth_is_stripped_on_scheme_redirect(self, httpbin, httpbin_secure, httpbin_ca_bundle):\n+    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):\n         r = requests.get(\n             httpbin_secure('redirect-to'),\n             params={'url': httpbin('get')},\n@@ -1600,6 +1590,27 @@ class TestRequests:\n \n         assert h1 == h2\n \n+    def test_should_strip_auth_host_change(self):\n+        s = requests.Session()\n+        assert s.should_strip_auth('http://example.com/foo', 'http://another.example.com/')\n+\n+    def test_should_strip_auth_http_downgrade(self):\n+        s = requests.Session()\n+        assert s.should_strip_auth('https://example.com/foo', 'http://example.com/bar')\n+\n+    def test_should_strip_auth_https_upgrade(self):\n+        s = requests.Session()\n+        assert not s.should_strip_auth('http://example.com/foo', 'https://example.com/bar')\n+        assert not s.should_strip_auth('http://example.com:80/foo', 'https://example.com/bar')\n+        assert not s.should_strip_auth('http://example.com/foo', 'https://example.com:443/bar')\n+        # Non-standard ports should trigger stripping\n+        assert s.should_strip_auth('http://example.com:8080/foo', 'https://example.com/bar')\n+        assert s.should_strip_auth('http://example.com/foo', 'https://example.com:8443/bar')\n+\n+    def test_should_strip_auth_port_change(self):\n+        s = requests.Session()\n+        assert s.should_strip_auth('http://example.com:1234/foo', 'https://example.com:4321/bar')\n+\n     def test_manual_redirect_with_partial_body_read(self, httpbin):\n         s = requests.Session()\n         r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b9dfc95cf236471f1b620d5152a800753d764315", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 674 | Contributors (this commit): 30 | Commits (past 90d): 3 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -54,7 +54,14 @@ requires = [\n     'certifi>=2017.4.17'\n \n ]\n-test_requirements = ['pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock', 'pytest-xdist', 'PySocks>=1.5.6, !=1.5.7', 'pytest>=2.8.0']\n+test_requirements = [\n+    'pytest-httpbin==0.0.7',\n+    'pytest-cov',\n+    'pytest-mock',\n+    'pytest-xdist',\n+    'PySocks>=1.5.6, !=1.5.7',\n+    'pytest>=2.8.0'\n+]\n \n about = {}\n with open(os.path.join(here, 'requests', '__version__.py'), 'r', 'utf-8') as f:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eea96f94d9501f9a04d7e2c0a02096871af012c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 682 | Contributors (this commit): 30 | Commits (past 90d): 4 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -67,17 +67,17 @@ about = {}\n with open(os.path.join(here, 'requests', '__version__.py'), 'r', 'utf-8') as f:\n     exec(f.read(), about)\n \n-with open('README.rst', 'r', 'utf-8') as f:\n+with open('README.md', 'r', 'utf-8') as f:\n     readme = f.read()\n-with open('HISTORY.rst', 'r', 'utf-8') as f:\n+with open('HISTORY.md', 'r', 'utf-8') as f:\n     history = f.read()\n \n setup(\n     name=about['__title__'],\n     version=about['__version__'],\n     description=about['__description__'],\n-    long_description=readme + '\\n\\n' + history,\n-    long_description_content_type='text/x-rst',\n+    long_description=readme,\n+    long_description_content_type='text/markdown',\n     author=about['__author__'],\n     author_email=about['__author_email__'],\n     url=about['__url__'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b0ad2499c8641d29affc90f565e6628d333d2a96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 5 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 18323 | Contributors (this commit): 317 | Commits (past 90d): 13 | Contributors (cumulative): 440 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ usage:\n ... or POST:\n \n    >>> payload = dict(key1='value1', key2='value2')\n-   >>> r = requests.post('http://httpbin.org/post', data=payload)\n+   >>> r = requests.post('https://httpbin.org/post', data=payload)\n    >>> print(r.text)\n    {\n      ...\n\n@@ -49,7 +49,7 @@ def request(method, url, **kwargs):\n     Usage::\n \n       >>> import requests\n-      >>> req = requests.request('GET', 'http://httpbin.org/get')\n+      >>> req = requests.request('GET', 'https://httpbin.org/get')\n       <Response [200]>\n     \"\"\"\n \n\n@@ -218,7 +218,7 @@ class Request(RequestHooksMixin):\n     Usage::\n \n       >>> import requests\n-      >>> req = requests.Request('GET', 'http://httpbin.org/get')\n+      >>> req = requests.Request('GET', 'https://httpbin.org/get')\n       >>> req.prepare()\n       <PreparedRequest [GET]>\n     \"\"\"\n@@ -278,7 +278,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     Usage::\n \n       >>> import requests\n-      >>> req = requests.Request('GET', 'http://httpbin.org/get')\n+      >>> req = requests.Request('GET', 'https://httpbin.org/get')\n       >>> r = req.prepare()\n       <PreparedRequest [GET]>\n \n\n@@ -311,7 +311,7 @@ class SessionRedirectMixin(object):\n         \"\"\"\n         method = prepared_request.method\n \n-        # http://tools.ietf.org/html/rfc7231#section-6.4.4\n+        # https://tools.ietf.org/html/rfc7231#section-6.4.4\n         if response.status_code == codes.see_other and method != 'HEAD':\n             method = 'GET'\n \n@@ -337,13 +337,13 @@ class Session(SessionRedirectMixin):\n \n       >>> import requests\n       >>> s = requests.Session()\n-      >>> s.get('http://httpbin.org/get')\n+      >>> s.get('https://httpbin.org/get')\n       <Response [200]>\n \n     Or as a context manager::\n \n       >>> with requests.Session() as s:\n-      >>>     s.get('http://httpbin.org/get')\n+      >>>     s.get('https://httpbin.org/get')\n       <Response [200]>\n     \"\"\"\n \n\n@@ -176,7 +176,7 @@ def get_netrc_auth(url, raise_errors=False):\n                 loc = os.path.expanduser('~/{0}'.format(f))\n             except KeyError:\n                 # os.path.expanduser can fail when $HOME is undefined and\n-                # getpwuid fails. See http://bugs.python.org/issue20164 &\n+                # getpwuid fails. See https://bugs.python.org/issue20164 &\n                 # https://github.com/requests/requests/issues/1846\n                 return\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
