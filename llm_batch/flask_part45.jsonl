{"custom_id": "flask#224367fe98a056ffda7452eddd8f7c33fa2214c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 19 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,5 +11,5 @@\n \n \n if __name__ == '__main__':\n-    from cli import main\n+    from .cli import main\n     main(as_module=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7321a480ea60ee212b06cd6698e1e3ab62b5e7f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 28 | Churn Cumulative: 4369 | Contributors (this commit): 42 | Commits (past 90d): 20 | Contributors (cumulative): 43 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,6 +11,7 @@\n \n import os\n import sys\n+import click\n from threading import Lock\n from datetime import timedelta\n from itertools import chain\n@@ -34,7 +35,6 @@ from .templating import DispatchingJinjaLoader, Environment, \\\n      _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n      request_tearing_down, appcontext_tearing_down\n-from .cli import make_default_cli\n from ._compat import reraise, string_types, text_type, integer_types\n \n # a lock used for logger initialization\n@@ -544,7 +544,7 @@ class Flask(_PackageBoundObject):\n         #: provided by Flask itself and can be overridden.\n         #:\n         #: This is an instance of a :class:`click.Group` object.\n-        self.cli = make_default_cli(self)\n+        self.cli = click.Group(self)\n \n     def _get_error_handlers(self):\n         from warnings import warn\n\n@@ -131,12 +131,6 @@ class DispatchingApp(object):\n             return rv(environ, start_response)\n \n \n-def _no_such_app():\n-    raise NoAppException('Could not locate Flask application. '\n-                         'You did not provide FLASK_APP or the '\n-                         '--app parameter.')\n-\n-\n class ScriptInfo(object):\n     \"\"\"Help object to deal with Flask applications.  This is usually not\n     necessary to interface with as it's used internally in the dispatching\n@@ -168,7 +162,9 @@ class ScriptInfo(object):\n             rv = self.create_app(self)\n         else:\n             if self.app_import_path is None:\n-                _no_such_app()\n+                raise NoAppException('Could not locate Flask application. '\n+                                     'You did not provide FLASK_APP or the '\n+                                     '--app parameter.')\n             rv = locate_app(self.app_import_path)\n         if self.debug is not None:\n             rv.debug = self.debug\n@@ -418,17 +414,7 @@ def shell_command():\n     code.interact(banner=banner, local=app.make_shell_context())\n \n \n-def make_default_cli(app):\n-    \"\"\"Creates the default click object for the app itself.  Currently\n-    there are no default commands registered because all builtin commands\n-    are registered on the actual cmd object here.\n-    \"\"\"\n-    return click.Group()\n-\n-\n-@click.group(cls=FlaskGroup)\n-def cli(**params):\n-    \"\"\"\n+cli = FlaskGroup(help=\"\"\"\\\n This shell command acts as general utility script for Flask applications.\n \n It loads the application configured (either through the FLASK_APP environment\n@@ -440,7 +426,7 @@ def cli(**params):\n Example usage:\n \n   flask --app=hello --debug run\n-    \"\"\"\n+\"\"\")\n \n \n def main(as_module=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#937ad10275af3e190dcb63df926812a57d1e3e7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 912 | Contributors (this commit): 3 | Commits (past 90d): 15 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -39,13 +39,8 @@ def find_best_app(module):\n     matches = [v for k, v in iteritems(module.__dict__)\n                if isinstance(v, Flask)]\n \n-    if matches:\n-        if len(matches) > 1:\n-            raise NoAppException('More than one possible Flask application '\n-                                 'found in module \"%s\", none of which are called '\n-                                 '\"app\".  Be explicit!' % module.__name__)\n+    if len(matches) == 1:\n         return matches[0]\n-\n     raise NoAppException('Failed to find application in module \"%s\".  Are '\n                          'you sure it contains a Flask application?  Maybe '\n                          'you wrapped it in a WSGI middleware or you are '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1f5927eee2288b4aaf508af5dc1f148aa2140d91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3466 | Contributors (this commit): 41 | Commits (past 90d): 7 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -167,7 +167,7 @@ class Flask(_PackageBoundObject):\n     #:\n     #: In Flask 0.9 this property was called `request_globals_class` but it\n     #: was changed in 0.10 to :attr:`app_ctx_globals_class` because the\n-    #: flask.g object is not application context scoped.\n+    #: flask.g object is now application context scoped.\n     #:\n     #: .. versionadded:: 0.10\n     app_ctx_globals_class = _AppCtxGlobals\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4541910381e5c3836e4c00b480653f058b149f6f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 14 | Churn Cumulative: 613 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -52,12 +52,6 @@ class SessionMixin(object):\n     modified = True\n \n \n-class TaggedJSONSerializer(object):\n-    \"\"\"A customized JSON serializer that supports a few extra types that\n-    we take for granted when serializing (tuples, markup objects, datetime).\n-    \"\"\"\n-\n-    def dumps(self, value):\n def _tag(value):\n     if isinstance(value, tuple):\n         return {' t': [_tag(x) for x in value]}\n@@ -82,6 +76,14 @@ class TaggedJSONSerializer(object):\n                 u'which can only store unicode strings.  Consider '\n                 u'base64 encoding your string (String was %r)' % value)\n     return value\n+\n+\n+class TaggedJSONSerializer(object):\n+    \"\"\"A customized JSON serializer that supports a few extra types that\n+    we take for granted when serializing (tuples, markup objects, datetime).\n+    \"\"\"\n+\n+    def dumps(self, value):\n         return json.dumps(_tag(value), separators=(',', ':'))\n \n     def loads(self, value):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb0c8a6beea766812fb94712c27ed6e1e99d6249", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 18 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,3 +5,6 @@ app = Flask(__name__)\n app.register_blueprint(simple_page)\n # Blueprint can be registered many times\n app.register_blueprint(simple_page, url_prefix='/pages')\n+\n+if __name__=='__main__':\n+  app.run()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aa40b1731e09e839502994b3b0c22d3f2361d045", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 12/7 | Churn Δ: 50 | Churn Cumulative: 728 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: 0.6\n\nDIFF:\n@@ -193,6 +193,28 @@ class Config(dict):\n                 self[key] = obj[key]\n         return True\n \n+    def from_mapping(self, *mapping, **kwargs):\n+        \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n+        keys.\n+\n+        .. versionadded:: 1.0\n+        \"\"\"\n+        mappings = []\n+        if len(mapping) == 1:\n+            if hasattr(mapping[0], 'items'):\n+                mappings.append(mapping[0].items())\n+            else:\n+                mappings.append(mapping[0])\n+        elif len(mapping) > 1:\n+            raise TypeError(\n+                'expected at most 1 positional argument, got %d' % len(mapping)\n+            )\n+        mappings.append(kwargs.items())\n+        for mapping in mappings:\n+            for (key, value) in mapping:\n+                if key.isupper():\n+                    self[key] = value\n+\n     def get_namespace(self, namespace, lowercase=True):\n         \"\"\"Returns a dictionary containing a subset of configuration options\n         that match the specified namespace/prefix. Example usage::\n\n@@ -47,6 +47,34 @@ class ConfigTestCase(FlaskTestCase):\n         app.config.from_json(os.path.join(current_dir, 'static', 'config.json'))\n         self.common_object_test(app)\n \n+    def test_config_from_mapping(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_mapping({\n+            'SECRET_KEY': 'devkey',\n+            'TEST_KEY': 'foo'\n+        })\n+        self.common_object_test(app)\n+\n+        app = flask.Flask(__name__)\n+        app.config.from_mapping([\n+            ('SECRET_KEY', 'devkey'),\n+            ('TEST_KEY', 'foo')\n+        ])\n+        self.common_object_test(app)\n+\n+        app = flask.Flask(__name__)\n+        app.config.from_mapping(\n+            SECRET_KEY='devkey',\n+            TEST_KEY='foo'\n+        )\n+        self.common_object_test(app)\n+\n+        app = flask.Flask(__name__)\n+        with self.assert_raises(TypeError):\n+            app.config.from_mapping(\n+                {}, {}\n+            )\n+\n     def test_config_from_class(self):\n         class Base(object):\n             TEST_KEY = 'foo'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#486c1089b0ce968b74e81649cdceb0e158157036", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 10 | Churn Cumulative: 180 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -167,8 +167,8 @@ class Config(dict):\n \n     def from_json(self, filename, silent=False):\n         \"\"\"Updates the values in the config from a JSON file. This function\n-        behaves as if the JSON object was a dictionary and passed ot the\n-        :meth:`from_object` function.\n+        behaves as if the JSON object was a dictionary and passed to the\n+        :meth:`from_mapping` function.\n \n         :param filename: the filename of the JSON file.  This can either be an\n                          absolute filename or a filename relative to the\n@@ -188,10 +188,7 @@ class Config(dict):\n                 return False\n             e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n             raise\n-        for key in obj.keys():\n-            if key.isupper():\n-                self[key] = obj[key]\n-        return True\n+        return self.from_mapping(obj)\n \n     def from_mapping(self, *mapping, **kwargs):\n         \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n@@ -214,6 +211,7 @@ class Config(dict):\n             for (key, value) in mapping:\n                 if key.isupper():\n                     self[key] = value\n+        return True\n \n     def get_namespace(self, namespace, lowercase=True):\n         \"\"\"Returns a dictionary containing a subset of configuration options\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b49074eb6b19d8f5fdb3301a6e50f11845dd530d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1720 | Contributors (this commit): 29 | Commits (past 90d): 1 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -248,7 +248,10 @@ def url_for(endpoint, **values):\n       address can be changed via `SERVER_NAME` configuration variable which\n       defaults to `localhost`.\n     :param _scheme: a string specifying the desired URL scheme. The `_external`\n-      parameter must be set to `True` or a `ValueError` is raised.\n+      parameter must be set to `True` or a `ValueError` is raised. The default\n+      behavior uses the same scheme as the current request, or\n+      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n+      request context is available.\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f6d25bbc4f95112e9f5f85096d12a61ed43b38b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1203 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -192,11 +192,11 @@ def without_appcontext(f):\n     return f\n \n \n-def set_debug_value(ctx, value):\n+def set_debug_value(ctx, param, value):\n     ctx.ensure_object(ScriptInfo).debug = value\n \n \n-def set_app_value(ctx, value):\n+def set_app_value(ctx, param, value):\n     if value is not None:\n         if os.path.isfile(value):\n             value = prepare_exec_for_file(value)\n\n@@ -100,7 +100,7 @@ setup(\n         'Werkzeug>=0.7',\n         'Jinja2>=2.4',\n         'itsdangerous>=0.21',\n-        'click>=0.6',\n+        'click>=2.0',\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#66ef55ce0a9a1caa66a4d955d831f7eb8a207993", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 918 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -319,7 +319,7 @@ def script_info_option(*args, **kwargs):\n         raise TypeError('script_info_key not provided.')\n \n     real_callback = kwargs.get('callback')\n-    def callback(ctx, value):\n+    def callback(ctx, param, value):\n         if real_callback is not None:\n             value = real_callback(ctx, value)\n         ctx.ensure_object(ScriptInfo).data[key] = value\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#932f7d7cbb5a4e04fd0922c3272a6e32d408abe8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 36 | Files Changed: 2 | Hunks: 10 | Methods Changed: 9 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 79 | Churn Cumulative: 4463 | Contributors (this commit): 43 | Commits (past 90d): 4 | Contributors (cumulative): 44 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,7 +24,7 @@ from werkzeug.exceptions import HTTPException, InternalServerError, \\\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n      locked_cached_property, _endpoint_from_view_func, find_package\n-from . import json\n+from . import json, cli\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n from .ctx import RequestContext, AppContext, _AppCtxGlobals\n@@ -544,7 +544,7 @@ class Flask(_PackageBoundObject):\n         #: provided by Flask itself and can be overridden.\n         #:\n         #: This is an instance of a :class:`click.Group` object.\n-        self.cli = click.Group(self)\n+        self.cli = cli.AppGroup(self)\n \n     def _get_error_handlers(self):\n         from warnings import warn\n\n@@ -12,7 +12,7 @@\n import os\n import sys\n from threading import Lock\n-from contextlib import contextmanager\n+from functools import update_wrapper\n \n import click\n \n@@ -166,30 +166,21 @@ class ScriptInfo(object):\n         self._loaded_app = rv\n         return rv\n \n-    @contextmanager\n-    def conditional_context(self, with_context=True):\n-        \"\"\"Creates an application context or not, depending on the given\n-        parameter but always works as context manager.  This is just a\n-        shortcut for a common operation.\n+\n+pass_script_info = click.make_pass_decorator(ScriptInfo, ensure=True)\n+\n+\n+def with_appcontext(f):\n+    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n+    script's application context.  If callbacks are registered directly\n+    to the ``app.cli`` object then they are wrapped with this function\n+    by default unless it's disabled.\n     \"\"\"\n-        if with_context:\n-            with self.load_app().app_context() as ctx:\n-                yield ctx\n-        else:\n-            yield None\n-\n-\n-pass_script_info = click.make_pass_decorator(ScriptInfo)\n-\n-\n-def without_appcontext(f):\n-    \"\"\"Marks a click callback so that it does not get a app context\n-    created.  This only works for commands directly registered to\n-    the toplevel system.  This really is only useful for very\n-    special commands like the runserver one.\n-    \"\"\"\n-    f.__flask_without_appcontext__ = True\n-    return f\n+    @click.pass_context\n+    def decorator(__ctx, *args, **kwargs):\n+        with __ctx.ensure_object(ScriptInfo).load_app().app_context():\n+            return __ctx.invoke(f, *args, **kwargs)\n+    return update_wrapper(decorator, f)\n \n \n def set_debug_value(ctx, param, value):\n@@ -220,7 +211,7 @@ class FlaskGroup(click.Group):\n     more commands from the configured Flask app.  Normally a developer\n     does not have to interface with this class but there are some very\n     advanced usecases for which it makes sense to create an instance of\n-    this.\n+    this.  Not to be confused with :class:`AppGroup`.\n \n     For information as of why this is useful see :ref:`custom-scripts`.\n \n@@ -286,14 +277,6 @@ class FlaskGroup(click.Group):\n             pass\n         return sorted(rv)\n \n-    def invoke_subcommand(self, ctx, cmd, cmd_name, args):\n-        with_context = cmd.callback is None or \\\n-           not getattr(cmd.callback, '__flask_without_appcontext__', False)\n-\n-        with ctx.find_object(ScriptInfo).conditional_context(with_context):\n-            return click.Group.invoke_subcommand(\n-                self, ctx, cmd, cmd_name, args)\n-\n     def main(self, *args, **kwargs):\n         obj = kwargs.get('obj')\n         if obj is None:\n@@ -303,6 +286,30 @@ class FlaskGroup(click.Group):\n         return click.Group.main(self, *args, **kwargs)\n \n \n+class AppGroup(click.Group):\n+    \"\"\"This works similar to a regular click :class:`~click.Group` but it\n+    changes the behavior of the :meth:`command` decorator so that it\n+    automatically wraps the functions in :func:`with_appcontext`.\n+\n+    Not to be confused with :class:`FlaskGroup`.\n+    \"\"\"\n+\n+    def __init__(self, app):\n+        click.Group.__init__(self)\n+\n+    def command(self, *args, **kwargs):\n+        \"\"\"This works exactly like the method of the same name on a regular\n+        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n+        unless it's disabled by passing ``with_appcontext=False``.\n+        \"\"\"\n+        wrap_for_ctx = kwargs.pop('with_appcontext', True)\n+        def decorator(f):\n+            if wrap_for_ctx:\n+                f = with_appcontext(f)\n+            return click.Group.command(*args, **kwargs)(f)\n+        return decorator\n+\n+\n def script_info_option(*args, **kwargs):\n     \"\"\"This decorator works exactly like :func:`click.option` but is eager\n     by default and stores the value in the :attr:`ScriptInfo.data`.  This\n@@ -346,7 +353,6 @@ def script_info_option(*args, **kwargs):\n               'loading is enabled if the reloader is disabled.')\n @click.option('--with-threads/--without-threads', default=False,\n               help='Enable or disable multithreading.')\n-@without_appcontext\n @pass_script_info\n def run_command(info, host, port, reload, debugger, eager_loading,\n                 with_threads):\n@@ -388,6 +394,7 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n \n \n @click.command('shell', short_help='Runs a shell in the app context.')\n+@with_appcontext\n def shell_command():\n     \"\"\"Runs an interactive Python shell in the context of a given\n     Flask application.  The application will populate the default\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#20645d9b86d6a0e4969d71d2d36300659861de35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3472 | Contributors (this commit): 42 | Commits (past 90d): 2 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -85,7 +85,7 @@ class Flask(_PackageBoundObject):\n \n     .. admonition:: About the First Parameter\n \n-        The idea of the first parameter is to give Flask an idea what\n+        The idea of the first parameter is to give Flask an idea of what\n         belongs to your application.  This name is used to find resources\n         on the file system, can be used by extensions to improve debugging\n         information and a lot more.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d1821b3a076043c350af77e69f8280d0c6695145", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 379 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -246,9 +246,11 @@ latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n intersphinx_mapping = {\n     'https://docs.python.org/dev': None,\n     'http://werkzeug.pocoo.org/docs/': None,\n+    'http://click.pocoo.org/': None,\n+    'http://jinja.pocoo.org/docs/': None,\n     'http://www.sqlalchemy.org/docs/': None,\n-    'http://wtforms.simplecodes.com/docs/0.5/': None,\n-    'http://discorporate.us/projects/Blinker/docs/1.1/': None\n+    'https://wtforms.readthedocs.org/en/latest/': None,\n+    'https://pythonhosted.org/blinker/': None\n }\n \n pygments_style = 'flask_theme_support.FlaskyStyle'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2f601248941c7a90ed62f2bd5adbb04c402e2d4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 996 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -294,9 +294,6 @@ class AppGroup(click.Group):\n     Not to be confused with :class:`FlaskGroup`.\n     \"\"\"\n \n-    def __init__(self, app):\n-        click.Group.__init__(self)\n-\n     def command(self, *args, **kwargs):\n         \"\"\"This works exactly like the method of the same name on a regular\n         :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9123fa3b8ff7f5fe159344b7dc11e9a4d727e2be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 998 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -303,7 +303,7 @@ class AppGroup(click.Group):\n         def decorator(f):\n             if wrap_for_ctx:\n                 f = with_appcontext(f)\n-            return click.Group.command(*args, **kwargs)(f)\n+            return click.Group.command(self, *args, **kwargs)(f)\n         return decorator\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9bf36151d956d9560f68f3789ee438233d530a86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 3473 | Contributors (this commit): 42 | Commits (past 90d): 3 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,6 @@\n \n import os\n import sys\n-import click\n from threading import Lock\n from datetime import timedelta\n from itertools import chain\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#662b1053a437cd4ce5ce6ad71f6a8f8a8039d5d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 1011 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -410,7 +410,18 @@ def shell_command():\n         app.debug and ' [debug]' or '',\n         app.instance_path,\n     )\n-    code.interact(banner=banner, local=app.make_shell_context())\n+    ctx = {}\n+\n+    # Support the regular Python interpreter startup script if someone\n+    # is using it.\n+    startup = os.environ.get('PYTHONSTARTUP')\n+    if startup and os.path.isfile(startup):\n+        with open(startup, 'r') as f:\n+            eval(compile(f.read(), startup, 'exec'), ctx)\n+\n+    ctx.update(app.make_shell_context())\n+\n+    code.interact(banner=banner, local=ctx)\n \n \n cli = FlaskGroup(help=\"\"\"\\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#84ad89ffa4390d3327b4d35983dbb4d84293b8e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 20 | Files Changed: 6 | Hunks: 15 | Methods Changed: 13 | Complexity Δ (Sum/Max): 13/7 | Churn Δ: 66 | Churn Cumulative: 8549 | Contributors (this commit): 53 | Commits (past 90d): 9 | Contributors (cumulative): 81 | DMM Complexity: 1.0\n\nDIFF:\n@@ -260,18 +260,6 @@ class Flask(_PackageBoundObject):\n     #: will be removed in favor of Blueprints\n     enable_modules = True\n \n-    #: The logging format used for the debug logger.  This is only used when\n-    #: the application is in debug mode, otherwise the attached logging\n-    #: handler does the formatting.\n-    #:\n-    #: .. versionadded:: 0.3\n-    debug_log_format = (\n-        '-' * 80 + '\\n' +\n-        '%(levelname)s in %(module)s [%(pathname)s:%(lineno)d]:\\n' +\n-        '%(message)s\\n' +\n-        '-' * 80\n-    )\n-\n     #: The JSON encoder class to use.  Defaults to :class:`~flask.json.JSONEncoder`.\n     #:\n     #: .. versionadded:: 0.10\n@@ -297,6 +285,7 @@ class Flask(_PackageBoundObject):\n         'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n         'USE_X_SENDFILE':                       False,\n         'LOGGER_NAME':                          None,\n+        'LOGGER_HANDLER_POLICY':               'always',\n         'SERVER_NAME':                          None,\n         'APPLICATION_ROOT':                     None,\n         'SESSION_COOKIE_NAME':                  'session',\n\n@@ -11,7 +11,24 @@\n \n from __future__ import absolute_import\n \n-from logging import getLogger, StreamHandler, Formatter, getLoggerClass, DEBUG\n+from logging import getLogger, StreamHandler, Formatter, getLoggerClass, \\\n+     DEBUG, ERROR\n+\n+\n+PROD_LOG_FORMAT = '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n+DEBUG_LOG_FORMAT = (\n+    '-' * 80 + '\\n' +\n+    '%(levelname)s in %(module)s [%(pathname)s:%(lineno)d]:\\n' +\n+    '%(message)s\\n' +\n+    '-' * 80\n+)\n+\n+\n+def should_log_for(app, mode):\n+    policy = app.config['LOGGER_HANDLER_POLICY']\n+    if policy == mode or policy == 'always':\n+        return True\n+    return False\n \n \n def create_logger(app):\n@@ -30,16 +47,28 @@ def create_logger(app):\n             return Logger.getEffectiveLevel(x)\n \n     class DebugHandler(StreamHandler):\n-        def emit(x, record):\n-            StreamHandler.emit(x, record) if app.debug else None\n+        def emit(self, record):\n+            if app.debug and should_log_for(app, 'debug'):\n+                StreamHandler.emit(self, record)\n+\n+    class ProductionHandler(StreamHandler):\n+        def emit(self, record):\n+            if not app.debug and should_log_for(app, 'production'):\n+                StreamHandler.emit(self, record)\n+\n+    debug_handler = DebugHandler()\n+    debug_handler.setLevel(DEBUG)\n+    debug_handler.setFormatter(Formatter(DEBUG_LOG_FORMAT))\n+\n+    prod_handler = ProductionHandler()\n+    prod_handler.setLevel(ERROR)\n+    prod_handler.setFormatter(Formatter(PROD_LOG_FORMAT))\n \n-    handler = DebugHandler()\n-    handler.setLevel(DEBUG)\n-    handler.setFormatter(Formatter(app.debug_log_format))\n     logger = getLogger(app.logger_name)\n     # just in case that was not a new logger, get rid of all the handlers\n     # already attached to it.\n     del logger.handlers[:]\n     logger.__class__ = DebugLogger\n-    logger.addHandler(handler)\n+    logger.addHandler(debug_handler)\n+    logger.addHandler(prod_handler)\n     return logger\n\n@@ -559,6 +559,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n     def test_teardown_request_handler_error(self):\n         called = []\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         @app.teardown_request\n         def teardown_request1(exc):\n             self.assert_equal(type(exc), ZeroDivisionError)\n@@ -621,6 +622,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         @app.errorhandler(404)\n         def not_found(e):\n             return 'not found', 404\n@@ -920,6 +922,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_none_response(self):\n         app = flask.Flask(__name__)\n+        app.testing = True\n         @app.route('/')\n         def test():\n             return None\n@@ -989,6 +992,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n     def test_exception_propagation(self):\n         def apprunner(configkey):\n             app = flask.Flask(__name__)\n+            app.config['LOGGER_HANDLER_POLICY'] = 'never'\n             @app.route('/')\n             def index():\n                 1 // 0\n@@ -996,7 +1000,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             if config_key is not None:\n                 app.config[config_key] = True\n                 try:\n-                    resp = c.get('/')\n+                    c.get('/')\n                 except Exception:\n                     pass\n                 else:\n\n@@ -137,6 +137,7 @@ class ModuleTestCase(FlaskTestCase):\n     @emits_module_deprecation_warning\n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         admin = flask.Module(__name__, 'admin')\n         @admin.app_errorhandler(404)\n         def not_found(e):\n\n@@ -473,6 +473,7 @@ class LoggingTestCase(FlaskTestCase):\n     def test_exception_logging(self):\n         out = StringIO()\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         app.logger_name = 'flask_tests/test_exception_logging'\n         app.logger.addHandler(StreamHandler(out))\n \n@@ -492,6 +493,7 @@ class LoggingTestCase(FlaskTestCase):\n \n     def test_processor_exceptions(self):\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         @app.before_request\n         def before_request():\n             if trigger == 'before':\n\n@@ -136,6 +136,7 @@ class TestToolsTestCase(FlaskTestCase):\n \n     def test_test_client_context_binding(self):\n         app = flask.Flask(__name__)\n+        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         @app.route('/')\n         def index():\n             flask.g.value = 42\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#817b72d484d353800d907b3580c899314bf7f3c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 447 | Files Changed: 12 | Hunks: 21 | Methods Changed: 52 | Complexity Δ (Sum/Max): -60/0 | Churn Δ: 449 | Churn Cumulative: 9258 | Contributors (this commit): 54 | Commits (past 90d): 18 | Contributors (cumulative): 95 | DMM Complexity: 0.10610932475884244\n\nDIFF:\n@@ -27,7 +27,6 @@ from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n from .ctx import has_request_context, has_app_context, \\\n      after_this_request, copy_current_request_context\n-from .module import Module\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n \n\n@@ -29,7 +29,6 @@ from .config import ConfigAttribute, Config\n from .ctx import RequestContext, AppContext, _AppCtxGlobals\n from .globals import _request_ctx_stack, request, session, g\n from .sessions import SecureCookieSessionInterface\n-from .module import blueprint_is_module\n from .templating import DispatchingJinjaLoader, Environment, \\\n      _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n@@ -255,11 +254,6 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.4\n     logger_name = ConfigAttribute('LOGGER_NAME')\n \n-    #: Enable the deprecated module support?  This is active by default\n-    #: in 0.7 but will be changed to False in 0.8.  With Flask 1.0 modules\n-    #: will be removed in favor of Blueprints\n-    enable_modules = True\n-\n     #: The JSON encoder class to use.  Defaults to :class:`~flask.json.JSONEncoder`.\n     #:\n     #: .. versionadded:: 0.10\n@@ -893,32 +887,6 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         return self.session_interface.make_null_session(self)\n \n-    def register_module(self, module, **options):\n-        \"\"\"Registers a module with this application.  The keyword arguments\n-        of this function are the same as the ones for the constructor of the\n-        :class:`Module` class and will override the values of the module if\n-        provided.\n-\n-        .. versionchanged:: 0.7\n-           The module system was deprecated in favor for the blueprint\n-           system.\n-        \"\"\"\n-        assert blueprint_is_module(module), 'register_module requires ' \\\n-            'actual module objects.  Please upgrade to blueprints though.'\n-        if not self.enable_modules:\n-            raise RuntimeError('Module support was disabled but code '\n-                'attempted to register a module named %r' % module)\n-        else:\n-            from warnings import warn\n-            warn(DeprecationWarning('Modules are deprecated.  Upgrade to '\n-                'using blueprints.  Have a look into the documentation for '\n-                'more information.  If this module was registered by a '\n-                'Flask-Extension upgrade the extension or contact the author '\n-                'of that extension instead.  (Registered %r)' % module),\n-                stacklevel=2)\n-\n-        self.register_blueprint(module, **options)\n-\n     @setupmethod\n     def register_blueprint(self, blueprint, **options):\n         \"\"\"Registers a blueprint on the application.\n\n@@ -17,7 +17,6 @@ from functools import update_wrapper\n from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n-from .module import blueprint_is_module\n from .signals import appcontext_pushed, appcontext_popped\n from ._compat import BROKEN_PYPY_CTXMGR_EXIT, reraise\n \n@@ -252,16 +251,6 @@ class RequestContext(object):\n \n         self.match_request()\n \n-        # XXX: Support for deprecated functionality.  This is going away with\n-        # Flask 1.0\n-        blueprint = self.request.blueprint\n-        if blueprint is not None:\n-            # better safe than sorry, we don't want to break code that\n-            # already worked\n-            bp = app.blueprints.get(blueprint)\n-            if bp is not None and blueprint_is_module(bp):\n-                self.request._is_old_module = True\n-\n     def _get_g(self):\n         return _app_ctx_stack.top.g\n     def _set_g(self, value):\n\n@@ -1,42 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    flask.module\n-    ~~~~~~~~~~~~\n-\n-    Implements a class that represents module blueprints.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import os\n-\n-from .blueprints import Blueprint\n-\n-\n-def blueprint_is_module(bp):\n-    \"\"\"Used to figure out if something is actually a module\"\"\"\n-    return isinstance(bp, Module)\n-\n-\n-class Module(Blueprint):\n-    \"\"\"Deprecated module support.  Until Flask 0.6 modules were a different\n-    name of the concept now available as blueprints in Flask.  They are\n-    essentially doing the same but have some bad semantics for templates and\n-    static files that were fixed with blueprints.\n-\n-    .. versionchanged:: 0.7\n-       Modules were deprecated in favor for blueprints.\n-    \"\"\"\n-\n-    def __init__(self, import_name, name=None, url_prefix=None,\n-                 static_path=None, subdomain=None):\n-        if name is None:\n-            assert '.' in import_name, 'name required if package name ' \\\n-                'does not point to a submodule'\n-            name = import_name.rsplit('.', 1)[1]\n-        Blueprint.__init__(self, name, import_name, url_prefix=url_prefix,\n-                           subdomain=subdomain, template_folder='templates')\n-\n-        if os.path.isdir(os.path.join(self.root_path, 'static')):\n-            self._static_folder = 'static'\n\n@@ -14,7 +14,6 @@ from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n from .signals import template_rendered\n-from .module import blueprint_is_module\n from ._compat import itervalues, iteritems\n \n \n@@ -73,16 +72,10 @@ class DispatchingJinjaLoader(BaseLoader):\n         try:\n             module, local_name = posixpath.normpath(template).split('/', 1)\n             blueprint = self.app.blueprints[module]\n-            if blueprint_is_module(blueprint):\n-                loader = blueprint.jinja_loader\n-                if loader is not None:\n-                    yield loader, local_name\n         except (ValueError, KeyError):\n             pass\n \n         for blueprint in itervalues(self.app.blueprints):\n-            if blueprint_is_module(blueprint):\n-                continue\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 yield loader, template\n@@ -97,10 +90,7 @@ class DispatchingJinjaLoader(BaseLoader):\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 for template in loader.list_templates():\n-                    prefix = ''\n-                    if blueprint_is_module(blueprint):\n-                        prefix = name + '/'\n-                    result.add(prefix + template)\n+                    result.add(template)\n \n         return list(result)\n \n\n@@ -1305,18 +1305,6 @@ class SubdomainTestCase(FlaskTestCase):\n         rv = c.get('/', 'http://test.localhost/')\n         self.assert_equal(rv.data, b'test index')\n \n-    @emits_module_deprecation_warning\n-    def test_module_static_path_subdomain(self):\n-        app = flask.Flask(__name__)\n-        app.config['SERVER_NAME'] = 'example.com'\n-        from subdomaintestmodule import mod\n-        app.register_module(mod)\n-        c = app.test_client()\n-        rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n-        rv.direct_passthrough = False\n-        self.assert_equal(rv.data.strip(), b'Hello Subdomain')\n-        rv.close()\n-\n     def test_subdomain_matching(self):\n         app = flask.Flask(__name__)\n         app.config['SERVER_NAME'] = 'localhost'\n@@ -1339,28 +1327,6 @@ class SubdomainTestCase(FlaskTestCase):\n         rv = c.get('/', 'http://mitsuhiko.localhost:3000/')\n         self.assert_equal(rv.data, b'index for mitsuhiko')\n \n-    @emits_module_deprecation_warning\n-    def test_module_subdomain_support(self):\n-        app = flask.Flask(__name__)\n-        mod = flask.Module(__name__, 'test', subdomain='testing')\n-        app.config['SERVER_NAME'] = 'localhost'\n-\n-        @mod.route('/test')\n-        def test():\n-            return 'Test'\n-\n-        @mod.route('/outside', subdomain='xtesting')\n-        def bar():\n-            return 'Outside'\n-\n-        app.register_module(mod)\n-\n-        c = app.test_client()\n-        rv = c.get('/test', 'http://testing.localhost/')\n-        self.assert_equal(rv.data, b'Test')\n-        rv = c.get('/outside', 'http://xtesting.localhost/')\n-        self.assert_equal(rv.data, b'Outside')\n-\n     def test_multi_route_rules(self):\n         app = flask.Flask(__name__)\n \n\n@@ -11,250 +11,12 @@\n \n import flask\n import unittest\n-import warnings\n-from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n+from flask.testsuite import FlaskTestCase\n from flask._compat import text_type\n-from werkzeug.exceptions import NotFound\n from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n \n \n-# import moduleapp here because it uses deprecated features and we don't\n-# want to see the warnings\n-warnings.simplefilter('ignore', DeprecationWarning)\n-from moduleapp import app as moduleapp\n-warnings.simplefilter('default', DeprecationWarning)\n-\n-\n-class ModuleTestCase(FlaskTestCase):\n-\n-    @emits_module_deprecation_warning\n-    def test_basic_module(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @admin.route('/')\n-        def admin_index():\n-            return 'admin index'\n-        @admin.route('/login')\n-        def admin_login():\n-            return 'admin login'\n-        @admin.route('/logout')\n-        def admin_logout():\n-            return 'admin logout'\n-        @app.route('/')\n-        def index():\n-            return 'the index'\n-        app.register_module(admin)\n-        c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'the index')\n-        self.assert_equal(c.get('/admin/').data, b'admin index')\n-        self.assert_equal(c.get('/admin/login').data, b'admin login')\n-        self.assert_equal(c.get('/admin/logout').data, b'admin logout')\n-\n-    @emits_module_deprecation_warning\n-    def test_default_endpoint_name(self):\n-        app = flask.Flask(__name__)\n-        mod = flask.Module(__name__, 'frontend')\n-        def index():\n-            return 'Awesome'\n-        mod.add_url_rule('/', view_func=index)\n-        app.register_module(mod)\n-        rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'Awesome')\n-        with app.test_request_context():\n-            self.assert_equal(flask.url_for('frontend.index'), '/')\n-\n-    @emits_module_deprecation_warning\n-    def test_request_processing(self):\n-        catched = []\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @admin.before_request\n-        def before_admin_request():\n-            catched.append('before-admin')\n-        @admin.after_request\n-        def after_admin_request(response):\n-            catched.append('after-admin')\n-            return response\n-        @admin.route('/')\n-        def admin_index():\n-            return 'the admin'\n-        @app.before_request\n-        def before_request():\n-            catched.append('before-app')\n-        @app.after_request\n-        def after_request(response):\n-            catched.append('after-app')\n-            return response\n-        @app.route('/')\n-        def index():\n-            return 'the index'\n-        app.register_module(admin)\n-        c = app.test_client()\n-\n-        self.assert_equal(c.get('/').data, b'the index')\n-        self.assert_equal(catched, ['before-app', 'after-app'])\n-        del catched[:]\n-\n-        self.assert_equal(c.get('/admin/').data, b'the admin')\n-        self.assert_equal(catched, ['before-app', 'before-admin',\n-                           'after-admin', 'after-app'])\n-\n-    @emits_module_deprecation_warning\n-    def test_context_processors(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @app.context_processor\n-        def inject_all_regular():\n-            return {'a': 1}\n-        @admin.context_processor\n-        def inject_admin():\n-            return {'b': 2}\n-        @admin.app_context_processor\n-        def inject_all_module():\n-            return {'c': 3}\n-        @app.route('/')\n-        def index():\n-            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n-        @admin.route('/')\n-        def admin_index():\n-            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n-        app.register_module(admin)\n-        c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'13')\n-        self.assert_equal(c.get('/admin/').data, b'123')\n-\n-    @emits_module_deprecation_warning\n-    def test_late_binding(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin')\n-        @admin.route('/')\n-        def index():\n-            return '42'\n-        app.register_module(admin, url_prefix='/admin')\n-        self.assert_equal(app.test_client().get('/admin/').data, b'42')\n-\n-    @emits_module_deprecation_warning\n-    def test_error_handling(self):\n-        app = flask.Flask(__name__)\n-        app.config['LOGGER_HANDLER_POLICY'] = 'never'\n-        admin = flask.Module(__name__, 'admin')\n-        @admin.app_errorhandler(404)\n-        def not_found(e):\n-            return 'not found', 404\n-        @admin.app_errorhandler(500)\n-        def internal_server_error(e):\n-            return 'internal server error', 500\n-        @admin.route('/')\n-        def index():\n-            flask.abort(404)\n-        @admin.route('/error')\n-        def error():\n-            1 // 0\n-        app.register_module(admin)\n-        c = app.test_client()\n-        rv = c.get('/')\n-        self.assert_equal(rv.status_code, 404)\n-        self.assert_equal(rv.data, b'not found')\n-        rv = c.get('/error')\n-        self.assert_equal(rv.status_code, 500)\n-        self.assert_equal(b'internal server error', rv.data)\n-\n-    def test_templates_and_static(self):\n-        app = moduleapp\n-        app.testing = True\n-        c = app.test_client()\n-\n-        rv = c.get('/')\n-        self.assert_equal(rv.data, b'Hello from the Frontend')\n-        rv = c.get('/admin/')\n-        self.assert_equal(rv.data, b'Hello from the Admin')\n-        rv = c.get('/admin/index2')\n-        self.assert_equal(rv.data, b'Hello from the Admin')\n-        rv = c.get('/admin/static/test.txt')\n-        self.assert_equal(rv.data.strip(), b'Admin File')\n-        rv.close()\n-        rv = c.get('/admin/static/css/test.css')\n-        self.assert_equal(rv.data.strip(), b'/* nested file */')\n-        rv.close()\n-\n-        with app.test_request_context():\n-            self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n-                              '/admin/static/test.txt')\n-\n-        with app.test_request_context():\n-            try:\n-                flask.render_template('missing.html')\n-            except TemplateNotFound as e:\n-                self.assert_equal(e.name, 'missing.html')\n-            else:\n-                self.assert_true(0, 'expected exception')\n-\n-        with flask.Flask(__name__).test_request_context():\n-            self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n-\n-    def test_safe_access(self):\n-        app = moduleapp\n-\n-        with app.test_request_context():\n-            f = app.view_functions['admin.static']\n-\n-            try:\n-                f('/etc/passwd')\n-            except NotFound:\n-                pass\n-            else:\n-                self.assert_true(0, 'expected exception')\n-            try:\n-                f('../__init__.py')\n-            except NotFound:\n-                pass\n-            else:\n-                self.assert_true(0, 'expected exception')\n-\n-            # testcase for a security issue that may exist on windows systems\n-            import os\n-            import ntpath\n-            old_path = os.path\n-            os.path = ntpath\n-            try:\n-                try:\n-                    f('..\\\\__init__.py')\n-                except NotFound:\n-                    pass\n-                else:\n-                    self.assert_true(0, 'expected exception')\n-            finally:\n-                os.path = old_path\n-\n-    @emits_module_deprecation_warning\n-    def test_endpoint_decorator(self):\n-        from werkzeug.routing import Submount, Rule\n-        from flask import Module\n-\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.url_map.add(Submount('/foo', [\n-            Rule('/bar', endpoint='bar'),\n-            Rule('/', endpoint='index')\n-        ]))\n-        module = Module(__name__, __name__)\n-\n-        @module.endpoint('bar')\n-        def bar():\n-            return 'bar'\n-\n-        @module.endpoint('index')\n-        def index():\n-            return 'index'\n-\n-        app.register_module(module)\n-\n-        c = app.test_client()\n-        self.assert_equal(c.get('/foo/').data, b'index')\n-        self.assert_equal(c.get('/foo/bar').data, b'bar')\n-\n-\n class BlueprintTestCase(FlaskTestCase):\n \n     def test_blueprint_specific_error_handling(self):\n@@ -820,5 +582,4 @@ class BlueprintTestCase(FlaskTestCase):\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(BlueprintTestCase))\n-    suite.addTest(unittest.makeSuite(ModuleTestCase))\n     return suite\n\n@@ -1,7 +0,0 @@\n-from flask import Flask\n-\n-app = Flask(__name__)\n-from moduleapp.apps.admin import admin\n-from moduleapp.apps.frontend import frontend\n-app.register_module(admin)\n-app.register_module(frontend)\n\n\n@@ -1,14 +0,0 @@\n-from flask import Module, render_template\n-\n-\n-admin = Module(__name__, url_prefix='/admin')\n-\n-\n-@admin.route('/')\n-def index():\n-    return render_template('admin/index.html')\n-\n-\n-@admin.route('/index2')\n-def index2():\n-    return render_template('./admin/index.html')\n\n@@ -1,9 +0,0 @@\n-from flask import Module, render_template\n-\n-\n-frontend = Module(__name__)\n-\n-\n-@frontend.route('/')\n-def index():\n-    return render_template('frontend/index.html')\n\n@@ -1,46 +0,0 @@\n-from flask import Flask, Module, render_template, url_for\n-\n-\n-mod = Module(__name__)\n-mod2 = Module(__name__, 'testmod2')\n-mod3 = Module(__name__, name='somemod', subdomain='meh')\n-\n-\n-@app.after_request\n-def after_request(response):\n-    g.db.close()\n-    return response\n-\n-\n-@app.route('/')\n-def index_foo():\n-    x1 = url_for('somemod.index')\n-    x2 = url_for('.index')\n-    return render_template('test/index.html')\n-\n-\n-@mod.route('/')\n-def index():\n-    x1 = url_for('somemod.index')\n-    x2 = url_for('.index')\n-    return render_template('test/index.html')\n-\n-\n-@mod2.route('/')\n-def mod2_index():\n-    return render_template('testmod2/index.html')\n-\n-\n-@mod3.route('/')\n-def mod3_index():\n-    return render_template('something-else/index.html')\n-\n-\n-app = Flask(__name__)\n-app.register_module(mod)\n-app.register_module(mod2)\n-\n-\n-def handle_404(error):\n-    return 'Testing', 404\n-app.error_handlers[404] = handle_404\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
