{"custom_id": "requests#714c9dc96759942226a0dc16fa1e3d6d51f56291", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 2880 | Contributors (this commit): 84 | Commits (past 90d): 5 | Contributors (cumulative): 84 | DMM Complexity: 0.0\n\nDIFF:\n@@ -45,10 +45,14 @@ if sys.platform == 'win32':\n     # provide a proxy_bypass version on Windows without DNS lookups\n \n     def proxy_bypass_registry(host):\n+        try:\n             if is_py3:\n                 import winreg\n             else:\n                 import _winreg as winreg\n+        except ImportError:\n+            return False\n+\n         try:\n             internetSettings = winreg.OpenKey(winreg.HKEY_CURRENT_USER,\n                 r'Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1e46cbb4f031b242fb04bfc881150b11a2e93602", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 23 | Churn Cumulative: 4551 | Contributors (this commit): 65 | Commits (past 90d): 6 | Contributors (cumulative): 65 | DMM Complexity: 1.0\n\nDIFF:\n@@ -54,6 +54,8 @@ except AttributeError:\n \n class TestRequests:\n \n+    digest_auth_algo = ('MD5', 'SHA-256', 'SHA-512')\n+\n     def test_entry_points(self):\n \n         requests.session\n@@ -574,14 +576,16 @@ class TestRequests:\n \n     def test_DIGEST_HTTP_200_OK_GET(self, httpbin):\n \n+        for authtype in self.digest_auth_algo:\n             auth = HTTPDigestAuth('user', 'pass')\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype, 'never')\n \n             r = requests.get(url, auth=auth)\n             assert r.status_code == 200\n \n             r = requests.get(url)\n             assert r.status_code == 401\n+            print(r.headers['WWW-Authenticate'])\n \n             s = requests.session()\n             s.auth = HTTPDigestAuth('user', 'pass')\n@@ -589,7 +593,9 @@ class TestRequests:\n             assert r.status_code == 200\n \n     def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+\n+        for authtype in self.digest_auth_algo:\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)\n             auth = HTTPDigestAuth('user', 'pass')\n             r = requests.get(url)\n             assert r.cookies['fake'] == 'fake_value'\n@@ -598,7 +604,9 @@ class TestRequests:\n             assert r.status_code == 200\n \n     def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin):\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+\n+        for authtype in self.digest_auth_algo:\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)\n             auth = HTTPDigestAuth('user', 'pass')\n             s = requests.Session()\n             s.get(url, auth=auth)\n@@ -606,8 +614,9 @@ class TestRequests:\n \n     def test_DIGEST_STREAM(self, httpbin):\n \n+        for authtype in self.digest_auth_algo:\n             auth = HTTPDigestAuth('user', 'pass')\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)\n \n             r = requests.get(url, auth=auth, stream=True)\n             assert r.raw.read() != b''\n@@ -617,8 +626,9 @@ class TestRequests:\n \n     def test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin):\n \n+        for authtype in self.digest_auth_algo:\n             auth = HTTPDigestAuth('user', 'wrongpass')\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)\n \n             r = requests.get(url, auth=auth)\n             assert r.status_code == 401\n@@ -633,8 +643,9 @@ class TestRequests:\n \n     def test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin):\n \n+        for authtype in self.digest_auth_algo:\n             auth = HTTPDigestAuth('user', 'pass')\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)\n \n             r = requests.get(url, auth=auth)\n             assert '\"auth\"' in r.request.headers['Authorization']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8666e190631b5330c2851bd354d07831afba114", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 18 | Churn Cumulative: 2898 | Contributors (this commit): 85 | Commits (past 90d): 4 | Contributors (cumulative): 85 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,6 @@ This module provides utility functions that are used within Requests\n that are also useful for external consumption.\n \"\"\"\n \n-import cgi\n import codecs\n import collections\n import contextlib\n@@ -453,13 +452,28 @@ def get_encoding_from_headers(headers):\n     :param headers: dictionary to extract encoding from.\n     :rtype: str\n     \"\"\"\n+    def parse_header(content_type):\n+        #Inner function to parse header\n+        content_type_and_params_delimiter = ';'\n+\n+        #append delimiter on end to ensure atleast two elements when split by ';'\n+        content_type += content_type_and_params_delimiter\n+\n+        tokens = content_type.split(content_type_and_params_delimiter)\n+        content_type_index = 0\n+        params_index = 1\n+\n+        content_type = tokens[content_type_index]\n+        params = tokens[params_index]\n+        params_dict = dict(param.split('=') for param in params.split())\n+        return content_type,params_dict\n \n     content_type = headers.get('content-type')\n \n     if not content_type:\n         return None\n \n-    content_type, params = cgi.parse_header(content_type)\n+    content_type, params = parse_header(content_type)\n \n     if 'charset' in params:\n         return params['charset'].strip(\"'\\\"\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cef08304197b8b8747015d94a1700716202355ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2901 | Contributors (this commit): 85 | Commits (past 90d): 5 | Contributors (cumulative): 85 | DMM Complexity: None\n\nDIFF:\n@@ -454,9 +454,8 @@ def get_encoding_from_headers(headers):\n     \"\"\"\n     def parse_header(content_type):\n         #Inner function to parse header\n-        content_type_and_params_delimiter = ';'\n-\n         #append delimiter on end to ensure atleast two elements when split by ';'\n+        content_type_and_params_delimiter = ';'\n         content_type += content_type_and_params_delimiter\n \n         tokens = content_type.split(content_type_and_params_delimiter)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1988d9cf72c3a3a6da87968e04ad57fb32df01cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 83 | Churn Cumulative: 4345 | Contributors (this commit): 87 | Commits (past 90d): 9 | Contributors (cumulative): 107 | DMM Complexity: 0.0\n\nDIFF:\n@@ -446,33 +446,49 @@ def get_encodings_from_content(content):\n             xml_re.findall(content))\n \n \n+def _parse_content_type_header(header):\n+    \"\"\"Returns content type and parameters from given header\n+\n+    :param header: string\n+    :return: tuple containing content type and dictionary of\n+         parameters\n+    \"\"\"\n+    if not header:\n+        return None\n+    # append delimiter on end to ensure at least two elements when split by ';'\n+    header += ';'\n+    # split content type's main value from params\n+    tokens = header.split(';', 1)\n+    content_type_index = 0\n+    params_index = 1\n+\n+    content_type = tokens[content_type_index].strip()\n+    params = tokens[params_index]\n+    params_dict = dict()\n+\n+    for param in params.split(';'):\n+        if param and not param.isspace():\n+            param = param.strip()\n+            key, value = param, True\n+            if '=' in param:\n+                param_tokens = [x.strip('\\'\" ') for x in param.split('=', 1)]\n+                key, value = param_tokens[0], param_tokens[1]\n+            params_dict[key] = value\n+    return content_type, params_dict\n+\n def get_encoding_from_headers(headers):\n     \"\"\"Returns encodings from given HTTP Header Dict.\n \n     :param headers: dictionary to extract encoding from.\n     :rtype: str\n     \"\"\"\n-    def parse_header(content_type):\n-        #Inner function to parse header\n-        #append delimiter on end to ensure atleast two elements when split by ';'\n-        content_type_and_params_delimiter = ';'\n-        content_type += content_type_and_params_delimiter\n-\n-        tokens = content_type.split(content_type_and_params_delimiter)\n-        content_type_index = 0\n-        params_index = 1\n-\n-        content_type = tokens[content_type_index]\n-        params = tokens[params_index]\n-        params_dict = dict(param.split('=') for param in params.split())\n-        return content_type,params_dict\n \n     content_type = headers.get('content-type')\n \n     if not content_type:\n         return None\n \n-    content_type, params = parse_header(content_type)\n+    content_type, params = _parse_content_type_header(content_type)\n \n     if 'charset' in params:\n         return params['charset'].strip(\"'\\\"\")\n\n@@ -13,7 +13,7 @@ from requests.cookies import RequestsCookieJar\n from requests.structures import CaseInsensitiveDict\n from requests.utils import (\n     address_in_network, dotted_netmask, extract_zipped_paths,\n-    get_auth_from_url, get_encoding_from_headers,\n+    get_auth_from_url, _parse_content_type_header, get_encoding_from_headers,\n     get_encodings_from_content, get_environ_proxies,\n     guess_filename, guess_json_utf, is_ipv4_address,\n     is_valid_cidr, iter_slices, parse_dict_header,\n@@ -470,6 +470,41 @@ def test_parse_dict_header(value, expected):\n     assert parse_dict_header(value) == expected\n \n \n+@pytest.mark.parametrize(\n+    'value, expected', (\n+        (\n+            None,\n+            None\n+        ),\n+(\n+            '',\n+            None\n+        ),\n+        (\n+            'application/xml',\n+            ('application/xml', dict())\n+        ),\n+        (\n+            'application/json ; charset=utf-8',\n+            ('application/json', {'charset': 'utf-8'})\n+        ),\n+        (\n+            'text/plain',\n+            ('text/plain', dict())\n+        ),\n+        (\n+            'multipart/form-data; boundary = something ; \\'boundary2=something_else\\' ; no_equals ',\n+            ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n+        ),\n+        (\n+            'application/json ;; ; ',\n+            ('application/json', dict())\n+        )\n+    ))\n+def test__parse_content_type_header(value, expected):\n+    assert _parse_content_type_header(value) == expected\n+\n+\n @pytest.mark.parametrize(\n     'value, expected', (\n         (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#071796d83f1bfb79793170945fdb4f623a1f344a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 25 | Churn Cumulative: 4370 | Contributors (this commit): 87 | Commits (past 90d): 11 | Contributors (cumulative): 107 | DMM Complexity: 1.0\n\nDIFF:\n@@ -453,20 +453,12 @@ def _parse_content_type_header(header):\n     :return: tuple containing content type and dictionary of\n          parameters\n     \"\"\"\n-    if not header:\n-        return None\n-    # append delimiter on end to ensure at least two elements when split by ';'\n-    header += ';'\n-    # split content type's main value from params\n-    tokens = header.split(';', 1)\n-    content_type_index = 0\n-    params_index = 1\n \n-    content_type = tokens[content_type_index].strip()\n-    params = tokens[params_index]\n-    params_dict = dict()\n+    tokens = header.split(';')\n+    content_type, params = tokens[0].strip(), tokens[1:]\n+    params_dict = {}  # Using dict is actually slower than a dictionary literal. Weird but tru\n \n-    for param in params.split(';'):\n+    for param in params:\n         if param and not param.isspace():\n             param = param.strip()\n             key, value = param, True\n@@ -476,6 +468,7 @@ def _parse_content_type_header(header):\n             params_dict[key] = value\n     return content_type, params_dict\n \n+\n def get_encoding_from_headers(headers):\n     \"\"\"Returns encodings from given HTTP Header Dict.\n \n\n@@ -472,14 +472,6 @@ def test_parse_dict_header(value, expected):\n \n @pytest.mark.parametrize(\n     'value, expected', (\n-        (\n-            None,\n-            None\n-        ),\n-(\n-            '',\n-            None\n-        ),\n         (\n             'application/xml',\n             ('application/xml', dict())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80a790443e693d982296db93ceebc9135b6efb9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2966 | Contributors (this commit): 85 | Commits (past 90d): 8 | Contributors (cumulative): 85 | DMM Complexity: None\n\nDIFF:\n@@ -456,7 +456,7 @@ def _parse_content_type_header(header):\n \n     tokens = header.split(';')\n     content_type, params = tokens[0].strip(), tokens[1:]\n-    params_dict = {}  # Using dict is actually slower than a dictionary literal. Weird but tru\n+    params_dict = {} \n \n     for param in params:\n         if param and not param.isspace():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cb0914407b6bb8153c8be5d52bc497e1d10b04ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 24 | Churn Cumulative: 4396 | Contributors (this commit): 87 | Commits (past 90d): 14 | Contributors (cumulative): 107 | DMM Complexity: 1.0\n\nDIFF:\n@@ -457,14 +457,18 @@ def _parse_content_type_header(header):\n     tokens = header.split(';')\n     content_type, params = tokens[0].strip(), tokens[1:]\n     params_dict = {}\n+    items_to_strip = \"\\\"' \"\n \n     for param in params:\n-        if param and not param.isspace():\n         param = param.strip()\n+        if param:\n             key, value = param, True\n-            if '=' in param:\n-                param_tokens = [x.strip('\\'\" ') for x in param.split('=', 1)]\n-                key, value = param_tokens[0], param_tokens[1]\n+            index_of_equals = param.find(\"=\")\n+            if index_of_equals != -1:\n+                before_equals = slice(0, index_of_equals)\n+                after_equals = slice(index_of_equals + 1, len(param))\n+                key = param[before_equals].strip(items_to_strip)\n+                value = param[after_equals].strip(items_to_strip)\n             params_dict[key] = value\n     return content_type, params_dict\n \n\n@@ -474,7 +474,7 @@ def test_parse_dict_header(value, expected):\n     'value, expected', (\n         (\n             'application/xml',\n-            ('application/xml', dict())\n+            ('application/xml', {})\n         ),\n         (\n             'application/json ; charset=utf-8',\n@@ -482,15 +482,19 @@ def test_parse_dict_header(value, expected):\n         ),\n         (\n             'text/plain',\n-            ('text/plain', dict())\n+            ('text/plain', {})\n         ),\n         (\n             'multipart/form-data; boundary = something ; \\'boundary2=something_else\\' ; no_equals ',\n             ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n         ),\n         (\n-            'application/json ;; ; ',\n-            ('application/json', dict())\n+            'multipart/form-data; boundary = something ; \\\"boundary2=something_else\\\" ; no_equals ',\n+            ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n+        ),\n+        (\n+            'application/json ; ; ',\n+            ('application/json', {})\n         )\n     ))\n def test__parse_content_type_header(value, expected):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7deee699ada6e5ec0d41c7561d9b5fa4cd80e535", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 2984 | Contributors (this commit): 85 | Commits (past 90d): 10 | Contributors (cumulative): 85 | DMM Complexity: 0.0\n\nDIFF:\n@@ -465,10 +465,8 @@ def _parse_content_type_header(header):\n             key, value = param, True\n             index_of_equals = param.find(\"=\")\n             if index_of_equals != -1:\n-                before_equals = slice(0, index_of_equals)\n-                after_equals = slice(index_of_equals + 1, len(param))\n-                key = param[before_equals].strip(items_to_strip)\n-                value = param[after_equals].strip(items_to_strip)\n+                key = param[:index_of_equals].strip(items_to_strip)\n+                value = param[index_of_equals + 1:].strip(items_to_strip)\n             params_dict[key] = value\n     return content_type, params_dict\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e0ab287317fcde8fa4631bc7bee5aa1749bc4ac5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1428 | Contributors (this commit): 22 | Commits (past 90d): 6 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -484,12 +484,20 @@ def test_parse_dict_header(value, expected):\n             'text/plain',\n             ('text/plain', {})\n         ),\n+        (\n+            'multipart/form-data; boundary = something ; boundary2=\\'something_else\\' ; no_equals ',\n+            ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n+        ),\n+        (\n+                'multipart/form-data; boundary = something ; boundary2=\"something_else\" ; no_equals ',\n+                ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n+        ),\n         (\n             'multipart/form-data; boundary = something ; \\'boundary2=something_else\\' ; no_equals ',\n             ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n         ),\n         (\n-            'multipart/form-data; boundary = something ; \\\"boundary2=something_else\\\" ; no_equals ',\n+            'multipart/form-data; boundary = something ; \"boundary2=something_else\" ; no_equals ',\n             ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})\n         ),\n         (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#030dcce20cb8b4a82e7b0e5e09b7a8f33121938d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 547 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -376,4 +376,4 @@ epub_exclude_files = ['search.html']\n # If false, no index is generated.\n #epub_use_index = True\n \n-intersphinx_mapping = {'urllib3': ('http://urllib3.readthedocs.io/en/latest', None)}\n+intersphinx_mapping = {'urllib3': ('https://urllib3.readthedocs.io/en/latest', None)}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7cefa939f5a0b25d8792a949b7ae708412d62681", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 643 | Contributors (this commit): 25 | Commits (past 90d): 2 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -72,6 +72,7 @@ setup(\n     package_data={'': ['LICENSE', 'NOTICE'], 'requests': ['*.pem']},\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n+    python_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n     install_requires=requires,\n     license=about['__license__'],\n     zip_safe=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2255c34a65b5b1353004dc8d49cc397cd794ec15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 11 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 44 | Churn Cumulative: 4456 | Contributors (this commit): 88 | Commits (past 90d): 19 | Contributors (cumulative): 109 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -703,28 +703,31 @@ def should_bypass_proxies(url, no_proxy):\n     no_proxy_arg = no_proxy\n     if no_proxy is None:\n         no_proxy = get_proxy('no_proxy')\n-    netloc = urlparse(url).netloc\n+    parsed = urlparse(url)\n \n     if no_proxy:\n         # We need to check whether we match here. We need to see if we match\n-        # the end of the netloc, both with and without the port.\n+        # the end of the hostname, both with and without the port.\n         no_proxy = (\n             host for host in no_proxy.replace(' ', '').split(',') if host\n         )\n \n-        ip = netloc.split(':')[0]\n-        if is_ipv4_address(ip):\n+        if is_ipv4_address(parsed.hostname):\n             for proxy_ip in no_proxy:\n                 if is_valid_cidr(proxy_ip):\n-                    if address_in_network(ip, proxy_ip):\n+                    if address_in_network(parsed.hostname, proxy_ip):\n                         return True\n-                elif ip == proxy_ip:\n+                elif parsed.hostname == proxy_ip:\n                     # If no_proxy ip was defined in plain IP notation instead of cidr notation &\n                     # matches the IP of the index\n                     return True\n         else:\n+            host_with_port = parsed.hostname\n+            if parsed.port:\n+                host_with_port += ':{0}'.format(parsed.port)\n+\n             for host in no_proxy:\n-                if netloc.endswith(host) or netloc.split(':')[0].endswith(host):\n+                if parsed.hostname.endswith(host) or host_with_port.endswith(host):\n                     # The URL does match something in no_proxy, so we don't want\n                     # to apply the proxies on this URL.\n                     return True\n@@ -737,7 +740,7 @@ def should_bypass_proxies(url, no_proxy):\n     # legitimate problems.\n     with set_environ('no_proxy', no_proxy_arg):\n         try:\n-            bypass = proxy_bypass(netloc)\n+            bypass = proxy_bypass(parsed.hostname)\n         except (TypeError, socket.gaierror):\n             bypass = False\n \n\n@@ -614,6 +614,7 @@ def test_urldefragauth(url, expected):\n             ('http://172.16.1.1/', True),\n             ('http://172.16.1.1:5000/', True),\n             ('http://localhost.localdomain:5000/v1.0/', True),\n+            ('http://google.com:6000/', True),\n             ('http://172.16.1.12/', False),\n             ('http://172.16.1.12:5000/', False),\n             ('http://google.com:5000/v1.0/', False),\n@@ -622,11 +623,31 @@ def test_should_bypass_proxies(url, expected, monkeypatch):\n     \"\"\"Tests for function should_bypass_proxies to check if proxy\n     can be bypassed or not\n     \"\"\"\n-    monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n-    monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+    monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1, google.com:6000')\n+    monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1, google.com:6000')\n     assert should_bypass_proxies(url, no_proxy=None) == expected\n \n \n+@pytest.mark.parametrize(\n+    'url, expected', (\n+            ('http://172.16.1.1/', '172.16.1.1'),\n+            ('http://172.16.1.1:5000/', '172.16.1.1'),\n+            ('http://user:pass@172.16.1.1', '172.16.1.1'),\n+            ('http://user:pass@172.16.1.1:5000', '172.16.1.1'),\n+            ('http://hostname/', 'hostname'),\n+            ('http://hostname:5000/', 'hostname'),\n+            ('http://user:pass@hostname', 'hostname'),\n+            ('http://user:pass@hostname:5000', 'hostname'),\n+    ))\n+def test_should_bypass_proxies_pass_only_hostname(url, expected, mocker):\n+    \"\"\"The proxy_bypass function should be called with a hostname or IP without\n+    a port number or auth credentials.\n+    \"\"\"\n+    proxy_bypass = mocker.patch('requests.utils.proxy_bypass')\n+    should_bypass_proxies(url, no_proxy=None)\n+    proxy_bypass.assert_called_once_with(expected)\n+\n+\n @pytest.mark.parametrize(\n     'cookiejar', (\n         compat.cookielib.CookieJar(),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f60324a3de41c10dd7af17cadd4322c895068a25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 86 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 13/15 | Churn Δ: 87 | Churn Cumulative: 8324 | Contributors (this commit): 137 | Commits (past 90d): 10 | Contributors (cumulative): 163 | DMM Complexity: 0.9230769230769231\n\nDIFF:\n@@ -123,6 +123,7 @@ class SessionRedirectMixin(object):\n         hist = []  # keep track of history\n \n         url = self.get_redirect_target(resp)\n+        previous_fragment = urlparse(req.url).fragment\n         while url:\n             prepared_request = req.copy()\n \n@@ -147,8 +148,12 @@ class SessionRedirectMixin(object):\n                 parsed_rurl = urlparse(resp.url)\n                 url = '%s:%s' % (to_native_string(parsed_rurl.scheme), url)\n \n-            # The scheme should be lower case...\n+            # Normalize url case and attach previous fragment if needed (RFC 7231 7.1.2)\n             parsed = urlparse(url)\n+            if parsed.fragment == '' and previous_fragment:\n+                parsed = parsed._replace(fragment=previous_fragment)\n+            elif parsed.fragment:\n+                previous_fragment = parsed.fragment\n             url = parsed.geturl()\n \n             # Facilitate relative 'location' headers, as allowed by RFC 7231.\n\n@@ -235,3 +235,75 @@ def test_redirect_rfc1808_to_non_ascii_location():\n         assert r.url == u'{0}/{1}'.format(url, expected_path.decode('ascii'))\n \n         close_server.set()\n+\n+def test_fragment_not_sent_with_request():\n+    \"\"\"Verify that the fragment portion of a URI isn't sent to the server.\"\"\"\n+    def response_handler(sock):\n+        req = consume_socket_content(sock, timeout=0.5)\n+        sock.send(\n+            b'HTTP/1.1 200 OK\\r\\n'\n+            b'Content-Length: '+bytes(len(req))+b'\\r\\n'\n+            b'\\r\\n'+req\n+        )\n+\n+    close_server = threading.Event()\n+    server = Server(response_handler, wait_to_close_event=close_server)\n+\n+    with server as (host, port):\n+        url = 'http://{0}:{1}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n+        r = requests.get(url)\n+        raw_request = r.content\n+\n+        assert r.status_code == 200\n+        headers, body = raw_request.split(b'\\r\\n\\r\\n', 1)\n+        status_line, headers = headers.split(b'\\r\\n', 1)\n+\n+        assert status_line == b'GET /path/to/thing/ HTTP/1.1'\n+        for frag in (b'view', b'edit', b'token', b'hunter2'):\n+            assert frag not in headers\n+            assert frag not in body\n+\n+        close_server.set()\n+\n+def test_fragment_update_on_redirect():\n+    \"\"\"Verify we only append previous fragment if one doesn't exist on new\n+    location. If a new fragment is encounterd in a Location header, it should\n+    be added to all subsequent requests.\n+    \"\"\"\n+\n+    def response_handler(sock):\n+        consume_socket_content(sock, timeout=0.5)\n+        sock.send(\n+            b'HTTP/1.1 302 FOUND\\r\\n'\n+            b'Content-Length: 0\\r\\n'\n+            b'Location: /get#relevant-section\\r\\n\\r\\n'\n+        )\n+        consume_socket_content(sock, timeout=0.5)\n+        sock.send(\n+            b'HTTP/1.1 302 FOUND\\r\\n'\n+            b'Content-Length: 0\\r\\n'\n+            b'Location: /final-url/\\r\\n\\r\\n'\n+        )\n+        consume_socket_content(sock, timeout=0.5)\n+        sock.send(\n+            b'HTTP/1.1 200 OK\\r\\n\\r\\n'\n+        )\n+\n+    close_server = threading.Event()\n+    server = Server(response_handler, wait_to_close_event=close_server)\n+\n+    with server as (host, port):\n+        url = 'http://{0}:{1}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n+        r = requests.get(url)\n+        raw_request = r.content\n+\n+        assert r.status_code == 200\n+        assert len(r.history) == 2\n+        assert r.history[0].request.url == url\n+\n+        # Verify we haven't overwritten the location with our previous fragment.\n+        assert r.history[1].request.url == 'http://{0}:{1}/get#relevant-section'.format(host, port)\n+        # Verify previous fragment is used and not the original.\n+        assert r.url == 'http://{0}:{1}/final-url/#relevant-section'.format(host, port)\n+\n+        close_server.set()\n\n@@ -294,6 +294,14 @@ class TestRequests:\n         for header in purged_headers:\n             assert header not in next_resp.request.headers\n \n+    def test_fragment_maintained_on_redirect(self, httpbin):\n+        fragment = \"#view=edit&token=hunter2\"\n+        r = requests.get(httpbin('redirect-to?url=get')+fragment)\n+\n+        assert len(r.history) > 0\n+        assert r.history[0].request.url == httpbin('redirect-to?url=get')+fragment\n+        assert r.url == httpbin('get')+fragment\n+\n     def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8e040523a4d3ce6e80b2edb7d3112480d697ddc8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1228 | Contributors (this commit): 46 | Commits (past 90d): 2 | Contributors (cumulative): 46 | DMM Complexity: None\n\nDIFF:\n@@ -411,7 +411,7 @@ class HTTPAdapter(BaseAdapter):\n \n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n-        self.add_headers(request)\n+        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#22120d423e5bd5981f8e4c715d3a26071ff8d278", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3005 | Contributors (this commit): 87 | Commits (past 90d): 11 | Contributors (cumulative): 87 | DMM Complexity: None\n\nDIFF:\n@@ -224,7 +224,7 @@ def guess_filename(obj):\n \n \n def extract_zipped_paths(path):\n-    \"\"\"Replace nonexistant paths that look like they refer to a member of a zip\n+    \"\"\"Replace nonexistent paths that look like they refer to a member of a zip\n     archive with the location of an extracted copy of the target, or else\n     just return the provided path unchanged.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#265ef609d5903151374fba480aa81aafe68126ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 45 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ import chardet\n from . import __version__ as requests_version\n \n try:\n-    from .packages.urllib3.contrib import pyopenssl\n+    from urllib3.contrib import pyopenssl\n except ImportError:\n     pyopenssl = None\n     OpenSSL = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#44dbf8cf40ef5ebf221a95680b690599548d214a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 549 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'MMXVIII. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n author = u'Kenneth Reitz'\n \n # The version info for the project you're documenting, acts as replacement for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#75c57985b02b98c897994e81afcf88b69b33f528", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1215 | Contributors (this commit): 48 | Commits (past 90d): 1 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,7 @@ def request(method, url, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n     :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n-    :param json: (optional) json data to send in the body of the :class:`Request`.\n+    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5f306dbe990454fc8dbc12f766fc46590c4a3cfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 644 | Contributors (this commit): 26 | Commits (past 90d): 1 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -65,6 +65,7 @@ setup(\n     version=about['__version__'],\n     description=about['__description__'],\n     long_description=readme + '\\n\\n' + history,\n+    long_description_content_type='text/markdown',\n     author=about['__author__'],\n     author_email=about['__author_email__'],\n     url=about['__url__'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#048c926b46a9216f0fbafffc96e0e3ff926776d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 646 | Contributors (this commit): 26 | Commits (past 90d): 2 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,7 @@ setup(\n     version=about['__version__'],\n     description=about['__description__'],\n     long_description=readme + '\\n\\n' + history,\n-    long_description_content_type='text/markdown',\n+    long_description_content_type='text/x-rst',\n     author=about['__author__'],\n     author_email=about['__author_email__'],\n     url=about['__url__'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#60a5a393d8c42bfeb83f17eca6fcd04faaa6fd49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3007 | Contributors (this commit): 88 | Commits (past 90d): 2 | Contributors (cumulative): 88 | DMM Complexity: None\n\nDIFF:\n@@ -696,6 +696,8 @@ def should_bypass_proxies(url, no_proxy):\n \n     :rtype: bool\n     \"\"\"\n+    # Prioritize lowercase environment variables over uppercase\n+    # to keep a consistent behaviour with other http projects (curl, wget).\n     get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n \n     # First check whether no_proxy is defined. If it is, check that the URL\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8546a15587b2a240c1d1404d3ef99365b911bf13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 9/7 | Churn Δ: 14 | Churn Cumulative: 14304 | Contributors (this commit): 210 | Commits (past 90d): 39 | Contributors (cumulative): 245 | DMM Complexity: 0.6\n\nDIFF:\n@@ -155,8 +155,12 @@ class RequestEncodingMixin(object):\n \n             if isinstance(fp, (str, bytes, bytearray)):\n                 fdata = fp\n-            else:\n+            elif hasattr(fp, 'read'):\n                 fdata = fp.read()\n+            elif fp is None:\n+                continue\n+            else:\n+                fdata = fp\n \n             rf = RequestField(name=k, data=fdata, filename=fn, headers=fh)\n             rf.make_multipart(content_type=ft)\n\n@@ -676,6 +676,14 @@ class TestRequests:\n         with pytest.raises(ValueError):\n             requests.post(url, files=['bad file data'])\n \n+    def test_invalid_files_input(self, httpbin):\n+\n+        url = httpbin('post')\n+        post = requests.post(url,\n+                             files={\"random-file-1\": None, \"random-file-2\": 1})\n+        assert b'name=\"random-file-1\"' not in post.request.body\n+        assert b'name=\"random-file-2\"' in post.request.body\n+\n     def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):\n \n         class TestStream(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c1b828bc95b8ed0407511b93ee260aa1032f4f8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9739 | Contributors (this commit): 180 | Commits (past 90d): 1 | Contributors (cumulative): 180 | DMM Complexity: None\n\nDIFF:\n@@ -824,7 +824,7 @@ class Response(object):\n             if self.status_code == 0 or self.raw is None:\n                 self._content = None\n             else:\n-                self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n+                self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\n \n         self._content_consumed = True\n         # don't need to release the connection; that's been handled by urllib3\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ac944b7439009ffbf7a10dfee35202f1ac090e76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 648 | Contributors (this commit): 27 | Commits (past 90d): 3 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -45,7 +45,7 @@ packages = ['requests']\n requires = [\n     'chardet>=3.0.2,<3.1.0',\n     'idna>=2.5,<2.7',\n-    'urllib3>=1.21.1,<1.23',\n+    'urllib3>=1.21.1,<1.24',\n     'certifi>=2017.4.17'\n \n ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#de64f0f23f57f272ed11713d18ff50f193c3164b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 656 | Contributors (this commit): 28 | Commits (past 90d): 4 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -40,6 +40,12 @@ if sys.argv[-1] == 'publish':\n     os.system('twine upload dist/*')\n     sys.exit()\n \n+# pyOpenSSL version 18.0.0 dropped support for Python 2.6\n+if sys.version_info < (2, 7):\n+    PYOPENSSL_VERSION = 'pyOpenSSL >= 0.14, < 18.0.0'\n+else:\n+    PYOPENSSL_VERSION = 'pyOpenSSL >= 0.14'\n+\n packages = ['requests']\n \n requires = [\n@@ -96,7 +102,7 @@ setup(\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n     extras_require={\n-        'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n+        'security': [PYOPENSSL_VERSION, 'cryptography>=1.3.4', 'idna>=2.0.0'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n         'socks:sys_platform == \"win32\" and (python_version == \"2.7\" or python_version == \"2.6\")': ['win_inet_pton'],\n     },\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3ef49272f2ff7bef67c8b53bcfba9c3a2ecfa9c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1108 | Contributors (this commit): 28 | Commits (past 90d): 1 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -415,6 +415,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def copy(self):\n         \"\"\"Return a copy of this RequestsCookieJar.\"\"\"\n         new_cj = RequestsCookieJar()\n+        new_cj.set_policy(self._policy)\n         new_cj.update(self)\n         return new_cj\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ace0c200f4a35f4f98a2672b46b03b89a53c50d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 4575 | Contributors (this commit): 67 | Commits (past 90d): 3 | Contributors (cumulative): 67 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1171,6 +1171,14 @@ class TestRequests:\n         with pytest.raises(requests.cookies.CookieConflictError):\n             jar.get(key)\n \n+    def test_cookie_policy_copy(self):\n+        class MyCookiePolicy(cookielib.DefaultCookiePolicy):\n+            pass\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set_policy(MyCookiePolicy())\n+        assert isinstance(jar.copy()._policy, MyCookiePolicy)\n+\n     def test_time_elapsed_blank(self, httpbin):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#10915e3b0d3708a093171211d51d0eea283dbe25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 5691 | Contributors (this commit): 84 | Commits (past 90d): 6 | Contributors (cumulative): 95 | DMM Complexity: 1.0\n\nDIFF:\n@@ -415,10 +415,14 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def copy(self):\n         \"\"\"Return a copy of this RequestsCookieJar.\"\"\"\n         new_cj = RequestsCookieJar()\n-        new_cj.set_policy(self._policy)\n+        new_cj.set_policy(self.get_policy())\n         new_cj.update(self)\n         return new_cj\n \n+    def get_policy(self):\n+        \"\"\"Return the CookiePolicy instance used.\"\"\"\n+        return self._policy\n+\n \n def _copy_cookie_jar(jar):\n     if jar is None:\n\n@@ -1177,7 +1177,7 @@ class TestRequests:\n \n         jar = requests.cookies.RequestsCookieJar()\n         jar.set_policy(MyCookiePolicy())\n-        assert isinstance(jar.copy()._policy, MyCookiePolicy)\n+        assert isinstance(jar.copy().get_policy(), MyCookiePolicy)\n \n     def test_time_elapsed_blank(self, httpbin):\n         r = requests.get(httpbin('get'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
