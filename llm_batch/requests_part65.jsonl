{"custom_id": "requests#54ed5ed469ff04351bfe550a6c8d49e62c535e6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 2157 | Contributors (this commit): 40 | Commits (past 90d): 42 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -251,8 +251,7 @@ class Session(SessionRedirectMixin):\n         hooks=None,\n         stream=None,\n         verify=None,\n-        cert=None,\n-        return_response=True):\n+        cert=None):\n         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n         Returns :class:`Response <Response>` object.\n \n@@ -340,9 +339,6 @@ class Session(SessionRedirectMixin):\n         req.cookies = cookies\n         req.hooks = hooks\n \n-\tif not return_response:\n-\t  return req\n-\t\n         # Prepare the Request.\n         prep = req.prepare()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1abd13700b32b82c4ce6e08e1e73be89fdbfd3e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2165 | Contributors (this commit): 40 | Commits (past 90d): 43 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -274,12 +274,8 @@ class Session(SessionRedirectMixin):\n         :param allow_redirects: (optional) Boolean. Set to True by default.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of\n             the proxy.\n-        :param return_response: (optional) If False, an un-sent Request object\n-            will returned.\n-        :param config: (optional) A configuration dictionary. See\n-            ``request.defaults`` for allowed keys and their default values.\n-        :param prefetch: (optional) whether to immediately download the response\n-            content. Defaults to ``True``.\n+        :param stream: (optional) whether to immediately download the response\n+            content. Defaults to ``False``.\n         :param verify: (optional) if ``True``, the SSL cert will be verified.\n             A CA_BUNDLE path can also be provided.\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#82d36d825902057c29d02d350070909840104d08", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2888 | Contributors (this commit): 43 | Commits (past 90d): 39 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -292,6 +292,11 @@ class RequestsTestCase(unittest.TestCase):\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         self.assertEqual(r.status_code, 200)\n \n+        r = requests.post(httpbin('post'),\n+                          data={'stuff': u'ëlïxr'.encode('utf-8')},\n+                          files={'file': ('test_requests.py', open(__file__, 'rb'))})\n+        self.assertEqual(r.status_code, 200)\n+\n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n                           data={'stuff': json.dumps({'a': 123})},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#168c3e691386602508213c992bac1d206b779358", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2898 | Contributors (this commit): 43 | Commits (past 90d): 40 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -297,6 +297,16 @@ class RequestsTestCase(unittest.TestCase):\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         self.assertEqual(r.status_code, 200)\n \n+        r = requests.post(httpbin('post'),\n+                          data={'stuff': 'elixr'},\n+                          files={'file': ('test_requests.py', open(__file__, 'rb'))})\n+        self.assertEqual(r.status_code, 200)\n+\n+        r = requests.post(httpbin('post'),\n+                          data={'stuff': 'elixr'.encode('utf-8')},\n+                          files={'file': ('test_requests.py', open(__file__, 'rb'))})\n+        self.assertEqual(r.status_code, 200)\n+\n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n                           data={'stuff': json.dumps({'a': 123})},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e7247ce3f6d8115a6bc191e5ef816e04da82aa25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 10 | Churn Cumulative: 8684 | Contributors (this commit): 108 | Commits (past 90d): 38 | Contributors (cumulative): 108 | DMM Complexity: 0.0\n\nDIFF:\n@@ -99,11 +99,13 @@ class RequestEncodingMixin(object):\n         files = to_key_val_list(files or {})\n \n         for field, val in fields:\n-            if isinstance(val, list):\n+            if isinstance(val, basestring) or not hasattr(val, '__iter__'):\n+                val = [val]\n             for v in val:\n-                    new_fields.append((field, str(v)))\n-            else:\n-                new_fields.append((field, str(val)))\n+                if v is not None:\n+                    new_fields.append(\n+                        (field.encode('utf-8') if isinstance(field, str) else field,\n+                         v.encode('utf-8') if isinstance(v, str) else v))\n \n         for (k, v) in files:\n             # support for explicit filename\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d22ac00098475367ea0c0725d7db94d7967b09b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 2183 | Contributors (this commit): 40 | Commits (past 90d): 44 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import os\n from datetime import datetime\n \n from .compat import cookielib\n-from .cookies import cookiejar_from_dict\n+from .cookies import cookiejar_from_dict, extract_cookies_to_jar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import from_key_val_list, default_headers\n@@ -91,10 +91,6 @@ class SessionRedirectMixin(object):\n         prepared_request.method = req.method\n         prepared_request.url = req.url\n \n-        cookiejar = cookiejar_from_dict({})\n-        cookiejar.update(self.cookies)\n-        cookiejar.update(resp.cookies)\n-\n         # ((resp.status_code is codes.see_other))\n         while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n \n@@ -147,7 +143,7 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n-            prepared_request.prepare_cookies(cookiejar)\n+            prepared_request.prepare_cookies(self.cookies)\n \n             resp = self.send(\n                 prepared_request,\n@@ -159,12 +155,12 @@ class SessionRedirectMixin(object):\n                 allow_redirects=False,\n             )\n \n-            cookiejar.update(resp.cookies)\n+            extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n             i += 1\n             yield resp\n \n-        resp.cookies.update(cookiejar)\n+        resp.cookies = self.cookies.copy()\n \n \n class Session(SessionRedirectMixin):\n@@ -349,9 +345,6 @@ class Session(SessionRedirectMixin):\n         }\n         resp = self.send(prep, **send_kwargs)\n \n-        # Persist cookies.\n-        self.cookies.update(resp.cookies)\n-\n         return resp\n \n     def get(self, url, **kwargs):\n@@ -460,6 +453,9 @@ class Session(SessionRedirectMixin):\n         # Response manipulation hooks\n         r = dispatch_hook('response', hooks, r, **kwargs)\n \n+        # Persist cookies\n+        extract_cookies_to_jar(self.cookies, request, r.raw)\n+\n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n                                      timeout=timeout, verify=verify, cert=cert,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#88f13598f32bd2da4099f4bb61a082d63fcf42c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 2911 | Contributors (this commit): 44 | Commits (past 90d): 41 | Contributors (cumulative): 44 | DMM Complexity: 1.0\n\nDIFF:\n@@ -124,6 +124,19 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(httpbin('redirect/1'))  # redirects to httpbin('get')\n         self.assertTrue(\"Cookie\" in r.json()[\"headers\"])\n \n+    def test_cookie_removed_on_expire(self):\n+        s = requests.session()\n+        s.get(httpbin('cookies/set?foo=bar'))\n+        self.assertTrue(s.cookies['foo'] == 'bar')\n+        s.get(\n+            httpbin('response-headers'),\n+            params={\n+                'Set-Cookie':\n+                    'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT'\n+            }\n+        )\n+        self.assertNotIn('foo', s.cookies)\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5c47ce1136ed12e992fe3404b8e6634060bcd411", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2913 | Contributors (this commit): 44 | Commits (past 90d): 42 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -135,7 +135,7 @@ class RequestsTestCase(unittest.TestCase):\n                     'foo=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT'\n             }\n         )\n-        self.assertNotIn('foo', s.cookies)\n+        assert 'foo' not in s.cookies\n \n     def test_user_agent_transfers(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49a3664222d9e17ab83d089e4d1b1e30c998f59c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2185 | Contributors (this commit): 40 | Commits (past 90d): 45 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -160,8 +160,6 @@ class SessionRedirectMixin(object):\n             i += 1\n             yield resp\n \n-        resp.cookies = self.cookies.copy()\n-\n \n class Session(SessionRedirectMixin):\n     \"\"\"A Requests session.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#afcc883d7f5968a8d64ea400335fb47f3f73d042", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 5 | Churn Cumulative: 8689 | Contributors (this commit): 108 | Commits (past 90d): 39 | Contributors (cumulative): 108 | DMM Complexity: 0.0\n\nDIFF:\n@@ -284,9 +284,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         # Support for unicode domain names and paths.\n         scheme, netloc, path, _params, query, fragment = urlparse(url)\n \n-        if not (scheme and netloc):\n+        if not scheme:\n             raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n+        if not netloc:\n+            raise InvalidURL(\"Invalid URL %t: No netloc supplied\" % url)\n+\n         try:\n             netloc = netloc.encode('idna').decode('utf-8')\n         except UnicodeError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c73f65335268da9b7ee9a793d8923ab8ce710457", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 76 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 82 | Churn Cumulative: 549 | Contributors (this commit): 8 | Commits (past 90d): 16 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,23 @@ class BaseAdapter(object):\n \n \n class HTTPAdapter(BaseAdapter):\n-    \"\"\"Built-In HTTP Adapter for Urllib3.\"\"\"\n+    \"\"\"The built-in HTTP Adapter for urllib3.\n+\n+    Provides a general-case interface for Requests sessions to contact HTTP and\n+    HTTPS urls by implementing the Transport Adapter interface. This class will\n+    usually be created by the :class:`Session <Session>` class under the\n+    covers.\n+\n+    :param pool_connections: The number of urllib3 connection pools to cache.\n+    :param pool_maxsize: The maximum number of connections to save in the pool.\n+\n+    Usage::\n+\n+      >>> import requests\n+      >>> s = requests.Session()\n+      >>> a = requests.adapters.HTTPAdapter()\n+      >>> s.mount('http://', a)\n+    \"\"\"\n     __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n \n     def __init__(self, pool_connections=DEFAULT_POOLSIZE, pool_maxsize=DEFAULT_POOLSIZE):\n@@ -68,6 +84,13 @@ class HTTPAdapter(BaseAdapter):\n         self.init_poolmanager(self._pool_connections, self._pool_maxsize)\n \n     def init_poolmanager(self, connections, maxsize):\n+        \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n+        from user code, and is only exposed for use when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param connections: The number of urllib3 connection pools to cache.\n+        :param maxsize: The maximum number of connections to save in the pool.\n+        \"\"\"\n         # save these values for pickling\n         self._pool_connections = connections\n         self._pool_maxsize = maxsize\n@@ -75,6 +98,15 @@ class HTTPAdapter(BaseAdapter):\n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize)\n \n     def cert_verify(self, conn, url, verify, cert):\n+        \"\"\"Verify a SSL certificate. This method should not be called from user\n+        code, and is only exposed for use when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param conn: The urllib3 connection object associated with the cert.\n+        :param url: The requested URL.\n+        :param verify: Whether we should actually verify the certificate.\n+        :param cert: The SSL certificate to verify.\n+        \"\"\"\n         if url.startswith('https') and verify:\n \n             cert_loc = None\n@@ -103,6 +135,14 @@ class HTTPAdapter(BaseAdapter):\n                 conn.cert_file = cert\n \n     def build_response(self, req, resp):\n+        \"\"\"Builds a :class:`Response <requests.Response>` object from a urllib3\n+        response. This should not be called from user code, and is only exposed\n+        for use when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n+\n+        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n+        :param resp: The urllib3 response object.\n+        \"\"\"\n         response = Response()\n \n         # Fallback to None if there's no status_code, for whatever reason.\n@@ -131,7 +171,13 @@ class HTTPAdapter(BaseAdapter):\n         return response\n \n     def get_connection(self, url, proxies=None):\n-        \"\"\"Returns a connection for the given URL.\"\"\"\n+        \"\"\"Returns a urllib3 connection for the given URL. This should not be\n+        called from user code, and is only exposed for use when subclassing the\n+        :class:`HTTPAdapter <reqeusts.adapters.HTTPAdapter>`.\n+\n+        :param url: The URL to connect to.\n+        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n+        \"\"\"\n         proxies = proxies or {}\n         proxy = proxies.get(urlparse(url).scheme)\n \n@@ -144,7 +190,7 @@ class HTTPAdapter(BaseAdapter):\n         return conn\n \n     def close(self):\n-        \"\"\"Dispose of any internal state.\n+        \"\"\"Disposes of any internal state.\n \n         Currently, this just closes the PoolManager, which closes pooled\n         connections.\n@@ -155,7 +201,15 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"Obtain the url to use when making the final request.\n \n         If the message is being sent through a proxy, the full URL has to be\n-        used. Otherwise, we should only use the path portion of the URL.\"\"\"\n+        used. Otherwise, we should only use the path portion of the URL.\n+\n+        This shoudl not be called from user code, and is only exposed for use\n+        when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n+        :param proxies: A dictionary of schemes to proxy URLs.\n+        \"\"\"\n         proxies = proxies or {}\n         proxy = proxies.get(urlparse(request.url).scheme)\n \n@@ -168,7 +222,15 @@ class HTTPAdapter(BaseAdapter):\n \n     def add_headers(self, request, **kwargs):\n         \"\"\"Add any headers needed by the connection. Currently this adds a\n-        Proxy-Authorization header.\"\"\"\n+        Proxy-Authorization header.\n+\n+        This should not be called from user code, and is only exposed for use\n+        when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n+        :param kwargs: The keyword arguments from the call to send().\n+        \"\"\"\n         proxies = kwargs.get('proxies', {})\n \n         if proxies is None:\n@@ -186,7 +248,15 @@ class HTTPAdapter(BaseAdapter):\n                                                                      password)\n \n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n-        \"\"\"Sends PreparedRequest object. Returns Response object.\"\"\"\n+        \"\"\"Sends PreparedRequest object. Returns Response object.\n+\n+        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n+        :param stream: (optional) Whether to stream the request content.\n+        :param timeout: (optional) The timeout on the request.\n+        :param verify: (optional) Whether to verify SSL certificates.\n+        :param vert: (optional) Any user-provided SSL certificate to be trusted.\n+        :param proxies: (optional) The proxies dictionary to apply to the request.\n+        \"\"\"\n \n         conn = self.get_connection(request.url, proxies)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6d6252aa9fc4bb38d7f68073b41092c31ddb146b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 25 | Files Changed: 2 | Hunks: 22 | Methods Changed: 9 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 77 | Churn Cumulative: 835 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.625\n\nDIFF:\n@@ -93,6 +93,6 @@ def encode_multipart_formdata(fields, boundary=None):\n \n     body.write(b('--%s--\\r\\n' % (boundary)))\n \n-    content_type = b('multipart/form-data; boundary=%s' % boundary)\n+    content_type = str('multipart/form-data; boundary=%s' % boundary)\n \n     return body.getvalue(), content_type\n\n@@ -4,29 +4,48 @@\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n-import gzip\n+\n import logging\n import zlib\n \n-from io import BytesIO\n-\n from .exceptions import DecodeError\n-from .packages.six import string_types as basestring\n+from .packages.six import string_types as basestring, binary_type\n \n \n log = logging.getLogger(__name__)\n \n \n-def decode_gzip(data):\n-    gzipper = gzip.GzipFile(fileobj=BytesIO(data))\n-    return gzipper.read()\n+class DeflateDecoder(object):\n \n+    def __init__(self):\n+        self._first_try = True\n+        self._data = binary_type()\n+        self._obj = zlib.decompressobj()\n \n-def decode_deflate(data):\n+    def __getattr__(self, name):\n+        return getattr(self._obj, name)\n+\n+    def decompress(self, data):\n+        if not self._first_try:\n+            return self._obj.decompress(data)\n+\n+        self._data += data\n         try:\n-        return zlib.decompress(data)\n+            return self._obj.decompress(data)\n         except zlib.error:\n-        return zlib.decompress(data, -zlib.MAX_WBITS)\n+            self._first_try = False\n+            self._obj = zlib.decompressobj(-zlib.MAX_WBITS)\n+            try:\n+                return self.decompress(self._data)\n+            finally:\n+                self._data = None\n+\n+\n+def _get_decoder(mode):\n+    if mode == 'gzip':\n+        return zlib.decompressobj(16 + zlib.MAX_WBITS)\n+\n+    return DeflateDecoder()\n \n \n class HTTPResponse(object):\n@@ -52,10 +71,7 @@ class HTTPResponse(object):\n         otherwise unused.\n     \"\"\"\n \n-    CONTENT_DECODERS = {\n-        'gzip': decode_gzip,\n-        'deflate': decode_deflate,\n-    }\n+    CONTENT_DECODERS = ['gzip', 'deflate']\n \n     def __init__(self, body='', headers=None, status=0, version=0, reason=None,\n                  strict=0, preload_content=True, decode_content=True,\n@@ -65,8 +81,9 @@ class HTTPResponse(object):\n         self.version = version\n         self.reason = reason\n         self.strict = strict\n+        self.decode_content = decode_content\n \n-        self._decode_content = decode_content\n+        self._decoder = None\n         self._body = body if body and isinstance(body, basestring) else None\n         self._fp = None\n         self._original_response = original_response\n@@ -115,13 +132,13 @@ class HTTPResponse(object):\n         parameters: ``decode_content`` and ``cache_content``.\n \n         :param amt:\n-            How much of the content to read. If specified, decoding and caching\n-            is skipped because we can't decode partial content nor does it make\n-            sense to cache partial content as the full response.\n+            How much of the content to read. If specified, caching is skipped\n+            because it doesn't make sense to cache partial content as the full\n+            response.\n \n         :param decode_content:\n             If True, will attempt to decode the body based on the\n-            'content-encoding' header. (Overridden if ``amt`` is set.)\n+            'content-encoding' header.\n \n         :param cache_content:\n             If True, will save the returned data such that the same result is\n@@ -133,18 +150,24 @@ class HTTPResponse(object):\n         # Note: content-encoding value should be case-insensitive, per RFC 2616\n         # Section 3.5\n         content_encoding = self.headers.get('content-encoding', '').lower()\n-        decoder = self.CONTENT_DECODERS.get(content_encoding)\n+        if self._decoder is None:\n+            if content_encoding in self.CONTENT_DECODERS:\n+                self._decoder = _get_decoder(content_encoding)\n         if decode_content is None:\n-            decode_content = self._decode_content\n+            decode_content = self.decode_content\n \n         if self._fp is None:\n             return\n \n+        flush_decoder = False\n+\n         try:\n             if amt is None:\n                 # cStringIO doesn't like amt=None\n                 data = self._fp.read()\n+                flush_decoder = True\n             else:\n+                cache_content = False\n                 data = self._fp.read(amt)\n                 if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.\n                     # Close the connection when no data is returned\n@@ -155,15 +178,19 @@ class HTTPResponse(object):\n                     # properly close the connection in all cases. There is no harm\n                     # in redundantly calling close.\n                     self._fp.close()\n-                return data\n+                    flush_decoder = True\n \n             try:\n-                if decode_content and decoder:\n-                    data = decoder(data)\n+                if decode_content and self._decoder:\n+                    data = self._decoder.decompress(data)\n             except (IOError, zlib.error):\n                 raise DecodeError(\"Received response with content-encoding: %s, but \"\n                                   \"failed to decode it.\" % content_encoding)\n \n+            if flush_decoder and self._decoder:\n+                buf = self._decoder.decompress(binary_type())\n+                data += buf + self._decoder.flush()\n+\n             if cache_content:\n                 self._body = data\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59f916ca4a6a8e55528988cfc1bee445e71c4602", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 45 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 48 | Churn Cumulative: 10524 | Contributors (this commit): 128 | Commits (past 90d): 48 | Contributors (cumulative): 149 | DMM Complexity: 0.7307692307692307\n\nDIFF:\n@@ -20,7 +20,7 @@ from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n from .utils import (\n-    stream_untransfer, guess_filename, get_auth_from_url, requote_uri,\n+    guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len)\n from .compat import (\n@@ -528,13 +528,13 @@ class Response(object):\n \n         def generate():\n             while 1:\n-                chunk = self.raw.read(chunk_size)\n+                chunk = self.raw.read(chunk_size, decode_content=True)\n                 if not chunk:\n                     break\n                 yield chunk\n             self._content_consumed = True\n \n-        gen = stream_untransfer(generate(), self)\n+        gen = generate()\n \n         if decode_unicode:\n             gen = stream_decode_response_unicode(gen, self)\n\n@@ -346,48 +346,6 @@ def get_unicode_from_response(r):\n         return r.content\n \n \n-def stream_decompress(iterator, mode='gzip'):\n-    \"\"\"Stream decodes an iterator over compressed data\n-\n-    :param iterator: An iterator over compressed data\n-    :param mode: 'gzip' or 'deflate'\n-    :return: An iterator over decompressed data\n-    \"\"\"\n-\n-    if mode not in ['gzip', 'deflate']:\n-        raise ValueError('stream_decompress mode must be gzip or deflate')\n-\n-    zlib_mode = 16 + zlib.MAX_WBITS if mode == 'gzip' else -zlib.MAX_WBITS\n-    dec = zlib.decompressobj(zlib_mode)\n-    try:\n-        for chunk in iterator:\n-            rv = dec.decompress(chunk)\n-            if rv:\n-                yield rv\n-    except zlib.error:\n-        # If there was an error decompressing, just return the raw chunk\n-        yield chunk\n-        # Continue to return the rest of the raw data\n-        for chunk in iterator:\n-            yield chunk\n-    else:\n-        # Make sure everything has been returned from the decompression object\n-        buf = dec.decompress(bytes())\n-        rv = buf + dec.flush()\n-        if rv:\n-            yield rv\n-\n-\n-def stream_untransfer(gen, resp):\n-    ce = resp.headers.get('content-encoding', '').lower()\n-    if 'gzip' in ce:\n-        gen = stream_decompress(gen, mode='gzip')\n-    elif 'deflate' in ce:\n-        gen = stream_decompress(gen, mode='deflate')\n-\n-    return gen\n-\n-\n # The unreserved URI characters (RFC 3986)\n UNRESERVED_SET = frozenset(\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c3432b759ccd58ebdaf443167cca07ff17c63ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 2918 | Contributors (this commit): 45 | Commits (past 90d): 40 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -380,6 +380,11 @@ class RequestsTestCase(unittest.TestCase):\n     def test_response_is_iterable(self):\n         r = requests.Response()\n         io = StringIO.StringIO('abc')\n+        read_ = io.read\n+\n+        def read_mock(amt, decode_content=None):\n+            return read_(amt)\n+        setattr(io, 'read', read_mock)\n         r.raw = io\n         self.assertTrue(next(iter(r)))\n         io.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#17ecb6891c515511ce33250a3f39f752a9c59b55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 370 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -39,6 +39,7 @@ setup(\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n+    setup_requires=['sphinx'],\n     license=open('LICENSE').read(),\n     zip_safe=False,\n     classifiers=(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#36dcce1a06fe0a82d8522c7d4287fb3623722c6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 555 | Contributors (this commit): 9 | Commits (past 90d): 16 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,6 +52,7 @@ class HTTPAdapter(BaseAdapter):\n \n     :param pool_connections: The number of urllib3 connection pools to cache.\n     :param pool_maxsize: The maximum number of connections to save in the pool.\n+    :param max_retries: The maximum number of retries each connection should attempt.\n \n     Usage::\n \n@@ -62,8 +63,9 @@ class HTTPAdapter(BaseAdapter):\n     \"\"\"\n     __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n \n-    def __init__(self, pool_connections=DEFAULT_POOLSIZE, pool_maxsize=DEFAULT_POOLSIZE):\n-        self.max_retries = DEFAULT_RETRIES\n+    def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n+                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES):\n+        self.max_retries = max_retries\n         self.config = {}\n \n         super(HTTPAdapter, self).__init__()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c5d0a0931e1a9b199ea286853fc4722d624d85ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2187 | Contributors (this commit): 40 | Commits (past 90d): 42 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -125,7 +125,7 @@ class SessionRedirectMixin(object):\n \n             # Do what the browsers do, despite standards...\n             if (resp.status_code in (codes.moved, codes.found) and\n-                    prepared_request.method == 'POST'):\n+                    prepared_request.method not in ('GET', 'HEAD')):\n                 method = 'GET'\n \n             prepared_request.method = method\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d13bf9f11337e90ca2d2f86667982d2876a9088f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 115 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -62,6 +62,7 @@ _codes = {\n     444: ('no_response', 'none'),\n     449: ('retry_with', 'retry'),\n     450: ('blocked_by_windows_parental_controls', 'parental_controls'),\n+    451: ('unavailable_for_legal_reasons', 'legal_reasons'),\n     499: ('client_closed_request',),\n \n     # Server Error.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#736e8cd7358a475979da9d2e525e535e81fdab18", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2190 | Contributors (this commit): 41 | Commits (past 90d): 43 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -212,7 +212,8 @@ class Session(SessionRedirectMixin):\n         #: SSL certificate default.\n         self.cert = None\n \n-        #: Maximum number of redirects to follow.\n+        #: Maximum number of redirects allowed. If the request exceeds this\n+        #: limit, a :class:`TooManyRedirects` exception is raised.\n         self.max_redirects = DEFAULT_REDIRECT_LIMIT\n \n         #: Should we trust the environment?\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1866f7596e2c9e20dddf5d8c570c44e496a71c57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 2931 | Contributors (this commit): 45 | Commits (past 90d): 30 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,6 +4,7 @@\n \"\"\"Tests for Requests.\"\"\"\n \n from __future__ import division\n+import cookielib\n import json\n import os\n import unittest\n@@ -12,6 +13,7 @@ import pickle\n import requests\n from requests.auth import HTTPDigestAuth\n from requests.compat import str\n+from requests.cookies import cookiejar_from_dict\n \n try:\n     import StringIO\n@@ -137,6 +139,17 @@ class RequestsTestCase(unittest.TestCase):\n         )\n         assert 'foo' not in s.cookies\n \n+    def test_generic_cookiejar_works(self):\n+        cj = cookielib.CookieJar()\n+        cookiejar_from_dict({'foo': 'bar'}, cj)\n+        s = requests.session()\n+        s.cookies = cj\n+        r = s.get(httpbin('cookies'))\n+        # Make sure the cookie was sent\n+        assert r.json()['cookies']['foo'] == 'bar'\n+        # Make sure the session cj is still the custom one\n+        assert s.cookies is cj\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9763a671da1061244aa0a98e924efa1ec8379a7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2196 | Contributors (this commit): 41 | Commits (past 90d): 39 | Contributors (cumulative): 41 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,6 +9,7 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n import os\n+from copy import copy\n from datetime import datetime\n \n from .compat import cookielib\n@@ -285,8 +286,9 @@ class Session(SessionRedirectMixin):\n             cookies = cookiejar_from_dict(cookies)\n \n         # Merge with session cookies\n-        merged_cookies = self.cookies.copy()\n-        merged_cookies.update(cookies)\n+        merged_cookies = copy(self.cookies)\n+        for cookie in cookies:\n+            merged_cookies.set_cookie(cookie)\n         cookies = merged_cookies\n \n         # Gather clues from the surrounding environment.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3ff8d4380188934ed170a084083c7c5fe6cdf0c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2934 | Contributors (this commit): 45 | Commits (past 90d): 31 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,6 @@\n \"\"\"Tests for Requests.\"\"\"\n \n from __future__ import division\n-import cookielib\n import json\n import os\n import unittest\n@@ -12,7 +11,7 @@ import pickle\n \n import requests\n from requests.auth import HTTPDigestAuth\n-from requests.compat import str\n+from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n \n try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a7fef5875688bce4435fd356c4442ffdad1dd49d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 2942 | Contributors (this commit): 45 | Commits (past 90d): 32 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -138,6 +138,14 @@ class RequestsTestCase(unittest.TestCase):\n         )\n         assert 'foo' not in s.cookies\n \n+    def test_request_cookie_overrides_session_cookie(self):\n+        s = requests.session()\n+        s.cookies['foo'] = 'bar'\n+        r = s.get(httpbin('cookies'), cookies={'foo': 'baz'})\n+        assert r.json()['cookies']['foo'] == 'baz'\n+        # Session cookie should not be modified\n+        assert s.cookies['foo'] == 'bar'\n+\n     def test_generic_cookiejar_works(self):\n         cj = cookielib.CookieJar()\n         cookiejar_from_dict({'foo': 'bar'}, cj)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0c609b59abfa25e00e320034e46c5bf4443078b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 2205 | Contributors (this commit): 41 | Commits (past 90d): 40 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -9,11 +9,10 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n import os\n-from copy import copy\n from datetime import datetime\n \n from .compat import cookielib\n-from .cookies import cookiejar_from_dict, extract_cookies_to_jar\n+from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import from_key_val_list, default_headers\n@@ -286,9 +285,9 @@ class Session(SessionRedirectMixin):\n             cookies = cookiejar_from_dict(cookies)\n \n         # Merge with session cookies\n-        merged_cookies = copy(self.cookies)\n-        for cookie in cookies:\n-            merged_cookies.set_cookie(cookie)\n+        merged_cookies = RequestsCookieJar()\n+        merged_cookies.update(self.cookies)\n+        merged_cookies.update(cookies)\n         cookies = merged_cookies\n \n         # Gather clues from the surrounding environment.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49ca72c8028353005588c0627be026956ca62d6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 19 | Files Changed: 8 | Hunks: 17 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 49 | Churn Cumulative: 4849 | Contributors (this commit): 5 | Commits (past 90d): 12 | Contributors (cumulative): 23 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -1,5 +1,5 @@\n # urllib3/__init__.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n@@ -1,5 +1,5 @@\n # urllib3/_collections.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n@@ -1,5 +1,5 @@\n # urllib3/connectionpool.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n@@ -446,12 +446,14 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n         except Empty as e:\n             # Timed out by queue\n-            raise TimeoutError(self, \"Request timed out. (pool_timeout=%s)\" %\n+            raise TimeoutError(self, url,\n+                               \"Request timed out. (pool_timeout=%s)\" %\n                                pool_timeout)\n \n         except SocketTimeout as e:\n             # Timed out by socket\n-            raise TimeoutError(self, \"Request timed out. (timeout=%s)\" %\n+            raise TimeoutError(self, url,\n+                               \"Request timed out. (timeout=%s)\" %\n                                timeout)\n \n         except BaseSSLError as e:\n\n@@ -1,5 +1,5 @@\n # urllib3/contrib/ntlmpool.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n@@ -1,5 +1,5 @@\n # urllib3/exceptions.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n@@ -20,7 +20,18 @@ class PoolError(HTTPError):\n \n     def __reduce__(self):\n         # For pickling purposes.\n-        return self.__class__, (None, self.url)\n+        return self.__class__, (None, None)\n+\n+\n+class RequestError(PoolError):\n+    \"Base exception for PoolErrors that have associated URLs.\"\n+    def __init__(self, pool, url, message):\n+        self.url = url\n+        PoolError.__init__(self, pool, message)\n+\n+    def __reduce__(self):\n+        # For pickling purposes.\n+        return self.__class__, (None, self.url, None)\n \n \n class SSLError(HTTPError):\n@@ -35,7 +46,7 @@ class DecodeError(HTTPError):\n \n ## Leaf Exceptions\n \n-class MaxRetryError(PoolError):\n+class MaxRetryError(RequestError):\n     \"Raised when the maximum number of retries is exceeded.\"\n \n     def __init__(self, pool, url, reason=None):\n@@ -47,22 +58,19 @@ class MaxRetryError(PoolError):\n         else:\n             message += \" (Caused by redirect)\"\n \n-        PoolError.__init__(self, pool, message)\n-        self.url = url\n+        RequestError.__init__(self, pool, url, message)\n \n \n-class HostChangedError(PoolError):\n+class HostChangedError(RequestError):\n     \"Raised when an existing pool gets a request for a foreign host.\"\n \n     def __init__(self, pool, url, retries=3):\n         message = \"Tried to open a foreign host with url: %s\" % url\n-        PoolError.__init__(self, pool, message)\n-\n-        self.url = url\n+        RequestError.__init__(self, pool, url, message)\n         self.retries = retries\n \n \n-class TimeoutError(PoolError):\n+class TimeoutError(RequestError):\n     \"Raised when a socket timeout occurs.\"\n     pass\n \n\n@@ -1,5 +1,5 @@\n # urllib3/poolmanager.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n@@ -150,6 +150,7 @@ class PoolManager(RequestMethods):\n \n         log.info(\"Redirecting %s -> %s\" % (url, redirect_location))\n         kw['retries'] = kw.get('retries', 3) - 1  # Persist retries countdown\n+        kw['redirect'] = redirect\n         return self.urlopen(method, redirect_location, **kw)\n \n \n\n@@ -1,5 +1,5 @@\n # urllib3/request.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n@@ -1,5 +1,5 @@\n # urllib3/util.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
