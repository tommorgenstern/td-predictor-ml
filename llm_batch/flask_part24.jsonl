{"custom_id": "flask#fc2caa4b9c75a6ee8569495008efd1f37c27a8cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 86 | Lines Deleted: 86 | Files Changed: 8 | Hunks: 61 | Methods Changed: 45 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 172 | Churn Cumulative: 2886 | Contributors (this commit): 1 | Commits (past 90d): 24 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -73,7 +73,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n         self.assert_equal(rv.status_code, 200)\n-        assert not rv.data  # head truncates\n+        self.assert_(not rv.data) # head truncates\n         self.assert_equal(c.post('/more').data, 'POST')\n         self.assert_equal(c.get('/more').data, 'GET')\n         rv = c.delete('/more')\n@@ -97,7 +97,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n         self.assert_equal(rv.status_code, 200)\n-        assert not rv.data  # head truncates\n+        self.assert_(not rv.data) # head truncates\n         self.assert_equal(c.post('/more').data, 'POST')\n         self.assert_equal(c.get('/more').data, 'GET')\n         rv = c.delete('/more')\n@@ -168,8 +168,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com/')\n-        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-        assert 'httponly' in rv.headers['set-cookie'].lower()\n+        self.assert_('domain=.example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_server_name_and_port(self):\n         app = flask.Flask(__name__)\n@@ -182,8 +182,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-        assert 'httponly' in rv.headers['set-cookie'].lower()\n+        self.assert_('domain=.example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_application_root(self):\n         class PrefixPathMiddleware(object):\n@@ -205,7 +205,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        assert 'path=/bar' in rv.headers['set-cookie'].lower()\n+        self.assert_('path=/bar' in rv.headers['set-cookie'].lower())\n \n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n@@ -213,11 +213,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 f(*args, **kwargs)\n             except RuntimeError, e:\n-                assert e.args and 'session is unavailable' in e.args[0]\n+                self.assert_(e.args and 'session is unavailable' in e.args[0])\n             else:\n-                assert False, 'expected exception'\n+                self.assert_(False, 'expected exception')\n         with app.test_request_context():\n-            assert flask.session.get('missing_key') is None\n+            self.assert_(flask.session.get('missing_key') is None)\n             expect_exception(flask.session.__setitem__, 'foo', 42)\n             expect_exception(flask.session.pop, 'foo')\n \n@@ -237,7 +237,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         client = app.test_client()\n         rv = client.get('/')\n-        assert 'set-cookie' in rv.headers\n+        self.assert_('set-cookie' in rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n@@ -250,20 +250,20 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         permanent = False\n         rv = app.test_client().get('/')\n-        assert 'set-cookie' in rv.headers\n+        self.assert_('set-cookie' in rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n-        assert match is None\n+        self.assert_(match is None)\n \n     def test_flashes(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n \n         with app.test_request_context():\n-            assert not flask.session.modified\n+            self.assert_(not flask.session.modified)\n             flask.flash('Zap')\n             flask.session.modified = False\n             flask.flash('Zip')\n-            assert flask.session.modified\n+            self.assert_(flask.session.modified)\n             self.assert_equal(list(flask.get_flashed_messages()), ['Zap', 'Zip'])\n \n     def test_extended_flashing(self):\n@@ -308,12 +308,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return response\n         @app.route('/')\n         def index():\n-            assert 'before' in evts\n-            assert 'after' not in evts\n+            self.assert_('before' in evts)\n+            self.assert_('after' not in evts)\n             return 'request'\n-        assert 'after' not in evts\n+        self.assert_('after' not in evts)\n         rv = app.test_client().get('/').data\n-        assert 'after' in evts\n+        self.assert_('after' in evts)\n         self.assert_equal(rv, 'request|after')\n \n     def test_teardown_request_handler(self):\n@@ -328,7 +328,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        assert 'Response' in rv.data\n+        self.assert_('Response' in rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_debug_mode(self):\n@@ -344,7 +344,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        assert 'Response' in rv.data\n+        self.assert_('Response' in rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_error(self):\n@@ -377,7 +377,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             1/0\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        assert 'Internal Server Error' in rv.data\n+        self.assert_('Internal Server Error' in rv.data)\n         self.assert_equal(len(called), 2)\n \n     def test_before_after_request_order(self):\n@@ -451,7 +451,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         @app.errorhandler(MyException)\n         def handle_my_exception(e):\n-            assert isinstance(e, MyException)\n+            self.assert_(isinstance(e, MyException))\n             return '42'\n         @app.route('/')\n         def index():\n@@ -474,7 +474,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             c.get('/fail')\n         except KeyError, e:\n-            assert isinstance(e, BadRequest)\n+            self.assert_(isinstance(e, BadRequest))\n         else:\n             self.fail('Expected exception')\n \n@@ -509,8 +509,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 c.post('/fail', data={'foo': 'index.txt'})\n             except DebugFilesKeyError, e:\n-                assert 'no file contents were transmitted' in str(e)\n-                assert 'This was submitted: \"index.txt\"' in str(e)\n+                self.assert_('no file contents were transmitted' in str(e))\n+                self.assert_('This was submitted: \"index.txt\"' in str(e))\n             else:\n                 self.fail('Expected exception')\n \n@@ -572,8 +572,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             pass\n         with app.test_request_context():\n             self.assert_equal(flask.url_for('hello', name='test x'), '/hello/test%20x')\n-            assert flask.url_for('hello', name='test x', _external=True) \\\n-                == 'http://localhost/hello/test%20x'\n+            self.assert_equal(flask.url_for('hello', name='test x', _external=True),\n+                              'http://localhost/hello/test%20x')\n \n     def test_custom_converters(self):\n         from werkzeug.routing import BaseConverter\n@@ -597,8 +597,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(rv.status_code, 200)\n         self.assert_equal(rv.data.strip(), '<h1>Hello World!</h1>')\n         with app.test_request_context():\n-            assert flask.url_for('static', filename='index.html') \\\n-                == '/static/index.html'\n+            self.assert_equal(flask.url_for('static', filename='index.html'),\n+                              '/static/index.html')\n \n     def test_none_response(self):\n         app = flask.Flask(__name__)\n@@ -611,7 +611,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(str(e), 'View function did not return a response')\n             pass\n         else:\n-            assert \"Expected ValueError\"\n+            self.assert_(\"Expected ValueError\")\n \n     def test_request_locals(self):\n         self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n@@ -641,7 +641,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n         except Exception, e:\n-            assert isinstance(e, ValueError)\n+            self.assert_(isinstance(e, ValueError))\n             self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:5000') does not match the \" + \\\n                     \"server name from the WSGI environment ('localhost')\")\n@@ -768,11 +768,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         @app.before_request\n         def always_first():\n             flask.request.form['myfile']\n-            assert False\n+            self.assert_(False)\n         @app.route('/accept', methods=['POST'])\n         def accept_file():\n             flask.request.form['myfile']\n-            assert False\n+            self.assert_(False)\n         @app.errorhandler(413)\n         def catcher(error):\n             return '42'\n@@ -889,17 +889,17 @@ class ContextTestCase(FlaskTestCase):\n             self.assert_equal(index(), 'Hello World!')\n         with app.test_request_context('/meh'):\n             self.assert_equal(meh(), 'http://localhost/meh')\n-        assert flask._request_ctx_stack.top is None\n+        self.assert_(flask._request_ctx_stack.top is None)\n \n     def test_context_test(self):\n         app = flask.Flask(__name__)\n-        assert not flask.request\n-        assert not flask.has_request_context()\n+        self.assert_(not flask.request)\n+        self.assert_(not flask.has_request_context())\n         ctx = app.test_request_context()\n         ctx.push()\n         try:\n-            assert flask.request\n-            assert flask.has_request_context()\n+            self.assert_(flask.request)\n+            self.assert_(flask.has_request_context())\n         finally:\n             ctx.pop()\n \n@@ -918,7 +918,7 @@ class ContextTestCase(FlaskTestCase):\n         except RuntimeError:\n             pass\n         else:\n-            assert 0, 'expected runtime error'\n+            self.assert_(0, 'expected runtime error')\n \n \n class SubdomainTestCase(FlaskTestCase):\n\n@@ -173,8 +173,8 @@ class ModuleTestCase(FlaskTestCase):\n         self.assert_equal(rv.data.strip(), '/* nested file */')\n \n         with app.test_request_context():\n-            assert flask.url_for('admin.static', filename='test.txt') \\\n-                == '/admin/static/test.txt'\n+            self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n+                              '/admin/static/test.txt')\n \n         with app.test_request_context():\n             try:\n@@ -182,7 +182,7 @@ class ModuleTestCase(FlaskTestCase):\n             except TemplateNotFound, e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n-                assert 0, 'expected exception'\n+                self.assert_(0, 'expected exception')\n \n         with flask.Flask(__name__).test_request_context():\n             self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n@@ -198,13 +198,13 @@ class ModuleTestCase(FlaskTestCase):\n             except NotFound:\n                 pass\n             else:\n-                assert 0, 'expected exception'\n+                self.assert_(0, 'expected exception')\n             try:\n                 f('../__init__.py')\n             except NotFound:\n                 pass\n             else:\n-                assert 0, 'expected exception'\n+                self.assert_(0, 'expected exception')\n \n             # testcase for a security issue that may exist on windows systems\n             import os\n@@ -217,7 +217,7 @@ class ModuleTestCase(FlaskTestCase):\n                 except NotFound:\n                     pass\n                 else:\n-                    assert 0, 'expected exception'\n+                    self.assert_(0, 'expected exception')\n             finally:\n                 os.path = old_path\n \n@@ -355,8 +355,8 @@ class BlueprintTestCase(FlaskTestCase):\n         self.assert_equal(rv.data.strip(), '/* nested file */')\n \n         with app.test_request_context():\n-            assert flask.url_for('admin.static', filename='test.txt') \\\n-                == '/admin/static/test.txt'\n+            self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n+                              '/admin/static/test.txt')\n \n         with app.test_request_context():\n             try:\n@@ -364,7 +364,7 @@ class BlueprintTestCase(FlaskTestCase):\n             except TemplateNotFound, e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n-                assert 0, 'expected exception'\n+                self.assert_(0, 'expected exception')\n \n         with flask.Flask(__name__).test_request_context():\n             self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n\n@@ -25,7 +25,7 @@ class ConfigTestCase(FlaskTestCase):\n     def common_object_test(self, app):\n         self.assert_equal(app.secret_key, 'devkey')\n         self.assert_equal(app.config['TEST_KEY'], 'foo')\n-        assert 'ConfigTestCase' not in app.config\n+        self.assert_('ConfigTestCase' not in app.config)\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n@@ -54,13 +54,13 @@ class ConfigTestCase(FlaskTestCase):\n             try:\n                 app.config.from_envvar('FOO_SETTINGS')\n             except RuntimeError, e:\n-                assert \"'FOO_SETTINGS' is not set\" in str(e)\n+                self.assert_(\"'FOO_SETTINGS' is not set\" in str(e))\n             else:\n-                assert 0, 'expected exception'\n-            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+                self.assert_(0, 'expected exception')\n+            self.assert_(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n \n             os.environ = {'FOO_SETTINGS': __file__.rsplit('.')[0] + '.py'}\n-            assert app.config.from_envvar('FOO_SETTINGS')\n+            self.assert_(app.config.from_envvar('FOO_SETTINGS'))\n             self.common_object_test(app)\n         finally:\n             os.environ = env\n@@ -71,12 +71,12 @@ class ConfigTestCase(FlaskTestCase):\n             app.config.from_pyfile('missing.cfg')\n         except IOError, e:\n             msg = str(e)\n-            assert msg.startswith('[Errno 2] Unable to load configuration '\n-                                  'file (No such file or directory):')\n-            assert msg.endswith(\"missing.cfg'\")\n+            self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n+                                        'file (No such file or directory):'))\n+            self.assert_(msg.endswith(\"missing.cfg'\"))\n         else:\n-            assert 0, 'expected config'\n-        assert not app.config.from_pyfile('missing.cfg', silent=True)\n+            self.assert_(0, 'expected config')\n+        self.assert_(not app.config.from_pyfile('missing.cfg', silent=True))\n \n \n class InstanceTestCase(FlaskTestCase):\n\n@@ -29,7 +29,7 @@ class DeprecationsTestCase(FlaskTestCase):\n             c = app.test_client()\n             self.assert_equal(c.get('/').data, '42')\n             self.assert_equal(len(log), 1)\n-            assert 'init_jinja_globals' in str(log[0]['message'])\n+            self.assert_('init_jinja_globals' in str(log[0]['message']))\n \n \n def suite():\n\n@@ -108,7 +108,7 @@ class SendfileTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            assert rv.direct_passthrough\n+            self.assert_(rv.direct_passthrough)\n             self.assert_equal(rv.mimetype, 'text/html')\n             with app.open_resource('static/index.html') as f:\n                 self.assert_equal(rv.data, f.read())\n@@ -118,8 +118,8 @@ class SendfileTestCase(FlaskTestCase):\n         app.use_x_sendfile = True\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            assert rv.direct_passthrough\n-            assert 'x-sendfile' in rv.headers\n+            self.assert_(rv.direct_passthrough)\n+            self.assert_('x-sendfile' in rv.headers)\n             self.assert_equal(rv.headers['x-sendfile'],\n                 os.path.join(app.root_path, 'static/index.html'))\n             self.assert_equal(rv.mimetype, 'text/html')\n@@ -142,7 +142,7 @@ class SendfileTestCase(FlaskTestCase):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n                 self.assert_equal(rv.mimetype, 'text/html')\n-                assert 'x-sendfile' in rv.headers\n+                self.assert_('x-sendfile' in rv.headers)\n                 self.assert_equal(rv.headers['x-sendfile'],\n                     os.path.join(app.root_path, 'static/index.html'))\n             # mimetypes + etag\n@@ -170,7 +170,7 @@ class SendfileTestCase(FlaskTestCase):\n             with app.test_request_context():\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n-                assert 'x-sendfile' not in rv.headers\n+                self.assert_('x-sendfile' not in rv.headers)\n             # etags\n             self.assert_equal(len(captured), 1)\n \n@@ -207,10 +207,10 @@ class LoggingTestCase(FlaskTestCase):\n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n         logger1 = app.logger\n-        assert app.logger is logger1\n+        self.assert_(app.logger is logger1)\n         self.assert_equal(logger1.name, __name__)\n         app.logger_name = __name__ + '/test_logger_cache'\n-        assert app.logger is not logger1\n+        self.assert_(app.logger is not logger1)\n \n     def test_debug_log(self):\n         app = flask.Flask(__name__)\n@@ -230,10 +230,10 @@ class LoggingTestCase(FlaskTestCase):\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n-                assert 'WARNING in helpers [' in out\n-                assert os.path.basename(__file__.rsplit('.')[0] + '.py') in out\n-                assert 'the standard library is dead' in out\n-                assert 'this is a debug statement' in out\n+                self.assert_('WARNING in helpers [' in out)\n+                self.assert_(os.path.basename(__file__.rsplit('.')[0] + '.py') in out)\n+                self.assert_('the standard library is dead' in out)\n+                self.assert_('this is a debug statement' in out)\n \n             with catch_stderr() as err:\n                 try:\n@@ -241,7 +241,7 @@ class LoggingTestCase(FlaskTestCase):\n                 except ZeroDivisionError:\n                     pass\n                 else:\n-                    assert False, 'debug log ate the exception'\n+                    self.assert_(False, 'debug log ate the exception')\n \n     def test_exception_logging(self):\n         out = StringIO()\n@@ -255,13 +255,13 @@ class LoggingTestCase(FlaskTestCase):\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        assert 'Internal Server Error' in rv.data\n+        self.assert_('Internal Server Error' in rv.data)\n \n         err = out.getvalue()\n-        assert 'Exception on / [GET]' in err\n-        assert 'Traceback (most recent call last):' in err\n-        assert '1/0' in err\n-        assert 'ZeroDivisionError:' in err\n+        self.assert_('Exception on / [GET]' in err)\n+        self.assert_('Traceback (most recent call last):' in err)\n+        self.assert_('1/0' in err)\n+        self.assert_('ZeroDivisionError:' in err)\n \n     def test_processor_exceptions(self):\n         app = flask.Flask(__name__)\n\n@@ -91,7 +91,7 @@ class SignalsTestCase(FlaskTestCase):\n         try:\n             self.assert_equal(app.test_client().get('/').status_code, 500)\n             self.assert_equal(len(recorded), 1)\n-            assert isinstance(recorded[0], ZeroDivisionError)\n+            self.assert_(isinstance(recorded[0], ZeroDivisionError))\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n \n\n@@ -70,10 +70,10 @@ class TemplatingTestCase(FlaskTestCase):\n     def test_no_escaping(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n-            assert flask.render_template_string('{{ foo }}',\n-                foo='<test>') == '<test>'\n-            assert flask.render_template('mail.txt', foo='<test>') \\\n-                == '<test> Mail'\n+            self.assert_equal(flask.render_template_string('{{ foo }}',\n+                              foo='<test>'), '<test>')\n+            self.assert_equal(flask.render_template('mail.txt', foo='<test>'),\n+                              '<test> Mail')\n \n     def test_macros(self):\n         app = flask.Flask(__name__)\n@@ -86,7 +86,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter()\n         def my_reverse(s):\n             return s[::-1]\n-        assert 'my_reverse' in  app.jinja_env.filters.keys()\n+        self.assert_('my_reverse' in  app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -95,7 +95,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter('strrev')\n         def my_reverse(s):\n             return s[::-1]\n-        assert 'strrev' in  app.jinja_env.filters.keys()\n+        self.assert_('strrev' in  app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n\n@@ -102,8 +102,8 @@ class TestToolsTestCase(FlaskTestCase):\n             self.assert_equal(resp.status_code, 200)\n \n             resp = c.get('/other')\n-            assert not hasattr(flask.g, 'value')\n-            assert 'Internal Server Error' in resp.data\n+            self.assert_(not hasattr(flask.g, 'value'))\n+            self.assert_('Internal Server Error' in resp.data)\n             self.assert_equal(resp.status_code, 500)\n             flask.g.value = 23\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d5cd4f8d59a4a8e5860c8813b3f5d3f3631e9183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 181 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -88,7 +88,10 @@ setup(\n     description='A microframework based on Werkzeug, Jinja2 '\n                 'and good intentions',\n     long_description=__doc__,\n-    packages=['flask'],\n+    packages=['flask', 'flask.testsuite'],\n+    package_data={\n+        'flask.testsuite': ['test_apps/*', 'static/*', 'templates/*']\n+    },\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fbd6776e68a12aa7bf7d646ca03d568cedc616f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 614 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ class ConfigTestCase(FlaskTestCase):\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n-        app.config.from_pyfile(__file__.rsplit('.')[0] + '.py')\n+        app.config.from_pyfile(__file__.rsplit('.', 1)[0] + '.py')\n         self.common_object_test(app)\n \n     def test_config_from_object(self):\n@@ -59,7 +59,7 @@ class ConfigTestCase(FlaskTestCase):\n                 self.assert_(0, 'expected exception')\n             self.assert_(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n \n-            os.environ = {'FOO_SETTINGS': __file__.rsplit('.')[0] + '.py'}\n+            os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n             self.assert_(app.config.from_envvar('FOO_SETTINGS'))\n             self.common_object_test(app)\n         finally:\n\n@@ -231,7 +231,7 @@ class LoggingTestCase(FlaskTestCase):\n                 c.get('/')\n                 out = err.getvalue()\n                 self.assert_('WARNING in helpers [' in out)\n-                self.assert_(os.path.basename(__file__.rsplit('.')[0] + '.py') in out)\n+                self.assert_(os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out)\n                 self.assert_('the standard library is dead' in out)\n                 self.assert_('this is a debug statement' in out)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#29b7efa36bd12234a4086cafbe9b8a4099991d08", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 81 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -37,21 +37,21 @@ class BetterLoader(TestLoader):\n                 if testname[len(common_prefix):] == name:\n                     return testcase\n \n-        all_results = []\n+        all_tests = []\n         for testcase, testname in find_all_tests_with_name():\n-            if testname.endswith('.' + name):\n-                all_results.append((testcase, testname))\n+            if testname.endswith('.' + name) or ('.' + name + '.') in testname:\n+                all_tests.append(testcase)\n \n-        if len(all_results) == 1:\n-            return all_results[0][0]\n-        elif not len(all_results):\n-            error = 'could not find testcase \"%s\"' % name\n-        else:\n-            error = 'Too many matches: for \"%s\"\\n%s' % \\\n-                (name, '\\n'.join('  - ' + n for c, n in all_results))\n-\n-        print >> sys.stderr, 'Error: %s' % error\n+        if not all_tests:\n+            print >> sys.stderr, 'Error: could not find test case for \"%s\"' % name\n             sys.exit(1)\n \n+        if len(all_tests) == 1:\n+            return all_tests[0]\n+        rv = unittest.TestSuite()\n+        for test in all_tests:\n+            rv.addTest(test)\n+        return rv\n+\n \n unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f30b1174b85ae44b4d215045ef3361f2c3b3a367", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 84 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -39,7 +39,8 @@ class BetterLoader(TestLoader):\n \n         all_tests = []\n         for testcase, testname in find_all_tests_with_name():\n-            if testname.endswith('.' + name) or ('.' + name + '.') in testname:\n+            if testname.endswith('.' + name) or ('.' + name + '.') in testname or \\\n+               testname.startswith(name + '.'):\n                 all_tests.append(testcase)\n \n         if not all_tests:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5a496885544989ca702e2c9996372a8ebf2cf00d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 56 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/18 | Churn Δ: 109 | Churn Cumulative: 314 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,9 @@ from contextlib import contextmanager\n from werkzeug.utils import import_string, find_modules\n \n \n+common_prefix = __name__ + '.'\n+\n+\n def add_to_path(path):\n     def _samefile(x, y):\n         try:\n@@ -47,6 +50,25 @@ def iter_suites():\n             yield mod.suite()\n \n \n+def find_all_tests():\n+    suites = [suite()]\n+    while suites:\n+        s = suites.pop()\n+        try:\n+            suites.extend(s)\n+        except TypeError:\n+            yield s\n+\n+\n+def find_all_tests_with_name():\n+    for testcase in find_all_tests():\n+        yield testcase, '%s.%s.%s' % (\n+            testcase.__class__.__module__,\n+            testcase.__class__.__name__,\n+            testcase._testMethodName\n+        )\n+\n+\n @contextmanager\n def catch_warnings():\n     \"\"\"Catch warnings in a with block in a list\"\"\"\n@@ -113,6 +135,36 @@ class FlaskTestCase(unittest.TestCase):\n         return self.assertEqual(x, y)\n \n \n+class BetterLoader(unittest.TestLoader):\n+\n+    def loadTestsFromName(self, name, module=None):\n+        if name == 'suite':\n+            return suite()\n+        for testcase, testname in find_all_tests_with_name():\n+            if testname == name:\n+                return testcase\n+            if testname.startswith(common_prefix):\n+                if testname[len(common_prefix):] == name:\n+                    return testcase\n+\n+        all_tests = []\n+        for testcase, testname in find_all_tests_with_name():\n+            if testname.endswith('.' + name) or ('.' + name + '.') in testname or \\\n+               testname.startswith(name + '.'):\n+                all_tests.append(testcase)\n+\n+        if not all_tests:\n+            print >> sys.stderr, 'Error: could not find test case for \"%s\"' % name\n+            sys.exit(1)\n+\n+        if len(all_tests) == 1:\n+            return all_tests[0]\n+        rv = unittest.TestSuite()\n+        for test in all_tests:\n+            rv.addTest(test)\n+        return rv\n+\n+\n def suite():\n     setup_paths()\n     suite = unittest.TestSuite()\n\n@@ -1,58 +1,3 @@\n-import sys\n import unittest\n-from unittest.loader import TestLoader\n-from flask.testsuite import suite\n-\n-common_prefix = suite.__module__ + '.'\n-\n-\n-def find_all_tests():\n-    suites = [suite()]\n-    while suites:\n-        s = suites.pop()\n-        try:\n-            suites.extend(s)\n-        except TypeError:\n-            yield s\n-\n-\n-def find_all_tests_with_name():\n-    for testcase in find_all_tests():\n-        yield testcase, '%s.%s.%s' % (\n-            testcase.__class__.__module__,\n-            testcase.__class__.__name__,\n-            testcase._testMethodName\n-        )\n-\n-\n-class BetterLoader(TestLoader):\n-\n-    def loadTestsFromName(self, name, module=None):\n-        if name == 'suite':\n-            return suite()\n-        for testcase, testname in find_all_tests_with_name():\n-            if testname == name:\n-                return testcase\n-            if testname.startswith(common_prefix):\n-                if testname[len(common_prefix):] == name:\n-                    return testcase\n-\n-        all_tests = []\n-        for testcase, testname in find_all_tests_with_name():\n-            if testname.endswith('.' + name) or ('.' + name + '.') in testname or \\\n-               testname.startswith(name + '.'):\n-                all_tests.append(testcase)\n-\n-        if not all_tests:\n-            print >> sys.stderr, 'Error: could not find test case for \"%s\"' % name\n-            sys.exit(1)\n-\n-        if len(all_tests) == 1:\n-            return all_tests[0]\n-        rv = unittest.TestSuite()\n-        for test in all_tests:\n-            rv.addTest(test)\n-        return rv\n-\n-\n+from flask.testsuite import BetterLoader\n unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a082a5e0ba81af15653fe56501c8d2530d3621dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 23 | Files Changed: 1 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 49 | Churn Cumulative: 222 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.75\n\nDIFF:\n@@ -20,9 +20,6 @@ from contextlib import contextmanager\n from werkzeug.utils import import_string, find_modules\n \n \n-common_prefix = __name__ + '.'\n-\n-\n def add_to_path(path):\n     def _samefile(x, y):\n         try:\n@@ -50,22 +47,17 @@ def iter_suites():\n             yield mod.suite()\n \n \n-def find_all_tests():\n-    suites = [suite()]\n+def find_all_tests(suite):\n+    suites = [suite]\n     while suites:\n         s = suites.pop()\n         try:\n             suites.extend(s)\n         except TypeError:\n-            yield s\n-\n-\n-def find_all_tests_with_name():\n-    for testcase in find_all_tests():\n-        yield testcase, '%s.%s.%s' % (\n-            testcase.__class__.__module__,\n-            testcase.__class__.__name__,\n-            testcase._testMethodName\n+            yield s, '%s.%s.%s' % (\n+                s.__class__.__module__,\n+                s.__class__.__name__,\n+                s._testMethodName\n             )\n \n \n@@ -111,6 +103,10 @@ def emits_module_deprecation_warning(f):\n \n \n class FlaskTestCase(unittest.TestCase):\n+    \"\"\"Baseclass for all the tests that Flask uses.  Use these methods\n+    for testing instead of the camelcased ones in the baseclass for\n+    consistency.\n+    \"\"\"\n \n     def ensure_clean_request_context(self):\n         # make sure we're not leaking a request context since we are\n@@ -136,20 +132,27 @@ class FlaskTestCase(unittest.TestCase):\n \n \n class BetterLoader(unittest.TestLoader):\n+    \"\"\"A nicer loader that solves two problems.  First of all we are setting\n+    up tests from different sources and we're doing this programmatically\n+    which breaks the default loading logic so this is required anyways.\n+    Secondly this loader has a nicer interpolation for test names than the\n+    default one so you can just do ``run-tests.py ViewTestCase`` and it\n+    will work.\n+    \"\"\"\n+\n+    def getRootSuite(self):\n+        return suite()\n \n     def loadTestsFromName(self, name, module=None):\n+        root = self.getRootSuite()\n         if name == 'suite':\n-            return suite()\n-        for testcase, testname in find_all_tests_with_name():\n-            if testname == name:\n-                return testcase\n-            if testname.startswith(common_prefix):\n-                if testname[len(common_prefix):] == name:\n-                    return testcase\n+            return root\n \n         all_tests = []\n-        for testcase, testname in find_all_tests_with_name():\n-            if testname.endswith('.' + name) or ('.' + name + '.') in testname or \\\n+        for testcase, testname in find_all_tests(root):\n+            if testname == name or \\\n+               testname.endswith('.' + name) or \\\n+               ('.' + name + '.') in testname or \\\n                testname.startswith(name + '.'):\n                 all_tests.append(testcase)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5235c3e37e17b3271e3cac4646eaf97fd1cc071a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 369 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -157,8 +157,7 @@ class BetterLoader(unittest.TestLoader):\n                 all_tests.append(testcase)\n \n         if not all_tests:\n-            print >> sys.stderr, 'Error: could not find test case for \"%s\"' % name\n-            sys.exit(1)\n+            raise LookupError('could not find test case for \"%s\"' % name)\n \n         if len(all_tests) == 1:\n             return all_tests[0]\n\n@@ -1,3 +1,6 @@\n import unittest\n from flask.testsuite import BetterLoader\n+try:\n     unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n+except Exception, e:\n+    print 'Error: %s' % e\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c8ec453d860ae4754331170108ef03322f29889b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 17 | Churn Cumulative: 309 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -53,9 +53,11 @@ class FlaskClient(Client):\n         :meth:`~flask.Flask.test_request_context` which are directly\n         passed through.\n         \"\"\"\n+        if self.cookie_jar is None:\n+            raise RuntimeError('Session transactions only make sense '\n+                               'with cookies enabled.')\n         app = self.application\n         environ_overrides = kwargs.pop('environ_overrides', {})\n-        if self.cookie_jar is not None:\n         self.cookie_jar.inject_wsgi(environ_overrides)\n         outer_reqctx = _request_ctx_stack.top\n         with app.test_request_context(*args, **kwargs) as c:\n@@ -80,7 +82,6 @@ class FlaskClient(Client):\n             resp = app.response_class()\n             if not app.session_interface.is_null_session(sess):\n                 app.save_session(sess, resp)\n-            if self.cookie_jar is not None:\n             headers = resp.get_wsgi_headers(c.request.environ)\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n\n@@ -84,6 +84,18 @@ class TestToolsTestCase(FlaskTestCase):\n             with c.session_transaction():\n                 self.assert_(req is flask.request._get_current_object())\n \n+    def test_session_transaction_needs_cookies(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        c = app.test_client(use_cookies=False)\n+        try:\n+            with c.session_transaction() as s:\n+                pass\n+        except RuntimeError, e:\n+            self.assert_('cookies' in str(e))\n+        else:\n+            self.fail('Expected runtime error')\n+\n     def test_test_client_context_binding(self):\n         app = flask.Flask(__name__)\n         @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d49221bf2eeabbfa4a5be4e537b35bae1eb6d272", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 45 | Churn Cumulative: 354 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -86,9 +86,7 @@ class FlaskClient(Client):\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n     def open(self, *args, **kwargs):\n-        if self.context_preserved:\n-            _request_ctx_stack.pop()\n-            self.context_preserved = False\n+        self._pop_reqctx_if_necessary()\n         kwargs.setdefault('environ_overrides', {}) \\\n             ['flask._preserve_context'] = self.preserve_context\n \n@@ -114,5 +112,12 @@ class FlaskClient(Client):\n \n     def __exit__(self, exc_type, exc_value, tb):\n         self.preserve_context = False\n+        self._pop_reqctx_if_necessary()\n+\n+    def _pop_reqctx_if_necessary(self):\n         if self.context_preserved:\n-            _request_ctx_stack.pop()\n+            # we have to use _request_ctx_stack.top.pop instead of\n+            # _request_ctx_stack.pop since we want teardown handlers\n+            # to be executed.\n+            _request_ctx_stack.top.pop()\n+            self.context_preserved = False\n\n@@ -126,6 +126,38 @@ class TestToolsTestCase(FlaskTestCase):\n         else:\n             raise AssertionError('some kind of exception expected')\n \n+    def test_reuse_client(self):\n+        app = flask.Flask(__name__)\n+        c = app.test_client()\n+\n+        with c:\n+            self.assert_equal(c.get('/').status_code, 404)\n+\n+        with c:\n+            self.assert_equal(c.get('/').status_code, 404)\n+\n+    def test_test_client_calls_teardown_handlers(self):\n+        app = flask.Flask(__name__)\n+        called = []\n+        @app.teardown_request\n+        def remember(error):\n+            called.append(error)\n+\n+        with app.test_client() as c:\n+            self.assert_equal(called, [])\n+            c.get('/')\n+            self.assert_equal(called, [])\n+        self.assert_equal(called, [None])\n+\n+        del called[:]\n+        with app.test_client() as c:\n+            self.assert_equal(called, [])\n+            c.get('/')\n+            self.assert_equal(called, [])\n+            c.get('/')\n+            self.assert_equal(called, [None])\n+        self.assert_equal(called, [None, None])\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b256e9f36c6d170e7209a577efcac2503c8e48e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 2483 | Contributors (this commit): 14 | Commits (past 90d): 44 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1305,13 +1305,14 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        # This would be nicer in Werkzeug 0.7, which however currently\n-        # is not released.  Werkzeug 0.7 provides a method called\n-        # allowed_methods() that returns all methods that are valid for\n-        # a given path.\n+        adapter = _request_ctx_stack.top.url_adapter\n+        if hasattr(adapter, 'allowed_methods'):\n+            methods = adapter.allowed_methods()\n+        else:\n+            # fallback for Werkzeug < 0.7\n             methods = []\n             try:\n-            _request_ctx_stack.top.url_adapter.match(method='--')\n+                adapter.match(method='--')\n             except MethodNotAllowed, e:\n                 methods = e.valid_methods\n             except HTTPException, e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#67101c8b9331d289b3ae5428127814d0c19d643c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 55 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ except ImportError:\n                                'not installed.')\n         send = lambda *a, **kw: None\n         connect = disconnect = has_receivers_for = receivers_for = \\\n-            temporarily_connected_to = _fail\n+            temporarily_connected_to = connected_to = _fail\n         del _fail\n \n # the namespace for code signals.  If you are not flask code, do\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#367b254c787c59b208899f1dfee78904c1784c73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 1295 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -961,6 +961,17 @@ class SubdomainTestCase(FlaskTestCase):\n         rv = c.get('/', 'http://mitsuhiko.localhost/')\n         self.assert_equal(rv.data, 'index for mitsuhiko')\n \n+    def test_subdomain_matching_with_ports(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'localhost:3000'\n+        @app.route('/', subdomain='<user>')\n+        def index(user):\n+            return 'index for %s' % user\n+\n+        c = app.test_client()\n+        rv = c.get('/', 'http://mitsuhiko.localhost:3000/')\n+        self.assert_equal(rv.data, 'index for mitsuhiko')\n+\n     @emits_module_deprecation_warning\n     def test_module_subdomain_support(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e509d25d32965a8afd7ca98d67ee6f5a6af11cc8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 12 | Files Changed: 2 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 39 | Churn Cumulative: 408 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,6 +21,10 @@ from werkzeug.utils import import_string, find_modules\n \n \n def add_to_path(path):\n+    \"\"\"Adds an entry to sys.path_info if it's not already there.\"\"\"\n+    if not os.path.isdir(path):\n+        raise RuntimeError('Tried to add nonexisting path')\n+\n     def _samefile(x, y):\n         try:\n             return os.path.samefile(x, y)\n@@ -35,12 +39,8 @@ def add_to_path(path):\n     sys.path.append(path)\n \n \n-def setup_paths():\n-    add_to_path(os.path.abspath(os.path.join(\n-        os.path.dirname(__file__), 'test_apps')))\n-\n-\n def iter_suites():\n+    \"\"\"Yields all testsuites.\"\"\"\n     for module in find_modules(__name__):\n         mod = import_string(module)\n         if hasattr(mod, 'suite'):\n@@ -48,6 +48,7 @@ def iter_suites():\n \n \n def find_all_tests(suite):\n+    \"\"\"Yields all the tests and their names from a given suite.\"\"\"\n     suites = [suite]\n     while suites:\n         s = suites.pop()\n@@ -167,9 +168,27 @@ class BetterLoader(unittest.TestLoader):\n         return rv\n \n \n+def setup_path():\n+    add_to_path(os.path.abspath(os.path.join(\n+        os.path.dirname(__file__), 'test_apps')))\n+\n+\n def suite():\n-    setup_paths()\n+    \"\"\"A testsuite that has all the Flask tests.  You can use this\n+    function to integrate the Flask tests into your own testsuite\n+    in case you want to test that monkeypatches to Flask do not\n+    break it.\n+    \"\"\"\n+    setup_path()\n     suite = unittest.TestSuite()\n     for other_suite in iter_suites():\n         suite.addTest(other_suite)\n     return suite\n+\n+\n+def main():\n+    \"\"\"Runs the testsuite as command line application.\"\"\"\n+    try:\n+        unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n+    except Exception, e:\n+        print 'Error: %s' % e\n\n@@ -1,6 +1,2 @@\n-import unittest\n-from flask.testsuite import BetterLoader\n-try:\n-    unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n-except Exception, e:\n-    print 'Error: %s' % e\n+from flask.testsuite import main\n+main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
