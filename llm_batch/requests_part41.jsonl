{"custom_id": "requests#14fae695bfae24e88e1dbfedcf51542b1943e4f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 5061 | Contributors (this commit): 56 | Commits (past 90d): 59 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -481,6 +481,21 @@ class Request(object):\n         body = None\n         content_type = None\n \n+        # Use .netrc auth if none was provided.\n+        if not self.auth and self.config.get('trust_env'):\n+            self.auth = get_netrc_auth(url)\n+\n+        if self.auth:\n+            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n+                # special-case basic HTTP auth\n+                self.auth = HTTPBasicAuth(*self.auth)\n+\n+            # Allow auth to make its changes.\n+            r = self.auth(self)\n+\n+            # Update self to reflect the auth changes.\n+            self.__dict__.update(r.__dict__)\n+\n         # Multi-part file uploads.\n         if self.files:\n             (body, content_type) = self._enc_files\n@@ -497,20 +512,6 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n-        # Use .netrc auth if none was provided.\n-        if not self.auth and self.config.get('trust_env'):\n-            self.auth = get_netrc_auth(url)\n-\n-        if self.auth:\n-            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n-                # special-case basic HTTP auth\n-                self.auth = HTTPBasicAuth(*self.auth)\n-\n-            # Allow auth to make its changes.\n-            r = self.auth(self)\n-\n-            # Update self to reflect the auth changes.\n-            self.__dict__.update(r.__dict__)\n \n         _p = urlparse(url)\n         proxy = self.proxies.get(_p.scheme)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#661af1dc1ab08403c2d71310d7e7c00f684a1861", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 434 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -11,14 +11,16 @@ import time\n import hashlib\n \n from base64 import b64encode\n-from oauthlib.oauth1.rfc5849 import (Client,\n-                                     SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n+\n from oauthlib.common import extract_params\n-from .compat import urlparse, str\n+from .compat import urlparse, str, is_py2\n from .utils import randombytes, parse_dict_header\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n \n+if is_py2:\n+    from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n+\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9427e1efe87d81d9cafb3461626e834bb1c612da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 436 | Contributors (this commit): 5 | Commits (past 90d): 10 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,6 @@ import hashlib\n \n from base64 import b64encode\n \n-from oauthlib.common import extract_params\n from .compat import urlparse, str, is_py2\n from .utils import randombytes, parse_dict_header\n \n@@ -20,6 +19,7 @@ CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n \n if is_py2:\n     from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n+    from oauthlib.common import extract_params\n \n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bf1744eea2b16012ace3cc74be20fb60731ff822", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 439 | Contributors (this commit): 5 | Commits (past 90d): 11 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,9 @@ CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n if is_py2:\n     from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n     from oauthlib.common import extract_params\n+else:\n+    SIGNATURE_HMAC = None\n+    SIGNATURE_TYPE_AUTH_HEADER = None\n \n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d79e1bbaad72c0454c3f32f5b27cba56a26a0d57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 5063 | Contributors (this commit): 56 | Commits (past 90d): 60 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -325,6 +325,8 @@ class Request(object):\n \n         if isinstance(data, bytes):\n             return data, data\n+        if isinstance(data, str):\n+            return data, data\n         elif hasattr(data, '__iter__'):\n             try:\n                 dict(data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e6cce7a5bd51aa0ff916987b9c070753f702ccde", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 447 | Contributors (this commit): 5 | Commits (past 90d): 12 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -15,15 +15,15 @@ from base64 import b64encode\n from .compat import urlparse, str, is_py2\n from .utils import randombytes, parse_dict_header\n \n-CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n-\n-if is_py2:\n+try:\n     from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n     from oauthlib.common import extract_params\n-else:\n+except (ImportError, SyntaxError):\n     SIGNATURE_HMAC = None\n     SIGNATURE_TYPE_AUTH_HEADER = None\n \n+CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n+\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5d9699bbdc332319bd91d8a2cbd55cfa697453cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 186 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ if sys.argv[-1] == 'test':\n     os.system('python tests/test_requests.py')\n     sys.exit()\n \n-required = ['certifi>=0.0.7','oauthlib']\n+required = ['certifi>=0.0.7']\n packages = [\n     'requests',\n     'requests.packages',\n@@ -35,9 +35,9 @@ if is_py3:\n     required.append('chardet2')\n else:\n     required.append('chardet>=1.0.0')\n+    required.append('oauthlib')\n     packages.append('requests.packages.oreos')\n \n-\n setup(\n     name='requests',\n     version=requests.__version__,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7eed89a0dfe6afa80b509b9dc147e2a59b4c39ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 333 | Contributors (this commit): 3 | Commits (past 90d): 12 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.11.2'\n-__build__ = 0x001102\n+__version__ = '0.11.3'\n+__build__ = 0x001103\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2a27b123fd5bda2030e81995ff77e0e06f09ceca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 5071 | Contributors (this commit): 57 | Commits (past 90d): 153 | Contributors (cumulative): 57 | DMM Complexity: 0.0\n\nDIFF:\n@@ -631,7 +631,15 @@ class Request(object):\n                 else:\n                     raise\n \n+            # build_response can throw TooManyRedirects\n+            try:\n                 self._build_response(r)\n+            except RequestException as e:\n+                if self.config.get('safe_mode', False):\n+                    # In safe mode, catch the exception\n+                    self.response.error = e\n+                else:\n+                    raise\n \n             # Response manipulation hook.\n             self.response = dispatch_hook('response', self.hooks, self.response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4ab96b63800f04511aada9b5899540a7937967a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 28 | Files Changed: 3 | Hunks: 21 | Methods Changed: 8 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 59 | Churn Cumulative: 6155 | Contributors (this commit): 60 | Commits (past 90d): 186 | Contributors (cumulative): 71 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,6 +15,7 @@ from .structures import CaseInsensitiveDict\n from .status_codes import codes\n \n from .auth import HTTPBasicAuth, HTTPProxyAuth\n+from .packages.oreos.cookiejar import CookieJar\n from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.exceptions import MaxRetryError, LocationParseError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n@@ -126,7 +127,14 @@ class Request(object):\n         self.auth = auth\n \n         #: CookieJar to attach to :class:`Request <Request>`.\n-        self.cookies = dict(cookies or [])\n+        if isinstance(cookies, CookieJar):\n+            self.cookies = cookies\n+        else:\n+            self.cookies = CookieJar()\n+            \n+            # Add passed cookies in.\n+            if cookies is not None:\n+                self.cookies.update(cookies)\n \n         #: True if Request has been sent.\n         self.sent = False\n@@ -182,6 +190,10 @@ class Request(object):\n             # Pass settings over.\n             response.config = self.config\n \n+            # Save original response for later.\n+            response.raw = resp\n+            response.url = self.full_url\n+\n             if resp:\n \n                 # Fallback to None if there's no status_code, for whatever reason.\n@@ -193,16 +205,11 @@ class Request(object):\n                 # Set encoding.\n                 response.encoding = get_encoding_from_headers(response.headers)\n \n-                # Start off with our local cookies.\n-                cookies = self.cookies or dict()\n-\n                 # Add new cookies from the server.\n-                if 'set-cookie' in response.headers:\n-                    cookie_header = response.headers['set-cookie']\n-                    cookies = dict_from_string(cookie_header)\n+                self.cookies.extract_cookies(response, self)\n \n                 # Save cookies in Response.\n-                response.cookies = cookies\n+                response.cookies = self.cookies\n \n                 # No exceptions were harmed in the making of this request.\n                 response.error = getattr(resp, 'error', None)\n@@ -220,8 +227,6 @@ class Request(object):\n \n         r = build(resp)\n \n-        self.cookies.update(r.cookies)\n-\n         if r.status_code in REDIRECT_STATI and not self.redirect:\n \n             while (('location' in r.headers) and\n@@ -299,13 +304,11 @@ class Request(object):\n \n                 request.send()\n                 r = request.response\n-                self.cookies.update(r.cookies)\n \n             r.history = history\n \n         self.response = r\n         self.response.request = self\n-        self.response.cookies.update(self.cookies)\n \n     @staticmethod\n     def _encode_params(data):\n@@ -573,19 +576,13 @@ class Request(object):\n \n         if not self.sent or anyway:\n \n-            if self.cookies:\n-\n             # Skip if 'cookie' header is explicitly set.\n             if 'cookie' not in self.headers:\n \n-                    # Simple cookie with our dict.\n-                    c = SimpleCookie()\n-                    for (k, v) in list(self.cookies.items()):\n-                        c[k] = v\n-\n                 # Turn it into a header.\n-                    cookie_header = c.output(header='', sep='; ').strip()\n+                cookie_header = self.cookies.get_header(self)\n                 \n+                if cookie_header:\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n\n@@ -1,3 +1,8 @@\n+\"\"\"\n+Wrapper for CookieJar allow dict-like access.\n+Ideally there would be wrappers for LWPCookieJar and MozillaCookieJar as well.\n+\"\"\"\n+\n import urlparse\n import Cookie\n from Cookie import Morsel\n@@ -18,8 +23,8 @@ class MockRequest:\n         return urlparse.urlparse(self._r.full_url).netloc\n     \n     def get_origin_req_host(self):\n-        if self._r.history:\n-            r = self._r.history[0]\n+        if self._r.response.history:\n+            r = self._r.response.history[0]\n             return urlparse.urlparse(r).netloc\n         else:\n             return self.get_host()\n@@ -42,7 +47,7 @@ class MockRequest:\n     \n     def is_unverifiable(self):\n         # unverifiable == redirected\n-        return bool(self.history)\n+        return bool(self._r.response.history)\n \n class MockResponse:\n     \"\"\"\n@@ -57,7 +62,7 @@ class MockResponse:\n     def getheaders(self, name):\n         self._r.msg.getheaders(name)\n \n-class CookieJar(cookielib.LWPCookieJar, collections.MutableMapping):\n+class CookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def extract_cookies(self, response, request):\n         if response.raw._original_response:\n             req = MockRequest(request)\n\n@@ -14,7 +14,7 @@ from .models import Request\n from .hooks import dispatch_hook\n from .utils import header_expand\n from .packages.urllib3.poolmanager import PoolManager\n-\n+from .packages.oreos.cookiejar import CookieJar\n \n def merge_kwargs(local_kwarg, default_kwarg):\n     \"\"\"Merges kwarg dictionaries.\n@@ -69,7 +69,6 @@ class Session(object):\n         cert=None):\n \n         self.headers = headers or {}\n-        self.cookies = cookies or {}\n         self.auth = auth\n         self.timeout = timeout\n         self.proxies = proxies or {}\n@@ -86,7 +85,10 @@ class Session(object):\n         self.init_poolmanager()\n \n         # Set up a CookieJar to be used by default\n-        self.cookies = {}\n+        if isinstance(cookies, CookieJar):\n+            self.cookies = cookies\n+        else:\n+            self.cookies = CookieJar()\n             \n             # Add passed cookies in.\n             if cookies is not None:\n@@ -148,7 +150,6 @@ class Session(object):\n         method = str(method).upper()\n \n         # Default empty dicts for dict params.\n-        cookies = {} if cookies is None else cookies\n         data = {} if data is None else data\n         files = {} if files is None else files\n         headers = {} if headers is None else headers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#492bda1343b6413eead297c4b4acf26f68b2a3f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 161 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -69,6 +69,18 @@ class CookieTests(TestBaseMixin, unittest.TestCase):\n         self.assertEqual(json.loads(r.text)['cookies'],\n                 {'shimon': 'gamaliel', 'elazar': 'shimon'})\n \n+    def test_redirects(self):\n+        \"\"\"Test that cookies set by a 302 page are correctly processed.\"\"\"\n+        r = requests.get(httpbin('cookies', 'set', 'redirects', 'work'))\n+        self.assertEqual(r.history[0].status_code, 302)\n+        expected_cookies = {'redirects': 'work'}\n+        self.assertEqual(json.loads(r.text)['cookies'], expected_cookies)\n+\n+        r2 = requests.get(httpbin('cookies', 'set', 'very', 'well'), cookies=r.cookies)\n+        expected_cookies = {'redirects': 'work', 'very': 'well'}\n+        self.assertEqual(json.loads(r2.text)['cookies'], expected_cookies)\n+        self.assertIs(r.cookies, r2.cookies)\n+\n class LWPCookieJarTest(TestBaseMixin, unittest.TestCase):\n     \"\"\"Check store/load of cookies to FileCookieJar's, specifically LWPCookieJar's.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1de14e6a93d2f84b1aaea198785c05b2e51d933b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 264 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -31,15 +31,15 @@ class MockRequest(object):\n         self._new_headers = {}\n \n     def get_type(self):\n-        return urlparse.urlparse(self._r.full_url).scheme\n+        return urlparse(self._r.full_url).scheme\n \n     def get_host(self):\n-        return urlparse.urlparse(self._r.full_url).netloc\n+        return urlparse(self._r.full_url).netloc\n \n     def get_origin_req_host(self):\n         if self._r.response.history:\n             r = self._r.response.history[0]\n-            return urlparse.urlparse(r).netloc\n+            return urlparse(r).netloc\n         else:\n             return self.get_host()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#404ecaf95bbaaa42013d7ae67b96c7593296d8cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 278 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -87,10 +87,16 @@ class MockResponse(object):\n         self._headers.getheaders(name)\n \n def extract_cookies_to_jar(jar, request, response):\n-    \"\"\"Extract the cookies from the headers of `response`, into `jar`.\"\"\"\n-    if response._original_response is None:\n-        # TODO why would this happen?\n-        return\n+    \"\"\"Extract the cookies from the response into a CookieJar.\n+\n+    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)\n+    :param request: our own requests.Request object\n+    :param response: urllib3.HTTPResponse object\n+    \"\"\"\n+    # the _original_response field is the wrapped httplib.HTTPResponse object,\n+    # and in safe mode, it may be None if the request didn't actually complete.\n+    # in that case, just skip the cookie extraction.\n+    if response._original_response is not None:\n         req = MockRequest(request)\n         # pull out the HTTPMessage with the headers and put it in the mock:\n         res = MockResponse(response._original_response.msg)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ff169d32fee661a40fd600a86ea6fae931bd99c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 9 | Churn Cumulative: 5312 | Contributors (this commit): 57 | Commits (past 90d): 76 | Contributors (cumulative): 58 | DMM Complexity: 0.6\n\nDIFF:\n@@ -570,7 +570,9 @@ class Request(object):\n \n             # Skip if 'cookie' header is explicitly set.\n             if 'cookie' not in self.headers:\n-                self.headers['Cookie'] = get_cookie_header(self.cookies, self)\n+                cookie_header = get_cookie_header(self.cookies, self)\n+                if cookie_header is not None:\n+                    self.headers['Cookie'] = cookie_header\n \n             # Pre-request hook.\n             r = dispatch_hook('pre_request', self.hooks, self)\n\n@@ -81,6 +81,11 @@ class CookieTests(TestBaseMixin, unittest.TestCase):\n         self.assertEqual(json.loads(r2.text)['cookies'], expected_cookies)\n         self.assertIs(r.cookies, r2.cookies)\n \n+    def test_none_cookie(self):\n+        \"\"\"Regression test: don't send a Cookie header with a string value of 'None'!\"\"\"\n+        page = json.loads(requests.get(httpbin('headers')).text)\n+        self.assertNotIn('Cookie', page['headers'])\n+\n class LWPCookieJarTest(TestBaseMixin, unittest.TestCase):\n     \"\"\"Check store/load of cookies to FileCookieJar's, specifically LWPCookieJar's.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6eb349f5d20e119ce3340d9163472dc51f8031b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 11 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,6 @@ import select\n has_poll = hasattr(select, \"poll\")\n \n from requests import async\n-import envoy\n \n sys.path.append('.')\n from test_requests import httpbin, RequestsTestSuite, SERVICES\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7832f2ae7e3915c2fe238b0f648176328909395a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 19 | Churn Cumulative: 85 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -104,8 +104,27 @@ class RequestsTestSuite(unittest.TestCase):\n                          'php')\n         assert r.ok\n \n+    def test_cookies_on_redirects(self):\n+        \"\"\"Test interaction between cookie handling and redirection.\"\"\"\n+        # get a cookie for tinyurl.com ONLY\n+        s = requests.session()\n+        s.get(url='http://tinyurl.com/preview.php?disable=1')\n+        # we should have set a cookie for tinyurl: preview=0\n+        self.assertIn('preview', s.cookies)\n+        self.assertEqual(s.cookies['preview'], '0')\n+        self.assertEqual(list(s.cookies)[0].name, 'preview')\n+        self.assertEqual(list(s.cookies)[0].domain, 'tinyurl.com')\n \n+        # get cookies on another domain\n+        r2 = s.get(url='http://httpbin.org/cookies')\n+        # the cookie is not there\n+        self.assertNotIn('preview', json.loads(r2.text)['cookies'])\n \n+        # this redirects to another domain, httpbin.org\n+        # cookies of the first domain should NOT be sent to the next one\n+        r3 = s.get(url='http://tinyurl.com/7zp3jnr')\n+        assert r3.url == 'http://httpbin.org/cookies'\n+        self.assertNotIn('preview', json.loads(r2.text)['cookies'])\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#11a3eaec265735b63569bb165047d39df5ba465f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 796 | Contributors (this commit): 11 | Commits (past 90d): 33 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -259,6 +259,6 @@ def cookiejar_from_dict(cookie_dict, cookiejar=None):\n         cookiejar = RequestsCookieJar()\n \n     if cookie_dict is not None:\n-        for name, value in cookie_dict.iteritems():\n-            cookiejar.set_cookie(create_cookie(name, value))\n+        for name in cookie_dict:\n+            cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n     return cookiejar\n\n@@ -55,7 +55,7 @@ class TestBaseMixin(object):\n \n     def assertCookieHas(self, cookie, **kwargs):\n         \"\"\"Assert that a cookie has various specified properties.\"\"\"\n-        for attr, expected_value in kwargs.iteritems():\n+        for attr, expected_value in kwargs.items():\n             message = 'Failed comparison for %s' % (attr,)\n             self.assertEqual(getattr(cookie, attr), expected_value, message)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35d5ac6e8f5f4357f945b8c4890388207f7f1c00", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5148 | Contributors (this commit): 57 | Commits (past 90d): 65 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -791,7 +791,7 @@ class Response(object):\n \n         # Trust that chardet isn't available or something went terribly wrong.\n         except Exception:\n-            pass\n+            return 'utf-8'\n \n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d232948188f922c137dd709b53f77c49d1442c84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 5156 | Contributors (this commit): 57 | Commits (past 90d): 66 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -653,8 +653,11 @@ class Response(object):\n \n     def __init__(self):\n \n+        # bytes of the page:\n         self._content = False\n         self._content_consumed = False\n+        # unicode of the page:\n+        self._text = None\n \n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -793,7 +796,6 @@ class Response(object):\n         except Exception:\n             return 'utf-8'\n \n-\n     @property\n     def text(self):\n         \"\"\"Content of the response, in unicode.\n@@ -802,6 +804,9 @@ class Response(object):\n         will be guessed.\n         \"\"\"\n \n+        if self._text is not None:\n+            return self._text\n+\n         # Try charset from content-type\n         content = None\n         encoding = self.encoding\n@@ -822,6 +827,7 @@ class Response(object):\n         except (UnicodeError, TypeError):\n             pass\n \n+        self._text = content\n         return content\n \n     def raise_for_status(self, allow_redirects=True):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bdd7f8f8a2cffae76aee80f8eddac3e969cbe69a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 10 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 41 | Churn Cumulative: 227 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -1,27 +1,23 @@\n #!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n \n-import os\n+\"\"\"\n+distutils/setuptools install script. See inline comments for packaging documentation.\n+\"\"\"\n+\n import sys\n+\n import requests\n-from requests.compat import is_py3, is_py2\n+from requests.compat import is_py3\n \n try:\n     from setuptools import setup\n except ImportError:\n     from distutils.core import setup\n \n-\n-\n if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n \n-if sys.argv[-1] == 'test':\n-    os.system('python tests/test_requests.py')\n-    sys.exit()\n-\n-required = ['certifi>=0.0.7']\n packages = [\n     'requests',\n     'requests.packages',\n@@ -31,12 +27,26 @@ packages = [\n     'requests.packages.urllib3.packages.mimetools_choose_boundary',\n ]\n \n+# certifi is a Python package containing a CA certificate bundle for SSL verification.\n+# On certain supported platforms (e.g., Red Hat / Debian / FreeBSD), Requests can\n+# use the system CA bundle instead; see `requests.utils` for details.\n+# If your platform is supported, set `requires` to [] instead:\n+requires = ['certifi>=0.0.7']\n+\n+# chardet is used to optimally guess the encodings of pages that don't declare one.\n+# At this time, chardet is not a required dependency. However, it's sufficiently\n+# important that pip/setuptools should install it when it's unavailable.\n if is_py3:\n-    required.append('chardet2')\n+    chardet_package = 'chardet2'\n else:\n-    required.append('chardet>=1.0.0')\n-    required.append('oauthlib')\n-    packages.append('requests.packages.oreos')\n+    chardet_package = 'chardet>=1.0.0'\n+requires.append(chardet_package)\n+\n+# The async API in requests.async requires the gevent package.\n+# This is also not a required dependency.\n+extras_require = {\n+        'async': ['gevent'],\n+}\n \n setup(\n     name='requests',\n@@ -50,7 +60,8 @@ setup(\n     packages=packages,\n     package_data={'': ['LICENSE', 'NOTICE']},\n     include_package_data=True,\n-    install_requires=required,\n+    install_requires=requires,\n+    extras_require=extras_require,\n     license=open(\"LICENSE\").read(),\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8a81a437d2357be314e8715d3827b8fec8f0055b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5158 | Contributors (this commit): 57 | Commits (past 90d): 67 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -794,7 +794,7 @@ class Response(object):\n \n         # Trust that chardet isn't available or something went terribly wrong.\n         except Exception:\n-            return 'utf-8'\n+            pass\n \n     @property\n     def text(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6271046a271a689848e7658047436d644e295093", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 5166 | Contributors (this commit): 57 | Commits (past 90d): 68 | Contributors (cumulative): 57 | DMM Complexity: 0.0\n\nDIFF:\n@@ -653,11 +653,8 @@ class Response(object):\n \n     def __init__(self):\n \n-        # bytes of the page:\n         self._content = False\n         self._content_consumed = False\n-        # unicode of the page:\n-        self._text = None\n \n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -796,6 +793,7 @@ class Response(object):\n         except Exception:\n             pass\n \n+\n     @property\n     def text(self):\n         \"\"\"Content of the response, in unicode.\n@@ -804,9 +802,6 @@ class Response(object):\n         will be guessed.\n         \"\"\"\n \n-        if self._text is not None:\n-            return self._text\n-\n         # Try charset from content-type\n         content = None\n         encoding = self.encoding\n@@ -827,7 +822,6 @@ class Response(object):\n         except (UnicodeError, TypeError):\n             pass\n \n-        self._text = content\n         return content\n \n     def raise_for_status(self, allow_redirects=True):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c333bd144e72d82a44dba03b6020e9e77e985e6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 5168 | Contributors (this commit): 58 | Commits (past 90d): 69 | Contributors (cumulative): 58 | DMM Complexity: None\n\nDIFF:\n@@ -751,7 +751,7 @@ class Response(object):\n                 chunk = pending + chunk\n             lines = chunk.splitlines()\n \n-            if lines[-1][-1] == chunk[-1]:\n+            if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:\n                 pending = lines.pop()\n             else:\n                 pending = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d240b1fe15d373b37c5939db52835816d88f0aab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 5172 | Contributors (this commit): 58 | Commits (past 90d): 70 | Contributors (cumulative): 58 | DMM Complexity: None\n\nDIFF:\n@@ -390,7 +390,6 @@ class Request(object):\n         if not path:\n             path = '/'\n \n-\n         if is_py2:\n             if isinstance(scheme, str):\n                 scheme = scheme.encode('utf-8')\n@@ -514,7 +513,6 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n-\n         _p = urlparse(url)\n         proxy = self.proxies.get(_p.scheme)\n \n@@ -800,7 +798,6 @@ class Response(object):\n         except Exception:\n             pass\n \n-\n     @property\n     def text(self):\n         \"\"\"Content of the response, in unicode.\n@@ -847,7 +844,6 @@ class Response(object):\n             http_error.response = self\n             raise http_error\n \n-\n         elif (self.status_code >= 500) and (self.status_code < 600):\n             http_error = HTTPError('%s Server Error' % self.status_code)\n             http_error.response = self\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#324336e7f6e45ef3d97a2e64be95b5e604b393d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 13 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 5208 | Contributors (this commit): 58 | Commits (past 90d): 71 | Contributors (cumulative): 58 | DMM Complexity: 0.0\n\nDIFF:\n@@ -114,9 +114,9 @@ class Request(object):\n             if 'HTTPS_PROXY' in os.environ:\n                 self.proxies['https'] = os.environ['HTTPS_PROXY']\n \n-        self.data, self._enc_data = self._encode_params(data)\n-        self.params, self._enc_params = self._encode_params(params)\n-        self.files, self._enc_files = self._encode_files(files)\n+        self.data = data\n+        self.params = params\n+        self.files = files\n \n         #: :class:`Response <Response>` instance, containing\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n@@ -314,19 +314,12 @@ class Request(object):\n         Will successfully encode parameters when passed as a dict or a list of\n         2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n         if parameters are supplied as a dict.\n-\n-        If the data supplied contains parameters, encodes each parameter in it,\n-        and returns a list of tuples containing the encoded parameters, and a\n-        urlencoded version of that.\n-\n-        Otherwise, assumes the data is already encoded appropriately, and\n-        returns it twice.\n         \"\"\"\n \n         if isinstance(data, bytes):\n-            return data, data\n+            return data\n         if isinstance(data, str):\n-            return data, data\n+            return data\n         elif hasattr(data, '__iter__'):\n             try:\n                 dict(data)\n@@ -340,14 +333,14 @@ class Request(object):\n                     result.append(\n                         (k.encode('utf-8') if isinstance(k, str) else k,\n                          v.encode('utf-8') if isinstance(v, str) else v))\n-            return result, urlencode(result, doseq=True)\n+            return urlencode(result, doseq=True)\n         else:\n-            return data, data\n+            return data\n \n     def _encode_files(self, files):\n \n         if (not files) or isinstance(self.data, str):\n-            return None, None\n+            return None\n \n         try:\n             fields = self.data.copy()\n@@ -365,7 +358,7 @@ class Request(object):\n \n         (body, content_type) = encode_multipart_formdata(fields)\n \n-        return files, (body, content_type)\n+        return (body, content_type)\n \n     @property\n     def full_url(self):\n@@ -406,11 +399,12 @@ class Request(object):\n \n         url = (urlunparse([scheme, netloc, path, params, query, fragment]))\n \n-        if self._enc_params:\n+        enc_params = self._encode_params(self.params)\n+        if enc_params:\n             if urlparse(url).query:\n-                url = '%s&%s' % (url, self._enc_params)\n+                url = '%s&%s' % (url, enc_params)\n             else:\n-                url = '%s?%s' % (url, self._enc_params)\n+                url = '%s?%s' % (url, enc_params)\n \n         if self.config.get('encode_uri', True):\n             url = requote_uri(url)\n@@ -499,11 +493,11 @@ class Request(object):\n \n         # Multi-part file uploads.\n         if self.files:\n-            (body, content_type) = self._enc_files\n+            (body, content_type) = self._encode_files(self.files)\n         else:\n             if self.data:\n \n-                body = self._enc_data\n+                body = self._encode_params(self.data)\n                 if isinstance(self.data, str):\n                     content_type = None\n                 else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#62d2ea80340de1ae146cce3c85490444a8fca047", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 5212 | Contributors (this commit): 58 | Commits (past 90d): 72 | Contributors (cumulative): 58 | DMM Complexity: None\n\nDIFF:\n@@ -41,7 +41,7 @@ except ImportError:\n     pass\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n-\n+CONTENT_CHUNK_SIZE = 10 * 1024\n \n class Request(object):\n     \"\"\"The :class:`Request <Request>` object. It carries out all functionality of\n@@ -776,7 +776,7 @@ class Response(object):\n                 if self.status_code is 0:\n                     self._content = None\n                 else:\n-                    self._content = bytes().join(self.iter_content()) or bytes()\n+                    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n \n             except AttributeError:\n                 self._content = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a9963e38414b3d5ee4f79d2026794a2382717da3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 453 | Contributors (this commit): 5 | Commits (past 90d): 13 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -47,6 +47,12 @@ class OAuth1(AuthBase):\n             signature_method=SIGNATURE_HMAC,\n             signature_type=SIGNATURE_TYPE_AUTH_HEADER,\n             rsa_key=None, verifier=None):\n+\n+        try:\n+            signature_type = signature_type.upper()\n+        except AttributeError:\n+            pass\n+\n         self.client = Client(client_key, client_secret, resource_owner_key,\n             resource_owner_secret, callback_uri, signature_method,\n             signature_type, rsa_key, verifier)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8ac6b266c923ee64680828fa288674667f070519", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 5658 | Contributors (this commit): 59 | Commits (past 90d): 74 | Contributors (cumulative): 64 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,6 +12,9 @@ Available hooks:\n     A dictionary of the arguments being sent to Request().\n \n ``pre_request``:\n+    The Request object, directly after being created.\n+\n+``pre_send``:\n     The Request object, directly before being sent.\n \n ``post_request``:\n@@ -25,7 +28,7 @@ Available hooks:\n import traceback\n \n \n-HOOKS = ('args', 'pre_request', 'post_request', 'response')\n+HOOKS = ('args', 'pre_request', 'pre_send', 'post_request', 'response')\n \n \n def dispatch_hook(key, hooks, hook_data):\n\n@@ -570,6 +570,10 @@ class Request(object):\n                 if cookie_header is not None:\n                     self.headers['Cookie'] = cookie_header\n \n+            # Pre-send hook.\n+            r = dispatch_hook('pre_send', self.hooks, self)\n+            self.__dict__.update(r.__dict__)\n+\n             try:\n                 # The inner try .. except re-raises certain exceptions as\n                 # internal exception types; the outer suppresses exceptions\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fb2931801edd807c581108e743040475116c5d85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 337 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.11.3'\n-__build__ = 0x001103\n+__version__ = '0.12.0'\n+__build__ = 0x001200\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9324c2a9b4ed2e324047f067428ee238b15880b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 229 | Contributors (this commit): 5 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -40,6 +40,8 @@ if is_py3:\n     chardet_package = 'chardet2'\n else:\n     chardet_package = 'chardet>=1.0.0'\n+    requires.append('oauthlib>=0.1.0,<0.2.0')\n+\n requires.append(chardet_package)\n \n # The async API in requests.async requires the gevent package.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a9033912b392900e3ab0b1d93e2545f05fabc467", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 230 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -4,6 +4,7 @@\n distutils/setuptools install script. See inline comments for packaging documentation.\n \"\"\"\n \n+import os\n import sys\n \n import requests\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#538de55607eb1db8299f2b83421a91b9f533cb50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 20 | Churn Cumulative: 5236 | Contributors (this commit): 58 | Commits (past 90d): 74 | Contributors (cumulative): 58 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,8 +37,10 @@ from .compat import (\n # Import chardet if it is available.\n try:\n     import chardet\n+    # hush pyflakes\n+    chardet\n except ImportError:\n-    pass\n+    chardet = None\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n@@ -780,15 +782,6 @@ class Response(object):\n         self._content_consumed = True\n         return self._content\n \n-    def _detected_encoding(self):\n-        try:\n-            detected = chardet.detect(self.content) or {}\n-            return detected.get('encoding')\n-\n-        # Trust that chardet isn't available or something went terribly wrong.\n-        except Exception:\n-            pass\n-\n     @property\n     def text(self):\n         \"\"\"Content of the response, in unicode.\n@@ -801,9 +794,12 @@ class Response(object):\n         content = None\n         encoding = self.encoding\n \n-        # Fallback to auto-detected encoding if chardet is available.\n+        # Fallback to auto-detected encoding.\n         if self.encoding is None:\n-            encoding = self._detected_encoding()\n+            if chardet is not None:\n+                encoding = chardet.detect(self.content)['encoding']\n+            else:\n+                raise ValueError(\"Can't detect page encoding.\")\n \n         # Decode unicode from given encoding.\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
