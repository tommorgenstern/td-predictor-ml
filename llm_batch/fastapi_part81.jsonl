{"custom_id": "fastapi#9e0d4fa0efed6376a0e4066ddc59b8802fcd25b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 220 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Î” (Sum/Max): 14/14 | Churn Î”: 220 | Churn Cumulative: 220 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,220 @@\n+import logging\n+import secrets\n+import subprocess\n+from collections import defaultdict\n+from pathlib import Path\n+from typing import Any\n+\n+import httpx\n+import yaml\n+from github import Github\n+from pydantic import BaseModel, SecretStr\n+from pydantic_settings import BaseSettings\n+\n+github_graphql_url = \"https://api.github.com/graphql\"\n+\n+\n+sponsors_query = \"\"\"\n+query Q($after: String) {\n+  user(login: \"tiangolo\") {\n+    sponsorshipsAsMaintainer(first: 100, after: $after) {\n+      edges {\n+        cursor\n+        node {\n+          sponsorEntity {\n+            ... on Organization {\n+              login\n+              avatarUrl\n+              url\n+            }\n+            ... on User {\n+              login\n+              avatarUrl\n+              url\n+            }\n+          }\n+          tier {\n+            name\n+            monthlyPriceInDollars\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+\n+class SponsorEntity(BaseModel):\n+    login: str\n+    avatarUrl: str\n+    url: str\n+\n+\n+class Tier(BaseModel):\n+    name: str\n+    monthlyPriceInDollars: float\n+\n+\n+class SponsorshipAsMaintainerNode(BaseModel):\n+    sponsorEntity: SponsorEntity\n+    tier: Tier\n+\n+\n+class SponsorshipAsMaintainerEdge(BaseModel):\n+    cursor: str\n+    node: SponsorshipAsMaintainerNode\n+\n+\n+class SponsorshipAsMaintainer(BaseModel):\n+    edges: list[SponsorshipAsMaintainerEdge]\n+\n+\n+class SponsorsUser(BaseModel):\n+    sponsorshipsAsMaintainer: SponsorshipAsMaintainer\n+\n+\n+class SponsorsResponseData(BaseModel):\n+    user: SponsorsUser\n+\n+\n+class SponsorsResponse(BaseModel):\n+    data: SponsorsResponseData\n+\n+\n+class Settings(BaseSettings):\n+    github_token: SecretStr\n+    github_repository: str\n+    httpx_timeout: int = 30\n+\n+\n+def get_graphql_response(\n+    *,\n+    settings: Settings,\n+    query: str,\n+    after: str | None = None,\n+) -> dict[str, Any]:\n+    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n+    variables = {\"after\": after}\n+    response = httpx.post(\n+        github_graphql_url,\n+        headers=headers,\n+        timeout=settings.httpx_timeout,\n+        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n+    )\n+    if response.status_code != 200:\n+        logging.error(f\"Response was not 200, after: {after}\")\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    data = response.json()\n+    if \"errors\" in data:\n+        logging.error(f\"Errors in response, after: {after}\")\n+        logging.error(data[\"errors\"])\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    return data\n+\n+\n+def get_graphql_sponsor_edges(\n+    *, settings: Settings, after: str | None = None\n+) -> list[SponsorshipAsMaintainerEdge]:\n+    data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n+    graphql_response = SponsorsResponse.model_validate(data)\n+    return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n+\n+\n+def get_individual_sponsors(\n+    settings: Settings,\n+) -> defaultdict[float, dict[str, SponsorEntity]]:\n+    nodes: list[SponsorshipAsMaintainerNode] = []\n+    edges = get_graphql_sponsor_edges(settings=settings)\n+\n+    while edges:\n+        for edge in edges:\n+            nodes.append(edge.node)\n+        last_edge = edges[-1]\n+        edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n+\n+    tiers: defaultdict[float, dict[str, SponsorEntity]] = defaultdict(dict)\n+    for node in nodes:\n+        tiers[node.tier.monthlyPriceInDollars][node.sponsorEntity.login] = (\n+            node.sponsorEntity\n+        )\n+    return tiers\n+\n+\n+def update_content(*, content_path: Path, new_content: Any) -> bool:\n+    old_content = content_path.read_text(encoding=\"utf-8\")\n+\n+    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n+    if old_content == new_content:\n+        logging.info(f\"The content hasn't changed for {content_path}\")\n+        return False\n+    content_path.write_text(new_content, encoding=\"utf-8\")\n+    logging.info(f\"Updated {content_path}\")\n+    return True\n+\n+\n+def main() -> None:\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+    logging.info(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+\n+    tiers = get_individual_sponsors(settings=settings)\n+    keys = list(tiers.keys())\n+    keys.sort(reverse=True)\n+    sponsors = []\n+    for key in keys:\n+        sponsor_group = []\n+        for login, sponsor in tiers[key].items():\n+            sponsor_group.append(\n+                {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n+            )\n+        sponsors.append(sponsor_group)\n+    github_sponsors = {\n+        \"sponsors\": sponsors,\n+    }\n+\n+    # For local development\n+    # github_sponsors_path = Path(\"../docs/en/data/github_sponsors.yml\")\n+    github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n+    updated = update_content(\n+        content_path=github_sponsors_path, new_content=github_sponsors\n+    )\n+\n+    if not updated:\n+        logging.info(\"The data hasn't changed, finishing.\")\n+        return\n+\n+    logging.info(\"Setting up GitHub Actions git user\")\n+    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n+    subprocess.run(\n+        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n+    )\n+    branch_name = f\"fastapi-people-sponsors-{secrets.token_hex(4)}\"\n+    logging.info(f\"Creating a new branch {branch_name}\")\n+    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n+    logging.info(\"Adding updated file\")\n+    subprocess.run(\n+        [\n+            \"git\",\n+            \"add\",\n+            str(github_sponsors_path),\n+        ],\n+        check=True,\n+    )\n+    logging.info(\"Committing updated file\")\n+    message = \"ðŸ‘¥ Update FastAPI People - Sponsors\"\n+    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n+    logging.info(\"Pushing branch\")\n+    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n+    logging.info(\"Creating PR\")\n+    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n+    logging.info(f\"Created PR: {pr.number}\")\n+    logging.info(\"Finished\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2ee101fb815188313fdbe262388711bc238c1bfb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 7 | Churn Cumulative: 227 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -83,7 +83,8 @@ class SponsorsResponse(BaseModel):\n \n \n class Settings(BaseSettings):\n-    github_token: SecretStr\n+    sponsors_token: SecretStr\n+    pr_token: SecretStr\n     github_repository: str\n     httpx_timeout: int = 30\n \n@@ -94,7 +95,7 @@ def get_graphql_response(\n     query: str,\n     after: str | None = None,\n ) -> dict[str, Any]:\n-    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n+    headers = {\"Authorization\": f\"token {settings.sponsors_token.get_secret_value()}\"}\n     variables = {\"after\": after}\n     response = httpx.post(\n         github_graphql_url,\n@@ -159,7 +160,7 @@ def main() -> None:\n     logging.basicConfig(level=logging.INFO)\n     settings = Settings()\n     logging.info(f\"Using config: {settings.model_dump_json()}\")\n-    g = Github(settings.github_token.get_secret_value())\n+    g = Github(settings.pr_token.get_secret_value())\n     repo = g.get_repo(settings.github_repository)\n \n     tiers = get_individual_sponsors(settings=settings)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1cedd8becf0cb832d4fec05c2bb4babbca89b2a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 849 | Files Changed: 5 | Hunks: 8 | Methods Changed: 26 | Complexity Î” (Sum/Max): -24/0 | Churn Î”: 866 | Churn Cumulative: 2846 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,26 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39, needs_py310\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body_multiple_params.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,206 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_q_bar_content(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"q\": \"bar\",\n-    }\n-\n-\n-def test_post_no_body_q_bar(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n-\n-\n-def test_post_no_body(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5}\n-\n-\n-def test_post_id_foo(client: TestClient):\n-    response = client.put(\"/items/foo\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"foo\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\n-                                \"title\": \"The ID of the item to get\",\n-                                \"maximum\": 1000.0,\n-                                \"minimum\": 0.0,\n-                                \"type\": \"integer\",\n-                            },\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"anyOf\": [\n-                                            {\"$ref\": \"#/components/schemas/Item\"},\n-                                            {\"type\": \"null\"},\n-                                        ],\n-                                        \"title\": \"Item\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\"$ref\": \"#/components/schemas/Item\"}\n-                                )\n-                            }\n-                        }\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,213 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_body_q_bar_content(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"q\": \"bar\",\n-    }\n-\n-\n-@needs_py310\n-def test_post_no_body_q_bar(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n-\n-\n-@needs_py310\n-def test_post_no_body(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5}\n-\n-\n-@needs_py310\n-def test_post_id_foo(client: TestClient):\n-    response = client.put(\"/items/foo\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"foo\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\n-                                \"title\": \"The ID of the item to get\",\n-                                \"maximum\": 1000.0,\n-                                \"minimum\": 0.0,\n-                                \"type\": \"integer\",\n-                            },\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"anyOf\": [\n-                                            {\"$ref\": \"#/components/schemas/Item\"},\n-                                            {\"type\": \"null\"},\n-                                        ],\n-                                        \"title\": \"Item\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\"$ref\": \"#/components/schemas/Item\"}\n-                                )\n-                            }\n-                        }\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,213 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body_q_bar_content(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"q\": \"bar\",\n-    }\n-\n-\n-@needs_py39\n-def test_post_no_body_q_bar(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n-\n-\n-@needs_py39\n-def test_post_no_body(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5}\n-\n-\n-@needs_py39\n-def test_post_id_foo(client: TestClient):\n-    response = client.put(\"/items/foo\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"foo\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\n-                                \"title\": \"The ID of the item to get\",\n-                                \"maximum\": 1000.0,\n-                                \"minimum\": 0.0,\n-                                \"type\": \"integer\",\n-                            },\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"anyOf\": [\n-                                            {\"$ref\": \"#/components/schemas/Item\"},\n-                                            {\"type\": \"null\"},\n-                                        ],\n-                                        \"title\": \"Item\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\"$ref\": \"#/components/schemas/Item\"}\n-                                )\n-                            }\n-                        }\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,213 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_body_q_bar_content(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"q\": \"bar\",\n-    }\n-\n-\n-@needs_py310\n-def test_post_no_body_q_bar(client: TestClient):\n-    response = client.put(\"/items/5?q=bar\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5, \"q\": \"bar\"}\n-\n-\n-@needs_py310\n-def test_post_no_body(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 5}\n-\n-\n-@needs_py310\n-def test_post_id_foo(client: TestClient):\n-    response = client.put(\"/items/foo\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"foo\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"path\", \"item_id\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\n-                                \"title\": \"The ID of the item to get\",\n-                                \"maximum\": 1000.0,\n-                                \"minimum\": 0.0,\n-                                \"type\": \"integer\",\n-                            },\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"anyOf\": [\n-                                            {\"$ref\": \"#/components/schemas/Item\"},\n-                                            {\"type\": \"null\"},\n-                                        ],\n-                                        \"title\": \"Item\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\"$ref\": \"#/components/schemas/Item\"}\n-                                )\n-                            }\n-                        }\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#55ef9270b8821377402231064ba1da5cfe2a626e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 132 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Î” (Sum/Max): -4/0 | Churn Î”: 146 | Churn Cumulative: 527 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,23 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_nested_models.tutorial009 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial009\",\n+        pytest.param(\"tutorial009_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body_nested_models.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,128 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_nested_models.tutorial009_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body(client: TestClient):\n-    data = {\"2\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n-\n-\n-@needs_py39\n-def test_post_invalid_body(client: TestClient):\n-    data = {\"foo\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"body\", \"foo\", \"[key]\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"foo\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"__key__\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/index-weights/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Index Weights\",\n-                    \"operationId\": \"create_index_weights_index_weights__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"title\": \"Weights\",\n-                                    \"type\": \"object\",\n-                                    \"additionalProperties\": {\"type\": \"number\"},\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
