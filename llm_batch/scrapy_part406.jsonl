{"custom_id": "scrapy#d442227fa74e414f4c7ac6baea6c3c4a1d938219", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 675 | Lines Deleted: 752 | Files Changed: 4 | Hunks: 376 | Methods Changed: 192 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1427 | Churn Cumulative: 10323 | Contributors (this commit): 58 | Commits (past 90d): 21 | Contributors (cumulative): 96 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,5 @@\n import json\n import re\n-import unittest\n import warnings\n import xmlrpc.client\n from typing import Any\n@@ -22,7 +21,7 @@ from scrapy.utils.httpobj import urlparse_cached\n from scrapy.utils.python import to_bytes, to_unicode\n \n \n-class RequestTest(unittest.TestCase):\n+class TestRequest:\n     request_class = Request\n     default_method = \"GET\"\n     default_headers: dict[bytes, list[bytes]] = {}\n@@ -40,12 +39,12 @@ class RequestTest(unittest.TestCase):\n \n         r = self.request_class(\"http://www.example.com\")\n         assert isinstance(r.url, str)\n-        self.assertEqual(r.url, \"http://www.example.com\")\n-        self.assertEqual(r.method, self.default_method)\n+        assert r.url == \"http://www.example.com\"\n+        assert r.method == self.default_method\n \n         assert isinstance(r.headers, Headers)\n-        self.assertEqual(r.headers, self.default_headers)\n-        self.assertEqual(r.meta, self.default_meta)\n+        assert r.headers == self.default_headers\n+        assert r.meta == self.default_meta\n \n         meta = {\"lala\": \"lolo\"}\n         headers = {b\"caca\": b\"coco\"}\n@@ -54,9 +53,9 @@ class RequestTest(unittest.TestCase):\n         )\n \n         assert r.meta is not meta\n-        self.assertEqual(r.meta, meta)\n+        assert r.meta == meta\n         assert r.headers is not headers\n-        self.assertEqual(r.headers[b\"caca\"], b\"coco\")\n+        assert r.headers[b\"caca\"] == b\"coco\"\n \n     def test_url_scheme(self):\n         # This test passes by not raising any (ValueError) exception\n@@ -83,61 +82,61 @@ class RequestTest(unittest.TestCase):\n         r = self.request_class(url=url, headers=headers)\n         p = self.request_class(url=url, headers=r.headers)\n \n-        self.assertEqual(r.headers, p.headers)\n-        self.assertFalse(r.headers is headers)\n-        self.assertFalse(p.headers is r.headers)\n+        assert r.headers == p.headers\n+        assert r.headers is not headers\n+        assert p.headers is not r.headers\n \n         # headers must not be unicode\n         h = Headers({\"key1\": \"val1\", \"key2\": \"val2\"})\n         h[\"newkey\"] = \"newval\"\n         for k, v in h.items():\n-            self.assertIsInstance(k, bytes)\n+            assert isinstance(k, bytes)\n             for s in v:\n-                self.assertIsInstance(s, bytes)\n+                assert isinstance(s, bytes)\n \n     def test_eq(self):\n         url = \"http://www.scrapy.org\"\n         r1 = self.request_class(url=url)\n         r2 = self.request_class(url=url)\n-        self.assertNotEqual(r1, r2)\n+        assert r1 != r2\n \n         set_ = set()\n         set_.add(r1)\n         set_.add(r2)\n-        self.assertEqual(len(set_), 2)\n+        assert len(set_) == 2\n \n     def test_url(self):\n         r = self.request_class(url=\"http://www.scrapy.org/path\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/path\")\n+        assert r.url == \"http://www.scrapy.org/path\"\n \n     def test_url_quoting(self):\n         r = self.request_class(url=\"http://www.scrapy.org/blank%20space\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")\n+        assert r.url == \"http://www.scrapy.org/blank%20space\"\n         r = self.request_class(url=\"http://www.scrapy.org/blank space\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")\n+        assert r.url == \"http://www.scrapy.org/blank%20space\"\n \n     def test_url_encoding(self):\n         r = self.request_class(url=\"http://www.scrapy.org/price/£\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n+        assert r.url == \"http://www.scrapy.org/price/%C2%A3\"\n \n     def test_url_encoding_other(self):\n         # encoding affects only query part of URI, not path\n         # path part should always be UTF-8 encoded before percent-escaping\n         r = self.request_class(url=\"http://www.scrapy.org/price/£\", encoding=\"utf-8\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n+        assert r.url == \"http://www.scrapy.org/price/%C2%A3\"\n \n         r = self.request_class(url=\"http://www.scrapy.org/price/£\", encoding=\"latin1\")\n-        self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n+        assert r.url == \"http://www.scrapy.org/price/%C2%A3\"\n \n     def test_url_encoding_query(self):\n         r1 = self.request_class(url=\"http://www.scrapy.org/price/£?unit=µ\")\n-        self.assertEqual(r1.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")\n+        assert r1.url == \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\"\n \n         # should be same as above\n         r2 = self.request_class(\n             url=\"http://www.scrapy.org/price/£?unit=µ\", encoding=\"utf-8\"\n         )\n-        self.assertEqual(r2.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")\n+        assert r2.url == \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\"\n \n     def test_url_encoding_query_latin1(self):\n         # encoding is used for encoding query-string before percent-escaping;\n@@ -145,7 +144,7 @@ class RequestTest(unittest.TestCase):\n         r3 = self.request_class(\n             url=\"http://www.scrapy.org/price/µ?currency=£\", encoding=\"latin1\"\n         )\n-        self.assertEqual(r3.url, \"http://www.scrapy.org/price/%C2%B5?currency=%A3\")\n+        assert r3.url == \"http://www.scrapy.org/price/%C2%B5?currency=%A3\"\n \n     def test_url_encoding_nonutf8_untouched(self):\n         # percent-escaping sequences that do not match valid UTF-8 sequences\n@@ -164,16 +163,16 @@ class RequestTest(unittest.TestCase):\n         # \"http://www.example.org/r%C3%A9sum%C3%A9.html\", which is a different\n         # URI from \"http://www.example.org/r%E9sum%E9.html\".\n         r1 = self.request_class(url=\"http://www.scrapy.org/price/%a3\")\n-        self.assertEqual(r1.url, \"http://www.scrapy.org/price/%a3\")\n+        assert r1.url == \"http://www.scrapy.org/price/%a3\"\n \n         r2 = self.request_class(url=\"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n-        self.assertEqual(r2.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n+        assert r2.url == \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\"\n \n         r3 = self.request_class(url=\"http://www.scrapy.org/résumé/%a3\")\n-        self.assertEqual(r3.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n+        assert r3.url == \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\"\n \n         r4 = self.request_class(url=\"http://www.example.org/r%E9sum%E9.html\")\n-        self.assertEqual(r4.url, \"http://www.example.org/r%E9sum%E9.html\")\n+        assert r4.url == \"http://www.example.org/r%E9sum%E9.html\"\n \n     def test_body(self):\n         r1 = self.request_class(url=\"http://www.example.com/\")\n@@ -181,19 +180,19 @@ class RequestTest(unittest.TestCase):\n \n         r2 = self.request_class(url=\"http://www.example.com/\", body=b\"\")\n         assert isinstance(r2.body, bytes)\n-        self.assertEqual(r2.encoding, \"utf-8\")  # default encoding\n+        assert r2.encoding == \"utf-8\"  # default encoding\n \n         r3 = self.request_class(\n             url=\"http://www.example.com/\", body=\"Price: \\xa3100\", encoding=\"utf-8\"\n         )\n         assert isinstance(r3.body, bytes)\n-        self.assertEqual(r3.body, b\"Price: \\xc2\\xa3100\")\n+        assert r3.body == b\"Price: \\xc2\\xa3100\"\n \n         r4 = self.request_class(\n             url=\"http://www.example.com/\", body=\"Price: \\xa3100\", encoding=\"latin1\"\n         )\n         assert isinstance(r4.body, bytes)\n-        self.assertEqual(r4.body, b\"Price: \\xa3100\")\n+        assert r4.body == b\"Price: \\xa3100\"\n \n     def test_copy(self):\n         \"\"\"Test Request copy\"\"\"\n@@ -219,25 +218,25 @@ class RequestTest(unittest.TestCase):\n \n         # make sure flags list is shallow copied\n         assert r1.flags is not r2.flags, \"flags must be a shallow copy, not identical\"\n-        self.assertEqual(r1.flags, r2.flags)\n+        assert r1.flags == r2.flags\n \n         # make sure cb_kwargs dict is shallow copied\n         assert r1.cb_kwargs is not r2.cb_kwargs, (\n             \"cb_kwargs must be a shallow copy, not identical\"\n         )\n-        self.assertEqual(r1.cb_kwargs, r2.cb_kwargs)\n+        assert r1.cb_kwargs == r2.cb_kwargs\n \n         # make sure meta dict is shallow copied\n         assert r1.meta is not r2.meta, \"meta must be a shallow copy, not identical\"\n-        self.assertEqual(r1.meta, r2.meta)\n+        assert r1.meta == r2.meta\n \n         # make sure headers attribute is shallow copied\n         assert r1.headers is not r2.headers, (\n             \"headers must be a shallow copy, not identical\"\n         )\n-        self.assertEqual(r1.headers, r2.headers)\n-        self.assertEqual(r1.encoding, r2.encoding)\n-        self.assertEqual(r1.dont_filter, r2.dont_filter)\n+        assert r1.headers == r2.headers\n+        assert r1.encoding == r2.encoding\n+        assert r1.dont_filter == r2.dont_filter\n \n         # Request.body can be identical since it's an immutable object (str)\n \n@@ -258,10 +257,10 @@ class RequestTest(unittest.TestCase):\n         hdrs = Headers(r1.headers)\n         hdrs[b\"key\"] = b\"value\"\n         r2 = r1.replace(method=\"POST\", body=\"New body\", headers=hdrs)\n-        self.assertEqual(r1.url, r2.url)\n-        self.assertEqual((r1.method, r2.method), (\"GET\", \"POST\"))\n-        self.assertEqual((r1.body, r2.body), (b\"\", b\"New body\"))\n-        self.assertEqual((r1.headers, r2.headers), (self.default_headers, hdrs))\n+        assert r1.url == r2.url\n+        assert (r1.method, r2.method) == (\"GET\", \"POST\")\n+        assert (r1.body, r2.body) == (b\"\", b\"New body\")\n+        assert (r1.headers, r2.headers) == (self.default_headers, hdrs)\n \n         # Empty attributes (which may fail if not compared properly)\n         r3 = self.request_class(\n@@ -270,9 +269,9 @@ class RequestTest(unittest.TestCase):\n         r4 = r3.replace(\n             url=\"http://www.example.com/2\", body=b\"\", meta={}, dont_filter=False\n         )\n-        self.assertEqual(r4.url, \"http://www.example.com/2\")\n-        self.assertEqual(r4.body, b\"\")\n-        self.assertEqual(r4.meta, {})\n+        assert r4.url == \"http://www.example.com/2\"\n+        assert r4.body == b\"\"\n+        assert r4.meta == {}\n         assert r4.dont_filter is False\n \n     def test_method_always_str(self):\n@@ -291,32 +290,32 @@ class RequestTest(unittest.TestCase):\n             pass\n \n         r1 = self.request_class(\"http://example.com\")\n-        self.assertIsNone(r1.callback)\n-        self.assertIsNone(r1.errback)\n+        assert r1.callback is None\n+        assert r1.errback is None\n \n         r2 = self.request_class(\"http://example.com\", callback=a_function)\n-        self.assertIs(r2.callback, a_function)\n-        self.assertIsNone(r2.errback)\n+        assert r2.callback is a_function\n+        assert r2.errback is None\n \n         r3 = self.request_class(\"http://example.com\", errback=a_function)\n-        self.assertIsNone(r3.callback)\n-        self.assertIs(r3.errback, a_function)\n+        assert r3.callback is None\n+        assert r3.errback is a_function\n \n         r4 = self.request_class(\n             url=\"http://example.com\",\n             callback=a_function,\n             errback=a_function,\n         )\n-        self.assertIs(r4.callback, a_function)\n-        self.assertIs(r4.errback, a_function)\n+        assert r4.callback is a_function\n+        assert r4.errback is a_function\n \n         r5 = self.request_class(\n             url=\"http://example.com\",\n             callback=NO_CALLBACK,\n             errback=NO_CALLBACK,\n         )\n-        self.assertIs(r5.callback, NO_CALLBACK)\n-        self.assertIs(r5.errback, NO_CALLBACK)\n+        assert r5.callback is NO_CALLBACK\n+        assert r5.errback is NO_CALLBACK\n \n     def test_callback_and_errback_type(self):\n         with pytest.raises(TypeError):\n@@ -354,27 +353,21 @@ class RequestTest(unittest.TestCase):\n             \"2%3A15&comments=' --compressed\"\n         )\n         r = self.request_class.from_curl(curl_command)\n-        self.assertEqual(r.method, \"POST\")\n-        self.assertEqual(r.url, \"http://httpbin.org/post\")\n-        self.assertEqual(\n-            r.body,\n-            b\"custname=John+Smith&custtel=500&custemail=jsmith%40\"\n+        assert r.method == \"POST\"\n+        assert r.url == \"http://httpbin.org/post\"\n+        assert (\n+            r.body == b\"custname=John+Smith&custtel=500&custemail=jsmith%40\"\n             b\"example.org&size=small&topping=cheese&topping=onion\"\n-            b\"&delivery=12%3A15&comments=\",\n+            b\"&delivery=12%3A15&comments=\"\n         )\n-        self.assertEqual(\n-            r.cookies,\n-            {\n+        assert r.cookies == {\n             \"_gauges_unique_year\": \"1\",\n             \"_gauges_unique\": \"1\",\n             \"_gauges_unique_month\": \"1\",\n             \"_gauges_unique_hour\": \"1\",\n             \"_gauges_unique_day\": \"1\",\n-            },\n-        )\n-        self.assertEqual(\n-            r.headers,\n-            {\n+        }\n+        assert r.headers == {\n             b\"Origin\": [b\"http://httpbin.org\"],\n             b\"Accept-Encoding\": [b\"gzip, deflate\"],\n             b\"Accept-Language\": [b\"en-US,en;q=0.9,ru;q=0.8,es;q=0.7\"],\n@@ -392,15 +385,14 @@ class RequestTest(unittest.TestCase):\n             b\"Cache-Control\": [b\"max-age=0\"],\n             b\"Referer\": [b\"http://httpbin.org/forms/post\"],\n             b\"Connection\": [b\"keep-alive\"],\n-            },\n-        )\n+        }\n \n     def test_from_curl_with_kwargs(self):\n         r = self.request_class.from_curl(\n             'curl -X PATCH \"http://example.org\"', method=\"POST\", meta={\"key\": \"value\"}\n         )\n-        self.assertEqual(r.method, \"POST\")\n-        self.assertEqual(r.meta, {\"key\": \"value\"})\n+        assert r.method == \"POST\"\n+        assert r.meta == {\"key\": \"value\"}\n \n     def test_from_curl_ignore_unknown_options(self):\n         # By default: it works and ignores the unknown options: --foo and -z\n@@ -409,7 +401,7 @@ class RequestTest(unittest.TestCase):\n             r = self.request_class.from_curl(\n                 'curl -X DELETE \"http://example.org\" --foo -z',\n             )\n-            self.assertEqual(r.method, \"DELETE\")\n+            assert r.method == \"DELETE\"\n \n         # If `ignore_unknown_options` is set to `False` it raises an error with\n         # the unknown options: --foo and -z\n@@ -420,17 +412,17 @@ class RequestTest(unittest.TestCase):\n             )\n \n \n-class FormRequestTest(RequestTest):\n+class TestFormRequest(TestRequest):\n     request_class = FormRequest\n \n     def assertQueryEqual(self, first, second, msg=None):\n         first = to_unicode(first).split(\"&\")\n         second = to_unicode(second).split(\"&\")\n-        return self.assertEqual(sorted(first), sorted(second), msg)\n+        assert sorted(first) == sorted(second), msg\n \n     def test_empty_formdata(self):\n         r1 = self.request_class(\"http://www.example.com\", formdata={})\n-        self.assertEqual(r1.body, b\"\")\n+        assert r1.body == b\"\"\n \n     def test_formdata_overrides_querystring(self):\n         data = ((\"a\", \"one\"), (\"a\", \"two\"), (\"b\", \"2\"))\n@@ -438,69 +430,61 @@ class FormRequestTest(RequestTest):\n             \"http://www.example.com/?a=0&b=1&c=3#fragment\", method=\"GET\", formdata=data\n         ).url.split(\"#\", maxsplit=1)[0]\n         fs = _qs(self.request_class(url, method=\"GET\", formdata=data))\n-        self.assertEqual(set(fs[b\"a\"]), {b\"one\", b\"two\"})\n-        self.assertEqual(fs[b\"b\"], [b\"2\"])\n-        self.assertIsNone(fs.get(b\"c\"))\n+        assert set(fs[b\"a\"]) == {b\"one\", b\"two\"}\n+        assert fs[b\"b\"] == [b\"2\"]\n+        assert fs.get(b\"c\") is None\n \n         data = {\"a\": \"1\", \"b\": \"2\"}\n         fs = _qs(\n             self.request_class(\"http://www.example.com/\", method=\"GET\", formdata=data)\n         )\n-        self.assertEqual(fs[b\"a\"], [b\"1\"])\n-        self.assertEqual(fs[b\"b\"], [b\"2\"])\n+        assert fs[b\"a\"] == [b\"1\"]\n+        assert fs[b\"b\"] == [b\"2\"]\n \n     def test_default_encoding_bytes(self):\n         # using default encoding (utf-8)\n         data = {b\"one\": b\"two\", b\"price\": b\"\\xc2\\xa3 100\"}\n         r2 = self.request_class(\"http://www.example.com\", formdata=data)\n-        self.assertEqual(r2.method, \"POST\")\n-        self.assertEqual(r2.encoding, \"utf-8\")\n+        assert r2.method == \"POST\"\n+        assert r2.encoding == \"utf-8\"\n         self.assertQueryEqual(r2.body, b\"price=%C2%A3+100&one=two\")\n-        self.assertEqual(\n-            r2.headers[b\"Content-Type\"], b\"application/x-www-form-urlencoded\"\n-        )\n+        assert r2.headers[b\"Content-Type\"] == b\"application/x-www-form-urlencoded\"\n \n     def test_default_encoding_textual_data(self):\n         # using default encoding (utf-8)\n         data = {\"µ one\": \"two\", \"price\": \"£ 100\"}\n         r2 = self.request_class(\"http://www.example.com\", formdata=data)\n-        self.assertEqual(r2.method, \"POST\")\n-        self.assertEqual(r2.encoding, \"utf-8\")\n+        assert r2.method == \"POST\"\n+        assert r2.encoding == \"utf-8\"\n         self.assertQueryEqual(r2.body, b\"price=%C2%A3+100&%C2%B5+one=two\")\n-        self.assertEqual(\n-            r2.headers[b\"Content-Type\"], b\"application/x-www-form-urlencoded\"\n-        )\n+        assert r2.headers[b\"Content-Type\"] == b\"application/x-www-form-urlencoded\"\n \n     def test_default_encoding_mixed_data(self):\n         # using default encoding (utf-8)\n         data = {\"\\u00b5one\": b\"two\", b\"price\\xc2\\xa3\": \"\\u00a3 100\"}\n         r2 = self.request_class(\"http://www.example.com\", formdata=data)\n-        self.assertEqual(r2.method, \"POST\")\n-        self.assertEqual(r2.encoding, \"utf-8\")\n+        assert r2.method == \"POST\"\n+        assert r2.encoding == \"utf-8\"\n         self.assertQueryEqual(r2.body, b\"%C2%B5one=two&price%C2%A3=%C2%A3+100\")\n-        self.assertEqual(\n-            r2.headers[b\"Content-Type\"], b\"application/x-www-form-urlencoded\"\n-        )\n+        assert r2.headers[b\"Content-Type\"] == b\"application/x-www-form-urlencoded\"\n \n     def test_custom_encoding_bytes(self):\n         data = {b\"\\xb5 one\": b\"two\", b\"price\": b\"\\xa3 100\"}\n         r2 = self.request_class(\n             \"http://www.example.com\", formdata=data, encoding=\"latin1\"\n         )\n-        self.assertEqual(r2.method, \"POST\")\n-        self.assertEqual(r2.encoding, \"latin1\")\n+        assert r2.method == \"POST\"\n+        assert r2.encoding == \"latin1\"\n         self.assertQueryEqual(r2.body, b\"price=%A3+100&%B5+one=two\")\n-        self.assertEqual(\n-            r2.headers[b\"Content-Type\"], b\"application/x-www-form-urlencoded\"\n-        )\n+        assert r2.headers[b\"Content-Type\"] == b\"application/x-www-form-urlencoded\"\n \n     def test_custom_encoding_textual_data(self):\n         data = {\"price\": \"£ 100\"}\n         r3 = self.request_class(\n             \"http://www.example.com\", formdata=data, encoding=\"latin1\"\n         )\n-        self.assertEqual(r3.encoding, \"latin1\")\n-        self.assertEqual(r3.body, b\"price=%A3+100\")\n+        assert r3.encoding == \"latin1\"\n+        assert r3.body == b\"price=%A3+100\"\n \n     def test_multi_key_values(self):\n         # using multiples values for a single key\n@@ -523,16 +507,14 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"}\n         )\n \n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[b\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[b\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req)\n-        self.assertEqual(set(fs[b\"test\"]), {b\"val1\", b\"val2\"})\n-        self.assertEqual(set(fs[b\"one\"]), {b\"two\", b\"three\"})\n-        self.assertEqual(fs[b\"test2\"], [b\"xxx\"])\n-        self.assertEqual(fs[b\"six\"], [b\"seven\"])\n+        assert set(fs[b\"test\"]) == {b\"val1\", b\"val2\"}\n+        assert set(fs[b\"one\"]) == {b\"two\", b\"three\"}\n+        assert fs[b\"test2\"] == [b\"xxx\"]\n+        assert fs[b\"six\"] == [b\"seven\"]\n \n     def test_from_response_post_nonascii_bytes_utf8(self):\n         response = _buildresponse(\n@@ -547,16 +529,14 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"}\n         )\n \n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[b\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[b\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req, to_unicode=True)\n-        self.assertEqual(set(fs[\"test £\"]), {\"val1\", \"val2\"})\n-        self.assertEqual(set(fs[\"one\"]), {\"two\", \"three\"})\n-        self.assertEqual(fs[\"test2\"], [\"xxx µ\"])\n-        self.assertEqual(fs[\"six\"], [\"seven\"])\n+        assert set(fs[\"test £\"]) == {\"val1\", \"val2\"}\n+        assert set(fs[\"one\"]) == {\"two\", \"three\"}\n+        assert fs[\"test2\"] == [\"xxx µ\"]\n+        assert fs[\"six\"] == [\"seven\"]\n \n     def test_from_response_post_nonascii_bytes_latin1(self):\n         response = _buildresponse(\n@@ -572,16 +552,14 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"}\n         )\n \n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[b\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[b\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req, to_unicode=True, encoding=\"latin1\")\n-        self.assertEqual(set(fs[\"test £\"]), {\"val1\", \"val2\"})\n-        self.assertEqual(set(fs[\"one\"]), {\"two\", \"three\"})\n-        self.assertEqual(fs[\"test2\"], [\"xxx µ\"])\n-        self.assertEqual(fs[\"six\"], [\"seven\"])\n+        assert set(fs[\"test £\"]) == {\"val1\", \"val2\"}\n+        assert set(fs[\"one\"]) == {\"two\", \"three\"}\n+        assert fs[\"test2\"] == [\"xxx µ\"]\n+        assert fs[\"six\"] == [\"seven\"]\n \n     def test_from_response_post_nonascii_unicode(self):\n         response = _buildresponse(\n@@ -596,16 +574,14 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"}\n         )\n \n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[b\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[b\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req, to_unicode=True)\n-        self.assertEqual(set(fs[\"test £\"]), {\"val1\", \"val2\"})\n-        self.assertEqual(set(fs[\"one\"]), {\"two\", \"three\"})\n-        self.assertEqual(fs[\"test2\"], [\"xxx µ\"])\n-        self.assertEqual(fs[\"six\"], [\"seven\"])\n+        assert set(fs[\"test £\"]) == {\"val1\", \"val2\"}\n+        assert set(fs[\"one\"]) == {\"two\", \"three\"}\n+        assert fs[\"test2\"] == [\"xxx µ\"]\n+        assert fs[\"six\"] == [\"seven\"]\n \n     def test_from_response_duplicate_form_key(self):\n         response = _buildresponse(\"<form></form>\", url=\"http://www.example.com\")\n@@ -614,8 +590,8 @@ class FormRequestTest(RequestTest):\n             method=\"GET\",\n             formdata=((\"foo\", \"bar\"), (\"foo\", \"baz\")),\n         )\n-        self.assertEqual(urlparse_cached(req).hostname, \"www.example.com\")\n-        self.assertEqual(urlparse_cached(req).query, \"foo=bar&foo=baz\")\n+        assert urlparse_cached(req).hostname == \"www.example.com\"\n+        assert urlparse_cached(req).query == \"foo=bar&foo=baz\"\n \n     def test_from_response_override_duplicate_form_key(self):\n         response = _buildresponse(\n@@ -628,8 +604,8 @@ class FormRequestTest(RequestTest):\n             response, formdata=((\"two\", \"2\"), (\"two\", \"4\"))\n         )\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n-        self.assertEqual(fs[b\"two\"], [b\"2\", b\"4\"])\n+        assert fs[b\"one\"] == [b\"1\"]\n+        assert fs[b\"two\"] == [b\"2\", b\"4\"]\n \n     def test_from_response_extra_headers(self):\n         response = _buildresponse(\n@@ -644,11 +620,9 @@ class FormRequestTest(RequestTest):\n             formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"},\n             headers={\"Accept-Encoding\": \"gzip,deflate\"},\n         )\n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.headers[\"Accept-Encoding\"], b\"gzip,deflate\")\n+        assert req.method == \"POST\"\n+        assert req.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.headers[\"Accept-Encoding\"] == b\"gzip,deflate\"\n \n     def test_from_response_get(self):\n         response = _buildresponse(\n@@ -662,14 +636,14 @@ class FormRequestTest(RequestTest):\n         r1 = self.request_class.from_response(\n             response, formdata={\"one\": [\"two\", \"three\"], \"six\": \"seven\"}\n         )\n-        self.assertEqual(r1.method, \"GET\")\n-        self.assertEqual(urlparse_cached(r1).hostname, \"www.example.com\")\n-        self.assertEqual(urlparse_cached(r1).path, \"/this/get.php\")\n+        assert r1.method == \"GET\"\n+        assert urlparse_cached(r1).hostname == \"www.example.com\"\n+        assert urlparse_cached(r1).path == \"/this/get.php\"\n         fs = _qs(r1)\n-        self.assertEqual(set(fs[b\"test\"]), {b\"val1\", b\"val2\"})\n-        self.assertEqual(set(fs[b\"one\"]), {b\"two\", b\"three\"})\n-        self.assertEqual(fs[b\"test2\"], [b\"xxx\"])\n-        self.assertEqual(fs[b\"six\"], [b\"seven\"])\n+        assert set(fs[b\"test\"]) == {b\"val1\", b\"val2\"}\n+        assert set(fs[b\"one\"]) == {b\"two\", b\"three\"}\n+        assert fs[b\"test2\"] == [b\"xxx\"]\n+        assert fs[b\"six\"] == [b\"seven\"]\n \n     def test_from_response_override_params(self):\n         response = _buildresponse(\n@@ -680,8 +654,8 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, formdata={\"two\": \"2\"})\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n-        self.assertEqual(fs[b\"two\"], [b\"2\"])\n+        assert fs[b\"one\"] == [b\"1\"]\n+        assert fs[b\"two\"] == [b\"2\"]\n \n     def test_from_response_drop_params(self):\n         response = _buildresponse(\n@@ -692,8 +666,8 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, formdata={\"two\": None})\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n-        self.assertNotIn(b\"two\", fs)\n+        assert fs[b\"one\"] == [b\"1\"]\n+        assert b\"two\" not in fs\n \n     def test_from_response_override_method(self):\n         response = _buildresponse(\n@@ -702,9 +676,9 @@ class FormRequestTest(RequestTest):\n             </body></html>\"\"\"\n         )\n         request = FormRequest.from_response(response)\n-        self.assertEqual(request.method, \"GET\")\n+        assert request.method == \"GET\"\n         request = FormRequest.from_response(response, method=\"POST\")\n-        self.assertEqual(request.method, \"POST\")\n+        assert request.method == \"POST\"\n \n     def test_from_response_override_url(self):\n         response = _buildresponse(\n@@ -713,11 +687,11 @@ class FormRequestTest(RequestTest):\n             </body></html>\"\"\"\n         )\n         request = FormRequest.from_response(response)\n-        self.assertEqual(request.url, \"http://example.com/app\")\n+        assert request.url == \"http://example.com/app\"\n         request = FormRequest.from_response(response, url=\"http://foo.bar/absolute\")\n-        self.assertEqual(request.url, \"http://foo.bar/absolute\")\n+        assert request.url == \"http://foo.bar/absolute\"\n         request = FormRequest.from_response(response, url=\"/relative\")\n-        self.assertEqual(request.url, \"http://example.com/relative\")\n+        assert request.url == \"http://example.com/relative\"\n \n     def test_from_response_case_insensitive(self):\n         response = _buildresponse(\n@@ -729,9 +703,9 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response)\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickable1\"], [b\"clicked1\"])\n-        self.assertFalse(b\"i1\" in fs, fs)  # xpath in _get_inputs()\n-        self.assertFalse(b\"clickable2\" in fs, fs)  # xpath in _get_clickable()\n+        assert fs[b\"clickable1\"] == [b\"clicked1\"]\n+        assert b\"i1\" not in fs, fs  # xpath in _get_inputs()\n+        assert b\"clickable2\" not in fs, fs  # xpath in _get_clickable()\n \n     def test_from_response_submit_first_clickable(self):\n         response = _buildresponse(\n@@ -744,10 +718,10 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, formdata={\"two\": \"2\"})\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickable1\"], [b\"clicked1\"])\n-        self.assertFalse(b\"clickable2\" in fs, fs)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n-        self.assertEqual(fs[b\"two\"], [b\"2\"])\n+        assert fs[b\"clickable1\"] == [b\"clicked1\"]\n+        assert b\"clickable2\" not in fs, fs\n+        assert fs[b\"one\"] == [b\"1\"]\n+        assert fs[b\"two\"] == [b\"2\"]\n \n     def test_from_response_submit_not_first_clickable(self):\n         response = _buildresponse(\n@@ -762,10 +736,10 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"two\": \"2\"}, clickdata={\"name\": \"clickable2\"}\n         )\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickable2\"], [b\"clicked2\"])\n-        self.assertFalse(b\"clickable1\" in fs, fs)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n-        self.assertEqual(fs[b\"two\"], [b\"2\"])\n+        assert fs[b\"clickable2\"] == [b\"clicked2\"]\n+        assert b\"clickable1\" not in fs, fs\n+        assert fs[b\"one\"] == [b\"1\"]\n+        assert fs[b\"two\"] == [b\"2\"]\n \n     def test_from_response_dont_submit_image_as_input(self):\n         response = _buildresponse(\n@@ -777,7 +751,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, dont_click=True)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v\"]})\n+        assert fs == {b\"i1\": [b\"i1v\"]}\n \n     def test_from_response_dont_submit_reset_as_input(self):\n         response = _buildresponse(\n@@ -790,7 +764,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, dont_click=True)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v\"], b\"i2\": [b\"i2v\"]})\n+        assert fs == {b\"i1\": [b\"i1v\"], b\"i2\": [b\"i2v\"]}\n \n     def test_from_response_clickdata_does_not_ignore_image(self):\n         response = _buildresponse(\n@@ -801,7 +775,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v\"], b\"i2\": [b\"i2v\"]})\n+        assert fs == {b\"i1\": [b\"i1v\"], b\"i2\": [b\"i2v\"]}\n \n     def test_from_response_multiple_clickdata(self):\n         response = _buildresponse(\n@@ -816,9 +790,9 @@ class FormRequestTest(RequestTest):\n             response, clickdata={\"name\": \"clickable\", \"value\": \"clicked2\"}\n         )\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickable\"], [b\"clicked2\"])\n-        self.assertEqual(fs[b\"one\"], [b\"clicked1\"])\n-        self.assertEqual(fs[b\"two\"], [b\"clicked2\"])\n+        assert fs[b\"clickable\"] == [b\"clicked2\"]\n+        assert fs[b\"one\"] == [b\"clicked1\"]\n+        assert fs[b\"two\"] == [b\"clicked2\"]\n \n     def test_from_response_unicode_clickdata(self):\n         response = _buildresponse(\n@@ -833,7 +807,7 @@ class FormRequestTest(RequestTest):\n             response, clickdata={\"name\": \"price in \\u00a3\"}\n         )\n         fs = _qs(req, to_unicode=True)\n-        self.assertTrue(fs[\"price in \\u00a3\"])\n+        assert fs[\"price in \\u00a3\"]\n \n     def test_from_response_unicode_clickdata_latin1(self):\n         response = _buildresponse(\n@@ -849,7 +823,7 @@ class FormRequestTest(RequestTest):\n             response, clickdata={\"name\": \"price in \\u00a5\"}\n         )\n         fs = _qs(req, to_unicode=True, encoding=\"latin1\")\n-        self.assertTrue(fs[\"price in \\u00a5\"])\n+        assert fs[\"price in \\u00a5\"]\n \n     def test_from_response_multiple_forms_clickdata(self):\n         response = _buildresponse(\n@@ -867,9 +841,9 @@ class FormRequestTest(RequestTest):\n             response, formname=\"form2\", clickdata={\"name\": \"clickable\"}\n         )\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickable\"], [b\"clicked2\"])\n-        self.assertEqual(fs[b\"field2\"], [b\"value2\"])\n-        self.assertFalse(b\"field1\" in fs, fs)\n+        assert fs[b\"clickable\"] == [b\"clicked2\"]\n+        assert fs[b\"field2\"] == [b\"value2\"]\n+        assert b\"field1\" not in fs, fs\n \n     def test_from_response_override_clickable(self):\n         response = _buildresponse(\n@@ -879,7 +853,7 @@ class FormRequestTest(RequestTest):\n             response, formdata={\"clickme\": \"two\"}, clickdata={\"name\": \"clickme\"}\n         )\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"clickme\"], [b\"two\"])\n+        assert fs[b\"clickme\"] == [b\"two\"]\n \n     def test_from_response_dont_click(self):\n         response = _buildresponse(\n@@ -892,8 +866,8 @@ class FormRequestTest(RequestTest):\n         )\n         r1 = self.request_class.from_response(response, dont_click=True)\n         fs = _qs(r1)\n-        self.assertFalse(b\"clickable1\" in fs, fs)\n-        self.assertFalse(b\"clickable2\" in fs, fs)\n+        assert b\"clickable1\" not in fs, fs\n+        assert b\"clickable2\" not in fs, fs\n \n     def test_from_response_ambiguous_clickdata(self):\n         response = _buildresponse(\n@@ -934,8 +908,8 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, clickdata={\"nr\": 1})\n         fs = _qs(req)\n-        self.assertIn(b\"clickable2\", fs)\n-        self.assertNotIn(b\"clickable1\", fs)\n+        assert b\"clickable2\" in fs\n+        assert b\"clickable1\" not in fs\n \n     def test_from_response_invalid_nr_index_clickdata(self):\n         response = _buildresponse(\n@@ -962,7 +936,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(response, formdata={\"bar\": \"buz\"})\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"foo\": [b\"xxx\"], b\"bar\": [b\"buz\"]})\n+        assert fs == {b\"foo\": [b\"xxx\"], b\"bar\": [b\"buz\"]}\n \n     def test_from_response_errors_formnumber(self):\n         response = _buildresponse(\n@@ -983,12 +957,10 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\"\n         )\n         r1 = self.request_class.from_response(response, formdata={\"two\": \"3\"})\n-        self.assertEqual(r1.method, \"POST\")\n-        self.assertEqual(\n-            r1.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n+        assert r1.method == \"POST\"\n+        assert r1.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"one\": [b\"1\"], b\"two\": [b\"3\"]})\n+        assert fs == {b\"one\": [b\"1\"], b\"two\": [b\"3\"]}\n \n     def test_from_response_formname_exists(self):\n         response = _buildresponse(\n@@ -1002,9 +974,9 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\"\n         )\n         r1 = self.request_class.from_response(response, formname=\"form2\")\n-        self.assertEqual(r1.method, \"POST\")\n+        assert r1.method == \"POST\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"four\": [b\"4\"], b\"three\": [b\"3\"]})\n+        assert fs == {b\"four\": [b\"4\"], b\"three\": [b\"3\"]}\n \n     def test_from_response_formname_nonexistent(self):\n         response = _buildresponse(\n@@ -1016,9 +988,9 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\"\n         )\n         r1 = self.request_class.from_response(response, formname=\"form3\")\n-        self.assertEqual(r1.method, \"POST\")\n+        assert r1.method == \"POST\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"one\": [b\"1\"]})\n+        assert fs == {b\"one\": [b\"1\"]}\n \n     def test_from_response_formname_errors_formnumber(self):\n         response = _buildresponse(\n@@ -1044,9 +1016,9 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\"\n         )\n         r1 = self.request_class.from_response(response, formid=\"form2\")\n-        self.assertEqual(r1.method, \"POST\")\n+        assert r1.method == \"POST\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"four\": [b\"4\"], b\"three\": [b\"3\"]})\n+        assert fs == {b\"four\": [b\"4\"], b\"three\": [b\"3\"]}\n \n     def test_from_response_formname_nonexistent_fallback_formid(self):\n         response = _buildresponse(\n@@ -1062,9 +1034,9 @@ class FormRequestTest(RequestTest):\n         r1 = self.request_class.from_response(\n             response, formname=\"form3\", formid=\"form2\"\n         )\n-        self.assertEqual(r1.method, \"POST\")\n+        assert r1.method == \"POST\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"four\": [b\"4\"], b\"three\": [b\"3\"]})\n+        assert fs == {b\"four\": [b\"4\"], b\"three\": [b\"3\"]}\n \n     def test_from_response_formid_nonexistent(self):\n         response = _buildresponse(\n@@ -1076,9 +1048,9 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\"\n         )\n         r1 = self.request_class.from_response(response, formid=\"form3\")\n-        self.assertEqual(r1.method, \"POST\")\n+        assert r1.method == \"POST\"\n         fs = _qs(r1)\n-        self.assertEqual(fs, {b\"one\": [b\"1\"]})\n+        assert fs == {b\"one\": [b\"1\"]}\n \n     def test_from_response_formid_errors_formnumber(self):\n         response = _buildresponse(\n@@ -1122,7 +1094,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req, to_unicode=True)\n-        self.assertEqual(fs, {\"i1\": [\"i1v2\"], \"i2\": [\"i2v1\"], \"i4\": [\"i4v2\", \"i4v3\"]})\n+        assert fs == {\"i1\": [\"i1v2\"], \"i2\": [\"i2v1\"], \"i4\": [\"i4v2\", \"i4v3\"]}\n \n     def test_from_response_radio(self):\n         res = _buildresponse(\n@@ -1139,7 +1111,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"iv2\"], b\"i2\": [b\"on\"]})\n+        assert fs == {b\"i1\": [b\"iv2\"], b\"i2\": [b\"on\"]}\n \n     def test_from_response_checkbox(self):\n         res = _buildresponse(\n@@ -1156,7 +1128,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"iv2\"], b\"i2\": [b\"on\"]})\n+        assert fs == {b\"i1\": [b\"iv2\"], b\"i2\": [b\"on\"]}\n \n     def test_from_response_input_text(self):\n         res = _buildresponse(\n@@ -1170,7 +1142,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v1\"], b\"i2\": [b\"\"], b\"i4\": [b\"i4v1\"]})\n+        assert fs == {b\"i1\": [b\"i1v1\"], b\"i2\": [b\"\"], b\"i4\": [b\"i4v1\"]}\n \n     def test_from_response_input_hidden(self):\n         res = _buildresponse(\n@@ -1183,7 +1155,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v1\"], b\"i2\": [b\"\"]})\n+        assert fs == {b\"i1\": [b\"i1v1\"], b\"i2\": [b\"\"]}\n \n     def test_from_response_input_textarea(self):\n         res = _buildresponse(\n@@ -1196,7 +1168,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {b\"i1\": [b\"i1v\"], b\"i2\": [b\"\"], b\"i3\": [b\"\"]})\n+        assert fs == {b\"i1\": [b\"i1v\"], b\"i2\": [b\"\"], b\"i3\": [b\"\"]}\n \n     def test_from_response_descendants(self):\n         res = _buildresponse(\n@@ -1218,7 +1190,7 @@ class FormRequestTest(RequestTest):\n         )\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(set(fs), {b\"h2\", b\"i2\", b\"i1\", b\"i3\", b\"h1\", b\"i5\", b\"i4\"})\n+        assert set(fs) == {b\"h2\", b\"i2\", b\"i1\", b\"i3\", b\"h1\", b\"i5\", b\"i4\"}\n \n     def test_from_response_xpath(self):\n         response = _buildresponse(\n@@ -1235,13 +1207,13 @@ class FormRequestTest(RequestTest):\n             response, formxpath=\"//form[@action='post.php']\"\n         )\n         fs = _qs(r1)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n+        assert fs[b\"one\"] == [b\"1\"]\n \n         r1 = self.request_class.from_response(\n             response, formxpath=\"//form/input[@name='four']\"\n         )\n         fs = _qs(r1)\n-        self.assertEqual(fs[b\"three\"], [b\"3\"])\n+        assert fs[b\"three\"] == [b\"3\"]\n \n         with pytest.raises(ValueError, match=\"No <form> element found with\"):\n             self.request_class.from_response(\n@@ -1254,7 +1226,7 @@ class FormRequestTest(RequestTest):\n             response, formxpath=\"//form[@name='\\u044a']\"\n         )\n         fs = _qs(r)\n-        self.assertEqual(fs, {})\n+        assert not fs\n \n         xpath = \"//form[@name='\\u03b1']\"\n         with pytest.raises(ValueError, match=re.escape(xpath)):\n@@ -1270,15 +1242,13 @@ class FormRequestTest(RequestTest):\n             url=\"http://www.example.com/this/list.html\",\n         )\n         req = self.request_class.from_response(response)\n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"test1\"], [b\"val1\"])\n-        self.assertEqual(fs[b\"test2\"], [b\"val2\"])\n-        self.assertEqual(fs[b\"button1\"], [b\"submit1\"])\n+        assert fs[b\"test1\"] == [b\"val1\"]\n+        assert fs[b\"test2\"] == [b\"val2\"]\n+        assert fs[b\"button1\"] == [b\"submit1\"]\n \n     def test_from_response_button_notype(self):\n         response = _buildresponse(\n@@ -1290,15 +1260,13 @@ class FormRequestTest(RequestTest):\n             url=\"http://www.example.com/this/list.html\",\n         )\n         req = self.request_class.from_response(response)\n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"test1\"], [b\"val1\"])\n-        self.assertEqual(fs[b\"test2\"], [b\"val2\"])\n-        self.assertEqual(fs[b\"button1\"], [b\"submit1\"])\n+        assert fs[b\"test1\"] == [b\"val1\"]\n+        assert fs[b\"test2\"] == [b\"val2\"]\n+        assert fs[b\"button1\"] == [b\"submit1\"]\n \n     def test_from_response_submit_novalue(self):\n         response = _buildresponse(\n@@ -1310,15 +1278,13 @@ class FormRequestTest(RequestTest):\n             url=\"http://www.example.com/this/list.html\",\n         )\n         req = self.request_class.from_response(response)\n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"test1\"], [b\"val1\"])\n-        self.assertEqual(fs[b\"test2\"], [b\"val2\"])\n-        self.assertEqual(fs[b\"button1\"], [b\"\"])\n+        assert fs[b\"test1\"] == [b\"val1\"]\n+        assert fs[b\"test2\"] == [b\"val2\"]\n+        assert fs[b\"button1\"] == [b\"\"]\n \n     def test_from_response_button_novalue(self):\n         response = _buildresponse(\n@@ -1330,15 +1296,13 @@ class FormRequestTest(RequestTest):\n             url=\"http://www.example.com/this/list.html\",\n         )\n         req = self.request_class.from_response(response)\n-        self.assertEqual(req.method, \"POST\")\n-        self.assertEqual(\n-            req.headers[\"Content-type\"], b\"application/x-www-form-urlencoded\"\n-        )\n-        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        assert req.method == \"POST\"\n+        assert req.headers[\"Content-type\"] == b\"application/x-www-form-urlencoded\"\n+        assert req.url == \"http://www.example.com/this/post.php\"\n         fs = _qs(req)\n-        self.assertEqual(fs[b\"test1\"], [b\"val1\"])\n-        self.assertEqual(fs[b\"test2\"], [b\"val2\"])\n-        self.assertEqual(fs[b\"button1\"], [b\"\"])\n+        assert fs[b\"test1\"] == [b\"val1\"]\n+        assert fs[b\"test2\"] == [b\"val2\"]\n+        assert fs[b\"button1\"] == [b\"\"]\n \n     def test_html_base_form_action(self):\n         response = _buildresponse(\n@@ -1356,12 +1320,12 @@ class FormRequestTest(RequestTest):\n             url=\"http://a.com/\",\n         )\n         req = self.request_class.from_response(response)\n-        self.assertEqual(req.url, \"http://b.com/test_form\")\n+        assert req.url == \"http://b.com/test_form\"\n \n     def test_spaces_in_action(self):\n         resp = _buildresponse('<body><form action=\" path\\n\"></form></body>')\n         req = self.request_class.from_response(resp)\n-        self.assertEqual(req.url, \"http://example.com/path\")\n+        assert req.url == \"http://example.com/path\"\n \n     def test_from_response_css(self):\n         response = _buildresponse(\n@@ -1378,11 +1342,11 @@ class FormRequestTest(RequestTest):\n             response, formcss=\"form[action='post.php']\"\n         )\n         fs = _qs(r1)\n-        self.assertEqual(fs[b\"one\"], [b\"1\"])\n+        assert fs[b\"one\"] == [b\"1\"]\n \n         r1 = self.request_class.from_response(response, formcss=\"input[name='four']\")\n         fs = _qs(r1)\n-        self.assertEqual(fs[b\"three\"], [b\"3\"])\n+        assert fs[b\"three\"] == [b\"3\"]\n \n         with pytest.raises(ValueError, match=\"No <form> element found with\"):\n             self.request_class.from_response(response, formcss=\"input[name='abc']\")\n@@ -1400,7 +1364,7 @@ class FormRequestTest(RequestTest):\n                 \"</form>\"\n             )\n             r = self.request_class.from_response(response)\n-            self.assertEqual(r.method, expected)\n+            assert r.method == expected\n \n     def test_form_response_with_invalid_formdata_type_error(self):\n         \"\"\"Test that a ValueError is raised for non-iterable and non-dict formdata input\"\"\"\n@@ -1464,23 +1428,20 @@ def _qs(req, encoding=\"utf-8\", to_unicode=False):\n     return parse_qs(uqs, True)\n \n \n-class XmlRpcRequestTest(RequestTest):\n+class TestXmlRpcRequest(TestRequest):\n     request_class = XmlRpcRequest\n     default_method = \"POST\"\n     default_headers = {b\"Content-Type\": [b\"text/xml\"]}\n \n     def _test_request(self, **kwargs):\n         r = self.request_class(\"http://scrapytest.org/rpc2\", **kwargs)\n-        self.assertEqual(r.headers[b\"Content-Type\"], b\"text/xml\")\n-        self.assertEqual(\n-            r.body,\n-            to_bytes(\n+        assert r.headers[b\"Content-Type\"] == b\"text/xml\"\n+        assert r.body == to_bytes(\n             xmlrpc.client.dumps(**kwargs), encoding=kwargs.get(\"encoding\", \"utf-8\")\n-            ),\n         )\n-        self.assertEqual(r.method, \"POST\")\n-        self.assertEqual(r.encoding, kwargs.get(\"encoding\", \"utf-8\"))\n-        self.assertTrue(r.dont_filter, True)\n+        assert r.method == \"POST\"\n+        assert r.encoding == kwargs.get(\"encoding\", \"utf-8\")\n+        assert r.dont_filter, True\n \n     def test_xmlrpc_dumps(self):\n         self._test_request(params=(\"value\",))\n@@ -1497,7 +1458,7 @@ class XmlRpcRequestTest(RequestTest):\n         self._test_request(params=(\"pas£\",), encoding=\"latin1\")\n \n \n-class JsonRequestTest(RequestTest):\n+class TestJsonRequest(TestRequest):\n     request_class = JsonRequest\n     default_method = \"GET\"\n     default_headers = {\n@@ -1505,49 +1466,51 @@ class JsonRequestTest(RequestTest):\n         b\"Accept\": [b\"application/json, text/javascript, */*; q=0.01\"],\n     }\n \n-    def setUp(self):\n+    def setup_method(self):\n         warnings.simplefilter(\"always\")\n-        super().setUp()\n+\n+    def teardown_method(self):\n+        warnings.resetwarnings()\n \n     def test_data(self):\n         r1 = self.request_class(url=\"http://www.example.com/\")\n-        self.assertEqual(r1.body, b\"\")\n+        assert r1.body == b\"\"\n \n         body = b\"body\"\n         r2 = self.request_class(url=\"http://www.example.com/\", body=body)\n-        self.assertEqual(r2.body, body)\n+        assert r2.body == body\n \n         data = {\n             \"name\": \"value\",\n         }\n         r3 = self.request_class(url=\"http://www.example.com/\", data=data)\n-        self.assertEqual(r3.body, to_bytes(json.dumps(data)))\n+        assert r3.body == to_bytes(json.dumps(data))\n \n         # empty data\n         r4 = self.request_class(url=\"http://www.example.com/\", data=[])\n-        self.assertEqual(r4.body, to_bytes(json.dumps([])))\n+        assert r4.body == to_bytes(json.dumps([]))\n \n     def test_data_method(self):\n         # data is not passed\n         r1 = self.request_class(url=\"http://www.example.com/\")\n-        self.assertEqual(r1.method, \"GET\")\n+        assert r1.method == \"GET\"\n \n         body = b\"body\"\n         r2 = self.request_class(url=\"http://www.example.com/\", body=body)\n-        self.assertEqual(r2.method, \"GET\")\n+        assert r2.method == \"GET\"\n \n         data = {\n             \"name\": \"value\",\n         }\n         r3 = self.request_class(url=\"http://www.example.com/\", data=data)\n-        self.assertEqual(r3.method, \"POST\")\n+        assert r3.method == \"POST\"\n \n         # method passed explicitly\n         r4 = self.request_class(url=\"http://www.example.com/\", data=data, method=\"GET\")\n-        self.assertEqual(r4.method, \"GET\")\n+        assert r4.method == \"GET\"\n \n         r5 = self.request_class(url=\"http://www.example.com/\", data=[])\n-        self.assertEqual(r5.method, \"POST\")\n+        assert r5.method == \"POST\"\n \n     def test_body_data(self):\n         \"\"\"passing both body and data should result a warning\"\"\"\n@@ -1557,10 +1520,10 @@ class JsonRequestTest(RequestTest):\n         }\n         with warnings.catch_warnings(record=True) as _warnings:\n             r5 = self.request_class(url=\"http://www.example.com/\", body=body, data=data)\n-            self.assertEqual(r5.body, body)\n-            self.assertEqual(r5.method, \"GET\")\n-            self.assertEqual(len(_warnings), 1)\n-            self.assertIn(\"data will be ignored\", str(_warnings[0].message))\n+            assert r5.body == body\n+            assert r5.method == \"GET\"\n+            assert len(_warnings) == 1\n+            assert \"data will be ignored\" in str(_warnings[0].message)\n \n     def test_empty_body_data(self):\n         \"\"\"passing any body value and data should result a warning\"\"\"\n@@ -1569,10 +1532,10 @@ class JsonRequestTest(RequestTest):\n         }\n         with warnings.catch_warnings(record=True) as _warnings:\n             r6 = self.request_class(url=\"http://www.example.com/\", body=b\"\", data=data)\n-            self.assertEqual(r6.body, b\"\")\n-            self.assertEqual(r6.method, \"GET\")\n-            self.assertEqual(len(_warnings), 1)\n-            self.assertIn(\"data will be ignored\", str(_warnings[0].message))\n+            assert r6.body == b\"\"\n+            assert r6.method == \"GET\"\n+            assert len(_warnings) == 1\n+            assert \"data will be ignored\" in str(_warnings[0].message)\n \n     def test_body_none_data(self):\n         data = {\n@@ -1580,15 +1543,15 @@ class JsonRequestTest(RequestTest):\n         }\n         with warnings.catch_warnings(record=True) as _warnings:\n             r7 = self.request_class(url=\"http://www.example.com/\", body=None, data=data)\n-            self.assertEqual(r7.body, to_bytes(json.dumps(data)))\n-            self.assertEqual(r7.method, \"POST\")\n-            self.assertEqual(len(_warnings), 0)\n+            assert r7.body == to_bytes(json.dumps(data))\n+            assert r7.method == \"POST\"\n+            assert len(_warnings) == 0\n \n     def test_body_data_none(self):\n         with warnings.catch_warnings(record=True) as _warnings:\n             r8 = self.request_class(url=\"http://www.example.com/\", body=None, data=None)\n-            self.assertEqual(r8.method, \"GET\")\n-            self.assertEqual(len(_warnings), 0)\n+            assert r8.method == \"GET\"\n+            assert len(_warnings) == 0\n \n     def test_dumps_sort_keys(self):\n         \"\"\"Test that sort_keys=True is passed to json.dumps by default\"\"\"\n@@ -1598,7 +1561,7 @@ class JsonRequestTest(RequestTest):\n         with mock.patch(\"json.dumps\", return_value=b\"\") as mock_dumps:\n             self.request_class(url=\"http://www.example.com/\", data=data)\n             kwargs = mock_dumps.call_args[1]\n-            self.assertEqual(kwargs[\"sort_keys\"], True)\n+            assert kwargs[\"sort_keys\"] is True\n \n     def test_dumps_kwargs(self):\n         \"\"\"Test that dumps_kwargs are passed to json.dumps\"\"\"\n@@ -1614,8 +1577,8 @@ class JsonRequestTest(RequestTest):\n                 url=\"http://www.example.com/\", data=data, dumps_kwargs=dumps_kwargs\n             )\n             kwargs = mock_dumps.call_args[1]\n-            self.assertEqual(kwargs[\"ensure_ascii\"], True)\n-            self.assertEqual(kwargs[\"allow_nan\"], True)\n+            assert kwargs[\"ensure_ascii\"] is True\n+            assert kwargs[\"allow_nan\"] is True\n \n     def test_replace_data(self):\n         data1 = {\n@@ -1626,7 +1589,7 @@ class JsonRequestTest(RequestTest):\n         }\n         r1 = self.request_class(url=\"http://www.example.com/\", data=data1)\n         r2 = r1.replace(data=data2)\n-        self.assertEqual(r2.body, to_bytes(json.dumps(data2)))\n+        assert r2.body == to_bytes(json.dumps(data2))\n \n     def test_replace_sort_keys(self):\n         \"\"\"Test that replace provides sort_keys=True to json.dumps\"\"\"\n@@ -1640,7 +1603,7 @@ class JsonRequestTest(RequestTest):\n         with mock.patch(\"json.dumps\", return_value=b\"\") as mock_dumps:\n             r1.replace(data=data2)\n             kwargs = mock_dumps.call_args[1]\n-            self.assertEqual(kwargs[\"sort_keys\"], True)\n+            assert kwargs[\"sort_keys\"] is True\n \n     def test_replace_dumps_kwargs(self):\n         \"\"\"Test that dumps_kwargs are provided to json.dumps when replace is called\"\"\"\n@@ -1660,8 +1623,8 @@ class JsonRequestTest(RequestTest):\n         with mock.patch(\"json.dumps\", return_value=b\"\") as mock_dumps:\n             r1.replace(data=data2)\n             kwargs = mock_dumps.call_args[1]\n-            self.assertEqual(kwargs[\"ensure_ascii\"], True)\n-            self.assertEqual(kwargs[\"allow_nan\"], True)\n+            assert kwargs[\"ensure_ascii\"] is True\n+            assert kwargs[\"allow_nan\"] is True\n \n     def test_replacement_both_body_and_data_warns(self):\n         \"\"\"Test that we get a warning if both body and data are passed\"\"\"\n@@ -1677,11 +1640,6 @@ class JsonRequestTest(RequestTest):\n \n         with warnings.catch_warnings(record=True) as _warnings:\n             r1.replace(data=data2, body=body2)\n-            self.assertIn(\n-                \"Both body and data passed. data will be ignored\",\n-                str(_warnings[0].message),\n+            assert \"Both body and data passed. data will be ignored\" in str(\n+                _warnings[0].message\n             )\n-\n-    def tearDown(self):\n-        warnings.resetwarnings()\n-        super().tearDown()\n\n@@ -1,5 +1,4 @@\n import codecs\n-import unittest\n from unittest import mock\n \n import pytest\n@@ -22,62 +21,56 @@ from scrapy.utils.python import to_unicode\n from tests import get_testdata\n \n \n-class BaseResponseTest(unittest.TestCase):\n+class TestResponseBase:\n     response_class = Response\n \n     def test_init(self):\n         # Response requires url in the constructor\n         with pytest.raises(TypeError):\n             self.response_class()\n-        self.assertTrue(\n-            isinstance(self.response_class(\"http://example.com/\"), self.response_class)\n+        assert isinstance(\n+            self.response_class(\"http://example.com/\"), self.response_class\n         )\n         with pytest.raises(TypeError):\n             self.response_class(b\"http://example.com\")\n         with pytest.raises(TypeError):\n             self.response_class(url=\"http://example.com\", body={})\n         # body can be str or None\n-        self.assertTrue(\n-            isinstance(\n+        assert isinstance(\n             self.response_class(\"http://example.com/\", body=b\"\"),\n             self.response_class,\n         )\n-        )\n-        self.assertTrue(\n-            isinstance(\n+        assert isinstance(\n             self.response_class(\"http://example.com/\", body=b\"body\"),\n             self.response_class,\n         )\n-        )\n         # test presence of all optional parameters\n-        self.assertTrue(\n-            isinstance(\n+        assert isinstance(\n             self.response_class(\n                 \"http://example.com/\", body=b\"\", headers={}, status=200\n             ),\n             self.response_class,\n         )\n-        )\n \n         r = self.response_class(\"http://www.example.com\")\n         assert isinstance(r.url, str)\n-        self.assertEqual(r.url, \"http://www.example.com\")\n-        self.assertEqual(r.status, 200)\n+        assert r.url == \"http://www.example.com\"\n+        assert r.status == 200\n \n         assert isinstance(r.headers, Headers)\n-        self.assertEqual(r.headers, {})\n+        assert not r.headers\n \n         headers = {\"foo\": \"bar\"}\n         body = b\"a body\"\n         r = self.response_class(\"http://www.example.com\", headers=headers, body=body)\n \n         assert r.headers is not headers\n-        self.assertEqual(r.headers[b\"foo\"], b\"bar\")\n+        assert r.headers[b\"foo\"] == b\"bar\"\n \n         r = self.response_class(\"http://www.example.com\", status=301)\n-        self.assertEqual(r.status, 301)\n+        assert r.status == 301\n         r = self.response_class(\"http://www.example.com\", status=\"301\")\n-        self.assertEqual(r.status, 301)\n+        assert r.status == 301\n         with pytest.raises(ValueError, match=r\"invalid literal for int\\(\\)\"):\n             self.response_class(\"http://example.com\", status=\"lala200\")\n \n@@ -88,18 +81,18 @@ class BaseResponseTest(unittest.TestCase):\n         r1.flags.append(\"cached\")\n         r2 = r1.copy()\n \n-        self.assertEqual(r1.status, r2.status)\n-        self.assertEqual(r1.body, r2.body)\n+        assert r1.status == r2.status\n+        assert r1.body == r2.body\n \n         # make sure flags list is shallow copied\n         assert r1.flags is not r2.flags, \"flags must be a shallow copy, not identical\"\n-        self.assertEqual(r1.flags, r2.flags)\n+        assert r1.flags == r2.flags\n \n         # make sure headers attribute is shallow copied\n         assert r1.headers is not r2.headers, (\n             \"headers must be a shallow copy, not identical\"\n         )\n-        self.assertEqual(r1.headers, r2.headers)\n+        assert r1.headers == r2.headers\n \n     def test_copy_meta(self):\n         req = Request(\"http://www.example.com\")\n@@ -144,16 +137,16 @@ class BaseResponseTest(unittest.TestCase):\n         r1 = self.response_class(\"http://www.example.com\")\n         r2 = r1.replace(status=301, body=b\"New body\", headers=hdrs)\n         assert r1.body == b\"\"\n-        self.assertEqual(r1.url, r2.url)\n-        self.assertEqual((r1.status, r2.status), (200, 301))\n-        self.assertEqual((r1.body, r2.body), (b\"\", b\"New body\"))\n-        self.assertEqual((r1.headers, r2.headers), ({}, hdrs))\n+        assert r1.url == r2.url\n+        assert (r1.status, r2.status) == (200, 301)\n+        assert (r1.body, r2.body) == (b\"\", b\"New body\")\n+        assert (r1.headers, r2.headers) == ({}, hdrs)\n \n         # Empty attributes (which may fail if not compared properly)\n         r3 = self.response_class(\"http://www.example.com\", flags=[\"cached\"])\n         r4 = r3.replace(body=b\"\", flags=[])\n-        self.assertEqual(r4.body, b\"\")\n-        self.assertEqual(r4.flags, [])\n+        assert r4.body == b\"\"\n+        assert not r4.flags\n \n     def _assert_response_values(self, response, encoding, body):\n         if isinstance(body, str):\n@@ -166,11 +159,11 @@ class BaseResponseTest(unittest.TestCase):\n         assert isinstance(response.body, bytes)\n         assert isinstance(response.text, str)\n         self._assert_response_encoding(response, encoding)\n-        self.assertEqual(response.body, body_bytes)\n-        self.assertEqual(response.text, body_unicode)\n+        assert response.body == body_bytes\n+        assert response.text == body_unicode\n \n     def _assert_response_encoding(self, response, encoding):\n-        self.assertEqual(response.encoding, resolve_encoding(encoding))\n+        assert response.encoding == resolve_encoding(encoding)\n \n     def test_immutable_attributes(self):\n         r = self.response_class(\"http://example.com\")\n@@ -183,7 +176,7 @@ class BaseResponseTest(unittest.TestCase):\n         \"\"\"Test urljoin shortcut (only for existence, since behavior equals urljoin)\"\"\"\n         joined = self.response_class(\"http://www.example.com\").urljoin(\"/test\")\n         absolute = \"http://www.example.com/test\"\n-        self.assertEqual(joined, absolute)\n+        assert joined == absolute\n \n     def test_shortcut_attributes(self):\n         r = self.response_class(\"http://example.com\", body=b\"hello\")\n@@ -241,7 +234,7 @@ class BaseResponseTest(unittest.TestCase):\n     def test_follow_flags(self):\n         res = self.response_class(\"http://example.com/\")\n         fol = res.follow(\"http://example.com/\", flags=[\"cached\", \"allowed\"])\n-        self.assertEqual(fol.flags, [\"cached\", \"allowed\"])\n+        assert fol.flags == [\"cached\", \"allowed\"]\n \n     # Response.follow_all\n \n@@ -276,7 +269,7 @@ class BaseResponseTest(unittest.TestCase):\n \n     def test_follow_all_empty(self):\n         r = self.response_class(\"http://example.com\")\n-        self.assertEqual([], list(r.follow_all([])))\n+        assert not list(r.follow_all([]))\n \n     def test_follow_all_invalid(self):\n         r = self.response_class(\"http://example.com\")\n@@ -327,13 +320,13 @@ class BaseResponseTest(unittest.TestCase):\n         ]\n         fol = re.follow_all(urls, flags=[\"cached\", \"allowed\"])\n         for req in fol:\n-            self.assertEqual(req.flags, [\"cached\", \"allowed\"])\n+            assert req.flags == [\"cached\", \"allowed\"]\n \n     def _assert_followed_url(self, follow_obj, target_url, response=None):\n         if response is None:\n             response = self._links_response()\n         req = response.follow(follow_obj)\n-        self.assertEqual(req.url, target_url)\n+        assert req.url == target_url\n         return req\n \n     def _assert_followed_all_urls(self, follow_obj, target_urls, response=None):\n@@ -341,7 +334,7 @@ class BaseResponseTest(unittest.TestCase):\n             response = self._links_response()\n         followed = response.follow_all(follow_obj)\n         for req, target in zip(followed, target_urls):\n-            self.assertEqual(req.url, target)\n+            assert req.url == target\n             yield req\n \n     def _links_response(self):\n@@ -353,7 +346,7 @@ class BaseResponseTest(unittest.TestCase):\n         return self.response_class(\"http://example.com/index\", body=body)\n \n \n-class TextResponseTest(BaseResponseTest):\n+class TestTextResponse(TestResponseBase):\n     response_class = TextResponse\n \n     def test_replace(self):\n@@ -365,10 +358,10 @@ class TextResponseTest(BaseResponseTest):\n         r3 = r1.replace(url=\"http://www.example.com/other\", encoding=\"latin1\")\n \n         assert isinstance(r2, self.response_class)\n-        self.assertEqual(r2.url, \"http://www.example.com/other\")\n+        assert r2.url == \"http://www.example.com/other\"\n         self._assert_response_encoding(r2, \"cp852\")\n-        self.assertEqual(r3.url, \"http://www.example.com/other\")\n-        self.assertEqual(r3._declared_encoding(), \"latin1\")\n+        assert r3.url == \"http://www.example.com/other\"\n+        assert r3._declared_encoding() == \"latin1\"\n \n     def test_unicode_url(self):\n         # instantiate with unicode url without encoding (should set default encoding)\n@@ -382,21 +375,21 @@ class TextResponseTest(BaseResponseTest):\n         resp = self.response_class(\n             url=\"http://www.example.com/price/\\xa3\", encoding=\"utf-8\"\n         )\n-        self.assertEqual(resp.url, to_unicode(b\"http://www.example.com/price/\\xc2\\xa3\"))\n+        assert resp.url == to_unicode(b\"http://www.example.com/price/\\xc2\\xa3\")\n         resp = self.response_class(\n             url=\"http://www.example.com/price/\\xa3\", encoding=\"latin-1\"\n         )\n-        self.assertEqual(resp.url, \"http://www.example.com/price/\\xa3\")\n+        assert resp.url == \"http://www.example.com/price/\\xa3\"\n         resp = self.response_class(\n             \"http://www.example.com/price/\\xa3\",\n             headers={\"Content-type\": [\"text/html; charset=utf-8\"]},\n         )\n-        self.assertEqual(resp.url, to_unicode(b\"http://www.example.com/price/\\xc2\\xa3\"))\n+        assert resp.url == to_unicode(b\"http://www.example.com/price/\\xc2\\xa3\")\n         resp = self.response_class(\n             \"http://www.example.com/price/\\xa3\",\n             headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]},\n         )\n-        self.assertEqual(resp.url, \"http://www.example.com/price/\\xa3\")\n+        assert resp.url == \"http://www.example.com/price/\\xa3\"\n \n     def test_unicode_body(self):\n         unicode_string = (\n@@ -412,8 +405,8 @@ class TextResponseTest(BaseResponseTest):\n         )\n \n         # check response.text\n-        self.assertTrue(isinstance(r1.text, str))\n-        self.assertEqual(r1.text, unicode_string)\n+        assert isinstance(r1.text, str)\n+        assert r1.text == unicode_string\n \n     def test_encoding(self):\n         r1 = self.response_class(\n@@ -458,18 +451,18 @@ class TextResponseTest(BaseResponseTest):\n             },\n         )\n \n-        self.assertEqual(r1._headers_encoding(), \"utf-8\")\n-        self.assertEqual(r2._headers_encoding(), None)\n-        self.assertEqual(r2._declared_encoding(), \"utf-8\")\n+        assert r1._headers_encoding() == \"utf-8\"\n+        assert r2._headers_encoding() is None\n+        assert r2._declared_encoding() == \"utf-8\"\n         self._assert_response_encoding(r2, \"utf-8\")\n-        self.assertEqual(r3._headers_encoding(), \"cp1252\")\n-        self.assertEqual(r3._declared_encoding(), \"cp1252\")\n-        self.assertEqual(r4._headers_encoding(), None)\n-        self.assertEqual(r5._headers_encoding(), None)\n-        self.assertEqual(r8._headers_encoding(), \"cp1251\")\n-        self.assertEqual(r9._headers_encoding(), None)\n-        self.assertEqual(r8._declared_encoding(), \"utf-8\")\n-        self.assertEqual(r9._declared_encoding(), None)\n+        assert r3._headers_encoding() == \"cp1252\"\n+        assert r3._declared_encoding() == \"cp1252\"\n+        assert r4._headers_encoding() is None\n+        assert r5._headers_encoding() is None\n+        assert r8._headers_encoding() == \"cp1251\"\n+        assert r9._headers_encoding() is None\n+        assert r8._declared_encoding() == \"utf-8\"\n+        assert r9._declared_encoding() is None\n         self._assert_response_encoding(r5, \"utf-8\")\n         self._assert_response_encoding(r8, \"utf-8\")\n         self._assert_response_encoding(r9, \"cp1252\")\n@@ -493,7 +486,7 @@ class TextResponseTest(BaseResponseTest):\n             headers={\"Content-type\": [\"text/html; charset=UNKNOWN\"]},\n             body=b\"\\xc2\\xa3\",\n         )\n-        self.assertEqual(r._declared_encoding(), None)\n+        assert r._declared_encoding() is None\n         self._assert_response_values(r, \"utf-8\", \"\\xa3\")\n \n     def test_utf16(self):\n@@ -511,14 +504,11 @@ class TextResponseTest(BaseResponseTest):\n             headers={\"Content-type\": [\"text/html; charset=utf-8\"]},\n             body=b\"\\xef\\xbb\\xbfWORD\\xe3\\xab\",\n         )\n-        self.assertEqual(r6.encoding, \"utf-8\")\n-        self.assertIn(\n-            r6.text,\n-            {\n+        assert r6.encoding == \"utf-8\"\n+        assert r6.text in {\n             \"WORD\\ufffd\\ufffd\",  # w3lib < 1.19.0\n             \"WORD\\ufffd\",  # w3lib >= 1.19.0\n-            },\n-        )\n+        }\n \n     def test_bom_is_removed_from_body(self):\n         # Inferring encoding from body also cache decoded body as sideeffect,\n@@ -532,21 +522,21 @@ class TextResponseTest(BaseResponseTest):\n \n         # Test response without content-type and BOM encoding\n         response = self.response_class(url, body=body)\n-        self.assertEqual(response.encoding, \"utf-8\")\n-        self.assertEqual(response.text, \"WORD\")\n+        assert response.encoding == \"utf-8\"\n+        assert response.text == \"WORD\"\n         response = self.response_class(url, body=body)\n-        self.assertEqual(response.text, \"WORD\")\n-        self.assertEqual(response.encoding, \"utf-8\")\n+        assert response.text == \"WORD\"\n+        assert response.encoding == \"utf-8\"\n \n         # Body caching sideeffect isn't triggered when encoding is declared in\n         # content-type header but BOM still need to be removed from decoded\n         # body\n         response = self.response_class(url, headers=headers, body=body)\n-        self.assertEqual(response.encoding, \"utf-8\")\n-        self.assertEqual(response.text, \"WORD\")\n+        assert response.encoding == \"utf-8\"\n+        assert response.text == \"WORD\"\n         response = self.response_class(url, headers=headers, body=body)\n-        self.assertEqual(response.text, \"WORD\")\n-        self.assertEqual(response.encoding, \"utf-8\")\n+        assert response.text == \"WORD\"\n+        assert response.encoding == \"utf-8\"\n \n     def test_replace_wrong_encoding(self):\n         \"\"\"Test invalid chars are replaced properly\"\"\"\n@@ -577,49 +567,47 @@ class TextResponseTest(BaseResponseTest):\n         body = b\"<html><head><title>Some page</title><body></body></html>\"\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertIsInstance(response.selector, Selector)\n-        self.assertEqual(response.selector.type, \"html\")\n-        self.assertIs(response.selector, response.selector)  # property is cached\n-        self.assertIs(response.selector.response, response)\n+        assert isinstance(response.selector, Selector)\n+        assert response.selector.type == \"html\"\n+        assert response.selector is response.selector  # property is cached\n+        assert response.selector.response is response\n \n-        self.assertEqual(\n-            response.selector.xpath(\"//title/text()\").getall(), [\"Some page\"]\n-        )\n-        self.assertEqual(response.selector.css(\"title::text\").getall(), [\"Some page\"])\n-        self.assertEqual(response.selector.re(\"Some (.*)</title>\"), [\"page\"])\n+        assert response.selector.xpath(\"//title/text()\").getall() == [\"Some page\"]\n+        assert response.selector.css(\"title::text\").getall() == [\"Some page\"]\n+        assert response.selector.re(\"Some (.*)</title>\") == [\"page\"]\n \n     def test_selector_shortcuts(self):\n         body = b\"<html><head><title>Some page</title><body></body></html>\"\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertEqual(\n-            response.xpath(\"//title/text()\").getall(),\n-            response.selector.xpath(\"//title/text()\").getall(),\n+        assert (\n+            response.xpath(\"//title/text()\").getall()\n+            == response.selector.xpath(\"//title/text()\").getall()\n         )\n-        self.assertEqual(\n-            response.css(\"title::text\").getall(),\n-            response.selector.css(\"title::text\").getall(),\n+        assert (\n+            response.css(\"title::text\").getall()\n+            == response.selector.css(\"title::text\").getall()\n         )\n \n     def test_selector_shortcuts_kwargs(self):\n         body = b'<html><head><title>Some page</title><body><p class=\"content\">A nice paragraph.</p></body></html>'\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertEqual(\n+        assert (\n             response.xpath(\n                 \"normalize-space(//p[@class=$pclass])\", pclass=\"content\"\n-            ).getall(),\n-            response.xpath('normalize-space(//p[@class=\"content\"])').getall(),\n+            ).getall()\n+            == response.xpath('normalize-space(//p[@class=\"content\"])').getall()\n         )\n-        self.assertEqual(\n+        assert (\n             response.xpath(\n                 \"//title[count(following::p[@class=$pclass])=$pcount]/text()\",\n                 pclass=\"content\",\n                 pcount=1,\n-            ).getall(),\n-            response.xpath(\n+            ).getall()\n+            == response.xpath(\n                 '//title[count(following::p[@class=\"content\"])=1]/text()'\n-            ).getall(),\n+            ).getall()\n         )\n \n     def test_urljoin_with_base_url(self):\n@@ -629,21 +617,21 @@ class TextResponseTest(BaseResponseTest):\n             \"/test\"\n         )\n         absolute = \"https://example.net/test\"\n-        self.assertEqual(joined, absolute)\n+        assert joined == absolute\n \n         body = b'<html><body><base href=\"/elsewhere\"></body></html>'\n         joined = self.response_class(\"http://www.example.com\", body=body).urljoin(\n             \"test\"\n         )\n         absolute = \"http://www.example.com/test\"\n-        self.assertEqual(joined, absolute)\n+        assert joined == absolute\n \n         body = b'<html><body><base href=\"/elsewhere/\"></body></html>'\n         joined = self.response_class(\"http://www.example.com\", body=body).urljoin(\n             \"test\"\n         )\n         absolute = \"http://www.example.com/elsewhere/test\"\n-        self.assertEqual(joined, absolute)\n+        assert joined == absolute\n \n     def test_follow_selector(self):\n         resp = self._links_response()\n@@ -728,7 +716,7 @@ class TextResponseTest(BaseResponseTest):\n             \"http://example.com/foo?%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\",\n             response=resp1,\n         )\n-        self.assertEqual(req.encoding, \"utf8\")\n+        assert req.encoding == \"utf8\"\n \n         resp2 = self.response_class(\n             \"http://example.com\",\n@@ -742,12 +730,12 @@ class TextResponseTest(BaseResponseTest):\n             \"http://example.com/foo?%EF%F0%E8%E2%E5%F2\",\n             response=resp2,\n         )\n-        self.assertEqual(req.encoding, \"cp1251\")\n+        assert req.encoding == \"cp1251\"\n \n     def test_follow_flags(self):\n         res = self.response_class(\"http://example.com/\")\n         fol = res.follow(\"http://example.com/\", flags=[\"cached\", \"allowed\"])\n-        self.assertEqual(fol.flags, [\"cached\", \"allowed\"])\n+        assert fol.flags == [\"cached\", \"allowed\"]\n \n     def test_follow_all_flags(self):\n         re = self.response_class(\"http://www.example.com/\")\n@@ -758,7 +746,7 @@ class TextResponseTest(BaseResponseTest):\n         ]\n         fol = re.follow_all(urls, flags=[\"cached\", \"allowed\"])\n         for req in fol:\n-            self.assertEqual(req.flags, [\"cached\", \"allowed\"])\n+            assert req.flags == [\"cached\", \"allowed\"]\n \n     def test_follow_all_css(self):\n         expected = [\n@@ -767,7 +755,7 @@ class TextResponseTest(BaseResponseTest):\n         ]\n         response = self._links_response()\n         extracted = [r.url for r in response.follow_all(css='a[href*=\"example.com\"]')]\n-        self.assertEqual(expected, extracted)\n+        assert expected == extracted\n \n     def test_follow_all_css_skip_invalid(self):\n         expected = [\n@@ -777,9 +765,9 @@ class TextResponseTest(BaseResponseTest):\n         ]\n         response = self._links_response_no_href()\n         extracted1 = [r.url for r in response.follow_all(css=\".pagination a\")]\n-        self.assertEqual(expected, extracted1)\n+        assert expected == extracted1\n         extracted2 = [r.url for r in response.follow_all(response.css(\".pagination a\"))]\n-        self.assertEqual(expected, extracted2)\n+        assert expected == extracted2\n \n     def test_follow_all_xpath(self):\n         expected = [\n@@ -788,7 +776,7 @@ class TextResponseTest(BaseResponseTest):\n         ]\n         response = self._links_response()\n         extracted = response.follow_all(xpath='//a[contains(@href, \"example.com\")]')\n-        self.assertEqual(expected, [r.url for r in extracted])\n+        assert expected == [r.url for r in extracted]\n \n     def test_follow_all_xpath_skip_invalid(self):\n         expected = [\n@@ -800,12 +788,12 @@ class TextResponseTest(BaseResponseTest):\n         extracted1 = [\n             r.url for r in response.follow_all(xpath='//div[@id=\"pagination\"]/a')\n         ]\n-        self.assertEqual(expected, extracted1)\n+        assert expected == extracted1\n         extracted2 = [\n             r.url\n             for r in response.follow_all(response.xpath('//div[@id=\"pagination\"]/a'))\n         ]\n-        self.assertEqual(expected, extracted2)\n+        assert expected == extracted2\n \n     def test_follow_all_too_many_arguments(self):\n         response = self._links_response()\n@@ -820,7 +808,7 @@ class TextResponseTest(BaseResponseTest):\n     def test_json_response(self):\n         json_body = b\"\"\"{\"ip\": \"109.187.217.200\"}\"\"\"\n         json_response = self.response_class(\"http://www.example.com\", body=json_body)\n-        self.assertEqual(json_response.json(), {\"ip\": \"109.187.217.200\"})\n+        assert json_response.json() == {\"ip\": \"109.187.217.200\"}\n \n         text_body = b\"\"\"<html><body>text</body></html>\"\"\"\n         text_response = self.response_class(\"http://www.example.com\", body=text_body)\n@@ -842,7 +830,7 @@ class TextResponseTest(BaseResponseTest):\n                 mock_json.assert_called_once_with(json_body)\n \n \n-class HtmlResponseTest(TextResponseTest):\n+class TestHtmlResponse(TestTextResponse):\n     response_class = HtmlResponse\n \n     def test_html_encoding(self):\n@@ -883,7 +871,7 @@ class HtmlResponseTest(TextResponseTest):\n         self._assert_response_values(r1, \"gb2312\", body)\n \n \n-class XmlResponseTest(TextResponseTest):\n+class TestXmlResponse(TestTextResponse):\n     response_class = XmlResponse\n \n     def test_xml_encoding(self):\n@@ -917,20 +905,20 @@ class XmlResponseTest(TextResponseTest):\n         body = b'<?xml version=\"1.0\" encoding=\"utf-8\"?><xml><elem>value</elem></xml>'\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertIsInstance(response.selector, Selector)\n-        self.assertEqual(response.selector.type, \"xml\")\n-        self.assertIs(response.selector, response.selector)  # property is cached\n-        self.assertIs(response.selector.response, response)\n+        assert isinstance(response.selector, Selector)\n+        assert response.selector.type == \"xml\"\n+        assert response.selector is response.selector  # property is cached\n+        assert response.selector.response is response\n \n-        self.assertEqual(response.selector.xpath(\"//elem/text()\").getall(), [\"value\"])\n+        assert response.selector.xpath(\"//elem/text()\").getall() == [\"value\"]\n \n     def test_selector_shortcuts(self):\n         body = b'<?xml version=\"1.0\" encoding=\"utf-8\"?><xml><elem>value</elem></xml>'\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertEqual(\n-            response.xpath(\"//elem/text()\").getall(),\n-            response.selector.xpath(\"//elem/text()\").getall(),\n+        assert (\n+            response.xpath(\"//elem/text()\").getall()\n+            == response.selector.xpath(\"//elem/text()\").getall()\n         )\n \n     def test_selector_shortcuts_kwargs(self):\n@@ -940,21 +928,21 @@ class XmlResponseTest(TextResponseTest):\n         </xml>\"\"\"\n         response = self.response_class(\"http://www.example.com\", body=body)\n \n-        self.assertEqual(\n+        assert (\n             response.xpath(\n                 \"//s:elem/text()\", namespaces={\"s\": \"http://scrapy.org\"}\n-            ).getall(),\n-            response.selector.xpath(\n+            ).getall()\n+            == response.selector.xpath(\n                 \"//s:elem/text()\", namespaces={\"s\": \"http://scrapy.org\"}\n-            ).getall(),\n+            ).getall()\n         )\n \n         response.selector.register_namespace(\"s2\", \"http://scrapy.org\")\n-        self.assertEqual(\n+        assert (\n             response.xpath(\n                 \"//s1:elem/text()\", namespaces={\"s1\": \"http://scrapy.org\"}\n-            ).getall(),\n-            response.selector.xpath(\"//s2:elem/text()\").getall(),\n+            ).getall()\n+            == response.selector.xpath(\"//s2:elem/text()\").getall()\n         )\n \n \n@@ -968,7 +956,7 @@ class CustomResponse(TextResponse):\n         super().__init__(*args, **kwargs)\n \n \n-class CustomResponseTest(TextResponseTest):\n+class TestCustomResponse(TestTextResponse):\n     response_class = CustomResponse\n \n     def test_copy(self):\n@@ -981,11 +969,11 @@ class CustomResponseTest(TextResponseTest):\n             lost=\"lost\",\n         )\n         r2 = r1.copy()\n-        self.assertIsInstance(r2, self.response_class)\n-        self.assertEqual(r1.foo, r2.foo)\n-        self.assertEqual(r1.bar, r2.bar)\n-        self.assertEqual(r1.lost, \"lost\")\n-        self.assertIsNone(r2.lost)\n+        assert isinstance(r2, self.response_class)\n+        assert r1.foo == r2.foo\n+        assert r1.bar == r2.bar\n+        assert r1.lost == \"lost\"\n+        assert r2.lost is None\n \n     def test_replace(self):\n         super().test_replace()\n@@ -998,31 +986,31 @@ class CustomResponseTest(TextResponseTest):\n         )\n \n         r2 = r1.replace(foo=\"new-foo\", bar=\"new-bar\", lost=\"new-lost\")\n-        self.assertIsInstance(r2, self.response_class)\n-        self.assertEqual(r1.foo, \"foo\")\n-        self.assertEqual(r1.bar, \"bar\")\n-        self.assertEqual(r1.lost, \"lost\")\n-        self.assertEqual(r2.foo, \"new-foo\")\n-        self.assertEqual(r2.bar, \"new-bar\")\n-        self.assertEqual(r2.lost, \"new-lost\")\n+        assert isinstance(r2, self.response_class)\n+        assert r1.foo == \"foo\"\n+        assert r1.bar == \"bar\"\n+        assert r1.lost == \"lost\"\n+        assert r2.foo == \"new-foo\"\n+        assert r2.bar == \"new-bar\"\n+        assert r2.lost == \"new-lost\"\n \n         r3 = r1.replace(foo=\"new-foo\", bar=\"new-bar\")\n-        self.assertIsInstance(r3, self.response_class)\n-        self.assertEqual(r1.foo, \"foo\")\n-        self.assertEqual(r1.bar, \"bar\")\n-        self.assertEqual(r1.lost, \"lost\")\n-        self.assertEqual(r3.foo, \"new-foo\")\n-        self.assertEqual(r3.bar, \"new-bar\")\n-        self.assertIsNone(r3.lost)\n+        assert isinstance(r3, self.response_class)\n+        assert r1.foo == \"foo\"\n+        assert r1.bar == \"bar\"\n+        assert r1.lost == \"lost\"\n+        assert r3.foo == \"new-foo\"\n+        assert r3.bar == \"new-bar\"\n+        assert r3.lost is None\n \n         r4 = r1.replace(foo=\"new-foo\")\n-        self.assertIsInstance(r4, self.response_class)\n-        self.assertEqual(r1.foo, \"foo\")\n-        self.assertEqual(r1.bar, \"bar\")\n-        self.assertEqual(r1.lost, \"lost\")\n-        self.assertEqual(r4.foo, \"new-foo\")\n-        self.assertEqual(r4.bar, \"bar\")\n-        self.assertIsNone(r4.lost)\n+        assert isinstance(r4, self.response_class)\n+        assert r1.foo == \"foo\"\n+        assert r1.bar == \"bar\"\n+        assert r1.lost == \"lost\"\n+        assert r4.foo == \"new-foo\"\n+        assert r4.bar == \"bar\"\n+        assert r4.lost is None\n \n         with pytest.raises(\n             TypeError,\n\n@@ -1,7 +1,6 @@\n from __future__ import annotations\n \n import dataclasses\n-import unittest\n \n import attr\n import pytest\n@@ -67,7 +66,7 @@ def processor_with_args(value, other=None, loader_context=None):\n     return value\n \n \n-class BasicItemLoaderTest(unittest.TestCase):\n+class TestBasicItemLoader:\n     def test_add_value_on_unknown_field(self):\n         il = ProcessorItemLoader()\n         with pytest.raises(KeyError):\n@@ -80,14 +79,14 @@ class BasicItemLoaderTest(unittest.TestCase):\n         il.add_value(\"name\", \"marta\")\n         item = il.load_item()\n         assert item is i\n-        self.assertEqual(item[\"summary\"], [\"lala\"])\n-        self.assertEqual(item[\"name\"], [\"marta\"])\n+        assert item[\"summary\"] == [\"lala\"]\n+        assert item[\"name\"] == [\"marta\"]\n \n     def test_load_item_using_custom_loader(self):\n         il = ProcessorItemLoader()\n         il.add_value(\"name\", \"marta\")\n         item = il.load_item()\n-        self.assertEqual(item[\"name\"], [\"Marta\"])\n+        assert item[\"name\"] == [\"Marta\"]\n \n \n class InitializationTestMixin:\n@@ -98,16 +97,16 @@ class InitializationTestMixin:\n         input_item = self.item_class(name=\"foo\")\n         il = ItemLoader(item=input_item)\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\"]})\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\"]}\n \n     def test_keep_list(self):\n         \"\"\"Loaded item should contain values from the initial item\"\"\"\n         input_item = self.item_class(name=[\"foo\", \"bar\"])\n         il = ItemLoader(item=input_item)\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\", \"bar\"]})\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\", \"bar\"]}\n \n     def test_add_value_singlevalue_singlevalue(self):\n         \"\"\"Values added after initialization should be appended\"\"\"\n@@ -115,8 +114,8 @@ class InitializationTestMixin:\n         il = ItemLoader(item=input_item)\n         il.add_value(\"name\", \"bar\")\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\", \"bar\"]})\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\", \"bar\"]}\n \n     def test_add_value_singlevalue_list(self):\n         \"\"\"Values added after initialization should be appended\"\"\"\n@@ -124,10 +123,8 @@ class InitializationTestMixin:\n         il = ItemLoader(item=input_item)\n         il.add_value(\"name\", [\"item\", \"loader\"])\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(\n-            ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\", \"item\", \"loader\"]}\n-        )\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\", \"item\", \"loader\"]}\n \n     def test_add_value_list_singlevalue(self):\n         \"\"\"Values added after initialization should be appended\"\"\"\n@@ -135,10 +132,8 @@ class InitializationTestMixin:\n         il = ItemLoader(item=input_item)\n         il.add_value(\"name\", \"qwerty\")\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(\n-            ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\", \"bar\", \"qwerty\"]}\n-        )\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\", \"bar\", \"qwerty\"]}\n \n     def test_add_value_list_list(self):\n         \"\"\"Values added after initialization should be appended\"\"\"\n@@ -146,56 +141,55 @@ class InitializationTestMixin:\n         il = ItemLoader(item=input_item)\n         il.add_value(\"name\", [\"item\", \"loader\"])\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(\n-            ItemAdapter(loaded_item).asdict(),\n-            {\"name\": [\"foo\", \"bar\", \"item\", \"loader\"]},\n-        )\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\n+            \"name\": [\"foo\", \"bar\", \"item\", \"loader\"]\n+        }\n \n     def test_get_output_value_singlevalue(self):\n         \"\"\"Getting output value must not remove value from item\"\"\"\n         input_item = self.item_class(name=\"foo\")\n         il = ItemLoader(item=input_item)\n-        self.assertEqual(il.get_output_value(\"name\"), [\"foo\"])\n+        assert il.get_output_value(\"name\") == [\"foo\"]\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\"]})\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\"]}\n \n     def test_get_output_value_list(self):\n         \"\"\"Getting output value must not remove value from item\"\"\"\n         input_item = self.item_class(name=[\"foo\", \"bar\"])\n         il = ItemLoader(item=input_item)\n-        self.assertEqual(il.get_output_value(\"name\"), [\"foo\", \"bar\"])\n+        assert il.get_output_value(\"name\") == [\"foo\", \"bar\"]\n         loaded_item = il.load_item()\n-        self.assertIsInstance(loaded_item, self.item_class)\n-        self.assertEqual(ItemAdapter(loaded_item).asdict(), {\"name\": [\"foo\", \"bar\"]})\n+        assert isinstance(loaded_item, self.item_class)\n+        assert ItemAdapter(loaded_item).asdict() == {\"name\": [\"foo\", \"bar\"]}\n \n     def test_values_single(self):\n         \"\"\"Values from initial item must be added to loader._values\"\"\"\n         input_item = self.item_class(name=\"foo\")\n         il = ItemLoader(item=input_item)\n-        self.assertEqual(il._values.get(\"name\"), [\"foo\"])\n+        assert il._values.get(\"name\") == [\"foo\"]\n \n     def test_values_list(self):\n         \"\"\"Values from initial item must be added to loader._values\"\"\"\n         input_item = self.item_class(name=[\"foo\", \"bar\"])\n         il = ItemLoader(item=input_item)\n-        self.assertEqual(il._values.get(\"name\"), [\"foo\", \"bar\"])\n+        assert il._values.get(\"name\") == [\"foo\", \"bar\"]\n \n \n-class InitializationFromDictTest(InitializationTestMixin, unittest.TestCase):\n+class TestInitializationFromDict(InitializationTestMixin):\n     item_class = dict\n \n \n-class InitializationFromItemTest(InitializationTestMixin, unittest.TestCase):\n+class TestInitializationFromItem(InitializationTestMixin):\n     item_class = NameItem\n \n \n-class InitializationFromAttrsItemTest(InitializationTestMixin, unittest.TestCase):\n+class TestInitializationFromAttrsItem(InitializationTestMixin):\n     item_class = AttrsNameItem\n \n \n-class InitializationFromDataClassTest(InitializationTestMixin, unittest.TestCase):\n+class TestInitializationFromDataClass(InitializationTestMixin):\n     item_class = NameDataClass\n \n \n@@ -212,7 +206,7 @@ class NoInputReprocessingItemLoader(BaseNoInputReprocessingLoader):\n     default_item_class = NoInputReprocessingItem\n \n \n-class NoInputReprocessingFromItemTest(unittest.TestCase):\n+class TestNoInputReprocessingFromItem:\n     \"\"\"\n     Loaders initialized from loaded items must not reprocess fields (Item instances)\n     \"\"\"\n@@ -220,41 +214,41 @@ class NoInputReprocessingFromItemTest(unittest.TestCase):\n     def test_avoid_reprocessing_with_initial_values_single(self):\n         il = NoInputReprocessingItemLoader(item=NoInputReprocessingItem(title=\"foo\"))\n         il_loaded = il.load_item()\n-        self.assertEqual(il_loaded, {\"title\": \"foo\"})\n-        self.assertEqual(\n-            NoInputReprocessingItemLoader(item=il_loaded).load_item(), {\"title\": \"foo\"}\n-        )\n+        assert il_loaded == {\"title\": \"foo\"}\n+        assert NoInputReprocessingItemLoader(item=il_loaded).load_item() == {\n+            \"title\": \"foo\"\n+        }\n \n     def test_avoid_reprocessing_with_initial_values_list(self):\n         il = NoInputReprocessingItemLoader(\n             item=NoInputReprocessingItem(title=[\"foo\", \"bar\"])\n         )\n         il_loaded = il.load_item()\n-        self.assertEqual(il_loaded, {\"title\": \"foo\"})\n-        self.assertEqual(\n-            NoInputReprocessingItemLoader(item=il_loaded).load_item(), {\"title\": \"foo\"}\n-        )\n+        assert il_loaded == {\"title\": \"foo\"}\n+        assert NoInputReprocessingItemLoader(item=il_loaded).load_item() == {\n+            \"title\": \"foo\"\n+        }\n \n     def test_avoid_reprocessing_without_initial_values_single(self):\n         il = NoInputReprocessingItemLoader()\n         il.add_value(\"title\", \"FOO\")\n         il_loaded = il.load_item()\n-        self.assertEqual(il_loaded, {\"title\": \"FOO\"})\n-        self.assertEqual(\n-            NoInputReprocessingItemLoader(item=il_loaded).load_item(), {\"title\": \"FOO\"}\n-        )\n+        assert il_loaded == {\"title\": \"FOO\"}\n+        assert NoInputReprocessingItemLoader(item=il_loaded).load_item() == {\n+            \"title\": \"FOO\"\n+        }\n \n     def test_avoid_reprocessing_without_initial_values_list(self):\n         il = NoInputReprocessingItemLoader()\n         il.add_value(\"title\", [\"foo\", \"bar\"])\n         il_loaded = il.load_item()\n-        self.assertEqual(il_loaded, {\"title\": \"FOO\"})\n-        self.assertEqual(\n-            NoInputReprocessingItemLoader(item=il_loaded).load_item(), {\"title\": \"FOO\"}\n-        )\n+        assert il_loaded == {\"title\": \"FOO\"}\n+        assert NoInputReprocessingItemLoader(item=il_loaded).load_item() == {\n+            \"title\": \"FOO\"\n+        }\n \n \n-class TestOutputProcessorItem(unittest.TestCase):\n+class TestOutputProcessorItem:\n     def test_output_processor(self):\n         class TempItem(Item):\n             temp = Field()\n@@ -270,11 +264,11 @@ class TestOutputProcessorItem(unittest.TestCase):\n \n         loader = TempLoader()\n         item = loader.load_item()\n-        self.assertIsInstance(item, TempItem)\n-        self.assertEqual(dict(item), {\"temp\": 0.3})\n+        assert isinstance(item, TempItem)\n+        assert dict(item) == {\"temp\": 0.3}\n \n \n-class SelectortemLoaderTest(unittest.TestCase):\n+class TestSelectortemLoader:\n     response = HtmlResponse(\n         url=\"\",\n         encoding=\"utf-8\",\n@@ -292,7 +286,7 @@ class SelectortemLoaderTest(unittest.TestCase):\n \n     def test_init_method(self):\n         l = ProcessorItemLoader()\n-        self.assertEqual(l.selector, None)\n+        assert l.selector is None\n \n     def test_init_method_errors(self):\n         l = ProcessorItemLoader()\n@@ -312,150 +306,149 @@ class SelectortemLoaderTest(unittest.TestCase):\n     def test_init_method_with_selector(self):\n         sel = Selector(text=\"<html><body><div>marta</div></body></html>\")\n         l = ProcessorItemLoader(selector=sel)\n-        self.assertIs(l.selector, sel)\n+        assert l.selector is sel\n \n         l.add_xpath(\"name\", \"//div/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n \n     def test_init_method_with_selector_css(self):\n         sel = Selector(text=\"<html><body><div>marta</div></body></html>\")\n         l = ProcessorItemLoader(selector=sel)\n-        self.assertIs(l.selector, sel)\n+        assert l.selector is sel\n \n         l.add_css(\"name\", \"div::text\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n \n     def test_init_method_with_base_response(self):\n         \"\"\"Selector should be None after initialization\"\"\"\n         response = Response(\"https://scrapy.org\")\n         l = ProcessorItemLoader(response=response)\n-        self.assertIs(l.selector, None)\n+        assert l.selector is None\n \n     def test_init_method_with_response(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n \n         l.add_xpath(\"name\", \"//div/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n \n     def test_init_method_with_response_css(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n \n         l.add_css(\"name\", \"div::text\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n \n         l.add_css(\"url\", \"a::attr(href)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"http://www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"http://www.scrapy.org\"]\n \n         # combining/accumulating CSS selectors and XPath expressions\n         l.add_xpath(\"name\", \"//div/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\", \"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\", \"Marta\"]\n \n         l.add_xpath(\"url\", \"//img/@src\")\n-        self.assertEqual(\n-            l.get_output_value(\"url\"), [\"http://www.scrapy.org\", \"/images/logo.png\"]\n-        )\n+        assert l.get_output_value(\"url\") == [\n+            \"http://www.scrapy.org\",\n+            \"/images/logo.png\",\n+        ]\n \n     def test_add_xpath_re(self):\n         l = ProcessorItemLoader(response=self.response)\n         l.add_xpath(\"name\", \"//div/text()\", re=\"ma\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Ma\"])\n+        assert l.get_output_value(\"name\") == [\"Ma\"]\n \n     def test_replace_xpath(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n         l.add_xpath(\"name\", \"//div/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n         l.replace_xpath(\"name\", \"//p/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\"]\n \n         l.replace_xpath(\"name\", [\"//p/text()\", \"//div/text()\"])\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\", \"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\", \"Marta\"]\n \n     def test_get_xpath(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertEqual(l.get_xpath(\"//p/text()\"), [\"paragraph\"])\n-        self.assertEqual(l.get_xpath(\"//p/text()\", TakeFirst()), \"paragraph\")\n-        self.assertEqual(l.get_xpath(\"//p/text()\", TakeFirst(), re=\"pa\"), \"pa\")\n+        assert l.get_xpath(\"//p/text()\") == [\"paragraph\"]\n+        assert l.get_xpath(\"//p/text()\", TakeFirst()) == \"paragraph\"\n+        assert l.get_xpath(\"//p/text()\", TakeFirst(), re=\"pa\") == \"pa\"\n \n-        self.assertEqual(\n-            l.get_xpath([\"//p/text()\", \"//div/text()\"]), [\"paragraph\", \"marta\"]\n-        )\n+        assert l.get_xpath([\"//p/text()\", \"//div/text()\"]) == [\"paragraph\", \"marta\"]\n \n     def test_replace_xpath_multi_fields(self):\n         l = ProcessorItemLoader(response=self.response)\n         l.add_xpath(None, \"//div/text()\", TakeFirst(), lambda x: {\"name\": x})\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n         l.replace_xpath(None, \"//p/text()\", TakeFirst(), lambda x: {\"name\": x})\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\"]\n \n     def test_replace_xpath_re(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n         l.add_xpath(\"name\", \"//div/text()\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n         l.replace_xpath(\"name\", \"//div/text()\", re=\"ma\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Ma\"])\n+        assert l.get_output_value(\"name\") == [\"Ma\"]\n \n     def test_add_css_re(self):\n         l = ProcessorItemLoader(response=self.response)\n         l.add_css(\"name\", \"div::text\", re=\"ma\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Ma\"])\n+        assert l.get_output_value(\"name\") == [\"Ma\"]\n \n         l.add_css(\"url\", \"a::attr(href)\", re=\"http://(.+)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"www.scrapy.org\"]\n \n     def test_replace_css(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n         l.add_css(\"name\", \"div::text\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n         l.replace_css(\"name\", \"p::text\")\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\"]\n \n         l.replace_css(\"name\", [\"p::text\", \"div::text\"])\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\", \"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\", \"Marta\"]\n \n         l.add_css(\"url\", \"a::attr(href)\", re=\"http://(.+)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"www.scrapy.org\"]\n         l.replace_css(\"url\", \"img::attr(src)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"/images/logo.png\"])\n+        assert l.get_output_value(\"url\") == [\"/images/logo.png\"]\n \n     def test_get_css(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertEqual(l.get_css(\"p::text\"), [\"paragraph\"])\n-        self.assertEqual(l.get_css(\"p::text\", TakeFirst()), \"paragraph\")\n-        self.assertEqual(l.get_css(\"p::text\", TakeFirst(), re=\"pa\"), \"pa\")\n+        assert l.get_css(\"p::text\") == [\"paragraph\"]\n+        assert l.get_css(\"p::text\", TakeFirst()) == \"paragraph\"\n+        assert l.get_css(\"p::text\", TakeFirst(), re=\"pa\") == \"pa\"\n \n-        self.assertEqual(l.get_css([\"p::text\", \"div::text\"]), [\"paragraph\", \"marta\"])\n-        self.assertEqual(\n-            l.get_css([\"a::attr(href)\", \"img::attr(src)\"]),\n-            [\"http://www.scrapy.org\", \"/images/logo.png\"],\n-        )\n+        assert l.get_css([\"p::text\", \"div::text\"]) == [\"paragraph\", \"marta\"]\n+        assert l.get_css([\"a::attr(href)\", \"img::attr(src)\"]) == [\n+            \"http://www.scrapy.org\",\n+            \"/images/logo.png\",\n+        ]\n \n     def test_replace_css_multi_fields(self):\n         l = ProcessorItemLoader(response=self.response)\n         l.add_css(None, \"div::text\", TakeFirst(), lambda x: {\"name\": x})\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Marta\"])\n+        assert l.get_output_value(\"name\") == [\"Marta\"]\n         l.replace_css(None, \"p::text\", TakeFirst(), lambda x: {\"name\": x})\n-        self.assertEqual(l.get_output_value(\"name\"), [\"Paragraph\"])\n+        assert l.get_output_value(\"name\") == [\"Paragraph\"]\n \n         l.add_css(None, \"a::attr(href)\", TakeFirst(), lambda x: {\"url\": x})\n-        self.assertEqual(l.get_output_value(\"url\"), [\"http://www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"http://www.scrapy.org\"]\n         l.replace_css(None, \"img::attr(src)\", TakeFirst(), lambda x: {\"url\": x})\n-        self.assertEqual(l.get_output_value(\"url\"), [\"/images/logo.png\"])\n+        assert l.get_output_value(\"url\") == [\"/images/logo.png\"]\n \n     def test_replace_css_re(self):\n         l = ProcessorItemLoader(response=self.response)\n-        self.assertTrue(l.selector)\n+        assert l.selector\n         l.add_css(\"url\", \"a::attr(href)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"http://www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"http://www.scrapy.org\"]\n         l.replace_css(\"url\", \"a::attr(href)\", re=r\"http://www\\.(.+)\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"scrapy.org\"]\n \n \n-class SubselectorLoaderTest(unittest.TestCase):\n+class TestSubselectorLoader:\n     response = HtmlResponse(\n         url=\"\",\n         encoding=\"utf-8\",\n@@ -483,17 +476,13 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl.add_css(\"name_div\", \"#id\")\n         nl.add_value(\"name_value\", nl.selector.xpath('div[@id = \"id\"]/text()').getall())\n \n-        self.assertEqual(l.get_output_value(\"name\"), [\"marta\"])\n-        self.assertEqual(l.get_output_value(\"name_div\"), ['<div id=\"id\">marta</div>'])\n-        self.assertEqual(l.get_output_value(\"name_value\"), [\"marta\"])\n+        assert l.get_output_value(\"name\") == [\"marta\"]\n+        assert l.get_output_value(\"name_div\") == ['<div id=\"id\">marta</div>']\n+        assert l.get_output_value(\"name_value\") == [\"marta\"]\n \n-        self.assertEqual(l.get_output_value(\"name\"), nl.get_output_value(\"name\"))\n-        self.assertEqual(\n-            l.get_output_value(\"name_div\"), nl.get_output_value(\"name_div\")\n-        )\n-        self.assertEqual(\n-            l.get_output_value(\"name_value\"), nl.get_output_value(\"name_value\")\n-        )\n+        assert l.get_output_value(\"name\") == nl.get_output_value(\"name\")\n+        assert l.get_output_value(\"name_div\") == nl.get_output_value(\"name_div\")\n+        assert l.get_output_value(\"name_value\") == nl.get_output_value(\"name_value\")\n \n     def test_nested_css(self):\n         l = NestedItemLoader(response=self.response)\n@@ -502,17 +491,13 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl.add_css(\"name_div\", \"#id\")\n         nl.add_value(\"name_value\", nl.selector.xpath('div[@id = \"id\"]/text()').getall())\n \n-        self.assertEqual(l.get_output_value(\"name\"), [\"marta\"])\n-        self.assertEqual(l.get_output_value(\"name_div\"), ['<div id=\"id\">marta</div>'])\n-        self.assertEqual(l.get_output_value(\"name_value\"), [\"marta\"])\n+        assert l.get_output_value(\"name\") == [\"marta\"]\n+        assert l.get_output_value(\"name_div\") == ['<div id=\"id\">marta</div>']\n+        assert l.get_output_value(\"name_value\") == [\"marta\"]\n \n-        self.assertEqual(l.get_output_value(\"name\"), nl.get_output_value(\"name\"))\n-        self.assertEqual(\n-            l.get_output_value(\"name_div\"), nl.get_output_value(\"name_div\")\n-        )\n-        self.assertEqual(\n-            l.get_output_value(\"name_value\"), nl.get_output_value(\"name_value\")\n-        )\n+        assert l.get_output_value(\"name\") == nl.get_output_value(\"name\")\n+        assert l.get_output_value(\"name_div\") == nl.get_output_value(\"name_div\")\n+        assert l.get_output_value(\"name_value\") == nl.get_output_value(\"name_value\")\n \n     def test_nested_replace(self):\n         l = NestedItemLoader(response=self.response)\n@@ -520,11 +505,11 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl2 = nl1.nested_xpath(\"a\")\n \n         l.add_xpath(\"url\", \"//footer/a/@href\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"http://www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"http://www.scrapy.org\"]\n         nl1.replace_xpath(\"url\", \"img/@src\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"/images/logo.png\"])\n+        assert l.get_output_value(\"url\") == [\"/images/logo.png\"]\n         nl2.replace_xpath(\"url\", \"@href\")\n-        self.assertEqual(l.get_output_value(\"url\"), [\"http://www.scrapy.org\"])\n+        assert l.get_output_value(\"url\") == [\"http://www.scrapy.org\"]\n \n     def test_nested_ordering(self):\n         l = NestedItemLoader(response=self.response)\n@@ -536,15 +521,12 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl2.add_xpath(\"url\", \"text()\")\n         l.add_xpath(\"url\", \"//footer/a/@href\")\n \n-        self.assertEqual(\n-            l.get_output_value(\"url\"),\n-            [\n+        assert l.get_output_value(\"url\") == [\n             \"/images/logo.png\",\n             \"http://www.scrapy.org\",\n             \"homepage\",\n             \"http://www.scrapy.org\",\n-            ],\n-        )\n+        ]\n \n     def test_nested_load_item(self):\n         l = NestedItemLoader(response=self.response)\n@@ -561,9 +543,9 @@ class SubselectorLoaderTest(unittest.TestCase):\n         assert item is nl1.item\n         assert item is nl2.item\n \n-        self.assertEqual(item[\"name\"], [\"marta\"])\n-        self.assertEqual(item[\"url\"], [\"http://www.scrapy.org\"])\n-        self.assertEqual(item[\"image\"], [\"/images/logo.png\"])\n+        assert item[\"name\"] == [\"marta\"]\n+        assert item[\"url\"] == [\"http://www.scrapy.org\"]\n+        assert item[\"image\"] == [\"/images/logo.png\"]\n \n \n # Functions as processors\n@@ -588,9 +570,9 @@ class FunctionProcessorItemLoader(ItemLoader):\n     default_item_class = FunctionProcessorItem\n \n \n-class FunctionProcessorTestCase(unittest.TestCase):\n+class TestFunctionProcessor:\n     def test_processor_defined_in_item(self):\n         lo = FunctionProcessorItemLoader()\n         lo.add_value(\"foo\", \"  bar  \")\n         lo.add_value(\"foo\", [\"  asdf  \", \"  qwerty  \"])\n-        self.assertEqual(dict(lo.load_item()), {\"foo\": [\"BAR\", \"ASDF\", \"QWERTY\"]})\n+        assert dict(lo.load_item()) == {\"foo\": [\"BAR\", \"ASDF\", \"QWERTY\"]}\n\n@@ -1,4 +1,6 @@\n-import unittest\n+# pylint: disable=unsubscriptable-object,unsupported-membership-test,use-implicit-booleaness-not-comparison\n+# (too many false positives)\n+\n from unittest import mock\n \n import pytest\n@@ -14,31 +16,31 @@ from scrapy.settings import (\n from . import default_settings\n \n \n-class SettingsGlobalFuncsTest(unittest.TestCase):\n+class TestSettingsGlobalFuncs:\n     def test_get_settings_priority(self):\n         for prio_str, prio_num in SETTINGS_PRIORITIES.items():\n-            self.assertEqual(get_settings_priority(prio_str), prio_num)\n-        self.assertEqual(get_settings_priority(99), 99)\n+            assert get_settings_priority(prio_str) == prio_num\n+        assert get_settings_priority(99) == 99\n \n \n-class SettingsAttributeTest(unittest.TestCase):\n-    def setUp(self):\n+class TestSettingsAttribute:\n+    def setup_method(self):\n         self.attribute = SettingsAttribute(\"value\", 10)\n \n     def test_set_greater_priority(self):\n         self.attribute.set(\"value2\", 20)\n-        self.assertEqual(self.attribute.value, \"value2\")\n-        self.assertEqual(self.attribute.priority, 20)\n+        assert self.attribute.value == \"value2\"\n+        assert self.attribute.priority == 20\n \n     def test_set_equal_priority(self):\n         self.attribute.set(\"value2\", 10)\n-        self.assertEqual(self.attribute.value, \"value2\")\n-        self.assertEqual(self.attribute.priority, 10)\n+        assert self.attribute.value == \"value2\"\n+        assert self.attribute.priority == 10\n \n     def test_set_less_priority(self):\n         self.attribute.set(\"value2\", 0)\n-        self.assertEqual(self.attribute.value, \"value\")\n-        self.assertEqual(self.attribute.priority, 10)\n+        assert self.attribute.value == \"value\"\n+        assert self.attribute.priority == 10\n \n     def test_overwrite_basesettings(self):\n         original_dict = {\"one\": 10, \"two\": 20}\n@@ -47,61 +49,59 @@ class SettingsAttributeTest(unittest.TestCase):\n \n         new_dict = {\"three\": 11, \"four\": 21}\n         attribute.set(new_dict, 10)\n-        self.assertIsInstance(attribute.value, BaseSettings)\n-        self.assertCountEqual(attribute.value, new_dict)\n-        self.assertCountEqual(original_settings, original_dict)\n+        assert isinstance(attribute.value, BaseSettings)\n+        assert set(attribute.value) == set(new_dict)\n+        assert set(original_settings) == set(original_dict)\n \n         new_settings = BaseSettings({\"five\": 12}, 0)\n         attribute.set(new_settings, 0)  # Insufficient priority\n-        self.assertCountEqual(attribute.value, new_dict)\n+        assert set(attribute.value) == set(new_dict)\n         attribute.set(new_settings, 10)\n-        self.assertCountEqual(attribute.value, new_settings)\n+        assert set(attribute.value) == set(new_settings)\n \n     def test_repr(self):\n-        self.assertEqual(\n-            repr(self.attribute), \"<SettingsAttribute value='value' priority=10>\"\n-        )\n+        assert repr(self.attribute) == \"<SettingsAttribute value='value' priority=10>\"\n \n \n-class BaseSettingsTest(unittest.TestCase):\n-    def setUp(self):\n+class TestBaseSettings:\n+    def setup_method(self):\n         self.settings = BaseSettings()\n \n     def test_setdefault_not_existing_value(self):\n         settings = BaseSettings()\n         value = settings.setdefault(\"TEST_OPTION\", \"value\")\n-        self.assertEqual(settings[\"TEST_OPTION\"], \"value\")\n-        self.assertEqual(value, \"value\")\n-        self.assertIsNotNone(value)\n+        assert settings[\"TEST_OPTION\"] == \"value\"\n+        assert value == \"value\"\n+        assert value is not None\n \n     def test_setdefault_existing_value(self):\n         settings = BaseSettings({\"TEST_OPTION\": \"value\"})\n         value = settings.setdefault(\"TEST_OPTION\", None)\n-        self.assertEqual(settings[\"TEST_OPTION\"], \"value\")\n-        self.assertEqual(value, \"value\")\n+        assert settings[\"TEST_OPTION\"] == \"value\"\n+        assert value == \"value\"\n \n     def test_set_new_attribute(self):\n         self.settings.set(\"TEST_OPTION\", \"value\", 0)\n-        self.assertIn(\"TEST_OPTION\", self.settings.attributes)\n+        assert \"TEST_OPTION\" in self.settings.attributes\n \n         attr = self.settings.attributes[\"TEST_OPTION\"]\n-        self.assertIsInstance(attr, SettingsAttribute)\n-        self.assertEqual(attr.value, \"value\")\n-        self.assertEqual(attr.priority, 0)\n+        assert isinstance(attr, SettingsAttribute)\n+        assert attr.value == \"value\"\n+        assert attr.priority == 0\n \n     def test_set_settingsattribute(self):\n         myattr = SettingsAttribute(0, 30)  # Note priority 30\n         self.settings.set(\"TEST_ATTR\", myattr, 10)\n-        self.assertEqual(self.settings.get(\"TEST_ATTR\"), 0)\n-        self.assertEqual(self.settings.getpriority(\"TEST_ATTR\"), 30)\n+        assert self.settings.get(\"TEST_ATTR\") == 0\n+        assert self.settings.getpriority(\"TEST_ATTR\") == 30\n \n     def test_set_instance_identity_on_update(self):\n         attr = SettingsAttribute(\"value\", 0)\n         self.settings.attributes = {\"TEST_OPTION\": attr}\n         self.settings.set(\"TEST_OPTION\", \"othervalue\", 10)\n \n-        self.assertIn(\"TEST_OPTION\", self.settings.attributes)\n-        self.assertIs(attr, self.settings.attributes[\"TEST_OPTION\"])\n+        assert \"TEST_OPTION\" in self.settings.attributes\n+        assert attr is self.settings.attributes[\"TEST_OPTION\"]\n \n     def test_set_calls_settings_attributes_methods_on_update(self):\n         attr = SettingsAttribute(\"value\", 10)\n@@ -114,7 +114,7 @@ class BaseSettingsTest(unittest.TestCase):\n             for priority in (0, 10, 20):\n                 self.settings.set(\"TEST_OPTION\", \"othervalue\", priority)\n                 mock_set.assert_called_once_with(\"othervalue\", priority)\n-                self.assertFalse(mock_setattr.called)\n+                assert not mock_setattr.called\n                 mock_set.reset_mock()\n                 mock_setattr.reset_mock()\n \n@@ -122,19 +122,19 @@ class BaseSettingsTest(unittest.TestCase):\n         settings = BaseSettings()\n         settings.set(\"key\", \"a\", \"default\")\n         settings[\"key\"] = \"b\"\n-        self.assertEqual(settings[\"key\"], \"b\")\n-        self.assertEqual(settings.getpriority(\"key\"), 20)\n+        assert settings[\"key\"] == \"b\"\n+        assert settings.getpriority(\"key\") == 20\n         settings[\"key\"] = \"c\"\n-        self.assertEqual(settings[\"key\"], \"c\")\n+        assert settings[\"key\"] == \"c\"\n         settings[\"key2\"] = \"x\"\n-        self.assertIn(\"key2\", settings)\n-        self.assertEqual(settings[\"key2\"], \"x\")\n-        self.assertEqual(settings.getpriority(\"key2\"), 20)\n+        assert \"key2\" in settings\n+        assert settings[\"key2\"] == \"x\"\n+        assert settings.getpriority(\"key2\") == 20\n \n     def test_setdict_alias(self):\n         with mock.patch.object(self.settings, \"set\") as mock_set:\n             self.settings.setdict({\"TEST_1\": \"value1\", \"TEST_2\": \"value2\"}, 10)\n-            self.assertEqual(mock_set.call_count, 2)\n+            assert mock_set.call_count == 2\n             calls = [\n                 mock.call(\"TEST_1\", \"value1\", 10),\n                 mock.call(\"TEST_2\", \"value2\", 10),\n@@ -149,10 +149,10 @@ class BaseSettingsTest(unittest.TestCase):\n \n         self.settings.attributes = {}\n         self.settings.setmodule(ModuleMock(), 10)\n-        self.assertIn(\"UPPERCASE_VAR\", self.settings.attributes)\n-        self.assertNotIn(\"MIXEDcase_VAR\", self.settings.attributes)\n-        self.assertNotIn(\"lowercase_var\", self.settings.attributes)\n-        self.assertEqual(len(self.settings.attributes), 1)\n+        assert \"UPPERCASE_VAR\" in self.settings.attributes\n+        assert \"MIXEDcase_VAR\" not in self.settings.attributes\n+        assert \"lowercase_var\" not in self.settings.attributes\n+        assert len(self.settings.attributes) == 1\n \n     def test_setmodule_alias(self):\n         with mock.patch.object(self.settings, \"set\") as mock_set:\n@@ -168,13 +168,13 @@ class BaseSettingsTest(unittest.TestCase):\n         self.settings.attributes = {}\n         self.settings.setmodule(\"tests.test_settings.default_settings\", 10)\n \n-        self.assertCountEqual(self.settings.attributes.keys(), ctrl_attributes.keys())\n+        assert set(self.settings.attributes) == set(ctrl_attributes)\n \n         for key in ctrl_attributes:\n             attr = self.settings.attributes[key]\n             ctrl_attr = ctrl_attributes[key]\n-            self.assertEqual(attr.value, ctrl_attr.value)\n-            self.assertEqual(attr.priority, ctrl_attr.priority)\n+            assert attr.value == ctrl_attr.value\n+            assert attr.priority == ctrl_attr.priority\n \n     def test_update(self):\n         settings = BaseSettings({\"key_lowprio\": 0}, priority=0)\n@@ -186,21 +186,21 @@ class BaseSettingsTest(unittest.TestCase):\n         custom_dict = {\"key_lowprio\": 2, \"key_highprio\": 12, \"newkey_two\": None}\n \n         settings.update(custom_dict, priority=20)\n-        self.assertEqual(settings[\"key_lowprio\"], 2)\n-        self.assertEqual(settings.getpriority(\"key_lowprio\"), 20)\n-        self.assertEqual(settings[\"key_highprio\"], 10)\n-        self.assertIn(\"newkey_two\", settings)\n-        self.assertEqual(settings.getpriority(\"newkey_two\"), 20)\n+        assert settings[\"key_lowprio\"] == 2\n+        assert settings.getpriority(\"key_lowprio\") == 20\n+        assert settings[\"key_highprio\"] == 10\n+        assert \"newkey_two\" in settings\n+        assert settings.getpriority(\"newkey_two\") == 20\n \n         settings.update(custom_settings)\n-        self.assertEqual(settings[\"key_lowprio\"], 1)\n-        self.assertEqual(settings.getpriority(\"key_lowprio\"), 30)\n-        self.assertEqual(settings[\"key_highprio\"], 10)\n-        self.assertIn(\"newkey_one\", settings)\n-        self.assertEqual(settings.getpriority(\"newkey_one\"), 50)\n+        assert settings[\"key_lowprio\"] == 1\n+        assert settings.getpriority(\"key_lowprio\") == 30\n+        assert settings[\"key_highprio\"] == 10\n+        assert \"newkey_one\" in settings\n+        assert settings.getpriority(\"newkey_one\") == 50\n \n         settings.update({\"key_lowprio\": 3}, priority=20)\n-        self.assertEqual(settings[\"key_lowprio\"], 1)\n+        assert settings[\"key_lowprio\"] == 1\n \n     @pytest.mark.xfail(\n         raises=TypeError, reason=\"BaseSettings.update doesn't support kwargs input\"\n@@ -220,21 +220,21 @@ class BaseSettingsTest(unittest.TestCase):\n     def test_update_jsonstring(self):\n         settings = BaseSettings({\"number\": 0, \"dict\": BaseSettings({\"key\": \"val\"})})\n         settings.update('{\"number\": 1, \"newnumber\": 2}')\n-        self.assertEqual(settings[\"number\"], 1)\n-        self.assertEqual(settings[\"newnumber\"], 2)\n+        assert settings[\"number\"] == 1\n+        assert settings[\"newnumber\"] == 2\n         settings.set(\"dict\", '{\"key\": \"newval\", \"newkey\": \"newval2\"}')\n-        self.assertEqual(settings[\"dict\"][\"key\"], \"newval\")\n-        self.assertEqual(settings[\"dict\"][\"newkey\"], \"newval2\")\n+        assert settings[\"dict\"][\"key\"] == \"newval\"\n+        assert settings[\"dict\"][\"newkey\"] == \"newval2\"\n \n     def test_delete(self):\n         settings = BaseSettings({\"key\": None})\n         settings.set(\"key_highprio\", None, priority=50)\n         settings.delete(\"key\")\n         settings.delete(\"key_highprio\")\n-        self.assertNotIn(\"key\", settings)\n-        self.assertIn(\"key_highprio\", settings)\n+        assert \"key\" not in settings\n+        assert \"key_highprio\" in settings\n         del settings[\"key_highprio\"]\n-        self.assertNotIn(\"key_highprio\", settings)\n+        assert \"key_highprio\" not in settings\n         with pytest.raises(KeyError):\n             settings.delete(\"notkey\")\n         with pytest.raises(KeyError):\n@@ -271,40 +271,40 @@ class BaseSettingsTest(unittest.TestCase):\n             for key, value in test_configuration.items()\n         }\n \n-        self.assertTrue(settings.getbool(\"TEST_ENABLED1\"))\n-        self.assertTrue(settings.getbool(\"TEST_ENABLED2\"))\n-        self.assertTrue(settings.getbool(\"TEST_ENABLED3\"))\n-        self.assertTrue(settings.getbool(\"TEST_ENABLED4\"))\n-        self.assertTrue(settings.getbool(\"TEST_ENABLED5\"))\n-        self.assertFalse(settings.getbool(\"TEST_ENABLEDx\"))\n-        self.assertTrue(settings.getbool(\"TEST_ENABLEDx\", True))\n-        self.assertFalse(settings.getbool(\"TEST_DISABLED1\"))\n-        self.assertFalse(settings.getbool(\"TEST_DISABLED2\"))\n-        self.assertFalse(settings.getbool(\"TEST_DISABLED3\"))\n-        self.assertFalse(settings.getbool(\"TEST_DISABLED4\"))\n-        self.assertFalse(settings.getbool(\"TEST_DISABLED5\"))\n-        self.assertEqual(settings.getint(\"TEST_INT1\"), 123)\n-        self.assertEqual(settings.getint(\"TEST_INT2\"), 123)\n-        self.assertEqual(settings.getint(\"TEST_INTx\"), 0)\n-        self.assertEqual(settings.getint(\"TEST_INTx\", 45), 45)\n-        self.assertEqual(settings.getfloat(\"TEST_FLOAT1\"), 123.45)\n-        self.assertEqual(settings.getfloat(\"TEST_FLOAT2\"), 123.45)\n-        self.assertEqual(settings.getfloat(\"TEST_FLOATx\"), 0.0)\n-        self.assertEqual(settings.getfloat(\"TEST_FLOATx\", 55.0), 55.0)\n-        self.assertEqual(settings.getlist(\"TEST_LIST1\"), [\"one\", \"two\"])\n-        self.assertEqual(settings.getlist(\"TEST_LIST2\"), [\"one\", \"two\"])\n-        self.assertEqual(settings.getlist(\"TEST_LIST3\"), [])\n-        self.assertEqual(settings.getlist(\"TEST_LISTx\"), [])\n-        self.assertEqual(settings.getlist(\"TEST_LISTx\", [\"default\"]), [\"default\"])\n-        self.assertEqual(settings[\"TEST_STR\"], \"value\")\n-        self.assertEqual(settings.get(\"TEST_STR\"), \"value\")\n-        self.assertEqual(settings[\"TEST_STRx\"], None)\n-        self.assertEqual(settings.get(\"TEST_STRx\"), None)\n-        self.assertEqual(settings.get(\"TEST_STRx\", \"default\"), \"default\")\n-        self.assertEqual(settings.getdict(\"TEST_DICT1\"), {\"key1\": \"val1\", \"ke2\": 3})\n-        self.assertEqual(settings.getdict(\"TEST_DICT2\"), {\"key1\": \"val1\", \"ke2\": 3})\n-        self.assertEqual(settings.getdict(\"TEST_DICT3\"), {})\n-        self.assertEqual(settings.getdict(\"TEST_DICT3\", {\"key1\": 5}), {\"key1\": 5})\n+        assert settings.getbool(\"TEST_ENABLED1\")\n+        assert settings.getbool(\"TEST_ENABLED2\")\n+        assert settings.getbool(\"TEST_ENABLED3\")\n+        assert settings.getbool(\"TEST_ENABLED4\")\n+        assert settings.getbool(\"TEST_ENABLED5\")\n+        assert not settings.getbool(\"TEST_ENABLEDx\")\n+        assert settings.getbool(\"TEST_ENABLEDx\", True)\n+        assert not settings.getbool(\"TEST_DISABLED1\")\n+        assert not settings.getbool(\"TEST_DISABLED2\")\n+        assert not settings.getbool(\"TEST_DISABLED3\")\n+        assert not settings.getbool(\"TEST_DISABLED4\")\n+        assert not settings.getbool(\"TEST_DISABLED5\")\n+        assert settings.getint(\"TEST_INT1\") == 123\n+        assert settings.getint(\"TEST_INT2\") == 123\n+        assert settings.getint(\"TEST_INTx\") == 0\n+        assert settings.getint(\"TEST_INTx\", 45) == 45\n+        assert settings.getfloat(\"TEST_FLOAT1\") == 123.45\n+        assert settings.getfloat(\"TEST_FLOAT2\") == 123.45\n+        assert settings.getfloat(\"TEST_FLOATx\") == 0.0\n+        assert settings.getfloat(\"TEST_FLOATx\", 55.0) == 55.0\n+        assert settings.getlist(\"TEST_LIST1\") == [\"one\", \"two\"]\n+        assert settings.getlist(\"TEST_LIST2\") == [\"one\", \"two\"]\n+        assert settings.getlist(\"TEST_LIST3\") == []\n+        assert settings.getlist(\"TEST_LISTx\") == []\n+        assert settings.getlist(\"TEST_LISTx\", [\"default\"]) == [\"default\"]\n+        assert settings[\"TEST_STR\"] == \"value\"\n+        assert settings.get(\"TEST_STR\") == \"value\"\n+        assert settings[\"TEST_STRx\"] is None\n+        assert settings.get(\"TEST_STRx\") is None\n+        assert settings.get(\"TEST_STRx\", \"default\") == \"default\"\n+        assert settings.getdict(\"TEST_DICT1\") == {\"key1\": \"val1\", \"ke2\": 3}\n+        assert settings.getdict(\"TEST_DICT2\") == {\"key1\": \"val1\", \"ke2\": 3}\n+        assert settings.getdict(\"TEST_DICT3\") == {}\n+        assert settings.getdict(\"TEST_DICT3\", {\"key1\": 5}) == {\"key1\": 5}\n         with pytest.raises(\n             ValueError,\n             match=\"dictionary update sequence element #0 has length 3; 2 is required|sequence of pairs expected\",\n@@ -321,8 +321,8 @@ class BaseSettingsTest(unittest.TestCase):\n \n     def test_getpriority(self):\n         settings = BaseSettings({\"key\": \"value\"}, priority=99)\n-        self.assertEqual(settings.getpriority(\"key\"), 99)\n-        self.assertEqual(settings.getpriority(\"nonexistentkey\"), None)\n+        assert settings.getpriority(\"key\") == 99\n+        assert settings.getpriority(\"nonexistentkey\") is None\n \n     def test_getwithbase(self):\n         s = BaseSettings(\n@@ -333,16 +333,16 @@ class BaseSettingsTest(unittest.TestCase):\n             }\n         )\n         s[\"TEST\"].set(2, 200, \"cmdline\")\n-        self.assertCountEqual(s.getwithbase(\"TEST\"), {1: 1, 2: 200, 3: 30})\n-        self.assertCountEqual(s.getwithbase(\"HASNOBASE\"), s[\"HASNOBASE\"])\n-        self.assertEqual(s.getwithbase(\"NONEXISTENT\"), {})\n+        assert set(s.getwithbase(\"TEST\")) == {1, 2, 3}\n+        assert set(s.getwithbase(\"HASNOBASE\")) == set(s[\"HASNOBASE\"])\n+        assert s.getwithbase(\"NONEXISTENT\") == {}\n \n     def test_maxpriority(self):\n         # Empty settings should return 'default'\n-        self.assertEqual(self.settings.maxpriority(), 0)\n+        assert self.settings.maxpriority() == 0\n         self.settings.set(\"A\", 0, 10)\n         self.settings.set(\"B\", 0, 30)\n-        self.assertEqual(self.settings.maxpriority(), 30)\n+        assert self.settings.maxpriority() == 30\n \n     def test_copy(self):\n         values = {\n@@ -356,17 +356,15 @@ class BaseSettingsTest(unittest.TestCase):\n         self.settings.setdict(values)\n         copy = self.settings.copy()\n         self.settings.set(\"TEST_BOOL\", False)\n-        self.assertTrue(copy.get(\"TEST_BOOL\"))\n+        assert copy.get(\"TEST_BOOL\")\n \n         test_list = self.settings.get(\"TEST_LIST\")\n         test_list.append(\"three\")\n-        self.assertListEqual(copy.get(\"TEST_LIST\"), [\"one\", \"two\"])\n+        assert copy.get(\"TEST_LIST\") == [\"one\", \"two\"]\n \n         test_list_of_lists = self.settings.get(\"TEST_LIST_OF_LISTS\")\n         test_list_of_lists[0].append(\"first_three\")\n-        self.assertListEqual(\n-            copy.get(\"TEST_LIST_OF_LISTS\")[0], [\"first_one\", \"first_two\"]\n-        )\n+        assert copy.get(\"TEST_LIST_OF_LISTS\")[0] == [\"first_one\", \"first_two\"]\n \n     def test_copy_to_dict(self):\n         s = BaseSettings(\n@@ -379,17 +377,14 @@ class BaseSettingsTest(unittest.TestCase):\n                 \"HASNOBASE\": BaseSettings({3: 3000}, \"default\"),\n             }\n         )\n-        self.assertDictEqual(\n-            s.copy_to_dict(),\n-            {\n+        assert s.copy_to_dict() == {\n             \"HASNOBASE\": {3: 3000},\n             \"TEST\": {1: 10, 3: 30},\n             \"TEST_BASE\": {1: 1, 2: 2},\n             \"TEST_LIST\": [1, 2],\n             \"TEST_BOOLEAN\": False,\n             \"TEST_STRING\": \"a string\",\n-            },\n-        )\n+        }\n \n     def test_freeze(self):\n         self.settings.freeze()\n@@ -400,55 +395,55 @@ class BaseSettingsTest(unittest.TestCase):\n \n     def test_frozencopy(self):\n         frozencopy = self.settings.frozencopy()\n-        self.assertTrue(frozencopy.frozen)\n-        self.assertIsNot(frozencopy, self.settings)\n+        assert frozencopy.frozen\n+        assert frozencopy is not self.settings\n \n \n-class SettingsTest(unittest.TestCase):\n-    def setUp(self):\n+class TestSettings:\n+    def setup_method(self):\n         self.settings = Settings()\n \n     @mock.patch.dict(\"scrapy.settings.SETTINGS_PRIORITIES\", {\"default\": 10})\n     @mock.patch(\"scrapy.settings.default_settings\", default_settings)\n     def test_initial_defaults(self):\n         settings = Settings()\n-        self.assertEqual(len(settings.attributes), 2)\n-        self.assertIn(\"TEST_DEFAULT\", settings.attributes)\n+        assert len(settings.attributes) == 2\n+        assert \"TEST_DEFAULT\" in settings.attributes\n \n         attr = settings.attributes[\"TEST_DEFAULT\"]\n-        self.assertIsInstance(attr, SettingsAttribute)\n-        self.assertEqual(attr.value, \"defvalue\")\n-        self.assertEqual(attr.priority, 10)\n+        assert isinstance(attr, SettingsAttribute)\n+        assert attr.value == \"defvalue\"\n+        assert attr.priority == 10\n \n     @mock.patch.dict(\"scrapy.settings.SETTINGS_PRIORITIES\", {})\n     @mock.patch(\"scrapy.settings.default_settings\", {})\n     def test_initial_values(self):\n         settings = Settings({\"TEST_OPTION\": \"value\"}, 10)\n-        self.assertEqual(len(settings.attributes), 1)\n-        self.assertIn(\"TEST_OPTION\", settings.attributes)\n+        assert len(settings.attributes) == 1\n+        assert \"TEST_OPTION\" in settings.attributes\n \n         attr = settings.attributes[\"TEST_OPTION\"]\n-        self.assertIsInstance(attr, SettingsAttribute)\n-        self.assertEqual(attr.value, \"value\")\n-        self.assertEqual(attr.priority, 10)\n+        assert isinstance(attr, SettingsAttribute)\n+        assert attr.value == \"value\"\n+        assert attr.priority == 10\n \n     @mock.patch(\"scrapy.settings.default_settings\", default_settings)\n     def test_autopromote_dicts(self):\n         settings = Settings()\n         mydict = settings.get(\"TEST_DICT\")\n-        self.assertIsInstance(mydict, BaseSettings)\n-        self.assertIn(\"key\", mydict)\n-        self.assertEqual(mydict[\"key\"], \"val\")  # pylint: disable=unsubscriptable-object\n-        self.assertEqual(mydict.getpriority(\"key\"), 0)\n+        assert isinstance(mydict, BaseSettings)\n+        assert \"key\" in mydict\n+        assert mydict[\"key\"] == \"val\"\n+        assert mydict.getpriority(\"key\") == 0\n \n     @mock.patch(\"scrapy.settings.default_settings\", default_settings)\n     def test_getdict_autodegrade_basesettings(self):\n         settings = Settings()\n         mydict = settings.getdict(\"TEST_DICT\")\n-        self.assertIsInstance(mydict, dict)\n-        self.assertEqual(len(mydict), 1)\n-        self.assertIn(\"key\", mydict)\n-        self.assertEqual(mydict[\"key\"], \"val\")\n+        assert isinstance(mydict, dict)\n+        assert len(mydict) == 1\n+        assert \"key\" in mydict\n+        assert mydict[\"key\"] == \"val\"\n \n     def test_passing_objects_as_values(self):\n         from scrapy.core.downloader.handlers.file import FileDownloadHandler\n@@ -470,19 +465,19 @@ class SettingsTest(unittest.TestCase):\n             }\n         )\n \n-        self.assertIn(\"ITEM_PIPELINES\", settings.attributes)\n+        assert \"ITEM_PIPELINES\" in settings.attributes\n \n         mypipeline, priority = settings.getdict(\"ITEM_PIPELINES\").popitem()\n-        self.assertEqual(priority, 800)\n-        self.assertEqual(mypipeline, TestPipeline)\n-        self.assertIsInstance(mypipeline(), TestPipeline)\n-        self.assertEqual(mypipeline().process_item(\"item\", None), \"item\")\n+        assert priority == 800\n+        assert mypipeline == TestPipeline\n+        assert isinstance(mypipeline(), TestPipeline)\n+        assert mypipeline().process_item(\"item\", None) == \"item\"\n \n         myhandler = settings.getdict(\"DOWNLOAD_HANDLERS\").pop(\"ftp\")\n-        self.assertEqual(myhandler, FileDownloadHandler)\n+        assert myhandler == FileDownloadHandler\n         myhandler_instance = build_from_crawler(myhandler, get_crawler())\n-        self.assertIsInstance(myhandler_instance, FileDownloadHandler)\n-        self.assertTrue(hasattr(myhandler_instance, \"download_request\"))\n+        assert isinstance(myhandler_instance, FileDownloadHandler)\n+        assert hasattr(myhandler_instance, \"download_request\")\n \n     def test_pop_item_with_default_value(self):\n         settings = Settings()\n@@ -491,14 +486,14 @@ class SettingsTest(unittest.TestCase):\n             settings.pop(\"DUMMY_CONFIG\")\n \n         dummy_config_value = settings.pop(\"DUMMY_CONFIG\", \"dummy_value\")\n-        self.assertEqual(dummy_config_value, \"dummy_value\")\n+        assert dummy_config_value == \"dummy_value\"\n \n     def test_pop_item_with_immutable_settings(self):\n         settings = Settings(\n             {\"DUMMY_CONFIG\": \"dummy_value\", \"OTHER_DUMMY_CONFIG\": \"other_dummy_value\"}\n         )\n \n-        self.assertEqual(settings.pop(\"DUMMY_CONFIG\"), \"dummy_value\")\n+        assert settings.pop(\"DUMMY_CONFIG\") == \"dummy_value\"\n \n         settings.freeze()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
