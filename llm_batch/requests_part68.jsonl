{"custom_id": "requests#4f64938ff02438bf6b1e379371f5182d48397c32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 8750 | Contributors (this commit): 113 | Commits (past 90d): 9 | Contributors (cumulative): 113 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,7 @@ from .utils import (\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len)\n from .compat import (\n-    cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n+    cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring)\n \n CONTENT_CHUNK_SIZE = 10 * 1024\n@@ -352,7 +352,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         body = None\n         content_type = None\n         length = None\n-        is_stream = False\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#29db7b72161ee8423ce780e421a8913bb3073dfc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 3296 | Contributors (this commit): 56 | Commits (past 90d): 21 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,8 @@ except ImportError:\n     import io as StringIO\n \n HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n+# Issue #1483: Make sure the URL always has a trailing slash\n+HTTPBIN = HTTPBIN.rstrip('/') + '/'\n \n \n def httpbin(*suffix):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9e771aa79cc3cdf2b625b31148247c05efdf4edd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 3896 | Contributors (this commit): 60 | Commits (past 90d): 30 | Contributors (cumulative): 68 | DMM Complexity: 1.0\n\nDIFF:\n@@ -214,7 +214,7 @@ class HTTPAdapter(BaseAdapter):\n         If the message is being sent through a proxy, the full URL has to be\n         used. Otherwise, we should only use the path portion of the URL.\n \n-        This shoudl not be called from user code, and is only exposed for use\n+        This should not be called from user code, and is only exposed for use\n         when subclassing the\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n\n@@ -12,7 +12,7 @@ import pickle\n import requests\n from requests.auth import HTTPDigestAuth\n from requests.adapters import HTTPAdapter\n-from requests.compat import str, cookielib\n+from requests.compat import str, cookielib, getproxies\n from requests.cookies import cookiejar_from_dict\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n@@ -88,11 +88,14 @@ class RequestsTestCase(unittest.TestCase):\n             \"http://example.com/path?key=value&a=b#fragment\")\n \n     def test_mixed_case_scheme_acceptable(self):\n+        proxies = getproxies()\n         s = requests.Session()\n+        s.proxies = proxies\n         r = requests.Request('GET', 'http://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n         s = requests.Session()\n+        s.proxies = proxies\n         r = requests.Request('GET', 'HTTP://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n@@ -118,6 +121,7 @@ class RequestsTestCase(unittest.TestCase):\n     def test_HTTP_200_OK_GET_ALTERNATIVE(self):\n         r = requests.Request('GET', httpbin('get'))\n         s = requests.Session()\n+        s.proxies = getproxies()\n \n         r = s.send(r.prepare())\n \n@@ -447,6 +451,7 @@ class RequestsTestCase(unittest.TestCase):\n         prep = req.prepare()\n \n         s = requests.Session()\n+        s.proxies = getproxies()\n         resp = s.send(prep)\n \n         self.assertTrue(hasattr(resp, 'hook_working'))\n@@ -536,6 +541,7 @@ class RequestsTestCase(unittest.TestCase):\n         s = requests.Session()\n \n         s = pickle.loads(pickle.dumps(s))\n+        s.proxies = getproxies()\n \n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d2176cf0526ee1965f830f0a6681dbcc9007d52e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 3307 | Contributors (this commit): 56 | Commits (past 90d): 23 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -8,6 +8,7 @@ import json\n import os\n import unittest\n import pickle\n+import urlparse\n \n import requests\n from requests.auth import HTTPDigestAuth\n@@ -29,7 +30,7 @@ HTTPBIN = HTTPBIN.rstrip('/') + '/'\n \n def httpbin(*suffix):\n     \"\"\"Returns url for HTTPBIN resource.\"\"\"\n-    return HTTPBIN + '/'.join(suffix)\n+    return urlparse.urljoin(HTTPBIN, '/'.join(suffix))\n \n \n class RequestsTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c0cb698191061630ae8df56ddda660c470bf70e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3312 | Contributors (this commit): 56 | Commits (past 90d): 24 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -8,12 +8,11 @@ import json\n import os\n import unittest\n import pickle\n-import urlparse\n \n import requests\n from requests.auth import HTTPDigestAuth\n from requests.adapters import HTTPAdapter\n-from requests.compat import str, cookielib, getproxies\n+from requests.compat import str, cookielib, getproxies, urljoin\n from requests.cookies import cookiejar_from_dict\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n@@ -30,7 +29,7 @@ HTTPBIN = HTTPBIN.rstrip('/') + '/'\n \n def httpbin(*suffix):\n     \"\"\"Returns url for HTTPBIN resource.\"\"\"\n-    return urlparse.urljoin(HTTPBIN, '/'.join(suffix))\n+    return urljoin(HTTPBIN, '/'.join(suffix))\n \n \n class RequestsTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#415fb53cb45969f0f4877b95b035f6b864ff7450", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3317 | Contributors (this commit): 56 | Commits (past 90d): 25 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -90,14 +90,11 @@ class RequestsTestCase(unittest.TestCase):\n             \"http://example.com/path?key=value&a=b#fragment\")\n \n     def test_mixed_case_scheme_acceptable(self):\n-        proxies = getproxies()\n         s = requests.Session()\n-        s.proxies = proxies\n+        s.proxies = getproxies()\n         r = requests.Request('GET', 'http://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        s = requests.Session()\n-        s.proxies = proxies\n         r = requests.Request('GET', 'HTTP://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#012cc33d44073ce2dc93a9b91368cbe6c5246014", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 33 | Churn Cumulative: 3350 | Contributors (this commit): 56 | Commits (past 90d): 26 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import pickle\n import requests\n from requests.auth import HTTPDigestAuth\n from requests.adapters import HTTPAdapter\n-from requests.compat import str, cookielib, getproxies, urljoin\n+from requests.compat import str, cookielib, getproxies, urljoin, urlparse\n from requests.cookies import cookiejar_from_dict\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n@@ -92,30 +92,15 @@ class RequestsTestCase(unittest.TestCase):\n     def test_mixed_case_scheme_acceptable(self):\n         s = requests.Session()\n         s.proxies = getproxies()\n-        r = requests.Request('GET', 'http://httpbin.org/get')\n+        parts = urlparse(httpbin('get'))\n+        schemes = ['http://', 'HTTP://', 'hTTp://', 'HttP://',\n+                   'https://', 'HTTPS://', 'hTTps://', 'HttPs://']\n+        for scheme in schemes:\n+            url = scheme + parts.netloc + parts.path\n+            r = requests.Request('GET', url)\n             r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HTTP://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'hTTp://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HttP://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'https://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HTTPS://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'hTTps://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HttPs://httpbin.org/get')\n-        r = s.send(r.prepare())\n-        self.assertEqual(r.status_code,200)\n+            self.assertEqual(r.status_code, 200,\n+                             \"failed for scheme %s\" % scheme)\n \n     def test_HTTP_200_OK_GET_ALTERNATIVE(self):\n         r = requests.Request('GET', httpbin('get'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4f16c351c4b639a194ff36f61abebd1ecccf797", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 3354 | Contributors (this commit): 56 | Commits (past 90d): 27 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -553,10 +553,6 @@ class RequestsTestCase(unittest.TestCase):\n             'application/json'\n         )\n \n-    def test_uppercase_scheme(self):\n-        r = requests.get('HTTP://example.com/')\n-        self.assertEqual(r.status_code, 200)\n-\n     def test_uppercase_scheme_redirect(self):\n         r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#56b5f02551cd65cfc99f7f38c60d36b2cfdfc6e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3358 | Contributors (this commit): 56 | Commits (past 90d): 28 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -554,7 +554,9 @@ class RequestsTestCase(unittest.TestCase):\n         )\n \n     def test_uppercase_scheme_redirect(self):\n-        r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n+        parts = urlparse(httpbin('html'))\n+        url = \"HTTP://\" + parts.netloc + parts.path\n+        r = requests.get(httpbin('redirect-to'), params={'url': url})\n         self.assertEqual(r.status_code, 200)\n \n     def test_transport_adapter_ordering(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#82c9aa912efde203080ab33e93725e41d3f28604", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 3359 | Contributors (this commit): 56 | Commits (past 90d): 29 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -558,6 +558,7 @@ class RequestsTestCase(unittest.TestCase):\n         url = \"HTTP://\" + parts.netloc + parts.path\n         r = requests.get(httpbin('redirect-to'), params={'url': url})\n         self.assertEqual(r.status_code, 200)\n+        self.assertEqual(r.url.lower(), url.lower())\n \n     def test_transport_adapter_ordering(self):\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f40a1d6a8ad4ea47e4a2b92b9a13a2270c6806cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2331 | Contributors (this commit): 45 | Commits (past 90d): 11 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -211,7 +211,10 @@ class Session(SessionRedirectMixin):\n         #: Should we trust the environment?\n         self.trust_env = True\n \n-        # Set up a CookieJar to be used by default\n+        #: A CookieJar containing all currently outstanding cookies set on this\n+        #: session. By default is a\n+        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but\n+        #: may be any other ``CookieJar``.\n         self.cookies = cookiejar_from_dict({})\n \n         # Default connection adapters.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3becc473665438d82482b54c9596b70ad0ab0315", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2335 | Contributors (this commit): 45 | Commits (past 90d): 12 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -212,9 +212,9 @@ class Session(SessionRedirectMixin):\n         self.trust_env = True\n \n         #: A CookieJar containing all currently outstanding cookies set on this\n-        #: session. By default is a\n+        #: session. By default it is a\n         #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but\n-        #: may be any other ``CookieJar``.\n+        #: may be any other ``cookielib.CookieJar`` compatible object.\n         self.cookies = cookiejar_from_dict({})\n \n         # Default connection adapters.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f401287afb7da663e622a244bbaf22fcc32fca09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 8755 | Contributors (this commit): 113 | Commits (past 90d): 10 | Contributors (cumulative): 113 | DMM Complexity: None\n\nDIFF:\n@@ -689,4 +689,9 @@ class Response(object):\n             raise HTTPError(http_error_msg, response=self)\n \n     def close(self):\n+        \"\"\"Closes the underlying file descriptor and releases the connection\n+        back to the pool.\n+\n+        *Note: Should not normally need to be called explicitly.*\n+        \"\"\"\n         return self.raw.release_conn()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73635df1b2680e8b4ac7babc0ab0bc004fbb21b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 27 | Churn Cumulative: 4463 | Contributors (this commit): 74 | Commits (past 90d): 32 | Contributors (cumulative): 81 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,6 @@ from base64 import b64encode\n from .compat import urlparse, str\n from .utils import parse_dict_header\n \n-\n log = logging.getLogger(__name__)\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n@@ -146,6 +145,7 @@ class HTTPDigestAuth(AuthBase):\n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n+        from .models import PreparedRequest\n         num_401_calls = getattr(self, 'num_401_calls', 1)\n         s_auth = r.headers.get('www-authenticate', '')\n \n@@ -159,10 +159,17 @@ class HTTPDigestAuth(AuthBase):\n             # to allow our new request to reuse the same one.\n             r.content\n             r.raw.release_conn()\n+            prepared_request = PreparedRequest()\n+            prepared_request.url = r.request.url\n+            prepared_request.body = r.request.body\n+            prepared_request.headers = r.request.headers.copy()\n+            prepared_request.hooks = r.request.hooks\n+            prepared_request.prepare_cookies(r.cookies)\n \n             r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)\n-            _r = r.connection.send(r.request, **kwargs)\n+            _r = r.connection.send(prepared_request, **kwargs)\n             _r.history.append(r)\n+            _r.request = prepared_request\n \n             return _r\n \n\n@@ -289,6 +289,22 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(url)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_DIGEST_AUTH_RETURNS_COOKIE(self):\n+        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+        auth = HTTPDigestAuth('user', 'pass')\n+        r = requests.get(url)\n+        assert r.cookies['fake'] == 'fake_value'\n+\n+        r = requests.get(url, auth=auth)\n+        assert r.status_code == 200\n+\n+    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self):\n+        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+        auth = HTTPDigestAuth('user', 'pass')\n+        s = requests.Session()\n+        s.get(url, auth=auth)\n+        assert s.cookies['fake'] == 'fake_value'\n+\n     def test_DIGEST_STREAM(self):\n \n         auth = HTTPDigestAuth('user', 'pass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c25a72ea248358641dd9048f0062d83625cc703b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 1108 | Contributors (this commit): 25 | Commits (past 90d): 3 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -159,17 +159,19 @@ class HTTPDigestAuth(AuthBase):\n             # to allow our new request to reuse the same one.\n             r.content\n             r.raw.release_conn()\n-            prepared_request = PreparedRequest()\n-            prepared_request.url = r.request.url\n-            prepared_request.body = r.request.body\n-            prepared_request.headers = r.request.headers.copy()\n-            prepared_request.hooks = r.request.hooks\n-            prepared_request.prepare_cookies(r.cookies)\n+            prep = PreparedRequest()\n+            prep.method = r.request.method\n+            prep.url = r.request.url\n+            prep.body = r.request.body\n+            prep.headers = r.request.headers.copy()\n+            prep.hooks = r.request.hooks\n+            prep.prepare_cookies(r.cookies)\n \n-            r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)\n-            _r = r.connection.send(prepared_request, **kwargs)\n+            prep.headers['Authorization'] = self.build_digest_header(\n+                prep.method, prep.url)\n+            _r = r.connection.send(prep, **kwargs)\n             _r.history.append(r)\n-            _r.request = prepared_request\n+            _r.request = prep\n \n             return _r\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#972089826e830670cdaec774bb4eb8a3f349b661", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 6 | Churn Cumulative: 5716 | Contributors (this commit): 84 | Commits (past 90d): 39 | Contributors (cumulative): 102 | DMM Complexity: 0.0\n\nDIFF:\n@@ -449,6 +449,10 @@ class Session(SessionRedirectMixin):\n         r = dispatch_hook('response', hooks, r, **kwargs)\n \n         # Persist cookies\n+        if r.history:\n+            # If the hooks create history then we want those cookies too\n+            for resp in r.history:\n+                extract_cookies_to_jar(self.cookies, resp.request, resp.raw)\n         extract_cookies_to_jar(self.cookies, request, r.raw)\n \n         # Redirect resolving generator.\n\n@@ -285,7 +285,7 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 401)\n \n         s = requests.session()\n-        s.auth = auth\n+        s.auth = HTTPDigestAuth('user', 'pass')\n         r = s.get(url)\n         self.assertEqual(r.status_code, 200)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#286ddb672d3ff39b1807402a7d9ca569a86516d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 3460 | Contributors (this commit): 61 | Commits (past 90d): 16 | Contributors (cumulative): 70 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -145,7 +145,6 @@ class HTTPDigestAuth(AuthBase):\n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n-        from .models import PreparedRequest\n         num_401_calls = getattr(self, 'num_401_calls', 1)\n         s_auth = r.headers.get('www-authenticate', '')\n \n@@ -159,12 +158,7 @@ class HTTPDigestAuth(AuthBase):\n             # to allow our new request to reuse the same one.\n             r.content\n             r.raw.release_conn()\n-            prep = PreparedRequest()\n-            prep.method = r.request.method\n-            prep.url = r.request.url\n-            prep.body = r.request.body\n-            prep.headers = r.request.headers.copy()\n-            prep.hooks = r.request.hooks\n+            prep = r.request.copy()\n             prep.prepare_cookies(r.cookies)\n \n             prep.headers['Authorization'] = self.build_digest_header(\n\n@@ -74,10 +74,7 @@ class SessionRedirectMixin(object):\n \n         # ((resp.status_code is codes.see_other))\n         while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n-            prepared_request = PreparedRequest()\n-            prepared_request.body = req.body\n-            prepared_request.headers = req.headers.copy()\n-            prepared_request.hooks = req.hooks\n+            prepared_request = req.copy()\n \n             resp.content  # Consume socket so it can be released\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#840540b6b1f07ef87faab73392c03fbef0dcc9fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 2476 | Contributors (this commit): 52 | Commits (past 90d): 14 | Contributors (cumulative): 55 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,7 +15,7 @@ from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n from .packages.urllib3.response import HTTPResponse\n from .compat import urlparse, basestring, urldefrag, unquote\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n-                    prepend_scheme_if_needed, get_auth_from_url)\n+                    except_on_missing_scheme, get_auth_from_url)\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import TimeoutError\n@@ -193,7 +193,7 @@ class HTTPAdapter(BaseAdapter):\n         proxy = proxies.get(urlparse(url.lower()).scheme)\n \n         if proxy:\n-            proxy = prepend_scheme_if_needed(proxy, urlparse(url.lower()).scheme)\n+            except_on_missing_scheme(proxy)\n             conn = ProxyManager(self.poolmanager.connection_from_url(proxy))\n         else:\n             conn = self.poolmanager.connection_from_url(url.lower())\n\n@@ -25,6 +25,7 @@ from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n from .compat import getproxies, proxy_bypass\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n+from .exceptions import MissingSchema\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -524,18 +525,13 @@ def guess_json_utf(data):\n     return None\n \n \n-def prepend_scheme_if_needed(url, new_scheme):\n-    '''Given a URL that may or may not have a scheme, prepend the given scheme.\n-    Does not replace a present scheme with the one provided as an argument.'''\n-    scheme, netloc, path, params, query, fragment = urlparse(url, new_scheme)\n+def except_on_missing_scheme(url):\n+    \"\"\"Given a URL, raise a MissingSchema exception if the scheme is missing.\n+    \"\"\"\n+    scheme, netloc, path, params, query, fragment = urlparse(url)\n \n-    # urlparse is a finicky beast, and sometimes decides that there isn't a\n-    # netloc present. Assume that it's being over-cautious, and switch netloc\n-    # and path if urlparse decided there was no netloc.\n-    if not netloc:\n-        netloc, path = path, netloc\n-\n-    return urlunparse((scheme, netloc, path, params, query, fragment))\n+    if not scheme:\n+        raise MissingSchema('Proxy URLs must have explicit schemes.')\n \n \n def get_auth_from_url(url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79f3e69f5eecdcd2dc09b234d72305a180f149d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 18 | Churn Cumulative: 9027 | Contributors (this commit): 118 | Commits (past 90d): 14 | Contributors (cumulative): 137 | DMM Complexity: 0.0\n\nDIFF:\n@@ -90,6 +90,7 @@ if is_py2:\n     from Cookie import Morsel\n     from StringIO import StringIO\n     from .packages.urllib3.packages.ordered_dict import OrderedDict\n+    from httplib import IncompleteRead\n \n     builtin_str = str\n     bytes = str\n@@ -105,6 +106,7 @@ elif is_py3:\n     from http.cookies import Morsel\n     from io import StringIO\n     from collections import OrderedDict\n+    from http.client import IncompleteRead\n \n     builtin_str = str\n     str = str\n\n@@ -53,3 +53,7 @@ class InvalidSchema(RequestException, ValueError):\n \n class InvalidURL(RequestException, ValueError):\n     \"\"\" The URL provided was somehow invalid. \"\"\"\n+\n+\n+class ChunkedEncodingError(RequestException):\n+    \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n\n@@ -19,14 +19,16 @@ from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n-from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n+from .exceptions import (\n+    HTTPError, RequestException, MissingSchema, InvalidURL,\n+    ChunkedEncodingError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring)\n+    is_py2, chardet, json, builtin_str, basestring, IncompleteRead)\n \n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n@@ -547,8 +549,12 @@ class Response(object):\n         def generate():\n             try:\n                 # Special case for urllib3.\n-                for chunk in self.raw.stream(chunk_size, decode_content=True):\n+                try:\n+                    for chunk in self.raw.stream(chunk_size,\n+                                                 decode_content=True):\n                         yield chunk\n+                except IncompleteRead as e:\n+                    raise ChunkedEncodingError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while 1:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ea2b639d31270003855552a9f0c3617d7878ffd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 13 | Files Changed: 4 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 35 | Churn Cumulative: 4072 | Contributors (this commit): 9 | Commits (past 90d): 11 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,7 +26,10 @@ except ImportError:\n \n try: # Compiled with SSL?\n     HTTPSConnection = object\n-    BaseSSLError = None\n+\n+    class BaseSSLError(BaseException):\n+        pass\n+\n     ssl = None\n \n     try: # Python 3\n@@ -152,8 +155,8 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         :class:`httplib.HTTPConnection`.\n \n     :param timeout:\n-        Socket timeout for each individual connection, can be a float. None\n-        disables timeout.\n+        Socket timeout in seconds for each individual connection, can be\n+        a float. None disables timeout.\n \n     :param maxsize:\n         Number of connections to save that can be reused. More than 1 is useful\n@@ -376,6 +379,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n         :param timeout:\n             If specified, overrides the default timeout for this one request.\n+            It may be a float (in seconds).\n \n         :param pool_timeout:\n             If set and the pool is set to block=True, then this method will\n@@ -410,10 +414,6 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n         # Check host\n         if assert_same_host and not self.is_same_host(url):\n-            host = \"%s://%s\" % (self.scheme, self.host)\n-            if self.port:\n-                host = \"%s:%d\" % (host, self.port)\n-\n             raise HostChangedError(self, url, retries - 1)\n \n         conn = None\n\n@@ -181,9 +181,9 @@ class ProxyManager(RequestMethods):\n         \"\"\"\n         headers_ = {'Accept': '*/*'}\n \n-        host = parse_url(url).host\n-        if host:\n-            headers_['Host'] = host\n+        netloc = parse_url(url).netloc\n+        if netloc:\n+            headers_['Host'] = netloc\n \n         if headers:\n             headers_.update(headers)\n\n@@ -185,9 +185,11 @@ class HTTPResponse(io.IOBase):\n             try:\n                 if decode_content and self._decoder:\n                     data = self._decoder.decompress(data)\n-            except (IOError, zlib.error):\n-                raise DecodeError(\"Received response with content-encoding: %s, but \"\n-                                  \"failed to decode it.\" % content_encoding)\n+            except (IOError, zlib.error) as e:\n+                raise DecodeError(\n+                    \"Received response with content-encoding: %s, but \"\n+                    \"failed to decode it.\" % content_encoding,\n+                    e)\n \n             if flush_decoder and self._decoder:\n                 buf = self._decoder.decompress(binary_type())\n\n@@ -60,6 +60,13 @@ class Url(namedtuple('Url', ['scheme', 'auth', 'host', 'port', 'path', 'query',\n \n         return uri\n \n+    @property\n+    def netloc(self):\n+        \"\"\"Network location including host and port\"\"\"\n+        if self.port:\n+            return '%s:%d' % (self.host, self.port)\n+        return self.host\n+\n \n def split_first(s, delims):\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#37786613e06f055a0495b05940f31531a9afd705", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 1 | Churn Cumulative: 8768 | Contributors (this commit): 113 | Commits (past 90d): 12 | Contributors (cumulative): 113 | DMM Complexity: 1.0\n\nDIFF:\n@@ -209,7 +209,6 @@ class Request(RequestHooksMixin):\n         self.params = params\n         self.auth = auth\n         self.cookies = cookies\n-        self.hooks = hooks\n \n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5775594ccc0e2947b965c1fcf40747301a93974", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 37 | Churn Cumulative: 14062 | Contributors (this commit): 156 | Commits (past 90d): 101 | Contributors (cumulative): 213 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,7 +23,7 @@ from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n-    iter_slices, guess_json_utf, super_len)\n+    iter_slices, guess_json_utf, super_len, to_native_string)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring)\n@@ -346,7 +346,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            headers = dict((name.encode('ascii'), value) for name, value in headers.items())\n+            headers = dict((to_native_string(name), value) for name, value in headers.items())\n             self.headers = CaseInsensitiveDict(headers)\n         else:\n             self.headers = CaseInsensitiveDict()\n\n@@ -21,8 +21,8 @@ from netrc import netrc, NetrcParseError\n from . import __version__\n from . import certs\n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n-from .compat import getproxies, proxy_bypass\n+from .compat import (quote, urlparse, bytes, str, OrderedDict, urlunparse,\n+                     is_py2, is_py3, builtin_str, getproxies, proxy_bypass)\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n \n@@ -546,3 +546,22 @@ def get_auth_from_url(url):\n         return (parsed.username, parsed.password)\n     else:\n         return ('', '')\n+\n+\n+def to_native_string(string, encoding='ascii'):\n+    \"\"\"\n+    Given a string object, regardless of type, returns a representation of that\n+    string in the native string type, encoding and decoding where necessary.\n+    This assumes ASCII unless told otherwise.\n+    \"\"\"\n+    out = None\n+\n+    if isinstance(string, builtin_str):\n+        out = string\n+    else:\n+        if is_py2:\n+            out = string.encode(encoding)\n+        else:\n+            out = string.decode(encoding)\n+\n+    return out\n\n@@ -640,6 +640,16 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.Request('GET', url).prepare()\n         self.assertEqual(r.url, url)\n \n+    def test_header_keys_are_native(self):\n+        headers = {u'unicode': 'blah', 'byte'.encode('ascii'): 'blah'}\n+        r = requests.Request('GET', httpbin('get'), headers=headers)\n+        p = r.prepare()\n+\n+        # This is testing that they are builtin strings. A bit weird, but there\n+        # we go.\n+        self.assertTrue('unicode' in p.headers.keys())\n+        self.assertTrue('byte' in p.headers.keys())\n+\n \n class TestCaseInsensitiveDict(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec2859c0ded048c8630f4561d9556117fa301794", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 3394 | Contributors (this commit): 57 | Commits (past 90d): 57 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -557,17 +557,16 @@ class RequestsTestCase(unittest.TestCase):\n         s.headers.update({'accept': 'application/json'})\n         r = s.get(httpbin('get'))\n         headers = r.request.headers\n-        # ASCII encode because of key comparison changes in py3\n         self.assertEqual(\n-            headers['accept'.encode('ascii')],\n+            headers['accept'],\n             'application/json'\n         )\n         self.assertEqual(\n-            headers['Accept'.encode('ascii')],\n+            headers['Accept'],\n             'application/json'\n         )\n         self.assertEqual(\n-            headers['ACCEPT'.encode('ascii')],\n+            headers['ACCEPT'],\n             'application/json'\n         )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7de6b1e1626b72ae473def49ccc1764d11323167", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 8775 | Contributors (this commit): 113 | Commits (past 90d): 34 | Contributors (cumulative): 113 | DMM Complexity: 0.0\n\nDIFF:\n@@ -346,8 +346,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            headers = dict((to_native_string(name), value) for name, value in headers.items())\n-            self.headers = CaseInsensitiveDict(headers)\n+            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n         else:\n             self.headers = CaseInsensitiveDict()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8d9d9fb06493e322c04d64b9234df0ae218e9500", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8777 | Contributors (this commit): 114 | Commits (past 90d): 14 | Contributors (cumulative): 114 | DMM Complexity: None\n\nDIFF:\n@@ -93,7 +93,7 @@ class RequestEncodingMixin(object):\n \n         \"\"\"\n         if (not files) or isinstance(data, str):\n-            return None\n+            return (None, None)\n \n         new_fields = []\n         fields = to_key_val_list(data or {})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f75ee9fb6e9c651ce49a438634b6e9ced0560e1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 8781 | Contributors (this commit): 114 | Commits (past 90d): 15 | Contributors (cumulative): 114 | DMM Complexity: None\n\nDIFF:\n@@ -92,8 +92,8 @@ class RequestEncodingMixin(object):\n         if parameters are supplied as a dict.\n \n         \"\"\"\n-        if (not files) or isinstance(data, str):\n-            return (None, None)\n+        if (not files) or isinstance(data, basestring):\n+            return None\n \n         new_fields = []\n         fields = to_key_val_list(data or {})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ef3710970b23351c9ff3450070ed0abd9e9add0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 597 | Contributors (this commit): 14 | Commits (past 90d): 6 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -74,6 +74,10 @@ class MockRequest(object):\n     def origin_req_host(self):\n         return self.get_origin_req_host()\n \n+    @property\n+    def host(self):\n+        return self.get_host()\n+\n \n class MockResponse(object):\n     \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b5c136152f4184387017ce570d2a499f21b6de14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 61 | Lines Deleted: 34 | Files Changed: 2 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 95 | Churn Cumulative: 11220 | Contributors (this commit): 141 | Commits (past 90d): 26 | Contributors (cumulative): 161 | DMM Complexity: 0.75\n\nDIFF:\n@@ -214,6 +214,19 @@ class Request(RequestHooksMixin):\n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n \n+    def copy(self):\n+        return Request(\n+            method = self.method,\n+            url = self.url,\n+            headers = self.headers,\n+            files = self.files,\n+            data = self.data,\n+            params = self.params,\n+            auth = self.auth,\n+            cookies = self.cookies,\n+            hooks = self.hooks,\n+        )\n+\n     def prepare(self):\n         \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n         p = PreparedRequest()\n\n@@ -228,6 +228,41 @@ class Session(SessionRedirectMixin):\n     def __exit__(self, *args):\n         self.close()\n \n+    def update_request(self, request):\n+        \"\"\"Destructively updates/merges the settings of a :class:`Request`\n+        object from those of the :class:`Session`.\n+        \"\"\"\n+        cookies = request.cookies or {}\n+\n+        # Bootstrap CookieJar.\n+        if not isinstance(cookies, cookielib.CookieJar):\n+            cookies = cookiejar_from_dict(cookies)\n+\n+        # Merge with session cookies\n+        merged_cookies = RequestsCookieJar()\n+        merged_cookies.update(self.cookies)\n+        merged_cookies.update(cookies)\n+        request.cookies = merged_cookies\n+\n+        # Gather clues from the surrounding environment.\n+        if self.trust_env:\n+            # Set environment's basic authentication if not explicitly set.\n+            if not request.auth and not self.auth:\n+                request.auth = get_netrc_auth(request.url)\n+\n+        # Merge settings from the request and the session.\n+        request.params = merge_setting(request.params, self.params)\n+        request.headers = merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict)\n+        request.auth = merge_setting(request.auth, self.auth)\n+        request.hooks = merge_setting(request.hooks, self.hooks)\n+        request.method = request.method.upper()\n+\n+        return request\n+\n+    def prepare_request(self, request):\n+        req = self.update_request(request.copy())\n+        return req.prepare()\n+\n     def request(self, method, url,\n         params=None,\n         data=None,\n@@ -271,20 +306,22 @@ class Session(SessionRedirectMixin):\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n+        # Create the Request.\n+        req = Request(\n+            method = method.upper(),\n+            url = url,\n+            headers = headers,\n+            files = files,\n+            data = data or {},\n+            params = params or {},\n+            auth = auth,\n+            cookies = cookies,\n+            hooks = hooks,\n+        )\n+        prep = self.prepare_request(req)\n \n-        cookies = cookies or {}\n         proxies = proxies or {}\n \n-        # Bootstrap CookieJar.\n-        if not isinstance(cookies, cookielib.CookieJar):\n-            cookies = cookiejar_from_dict(cookies)\n-\n-        # Merge with session cookies\n-        merged_cookies = RequestsCookieJar()\n-        merged_cookies.update(self.cookies)\n-        merged_cookies.update(cookies)\n-        cookies = merged_cookies\n-\n         # Gather clues from the surrounding environment.\n         if self.trust_env:\n             # Set environment's proxies.\n@@ -292,10 +329,6 @@ class Session(SessionRedirectMixin):\n             for (k, v) in env_proxies.items():\n                 proxies.setdefault(k, v)\n \n-            # Set environment's basic authentication if not explicitly set.\n-            if not auth and not self.auth:\n-                auth = get_netrc_auth(url)\n-\n             # Look for configuration.\n             if not verify and verify is not False:\n                 verify = os.environ.get('REQUESTS_CA_BUNDLE')\n@@ -305,30 +338,11 @@ class Session(SessionRedirectMixin):\n                 verify = os.environ.get('CURL_CA_BUNDLE')\n \n         # Merge all the kwargs.\n-        params = merge_setting(params, self.params)\n-        headers = merge_setting(headers, self.headers, dict_class=CaseInsensitiveDict)\n-        auth = merge_setting(auth, self.auth)\n         proxies = merge_setting(proxies, self.proxies)\n-        hooks = merge_setting(hooks, self.hooks)\n         stream = merge_setting(stream, self.stream)\n         verify = merge_setting(verify, self.verify)\n         cert = merge_setting(cert, self.cert)\n \n-        # Create the Request.\n-        req = Request()\n-        req.method = method.upper()\n-        req.url = url\n-        req.headers = headers\n-        req.files = files\n-        req.data = data\n-        req.params = params\n-        req.auth = auth\n-        req.cookies = cookies\n-        req.hooks = hooks\n-\n-        # Prepare the Request.\n-        prep = req.prepare()\n-\n         # Send the request.\n         send_kwargs = {\n             'stream': stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
