{"custom_id": "requests#3d448f843e82f8c35613ea3d5657e8215d068163", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 353 | Contributors (this commit): 2 | Commits (past 90d): 20 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -172,7 +172,6 @@ def curl_from_request(request):\n     \"\"\"Creates a curl command from the request.\"\"\"\n \n     #TODO - OAuth\n-    #TODO - Cookies\n \n     #: -L/--location - if there is a redirect, redo request on the new place\n     curl = 'curl -L '\n@@ -183,6 +182,7 @@ def curl_from_request(request):\n     if request.auth is not None:\n        auth = '-u \"%s:%s\" ' % (request.auth.username, request.auth.password)\n \n+    method = ''\n     if request.method.upper() == 'HEAD':\n         #: -I/--head - fetch headers only\n         method = '-I '\n@@ -190,6 +190,13 @@ def curl_from_request(request):\n         #: -X/--request - specify request method\n         method = '-X %s ' % request.method.upper()\n \n+    #: -b/--cookie\n+    #: (HTTP) Pass the data to the HTTP server as a cookie. It is supposedly the\n+    #: data previously received from the server in a \"Set-Cookie:\" line. \n+    cookies = ''\n+    if request.cookiejar:\n+        cookies = cookies.join(['-b \"%s=%s\" ' % (k.name, k.value) for k in request.cookiejar]) \n+\n     #: -H/--header - Extra header to use when getting a web page\n     header = ''\n     if request.headers:\n@@ -216,5 +223,5 @@ def curl_from_request(request):\n                 form = \"-d '%s' \" % (request._enc_data)\n \n     #: Params handled in _build_url\n-    return curl + auth + method + header + form + '\"' + request._build_url() + '\"'\n+    return curl + auth + method + header + cookies + form + '\"' + request._build_url() + '\"'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b97b4439c0ab264d36a2fbc1af07c0631bca2fbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 30 | Churn Cumulative: 383 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,36 @@ import re\n import zlib\n \n \n+def header_expand(header_dict):\n+    \"\"\"Returns an HTTP Header value string from a dictionary.\n+\n+    Example expansion::\n+\n+        # Accept: text/x-dvi; q=.8; mxb=100000; mxt=5.0, text/x-c\n+        {'text/x-dvi': {'q': '.8', 'mxb': '100000', 'mxt': '5.0'}, 'text/x-c': {}}\n+    \"\"\"\n+\n+    collector = []\n+\n+    for i, (value, params) in enumerate(header_dict.items()):\n+        _params = []\n+\n+        for p_k, p_v in params.items():\n+\n+            _params.append('{k}={v}'.format(k=p_k, v=p_v))\n+\n+        if len(params):\n+            collector.append(value)\n+            collector.append('; ')\n+            collector.append('; '.join(_params))\n+\n+            if not len(header_dict) == i+1:\n+                collector.append(', ')\n+\n+    return ''.join(collector)\n+\n+\n+\n def dict_from_cookiejar(cj):\n     \"\"\"Returns a key/value dictionary from a CookieJar.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e272ec13c36fa83f4e14d8bfc7a3b63ab7cd08b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 31 | Churn Cumulative: 414 | Contributors (this commit): 2 | Commits (past 90d): 22 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,32 +15,49 @@ import re\n import zlib\n \n \n-def header_expand(header_dict):\n+def header_expand(headers):\n     \"\"\"Returns an HTTP Header value string from a dictionary.\n \n     Example expansion::\n \n-        # Accept: text/x-dvi; q=.8; mxb=100000; mxt=5.0, text/x-c\n         {'text/x-dvi': {'q': '.8', 'mxb': '100000', 'mxt': '5.0'}, 'text/x-c': {}}\n+        # Accept: text/x-dvi; q=.8; mxb=100000; mxt=5.0, text/x-c\n+\n+        (('text/x-dvi', {'q': '.8', 'mxb': '100000', 'mxt': '5.0'}), ('text/x-c', {}))\n+        # Accept: text/x-dvi; q=.8; mxb=100000; mxt=5.0, text/x-c\n     \"\"\"\n \n     collector = []\n \n-    for i, (value, params) in enumerate(header_dict.items()):\n+    if isinstance(headers, dict):\n+\n+        # Assume header-tuple\n+        headers = headers.items()\n+\n+    # print headers\n+\n+    for i, (value, params) in enumerate(headers):\n+\n         _params = []\n \n-        for p_k, p_v in params.items():\n+        for (p_k, p_v) in params.items():\n \n-            _params.append('{k}={v}'.format(k=p_k, v=p_v))\n+            _params.append('%s=%s' % (p_k, p_v))\n \n-        if len(params):\n         collector.append(value)\n         collector.append('; ')\n+\n+        if len(params):\n+\n             collector.append('; '.join(_params))\n \n-            if not len(header_dict) == i+1:\n+            if not len(headers) == i+1:\n                 collector.append(', ')\n \n+\n+    if collector[-1] in (', ', '; '):\n+        del collector[-1]\n+\n     return ''.join(collector)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b9fc987b86fc536f1ad6a91c6c12e31ba4dcf91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 419 | Contributors (this commit): 2 | Commits (past 90d): 23 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -30,12 +30,8 @@ def header_expand(headers):\n     collector = []\n \n     if isinstance(headers, dict):\n-\n-        # Assume header-tuple\n         headers = headers.items()\n \n-    # print headers\n-\n     for i, (value, params) in enumerate(headers):\n \n         _params = []\n@@ -55,6 +51,7 @@ def header_expand(headers):\n                 collector.append(', ')\n \n \n+    # Remove trailing seperators.\n     if collector[-1] in (', ', '; '):\n         del collector[-1]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2fa180e9ea63b4b2a8992b5d750fe7b5f650b006", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 596 | Contributors (this commit): 6 | Commits (past 90d): 22 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,7 +15,7 @@ import config\n from .models import Request, Response, AuthObject\n from .status_codes import codes\n from .hooks import dispatch_hook\n-from .utils import cookiejar_from_dict\n+from .utils import cookiejar_from_dict, header_expand\n \n from urlparse import urlparse\n \n@@ -48,6 +48,14 @@ def request(method, url,\n \n     cookies = cookiejar_from_dict(cookies)\n \n+    # Expand header values\n+    if headers:\n+        for k, v in headers.items() or {}:\n+            headers[k] = header_expand(v)\n+\n+    # headers = [(k, map(header_expand, v)) for k,v in headers.items()]\n+    # print headers\n+\n     args = dict(\n         method = method,\n         url = url,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dba7a5a7e20d0dd2a8781c7b2a79eb50c9a60e0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 422 | Contributors (this commit): 2 | Commits (past 90d): 24 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -32,6 +32,9 @@ def header_expand(headers):\n     if isinstance(headers, dict):\n         headers = headers.items()\n \n+    elif isinstance(headers, basestring):\n+        return headers\n+\n     for i, (value, params) in enumerate(headers):\n \n         _params = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35fc3b4dbb6c0b87f97c183dfae14289eb87d60d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 599 | Contributors (this commit): 6 | Commits (past 90d): 23 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -53,9 +53,6 @@ def request(method, url,\n         for k, v in headers.items() or {}:\n             headers[k] = header_expand(v)\n \n-    # headers = [(k, map(header_expand, v)) for k,v in headers.items()]\n-    # print headers\n-\n     args = dict(\n         method = method,\n         url = url,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#58d63d55bc0cbbb1d543a4165f2e80a808c5577e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 26 | Churn Cumulative: 448 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -169,11 +169,21 @@ def decode_gzip(content):\n \n \n def curl_from_request(request):\n-    \"\"\"Creates a curl command from the request.\"\"\"\n+    \"\"\"Returns a curl command from the request.\n+\n+    :param request: The :class:`Request <Request>` object\n+\n+    Example:\n+        | import requests\n+        | from requests.utils import curl_from_request\n+        | r = requests.get('http://httpbin.org/get')\n+        | curl_from_request(r.request)\n+\n+    \"\"\"\n \n     #TODO - OAuth\n \n-    #: -L/--location - if there is a redirect, redo request on the new place\n+    #: -L/--location - if there is a redirect, redo request on the new place.\n     curl = 'curl -L '\n \n     #: -u/--user - Specify the user name and password to use for server auth.\n@@ -184,10 +194,10 @@ def curl_from_request(request):\n \n     method = ''\n     if request.method.upper() == 'HEAD':\n-        #: -I/--head - fetch headers only\n+        #: -I/--head - fetch headers only.\n         method = '-I '\n     else:\n-        #: -X/--request - specify request method\n+        #: -X/--request - specify request method.\n         method = '-X %s ' % request.method.upper()\n \n     #: -b/--cookie\n@@ -197,15 +207,15 @@ def curl_from_request(request):\n     if request.cookiejar:\n         cookies = cookies.join(['-b \"%s=%s\" ' % (k.name, k.value) for k in request.cookiejar])\n \n-    #: -H/--header - Extra header to use when getting a web page\n+    #: -H/--header - Extra header to use when getting a web page.\n     header = ''\n     if request.headers:\n         header = header.join(['-H \"%s:%s\" ' % (k, v) for k, v in request.headers.iteritems()])\n \n     form = ''\n     if request.method in ('PUT', 'POST', 'PATCH'):\n-        #: request.files is updated with request.data if both exist.\n-        #: ContentType multipart/form-data is used\n+        #: request.files is updated with request.data if both exist, so only iterate request.files.\n+        #: ContentType multipart/form-data is used.\n         if request.files:\n            #: -F/--form - Emulate form data. To force 'content' to a file, prefix file name @.\n             for k, v in request.files.iteritems():\n@@ -214,7 +224,7 @@ def curl_from_request(request):\n                 elif v not in (None, ''):\n                     form = form + '-F \"%s=%s\" ' % (k, v)\n \n-        #: content-type application/x-www-form-urlencoded is used here\n+        #: content-type application/x-www-form-urlencoded is used here.\n         else:\n             #: -d/--data - send specified data in post request.\n             if isinstance(request.data, (list, tuple)):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1ecb593c7be7d6465cf61356f3bdada3849b84fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 2 | Churn Cumulative: 450 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -150,6 +150,8 @@ def get_encoding_from_headers(headers):\n     \"\"\"\n \n     content_type = headers.get('content-type')\n+    if not content_type :\n+        return\n     content_type, params = cgi.parse_header(content_type)\n \n     if 'charset' in params:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6d25fff3f93eb89a87742bf3be24fa87724fe550", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 454 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -150,8 +150,10 @@ def get_encoding_from_headers(headers):\n     \"\"\"\n \n     content_type = headers.get('content-type')\n+\n     if not content_type:\n-        return\n+        return None\n+\n     content_type, params = cgi.parse_header(content_type)\n \n     if 'charset' in params:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#07dd324e2f78ee208e35d3faa963ebab237ff95f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 184 | Lines Deleted: 203 | Files Changed: 6 | Hunks: 6 | Methods Changed: 10 | Complexity Δ (Sum/Max): -6/11 | Churn Δ: 387 | Churn Cumulative: 710 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 7 | DMM Complexity: 0.5\n\nDIFF:\n@@ -0,0 +1,184 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.hooks\n+~~~~~~~~~~~~~~\n+\n+This module provides the capabilities for the Requests hooks system.\n+\n+Available hooks:\n+\n+``args``:\n+    A dictionary of the arguments being sent to Request().\n+\n+``pre_request``:\n+    The Request object, directly before being sent.\n+\n+``post_request``:\n+    The Request object, directly after being sent.\n+\n+``response``:\n+    The response generated from a Request.\n+\n+\"\"\"\n+\n+import warnings\n+from collections import Iterable\n+import config\n+import zlib\n+import bz2\n+from cgi import parse_header\n+\n+def setup_hooks(supplied):\n+    \"\"\"Setup a hooks mapping, based on the supplied argument. Eache mapping\n+    value will be list of hooks that will extend the **default_hooks**.\n+\n+    :param supplied: a dictionary of hooks. Each value can either be a callable\n+                     or a list of callables.\n+    :type supplied: dict\n+    :returns: a dictionary of hooks that extends the **default_hooks** dictionary.\n+    :rtype: dict\n+    \"\"\"\n+\n+    # Copy the default hooks settings.\n+    default = config.settings.default_hooks\n+    dispatching = dict([(k, v[:]) for k, v in default.items()])\n+\n+    # I abandoned the idea of a dictionary of sets because sets may not keep\n+    # insertion order, while it may be important. Also, there is no real reason\n+    # to force hooks to run once.\n+    for hooks, values in supplied.items():\n+        hook_list = values if isinstance(values, Iterable) else [values]\n+        dispatching[hooks].extend(hook_list)\n+\n+    # If header is set by config, maybe response is encoded.\n+    if config.settings.base_headers.get('Accept-Encoding', ''):\n+        if not decode_encoding in dispatching['response']:\n+            # It's safer to put decoding as first hook.\n+            dispatching['response'].insert(0, decode_encoding)\n+\n+    if config.settings.decode_unicode:\n+        try:\n+            # Try unicode encoding just after content decoding...\n+            index = dispatching['response'].index(decode_encoding) + 1\n+        except ValueError:\n+            # ... Or as first hook\n+            index = 0\n+        dispatching['response'].insert(index, decode_unicode)\n+\n+    return dispatching\n+\n+def dispatch_hooks(hooks, data):\n+    \"\"\"Dispatches multiple hooks on a given piece of data.\n+\n+    :param key: the hooks group to lookup\n+    :type key: str\n+    :param hooks: the hooks dictionary. The value of each key can be a callable\n+                  object, or a list of callable objects.\n+    :type hooks: dict\n+    :param data: the object on witch the hooks should be applied\n+    :type data: object\n+    \"\"\"\n+    for hook in hooks:\n+        try:\n+            # hook must be a callable.\n+            data = hook(data)\n+\n+        except Exception, why:\n+\n+            # Letting users to choose a policy may be an idea. It can be as\n+            # simple as \"be gracefull, or not\":\n+            #\n+            # config.settings.gracefull_hooks = True | False\n+            if not config.settings.gracefull_hooks: raise\n+\n+            warnings.warn(str(why))\n+\n+    return data\n+\n+#: Example response hook that turns a JSON formatted\n+#: :py:class:`requests.models.Response.content` into a dumped data structure::\n+#:\n+#:    try:\n+#:        import json\n+#:    except ImportError:\n+#:        try:\n+#:            import simplejson as json\n+#:        except ImportError:\n+#:            json = False\n+#:\n+#:    if json:\n+#:        def json_content(r):\n+#:            \"\"\"Turns content into a dumped JSON structure.\"\"\"\n+#:            r._content = json.dumps(r.content)\n+#:            return r\n+#:\n+#: Example response hook that turns an XML formatted\n+#: :py:class:`requests.models.Response.content` into an ElementTree::\n+#:\n+#:    try:\n+#:        from lxml import etree\n+#:    except ImportError:\n+#:        try:\n+#:            import xml.etree.cElementTree as etree\n+#:        except ImportError:\n+#:            try:\n+#:                import xml.etree.ElementTree as etree\n+#:            except ImportError:\n+#:                try:\n+#:                    import cElementTree as etree\n+#:                except ImportError:\n+#:                    try:\n+#:                        import elementtree.ElementTree as etree\n+#:                    except ImportError:\n+#:                        etree = False\n+#:\n+#:    if etree:\n+#:        def etree_content(r):\n+#:            \"\"\"Turns content into an ElementTree structure.\"\"\"\n+#:            r._content = etree.fromstring(r.content)\n+#:            return r\n+\n+def decode_unicode(r):\n+    \"\"\"Encode content into unicode string.\n+\n+       :param r: response object\n+       :type r: :py:class:`requests.models.Response`\n+       :returns: the same input object.\n+       :rtype: :py:class:`requests.models.Response`\n+    \"\"\"\n+    content_type, params = parse_header(r.headers['content-type'])\n+    charset = params.get('charset', '').strip(\"'\\\"\")\n+    r._content = unicode(r.content, charset) if charset else unicode(r.content)\n+    return r\n+\n+def decode_encoding(r):\n+    \"\"\"Decode content using Contetn-Encoding header.\n+\n+       :param r: response object\n+       :type r: :py:class:`requests.models.Response`\n+       :returns: the same input object.\n+       :rtype: :py:class:`requests.models.Response`\n+    \"\"\"\n+\n+    # Dictionary of content decoders.\n+    decode = {\n+        # No decoding applied.\n+        'identity': lambda content: content,\n+        # Decode Response content compressed with deflate.\n+        'deflate': lambda content: zlib.decompress(content),\n+        # Decode Response content compressed with gzip.\n+        'gzip': lambda content: zlib.decompress(content, 16+zlib.MAX_WBITS),\n+        # Decode Response content compressed with bz2.\n+        # Not a standard Content-Encoding value, but..\n+        'bzip2': lambda content: bz2.decompress(content),\n+    }\n+    # Decode Response content compressed with compress.\n+    # If I understood zlib...\n+    decode['compress'] = decode['deflate']\n+\n+    # Apply decoding only if the header is set.\n+    encoding = r.headers['content-encoding']\n+    if encoding:\n+        r._content = decode[encoding](r.content)\n+    return r\n\n@@ -1,97 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.hooks\n-~~~~~~~~~~~~~~\n-\n-This module provides the capabilities for the Requests hooks system.\n-\n-Available hooks:\n-\n-``args``:\n-    A dictionary of the arguments being sent to Request().\n-\n-``pre_request``:\n-    The Request object, directly before being sent.\n-\n-``post_request``:\n-    The Request object, directly after being sent.\n-\n-``response``:\n-    The response generated from a Request.\n-\n-\"\"\"\n-\n-import warnings\n-from collections import Iterable\n-from .. import config\n-from . import args\n-from . import pre_request\n-from . import post_request\n-from . import response\n-\n-def setup_hooks(supplied):\n-    \"\"\"Setup the supplied dictionary of hooks.\n-    Each value is a list of hooks and will extend **default_hooks**.\n-\n-    :param supplied: a dictionary of hooks. Each value can either be a callable\n-                     or a list of callables.\n-    :type supplied: dict\n-    :returns: a dictionary of hooks that extends the **default_hooks** dictionary.\n-    :rtype: dict\n-    \"\"\"\n-\n-    # Copy the default hooks settings.\n-    default = config.settings.default_hooks\n-    dispatching = dict([(k, v[:]) for k, v in default.items()])\n-\n-    # I abandoned the idea of a dictionary of sets because sets may not keep\n-    # insertion order, while it may be important. Also, there is no real reason\n-    # to force hooks to run once.\n-    for hooks, values in supplied.items():\n-        hook_list = values if isinstance(values, Iterable) else [values]\n-        dispatching[hooks].extends(hook_list)\n-\n-    # If header is set, maybe response is encoded. Whatever hook you want to\n-    # run on response, content decoding should be first.\n-    if config.settings.base_headers.get('Accept-Encoding', ''):\n-        dispatching['response'].insert(0, response.decode_encoding)\n-\n-    if config.settings.decode_unicode:\n-        try:\n-            # Try unicode encoding just after content decoding...\n-            index = dispatching['response'].index(response.decode_encoding) + 1\n-        except ValueError:\n-            # ... Or as first hook\n-            index = 0\n-        dispatching['response'].insert(index, response.decode_unicode)\n-\n-    return dispatching\n-\n-def dispatch_hooks(hooks, data):\n-    \"\"\"Dispatches multiple hooks on a given piece of data.\n-\n-    :param key: the hooks group to lookup\n-    :type key: str\n-    :param hooks: the hooks dictionary. The value of each key can be a callable\n-                  object, or a list of callable objects.\n-    :type hooks: dict\n-    :param data: the object on witch the hooks should be applied\n-    :type data: object\n-    \"\"\"\n-    for hook in hooks:\n-        try:\n-            # hook must be a callable.\n-            data = hook(data)\n-\n-        except Exception, why:\n-\n-            # Letting users to choose a policy may be an idea. It can be as\n-            # simple as \"be gracefull, or not\":\n-            #\n-            # config.settings.gracefull_hooks = True | False\n-            if not config.settings.gracefull_hooks: raise\n-\n-            warnings.warn(str(why))\n-\n-    return data\n\n@@ -1,7 +0,0 @@\n-\"\"\"\n-request.hooks.args\n-~~~~~~~~~~~~~~~~~~\n-\n-This module provide a collection of args hooks.\n-\"\"\"\n-\n\n@@ -1,7 +0,0 @@\n-\"\"\"\n-request.hooks.post_request\n-~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-This module provide a collection of post_request hooks.\n-\"\"\"\n-\n\n@@ -1,7 +0,0 @@\n-\"\"\"\n-request.hooks.pre_request\n-~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-This module provide a collection of pre_request hooks.\n-\"\"\"\n-\n\n@@ -1,85 +0,0 @@\n-\"\"\"\n-request.hooks.response\n-~~~~~~~~~~~~~~~~~~~~~~\n-\n-This module provide a collection of response hooks.\n-\"\"\"\n-import zlib\n-import bz2\n-from cgi import parse_header\n-\n-try:\n-    import json\n-except ImportError:\n-    try:\n-        import simplejson as json\n-    except ImportError:\n-        json = False\n-try:\n-    from lxml import etree\n-except ImportError:\n-    try:\n-        import xml.etree.cElementTree as etree\n-    except ImportError:\n-        try:\n-            import xml.etree.ElementTree as etree\n-        except ImportError:\n-            try:\n-                import cElementTree as etree\n-            except ImportError:\n-                try:\n-                    import elementtree.ElementTree as etree\n-                except ImportError:\n-                    etree = False\n-\n-#: Dictionary of content decoders.\n-content_decoders = {\n-    # No decoding applied.\n-    'identity': lambda content: content,\n-    # Decode Response file object compressed with deflate.\n-    'deflate': lambda content: zlib.decompress(content),\n-    # Decode Response file object compressed with gzip.\n-    'gzip': lambda content: zlib.decompress(content, 16+zlib.MAX_WBITS),\n-    # Decode Response file object compressed with bz2.\n-    # Not a standard Content-Encoding value, but..\n-    'bzip2': lambda content: bz2.decompress(content),\n-}\n-\n-# Decode Response file object compressed with compress.\n-content_decoders['compress'] = content_decoders['deflate']\n-\n-def decode_unicode(r):\n-    \"\"\"Encode a :py:class:`requests.models.Response` file object in unicode.\"\"\"\n-    content_type, params = parse_header(r.headers['content-type'])\n-    charset = params.get('charset', '').strip(\"'\\\"\")\n-    r._content = unicode(r.content, charset) if charset else unicode(r.content)\n-    return r\n-\n-def decode_encoding(r):\n-    \"\"\"\n-        Decode a :py:class:`requests.models.Response` content using\n-        Contetn-Encoding header.\n-    \"\"\"\n-    # Apply decoding only if the header is set.\n-    encoding = r.headers['content-encoding']\n-    if encoding:\n-        r._content = content_decoders[encoding](r.content)\n-    return r\n-\n-if json:\n-    def json_content(r):\n-        \"\"\"\n-            Turns :py:class:`requests.models.Response` content into a dumped\n-            JSON structure.\n-        \"\"\"\n-        r._content = json.dumps(r.content)\n-        return r\n-\n-if etree:\n-    def etree_content(r):\n-        \"\"\"\n-            Turns :py:class:`requests.models.Response` content into an\n-            ElementTree structure.\n-        \"\"\"\n-        r._content = etree.fromstring(r.content)\n-        return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#824d54f13111387df941f7e6f02b8ac064bec04e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 7 | Churn Cumulative: 1490 | Contributors (this commit): 14 | Commits (past 90d): 80 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -224,8 +224,11 @@ class Request(object):\n \n                 # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n-                if not urlparse(url).netloc:\n-                    url = urljoin(r.url, urllib.quote(urllib.unquote(url)))\n+                parsed_url = urlparse(url)\n+                if not parsed_url.netloc:\n+                    parsed_url = list(parsed_url)\n+                    parsed_url[2] = urllib.quote(urllib.unquote(parsed_url[2]))\n+                    url = urljoin(r.url, str(urlunparse(parsed_url)))\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is codes.see_other:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f84ce72f28a58afa782db585a86aa10632447df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): -6/2 | Churn Δ: 16 | Churn Cumulative: 3100 | Contributors (this commit): 21 | Commits (past 90d): 131 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -95,6 +95,9 @@ def get(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n+    if \"allow_redirects\" not in kwargs:\n+        kwargs[\"allow_redirects\"] = True\n+\n     return request('get', url, **kwargs)\n \n \n@@ -105,6 +108,9 @@ def head(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n+    if \"allow_redirects\" not in kwargs:\n+        kwargs[\"allow_redirects\"] = True\n+\n     return request('head', url, **kwargs)\n \n \n\n@@ -212,8 +212,7 @@ class Request(object):\n \n             while (\n                 ('location' in r.headers) and\n-                ((self.method in ('GET', 'HEAD')) or\n-                (r.status_code is codes.see_other) or\n+                ((r.status_code is codes.see_other) or\n                 (self.allow_redirects))\n             ):\n \n\n@@ -60,6 +60,13 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(httpbin('/'))\n         self.assertEqual(r.status_code, 200)\n \n+    def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n+\tr = requests.get(httpbin('redirect', '1'))\n+\tself.assertEqual(r.status_code, 200)\n+\n+    def test_HTTP_302_GET(self):\n+\tr = requests.get(httpbin('redirect', '1'), allow_redirects=False)\n+\tself.assertEqual(r.status_code, 302)\n \n     def test_HTTPS_200_OK_GET(self):\n         r = requests.get(httpsbin('/'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#41876fd8c6b7146026acfe58b18ceeb21aed3069", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 9 | Methods Changed: 6 | Complexity Δ (Sum/Max): 18/9 | Churn Δ: 64 | Churn Cumulative: 2011 | Contributors (this commit): 17 | Commits (past 90d): 110 | Contributors (cumulative): 20 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -9,6 +9,7 @@ requests.models\n import urllib\n import urllib2\n import socket\n+import codecs\n import zlib\n \n \n@@ -21,7 +22,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicA\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .utils import dict_from_cookiejar, get_unicode_from_response, decode_gzip\n+from .utils import dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n from .status_codes import codes\n from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod, TooManyRedirects\n \n@@ -393,6 +394,7 @@ class Response(object):\n     def __init__(self):\n \n         self._content = None\n+        self._content_consumed = False\n \n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -435,6 +437,31 @@ class Response(object):\n \n         return not self.error\n \n+    def iter_content(self, chunk_size=10 * 1024, decode_unicode=None):\n+        \"\"\"Iterates over the response data.  This avoids reading the content\n+        at once into memory for large responses.  The chunk size is the number\n+        of bytes it should read into memory.  This is not necessarily the\n+        length of each item returned as decoding can take place.\n+        \"\"\"\n+        if self._content_consumed:\n+            raise RuntimeError('The content for this response was '\n+                               'already consumed')\n+\n+        def generate():\n+            while 1:\n+                chunk = self.fo.read(chunk_size)\n+                if not chunk:\n+                    break\n+                yield chunk\n+            self._content_consumed = True\n+        gen = generate()\n+        if 'gzip' in self.headers.get('content-encoding', ''):\n+            gen = stream_decode_gzip(gen)\n+        if decode_unicode is None:\n+            decode_unicode = settings.decode_unicode\n+        if decode_unicode:\n+            gen = stream_decode_response_unicode(gen, self)\n+        return gen\n \n     @property\n     def content(self):\n@@ -445,6 +472,10 @@ class Response(object):\n         if self._content is not None:\n             return self._content\n \n+        if self._content_consumed:\n+            raise RuntimeError('The content for this response was '\n+                               'already consumed')\n+\n         # Read the contents.\n         self._content = self.fo.read()\n \n@@ -459,6 +490,7 @@ class Response(object):\n         if settings.decode_unicode:\n             self._content = get_unicode_from_response(self)\n \n+        self._content_consumed = True\n         return self._content\n \n \n\n@@ -10,6 +10,7 @@ that are also useful for external consumption.\n \"\"\"\n \n import cgi\n+import codecs\n import cookielib\n import re\n import zlib\n@@ -177,6 +178,19 @@ def unicode_from_html(content):\n         return content\n \n \n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+    encoding = get_encoding_from_headers(r.headers)\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode('', final=True)\n+    if rv:\n+        yield rv\n+\n+\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n@@ -217,3 +231,19 @@ def decode_gzip(content):\n     \"\"\"\n \n     return zlib.decompress(content, 16 + zlib.MAX_WBITS)\n+\n+\n+def stream_decode_gzip(iterator):\n+    \"\"\"Stream decodes a gzip-encoded iterator\"\"\"\n+    try:\n+        dec = zlib.decompressobj(16 + zlib.MAX_WBITS)\n+        for chunk in iterator:\n+            rv = dec.decompress(chunk)\n+            if rv:\n+                yield rv\n+        buf = dec.decompress('')\n+        rv = buf + dec.flush()\n+        if rv:\n+            yield rv\n+    except zlib.error:\n+        pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0d6773c68ca04cc90c004cb3a98313dd035c5e22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 6 | Churn Cumulative: 1492 | Contributors (this commit): 15 | Commits (past 90d): 56 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -181,6 +181,11 @@ def unicode_from_html(content):\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n     encoding = get_encoding_from_headers(r.headers)\n+    if encoding is None:\n+        for item in iterator:\n+            yield item\n+        return\n+\n     decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n     for chunk in iterator:\n         rv = decoder.decode(chunk)\n\n@@ -477,6 +477,5 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r2.status_code, 200)\n \n \n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2aa32c16dcb905e303b2bc19ea95d616fba28adf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 7 | Churn Cumulative: 1010 | Contributors (this commit): 14 | Commits (past 90d): 28 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -513,10 +513,9 @@ class RequestsTestSuite(unittest.TestCase):\n        post2 = requests.post(httpsbin('post'), files={'some': open('test_requests.py')})\n        self.assertEqual(curl_from_request(post2.request), curl_str)\n \n-       #TODO - This doesn't seem right with \\ \\\n-       #curl_str = 'curl -L -X POST -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" -d \\'[{\"some\": \"json\"}]\\' \"http://httpbin.org/post\"' \n-       #post3 = requests.post(httpbin('post'), data='[{\"some\": \"json\"}]')\n-       #self.assertEqual(curl_from_request(post3.request), curl_str)\n+       curl_str = 'curl -L -X POST -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" -d \\'[{\"some\": \"json\"}]\\' \"http://httpbin.org/post\"' \n+       post3 = requests.post(httpbin('post'), data='[{\"some\": \"json\"}]')\n+       self.assertEqual(curl_from_request(post3.request), curl_str)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8da0abfa1a0b0de121bed615f419b4c9edaf95c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 91 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -22,9 +22,6 @@ if sys.argv[-1] == \"test\":\n \n required = []\n \n-if sys.version_info[:2] < (2,6):\n-    required.append('simplejson')\n-\n setup(\n     name='requests',\n     version=requests.__version__,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#45fabf4b9642b262e457d52660daefb160be3ad9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 99 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -12,12 +12,12 @@ except ImportError:\n \n \n \n-if sys.argv[-1] == \"publish\":\n-    os.system(\"python setup.py sdist upload\")\n+if 'publish' in sys.argv:\n+    os.system('python setup.py sdist upload')\n     sys.exit()\n \n-if sys.argv[-1] == \"test\":\n-    os.system(\"python test_requests.py\")\n+if 'test' in sys.argv:\n+    os.system('python test_requests.py')\n     sys.exit()\n \n required = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ccb9eb28e1c45e7b835f6d6fd74ff2e7e1a80eb2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 37 | Files Changed: 1 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 37 | Churn Cumulative: 185 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,48 +9,11 @@ This module provides the Requests settings feature set.\n \"\"\"\n \n class Settings(object):\n-    _singleton = {}\n-\n-    # attributes with defaults\n-    __attrs__ = []\n \n     def __init__(self, **kwargs):\n         super(Settings, self).__init__()\n \n-        self.__dict__ = self._singleton\n-\n-\n-    def __call__(self, *args, **kwargs):\n-        # new instance of class to call\n-        r = self.__class__()\n-\n-        # cache previous settings for __exit__\n-        r.__cache = self.__dict__.copy()\n-        map(self.__cache.setdefault, self.__attrs__)\n-\n-        # set new settings\n-        self.__dict__.update(*args, **kwargs)\n-\n-        return r\n-\n-\n-    def __enter__(self):\n-        pass\n-\n-\n-    def __exit__(self, *args):\n-\n-        # restore cached copy\n-        self.__dict__.update(self.__cache.copy())\n-        del self.__cache\n-\n-\n     def __getattribute__(self, key):\n-        if key in object.__getattribute__(self, '__attrs__'):\n-            try:\n-                return object.__getattribute__(self, key)\n-            except AttributeError:\n-                return None\n         return object.__getattribute__(self, key)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#058ef27178b49eb2a97bb5ea40a077248a58e234", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2653 | Contributors (this commit): 7 | Commits (past 90d): 9 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.1'\n-__build__ = 0x000601\n+__version__ = '0.6.2 (dev)'\n+__build__ = 0x000602\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8914bd4d4c7e9e7638cdb43d5a3513315f19028", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 10 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.monkeys\n-\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#34e3c7b68febd3b320544e77037676a3a6f35f63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 610 | Contributors (this commit): 7 | Commits (past 90d): 24 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -17,10 +17,10 @@ from .status_codes import codes\n from .hooks import dispatch_hook\n from .utils import cookiejar_from_dict, header_expand\n \n-from urlparse import urlparse\n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n+\n def request(method, url,\n     params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n     timeout=None, allow_redirects=False, proxies=None, hooks=None):\n@@ -88,7 +88,6 @@ def request(method, url,\n \n \n def get(url, **kwargs):\n-\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -144,7 +143,7 @@ def patch(url, data='', **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-    return request('patch', url, **kwargs)\n+    return request('patch', url, data=data, **kwargs)\n \n \n def delete(url, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a8e77688f0a610bc8f8d304f2d15094aac149ac7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 17/15 | Churn Δ: 71 | Churn Cumulative: 3097 | Contributors (this commit): 23 | Commits (past 90d): 131 | Contributors (cumulative): 34 | DMM Complexity: 0.4444444444444444\n\nDIFF:\n@@ -9,6 +9,7 @@ requests.models\n import urllib\n import urllib2\n import socket\n+import codecs\n import zlib\n \n \n@@ -21,7 +22,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicA\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .utils import dict_from_cookiejar, get_unicode_from_response, decode_gzip\n+from .utils import dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n from .status_codes import codes\n from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod, TooManyRedirects\n \n@@ -396,6 +397,7 @@ class Response(object):\n     def __init__(self):\n \n         self._content = None\n+        self._content_consumed = False\n \n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -438,6 +440,31 @@ class Response(object):\n \n         return not self.error\n \n+    def iter_content(self, chunk_size=10 * 1024, decode_unicode=None):\n+        \"\"\"Iterates over the response data.  This avoids reading the content\n+        at once into memory for large responses.  The chunk size is the number\n+        of bytes it should read into memory.  This is not necessarily the\n+        length of each item returned as decoding can take place.\n+        \"\"\"\n+        if self._content_consumed:\n+            raise RuntimeError('The content for this response was '\n+                               'already consumed')\n+\n+        def generate():\n+            while 1:\n+                chunk = self.fo.read(chunk_size)\n+                if not chunk:\n+                    break\n+                yield chunk\n+            self._content_consumed = True\n+        gen = generate()\n+        if 'gzip' in self.headers.get('content-encoding', ''):\n+            gen = stream_decode_gzip(gen)\n+        if decode_unicode is None:\n+            decode_unicode = settings.decode_unicode\n+        if decode_unicode:\n+            gen = stream_decode_response_unicode(gen, self)\n+        return gen\n \n     @property\n     def content(self):\n@@ -448,6 +475,10 @@ class Response(object):\n         if self._content is not None:\n             return self._content\n \n+        if self._content_consumed:\n+            raise RuntimeError('The content for this response was '\n+                               'already consumed')\n+\n         # Read the contents.\n         self._content = self.fo.read()\n \n@@ -462,6 +493,7 @@ class Response(object):\n         if settings.decode_unicode:\n             self._content = get_unicode_from_response(self)\n \n+        self._content_consumed = True\n         return self._content\n \n \n\n@@ -10,6 +10,7 @@ that are also useful for external consumption.\n \"\"\"\n \n import cgi\n+import codecs\n import cookielib\n import re\n import zlib\n@@ -177,6 +178,24 @@ def unicode_from_html(content):\n         return content\n \n \n+def stream_decode_response_unicode(iterator, r):\n+    \"\"\"Stream decodes a iterator.\"\"\"\n+    encoding = get_encoding_from_headers(r.headers)\n+    if encoding is None:\n+        for item in iterator:\n+            yield item\n+        return\n+\n+    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    for chunk in iterator:\n+        rv = decoder.decode(chunk)\n+        if rv:\n+            yield rv\n+    rv = decoder.decode('', final=True)\n+    if rv:\n+        yield rv\n+\n+\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n@@ -217,8 +236,25 @@ def decode_gzip(content):\n     \"\"\"\n \n     return zlib.decompress(content, 16+zlib.MAX_WBITS)\n+    return zlib.decompress(content, 16+zlib.MAX_WBITS)\n+    return zlib.decompress(content, 16 + zlib.MAX_WBITS)\n \n \n+def stream_decode_gzip(iterator):\n+    \"\"\"Stream decodes a gzip-encoded iterator\"\"\"\n+    try:\n+        dec = zlib.decompressobj(16 + zlib.MAX_WBITS)\n+        for chunk in iterator:\n+            rv = dec.decompress(chunk)\n+            if rv:\n+                yield rv\n+        buf = dec.decompress('')\n+        rv = buf + dec.flush()\n+        if rv:\n+            yield rv\n+    except zlib.error:\n+        pass\n+\n def curl_from_request(request):\n     \"\"\"Returns a curl command from the request.\n \n\n@@ -478,6 +478,7 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r2.status_code, 200)\n \n \n+\n     def test_curl_HTTP_OK_GET(self):\n         curl_str = 'curl -L -X GET -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" \"http://httpbin.org//\"'\n         r = requests.get(httpbin('/'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
