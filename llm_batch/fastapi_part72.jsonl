{"custom_id": "fastapi#d0fcfd0dff42128cf8e45a72046e6a28c85518fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1176 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -378,7 +378,7 @@ def get_discussion_nodes(settings: Settings) -> List[DiscussionsNode]:\n \n \n def get_discussions_experts(\n-    discussion_nodes: List[DiscussionsNode]\n+    discussion_nodes: List[DiscussionsNode],\n ) -> DiscussionExpertsResults:\n     commenters = Counter()\n     last_month_commenters = Counter()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#009b14846362b0249303e49d00c3187859a5e176", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1102 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -54,7 +54,7 @@ class OAuth2PasswordRequestForm:\n     Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n     You could have custom internal logic to separate it by colon caracters (`:`) or\n     similar, and get the two parts `items` and `read`. Many applications do that to\n-    group and organize permisions, you could do it as well in your application, just\n+    group and organize permissions, you could do it as well in your application, just\n     know that that it is application specific, it's not part of the specification.\n     \"\"\"\n \n@@ -196,7 +196,7 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n     Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n     You could have custom internal logic to separate it by colon caracters (`:`) or\n     similar, and get the two parts `items` and `read`. Many applications do that to\n-    group and organize permisions, you could do it as well in your application, just\n+    group and organize permissions, you could do it as well in your application, just\n     know that that it is application specific, it's not part of the specification.\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ee6403212b97a81190b49ada21c8c438315d049d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 7525 | Contributors (this commit): 33 | Commits (past 90d): 2 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -1019,7 +1019,7 @@ class FastAPI(Starlette):\n                     oauth2_redirect_url = root_path + oauth2_redirect_url\n                 return get_swagger_ui_html(\n                     openapi_url=openapi_url,\n-                    title=self.title + \" - Swagger UI\",\n+                    title=f\"{self.title} - Swagger UI\",\n                     oauth2_redirect_url=oauth2_redirect_url,\n                     init_oauth=self.swagger_ui_init_oauth,\n                     swagger_ui_parameters=self.swagger_ui_parameters,\n@@ -1043,7 +1043,7 @@ class FastAPI(Starlette):\n                 root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                 openapi_url = root_path + self.openapi_url\n                 return get_redoc_html(\n-                    openapi_url=openapi_url, title=self.title + \" - ReDoc\"\n+                    openapi_url=openapi_url, title=f\"{self.title} - ReDoc\"\n                 )\n \n             self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9c80842ceaf86f2ecb68ae7b3be47ea5e622c260", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 12 | Hunks: 12 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 23230 | Contributors (this commit): 92 | Commits (past 90d): 21 | Contributors (cumulative): 168 | DMM Complexity: None\n\nDIFF:\n@@ -40,7 +40,7 @@ from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n from starlette.types import ASGIApp, Lifespan, Receive, Scope, Send\n-from typing_extensions import Annotated, Doc, deprecated  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc, deprecated\n \n AppType = TypeVar(\"AppType\", bound=\"FastAPI\")\n \n\n@@ -1,7 +1,7 @@\n from typing import Any, Callable\n \n from starlette.background import BackgroundTasks as StarletteBackgroundTasks\n-from typing_extensions import Annotated, Doc, ParamSpec  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc, ParamSpec\n \n P = ParamSpec(\"P\")\n \n\n@@ -24,7 +24,7 @@ from starlette.datastructures import Headers as Headers  # noqa: F401\n from starlette.datastructures import QueryParams as QueryParams  # noqa: F401\n from starlette.datastructures import State as State  # noqa: F401\n from starlette.datastructures import UploadFile as StarletteUploadFile\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class UploadFile(StarletteUploadFile):\n\n@@ -22,7 +22,7 @@ from pydantic import BaseModel\n from pydantic.color import Color\n from pydantic.networks import AnyUrl, NameEmail\n from pydantic.types import SecretBytes, SecretStr\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n from ._compat import PYDANTIC_V2, Url, _model_dump\n \n\n@@ -3,7 +3,7 @@ from typing import Any, Dict, Optional, Sequence, Type, Union\n from pydantic import BaseModel, create_model\n from starlette.exceptions import HTTPException as StarletteHTTPException\n from starlette.exceptions import WebSocketException as StarletteWebSocketException\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class HTTPException(StarletteHTTPException):\n\n@@ -3,7 +3,7 @@ from typing import Any, Dict, Optional\n \n from fastapi.encoders import jsonable_encoder\n from starlette.responses import HTMLResponse\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n swagger_ui_default_parameters: Annotated[\n     Dict[str, Any],\n\n@@ -3,7 +3,7 @@ from typing import Any, Callable, Dict, List, Optional, Sequence, Union\n from fastapi import params\n from fastapi._compat import Undefined\n from fastapi.openapi.models import Example\n-from typing_extensions import Annotated, Doc, deprecated  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc, deprecated\n \n _Unset: Any = Undefined\n \n\n@@ -69,7 +69,7 @@ from starlette.routing import (\n from starlette.routing import Mount as Mount  # noqa\n from starlette.types import ASGIApp, Lifespan, Scope\n from starlette.websockets import WebSocket\n-from typing_extensions import Annotated, Doc, deprecated  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc, deprecated\n \n \n def _prepare_response_content(\n\n@@ -5,7 +5,7 @@ from fastapi.security.base import SecurityBase\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.status import HTTP_403_FORBIDDEN\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class APIKeyBase(SecurityBase):\n\n@@ -10,7 +10,7 @@ from fastapi.security.utils import get_authorization_scheme_param\n from pydantic import BaseModel\n from starlette.requests import Request\n from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class HTTPBasicCredentials(BaseModel):\n\n@@ -10,7 +10,7 @@ from starlette.requests import Request\n from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n \n # TODO: import from typing when deprecating Python 3.9\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class OAuth2PasswordRequestForm:\n\n@@ -5,7 +5,7 @@ from fastapi.security.base import SecurityBase\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.status import HTTP_403_FORBIDDEN\n-from typing_extensions import Annotated, Doc  # type: ignore [attr-defined]\n+from typing_extensions import Annotated, Doc\n \n \n class OpenIdConnect(SecurityBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#eec612ca8d79a6144d773af2229ef046c7a29138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 80 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 81 | Churn Cumulative: 2681 | Contributors (this commit): 32 | Commits (past 90d): 3 | Contributors (cumulative): 33 | DMM Complexity: 0.9777777777777777\n\nDIFF:\n@@ -1,6 +1,6 @@\n import inspect\n from contextlib import AsyncExitStack, contextmanager\n-from copy import deepcopy\n+from copy import copy, deepcopy\n from typing import (\n     Any,\n     Callable,\n@@ -384,6 +384,8 @@ def analyze_param(\n             field_info.annotation = type_annotation\n \n     if depends is not None and depends.dependency is None:\n+        # Copy `depends` before mutating it\n+        depends = copy(depends)\n         depends.dependency = type_annotation\n \n     if lenient_issubclass(\n\n@@ -0,0 +1,77 @@\n+from typing import TypeVar\n+\n+from fastapi import Depends, FastAPI\n+from fastapi.testclient import TestClient\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+T = TypeVar(\"T\")\n+\n+Dep = Annotated[T, Depends()]\n+\n+\n+class A:\n+    pass\n+\n+\n+class B:\n+    pass\n+\n+\n+@app.get(\"/a\")\n+async def a(dep: Dep[A]):\n+    return {\"cls\": dep.__class__.__name__}\n+\n+\n+@app.get(\"/b\")\n+async def b(dep: Dep[B]):\n+    return {\"cls\": dep.__class__.__name__}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_generic_parameterless_depends():\n+    response = client.get(\"/a\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"cls\": \"A\"}\n+\n+    response = client.get(\"/b\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"cls\": \"B\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"openapi\": \"3.1.0\",\n+        \"paths\": {\n+            \"/a\": {\n+                \"get\": {\n+                    \"operationId\": \"a_a_get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                            \"description\": \"Successful \" \"Response\",\n+                        }\n+                    },\n+                    \"summary\": \"A\",\n+                }\n+            },\n+            \"/b\": {\n+                \"get\": {\n+                    \"operationId\": \"b_b_get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                            \"description\": \"Successful \" \"Response\",\n+                        }\n+                    },\n+                    \"summary\": \"B\",\n+                }\n+            },\n+        },\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#50a880b39f09217ccb9b4144f9f5c8439af54cfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 467 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.110.0\"\n+__version__ = \"0.110.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#27da0d02a786c7a3ad45610516063960806371f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 370 | Files Changed: 73 | Hunks: 366 | Methods Changed: 212 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 401 | Churn Cumulative: 39759 | Contributors (this commit): 60 | Commits (past 90d): 76 | Contributors (cumulative): 241 | DMM Complexity: 0.0\n\nDIFF:\n@@ -30,5 +30,5 @@ async def create_item(request: Request):\n     try:\n         item = Item.model_validate(data)\n     except ValidationError as e:\n-        raise HTTPException(status_code=422, detail=e.errors())\n+        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n     return item\n\n@@ -20,10 +20,12 @@ from typing import (\n from fastapi.exceptions import RequestErrorModel\n from fastapi.types import IncEx, ModelNameMap, UnionType\n from pydantic import BaseModel, create_model\n-from pydantic.version import VERSION as PYDANTIC_VERSION\n+from pydantic.version import VERSION as P_VERSION\n from starlette.datastructures import UploadFile\n from typing_extensions import Annotated, Literal, get_args, get_origin\n \n+# Reassign variable to make it reexported for mypy\n+PYDANTIC_VERSION = P_VERSION\n PYDANTIC_V2 = PYDANTIC_VERSION.startswith(\"2.\")\n \n \n@@ -127,7 +129,7 @@ if PYDANTIC_V2:\n                 )\n             except ValidationError as exc:\n                 return None, _regenerate_error_with_loc(\n-                    errors=exc.errors(), loc_prefix=loc\n+                    errors=exc.errors(include_url=False), loc_prefix=loc\n                 )\n \n         def serialize(\n@@ -266,7 +268,7 @@ if PYDANTIC_V2:\n     def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n         error = ValidationError.from_exception_data(\n             \"Field required\", [{\"type\": \"missing\", \"loc\": loc, \"input\": {}}]\n-        ).errors()[0]\n+        ).errors(include_url=False)[0]\n         error[\"input\"] = None\n         return error  # type: ignore[return-value]\n \n\n@@ -123,7 +123,7 @@ def get_openapi_operation_parameters(\n         elif field_info.example != Undefined:\n             parameter[\"example\"] = jsonable_encoder(field_info.example)\n         if field_info.deprecated:\n-            parameter[\"deprecated\"] = field_info.deprecated\n+            parameter[\"deprecated\"] = True\n         parameters.append(parameter)\n     return parameters\n \n\n@@ -240,7 +240,7 @@ def Path(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -565,7 +565,7 @@ def Query(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -880,7 +880,7 @@ def Header(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -1185,7 +1185,7 @@ def Cookie(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -1512,7 +1512,7 @@ def Body(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -1827,7 +1827,7 @@ def Form(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n@@ -2141,7 +2141,7 @@ def File(  # noqa: N802\n         ),\n     ] = None,\n     deprecated: Annotated[\n-        Optional[bool],\n+        Union[deprecated, str, bool, None],\n         Doc(\n             \"\"\"\n             Mark this parameter field as deprecated.\n\n@@ -6,7 +6,7 @@ from fastapi.openapi.models import Example\n from pydantic.fields import FieldInfo\n from typing_extensions import Annotated, deprecated\n \n-from ._compat import PYDANTIC_V2, Undefined\n+from ._compat import PYDANTIC_V2, PYDANTIC_VERSION, Undefined\n \n _Unset: Any = Undefined\n \n@@ -63,12 +63,11 @@ class Param(FieldInfo):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n     ):\n-        self.deprecated = deprecated\n         if example is not _Unset:\n             warnings.warn(\n                 \"`example` has been deprecated, please use `examples` instead\",\n@@ -106,6 +105,10 @@ class Param(FieldInfo):\n                 stacklevel=4,\n             )\n         current_json_schema_extra = json_schema_extra or extra\n+        if PYDANTIC_VERSION < \"2.7.0\":\n+            self.deprecated = deprecated\n+        else:\n+            kwargs[\"deprecated\"] = deprecated\n         if PYDANTIC_V2:\n             kwargs.update(\n                 {\n@@ -174,7 +177,7 @@ class Path(Param):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n@@ -260,7 +263,7 @@ class Query(Param):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n@@ -345,7 +348,7 @@ class Header(Param):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n@@ -430,7 +433,7 @@ class Cookie(Param):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n@@ -514,14 +517,13 @@ class Body(FieldInfo):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n     ):\n         self.embed = embed\n         self.media_type = media_type\n-        self.deprecated = deprecated\n         if example is not _Unset:\n             warnings.warn(\n                 \"`example` has been deprecated, please use `examples` instead\",\n@@ -559,6 +561,10 @@ class Body(FieldInfo):\n                 stacklevel=4,\n             )\n         current_json_schema_extra = json_schema_extra or extra\n+        if PYDANTIC_VERSION < \"2.7.0\":\n+            self.deprecated = deprecated\n+        else:\n+            kwargs[\"deprecated\"] = deprecated\n         if PYDANTIC_V2:\n             kwargs.update(\n                 {\n@@ -627,7 +633,7 @@ class Form(Body):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n@@ -712,7 +718,7 @@ class File(Form):\n             ),\n         ] = _Unset,\n         openapi_examples: Optional[Dict[str, Example]] = None,\n-        deprecated: Optional[bool] = None,\n+        deprecated: Union[deprecated, str, bool, None] = None,\n         include_in_schema: bool = True,\n         json_schema_extra: Union[Dict[str, Any], None] = None,\n         **extra: Any,\n\n@@ -221,9 +221,3 @@ def get_value_or_default(\n         if not isinstance(item, DefaultPlaceholder):\n             return item\n     return first_item\n-\n-\n-def match_pydantic_error_url(error_type: str) -> Any:\n-    from dirty_equals import IsStr\n-\n-    return IsStr(regex=rf\"^https://errors\\.pydantic\\.dev/.*/v/{error_type}\")\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import APIRouter, FastAPI, Query\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from typing_extensions import Annotated\n \n app = FastAPI()\n@@ -38,7 +37,6 @@ foo_is_missing = {\n                 \"msg\": \"Field required\",\n                 \"type\": \"missing\",\n                 \"input\": None,\n-                \"url\": match_pydantic_error_url(\"missing\"),\n             }\n         )\n         # TODO: remove when deprecating Pydantic v1\n@@ -60,7 +58,6 @@ foo_is_short = {\n                 \"msg\": \"String should have at least 1 character\",\n                 \"type\": \"string_too_short\",\n                 \"input\": \"\",\n-                \"url\": match_pydantic_error_url(\"string_too_short\"),\n             }\n         )\n         # TODO: remove when deprecating Pydantic v1\n\n@@ -3,7 +3,6 @@ from typing import List\n from dirty_equals import IsDict\n from fastapi import Depends, FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from pydantic import BaseModel\n \n app = FastAPI()\n@@ -57,7 +56,6 @@ def test_no_duplicates_invalid():\n                     \"loc\": [\"body\", \"item2\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -4,7 +4,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import APIRouter, Depends, FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n app = FastAPI()\n \n@@ -63,7 +62,6 @@ def test_main_depends():\n                     \"loc\": [\"query\", \"q\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -110,7 +108,6 @@ def test_decorator_depends():\n                     \"loc\": [\"query\", \"q\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -151,7 +148,6 @@ def test_router_depends():\n                     \"loc\": [\"query\", \"q\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -198,7 +194,6 @@ def test_router_decorator_depends():\n                     \"loc\": [\"query\", \"q\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -285,7 +280,6 @@ def test_override_with_sub_main_depends():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -316,7 +310,6 @@ def test_override_with_sub__main_depends_q_foo():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -355,7 +348,6 @@ def test_override_with_sub_decorator_depends():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -386,7 +378,6 @@ def test_override_with_sub_decorator_depends_q_foo():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -425,7 +416,6 @@ def test_override_with_sub_router_depends():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -456,7 +446,6 @@ def test_override_with_sub_router_depends_q_foo():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -495,7 +484,6 @@ def test_override_with_sub_router_decorator_depends():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -526,7 +514,6 @@ def test_override_with_sub_router_decorator_depends_q_foo():\n                     \"loc\": [\"query\", \"k\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -5,7 +5,6 @@ from dirty_equals import HasRepr, IsDict, IsOneOf\n from fastapi import Depends, FastAPI\n from fastapi.exceptions import ResponseValidationError\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from .utils import needs_pydanticv2\n \n@@ -67,7 +66,6 @@ def test_validator_is_cloned(client: TestClient):\n                 \"msg\": \"Value error, name must end in A\",\n                 \"input\": \"modelX\",\n                 \"ctx\": {\"error\": HasRepr(\"ValueError('name must end in A')\")},\n-                \"url\": match_pydantic_error_url(\"value_error\"),\n             }\n         )\n         | IsDict(\n\n@@ -4,7 +4,6 @@ from typing import List\n from dirty_equals import IsDict, IsOneOf\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from pydantic import BaseModel, condecimal\n \n app = FastAPI()\n@@ -52,7 +51,6 @@ def test_jsonable_encoder_requiring_error():\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -1.0,\n                     \"ctx\": {\"gt\": 0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -82,28 +80,24 @@ def test_put_incorrect_body_multiple():\n                     \"loc\": [\"body\", 0, \"name\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {\"age\": \"five\"},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"decimal_parsing\",\n                     \"loc\": [\"body\", 0, \"age\"],\n                     \"msg\": \"Input should be a valid decimal\",\n                     \"input\": \"five\",\n-                    \"url\": match_pydantic_error_url(\"decimal_parsing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", 1, \"name\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {\"age\": \"six\"},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"decimal_parsing\",\n                     \"loc\": [\"body\", 1, \"age\"],\n                     \"msg\": \"Input should be a valid decimal\",\n                     \"input\": \"six\",\n-                    \"url\": match_pydantic_error_url(\"decimal_parsing\"),\n                 },\n             ]\n         }\n\n@@ -3,7 +3,6 @@ from typing import List\n from dirty_equals import IsDict\n from fastapi import FastAPI, Query\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n app = FastAPI()\n \n@@ -33,14 +32,12 @@ def test_multi_query_incorrect():\n                     \"loc\": [\"query\", \"q\", 0],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"five\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n                 {\n                     \"type\": \"int_parsing\",\n                     \"loc\": [\"query\", \"q\", 1],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"six\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from .main import app\n \n@@ -54,7 +53,6 @@ def test_path_int_foobar():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foobar\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -83,7 +81,6 @@ def test_path_int_True():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"True\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -118,7 +115,6 @@ def test_path_int_42_5():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"42.5\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -147,7 +143,6 @@ def test_path_float_foobar():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                     \"input\": \"foobar\",\n-                    \"url\": match_pydantic_error_url(\"float_parsing\"),\n                 }\n             ]\n         }\n@@ -176,7 +171,6 @@ def test_path_float_True():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                     \"input\": \"True\",\n-                    \"url\": match_pydantic_error_url(\"float_parsing\"),\n                 }\n             ]\n         }\n@@ -217,7 +211,6 @@ def test_path_bool_foobar():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                     \"input\": \"foobar\",\n-                    \"url\": match_pydantic_error_url(\"bool_parsing\"),\n                 }\n             ]\n         }\n@@ -252,7 +245,6 @@ def test_path_bool_42():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                     \"input\": \"42\",\n-                    \"url\": match_pydantic_error_url(\"bool_parsing\"),\n                 }\n             ]\n         }\n@@ -281,7 +273,6 @@ def test_path_bool_42_5():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid boolean, unable to interpret input\",\n                     \"input\": \"42.5\",\n-                    \"url\": match_pydantic_error_url(\"bool_parsing\"),\n                 }\n             ]\n         }\n@@ -353,7 +344,6 @@ def test_path_param_minlength_fo():\n                     \"msg\": \"String should have at least 3 characters\",\n                     \"input\": \"fo\",\n                     \"ctx\": {\"min_length\": 3},\n-                    \"url\": match_pydantic_error_url(\"string_too_short\"),\n                 }\n             ]\n         }\n@@ -390,7 +380,6 @@ def test_path_param_maxlength_foobar():\n                     \"msg\": \"String should have at most 3 characters\",\n                     \"input\": \"foobar\",\n                     \"ctx\": {\"max_length\": 3},\n-                    \"url\": match_pydantic_error_url(\"string_too_long\"),\n                 }\n             ]\n         }\n@@ -427,7 +416,6 @@ def test_path_param_min_maxlength_foobar():\n                     \"msg\": \"String should have at most 3 characters\",\n                     \"input\": \"foobar\",\n                     \"ctx\": {\"max_length\": 3},\n-                    \"url\": match_pydantic_error_url(\"string_too_long\"),\n                 }\n             ]\n         }\n@@ -458,7 +446,6 @@ def test_path_param_min_maxlength_f():\n                     \"msg\": \"String should have at least 2 characters\",\n                     \"input\": \"f\",\n                     \"ctx\": {\"min_length\": 2},\n-                    \"url\": match_pydantic_error_url(\"string_too_short\"),\n                 }\n             ]\n         }\n@@ -494,7 +481,6 @@ def test_path_param_gt_2():\n                     \"msg\": \"Input should be greater than 3\",\n                     \"input\": \"2\",\n                     \"ctx\": {\"gt\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -531,7 +517,6 @@ def test_path_param_gt0_0():\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": \"0\",\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -574,7 +559,6 @@ def test_path_param_ge_2():\n                     \"msg\": \"Input should be greater than or equal to 3\",\n                     \"input\": \"2\",\n                     \"ctx\": {\"ge\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than_equal\"),\n                 }\n             ]\n         }\n@@ -605,7 +589,6 @@ def test_path_param_lt_42():\n                     \"msg\": \"Input should be less than 3\",\n                     \"input\": \"42\",\n                     \"ctx\": {\"lt\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"less_than\"),\n                 }\n             ]\n         }\n@@ -648,7 +631,6 @@ def test_path_param_lt0_0():\n                     \"msg\": \"Input should be less than 0\",\n                     \"input\": \"0\",\n                     \"ctx\": {\"lt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"less_than\"),\n                 }\n             ]\n         }\n@@ -679,7 +661,6 @@ def test_path_param_le_42():\n                     \"msg\": \"Input should be less than or equal to 3\",\n                     \"input\": \"42\",\n                     \"ctx\": {\"le\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"less_than_equal\"),\n                 }\n             ]\n         }\n@@ -728,7 +709,6 @@ def test_path_param_lt_gt_4():\n                     \"msg\": \"Input should be less than 3\",\n                     \"input\": \"4\",\n                     \"ctx\": {\"lt\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"less_than\"),\n                 }\n             ]\n         }\n@@ -759,7 +739,6 @@ def test_path_param_lt_gt_0():\n                     \"msg\": \"Input should be greater than 1\",\n                     \"input\": \"0\",\n                     \"ctx\": {\"gt\": 1.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -807,7 +786,6 @@ def test_path_param_le_ge_4():\n                     \"msg\": \"Input should be less than or equal to 3\",\n                     \"input\": \"4\",\n                     \"ctx\": {\"le\": 3.0},\n-                    \"url\": match_pydantic_error_url(\"less_than_equal\"),\n                 }\n             ]\n         }\n@@ -844,7 +822,6 @@ def test_path_param_lt_int_42():\n                     \"msg\": \"Input should be less than 3\",\n                     \"input\": \"42\",\n                     \"ctx\": {\"lt\": 3},\n-                    \"url\": match_pydantic_error_url(\"less_than\"),\n                 }\n             ]\n         }\n@@ -874,7 +851,6 @@ def test_path_param_lt_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -910,7 +886,6 @@ def test_path_param_gt_int_2():\n                     \"msg\": \"Input should be greater than 3\",\n                     \"input\": \"2\",\n                     \"ctx\": {\"gt\": 3},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -940,7 +915,6 @@ def test_path_param_gt_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -970,7 +944,6 @@ def test_path_param_le_int_42():\n                     \"msg\": \"Input should be less than or equal to 3\",\n                     \"input\": \"42\",\n                     \"ctx\": {\"le\": 3},\n-                    \"url\": match_pydantic_error_url(\"less_than_equal\"),\n                 }\n             ]\n         }\n@@ -1012,7 +985,6 @@ def test_path_param_le_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -1054,7 +1026,6 @@ def test_path_param_ge_int_2():\n                     \"msg\": \"Input should be greater than or equal to 3\",\n                     \"input\": \"2\",\n                     \"ctx\": {\"ge\": 3},\n-                    \"url\": match_pydantic_error_url(\"greater_than_equal\"),\n                 }\n             ]\n         }\n@@ -1084,7 +1055,6 @@ def test_path_param_ge_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -1120,7 +1090,6 @@ def test_path_param_lt_gt_int_4():\n                     \"msg\": \"Input should be less than 3\",\n                     \"input\": \"4\",\n                     \"ctx\": {\"lt\": 3},\n-                    \"url\": match_pydantic_error_url(\"less_than\"),\n                 }\n             ]\n         }\n@@ -1151,7 +1120,6 @@ def test_path_param_lt_gt_int_0():\n                     \"msg\": \"Input should be greater than 1\",\n                     \"input\": \"0\",\n                     \"ctx\": {\"gt\": 1},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n@@ -1181,7 +1149,6 @@ def test_path_param_lt_gt_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -1229,7 +1196,6 @@ def test_path_param_le_ge_int_4():\n                     \"msg\": \"Input should be less than or equal to 3\",\n                     \"input\": \"4\",\n                     \"ctx\": {\"le\": 3},\n-                    \"url\": match_pydantic_error_url(\"less_than_equal\"),\n                 }\n             ]\n         }\n@@ -1259,7 +1225,6 @@ def test_path_param_le_ge_int_2_7():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"2.7\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from .main import app\n \n@@ -18,7 +17,6 @@ def test_query():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -53,7 +51,6 @@ def test_query_not_declared_baz():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -100,7 +97,6 @@ def test_query_int():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -135,7 +131,6 @@ def test_query_int_query_42_5():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"42.5\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -164,7 +159,6 @@ def test_query_int_query_baz():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"baz\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -193,7 +187,6 @@ def test_query_int_not_declared_baz():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -234,7 +227,6 @@ def test_query_int_optional_query_foo():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -275,7 +267,6 @@ def test_query_int_default_query_foo():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n@@ -316,7 +307,6 @@ def test_query_param_required():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -351,7 +341,6 @@ def test_query_param_required_int():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -386,7 +375,6 @@ def test_query_param_required_int_query_foo():\n                     \"loc\": [\"query\", \"query\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI, Form\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from typing_extensions import Annotated\n \n from .utils import needs_py310\n@@ -55,7 +54,6 @@ def test_query_nonregexquery():\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI, Query\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from typing_extensions import Annotated\n \n from .utils import needs_py310\n@@ -55,7 +54,6 @@ def test_query_params_str_validations_item_query_nonregexquery():\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -2,7 +2,6 @@ from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from pydantic import BaseModel\n \n app = FastAPI()\n@@ -71,21 +70,18 @@ def test_strict_login_no_data():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -124,7 +120,6 @@ def test_strict_login_no_grant_type():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -157,7 +152,6 @@ def test_strict_login_incorrect_grant_type():\n                     \"msg\": \"String should match pattern 'password'\",\n                     \"input\": \"incorrect\",\n                     \"ctx\": {\"pattern\": \"password\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -4,7 +4,6 @@ from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from pydantic import BaseModel\n \n app = FastAPI()\n@@ -75,21 +74,18 @@ def test_strict_login_no_data():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -128,7 +124,6 @@ def test_strict_login_no_grant_type():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -161,7 +156,6 @@ def test_strict_login_incorrect_grant_type():\n                     \"msg\": \"String should match pattern 'password'\",\n                     \"input\": \"incorrect\",\n                     \"ctx\": {\"pattern\": \"password\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -4,7 +4,6 @@ from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n from pydantic import BaseModel\n \n app = FastAPI()\n@@ -76,21 +75,18 @@ def test_strict_login_None():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -129,7 +125,6 @@ def test_strict_login_no_grant_type():\n                     \"loc\": [\"body\", \"grant_type\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -162,7 +157,6 @@ def test_strict_login_incorrect_grant_type():\n                     \"msg\": \"String should match pattern 'password'\",\n                     \"input\": \"incorrect\",\n                     \"ctx\": {\"pattern\": \"password\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -29,7 +28,6 @@ def test_users_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -64,7 +62,6 @@ def test_users_foo_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -99,7 +96,6 @@ def test_users_me_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -145,7 +141,6 @@ def test_items_with_no_token_jessica(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -192,7 +187,6 @@ def test_items_plumbus_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -233,7 +227,6 @@ def test_items_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -262,7 +255,6 @@ def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -297,7 +289,6 @@ def test_root_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -326,14 +317,12 @@ def test_put_no_header(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -29,7 +28,6 @@ def test_users_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -64,7 +62,6 @@ def test_users_foo_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -99,7 +96,6 @@ def test_users_me_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -145,7 +141,6 @@ def test_items_with_no_token_jessica(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -192,7 +187,6 @@ def test_items_plumbus_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -233,7 +227,6 @@ def test_items_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -262,7 +255,6 @@ def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -297,7 +289,6 @@ def test_root_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -326,14 +317,12 @@ def test_put_no_header(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -33,7 +32,6 @@ def test_users_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -70,7 +68,6 @@ def test_users_foo_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -107,7 +104,6 @@ def test_users_me_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -156,7 +152,6 @@ def test_items_with_no_token_jessica(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -206,7 +201,6 @@ def test_items_plumbus_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -250,7 +244,6 @@ def test_items_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -280,7 +273,6 @@ def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -317,7 +309,6 @@ def test_root_with_no_token(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -347,14 +338,12 @@ def test_put_no_header(client: TestClient):\n                     \"loc\": [\"query\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -3,7 +3,6 @@ from unittest.mock import patch\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture\n@@ -74,7 +73,6 @@ def test_post_with_only_name(client: TestClient):\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {\"name\": \"Foo\"},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -103,7 +101,6 @@ def test_post_with_only_name_price(client: TestClient):\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                     \"input\": \"twenty\",\n-                    \"url\": match_pydantic_error_url(\"float_parsing\"),\n                 }\n             ]\n         }\n@@ -132,14 +129,12 @@ def test_post_with_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"name\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -173,7 +168,6 @@ def test_post_with_none(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -244,7 +238,6 @@ def test_post_form_for_json(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": \"name=Foo&price=50.5\",\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n@@ -308,9 +301,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\n-                        \"model_attributes_type\"\n-                    ),  # \"https://errors.pydantic.dev/0.38.0/v/dict_attributes_type\",\n                 }\n             ]\n         }\n@@ -339,7 +329,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n@@ -367,7 +356,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n\n@@ -3,7 +3,6 @@ from unittest.mock import patch\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -81,7 +80,6 @@ def test_post_with_only_name(client: TestClient):\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {\"name\": \"Foo\"},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -111,7 +109,6 @@ def test_post_with_only_name_price(client: TestClient):\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                     \"input\": \"twenty\",\n-                    \"url\": match_pydantic_error_url(\"float_parsing\"),\n                 }\n             ]\n         }\n@@ -141,14 +138,12 @@ def test_post_with_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"name\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Field required\",\n                     \"input\": {},\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -183,7 +178,6 @@ def test_post_with_none(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -256,7 +250,6 @@ def test_post_form_for_json(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": \"name=Foo&price=50.5\",\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n@@ -324,7 +317,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n@@ -353,7 +345,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n@@ -381,7 +372,6 @@ def test_wrong_headers(client: TestClient):\n                     \"loc\": [\"body\"],\n                     \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n                     \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                    \"url\": match_pydantic_error_url(\"model_attributes_type\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -57,7 +56,6 @@ def test_invalid_price(client: TestClient):\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -3.0,\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -57,7 +56,6 @@ def test_invalid_price(client: TestClient):\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -3.0,\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -62,7 +61,6 @@ def test_invalid_price(client: TestClient):\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -3.0,\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -62,7 +61,6 @@ def test_invalid_price(client: TestClient):\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -3.0,\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -62,7 +61,6 @@ def test_invalid_price(client: TestClient):\n                     \"msg\": \"Input should be greater than 0\",\n                     \"input\": -3.0,\n                     \"ctx\": {\"gt\": 0.0},\n-                    \"url\": match_pydantic_error_url(\"greater_than\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -50,7 +49,6 @@ def test_post_id_foo(client: TestClient):\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -50,7 +49,6 @@ def test_post_id_foo(client: TestClient):\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -56,7 +55,6 @@ def test_post_id_foo(client: TestClient):\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -56,7 +55,6 @@ def test_post_id_foo(client: TestClient):\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -56,7 +55,6 @@ def test_post_id_foo(client: TestClient):\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -46,21 +45,18 @@ def test_post_body_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -99,21 +95,18 @@ def test_post_body_empty_list(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -46,21 +45,18 @@ def test_post_body_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -99,21 +95,18 @@ def test_post_body_empty_list(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -50,21 +49,18 @@ def test_post_body_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -104,21 +100,18 @@ def test_post_body_empty_list(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -50,21 +49,18 @@ def test_post_body_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -104,21 +100,18 @@ def test_post_body_empty_list(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -50,21 +49,18 @@ def test_post_body_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -104,21 +100,18 @@ def test_post_body_empty_list(client: TestClient):\n                     \"loc\": [\"body\", \"item\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"user\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"importance\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -31,7 +30,6 @@ def test_post_invalid_body(client: TestClient):\n                     \"loc\": [\"body\", \"foo\", \"[key]\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -35,7 +34,6 @@ def test_post_invalid_body(client: TestClient):\n                     \"loc\": [\"body\", \"foo\", \"[key]\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.custom_request_and_route.tutorial002 import app\n \n@@ -23,7 +22,6 @@ def test_exception_handler_body_access():\n                         \"loc\": [\"body\"],\n                         \"msg\": \"Input should be a valid list\",\n                         \"input\": {\"numbers\": [1, 2, 3]},\n-                        \"url\": match_pydantic_error_url(\"list_type\"),\n                     }\n                 ],\n                 \"body\": '{\"numbers\": [1, 2, 3]}',\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.dataclasses.tutorial001 import app\n \n@@ -29,7 +28,6 @@ def test_post_invalid_item():\n                     \"loc\": [\"body\", \"price\"],\n                     \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n                     \"input\": \"invalid price\",\n-                    \"url\": match_pydantic_error_url(\"float_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.dependencies.tutorial006 import app\n \n@@ -18,14 +17,12 @@ def test_get_no_headers():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.dependencies.tutorial006_an import app\n \n@@ -18,14 +17,12 @@ def test_get_no_headers():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -26,14 +25,12 @@ def test_get_no_headers(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.dependencies.tutorial012 import app\n \n@@ -18,14 +17,12 @@ def test_get_no_headers_items():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -59,14 +56,12 @@ def test_get_no_headers_users():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.dependencies.tutorial012_an import app\n \n@@ -18,14 +17,12 @@ def test_get_no_headers_items():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -59,14 +56,12 @@ def test_get_no_headers_users():\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -26,14 +25,12 @@ def test_get_no_headers_items(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -68,14 +65,12 @@ def test_get_no_headers_users(client: TestClient):\n                     \"loc\": [\"header\", \"x-token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"header\", \"x-key\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.handling_errors.tutorial005 import app\n \n@@ -18,7 +17,6 @@ def test_post_validation_error():\n                     \"loc\": [\"body\", \"size\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"XL\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ],\n             \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.handling_errors.tutorial006 import app\n \n@@ -18,7 +17,6 @@ def test_get_validation_error():\n                     \"loc\": [\"path\", \"item_id\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"foo\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n import pytest\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_pydanticv2\n \n@@ -64,7 +63,6 @@ def test_post_invalid(client: TestClient):\n                 \"loc\": [\"tags\", 3],\n                 \"msg\": \"Input should be a valid string\",\n                 \"input\": {\"sneaky\": \"object\"},\n-                \"url\": match_pydantic_error_url(\"string_type\"),\n             }\n         ]\n     }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.query_params.tutorial005 import app\n \n@@ -24,7 +23,6 @@ def test_foo_no_needy():\n                     \"loc\": [\"query\", \"needy\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -34,21 +33,18 @@ def test_foo_no_needy(client: TestClient):\n                     \"loc\": [\"query\", \"needy\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"int_parsing\",\n                     \"loc\": [\"query\", \"skip\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"a\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n                 {\n                     \"type\": \"int_parsing\",\n                     \"loc\": [\"query\", \"limit\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"b\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -38,21 +37,18 @@ def test_foo_no_needy(client: TestClient):\n                     \"loc\": [\"query\", \"needy\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"int_parsing\",\n                     \"loc\": [\"query\", \"skip\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"a\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n                 {\n                     \"type\": \"int_parsing\",\n                     \"loc\": [\"query\", \"limit\"],\n                     \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n                     \"input\": \"b\",\n-                    \"url\": match_pydantic_error_url(\"int_parsing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -45,7 +44,6 @@ def test_query_params_str_validations_item_query_nonregexquery(client: TestClien\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -45,7 +44,6 @@ def test_query_params_str_validations_item_query_nonregexquery(client: TestClien\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -51,7 +50,6 @@ def test_query_params_str_validations_item_query_nonregexquery(client: TestClien\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -51,7 +50,6 @@ def test_query_params_str_validations_item_query_nonregexquery(client: TestClien\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py310\n \n@@ -51,7 +50,6 @@ def test_query_params_str_validations_item_query_nonregexquery(client: TestClien\n                     \"msg\": \"String should match pattern '^fixedquery$'\",\n                     \"input\": \"nonregexquery\",\n                     \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"url\": match_pydantic_error_url(\"string_pattern_mismatch\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.request_files.tutorial001 import app\n \n@@ -29,7 +28,6 @@ def test_post_form_no_body():\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -58,7 +56,6 @@ def test_post_body_json():\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.request_files.tutorial001_an import app\n \n@@ -18,7 +17,6 @@ def test_post_form_no_body():\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -47,7 +45,6 @@ def test_post_body_json():\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -26,7 +25,6 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -56,7 +54,6 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.request_files.tutorial002 import app\n \n@@ -18,7 +17,6 @@ def test_post_form_no_body():\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -47,7 +45,6 @@ def test_post_body_json():\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,6 +1,5 @@\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from docs_src.request_files.tutorial002_an import app\n \n@@ -18,7 +17,6 @@ def test_post_form_no_body():\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -47,7 +45,6 @@ def test_post_body_json():\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -32,7 +31,6 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -62,7 +60,6 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -43,7 +42,6 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -73,7 +71,6 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"files\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -29,7 +28,6 @@ def test_post_body_form_no_password(client: TestClient):\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -58,7 +56,6 @@ def test_post_body_form_no_username(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -87,14 +84,12 @@ def test_post_body_form_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -128,14 +123,12 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"client\")\n@@ -29,7 +28,6 @@ def test_post_body_form_no_password(client: TestClient):\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -58,7 +56,6 @@ def test_post_body_form_no_username(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -87,14 +84,12 @@ def test_post_body_form_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -128,14 +123,12 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -1,7 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -33,7 +32,6 @@ def test_post_body_form_no_password(client: TestClient):\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -63,7 +61,6 @@ def test_post_body_form_no_username(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 }\n             ]\n         }\n@@ -93,14 +90,12 @@ def test_post_body_form_no_data(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -135,14 +130,12 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"password\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"app\")\n@@ -29,21 +28,18 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -82,14 +78,12 @@ def test_post_form_no_file(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -123,21 +117,18 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -181,14 +172,12 @@ def test_post_file_no_token(tmp_path, app: FastAPI):\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n \n @pytest.fixture(name=\"app\")\n@@ -29,21 +28,18 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -82,14 +78,12 @@ def test_post_form_no_file(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -123,21 +117,18 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -181,14 +172,12 @@ def test_post_file_no_token(tmp_path, app: FastAPI):\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n@@ -2,7 +2,6 @@ import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from fastapi.utils import match_pydantic_error_url\n \n from ...utils import needs_py39\n \n@@ -32,21 +31,18 @@ def test_post_form_no_body(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -86,14 +82,12 @@ def test_post_form_no_file(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -128,21 +122,18 @@ def test_post_body_json(client: TestClient):\n                     \"loc\": [\"body\", \"file\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n@@ -187,14 +178,12 @@ def test_post_file_no_token(tmp_path, app: FastAPI):\n                     \"loc\": [\"body\", \"fileb\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"token\"],\n                     \"msg\": \"Field required\",\n                     \"input\": None,\n-                    \"url\": match_pydantic_error_url(\"missing\"),\n                 },\n             ]\n         }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
