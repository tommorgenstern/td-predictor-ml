{"custom_id": "flask#bffe97bb50c8d0b32d66abd59751fef51155a290", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 150 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,6 +42,15 @@ def parse_changelog():\n             return version, parse_date(datestr), codename\n \n \n+def bump_version(version):\n+    try:\n+        parts = map(int, version.split('.'))\n+    except ValueError:\n+        fail('Current version is not numeric')\n+    parts[-1] += 1\n+    return '.'.join(map(str, parts))\n+\n+\n def parse_date(string):\n     string = string.replace('th ', ' ').replace('nd ', ' ') \\\n                    .replace('rd ', ' ').replace('st ', ' ')\n@@ -114,6 +123,7 @@ def main():\n         fail('Could not parse changelog')\n \n     version, release_date, codename = rv\n+    dev_version = bump_version(version) + '-dev'\n \n     info('Releasing %s (codename %s, release date %s)',\n          version, codename, release_date.strftime('%d/%m/%Y'))\n@@ -132,6 +142,8 @@ def main():\n     make_git_commit('Bump version number to %s', version)\n     make_git_tag(version)\n     build_and_upload()\n+    set_init_version(dev_version)\n+    set_setup_version(dev_version)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#874079bffed0f02235f55e4a512822194ac2449a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 316 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.7'\n+__version__ = '0.7-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -86,7 +86,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.7',\n+    version='0.7-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#85efa3f89571d66071b86110bf7b615e38234aa8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 18 | Files Changed: 2 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): 13/12 | Churn Δ: 76 | Churn Cumulative: 621 | Contributors (this commit): 1 | Commits (past 90d): 19 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,7 +46,7 @@ _module_constructor_re = re.compile(r'([a-zA-Z0-9_][a-zA-Z0-9_]*)\\s*=\\s*Module'\n                                     r'\\(__name__\\s*(?:,\\s*(?:name\\s*=\\s*)?(%s))?' %\n                                     _string_re_part)\n _error_handler_re = re.compile(r'%s\\.error_handlers\\[\\s*(\\d+)\\s*\\]' % _app_re_part)\n-_mod_route_re = re.compile(r'([a-zA-Z0-9_][a-zA-Z0-9_]*)\\.route')\n+_mod_route_re = re.compile(r'@([a-zA-Z0-9_][a-zA-Z0-9_]*)\\.route')\n _blueprint_related = [\n     (re.compile(r'request\\.module'), 'request.blueprint'),\n     (re.compile(r'register_module'), 'register_blueprint'),\n@@ -62,18 +62,6 @@ def make_diff(filename, old, new):\n         print line\n \n \n-def fix_url_for(contents):\n-    def handle_match(match):\n-        prefix = match.group(1)\n-        endpoint = ast.literal_eval(match.group(2))\n-        if endpoint.startswith('.'):\n-            endpoint = endpoint[1:]\n-        else:\n-            endpoint = '.' + endpoint\n-        return prefix + repr(endpoint)\n-    return _url_for_re.sub(handle_match, contents)\n-\n-\n def looks_like_teardown_function(node):\n     returns = [x for x in ast.walk(node) if isinstance(x, ast.Return)]\n     if len(returns) != 1:\n@@ -94,6 +82,48 @@ def looks_like_teardown_function(node):\n     return resp_name.id\n \n \n+def fix_url_for(contents, module_declarations=None):\n+    if module_declarations is None:\n+        skip_module_test = True\n+    else:\n+        skip_module_test = False\n+        mapping = dict(module_declarations)\n+    annotated_lines = []\n+\n+    def make_line_annotations():\n+        if not annotated_lines:\n+            last_index = 0\n+            for line in contents.splitlines(True):\n+                last_index += len(line)\n+                annotated_lines.append((last_index, line))\n+\n+    def backtrack_module_name(call_start):\n+        make_line_annotations()\n+        for idx, (line_end, line) in enumerate(annotated_lines):\n+            if line_end > call_start:\n+                for _, line in reversed(annotated_lines[:idx]):\n+                    match = _mod_route_re.search(line)\n+                    if match is not None:\n+                        shortname = match.group(1)\n+                        return mapping.get(shortname)\n+\n+    def handle_match(match):\n+        if not skip_module_test:\n+            modname = backtrack_module_name(match.start())\n+            if modname is None:\n+                return match.group(0)\n+        prefix = match.group(1)\n+        endpoint = ast.literal_eval(match.group(2))\n+        if endpoint.startswith('.'):\n+            endpoint = endpoint[1:]\n+        elif '.' not in endpoint:\n+            endpoint = '.' + endpoint\n+        else:\n+            return match.group(0)\n+        return prefix + repr(endpoint)\n+    return _url_for_re.sub(handle_match, contents)\n+\n+\n def fix_teardown_funcs(contents):\n \n     def is_return_line(line):\n@@ -194,21 +224,22 @@ def rewrite_for_blueprints(contents, filename):\n \n     for pattern, replacement in _blueprint_related:\n         new_contents = pattern.sub(replacement, new_contents)\n-    return new_contents\n+    return new_contents, dict(modules_declared)\n \n \n def upgrade_python_file(filename, contents, teardown):\n-    new_contents = fix_url_for(contents)\n+    new_contents = contents\n     if teardown:\n         new_contents = fix_teardown_funcs(new_contents)\n-    new_contents = rewrite_for_blueprints(new_contents, filename)\n+    new_contents, modules = rewrite_for_blueprints(new_contents, filename)\n+    new_contents = fix_url_for(new_contents, modules)\n     new_contents = _error_handler_re.sub('\\\\1.error_handler_spec[None][\\\\2]',\n                                          new_contents)\n     make_diff(filename, contents, new_contents)\n \n \n def upgrade_template_file(filename, contents):\n-    new_contents = fix_url_for(contents)\n+    new_contents = fix_url_for(contents, None)\n     make_diff(filename, contents, new_contents)\n \n \n\n@@ -1,4 +1,4 @@\n-from flask import Flask, Module, render_template\n+from flask import Flask, Module, render_template, url_for\n \n \n mod = Module(__name__)\n@@ -12,8 +12,17 @@ def after_request(response):\n     return response\n \n \n+@app.route('/')\n+def index_foo():\n+    x1 = url_for('somemod.index')\n+    x2 = url_for('.index')\n+    return render_template('test/index.html')\n+\n+\n @mod.route('/')\n def index():\n+    x1 = url_for('somemod.index')\n+    x2 = url_for('.index')\n     return render_template('test/index.html')\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ea7a1720779ab4680304d2bc9dffcb6f5c7f2798", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 27 | Churn Cumulative: 2218 | Contributors (this commit): 13 | Commits (past 90d): 14 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -80,7 +80,7 @@ class Request(RequestBase):\n     def blueprint(self):\n         \"\"\"The name of the current blueprint\"\"\"\n         if self.url_rule and '.' in self.url_rule.endpoint:\n-            return self.url_rule.endpoint.split('.', 1)[0]\n+            return self.url_rule.endpoint.rsplit('.', 1)[0]\n \n     @cached_property\n     def json(self):\n\n@@ -1323,6 +1323,31 @@ class BlueprintTestCase(unittest.TestCase):\n         with flask.Flask(__name__).test_request_context():\n             assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n+    def test_dotted_names(self):\n+        frontend = flask.Blueprint('myapp.frontend', __name__)\n+        backend = flask.Blueprint('myapp.backend', __name__)\n+\n+        @frontend.route('/fe')\n+        def frontend_index():\n+            return flask.url_for('myapp.backend.backend_index')\n+\n+        @frontend.route('/fe2')\n+        def frontend_page2():\n+            return flask.url_for('.frontend_index')\n+\n+        @backend.route('/be')\n+        def backend_index():\n+            return flask.url_for('myapp.frontend.frontend_index')\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(frontend)\n+        app.register_blueprint(backend)\n+\n+        c = app.test_client()\n+        self.assertEqual(c.get('/fe').data.strip(), '/be')\n+        self.assertEqual(c.get('/fe2').data.strip(), '/fe')\n+        self.assertEqual(c.get('/be').data.strip(), '/fe')\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1e7577578f08f1685d98bdac5ce1c43973647aee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 840 | Contributors (this commit): 10 | Commits (past 90d): 11 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -159,7 +159,13 @@ def url_for(endpoint, **values):\n \n     Variable arguments that are unknown to the target endpoint are appended\n     to the generated URL as query arguments.  If the value of a query argument\n-    is `None`, the whole pair is skipped.\n+    is `None`, the whole pair is skipped.  In case blueprints are active\n+    you can shortcut references to the same blueprint by prefixing the\n+    local endpoint with a dot (``.``).\n+\n+    This will reference the index function local to the current blueprint::\n+\n+        url_for('.index')\n \n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ccd5ced70e48515e222b84dccc8f21d32c864dcd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 34/32 | Churn Δ: 17 | Churn Cumulative: 4082 | Contributors (this commit): 16 | Commits (past 90d): 29 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -602,7 +602,8 @@ class Flask(_PackageBoundObject):\n         if session.permanent:\n             expires = datetime.utcnow() + self.permanent_session_lifetime\n         if self.config['SERVER_NAME'] is not None:\n-            domain = '.' + self.config['SERVER_NAME']\n+            # chop of the port which is usually not supported by browsers\n+            domain = '.' + self.config['SERVER_NAME'].rsplit(':', 1)[0]\n         session.save_cookie(response, self.session_cookie_name,\n                             expires=expires, httponly=True, domain=domain)\n \n\n@@ -306,6 +306,20 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n         assert 'httponly' in rv.headers['set-cookie'].lower()\n \n+    def test_session_using_server_name_and_port(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='example.com:8080'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com:8080/')\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n+\n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n         def expect_exception(f, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7e6c70a133c833ef08f83a7e5cc926bf6e5581f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 439 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -216,6 +216,26 @@ class Blueprint(_PackageBoundObject):\n             .setdefault(None, []).append(f))\n         return f\n \n+    def teardown_request(self, f):\n+        \"\"\"Like :meth:`Flask.teardown_request` but for a blueprint.  This\n+        function is only executed when tearing down requests handled by a\n+        function of that blueprint.  Teardown request functions are executed\n+        when the request context is popped, even when no actual request was\n+        performed.\n+        \"\"\"\n+        self.record_once(lambda s: s.app.teardown_request_funcs\n+            .setdefault(self.name, []).append(f))\n+        return f\n+\n+    def teardown_app_request(self, f):\n+        \"\"\"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a\n+        function is executed when tearing down each request, even if outside of\n+        the blueprint.\n+        \"\"\"\n+        self.record_once(lambda s: s.app.teardown_request_funcs\n+            .setdefault(None, []).append(f))\n+        return f\n+\n     def context_processor(self, f):\n         \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  This\n         function is only executed for requests handled by a blueprint.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dcf21989dc71f4ab93ceaf0627e40c516462bd8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 147 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 8 | Methods Changed: 14 | Complexity Δ (Sum/Max): 17/9 | Churn Δ: 150 | Churn Cumulative: 4232 | Contributors (this commit): 16 | Commits (past 90d): 32 | Contributors (cumulative): 24 | DMM Complexity: 0.7192982456140351\n\nDIFF:\n@@ -642,7 +642,8 @@ class Flask(_PackageBoundObject):\n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, \\\n                 'A blueprint\\'s name collision ocurred between %r and ' \\\n-                '%r.  Both share the same name \"%s\"' % \\\n+                '%r.  Both share the same name \"%s\".  Blueprints that ' \\\n+                'are created on the fly need unique names.' % \\\n                 (blueprint, self.blueprints[blueprint.name], blueprint.name)\n         else:\n             self.blueprints[blueprint.name] = blueprint\n@@ -695,7 +696,12 @@ class Flask(_PackageBoundObject):\n         if endpoint is None:\n             endpoint = _endpoint_from_view_func(view_func)\n         options['endpoint'] = endpoint\n-        methods = options.pop('methods', ('GET',))\n+        methods = options.pop('methods', None)\n+        # if the methods are not given and the view_func object knows its\n+        # methods we can use that instead.  If neither exists, we go with\n+        # a tuple of only `GET` as default.\n+        if methods is None:\n+            methods = getattr(view_func, 'methods', None) or ('GET',)\n         provide_automatic_options = False\n         if 'OPTIONS' not in methods:\n             methods = tuple(methods) + ('OPTIONS',)\n@@ -778,7 +784,6 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n-\n     def endpoint(self, endpoint):\n         \"\"\"A decorator to register a function as an endpoint.\n         Example::\n\n@@ -0,0 +1,102 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.views\n+    ~~~~~~~~~~~\n+\n+    This module provides class based views inspired by the ones in Django.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from .globals import request\n+\n+\n+http_method_funcs = frozenset(['get', 'post', 'head', 'options',\n+                               'delete', 'put', 'trace'])\n+\n+\n+\n+class View(object):\n+    \"\"\"Alternative way to use view functions.  A subclass has to implement\n+    :meth:`dispatch_request` which is called with the view arguments from\n+    the URL routing system.  If :attr:`methods` is provided the methods\n+    do not have to be passed to the :meth:`~flask.Flask.add_url_rule`\n+    method explicitly::\n+\n+        class MyView(View):\n+            methods = ['GET']\n+\n+            def dispatch_request(self, name):\n+                return 'Hello %s!' % name\n+\n+        app.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))\n+    \"\"\"\n+\n+    methods = None\n+\n+    def dispatch_request(self):\n+        raise NotImplementedError()\n+\n+    @classmethod\n+    def as_view(cls, name, *class_args, **class_kwargs):\n+        \"\"\"Converts the class into an actual view function that can be\n+        used with the routing system.  What it does internally is generating\n+        a function on the fly that will instanciate the :class:`View`\n+        on each request and call the :meth:`dispatch_request` method on it.\n+\n+        The arguments passed to :meth:`as_view` are forwarded to the\n+        constructor of the class.\n+        \"\"\"\n+        def view(*args, **kwargs):\n+            self = cls(*class_args, **class_kwargs)\n+            return self.dispatch_request(*args, **kwargs)\n+        view.__name__ = name\n+        view.__doc__ = cls.__doc__\n+        view.__module__ = cls.__module__\n+        view.methods = cls.methods\n+        return view\n+\n+\n+class MethodViewType(type):\n+\n+    def __new__(cls, name, bases, d):\n+        rv = type.__new__(cls, name, bases, d)\n+        if rv.methods is None:\n+            methods = []\n+            for key, value in d.iteritems():\n+                if key in http_method_funcs:\n+                    methods.append(key.upper())\n+            # if we have no method at all in there we don't want to\n+            # add a method list.  (This is for instance the case for\n+            # the baseclass or another subclass of a base method view\n+            # that does not introduce new methods).\n+            if methods:\n+                rv.methods = methods\n+        return rv\n+\n+\n+class MethodView(View):\n+    \"\"\"Like a regular class based view but that dispatches requests to\n+    particular methods.  For instance if you implement a method called\n+    :meth:`get` it means you will response to ``'GET'`` requests and\n+    the :meth:`dispatch_request` implementation will automatically\n+    forward your request to that.  Also :attr:`options` is set for you\n+    automatically::\n+\n+        class CounterAPI(MethodView):\n+\n+            def get(self):\n+                return session.get('counter', 0)\n+\n+            def post(self):\n+                session['counter'] = session.get('counter', 0) + 1\n+                return 'OK'\n+\n+        app.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))\n+    \"\"\"\n+    __metaclass__ = MethodViewType\n+\n+    def dispatch_request(self, *args, **kwargs):\n+        meth = getattr(self, request.method.lower(), None)\n+        assert meth is not None, 'Not implemented method'\n+        return meth(*args, **kwargs)\n\n@@ -14,6 +14,7 @@ import os\n import re\n import sys\n import flask\n+import flask.views\n import unittest\n import warnings\n from threading import Thread\n@@ -23,6 +24,7 @@ from functools import update_wrapper\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from werkzeug.exceptions import NotFound\n+from werkzeug.http import parse_set_header\n from jinja2 import TemplateNotFound\n from cStringIO import StringIO\n \n@@ -1753,6 +1755,40 @@ class TestSignals(unittest.TestCase):\n             flask.got_request_exception.disconnect(record, app)\n \n \n+class ViewTestCase(unittest.TestCase):\n+\n+    def common_test(self, app):\n+        c = app.test_client()\n+\n+        self.assertEqual(c.get('/').data, 'GET')\n+        self.assertEqual(c.post('/').data, 'POST')\n+        self.assertEqual(c.put('/').status_code, 405)\n+        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n+        self.assertEqual(sorted(meths), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+\n+    def test_basic_view(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.View):\n+            methods = ['GET', 'POST']\n+            def dispatch_request(self):\n+                return flask.request.method\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        self.common_test(app)\n+\n+    def test_method_based_view(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        self.common_test(app)\n+\n class DeprecationsTestCase(unittest.TestCase):\n \n     def test_init_jinja_globals(self):\n@@ -1785,6 +1821,7 @@ def suite():\n     suite.addTest(unittest.makeSuite(LoggingTestCase))\n     suite.addTest(unittest.makeSuite(ConfigTestCase))\n     suite.addTest(unittest.makeSuite(SubdomainTestCase))\n+    suite.addTest(unittest.makeSuite(ViewTestCase))\n     suite.addTest(unittest.makeSuite(DeprecationsTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#775caf726db10c6c736a454b17fcc0f1f1474193", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 20 | Churn Cumulative: 122 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -35,6 +35,10 @@ class View(object):\n     methods = None\n \n     def dispatch_request(self):\n+        \"\"\"Subclasses have to override this method to implement the\n+        actual view functionc ode.  This method is called with all\n+        the arguments from the URL rule.\n+        \"\"\"\n         raise NotImplementedError()\n \n     @classmethod\n@@ -48,8 +52,14 @@ class View(object):\n         constructor of the class.\n         \"\"\"\n         def view(*args, **kwargs):\n-            self = cls(*class_args, **class_kwargs)\n+            self = view.view_class(*class_args, **class_kwargs)\n             return self.dispatch_request(*args, **kwargs)\n+        # we attach the view class to the view function for two reasons:\n+        # first of all it allows us to easily figure out what class based\n+        # view this thing came from, secondly it's also used for instanciating\n+        # the view class so you can actually replace it with something else\n+        # for testing purposes and debugging.\n+        view.view_class = cls\n         view.__name__ = name\n         view.__doc__ = cls.__doc__\n         view.__module__ = cls.__module__\n@@ -61,17 +71,17 @@ class MethodViewType(type):\n \n     def __new__(cls, name, bases, d):\n         rv = type.__new__(cls, name, bases, d)\n-        if rv.methods is None:\n-            methods = []\n+        if 'methods' not in d:\n+            methods = set(rv.methods or [])\n             for key, value in d.iteritems():\n                 if key in http_method_funcs:\n-                    methods.append(key.upper())\n+                    methods.add(key.upper())\n             # if we have no method at all in there we don't want to\n             # add a method list.  (This is for instance the case for\n             # the baseclass or another subclass of a base method view\n             # that does not introduce new methods).\n             if methods:\n-                rv.methods = methods\n+                rv.methods = sorted(methods)\n         return rv\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b36d7b3288442173bcc999ebb4310674869a526d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 41 | Churn Cumulative: 2143 | Contributors (this commit): 11 | Commits (past 90d): 14 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1787,8 +1787,49 @@ class ViewTestCase(unittest.TestCase):\n                 return 'POST'\n \n         app.add_url_rule('/', view_func=Index.as_view('index'))\n+\n         self.common_test(app)\n \n+    def test_view_patching(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                1/0\n+            def post(self):\n+                1/0\n+\n+        class Other(Index):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        view = Index.as_view('index')\n+        view.view_class = Other\n+        app.add_url_rule('/', view_func=view)\n+        self.common_test(app)\n+\n+    def test_view_inheritance(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        class BetterIndex(Index):\n+            def delete(self):\n+                return 'DELETE'\n+\n+        app.add_url_rule('/', view_func=BetterIndex.as_view('index'))\n+        c = app.test_client()\n+\n+        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n+        self.assertEqual(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n+\n+\n class DeprecationsTestCase(unittest.TestCase):\n \n     def test_init_jinja_globals(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fb1482d3bb1b95803d25247479eb8ca8317a3219", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 320 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.7-dev'\n+__version__ = '0.7'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -86,7 +86,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.7-dev',\n+    version='0.7',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b64fa73467424b8e6c4efa565d4d5bc2ae414ab7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 324 | Contributors (this commit): 5 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.7'\n+__version__ = '0.8-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -86,7 +86,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.7',\n+    version='0.8-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5afeac0c19b6c9ca6456dff368724492822ea165", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 152 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -85,7 +85,7 @@ def set_setup_version(version):\n \n \n def build_and_upload():\n-    Popen([sys.executable, 'setup.py', 'sdist', 'release']).wait()\n+    Popen([sys.executable, 'setup.py', 'release', 'sdist', 'upload']).wait()\n \n \n def fail(message, *args):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#57d9a2a1187b306c6997a3dcbac25837a54862f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 842 | Contributors (this commit): 11 | Commits (past 90d): 12 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import with_statement\n+\n import os\n import sys\n import posixpath\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#510823c1592abe4c57e051e9d21bd134ab7f07a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 328 | Contributors (this commit): 5 | Commits (past 90d): 12 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.8-dev'\n+__version__ = '0.7.1-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -86,7 +86,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.8-dev',\n+    version='0.7.1-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#21d4a054e399a42ac448814116580a5c62991fce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 154 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ def parse_changelog():\n                 if change_info:\n                     break\n \n-            match = re.match(r'^released on (\\w+\\s+\\d+\\w+\\s+\\d+)'\n+            match = re.match(r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)'\n                              r'(?:, codename (.*))?(?i)', change_info)\n             if match is None:\n                 continue\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7e1ebae3a2879b989cae4d27bb8dd1dc8a1313ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 156 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ def parse_changelog():\n                 if change_info:\n                     break\n \n-            match = re.match(r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)'\n+            match = re.search(r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)'\n                               r'(?:, codename (.*))?(?i)', change_info)\n             if match is None:\n                 continue\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#15372661af2974577d5c1d15fdaf88452661c2a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 288 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -117,8 +117,6 @@ def render_template(template_name, **context):\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    if template_name[:1] == ':':\n-        template_name = ctx.request.blueprint + template_name\n     return _render(ctx.app.jinja_env.get_template(template_name),\n                    context, ctx.app)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bd473c158788bd2c1153fc8fe45831aaa648824a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 13 | Complexity Δ (Sum/Max): 13/13 | Churn Δ: 62 | Churn Cumulative: 2659 | Contributors (this commit): 12 | Commits (past 90d): 27 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -56,7 +56,7 @@ class BlueprintSetupState(object):\n \n         #: A dictionary with URL defaults that is added to each and every\n         #: URL that was defined with the blueprint.\n-        self.url_defaults = dict(self.blueprint.url_defaults)\n+        self.url_defaults = dict(self.blueprint.url_values_defaults)\n         self.url_defaults.update(self.options.get('url_defaults', ()))\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n@@ -102,7 +102,7 @@ class Blueprint(_PackageBoundObject):\n         self.view_functions = {}\n         if url_defaults is None:\n             url_defaults = {}\n-        self.url_defaults = url_defaults\n+        self.url_values_defaults = url_defaults\n \n     def record(self, func):\n         \"\"\"Registers a function that is called when the blueprint is\n\n@@ -830,6 +830,37 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         rv = c.post('/accept', data={'myfile': 'foo' * 100})\n         assert rv.data == '42'\n \n+    def test_url_processors(self):\n+        app = flask.Flask(__name__)\n+\n+        @app.url_defaults\n+        def add_language_code(endpoint, values):\n+            if flask.g.lang_code is not None and \\\n+               app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n+                values.setdefault('lang_code', flask.g.lang_code)\n+\n+        @app.url_value_preprocessor\n+        def pull_lang_code(endpoint, values):\n+            flask.g.lang_code = values.pop('lang_code', None)\n+\n+        @app.route('/<lang_code>/')\n+        def index():\n+            return flask.url_for('about')\n+\n+        @app.route('/<lang_code>/about')\n+        def about():\n+            return flask.url_for('something_else')\n+\n+        @app.route('/foo')\n+        def something_else():\n+            return flask.url_for('about', lang_code='en')\n+\n+        c = app.test_client()\n+\n+        self.assertEqual(c.get('/de/').data, '/de/about')\n+        self.assertEqual(c.get('/de/about').data, '/foo')\n+        self.assertEqual(c.get('/foo').data, '/en/about')\n+\n \n class JSONTestCase(unittest.TestCase):\n \n@@ -1309,6 +1340,33 @@ class BlueprintTestCase(unittest.TestCase):\n         self.assertEqual(c.get('/1/bar').data, u'23')\n         self.assertEqual(c.get('/2/bar').data, u'19')\n \n+    def test_blueprint_url_processors(self):\n+        bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n+\n+        @bp.url_defaults\n+        def add_language_code(endpoint, values):\n+            values.setdefault('lang_code', flask.g.lang_code)\n+\n+        @bp.url_value_preprocessor\n+        def pull_lang_code(endpoint, values):\n+            flask.g.lang_code = values.pop('lang_code')\n+\n+        @bp.route('/')\n+        def index():\n+            return flask.url_for('.about')\n+\n+        @bp.route('/about')\n+        def about():\n+            return flask.url_for('.index')\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp)\n+\n+        c = app.test_client()\n+\n+        self.assertEqual(c.get('/de/').data, '/de/about')\n+        self.assertEqual(c.get('/de/about').data, '/de/')\n+\n     def test_templates_and_static(self):\n         from blueprintapp import app\n         c = app.test_client()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#515e946b020584db7f236eb8ad139f9f32de305f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 332 | Contributors (this commit): 5 | Commits (past 90d): 13 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.7.1-dev'\n+__version__ = '0.8-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -86,7 +86,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.7.1-dev',\n+    version='0.8-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0fccfe711fda524f216f82263bb83787a75035fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 49 | Files Changed: 4 | Hunks: 13 | Methods Changed: 8 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 79 | Churn Cumulative: 2531 | Contributors (this commit): 13 | Commits (past 90d): 33 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -27,7 +27,6 @@ from .ctx import has_request_context\n from .module import Module\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n-from .session import Session\n \n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n\n@@ -27,7 +27,7 @@ from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n from .ctx import RequestContext\n from .globals import _request_ctx_stack, request\n-from .session import Session, _NullSession\n+from .sessions import SecureCookieSessionInterface\n from .module import blueprint_is_module\n from .templating import DispatchingJinjaLoader, Environment, \\\n     _default_template_ctx_processor\n@@ -211,6 +211,12 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.7\n     test_client_class = None\n \n+    #: the session interface to use.  By default an instance of\n+    #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n+    #:\n+    #: .. versionadded:: 0.7\n+    session_interface = SecureCookieSessionInterface()\n+\n     def __init__(self, import_name, static_path=None, static_url_path=None,\n                  static_folder='static', template_folder='templates'):\n         _PackageBoundObject.__init__(self, import_name,\n@@ -580,32 +586,32 @@ class Flask(_PackageBoundObject):\n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n         session data in a signed cookie.  This requires that the\n-        :attr:`secret_key` is set.\n+        :attr:`secret_key` is set.  Instead of overriding this method\n+        we recommend replacing the :class:`session_interface`.\n \n         :param request: an instance of :attr:`request_class`.\n         \"\"\"\n-        key = self.secret_key\n-        if key is not None:\n-            return Session.load_cookie(request, self.session_cookie_name,\n-                                       secret_key=key)\n+        return self.session_interface.open_session(self, request)\n \n     def save_session(self, session, response):\n         \"\"\"Saves the session if it needs updates.  For the default\n-        implementation, check :meth:`open_session`.\n+        implementation, check :meth:`open_session`.  Instead of overriding this\n+        method we recommend replacing the :class:`session_interface`.\n \n         :param session: the session to be saved (a\n                         :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                         object)\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n-        expires = domain = None\n-        if session.permanent:\n-            expires = datetime.utcnow() + self.permanent_session_lifetime\n-        if self.config['SERVER_NAME'] is not None:\n-            # chop of the port which is usually not supported by browsers\n-            domain = '.' + self.config['SERVER_NAME'].rsplit(':', 1)[0]\n-        session.save_cookie(response, self.session_cookie_name,\n-                            expires=expires, httponly=True, domain=domain)\n+        return self.session_interface.save_session(self, session, response)\n+\n+    def make_null_session(self):\n+        \"\"\"Creates a new instance of a missing session.  Instead of overriding\n+        this method we recommend replacing the :class:`session_interface`.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        return self.session_interface.make_null_session(self)\n \n     def register_module(self, module, **options):\n         \"\"\"Registers a module with this application.  The keyword argument\n@@ -1184,7 +1190,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         ctx = _request_ctx_stack.top\n         bp = ctx.request.blueprint\n-        if not isinstance(ctx.session, _NullSession):\n+        if not self.session_interface.is_null_session(ctx.session):\n             self.save_session(ctx.session, response)\n         funcs = ()\n         if bp is not None and bp in self.after_request_funcs:\n\n@@ -122,7 +122,7 @@ class RequestContext(object):\n         # request context (e.g. flask-sqlalchemy).\n         self.session = self.app.open_session(self.request)\n         if self.session is None:\n-            self.session = _NullSession()\n+            self.session = self.app.make_null_session()\n \n     def pop(self):\n         \"\"\"Pops the request context and unbinds it by doing that.  This will\n\n@@ -3,41 +3,17 @@\n     flask.session\n     ~~~~~~~~~~~~~\n \n-    Implements cookie based sessions based on Werkzeug's secure cookie\n-    system.\n+    This module used to flask with the session global so we moved it\n+    over to flask.sessions\n \n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from werkzeug.contrib.securecookie import SecureCookie\n+from warnings import warn\n+warn(DeprecationWarning('please use flask.sessions instead'))\n \n+from .sessions import *\n \n-class Session(SecureCookie):\n-    \"\"\"Expands the session with support for switching between permanent\n-    and non-permanent sessions.\n-    \"\"\"\n-\n-    def _get_permanent(self):\n-        return self.get('_permanent', False)\n-\n-    def _set_permanent(self, value):\n-        self['_permanent'] = bool(value)\n-\n-    permanent = property(_get_permanent, _set_permanent)\n-    del _get_permanent, _set_permanent\n-\n-\n-class _NullSession(Session):\n-    \"\"\"Class used to generate nicer error messages if sessions are not\n-    available.  Will still allow read-only access to the empty session\n-    but fail on setting.\n-    \"\"\"\n-\n-    def _fail(self, *args, **kwargs):\n-        raise RuntimeError('the session is unavailable because no secret '\n-                           'key was set.  Set the secret_key on the '\n-                           'application to something unique and secret.')\n-    __setitem__ = __delitem__ = clear = pop = popitem = \\\n-        update = setdefault = _fail\n-    del _fail\n+Session = SecureCookieSession\n+_NullSession = NullSession\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#10c99e95e98844ba191e4767550b0dc19fa6d34c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 168 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 9 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 168 | Churn Cumulative: 168 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,168 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.sessions\n+    ~~~~~~~~~~~~~~\n+\n+    Implements cookie based sessions based on Werkzeug's secure cookie\n+    system.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+from datetime import datetime\n+from werkzeug.contrib.securecookie import SecureCookie\n+\n+\n+class SessionMixin(object):\n+    \"\"\"Expands a basic dictionary with an accessors that are expected\n+    by Flask extensions and users for the session.\n+    \"\"\"\n+\n+    def _get_permanent(self):\n+        return self.get('_permanent', False)\n+\n+    def _set_permanent(self, value):\n+        self['_permanent'] = bool(value)\n+\n+    permanent = property(_get_permanent, _set_permanent)\n+    del _get_permanent, _set_permanent\n+\n+    new = False\n+    modified = True\n+\n+\n+class SecureCookieSession(SecureCookie, SessionMixin):\n+    \"\"\"Expands the session with support for switching between permanent\n+    and non-permanent sessions.\n+    \"\"\"\n+\n+\n+class NullSession(SecureCookieSession):\n+    \"\"\"Class used to generate nicer error messages if sessions are not\n+    available.  Will still allow read-only access to the empty session\n+    but fail on setting.\n+    \"\"\"\n+\n+    def _fail(self, *args, **kwargs):\n+        raise RuntimeError('the session is unavailable because no secret '\n+                           'key was set.  Set the secret_key on the '\n+                           'application to something unique and secret.')\n+    __setitem__ = __delitem__ = clear = pop = popitem = \\\n+        update = setdefault = _fail\n+    del _fail\n+\n+\n+class SessionInterface(object):\n+    \"\"\"The basic interface you have to implement in order to replace the\n+    default session interface which uses werkzeug's securecookie\n+    implementation.  The only methods you have to implement are\n+    :meth:`open_session` and :meth:`save_session`, the others have\n+    useful defaults which you don't need to change.\n+\n+    The session object returned by the :meth:`open_session` method has to\n+    provide a dictionary like interface plus the properties and methods\n+    from the :class:`SessionMixin`.  We recommend just subclassing a dict\n+    and adding that mixin::\n+\n+        class Session(dict, SessionMixin):\n+            pass\n+\n+    If :meth:`open_session` returns `None` Flask will call into\n+    :meth:`make_null_session` to create a session that acts as replacement\n+    if the session support cannot work because some requirement is not\n+    fulfilled.  The default :class:`NullSession` class that is created\n+    will complain that the secret key was not set.\n+\n+    To replace the session interface on an application all you have to do\n+    is to assign :attr:`flask.Flask.session_interface`::\n+\n+        app = Flask(__name__)\n+        app.session_interface = MySessionInterface()\n+\n+    .. versionadded:: 0.7\n+    \"\"\"\n+\n+    #: :meth:`make_null_session` will look here for the class that should\n+    #: be created when a null session is requested.  Likewise the\n+    #: :meth:`is_null_session` method will perform a typecheck against\n+    #: this type.\n+    null_session_class = NullSession\n+\n+    def make_null_session(self, app):\n+        \"\"\"Creates a null session which acts as a replacement object if the\n+        real session support could not be loaded due to a configuration\n+        error.  This mainly aids the user experience because the job of the\n+        null session is to still support lookup without complaining but\n+        modifications are answered with a helpful error message of what\n+        failed.\n+\n+        This creates an instance of :attr:`null_session_class` by default.\n+        \"\"\"\n+        return self.null_session_class()\n+\n+    def is_null_session(self, obj):\n+        \"\"\"Checks if a given object is a null session.  Null sessions are\n+        not asked to be saved.\n+\n+        This checks if the object is an instance of :attr:`null_session_class`\n+        by default.\n+        \"\"\"\n+        return isinstance(obj, self.null_session_class)\n+\n+    def get_cookie_domain(self, app):\n+        \"\"\"Helpful helper method that returns the cookie domain that should\n+        be used for the session cookie if session cookies are used.\n+        \"\"\"\n+        if app.config['SERVER_NAME'] is not None:\n+            # chop of the port which is usually not supported by browsers\n+            return '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n+\n+    def get_expiration_time(self, app, session):\n+        \"\"\"A helper method that returns an expiration date for the session\n+        or `None` if the session is linked to the browser session.  The\n+        default implementation returns now + the permanent session\n+        lifetime configured on the application.\n+        \"\"\"\n+        if session.permanent:\n+            return datetime.utcnow() + app.permanent_session_lifetime\n+\n+    def open_session(self, app, request):\n+        \"\"\"This method has to be implemented and must either return `None`\n+        in case the loading failed because of a configuration error or an\n+        instance of a session object which implements a dictionary like\n+        interface + the methods and attributes on :class:`SessionMixin`.\n+        \"\"\"\n+        raise NotImplementedError()\n+\n+    def save_session(self, app, session, response):\n+        \"\"\"This is called for actual sessions returned by :meth:`open_session`\n+        at the end of the request.  This is still called during a request\n+        context so if you absolutely need access to the request you can do\n+        that.\n+        \"\"\"\n+        raise NotImplementedError()\n+\n+\n+class SecureCookieSessionInterface(SessionInterface):\n+    \"\"\"The cookie session interface that uses the Werkzeug securecookie\n+    as client side session backend.\n+    \"\"\"\n+    session_class = SecureCookieSession\n+\n+    def open_session(self, app, request):\n+        key = app.secret_key\n+        if key is not None:\n+            return self.session_class.load_cookie(request,\n+                                                  app.session_cookie_name,\n+                                                  secret_key=key)\n+\n+    def save_session(self, app, session, response):\n+        expires = self.get_expiration_time(app, session)\n+        domain = self.get_cookie_domain(app)\n+        if session.modified and not session:\n+            response.delete_cookie(app.session_cookie_name,\n+                                   domain=domain)\n+        else:\n+            session.save_cookie(response, app.session_cookie_name,\n+                                expires=expires, httponly=True, domain=domain)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
