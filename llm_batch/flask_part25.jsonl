{"custom_id": "flask#c0f42a0978d804237d7bd540f81dcdbc1643ea7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 153 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,2 +1,3 @@\n+#!/usr/bin/env python\n from flask.testsuite import main\n main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2e4c39199d3c8cdcf459675cba6e04bd30f98120", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 2501 | Contributors (this commit): 14 | Commits (past 90d): 44 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1216,14 +1216,24 @@ class Flask(_PackageBoundObject):\n             else:\n                 raise e\n \n-        self.logger.exception('Exception on %s [%s]' % (\n-            request.path,\n-            request.method\n-        ))\n+        self.log_exception((exc_type, exc_value, tb))\n         if handler is None:\n             return InternalServerError()\n         return handler(e)\n \n+    def log_exception(self, exc_info):\n+        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n+        if debugging is disabled and right before the handler is called.\n+        The default implementation logs the exception as error on the\n+        :attr:`logger`.\n+\n+        .. versionadded:: 0.8\n+        \"\"\"\n+        self.logger.error('Exception on %s [%s]' % (\n+            request.path,\n+            request.method\n+        ), exc_info=exc_info)\n+\n     def raise_routing_exception(self, request):\n         \"\"\"Exceptions that are recording during routing are reraised with\n         this method.  During debug we are not reraising redirect requests\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb1567dae48fed50f9742b9136c8bd1b82b7bd55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 933 | Contributors (this commit): 12 | Commits (past 90d): 16 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -484,6 +484,8 @@ def get_root_path(import_name):\n         directory = os.path.dirname(sys.modules[import_name].__file__)\n         return os.path.abspath(directory)\n     except AttributeError:\n+        # this is necessary in case we are running from the interactive\n+        # python shell.  It will never be used for production code however\n         return os.getcwd()\n \n \n@@ -499,6 +501,7 @@ def find_package(import_name):\n     root_mod = sys.modules[import_name.split('.')[0]]\n     package_path = getattr(root_mod, '__file__', None)\n     if package_path is None:\n+        # support for the interactive python shell\n         package_path = os.getcwd()\n     else:\n         package_path = os.path.abspath(os.path.dirname(package_path))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#87f50fdc6f01160d75fcc87569f0754b800fc59f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 99 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -54,7 +54,8 @@ class FormDataRoutingRedirect(AssertionError):\n \n         buf.append('  Make sure to directly send your %s-request to this URL '\n                    'since we can\\'t make browsers or HTTP clients redirect '\n-                   'with form data.' % request.method)\n+                   'with form data reliably or without user interaction.' %\n+                   request.method)\n         buf.append('\\n\\nNote: this exception is only raised in debug mode')\n         AssertionError.__init__(self, ''.join(buf).encode('utf-8'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#23bf2633f67d00418bd31c0c6918c3a99f06dead", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2505 | Contributors (this commit): 14 | Commits (past 90d): 40 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -1397,7 +1397,7 @@ class Flask(_PackageBoundObject):\n         This also triggers the :meth:`url_value_processor` functions before\n         the actualy :meth:`before_request` functions are called.\n         \"\"\"\n-        bp = request.blueprint\n+        bp = _request_ctx_stack.top.request.blueprint\n \n         funcs = self.url_value_preprocessors.get(None, ())\n         if bp is not None and bp in self.url_value_preprocessors:\n@@ -1447,7 +1447,7 @@ class Flask(_PackageBoundObject):\n         tighter control over certain resources under testing environments.\n         \"\"\"\n         funcs = reversed(self.teardown_request_funcs.get(None, ()))\n-        bp = request.blueprint\n+        bp = _request_ctx_stack.top.request.blueprint\n         if bp is not None and bp in self.teardown_request_funcs:\n             funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n         exc = sys.exc_info()[1]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4dc1796b1c09961098edc0aaac90a28be2b7fc9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 359 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -57,7 +57,7 @@ class FlaskClient(Client):\n             raise RuntimeError('Session transactions only make sense '\n                                'with cookies enabled.')\n         app = self.application\n-        environ_overrides = kwargs.pop('environ_overrides', {})\n+        environ_overrides = kwargs.setdefault('environ_overrides', {})\n         self.cookie_jar.inject_wsgi(environ_overrides)\n         outer_reqctx = _request_ctx_stack.top\n         with app.test_request_context(*args, **kwargs) as c:\n\n@@ -59,6 +59,9 @@ class TestToolsTestCase(FlaskTestCase):\n                 self.assert_equal(len(sess), 1)\n             rv = c.get('/')\n             self.assert_equal(rv.data, '[42]')\n+            with c.session_transaction() as sess:\n+                self.assert_equal(len(sess), 1)\n+                self.assert_equal(sess['foo'], [42])\n \n     def test_session_transactions_no_null_sessions(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ccf464189b116ea4ee458c2ccb24d64f9272e25b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 51 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 56 | Churn Cumulative: 4059 | Contributors (this commit): 14 | Commits (past 90d): 54 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -231,12 +231,16 @@ class Flask(_PackageBoundObject):\n         'PROPAGATE_EXCEPTIONS':                 None,\n         'PRESERVE_CONTEXT_ON_EXCEPTION':        None,\n         'SECRET_KEY':                           None,\n-        'SESSION_COOKIE_NAME':                  'session',\n         'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n         'USE_X_SENDFILE':                       False,\n         'LOGGER_NAME':                          None,\n         'SERVER_NAME':                          None,\n         'APPLICATION_ROOT':                     None,\n+        'SESSION_COOKIE_NAME':                  'session',\n+        'SESSION_COOKIE_DOMAIN':                None,\n+        'SESSION_COOKIE_PATH':                  None,\n+        'SESSION_COOKIE_HTTPONLY':              True,\n+        'SESSION_COOKIE_SECURE':                False,\n         'MAX_CONTENT_LENGTH':                   None,\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False\n\n@@ -123,16 +123,33 @@ class SessionInterface(object):\n         \"\"\"Helpful helper method that returns the cookie domain that should\n         be used for the session cookie if session cookies are used.\n         \"\"\"\n+        if app.config['SESSION_COOKIE_DOMAIN'] is not None:\n+            return app.config['SESSION_COOKIE_DOMAIN']\n         if app.config['SERVER_NAME'] is not None:\n             # chop of the port which is usually not supported by browsers\n             return '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n \n     def get_cookie_path(self, app):\n         \"\"\"Returns the path for which the cookie should be valid.  The\n-        default implementation uses the value from the ``APPLICATION_ROOT``\n-        configuration variable or uses ``/`` if it's `None`.\n+        default implementation uses the value from the SESSION_COOKIE_PATH``\n+        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n+        uses ``/`` if it's `None`.\n         \"\"\"\n-        return app.config['APPLICATION_ROOT'] or '/'\n+        return app.config['SESSION_COOKIE_PATH'] or \\\n+               app.config['APPLICATION_ROOT'] or '/'\n+\n+    def get_cookie_httponly(self, app):\n+        \"\"\"Returns True if the session cookie should be httponly.  This\n+        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n+        config var.\n+        \"\"\"\n+        return app.config['SESSION_COOKIE_HTTPONLY']\n+\n+    def get_cookie_secure(self, app):\n+        \"\"\"Returns True if the cookie should be secure.  This currently\n+        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n+        \"\"\"\n+        return app.config['SESSION_COOKIE_SECURE']\n \n     def get_expiration_time(self, app, session):\n         \"\"\"A helper method that returns an expiration date for the session\n@@ -177,9 +194,12 @@ class SecureCookieSessionInterface(SessionInterface):\n         expires = self.get_expiration_time(app, session)\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n+        httponly = self.get_cookie_httponly(app)\n+        secure = self.get_cookie_secure(app)\n         if session.modified and not session:\n             response.delete_cookie(app.session_cookie_name, path=path,\n                                    domain=domain)\n         else:\n             session.save_cookie(response, app.session_cookie_name, path=path,\n-                                expires=expires, httponly=True, domain=domain)\n+                                expires=expires, httponly=httponly,\n+                                secure=secure, domain=domain)\n\n@@ -207,6 +207,28 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n         self.assert_('path=/bar' in rv.headers['set-cookie'].lower())\n \n+    def test_session_using_session_settings(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='www.example.com:8080',\n+            APPLICATION_ROOT='/test',\n+            SESSION_COOKIE_DOMAIN='.example.com',\n+            SESSION_COOKIE_HTTPONLY=False,\n+            SESSION_COOKIE_SECURE=True,\n+            SESSION_COOKIE_PATH='/'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n+        cookie = rv.headers['set-cookie'].lower()\n+        self.assert_('domain=.example.com' in cookie)\n+        self.assert_('path=/;' in cookie)\n+        self.assert_('secure' in cookie)\n+        self.assert_('httponly' not in cookie)\n+\n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n         def expect_exception(f, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5f7f3b17dfe2fbeecf82d5745c497b3ea94bf50a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 185 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -89,9 +89,7 @@ setup(\n                 'and good intentions',\n     long_description=__doc__,\n     packages=['flask', 'flask.testsuite'],\n-    package_data={\n-        'flask.testsuite': ['test_apps/*', 'static/*', 'templates/*']\n-    },\n+    include_package_data = True,\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ee8417dac8364f02524edffddff92329f15b95af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 14 | Files Changed: 14 | Hunks: 14 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 28 | Churn Cumulative: 5551 | Contributors (this commit): 27 | Commits (past 90d): 113 | Contributors (cumulative): 62 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@\n     A microframework based on Werkzeug.  It's extensively documented\n     and follows best practice patterns.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     This module implements the central WSGI application object.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the configuration related objects.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the objects required to keep the context.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Defines all the global objects that are proxies to the current\n     active context.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements various helpers.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the logging support for Flask.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements a class that represents module blueprints.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     This module used to flask with the session global so we moved it\n     over to flask.sessions\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Implements cookie based sessions based on Werkzeug's secure cookie\n     system.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Implements signals based on blinker if available, otherwise\n     falls silently back to a noop\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n signals_available = False\n\n@@ -5,7 +5,7 @@\n \n     Implements the bridge to Jinja2.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import posixpath\n\n@@ -6,7 +6,7 @@\n     Implements test support helpers.  This module is lazily imported\n     and usually not used in production environments.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the WSGI wrappers (request and response).\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#37f9cb9ca69176dec36faff4b2138226b479f65f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 8 | Hunks: 8 | Methods Changed: 0 | Complexity Δ (Sum/Max): 17/13 | Churn Δ: 23 | Churn Cumulative: 3104 | Contributors (this commit): 4 | Commits (past 90d): 45 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -10,6 +10,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import with_statement\n+\n from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n\n@@ -9,6 +9,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import os\n import sys\n import flask\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import re\n import flask\n import unittest\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import flask\n import unittest\n import warnings\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase, catch_warnings\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import os\n import flask\n import unittest\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n\n@@ -8,6 +8,9 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+from __future__ import with_statement\n+\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7331ae3df58bdf322122010e598b7e7bb793daea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 14 | Methods Changed: 1 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 34 | Churn Cumulative: 1354 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -702,63 +702,43 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def subdomain():\n             return 'Foo SubDomain'\n \n-        try:\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, 'Foo')\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n-        try:\n         rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n         self.assert_equal(rv.data, 'Foo')\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n-        try:\n         rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n         self.assert_equal(rv.data, 'Foo')\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n-        try:\n         app.config.update(SERVER_NAME='localhost.localdomain')\n         rv = app.test_client().get('/', 'https://localhost.localdomain')\n         self.assert_equal(rv.data, 'Foo')\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain:443')\n             rv = app.test_client().get('/', 'https://localhost.localdomain')\n-            self.assert_equal(rv.data, 'Foo')\n+            # Werkzeug 0.8\n+            self.assert_equal(rv.status_code, 404)\n         except ValueError, e:\n+            # Werkzeug 0.7\n             self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:443') does not match the \" + \\\n                     \"server name from the WSGI environment ('localhost.localdomain')\")\n \n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain')\n-            app.test_client().get('/', 'http://foo.localhost')\n+            rv = app.test_client().get('/', 'http://foo.localhost')\n+            # Werkzeug 0.8\n+            self.assert_equal(rv.status_code, 404)\n         except ValueError, e:\n+            # Werkzeug 0.7\n             self.assert_equal(str(e), \"the server name provided \" + \\\n                     \"('localhost.localdomain') does not match the \" + \\\n                     \"server name from the WSGI environment ('foo.localhost')\")\n \n-        try:\n         rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n         self.assert_equal(rv.data, 'Foo SubDomain')\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n     def test_exception_propagation(self):\n         def apprunner(configkey):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#88617311dba62992bf5736b35e3da9359ac5fedf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 46 | Churn Cumulative: 46 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,46 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.subclassing\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test that certain behavior of flask can be customized by\n+    subclasses.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+from StringIO import StringIO\n+from logging import StreamHandler\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class FlaskSubclassingTestCase(FlaskTestCase):\n+\n+    def test_supressed_exception_logging(self):\n+        class SupressedFlask(flask.Flask):\n+            def log_exception(self, exc_info):\n+                pass\n+\n+        out = StringIO()\n+        app = SupressedFlask(__name__)\n+        app.logger_name = 'flask_tests/test_supressed_exception_logging'\n+        app.logger.addHandler(StreamHandler(out))\n+\n+        @app.route('/')\n+        def index():\n+            1/0\n+\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.status_code, 500)\n+        self.assert_('Internal Server Error' in rv.data)\n+\n+        err = out.getvalue()\n+        self.assert_equal(err, '')\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(FlaskSubclassingTestCase))\n+    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d7d810aea5472101ce04956889dfdb77173a912", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2515 | Contributors (this commit): 14 | Commits (past 90d): 41 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -952,7 +952,7 @@ class Flask(_PackageBoundObject):\n                         :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n         def decorator(f):\n-            endpoint = options.pop(\"endpoint\", None)\n+            endpoint = options.pop('endpoint', None)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n         return decorator\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f6798885e6cc97bccd1e0fd861b54b01fcdb9605", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2517 | Contributors (this commit): 14 | Commits (past 90d): 42 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -606,7 +606,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n         override just the loader and keeping the rest unchanged.  It's\n         discouraged to override this function.  Instead one should override\n-        the :meth:`create_jinja_loader` function instead.\n+        the :meth:`jinja_loader` function instead.\n \n         The global loader dispatches between the loaders of the application\n         and the individual blueprints.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8caa54d31605f8997698d5c6c295ff4cff9ecdb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 459 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -292,8 +292,8 @@ class Blueprint(_PackageBoundObject):\n     def app_url_value_preprocessor(self, f):\n         \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\n         \"\"\"\n-        self.record_once(lambda s: s.app.url_value_preprocessor\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(lambda s: s.app.url_value_preprocessors\n+            .setdefault(None, []).append(f))\n         return f\n \n     def app_url_defaults(self, f):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#32c7e43dda6600828ae9b11111d722ab92fb0594", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 41 | Churn Cumulative: 315 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -110,6 +110,41 @@ class ViewTestCase(FlaskTestCase):\n         self.assert_equal(rv.headers['X-Parachute'], 'awesome')\n         self.assert_equal(rv.data, 'Awesome')\n \n+    def test_implicit_head(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return flask.Response('Blub', headers={\n+                    'X-Method': flask.request.method\n+                })\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        c = app.test_client()\n+        rv = c.get('/')\n+        self.assert_equal(rv.data, 'Blub')\n+        self.assert_equal(rv.headers['X-Method'], 'GET')\n+        rv = c.head('/')\n+        self.assert_equal(rv.data, '')\n+        self.assert_equal(rv.headers['X-Method'], 'HEAD')\n+\n+    def test_explicit_head(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return 'GET'\n+            def head(self):\n+                return flask.Response('', headers={'X-Method': 'HEAD'})\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        c = app.test_client()\n+        rv = c.get('/')\n+        self.assert_equal(rv.data, 'GET')\n+        rv = c.head('/')\n+        self.assert_equal(rv.data, '')\n+        self.assert_equal(rv.headers['X-Method'], 'HEAD')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -143,5 +143,9 @@ class MethodView(View):\n \n     def dispatch_request(self, *args, **kwargs):\n         meth = getattr(self, request.method.lower(), None)\n-        assert meth is not None, 'Not implemented method'\n+        # if the request method is HEAD and we don't have a handler for it\n+        # retry with GET\n+        if meth is None and request.method == 'HEAD':\n+            meth = getattr(self, 'get', None)\n+        assert meth is not None, 'Not implemented method %r' % request.method\n         return meth(*args, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8f85a3b0d161876de378b35ccac42237a18a5342", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 54 | Churn Cumulative: 54 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,54 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.ext\n+    ~~~~~~~~~\n+\n+    Redirect imports for extensions.  This module basically makes it possible\n+    for us to transition from flaskext.foo to flask_foo without having to\n+    force all extensions to upgrade at the same time.\n+\n+    When a user does ``from flask.ext.foo import bar`` it will attempt to\n+    imprt ``from flask_foo import bar`` first and when that fails it will\n+    try to import ``from flaskext.foo import bar``.\n+\n+    We're switching from namespace packages because it was just too painful for\n+    everybody involved.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import sys\n+\n+\n+class _ExtensionImporter(object):\n+    \"\"\"This importer redirects imports from this submodule to other\n+    locations.  This makes it possible to transition from the old\n+    flaskext.name to the newer flask_name without people having a\n+    hard time.\n+    \"\"\"\n+    _module_choices = ['flask_%s', 'flaskext.%s']\n+    _modules = sys.modules\n+\n+    def find_module(self, fullname, path=None):\n+        if fullname.rsplit('.', 1)[0] == __name__:\n+            return self\n+\n+    def load_module(self, fullname):\n+        if fullname in self._modules:\n+            return self._modules[fullname]\n+        packname, modname = fullname.rsplit('.', 1)\n+        for path in self._module_choices:\n+            realname = path % modname\n+            try:\n+                __import__(realname)\n+            except ImportError:\n+                continue\n+            module = self._modules[fullname] = self._modules[realname]\n+            setattr(self._modules[__name__], modname, module)\n+            module.__loader__ = self\n+            return module\n+        raise ImportError(fullname)\n+\n+\n+sys.meta_path.append(_ExtensionImporter())\n+del sys, _ExtensionImporter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c72ca16234e4dbea448ea43d002eb500c09f4932", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 89 | Lines Deleted: 16 | Files Changed: 5 | Hunks: 12 | Methods Changed: 12 | Complexity Δ (Sum/Max): 18/13 | Churn Δ: 105 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: 0.723404255319149\n\nDIFF:\n@@ -8,7 +8,7 @@\n     force all extensions to upgrade at the same time.\n \n     When a user does ``from flask.ext.foo import bar`` it will attempt to\n-    imprt ``from flask_foo import bar`` first and when that fails it will\n+    import ``from flask_foo import bar`` first and when that fails it will\n     try to import ``from flaskext.foo import bar``.\n \n     We're switching from namespace packages because it was just too painful for\n@@ -17,38 +17,46 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-import sys\n \n \n class _ExtensionImporter(object):\n-    \"\"\"This importer redirects imports from this submodule to other\n-    locations.  This makes it possible to transition from the old\n-    flaskext.name to the newer flask_name without people having a\n-    hard time.\n+    \"\"\"This importer redirects imports from this submodule to other locations.\n+    This makes it possible to transition from the old flaskext.name to the\n+    newer flask_name without people having a hard time.\n     \"\"\"\n     _module_choices = ['flask_%s', 'flaskext.%s']\n-    _modules = sys.modules\n+\n+    def __init__(self):\n+        from sys import meta_path\n+        self.prefix = __name__ + '.'\n+        self.prefix_cutoff = __name__.count('.') + 1\n+\n+        def _name(x):\n+            cls = type(x)\n+            return cls.__module__ + '.' + cls.__name__\n+        this = _name(self)\n+        meta_path[:] = [x for x in meta_path if _name(x) != this] + [self]\n \n     def find_module(self, fullname, path=None):\n-        if fullname.rsplit('.', 1)[0] == __name__:\n+        if fullname.startswith(self.prefix):\n             return self\n \n     def load_module(self, fullname):\n-        if fullname in self._modules:\n-            return self._modules[fullname]\n-        packname, modname = fullname.rsplit('.', 1)\n+        from sys import modules\n+        if fullname in modules:\n+            return modules[fullname]\n+        modname = fullname.split('.', self.prefix_cutoff)[self.prefix_cutoff]\n         for path in self._module_choices:\n             realname = path % modname\n             try:\n                 __import__(realname)\n             except ImportError:\n                 continue\n-            module = self._modules[fullname] = self._modules[realname]\n-            setattr(self._modules[__name__], modname, module)\n-            module.__loader__ = self\n+            module = modules[fullname] = modules[realname]\n+            setattr(modules[__name__], modname, module)\n             return module\n         raise ImportError(fullname)\n \n \n-sys.meta_path.append(_ExtensionImporter())\n-del sys, _ExtensionImporter\n+_ExtensionImporter()\n+del _ExtensionImporter\n\n@@ -0,0 +1,61 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.ext\n+    ~~~~~~~~~~~~~~~~~~~\n+\n+    Tests the extension import thing.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import sys\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class ExtImportHookTestCase(FlaskTestCase):\n+\n+    def setup(self):\n+        for entry, value in sys.modules.items():\n+            if entry.startswith('flask.ext.') and value is not None:\n+                sys.modules.pop(entry, None)\n+        from flask import ext\n+        reload(ext)\n+\n+        # reloading must not add more hooks\n+        import_hooks = 0\n+        for item in sys.meta_path:\n+            cls = type(item)\n+            if cls.__module__ == 'flask.ext' and \\\n+               cls.__name__ == '_ExtensionImporter':\n+                import_hooks += 1\n+        self.assert_equal(import_hooks, 1)\n+\n+    def test_flaskext_simple_import_normal(self):\n+        from flask.ext.newext_simple import ext_id\n+        self.assert_equal(ext_id, 'newext_simple')\n+\n+    def test_flaskext_simple_import_module(self):\n+        from flask.ext import newext_simple\n+        self.assert_equal(newext_simple.ext_id, 'newext_simple')\n+        self.assert_equal(newext_simple.__name__, 'flask_newext_simple')\n+\n+    def test_flaskext_package_import_normal(self):\n+        from flask.ext.newext_package import ext_id\n+        self.assert_equal(ext_id, 'newext_package')\n+\n+    def test_flaskext_package_import_module(self):\n+        from flask.ext import newext_package\n+        self.assert_equal(newext_package.ext_id, 'newext_package')\n+        self.assert_equal(newext_package.__name__, 'flask_newext_package')\n+\n+    def test_flaskext_package_import_submodule(self):\n+        from flask.ext.newext_package import submodule\n+        self.assert_equal(submodule.__name__, 'flask_newext_package.submodule')\n+        self.assert_equal(submodule.test_function(), 42)\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ExtImportHookTestCase))\n+    return suite\n\n@@ -0,0 +1 @@\n+ext_id = 'newext_package'\n\n@@ -0,0 +1,2 @@\n+def test_function():\n+    return 42\n\n@@ -0,0 +1 @@\n+ext_id = 'newext_simple'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f80bfcaa28da98972002fb906c2559babe75801e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 5 | Files Changed: 5 | Hunks: 9 | Methods Changed: 16 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 37 | Churn Cumulative: 98 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,29 +31,52 @@ class ExtImportHookTestCase(FlaskTestCase):\n                 import_hooks += 1\n         self.assert_equal(import_hooks, 1)\n \n-    def test_flaskext_simple_import_normal(self):\n+    def test_flaskext_new_simple_import_normal(self):\n         from flask.ext.newext_simple import ext_id\n         self.assert_equal(ext_id, 'newext_simple')\n \n-    def test_flaskext_simple_import_module(self):\n+    def test_flaskext_new_simple_import_module(self):\n         from flask.ext import newext_simple\n         self.assert_equal(newext_simple.ext_id, 'newext_simple')\n         self.assert_equal(newext_simple.__name__, 'flask_newext_simple')\n \n-    def test_flaskext_package_import_normal(self):\n+    def test_flaskext_new_package_import_normal(self):\n         from flask.ext.newext_package import ext_id\n         self.assert_equal(ext_id, 'newext_package')\n \n-    def test_flaskext_package_import_module(self):\n+    def test_flaskext_new_package_import_module(self):\n         from flask.ext import newext_package\n         self.assert_equal(newext_package.ext_id, 'newext_package')\n         self.assert_equal(newext_package.__name__, 'flask_newext_package')\n \n-    def test_flaskext_package_import_submodule(self):\n+    def test_flaskext_new_package_import_submodule(self):\n         from flask.ext.newext_package import submodule\n         self.assert_equal(submodule.__name__, 'flask_newext_package.submodule')\n         self.assert_equal(submodule.test_function(), 42)\n \n+    def test_flaskext_old_simple_import_normal(self):\n+        from flask.ext.oldext_simple import ext_id\n+        self.assert_equal(ext_id, 'oldext_simple')\n+\n+    def test_flaskext_old_simple_import_module(self):\n+        from flask.ext import oldext_simple\n+        self.assert_equal(oldext_simple.ext_id, 'oldext_simple')\n+        self.assert_equal(oldext_simple.__name__, 'flaskext.oldext_simple')\n+\n+    def test_flaskext_old_package_import_normal(self):\n+        from flask.ext.oldext_package import ext_id\n+        self.assert_equal(ext_id, 'oldext_package')\n+\n+    def test_flaskext_old_package_import_module(self):\n+        from flask.ext import oldext_package\n+        self.assert_equal(oldext_package.ext_id, 'oldext_package')\n+        self.assert_equal(oldext_package.__name__, 'flaskext.oldext_package')\n+\n+    def test_flaskext_old_package_import_submodule(self):\n+        from flask.ext.oldext_package import submodule\n+        self.assert_equal(submodule.__name__, 'flaskext.oldext_package.submodule')\n+        self.assert_equal(submodule.test_function(), 42)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\n@@ -0,0 +1 @@\n+ext_id = 'oldext_package'\n\n@@ -0,0 +1,2 @@\n+def test_function():\n+    return 42\n\n@@ -0,0 +1 @@\n+ext_id = 'oldext_simple'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e8020e2c5cd6dca816991845bd439e4524594f83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 99 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -31,6 +31,11 @@ class _ExtensionImporter(object):\n         self.prefix = __name__ + '.'\n         self.prefix_cutoff = __name__.count('.') + 1\n \n+        # since people might reload the flask.ext module (by accident or\n+        # intentionally) we have to make sure to not add more than one\n+        # import hook.  We can't check class types here either since a new\n+        # class will be created on reload.  As a result of that we check\n+        # the name of the class and remove stale instances.\n         def _name(x):\n             cls = type(x)\n             return cls.__module__ + '.' + cls.__name__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9df2aefd7f0c3c5d0fc47087da2f51b72cad38fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 6 | Churn Cumulative: 199 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -58,6 +58,7 @@ class _ExtensionImporter(object):\n             except ImportError:\n                 continue\n             module = modules[fullname] = modules[realname]\n+            if '.' not in modname:\n                 setattr(modules[__name__], modname, module)\n             return module\n         raise ImportError(fullname)\n\n@@ -31,6 +31,11 @@ class ExtImportHookTestCase(FlaskTestCase):\n                 import_hooks += 1\n         self.assert_equal(import_hooks, 1)\n \n+    def teardown(self):\n+        from flask import ext\n+        for key in ext.__dict__:\n+            self.assert_('.' not in key)\n+\n     def test_flaskext_new_simple_import_normal(self):\n         from flask.ext.newext_simple import ext_id\n         self.assert_equal(ext_id, 'newext_simple')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e94416704d70d64b21afb44569039f2b50db966f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 73 | Churn Cumulative: 73 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,73 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flaskext_compat\n+    ~~~~~~~~~~~~~~~\n+\n+    Implements the ``flask.ext`` virtual package for versions of Flask\n+    older than 0.7.  This module is a noop if Flask 0.8 was detected.\n+\n+    Usage::\n+\n+        import flaskext_compat\n+        from flask.ext import foo\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+\n+class _ExtensionImporter(object):\n+    \"\"\"This importer redirects imports from this submodule to other locations.\n+    This makes it possible to transition from the old flaskext.name to the\n+    newer flask_name without people having a hard time.\n+    \"\"\"\n+    _module_choices = ['flask_%s', 'flaskext.%s']\n+\n+    def __init__(self):\n+        from sys import meta_path\n+        self.prefix = __name__ + '.'\n+        self.prefix_cutoff = __name__.count('.') + 1\n+\n+        # since people might reload the flask.ext module (by accident or\n+        # intentionally) we have to make sure to not add more than one\n+        # import hook.  We can't check class types here either since a new\n+        # class will be created on reload.  As a result of that we check\n+        # the name of the class and remove stale instances.\n+        def _name(x):\n+            cls = type(x)\n+            return cls.__module__ + '.' + cls.__name__\n+        this = _name(self)\n+        meta_path[:] = [x for x in meta_path if _name(x) != this] + [self]\n+\n+    def find_module(self, fullname, path=None):\n+        if fullname.startswith(self.prefix):\n+            return self\n+\n+    def load_module(self, fullname):\n+        from sys import modules\n+        if fullname in modules:\n+            return modules[fullname]\n+        modname = fullname.split('.', self.prefix_cutoff)[self.prefix_cutoff]\n+        for path in self._module_choices:\n+            realname = path % modname\n+            try:\n+                __import__(realname)\n+            except ImportError:\n+                continue\n+            module = modules[fullname] = modules[realname]\n+            if '.' not in modname:\n+                setattr(modules[__name__], modname, module)\n+            return module\n+        raise ImportError(fullname)\n+\n+\n+import sys\n+import flask\n+try:\n+    __import__('flask.ext')\n+except ImportError:\n+    sys.modules['flask.ext'] = flask.ext = sys.modules[__name__]\n+    __name__ = __package__ = 'flask.ext'\n+    __path__ = []\n+    _ExtensionImporter()\n+del _ExtensionImporter, sys, flask\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
