{"custom_id": "fastapi#20079934334945cf1e527a37582742e1f8d6dbb0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 149 | Lines Deleted: 3362 | Files Changed: 17 | Hunks: 63 | Methods Changed: 243 | Complexity Δ (Sum/Max): -164/1 | Churn Δ: 3511 | Churn Cumulative: 11152 | Contributors (this commit): 8 | Commits (past 90d): 17 | Contributors (cumulative): 55 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,31 +1,47 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.security.tutorial001 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_no_token():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_no_token(client: TestClient):\n     response = client.get(\"/items\")\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_token():\n+def test_token(client: TestClient):\n     response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"token\": \"testtoken\"}\n \n \n-def test_incorrect_token():\n+def test_incorrect_token(client: TestClient):\n     response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,57 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.security.tutorial001_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            }\n-        },\n-    }\n\n@@ -1,68 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            }\n-        },\n-    }\n\n@@ -1,18 +1,36 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.security.tutorial003 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_login():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial003\",\n+        pytest.param(\"tutorial003_py310\", marks=needs_py310),\n+        \"tutorial003_an\",\n+        pytest.param(\"tutorial003_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial003_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_login(client: TestClient):\n     response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n \n \n-def test_login_incorrect_password():\n+def test_login_incorrect_password(client: TestClient):\n     response = client.post(\n         \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n     )\n@@ -20,20 +38,20 @@ def test_login_incorrect_password():\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n-def test_login_incorrect_username():\n+def test_login_incorrect_username(client: TestClient):\n     response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n-def test_no_token():\n+def test_no_token(client: TestClient):\n     response = client.get(\"/users/me\")\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_token():\n+def test_token(client: TestClient):\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -45,14 +63,14 @@ def test_token():\n     }\n \n \n-def test_incorrect_token():\n+def test_incorrect_token(client: TestClient):\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_incorrect_token_type():\n+def test_incorrect_token_type(client: TestClient):\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n@@ -61,13 +79,13 @@ def test_incorrect_token_type():\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_inactive_user():\n+def test_inactive_user(client: TestClient):\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Inactive user\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,207 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.security.tutorial003_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_login():\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-def test_login_incorrect_password():\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_login_incorrect_username():\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_no_token():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_incorrect_token_type():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_inactive_user():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me_get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_token_post\": {\n-                    \"title\": \"Body_login_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,223 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me_get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_token_post\": {\n-                    \"title\": \"Body_login_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,223 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me_get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_token_post\": {\n-                    \"title\": \"Body_login_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,223 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me_get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_token_post\": {\n-                    \"title\": \"Body_login_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,18 +1,33 @@\n+import importlib\n+from types import ModuleType\n+\n+import pytest\n from dirty_equals import IsDict, IsOneOf\n from fastapi.testclient import TestClient\n \n-from docs_src.security.tutorial005 import (\n-    app,\n-    create_access_token,\n-    fake_users_db,\n-    get_password_hash,\n-    verify_password,\n+from ...utils import needs_py39, needs_py310\n+\n+\n+@pytest.fixture(\n+    name=\"mod\",\n+    params=[\n+        \"tutorial005\",\n+        pytest.param(\"tutorial005_py310\", marks=needs_py310),\n+        \"tutorial005_an\",\n+        pytest.param(\"tutorial005_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial005_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial005_an_py310\", marks=needs_py310),\n+    ],\n )\n+def get_mod(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n \n-client = TestClient(app)\n+    return mod\n \n \n-def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n+def get_access_token(\n+    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n+):\n     data = {\"username\": username, \"password\": password}\n     if scope:\n         data[\"scope\"] = scope\n@@ -22,7 +37,8 @@ def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n     return access_token\n \n \n-def test_login():\n+def test_login(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n     assert response.status_code == 200, response.text\n     content = response.json()\n@@ -30,7 +46,8 @@ def test_login():\n     assert content[\"token_type\"] == \"bearer\"\n \n \n-def test_login_incorrect_password():\n+def test_login_incorrect_password(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.post(\n         \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n     )\n@@ -38,21 +55,24 @@ def test_login_incorrect_password():\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n-def test_login_incorrect_username():\n+def test_login_incorrect_username(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n-def test_no_token():\n+def test_no_token(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/users/me\")\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_token():\n-    access_token = get_access_token(scope=\"me\")\n+def test_token(mod: ModuleType):\n+    client = TestClient(mod.app)\n+    access_token = get_access_token(scope=\"me\", client=client)\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n@@ -65,14 +85,16 @@ def test_token():\n     }\n \n \n-def test_incorrect_token():\n+def test_incorrect_token(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_incorrect_token_type():\n+def test_incorrect_token_type(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n@@ -81,20 +103,24 @@ def test_incorrect_token_type():\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_verify_password():\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n+def test_verify_password(mod: ModuleType):\n+    assert mod.verify_password(\n+        \"secret\", mod.fake_users_db[\"johndoe\"][\"hashed_password\"]\n+    )\n \n \n-def test_get_password_hash():\n-    assert get_password_hash(\"secretalice\")\n+def test_get_password_hash(mod: ModuleType):\n+    assert mod.get_password_hash(\"secretalice\")\n \n \n-def test_create_access_token():\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n+def test_create_access_token(mod: ModuleType):\n+    access_token = mod.create_access_token(data={\"data\": \"foo\"})\n     assert access_token\n \n \n-def test_token_no_sub():\n+def test_token_no_sub(mod: ModuleType):\n+    client = TestClient(mod.app)\n+\n     response = client.get(\n         \"/users/me\",\n         headers={\n@@ -106,7 +132,9 @@ def test_token_no_sub():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_no_username():\n+def test_token_no_username(mod: ModuleType):\n+    client = TestClient(mod.app)\n+\n     response = client.get(\n         \"/users/me\",\n         headers={\n@@ -118,8 +146,10 @@ def test_token_no_username():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_no_scope():\n-    access_token = get_access_token()\n+def test_token_no_scope(mod: ModuleType):\n+    client = TestClient(mod.app)\n+\n+    access_token = get_access_token(client=client)\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n@@ -128,7 +158,9 @@ def test_token_no_scope():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_nonexistent_user():\n+def test_token_nonexistent_user(mod: ModuleType):\n+    client = TestClient(mod.app)\n+\n     response = client.get(\n         \"/users/me\",\n         headers={\n@@ -140,9 +172,11 @@ def test_token_nonexistent_user():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_inactive_user():\n+def test_token_inactive_user(mod: ModuleType):\n+    client = TestClient(mod.app)\n+\n     access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\"\n+        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n     )\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n@@ -151,8 +185,9 @@ def test_token_inactive_user():\n     assert response.json() == {\"detail\": \"Inactive user\"}\n \n \n-def test_read_items():\n-    access_token = get_access_token(scope=\"me items\")\n+def test_read_items(mod: ModuleType):\n+    client = TestClient(mod.app)\n+    access_token = get_access_token(scope=\"me items\", client=client)\n     response = client.get(\n         \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n@@ -160,8 +195,9 @@ def test_read_items():\n     assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n \n \n-def test_read_system_status():\n-    access_token = get_access_token()\n+def test_read_system_status(mod: ModuleType):\n+    client = TestClient(mod.app)\n+    access_token = get_access_token(client=client)\n     response = client.get(\n         \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n@@ -169,14 +205,16 @@ def test_read_system_status():\n     assert response.json() == {\"status\": \"ok\"}\n \n \n-def test_read_system_status_no_token():\n+def test_read_system_status_no_token(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/status/\")\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,409 +0,0 @@\n-from dirty_equals import IsDict, IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from docs_src.security.tutorial005_an import (\n-    app,\n-    create_access_token,\n-    fake_users_db,\n-    get_password_hash,\n-    verify_password,\n-)\n-\n-client = TestClient(app)\n-\n-\n-def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n-    data = {\"username\": username, \"password\": password}\n-    if scope:\n-        data[\"scope\"] = scope\n-    response = client.post(\"/token\", data=data)\n-    content = response.json()\n-    access_token = content.get(\"access_token\")\n-    return access_token\n-\n-\n-def test_login():\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    content = response.json()\n-    assert \"access_token\" in content\n-    assert content[\"token_type\"] == \"bearer\"\n-\n-\n-def test_login_incorrect_password():\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_login_incorrect_username():\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_no_token():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    access_token = get_access_token(scope=\"me\")\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"disabled\": False,\n-    }\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-def test_incorrect_token_type():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_verify_password():\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n-\n-\n-def test_get_password_hash():\n-    assert get_password_hash(\"secretalice\")\n-\n-\n-def test_create_access_token():\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n-    assert access_token\n-\n-\n-def test_token_no_sub():\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-def test_token_no_username():\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-def test_token_no_scope():\n-    access_token = get_access_token()\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not enough permissions\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-def test_token_nonexistent_user():\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-def test_token_inactive_user():\n-    access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\"\n-    )\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-def test_read_items():\n-    access_token = get_access_token(scope=\"me items\")\n-    response = client.get(\n-        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n-\n-\n-def test_read_system_status():\n-    access_token = get_access_token()\n-    response = client.get(\n-        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"status\": \"ok\"}\n-\n-\n-def test_read_system_status_no_token():\n-    response = client.get(\"/status/\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login For Access Token\",\n-                    \"operationId\": \"login_for_access_token_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-                }\n-            },\n-            \"/users/me/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Own Items\",\n-                    \"operationId\": \"read_own_items_users_me_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-                }\n-            },\n-            \"/status/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read System Status\",\n-                    \"operationId\": \"read_system_status_status__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": IsOneOf(\n-                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"username\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"email\": IsDict(\n-                            {\n-                                \"title\": \"Email\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Email\", \"type\": \"string\"}\n-                        ),\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                        \"disabled\": IsDict(\n-                            {\n-                                \"title\": \"Disabled\",\n-                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n-                        ),\n-                    },\n-                },\n-                \"Token\": {\n-                    \"title\": \"Token\",\n-                    \"required\": [\"access_token\", \"token_type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"Body_login_for_access_token_token_post\": {\n-                    \"title\": \"Body_login_for_access_token_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\n-                        \"password\": {\n-                            \"scopes\": {\n-                                \"me\": \"Read information about the current user.\",\n-                                \"items\": \"Read items.\",\n-                            },\n-                            \"tokenUrl\": \"token\",\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,437 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict, IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial005_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def get_access_token(\n-    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n-):\n-    data = {\"username\": username, \"password\": password}\n-    if scope:\n-        data[\"scope\"] = scope\n-    response = client.post(\"/token\", data=data)\n-    content = response.json()\n-    access_token = content.get(\"access_token\")\n-    return access_token\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    content = response.json()\n-    assert \"access_token\" in content\n-    assert content[\"token_type\"] == \"bearer\"\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    access_token = get_access_token(scope=\"me\", client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_verify_password():\n-    from docs_src.security.tutorial005_an_py310 import fake_users_db, verify_password\n-\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n-\n-\n-@needs_py310\n-def test_get_password_hash():\n-    from docs_src.security.tutorial005_an_py310 import get_password_hash\n-\n-    assert get_password_hash(\"secretalice\")\n-\n-\n-@needs_py310\n-def test_create_access_token():\n-    from docs_src.security.tutorial005_an_py310 import create_access_token\n-\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n-    assert access_token\n-\n-\n-@needs_py310\n-def test_token_no_sub(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_no_username(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_no_scope(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not enough permissions\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_nonexistent_user(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_inactive_user(client: TestClient):\n-    access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n-    )\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py310\n-def test_read_items(client: TestClient):\n-    access_token = get_access_token(scope=\"me items\", client=client)\n-    response = client.get(\n-        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n-\n-\n-@needs_py310\n-def test_read_system_status(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"status\": \"ok\"}\n-\n-\n-@needs_py310\n-def test_read_system_status_no_token(client: TestClient):\n-    response = client.get(\"/status/\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login For Access Token\",\n-                    \"operationId\": \"login_for_access_token_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-                }\n-            },\n-            \"/users/me/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Own Items\",\n-                    \"operationId\": \"read_own_items_users_me_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-                }\n-            },\n-            \"/status/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read System Status\",\n-                    \"operationId\": \"read_system_status_status__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": IsOneOf(\n-                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"username\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"email\": IsDict(\n-                            {\n-                                \"title\": \"Email\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Email\", \"type\": \"string\"}\n-                        ),\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                        \"disabled\": IsDict(\n-                            {\n-                                \"title\": \"Disabled\",\n-                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n-                        ),\n-                    },\n-                },\n-                \"Token\": {\n-                    \"title\": \"Token\",\n-                    \"required\": [\"access_token\", \"token_type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"Body_login_for_access_token_token_post\": {\n-                    \"title\": \"Body_login_for_access_token_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\n-                        \"password\": {\n-                            \"scopes\": {\n-                                \"me\": \"Read information about the current user.\",\n-                                \"items\": \"Read items.\",\n-                            },\n-                            \"tokenUrl\": \"token\",\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,437 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict, IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial005_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def get_access_token(\n-    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n-):\n-    data = {\"username\": username, \"password\": password}\n-    if scope:\n-        data[\"scope\"] = scope\n-    response = client.post(\"/token\", data=data)\n-    content = response.json()\n-    access_token = content.get(\"access_token\")\n-    return access_token\n-\n-\n-@needs_py39\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    content = response.json()\n-    assert \"access_token\" in content\n-    assert content[\"token_type\"] == \"bearer\"\n-\n-\n-@needs_py39\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    access_token = get_access_token(scope=\"me\", client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_verify_password():\n-    from docs_src.security.tutorial005_an_py39 import fake_users_db, verify_password\n-\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n-\n-\n-@needs_py39\n-def test_get_password_hash():\n-    from docs_src.security.tutorial005_an_py39 import get_password_hash\n-\n-    assert get_password_hash(\"secretalice\")\n-\n-\n-@needs_py39\n-def test_create_access_token():\n-    from docs_src.security.tutorial005_an_py39 import create_access_token\n-\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n-    assert access_token\n-\n-\n-@needs_py39\n-def test_token_no_sub(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_no_username(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_no_scope(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not enough permissions\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_nonexistent_user(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_inactive_user(client: TestClient):\n-    access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n-    )\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py39\n-def test_read_items(client: TestClient):\n-    access_token = get_access_token(scope=\"me items\", client=client)\n-    response = client.get(\n-        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n-\n-\n-@needs_py39\n-def test_read_system_status(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"status\": \"ok\"}\n-\n-\n-@needs_py39\n-def test_read_system_status_no_token(client: TestClient):\n-    response = client.get(\"/status/\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login For Access Token\",\n-                    \"operationId\": \"login_for_access_token_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-                }\n-            },\n-            \"/users/me/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Own Items\",\n-                    \"operationId\": \"read_own_items_users_me_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-                }\n-            },\n-            \"/status/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read System Status\",\n-                    \"operationId\": \"read_system_status_status__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": IsOneOf(\n-                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"username\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"email\": IsDict(\n-                            {\n-                                \"title\": \"Email\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Email\", \"type\": \"string\"}\n-                        ),\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                        \"disabled\": IsDict(\n-                            {\n-                                \"title\": \"Disabled\",\n-                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n-                        ),\n-                    },\n-                },\n-                \"Token\": {\n-                    \"title\": \"Token\",\n-                    \"required\": [\"access_token\", \"token_type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"Body_login_for_access_token_token_post\": {\n-                    \"title\": \"Body_login_for_access_token_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\n-                        \"password\": {\n-                            \"scopes\": {\n-                                \"me\": \"Read information about the current user.\",\n-                                \"items\": \"Read items.\",\n-                            },\n-                            \"tokenUrl\": \"token\",\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,437 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict, IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial005_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def get_access_token(\n-    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n-):\n-    data = {\"username\": username, \"password\": password}\n-    if scope:\n-        data[\"scope\"] = scope\n-    response = client.post(\"/token\", data=data)\n-    content = response.json()\n-    access_token = content.get(\"access_token\")\n-    return access_token\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    content = response.json()\n-    assert \"access_token\" in content\n-    assert content[\"token_type\"] == \"bearer\"\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    access_token = get_access_token(scope=\"me\", client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_verify_password():\n-    from docs_src.security.tutorial005_py310 import fake_users_db, verify_password\n-\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n-\n-\n-@needs_py310\n-def test_get_password_hash():\n-    from docs_src.security.tutorial005_py310 import get_password_hash\n-\n-    assert get_password_hash(\"secretalice\")\n-\n-\n-@needs_py310\n-def test_create_access_token():\n-    from docs_src.security.tutorial005_py310 import create_access_token\n-\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n-    assert access_token\n-\n-\n-@needs_py310\n-def test_token_no_sub(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_no_username(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_no_scope(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not enough permissions\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_nonexistent_user(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py310\n-def test_token_inactive_user(client: TestClient):\n-    access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n-    )\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py310\n-def test_read_items(client: TestClient):\n-    access_token = get_access_token(scope=\"me items\", client=client)\n-    response = client.get(\n-        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n-\n-\n-@needs_py310\n-def test_read_system_status(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"status\": \"ok\"}\n-\n-\n-@needs_py310\n-def test_read_system_status_no_token(client: TestClient):\n-    response = client.get(\"/status/\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login For Access Token\",\n-                    \"operationId\": \"login_for_access_token_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-                }\n-            },\n-            \"/users/me/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Own Items\",\n-                    \"operationId\": \"read_own_items_users_me_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-                }\n-            },\n-            \"/status/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read System Status\",\n-                    \"operationId\": \"read_system_status_status__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": IsOneOf(\n-                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"username\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"email\": IsDict(\n-                            {\n-                                \"title\": \"Email\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Email\", \"type\": \"string\"}\n-                        ),\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                        \"disabled\": IsDict(\n-                            {\n-                                \"title\": \"Disabled\",\n-                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n-                        ),\n-                    },\n-                },\n-                \"Token\": {\n-                    \"title\": \"Token\",\n-                    \"required\": [\"access_token\", \"token_type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"Body_login_for_access_token_token_post\": {\n-                    \"title\": \"Body_login_for_access_token_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\n-                        \"password\": {\n-                            \"scopes\": {\n-                                \"me\": \"Read information about the current user.\",\n-                                \"items\": \"Read items.\",\n-                            },\n-                            \"tokenUrl\": \"token\",\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,437 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict, IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial005_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def get_access_token(\n-    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n-):\n-    data = {\"username\": username, \"password\": password}\n-    if scope:\n-        data[\"scope\"] = scope\n-    response = client.post(\"/token\", data=data)\n-    content = response.json()\n-    access_token = content.get(\"access_token\")\n-    return access_token\n-\n-\n-@needs_py39\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    content = response.json()\n-    assert \"access_token\" in content\n-    assert content[\"token_type\"] == \"bearer\"\n-\n-\n-@needs_py39\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    access_token = get_access_token(scope=\"me\", client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_verify_password():\n-    from docs_src.security.tutorial005_py39 import fake_users_db, verify_password\n-\n-    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n-\n-\n-@needs_py39\n-def test_get_password_hash():\n-    from docs_src.security.tutorial005_py39 import get_password_hash\n-\n-    assert get_password_hash(\"secretalice\")\n-\n-\n-@needs_py39\n-def test_create_access_token():\n-    from docs_src.security.tutorial005_py39 import create_access_token\n-\n-    access_token = create_access_token(data={\"data\": \"foo\"})\n-    assert access_token\n-\n-\n-@needs_py39\n-def test_token_no_sub(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_no_username(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_no_scope(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not enough permissions\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_nonexistent_user(client: TestClient):\n-    response = client.get(\n-        \"/users/me\",\n-        headers={\n-            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n-        },\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n-\n-\n-@needs_py39\n-def test_token_inactive_user(client: TestClient):\n-    access_token = get_access_token(\n-        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n-    )\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n-\n-\n-@needs_py39\n-def test_read_items(client: TestClient):\n-    access_token = get_access_token(scope=\"me items\", client=client)\n-    response = client.get(\n-        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n-\n-\n-@needs_py39\n-def test_read_system_status(client: TestClient):\n-    access_token = get_access_token(client=client)\n-    response = client.get(\n-        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"status\": \"ok\"}\n-\n-\n-@needs_py39\n-def test_read_system_status_no_token(client: TestClient):\n-    response = client.get(\"/status/\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/token\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login For Access Token\",\n-                    \"operationId\": \"login_for_access_token_token_post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/users/me/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Users Me\",\n-                    \"operationId\": \"read_users_me_users_me__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-                }\n-            },\n-            \"/users/me/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Own Items\",\n-                    \"operationId\": \"read_own_items_users_me_items__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-                }\n-            },\n-            \"/status/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read System Status\",\n-                    \"operationId\": \"read_system_status_status__get\",\n-                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": IsOneOf(\n-                        [\"username\", \"email\", \"full_name\", \"disabled\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"username\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"email\": IsDict(\n-                            {\n-                                \"title\": \"Email\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Email\", \"type\": \"string\"}\n-                        ),\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                        \"disabled\": IsDict(\n-                            {\n-                                \"title\": \"Disabled\",\n-                                \"anyOf\": [{\"type\": \"boolean\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Disabled\", \"type\": \"boolean\"}\n-                        ),\n-                    },\n-                },\n-                \"Token\": {\n-                    \"title\": \"Token\",\n-                    \"required\": [\"access_token\", \"token_type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"Body_login_for_access_token_token_post\": {\n-                    \"title\": \"Body_login_for_access_token_token_post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"grant_type\": IsDict(\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                        \"client_id\": IsDict(\n-                            {\n-                                \"title\": \"Client Id\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Id\", \"type\": \"string\"}\n-                        ),\n-                        \"client_secret\": IsDict(\n-                            {\n-                                \"title\": \"Client Secret\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Client Secret\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            },\n-            \"securitySchemes\": {\n-                \"OAuth2PasswordBearer\": {\n-                    \"type\": \"oauth2\",\n-                    \"flows\": {\n-                        \"password\": {\n-                            \"scopes\": {\n-                                \"me\": \"Read information about the current user.\",\n-                                \"items\": \"Read items.\",\n-                            },\n-                            \"tokenUrl\": \"token\",\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-    }\n\n@@ -1,26 +1,41 @@\n+import importlib\n from base64 import b64encode\n \n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.security.tutorial006 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_security_http_basic():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial006\",\n+        \"tutorial006_an\",\n+        pytest.param(\"tutorial006_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.security.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_security_http_basic(client: TestClient):\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n \n \n-def test_security_http_basic_no_credentials():\n+def test_security_http_basic_no_credentials(client: TestClient):\n     response = client.get(\"/users/me\")\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n \n \n-def test_security_http_basic_invalid_credentials():\n+def test_security_http_basic_invalid_credentials(client: TestClient):\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n@@ -29,7 +44,7 @@ def test_security_http_basic_invalid_credentials():\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n \n-def test_security_http_basic_non_basic_credentials():\n+def test_security_http_basic_non_basic_credentials(client: TestClient):\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n@@ -38,7 +53,7 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,65 +0,0 @@\n-from base64 import b64encode\n-\n-from fastapi.testclient import TestClient\n-\n-from docs_src.security.tutorial006_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_security_http_basic():\n-    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n-\n-\n-def test_security_http_basic_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-\n-\n-def test_security_http_basic_invalid_credentials():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-\n-\n-def test_security_http_basic_non_basic_credentials():\n-    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n-    auth_header = f\"Basic {payload}\"\n-    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Current User\",\n-                    \"operationId\": \"read_current_user_users_me_get\",\n-                    \"security\": [{\"HTTPBasic\": []}],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-        },\n-    }\n\n@@ -1,77 +0,0 @@\n-from base64 import b64encode\n-\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial006_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_security_http_basic(client: TestClient):\n-    response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n-\n-\n-@needs_py39\n-def test_security_http_basic_no_credentials(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-\n-\n-@needs_py39\n-def test_security_http_basic_invalid_credentials(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-\n-\n-@needs_py39\n-def test_security_http_basic_non_basic_credentials(client: TestClient):\n-    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n-    auth_header = f\"Basic {payload}\"\n-    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 401, response.text\n-    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Read Current User\",\n-                    \"operationId\": \"read_current_user_users_me_get\",\n-                    \"security\": [{\"HTTPBasic\": []}],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
