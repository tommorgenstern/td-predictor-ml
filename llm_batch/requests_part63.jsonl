{"custom_id": "requests#6da7e22a4ab07f4b5a573d37a6149a2d5cfdb7af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 8 | Churn Cumulative: 11354 | Contributors (this commit): 112 | Commits (past 90d): 117 | Contributors (cumulative): 138 | DMM Complexity: 1.0\n\nDIFF:\n@@ -325,6 +325,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n+            if is_py2:\n+                headers = dict((builtin_str(name), value) for name, value in headers.items())\n             self.headers = CaseInsensitiveDict(headers)\n         else:\n             self.headers = CaseInsensitiveDict()\n\n@@ -10,7 +10,7 @@ import unittest\n \n import requests\n from requests.auth import HTTPDigestAuth\n-from requests.compat import str\n+from requests.compat import is_py2, str\n \n try:\n     import StringIO\n@@ -251,6 +251,10 @@ class RequestsTestCase(unittest.TestCase):\n         requests.get(url, params={'foo': 'foo'})\n         requests.get(httpbin('ø'), params={'foo': 'foo'})\n \n+    def test_unicode_header_name(self):\n+        if is_py2:\n+            requests.put(httpbin('put'), headers={unicode('Content-Type'): 'application/octet-stream'}, data='\\xff')\n+\n     def test_urlencoded_get_query_multivalued_param(self):\n \n         r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c8d1b9a7dc909a02fa0304d00b87b664edc385d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 9 | Churn Cumulative: 10617 | Contributors (this commit): 115 | Commits (past 90d): 145 | Contributors (cumulative): 133 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,6 @@ import datetime\n from io import BytesIO\n from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n-from .status_codes import codes\n \n from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header\n@@ -28,7 +27,6 @@ from .compat import (\n     cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring)\n \n-REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n \n\n@@ -24,7 +24,12 @@ from .adapters import HTTPAdapter\n from .utils import requote_uri, get_environ_proxies, get_netrc_auth\n \n from .status_codes import codes\n-REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n+REDIRECT_STATI = (\n+    codes.moved, # 301\n+    codes.found, # 302\n+    codes.other, # 303\n+    codes.temporary_moved, # 307\n+)\n DEFAULT_REDIRECT_LIMIT = 30\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#56f4b7ca68d75795112b673673de2b90f05c9e93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 8 | Churn Cumulative: 11364 | Contributors (this commit): 112 | Commits (past 90d): 120 | Contributors (cumulative): 138 | DMM Complexity: 0.0\n\nDIFF:\n@@ -325,8 +325,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            if is_py2:\n-                headers = dict((builtin_str(name), value) for name, value in headers.items())\n+            headers = dict((name.encode('ascii'), value) for name, value in headers.items())\n             self.headers = CaseInsensitiveDict(headers)\n         else:\n             self.headers = CaseInsensitiveDict()\n\n@@ -10,7 +10,7 @@ import unittest\n \n import requests\n from requests.auth import HTTPDigestAuth\n-from requests.compat import is_py2, str\n+from requests.compat import str\n \n try:\n     import StringIO\n@@ -252,8 +252,7 @@ class RequestsTestCase(unittest.TestCase):\n         requests.get(httpbin('ø'), params={'foo': 'foo'})\n \n     def test_unicode_header_name(self):\n-        if is_py2:\n-            requests.put(httpbin('put'), headers={unicode('Content-Type'): 'application/octet-stream'}, data='\\xff')\n+        requests.put(httpbin('put'), headers={str('Content-Type'): 'application/octet-stream'}, data='\\xff') # compat.str is unicode.\n \n     def test_urlencoded_get_query_multivalued_param(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4dfd6f3fc1f73c013163b1dec8f24accf99df69d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 2022 | Contributors (this commit): 31 | Commits (past 90d): 61 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -414,6 +414,9 @@ class Session(SessionRedirectMixin):\n         # Total elapsed time of the request (approximately)\n         r.elapsed = datetime.utcnow() - start\n \n+        # Response manipulation hooks\n+        r = dispatch_hook('response', hooks, r)\n+\n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n                                      timeout=timeout, verify=verify, cert=cert,\n@@ -430,9 +433,6 @@ class Session(SessionRedirectMixin):\n             r = history.pop()\n             r.history = tuple(history)\n \n-        # Response manipulation hooks\n-        r = dispatch_hook('response', hooks, r)\n-\n         return r\n \n     def get_adapter(self, url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d0285fac4203e8cfed6b5ceeb96b2646076e745d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 3579 | Contributors (this commit): 50 | Commits (past 90d): 78 | Contributors (cumulative): 64 | DMM Complexity: None\n\nDIFF:\n@@ -142,7 +142,7 @@ class HTTPDigestAuth(AuthBase):\n \n         return 'Digest %s' % (base)\n \n-    def handle_401(self, r):\n+    def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n         num_401_calls = getattr(self, 'num_401_calls', 1)\n@@ -159,7 +159,7 @@ class HTTPDigestAuth(AuthBase):\n             r.raw.release_conn()\n \n             r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)\n-            _r = r.connection.send(r.request)\n+            _r = r.connection.send(r.request, **kwargs)\n             _r.history.append(r)\n \n             return _r\n\n@@ -26,7 +26,7 @@ def default_hooks():\n # TODO: response is the only one\n \n \n-def dispatch_hook(key, hooks, hook_data):\n+def dispatch_hook(key, hooks, hook_data, **kwargs):\n     \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n \n     hooks = hooks or dict()\n@@ -38,7 +38,7 @@ def dispatch_hook(key, hooks, hook_data):\n             hooks = [hooks]\n \n         for hook in hooks:\n-            _hook_data = hook(hook_data)\n+            _hook_data = hook(hook_data, **kwargs)\n             if _hook_data is not None:\n                 hook_data = _hook_data\n \n\n@@ -415,7 +415,7 @@ class Session(SessionRedirectMixin):\n         r.elapsed = datetime.utcnow() - start\n \n         # Response manipulation hooks\n-        r = dispatch_hook('response', hooks, r)\n+        r = dispatch_hook('response', hooks, r, **kwargs)\n \n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#69ba64380b5eee14f741f45b22711115fe5c6d98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 2772 | Contributors (this commit): 37 | Commits (past 90d): 35 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -172,6 +172,18 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(url)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_DIGEST_STREAM(self):\n+\n+        auth = HTTPDigestAuth('user', 'pass')\n+        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+\n+        r = requests.get(url, auth=auth, stream=True)\n+        self.assertNotEqual(r.raw.read(), '')\n+\n+        r = requests.get(url, auth=auth, stream=False)\n+        self.assertEqual(r.raw.read(), '')\n+\n+\n     def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n \n         auth = HTTPDigestAuth('user', 'wrongpass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#df5dcb8a7d60d74ee8c1fb955f1dc2fca84566fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2776 | Contributors (this commit): 37 | Commits (past 90d): 36 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -178,10 +178,10 @@ class RequestsTestCase(unittest.TestCase):\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n \n         r = requests.get(url, auth=auth, stream=True)\n-        self.assertNotEqual(r.raw.read(), '')\n+        self.assertNotEqual(str(r.raw.read()), str(''))\n \n         r = requests.get(url, auth=auth, stream=False)\n-        self.assertEqual(r.raw.read(), '')\n+        self.assertEqual(str(r.raw.read()), str(''))\n \n \n     def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87d9d9643c73d6fc7f701263e5c4e93217db022f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 8 | Churn Cumulative: 557 | Contributors (this commit): 12 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -258,6 +258,14 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Deletes a cookie given a name. Wraps cookielib.CookieJar's remove_cookie_by_name().\"\"\"\n         remove_cookie_by_name(self, name)\n \n+    def update(self, other):\n+        \"\"\"Updates this jar with cookies from another CookieJar or dict-like\"\"\"\n+        if isinstance(other, cookielib.CookieJar):\n+            for cookie in other:\n+                self.set_cookie(cookie)\n+        else:\n+            super(RequestsCookieJar, self).update(other)\n+\n     def _find(self, name, domain=None, path=None):\n         \"\"\"Requests uses this method internally to get cookie values. Takes as args name\n         and optional domain and path. Returns a cookie.value. If there are conflicting cookies,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c21106222f954b77531ccbcba69407327ceab38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2780 | Contributors (this commit): 37 | Commits (past 90d): 37 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -178,10 +178,10 @@ class RequestsTestCase(unittest.TestCase):\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n \n         r = requests.get(url, auth=auth, stream=True)\n-        self.assertNotEqual(str(r.raw.read()), str(''))\n+        self.assertNotEqual(r.raw.read(), b'')\n \n         r = requests.get(url, auth=auth, stream=False)\n-        self.assertEqual(str(r.raw.read()), str(''))\n+        self.assertEqual(r.raw.read(), b'')\n \n \n     def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3393fb24cc74e9e9aff643e16e0480fcced6ba3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 561 | Contributors (this commit): 12 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -240,8 +240,6 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Dict-like __getitem__() for compatibility with client code. Throws exception\n         if there are more than one cookie with name. In that case, use the more\n         explicit get() method instead. Caution: operation is O(n), not O(1).\"\"\"\n-        if isinstance(name, cookielib.Cookie):\n-            name = name.name\n \n         return self._find_no_duplicates(name)\n \n@@ -249,8 +247,6 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Dict-like __setitem__ for compatibility with client code. Throws exception\n         if there is already a cookie of that name in the jar. In that case, use the more\n         explicit set() method instead.\"\"\"\n-        if isinstance(name, cookielib.Cookie):\n-            name = name.name\n \n         self.set(name, value)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3f86e22a07fb1bd91c70d3c487efbadb55f6b36a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 19 | Churn Cumulative: 4384 | Contributors (this commit): 67 | Commits (past 90d): 84 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -307,8 +307,10 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n             self._cookies_lock = threading.RLock()\n \n     def copy(self):\n-        \"\"\"This is not implemented. Calling this will throw an exception.\"\"\"\n-        raise NotImplementedError\n+        \"\"\"Return a copy of this RequestsCookieJar.\"\"\"\n+        new_cj = RequestsCookieJar()\n+        new_cj.update(self)\n+        return new_cj\n \n \n def create_cookie(name, value, **kwargs):\n\n@@ -251,9 +251,10 @@ class Session(SessionRedirectMixin):\n         if not isinstance(cookies, cookielib.CookieJar):\n             cookies = cookiejar_from_dict(cookies)\n \n-        # Bubble down session cookies.\n-        for cookie in self.cookies:\n-            cookies.set_cookie(cookie)\n+        # Merge with session cookies\n+        merged_cookies = self.cookies.copy()\n+        merged_cookies.update(cookies)\n+        cookies = merged_cookies\n \n         # Gather clues from the surrounding environment.\n         if self.trust_env:\n@@ -312,8 +313,7 @@ class Session(SessionRedirectMixin):\n         resp = self.send(prep, **send_kwargs)\n \n         # Persist cookies.\n-        for cookie in resp.cookies:\n-            self.cookies.set_cookie(cookie)\n+        self.cookies.update(resp.cookies)\n \n         return resp\n \n\n@@ -252,8 +252,7 @@ def add_dict_to_cookiejar(cj, cookie_dict):\n     \"\"\"\n \n     cj2 = cookiejar_from_dict(cookie_dict)\n-    for cookie in cj2:\n-        cj.set_cookie(cookie)\n+    cj.update(cj2)\n     return cj\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2480f65e6d3ff2d9af376cd609653882a7cfd3f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 420 | Contributors (this commit): 5 | Commits (past 90d): 36 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -228,7 +228,7 @@ class HTTPAdapter(BaseAdapter):\n             elif isinstance(e, TimeoutError):\n                 raise Timeout(e)\n             else:\n-                raise Timeout('Request timed out.')\n+                raise\n \n         r = self.build_response(request, resp)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#178ff62b934c30278114028f654e42374206c291", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 422 | Contributors (this commit): 5 | Commits (past 90d): 37 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -228,7 +228,7 @@ class HTTPAdapter(BaseAdapter):\n             elif isinstance(e, TimeoutError):\n                 raise Timeout(e)\n             else:\n-                raise\n+                raise e\n \n         r = self.build_response(request, resp)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a788cb72719a6bd3cd103c0df762d5f983cda134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1079 | Contributors (this commit): 26 | Commits (past 90d): 11 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -73,6 +73,7 @@ def head(url, **kwargs):\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n+    kwargs.setdefault('allow_redirects', False)\n     return request('head', url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#577dba2bf737b1522145a1ca52d3aaf0d1fe5ed5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 432 | Contributors (this commit): 5 | Commits (past 90d): 38 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,7 +13,7 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n from .packages.urllib3.response import HTTPResponse\n-from .compat import urlparse, basestring, urldefrag\n+from .compat import urlparse, basestring, urldefrag, unquote\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed, get_auth_from_url)\n from .structures import CaseInsensitiveDict\n@@ -148,8 +148,8 @@ class HTTPAdapter(BaseAdapter):\n         return url\n \n     def add_headers(self, request, **kwargs):\n-        \"\"\"Add any headers needed by the connection. Currently this only adds a\n-        Host: header if a proxy is being used.\"\"\"\n+        \"\"\"Add any headers needed by the connection. Currently this adds a\n+        Proxy-Authorization header.\"\"\"\n         proxies = kwargs.get('proxies', {})\n \n         if proxies is None:\n@@ -159,6 +159,10 @@ class HTTPAdapter(BaseAdapter):\n         username, password = get_auth_from_url(proxy)\n \n         if username and password:\n+            # Proxy auth usernames and passwords will be urlencoded, we need\n+            # to decode them.\n+            username = unquote(username)\n+            password = unquote(password)\n             request.headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                                      password)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c01bc5be5ba0d4d5c7f516faae3493f1f41ef233", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 434 | Contributors (this commit): 5 | Commits (past 90d): 39 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -228,7 +228,7 @@ class HTTPAdapter(BaseAdapter):\n             elif isinstance(e, TimeoutError):\n                 raise Timeout(e)\n             else:\n-                raise e\n+                raise\n \n         r = self.build_response(request, resp)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be62645dd56580dd7576032b348cf79d880851d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 8606 | Contributors (this commit): 102 | Commits (past 90d): 81 | Contributors (cumulative): 102 | DMM Complexity: 1.0\n\nDIFF:\n@@ -386,8 +386,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.body = body\n \n     def prepare_content_length(self, body):\n-        if self.headers.get('Content-Length'):\n-            return\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#796d3225ddf08a9ebaa429209b9d077c3a8f99b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 10 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 3562 | Contributors (this commit): 47 | Commits (past 90d): 112 | Contributors (cumulative): 67 | DMM Complexity: 0.25\n\nDIFF:\n@@ -45,7 +45,6 @@ class BaseAdapter(object):\n class HTTPAdapter(BaseAdapter):\n     \"\"\"Built-In HTTP Adapter for Urllib3.\"\"\"\n     def __init__(self, pool_connections=DEFAULT_POOLSIZE, pool_maxsize=DEFAULT_POOLSIZE):\n-        self.max_retries = DEFAULT_RETRIES\n         self.config = {}\n \n         super(HTTPAdapter, self).__init__()\n@@ -166,7 +165,7 @@ class HTTPAdapter(BaseAdapter):\n             request.headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                                      password)\n \n-    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n+    def send(self, request, stream=False, timeout=None, max_retries=DEFAULT_RETRIES, verify=True, cert=None, proxies=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\"\"\"\n \n         conn = self.get_connection(request.url, proxies)\n@@ -188,7 +187,7 @@ class HTTPAdapter(BaseAdapter):\n                     assert_same_host=False,\n                     preload_content=False,\n                     decode_content=False,\n-                    retries=self.max_retries,\n+                    retries=max_retries,\n                     timeout=timeout\n                 )\n \n\n@@ -27,6 +27,7 @@ def request(method, url, **kwargs):\n     :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n     :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param max_retries: (optional) The maximum number of retries (defaults to 0).\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n\n@@ -80,7 +80,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None):\n+                          max_retries=0, verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -149,6 +149,7 @@ class SessionRedirectMixin(object):\n                 prepared_request,\n                 stream=stream,\n                 timeout=timeout,\n+                max_retries=max_retries,\n                 verify=verify,\n                 cert=cert,\n                 proxies=proxies,\n@@ -237,6 +238,7 @@ class Session(SessionRedirectMixin):\n         files=None,\n         auth=None,\n         timeout=None,\n+        max_retries=0,\n         allow_redirects=True,\n         proxies=None,\n         hooks=None,\n@@ -304,6 +306,7 @@ class Session(SessionRedirectMixin):\n         send_kwargs = {\n             'stream': stream,\n             'timeout': timeout,\n+            'max_retries': max_retries,\n             'verify': verify,\n             'cert': cert,\n             'proxies': proxies,\n@@ -399,6 +402,7 @@ class Session(SessionRedirectMixin):\n         req = kwargs.pop('req', None)\n         stream = kwargs.get('stream', False)\n         timeout = kwargs.get('timeout')\n+        max_retries = kwargs.get('max_retries')\n         verify = kwargs.get('verify')\n         cert = kwargs.get('cert')\n         proxies = kwargs.get('proxies')\n@@ -419,7 +423,8 @@ class Session(SessionRedirectMixin):\n \n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n-                                     timeout=timeout, verify=verify, cert=cert,\n+                                     timeout=timeout, max_retries=max_retries,\n+                                     verify=verify, cert=cert,\n                                      proxies=proxies)\n \n         # Resolve redirects if allowed.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18b29ea00563a0bf8e15666806117444c87ac23f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 21 | Churn Cumulative: 2801 | Contributors (this commit): 38 | Commits (past 90d): 38 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -354,5 +354,26 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.Request(url=HTTPBIN)\n         self.assertRaises(ValueError, requests.Session().send, r)\n \n+    def test_can_specify_retries(self):\n+        # monkey patch urlopen\n+        from requests.packages.urllib3.poolmanager import HTTPConnectionPool\n+        old_urlopen = HTTPConnectionPool.urlopen\n+\n+        max_retries_used = []\n+        def urlopen(*args, **kwargs):\n+            \"\"\"Save what value we used for retries each time we call urlopen.\"\"\"\n+            max_retries_used.append(kwargs.get('retries'))\n+            return old_urlopen(*args, **kwargs)\n+\n+        HTTPConnectionPool.urlopen = urlopen\n+\n+        # do the request and check that max_retries was passed through\n+        requests.get(httpbin('get'), max_retries=5)\n+        self.assertEqual(max_retries_used, [5])\n+\n+        # undo monkey patch\n+        HTTPConnectionPool.urlopen = old_urlopen\n+        \n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6a0845c98479911bcf4a27555403fe30a6baa27f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 2046 | Contributors (this commit): 35 | Commits (past 90d): 62 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -455,7 +455,10 @@ class Session(SessionRedirectMixin):\n         self.adapters[prefix] = adapter\n \n     def __getstate__(self):\n+        if hasattr(self, '__attrs__'):\n             return dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)\n+        else:\n+            return {}\n \n     def __setstate__(self, state):\n         for attr, value in state.items():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b80f8aa47502d43a5e8d2654558e1e2db53a0ac2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8608 | Contributors (this commit): 102 | Commits (past 90d): 80 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -646,7 +646,7 @@ class Response(object):\n         return l\n \n     def raise_for_status(self):\n-        \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n+        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n \n         http_error_msg = ''\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4f9340fb4df41d7a8be66ee41c40bfed64ec6d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 20 | Churn Cumulative: 11520 | Contributors (this commit): 115 | Commits (past 90d): 121 | Contributors (cumulative): 152 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,11 @@ class RequestException(RuntimeError):\n \n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n-    response = None\n+\n+    def __init__(self, *args, **kwargs):\n+        \"\"\" Initializes HTTPError with optional `response` object. \"\"\"\n+        self.response = kwargs.pop('response', None)\n+        super(HTTPError, self).__init__(*args, **kwargs)\n \n \n class ConnectionError(RequestException):\n\n@@ -657,9 +657,7 @@ class Response(object):\n             http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n \n         if http_error_msg:\n-            http_error = HTTPError(http_error_msg)\n-            http_error.response = self\n-            raise http_error\n+            raise HTTPError(http_error_msg, response=self)\n \n     def close(self):\n         return self.raw.release_conn()\n\n@@ -386,6 +386,16 @@ class RequestsTestCase(unittest.TestCase):\n         # undo monkey patch\n         HTTPConnectionPool.urlopen = old_urlopen\n \n+    def test_http_error(self):\n+        error = requests.exceptions.HTTPError()\n+        self.assertEqual(error.response, None)\n+        response = requests.Response()\n+        error = requests.exceptions.HTTPError(response=response)\n+        self.assertEqual(error.response, response)\n+        error = requests.exceptions.HTTPError('message', response=response)\n+        self.assertEqual(str(error), 'message')\n+        self.assertEqual(error.response, response)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#23d8522285bd7d7b4a1da46325aeac8814d87076", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 10 | Files Changed: 3 | Hunks: 10 | Methods Changed: 8 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 3580 | Contributors (this commit): 48 | Commits (past 90d): 114 | Contributors (cumulative): 68 | DMM Complexity: 0.75\n\nDIFF:\n@@ -45,6 +45,7 @@ class BaseAdapter(object):\n class HTTPAdapter(BaseAdapter):\n     \"\"\"Built-In HTTP Adapter for Urllib3.\"\"\"\n     def __init__(self, pool_connections=DEFAULT_POOLSIZE, pool_maxsize=DEFAULT_POOLSIZE):\n+        self.max_retries = DEFAULT_RETRIES\n         self.config = {}\n \n         super(HTTPAdapter, self).__init__()\n@@ -165,7 +166,7 @@ class HTTPAdapter(BaseAdapter):\n             request.headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                                      password)\n \n-    def send(self, request, stream=False, timeout=None, max_retries=DEFAULT_RETRIES, verify=True, cert=None, proxies=None):\n+    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\"\"\"\n \n         conn = self.get_connection(request.url, proxies)\n@@ -187,7 +188,7 @@ class HTTPAdapter(BaseAdapter):\n                     assert_same_host=False,\n                     preload_content=False,\n                     decode_content=False,\n-                    retries=max_retries,\n+                    retries=self.max_retries,\n                     timeout=timeout\n                 )\n \n\n@@ -27,7 +27,6 @@ def request(method, url, **kwargs):\n     :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n     :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n-    :param max_retries: (optional) The maximum number of retries (defaults to 0).\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n\n@@ -80,7 +80,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          max_retries=0, verify=True, cert=None, proxies=None):\n+                          verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -149,7 +149,6 @@ class SessionRedirectMixin(object):\n                 prepared_request,\n                 stream=stream,\n                 timeout=timeout,\n-                max_retries=max_retries,\n                 verify=verify,\n                 cert=cert,\n                 proxies=proxies,\n@@ -238,7 +237,6 @@ class Session(SessionRedirectMixin):\n         files=None,\n         auth=None,\n         timeout=None,\n-        max_retries=0,\n         allow_redirects=True,\n         proxies=None,\n         hooks=None,\n@@ -306,7 +304,6 @@ class Session(SessionRedirectMixin):\n         send_kwargs = {\n             'stream': stream,\n             'timeout': timeout,\n-            'max_retries': max_retries,\n             'verify': verify,\n             'cert': cert,\n             'proxies': proxies,\n@@ -402,7 +399,6 @@ class Session(SessionRedirectMixin):\n         req = kwargs.pop('req', None)\n         stream = kwargs.get('stream', False)\n         timeout = kwargs.get('timeout')\n-        max_retries = kwargs.get('max_retries')\n         verify = kwargs.get('verify')\n         cert = kwargs.get('cert')\n         proxies = kwargs.get('proxies')\n@@ -423,8 +419,7 @@ class Session(SessionRedirectMixin):\n \n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n-                                     timeout=timeout, max_retries=max_retries,\n-                                     verify=verify, cert=cert,\n+                                     timeout=timeout, verify=verify, cert=cert,\n                                      proxies=proxies)\n \n         # Resolve redirects if allowed.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b14584f36eca344ed5033d1d2f5a59490fadca56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 21 | Churn Cumulative: 2832 | Contributors (this commit): 39 | Commits (past 90d): 40 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -366,26 +366,5 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.Request(url=HTTPBIN)\n         self.assertRaises(ValueError, requests.Session().send, r)\n \n-    def test_can_specify_retries(self):\n-        # monkey patch urlopen\n-        from requests.packages.urllib3.poolmanager import HTTPConnectionPool\n-        old_urlopen = HTTPConnectionPool.urlopen\n-\n-        max_retries_used = []\n-        def urlopen(*args, **kwargs):\n-            \"\"\"Save what value we used for retries each time we call urlopen.\"\"\"\n-            max_retries_used.append(kwargs.get('retries'))\n-            return old_urlopen(*args, **kwargs)\n-\n-        HTTPConnectionPool.urlopen = urlopen\n-\n-        # do the request and check that max_retries was passed through\n-        requests.get(httpbin('get'), max_retries=5)\n-        self.assertEqual(max_retries_used, [5])\n-\n-        # undo monkey patch\n-        HTTPConnectionPool.urlopen = old_urlopen\n-        \n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d60845303bf877dde69ae2077d695646fc2a4579", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2062 | Contributors (this commit): 35 | Commits (past 90d): 63 | Contributors (cumulative): 35 | DMM Complexity: 0.0\n\nDIFF:\n@@ -176,6 +176,10 @@ class Session(SessionRedirectMixin):\n       200\n     \"\"\"\n \n+    __attrs__ = [\n+        'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',   \n+        'params', 'verify', 'cert', 'prefetch']\n+\n     def __init__(self):\n \n         #: A case-insensitive dictionary of headers to be sent on each\n@@ -455,10 +459,7 @@ class Session(SessionRedirectMixin):\n         self.adapters[prefix] = adapter\n \n     def __getstate__(self):\n-        if hasattr(self, '__attrs__'):\n         return dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)\n-        else:\n-            return {}\n \n     def __setstate__(self, state):\n         for attr, value in state.items():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#25dc07e8ed5504c5388440068722500c19df4daa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 20 | Churn Cumulative: 2852 | Contributors (this commit): 40 | Commits (past 90d): 41 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -366,26 +366,6 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.Request(url=HTTPBIN)\n         self.assertRaises(ValueError, requests.Session().send, r)\n \n-    def test_can_specify_retries(self):\n-        # monkey patch urlopen\n-        from requests.packages.urllib3.poolmanager import HTTPConnectionPool\n-        old_urlopen = HTTPConnectionPool.urlopen\n-\n-        max_retries_used = []\n-        def urlopen(*args, **kwargs):\n-            \"\"\"Save what value we used for retries each time we call urlopen.\"\"\"\n-            max_retries_used.append(kwargs.get('retries'))\n-            return old_urlopen(*args, **kwargs)\n-\n-        HTTPConnectionPool.urlopen = urlopen\n-\n-        # do the request and check that max_retries was passed through\n-        requests.get(httpbin('get'), max_retries=5)\n-        self.assertEqual(max_retries_used, [5])\n-\n-        # undo monkey patch\n-        HTTPConnectionPool.urlopen = old_urlopen\n-\n     def test_http_error(self):\n         error = requests.exceptions.HTTPError()\n         self.assertEqual(error.response, None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e752455b6f1b5913305a9014f3c0b535ba054069", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1070 | Contributors (this commit): 21 | Commits (past 90d): 10 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -8,6 +8,7 @@ This module contains the authentication handlers for Requests.\n \"\"\"\n \n import os\n+import re\n import time\n import hashlib\n import logging\n@@ -151,7 +152,7 @@ class HTTPDigestAuth(AuthBase):\n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n \n             setattr(self, 'num_401_calls', num_401_calls + 1)\n-            self.chal = parse_dict_header(s_auth.replace('Digest ', ''))\n+            self.chal = parse_dict_header(re.sub(r'digest ', '', s_auth, flags=re.IGNORECASE))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e706d18cf893198a26ca3f41dd5014dabd87ae89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 30 | Churn Cumulative: 5388 | Contributors (this commit): 67 | Commits (past 90d): 148 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -44,6 +44,8 @@ class BaseAdapter(object):\n \n class HTTPAdapter(BaseAdapter):\n     \"\"\"Built-In HTTP Adapter for Urllib3.\"\"\"\n+    __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n+\n     def __init__(self, pool_connections=DEFAULT_POOLSIZE, pool_maxsize=DEFAULT_POOLSIZE):\n         self.max_retries = DEFAULT_RETRIES\n         self.config = {}\n@@ -52,7 +54,23 @@ class HTTPAdapter(BaseAdapter):\n \n         self.init_poolmanager(pool_connections, pool_maxsize)\n \n+    def __getstate__(self):\n+        return dict((attr, getattr(self, attr, None)) for attr in\n+                    self.__attrs__)\n+\n+    def __setstate__(self, state):\n+        for attr, value in state.items():\n+            setattr(self, attr, value)\n+\n+        # setup a new poolmanager after unpickling\n+        if self._pool_connections is not None:\n+            self.init_poolmanager(self._pool_connections, self._pool_maxsize)\n+\n     def init_poolmanager(self, connections, maxsize):\n+        # save these values for pickling\n+        self._pool_connections = connections\n+        self._pool_maxsize = maxsize\n+\n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize)\n \n     def cert_verify(self, conn, url, verify, cert):\n\n@@ -178,7 +178,7 @@ class Session(SessionRedirectMixin):\n \n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n-        'params', 'verify', 'cert', 'prefetch']\n+        'params', 'verify', 'cert', 'prefetch', 'adapters']\n \n     def __init__(self):\n \n\n@@ -7,6 +7,7 @@ from __future__ import division\n import json\n import os\n import unittest\n+import pickle\n \n import requests\n from requests.auth import HTTPDigestAuth\n@@ -376,6 +377,15 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(str(error), 'message')\n         self.assertEqual(error.response, response)\n \n+    def test_session_pickling(self):\n+        r = requests.Request('GET', httpbin('get'))\n+        s = requests.Session()\n+\n+        s = pickle.loads(pickle.dumps(s))\n+\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code, 200)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c41932e18468caf8990611aa62b25e867e8ad4bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 2534 | Contributors (this commit): 39 | Commits (past 90d): 108 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,6 +52,9 @@ class HTTPAdapter(BaseAdapter):\n \n         super(HTTPAdapter, self).__init__()\n \n+        self._pool_connections = pool_connections\n+        self._pool_maxsize = pool_maxsize\n+\n         self.init_poolmanager(pool_connections, pool_maxsize)\n \n     def __getstate__(self):\n@@ -62,8 +65,6 @@ class HTTPAdapter(BaseAdapter):\n         for attr, value in state.items():\n             setattr(self, attr, value)\n \n-        # setup a new poolmanager after unpickling\n-        if self._pool_connections is not None:\n         self.init_poolmanager(self._pool_connections, self._pool_maxsize)\n \n     def init_poolmanager(self, connections, maxsize):\n\n@@ -178,7 +178,8 @@ class Session(SessionRedirectMixin):\n \n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n-        'params', 'verify', 'cert', 'prefetch', 'adapters']\n+        'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream',\n+        'trust_env']\n \n     def __init__(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
