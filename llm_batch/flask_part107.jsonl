{"custom_id": "flask#58f3536a8f5dfc18e559c518ae38cba52bec90a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 12 | Churn Cumulative: 202 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -144,6 +144,12 @@ def render_template(\n                     context of the template.\n     \"\"\"\n     ctx = _app_ctx_stack.top\n+\n+    if ctx is None:\n+        raise RuntimeError(\n+            \"This function can only be used when an application context is active.\"\n+        )\n+\n     ctx.app.update_template_context(context)\n     return _render(\n         ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n@@ -162,5 +168,11 @@ def render_template_string(source: str, **context: t.Any) -> str:\n                     context of the template.\n     \"\"\"\n     ctx = _app_ctx_stack.top\n+\n+    if ctx is None:\n+        raise RuntimeError(\n+            \"This function can only be used when an application context is active.\"\n+        )\n+\n     ctx.app.update_template_context(context)\n     return _render(ctx.app.jinja_env.from_string(source), context, ctx.app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#134aebe60115716b962a95a0dd31bf72c5417941", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 2 | Churn Cumulative: 289 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.3.dev0\"\n+__version__ = \"2.1.3\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4bf7415a9692b0c1a69cd50a17c1cbda4a75931b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 334 | Contributors (this commit): 11 | Commits (past 90d): 15 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,8 @@ ResponseValue = t.Union[\n     str,\n     bytes,\n     t.List[t.Any],\n-    t.Dict[str, t.Any],\n+    # Only dict is actually accepted, but Mapping allows for TypedDict.\n+    t.Mapping[str, t.Any],\n     t.Iterator[str],\n     t.Iterator[bytes],\n ]\n\n@@ -3,6 +3,8 @@ from __future__ import annotations\n import typing as t\n from http import HTTPStatus\n \n+import typing_extensions as te\n+\n from flask import Flask\n from flask import jsonify\n from flask import stream_template\n@@ -38,6 +40,15 @@ def hello_json_list() -> t.List[t.Any]:\n     return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]\n \n \n+class StatusJSON(te.TypedDict):\n+    status: str\n+\n+\n+@app.route(\"/typed-dict\")\n+def typed_dict() -> StatusJSON:\n+    return {\"status\": \"ok\"}\n+\n+\n @app.route(\"/generator\")\n def hello_generator() -> t.Generator[str, None, None]:\n     def show() -> t.Generator[str, None, None]:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#add53e190cf90b01b37914f810a370a0cd681800", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 892 | Contributors (this commit): 32 | Commits (past 90d): 2 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ from setuptools import setup\n setup(\n     name=\"Flask\",\n     install_requires=[\n-        \"Werkzeug >= 2.2.0a1\",\n+        \"Werkzeug >= 2.2.0\",\n         \"Jinja2 >= 3.0\",\n         \"itsdangerous >= 2.0\",\n         \"click >= 8.0\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2869ddf50ce8dbf590a5a6992ffc7bbd096884a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1970 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ intersphinx_mapping = {\n     \"itsdangerous\": (\"https://itsdangerous.palletsprojects.com/\", None),\n     \"sqlalchemy\": (\"https://docs.sqlalchemy.org/\", None),\n     \"wtforms\": (\"https://wtforms.readthedocs.io/\", None),\n-    \"blinker\": (\"https://pythonhosted.org/blinker/\", None),\n+    \"blinker\": (\"https://blinker.readthedocs.io/\", None),\n }\n issues_github_path = \"pallets/flask\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#095651be9eec58ddb0c2eb6158318b1c703c67c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 528 | Contributors (this commit): 8 | Commits (past 90d): 10 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -213,7 +213,7 @@ def has_request_context() -> bool:\n \n     .. versionadded:: 0.7\n     \"\"\"\n-    return _cv_app.get(None) is not None\n+    return _cv_request.get(None) is not None\n \n \n def has_app_context() -> bool:\n@@ -223,7 +223,7 @@ def has_app_context() -> bool:\n \n     .. versionadded:: 0.9\n     \"\"\"\n-    return _cv_request.get(None) is not None\n+    return _cv_app.get(None) is not None\n \n \n class AppContext:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5d8e35653fca0d7ee01519d556c7851089de82ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 109 | Files Changed: 3 | Hunks: 12 | Methods Changed: 14 | Complexity Δ (Sum/Max): -8/3 | Churn Δ: 130 | Churn Cumulative: 5341 | Contributors (this commit): 59 | Commits (past 90d): 33 | Contributors (cumulative): 69 | DMM Complexity: 0.35294117647058826\n\nDIFF:\n@@ -998,7 +998,7 @@ class Flask(Scaffold):\n         options.setdefault(\"use_debugger\", self.debug)\n         options.setdefault(\"threaded\", True)\n \n-        cli.show_server_banner(self.env, self.debug, self.name, False)\n+        cli.show_server_banner(self.env, self.debug, self.name)\n \n         from werkzeug.serving import run_simple\n \n\n@@ -10,8 +10,6 @@ import traceback\n import typing as t\n from functools import update_wrapper\n from operator import attrgetter\n-from threading import Lock\n-from threading import Thread\n \n import click\n from click.core import ParameterSource\n@@ -267,74 +265,6 @@ version_option = click.Option(\n )\n \n \n-class DispatchingApp:\n-    \"\"\"Special application that dispatches to a Flask application which\n-    is imported by name in a background thread.  If an error happens\n-    it is recorded and shown as part of the WSGI handling which in case\n-    of the Werkzeug debugger means that it shows up in the browser.\n-    \"\"\"\n-\n-    def __init__(self, loader, use_eager_loading=None):\n-        self.loader = loader\n-        self._app = None\n-        self._lock = Lock()\n-        self._bg_loading_exc = None\n-\n-        if use_eager_loading is None:\n-            use_eager_loading = not is_running_from_reloader()\n-\n-        if use_eager_loading:\n-            self._load_unlocked()\n-        else:\n-            self._load_in_background()\n-\n-    def _load_in_background(self):\n-        # Store the Click context and push it in the loader thread so\n-        # script_info is still available.\n-        ctx = click.get_current_context(silent=True)\n-\n-        def _load_app():\n-            __traceback_hide__ = True  # noqa: F841\n-\n-            with self._lock:\n-                if ctx is not None:\n-                    click.globals.push_context(ctx)\n-\n-                try:\n-                    self._load_unlocked()\n-                except Exception as e:\n-                    self._bg_loading_exc = e\n-\n-        t = Thread(target=_load_app, args=())\n-        t.start()\n-\n-    def _flush_bg_loading_exception(self):\n-        __traceback_hide__ = True  # noqa: F841\n-        exc = self._bg_loading_exc\n-\n-        if exc is not None:\n-            self._bg_loading_exc = None\n-            raise exc\n-\n-    def _load_unlocked(self):\n-        __traceback_hide__ = True  # noqa: F841\n-        self._app = rv = self.loader()\n-        self._bg_loading_exc = None\n-        return rv\n-\n-    def __call__(self, environ, start_response):\n-        __traceback_hide__ = True  # noqa: F841\n-        if self._app is not None:\n-            return self._app(environ, start_response)\n-        self._flush_bg_loading_exception()\n-        with self._lock:\n-            if self._app is not None:\n-                rv = self._app\n-            else:\n-                rv = self._load_unlocked()\n-            return rv(environ, start_response)\n-\n-\n class ScriptInfo:\n     \"\"\"Helper object to deal with Flask applications.  This is usually not\n     necessary to interface with as it's used internally in the dispatching\n@@ -811,7 +741,7 @@ def load_dotenv(path: str | os.PathLike | None = None) -> bool:\n     return loaded  # True if at least one file was located and loaded.\n \n \n-def show_server_banner(env, debug, app_import_path, eager_loading):\n+def show_server_banner(env, debug, app_import_path):\n     \"\"\"Show extra startup messages the first time the server is run,\n     ignoring the reloader.\n     \"\"\"\n@@ -819,12 +749,7 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n         return\n \n     if app_import_path is not None:\n-        message = f\" * Serving Flask app {app_import_path!r}\"\n-\n-        if not eager_loading:\n-            message += \" (lazy loading)\"\n-\n-        click.echo(message)\n+        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n \n     click.echo(f\" * Environment: {env}\")\n \n@@ -963,12 +888,6 @@ class SeparatedPathType(click.Path):\n     help=\"Enable or disable the debugger. By default the debugger \"\n     \"is active if debug is enabled.\",\n )\n-@click.option(\n-    \"--eager-loading/--lazy-loading\",\n-    default=None,\n-    help=\"Enable or disable eager loading. By default eager \"\n-    \"loading is enabled if the reloader is disabled.\",\n-)\n @click.option(\n     \"--with-threads/--without-threads\",\n     default=True,\n@@ -1000,7 +919,6 @@ def run_command(\n     port,\n     reload,\n     debugger,\n-    eager_loading,\n     with_threads,\n     cert,\n     extra_files,\n@@ -1014,7 +932,23 @@ def run_command(\n     The reloader and debugger are enabled by default with the\n     '--env development' or '--debug' options.\n     \"\"\"\n-    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n+    try:\n+        app = info.load_app()\n+    except Exception as e:\n+        if is_running_from_reloader():\n+            # When reloading, print out the error immediately, but raise\n+            # it later so the debugger or server can handle it.\n+            traceback.print_exc()\n+            err = e\n+\n+            def app(environ, start_response):\n+                raise err from None\n+\n+        else:\n+            # When not reloading, raise the error immediately so the\n+            # command fails.\n+            raise e from None\n+\n     debug = get_debug_flag()\n \n     if reload is None:\n@@ -1023,7 +957,7 @@ def run_command(\n     if debugger is None:\n         debugger = debug\n \n-    show_server_banner(get_env(), debug, info.app_import_path, eager_loading)\n+    show_server_banner(get_env(), debug, info.app_import_path)\n \n     from werkzeug.serving import run_simple\n \n\n@@ -1,7 +1,6 @@\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n import os\n-import platform\n import ssl\n import sys\n import types\n@@ -17,7 +16,6 @@ from flask import Blueprint\n from flask import current_app\n from flask import Flask\n from flask.cli import AppGroup\n-from flask.cli import DispatchingApp\n from flask.cli import find_best_app\n from flask.cli import FlaskGroup\n from flask.cli import get_version\n@@ -290,26 +288,6 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert app.name == \"testapp\"\n \n \n-@pytest.mark.xfail(platform.python_implementation() == \"PyPy\", reason=\"flaky on pypy\")\n-def test_lazy_load_error(monkeypatch):\n-    \"\"\"When using lazy loading, the correct exception should be\n-    re-raised.\n-    \"\"\"\n-\n-    class BadExc(Exception):\n-        pass\n-\n-    def bad_load():\n-        raise BadExc\n-\n-    lazy = DispatchingApp(bad_load, use_eager_loading=False)\n-\n-    # reduce flakiness by waiting for the internal loading lock\n-    with lazy._lock:\n-        with pytest.raises(BadExc):\n-            lazy._flush_bg_loading_exception()\n-\n-\n def test_app_cli_has_app_context(app, runner):\n     def _param_cb(ctx, param, value):\n         # current_app should be available in parameter callbacks\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d53a129cf1b28f1a88491ae50877473b68bdb54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1113 | Contributors (this commit): 13 | Commits (past 90d): 9 | Contributors (cumulative): 13 | DMM Complexity: 0.5\n\nDIFF:\n@@ -214,8 +214,6 @@ def prepare_import(path):\n \n \n def locate_app(module_name, app_name, raise_if_not_found=True):\n-    __traceback_hide__ = True  # noqa: F841\n-\n     try:\n         __import__(module_name)\n     except ImportError:\n@@ -296,8 +294,6 @@ class ScriptInfo:\n         this multiple times will just result in the already loaded app to\n         be returned.\n         \"\"\"\n-        __traceback_hide__ = True  # noqa: F841\n-\n         if self._loaded_app is not None:\n             return self._loaded_app\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef95998d79eed3b8350d8db825e3d98f25c179f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 88 | Lines Deleted: 93 | Files Changed: 4 | Hunks: 27 | Methods Changed: 13 | Complexity Δ (Sum/Max): 1/4 | Churn Δ: 181 | Churn Cumulative: 9419 | Contributors (this commit): 75 | Commits (past 90d): 40 | Contributors (cumulative): 93 | DMM Complexity: 0.9032258064516129\n\nDIFF:\n@@ -45,7 +45,6 @@ from .globals import request_ctx\n from .globals import session\n from .helpers import _split_blueprint_path\n from .helpers import get_debug_flag\n-from .helpers import get_env\n from .helpers import get_flashed_messages\n from .helpers import get_load_dotenv\n from .helpers import locked_cached_property\n@@ -691,7 +690,7 @@ class Flask(Scaffold):\n         if instance_relative:\n             root_path = self.instance_path\n         defaults = dict(self.default_config)\n-        defaults[\"ENV\"] = get_env()\n+        defaults[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"development\"\n         defaults[\"DEBUG\"] = get_debug_flag()\n         return self.config_class(root_path, defaults)\n \n@@ -849,31 +848,50 @@ class Flask(Scaffold):\n             rv.update(processor())\n         return rv\n \n-    #: What environment the app is running in. Flask and extensions may\n-    #: enable behaviors based on the environment, such as enabling debug\n-    #: mode. This maps to the :data:`ENV` config key. This is set by the\n-    #: :envvar:`FLASK_ENV` environment variable and may not behave as\n-    #: expected if set in code.\n-    #:\n-    #: **Do not enable development when deploying in production.**\n-    #:\n-    #: Default: ``'production'``\n-    env = ConfigAttribute(\"ENV\")\n+    @property\n+    def env(self) -> str:\n+        \"\"\"What environment the app is running in. This maps to the :data:`ENV` config\n+        key.\n+\n+        **Do not enable development when deploying in production.**\n+\n+        Default: ``'production'``\n+\n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3.\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.env' is deprecated and will be removed in Flask 2.3.\"\n+            \" Use 'app.debug' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return self.config[\"ENV\"]\n+\n+    @env.setter\n+    def env(self, value: str) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.env' is deprecated and will be removed in Flask 2.3.\"\n+            \" Use 'app.debug' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self.config[\"ENV\"] = value\n \n     @property\n     def debug(self) -> bool:\n-        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n-        the development server, an interactive debugger will be shown for\n-        unhandled exceptions, and the server will be reloaded when code\n-        changes. This maps to the :data:`DEBUG` config key. This is\n-        enabled when :attr:`env` is ``'development'`` and is overridden\n-        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n-        expected if set in code.\n+        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the\n+        development server, an interactive debugger will be shown for unhandled\n+        exceptions, and the server will be reloaded when code changes. This maps to the\n+        :data:`DEBUG` config key. It may not behave as expected if set late.\n \n         **Do not enable debug mode when deploying in production.**\n \n-        Default: ``True`` if :attr:`env` is ``'development'``, or\n-        ``False`` otherwise.\n+        Default: ``False``\n         \"\"\"\n         return self.config[\"DEBUG\"]\n \n@@ -937,9 +955,7 @@ class Flask(Scaffold):\n             If installed, python-dotenv will be used to load environment\n             variables from :file:`.env` and :file:`.flaskenv` files.\n \n-            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n-            environment variables will override :attr:`env` and\n-            :attr:`debug`.\n+            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n \n             Threaded mode is enabled by default.\n \n@@ -966,7 +982,12 @@ class Flask(Scaffold):\n \n             # if set, let env vars override previous values\n             if \"FLASK_ENV\" in os.environ:\n-                self.env = get_env()\n+                print(\n+                    \"'FLASK_ENV' is deprecated and will not be used in\"\n+                    \" Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n+                    file=sys.stderr,\n+                )\n+                self.config[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"production\"\n                 self.debug = get_debug_flag()\n             elif \"FLASK_DEBUG\" in os.environ:\n                 self.debug = get_debug_flag()\n@@ -998,7 +1019,7 @@ class Flask(Scaffold):\n         options.setdefault(\"use_debugger\", self.debug)\n         options.setdefault(\"threaded\", True)\n \n-        cli.show_server_banner(self.env, self.debug, self.name)\n+        cli.show_server_banner(self.debug, self.name)\n \n         from werkzeug.serving import run_simple\n \n\n@@ -13,12 +13,12 @@ from operator import attrgetter\n \n import click\n from click.core import ParameterSource\n+from werkzeug import run_simple\n from werkzeug.serving import is_running_from_reloader\n from werkzeug.utils import import_string\n \n from .globals import current_app\n from .helpers import get_debug_flag\n-from .helpers import get_env\n from .helpers import get_load_dotenv\n \n if t.TYPE_CHECKING:\n@@ -418,29 +418,6 @@ _app_option = click.Option(\n )\n \n \n-def _set_env(ctx: click.Context, param: click.Option, value: str | None) -> str | None:\n-    if value is None:\n-        return None\n-\n-    # Set with env var instead of ScriptInfo.load so that it can be\n-    # accessed early during a factory function.\n-    os.environ[\"FLASK_ENV\"] = value\n-    return value\n-\n-\n-_env_option = click.Option(\n-    [\"-E\", \"--env\"],\n-    metavar=\"NAME\",\n-    help=(\n-        \"The execution environment name to set in 'app.env'. Defaults to\"\n-        \" 'production'. 'development' will enable 'app.debug' and start the\"\n-        \" debugger and reloader when running the server.\"\n-    ),\n-    expose_value=False,\n-    callback=_set_env,\n-)\n-\n-\n def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:\n     # If the flag isn't provided, it will default to False. Don't use\n     # that, let debug be set by env in that case.\n@@ -460,7 +437,7 @@ def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | N\n \n _debug_option = click.Option(\n     [\"--debug/--no-debug\"],\n-    help=\"Set 'app.debug' separately from '--env'.\",\n+    help=\"Set debug mode.\",\n     expose_value=False,\n     callback=_set_debug,\n )\n@@ -516,12 +493,10 @@ class FlaskGroup(AppGroup):\n     :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n         files to set environment variables. Will also change the working\n         directory to the directory containing the first file found.\n-    :param set_debug_flag: Set the app's debug flag based on the active\n-        environment\n+    :param set_debug_flag: Set the app's debug flag.\n \n     .. versionchanged:: 2.2\n-        Added the ``-A/--app``, ``-E/--env``, ``--debug/--no-debug``,\n-        and ``-e/--env-file`` options.\n+        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.\n \n     .. versionchanged:: 2.2\n         An app context is pushed when running ``app.cli`` commands, so\n@@ -546,7 +521,7 @@ class FlaskGroup(AppGroup):\n         # callback. This allows users to make a custom group callback\n         # without losing the behavior. --env-file must come first so\n         # that it is eagerly evaluated before --app.\n-        params.extend((_env_file_option, _app_option, _env_option, _debug_option))\n+        params.extend((_env_file_option, _app_option, _debug_option))\n \n         if add_version_option:\n             params.append(version_option)\n@@ -737,26 +712,23 @@ def load_dotenv(path: str | os.PathLike | None = None) -> bool:\n     return loaded  # True if at least one file was located and loaded.\n \n \n-def show_server_banner(env, debug, app_import_path):\n+def show_server_banner(debug, app_import_path):\n     \"\"\"Show extra startup messages the first time the server is run,\n     ignoring the reloader.\n     \"\"\"\n     if is_running_from_reloader():\n         return\n \n+    click.secho(\n+        \"WARNING: This is a development server. Do not use it in a production\"\n+        \" deployment. Use a production WSGI server instead.\",\n+        fg=\"red\",\n+        bold=True,\n+    )\n+\n     if app_import_path is not None:\n         click.echo(f\" * Serving Flask app '{app_import_path}'\")\n \n-    click.echo(f\" * Environment: {env}\")\n-\n-    if env == \"production\":\n-        click.secho(\n-            \"   WARNING: This is a development server. Do not use it in\"\n-            \" a production deployment.\\n   Use a production WSGI server\"\n-            \" instead.\",\n-            fg=\"red\",\n-        )\n-\n     if debug is not None:\n         click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")\n \n@@ -925,8 +897,8 @@ def run_command(\n     This server is for development purposes only. It does not provide\n     the stability, security, or performance of production WSGI servers.\n \n-    The reloader and debugger are enabled by default with the\n-    '--env development' or '--debug' options.\n+    The reloader and debugger are enabled by default with the '--debug'\n+    option.\n     \"\"\"\n     try:\n         app = info.load_app()\n@@ -953,9 +925,7 @@ def run_command(\n     if debugger is None:\n         debugger = debug\n \n-    show_server_banner(get_env(), debug, info.app_import_path)\n-\n-    from werkzeug.serving import run_simple\n+    show_server_banner(debug, info.app_import_path)\n \n     run_simple(\n         host,\n\n@@ -29,22 +29,41 @@ def get_env() -> str:\n     \"\"\"Get the environment the app is running in, indicated by the\n     :envvar:`FLASK_ENV` environment variable. The default is\n     ``'production'``.\n+\n+    .. deprecated:: 2.2\n+        Will be removed in Flask 2.3.\n     \"\"\"\n+    import warnings\n+\n+    warnings.warn(\n+        \"'FLASK_ENV' and 'get_env' are deprecated and will be removed\"\n+        \" in Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n+        DeprecationWarning,\n+        stacklevel=2,\n+    )\n     return os.environ.get(\"FLASK_ENV\") or \"production\"\n \n \n def get_debug_flag() -> bool:\n-    \"\"\"Get whether debug mode should be enabled for the app, indicated\n-    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n-    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n-    otherwise.\n+    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n+    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n     \"\"\"\n     val = os.environ.get(\"FLASK_DEBUG\")\n \n     if not val:\n-        return get_env() == \"development\"\n+        env = os.environ.get(\"FLASK_ENV\")\n \n-    return val.lower() not in (\"0\", \"false\", \"no\")\n+        if env is not None:\n+            print(\n+                \"'FLASK_ENV' is deprecated and will not be used in\"\n+                \" Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n+                file=sys.stderr,\n+            )\n+            return env == \"development\"\n+\n+        return False\n+\n+    return val.lower() not in {\"0\", \"false\", \"no\"}\n \n \n def get_load_dotenv(default: bool = True) -> bool:\n\n@@ -6,7 +6,6 @@ import werkzeug.exceptions\n \n import flask\n from flask.helpers import get_debug_flag\n-from flask.helpers import get_env\n \n \n class FakePath:\n@@ -322,20 +321,6 @@ class TestHelpers:\n             assert get_debug_flag() == expected_flag\n         assert get_debug_flag() == expected_default_flag\n \n-    @pytest.mark.parametrize(\n-        \"env, ref_env, debug\",\n-        [\n-            (\"\", \"production\", False),\n-            (\"production\", \"production\", False),\n-            (\"development\", \"development\", True),\n-            (\"other\", \"other\", False),\n-        ],\n-    )\n-    def test_get_env(self, monkeypatch, env, ref_env, debug):\n-        monkeypatch.setenv(\"FLASK_ENV\", env)\n-        assert get_debug_flag() == debug\n-        assert get_env() == ref_env\n-\n     def test_make_response(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bfdd37110c67ebeb42061fb43cf684b05291241f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 145 | Lines Deleted: 52 | Files Changed: 6 | Hunks: 24 | Methods Changed: 19 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 197 | Churn Cumulative: 8666 | Contributors (this commit): 51 | Commits (past 90d): 48 | Contributors (cumulative): 84 | DMM Complexity: 0.5555555555555556\n\nDIFF:\n@@ -99,7 +99,7 @@ else:\n         return inspect.iscoroutinefunction(func)\n \n \n-def _make_timedelta(value: t.Optional[timedelta]) -> t.Optional[timedelta]:\n+def _make_timedelta(value: t.Union[timedelta, int, None]) -> t.Optional[timedelta]:\n     if value is None or isinstance(value, timedelta):\n         return value\n \n@@ -273,11 +273,35 @@ class Flask(Scaffold):\n     #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n     secret_key = ConfigAttribute(\"SECRET_KEY\")\n \n-    #: The secure cookie uses this for the name of the session cookie.\n-    #:\n-    #: This attribute can also be configured from the config with the\n-    #: ``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``\n-    session_cookie_name = ConfigAttribute(\"SESSION_COOKIE_NAME\")\n+    @property\n+    def session_cookie_name(self) -> str:\n+        \"\"\"The name of the cookie set by the session interface.\n+\n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3. Use ``app.config[\"SESSION_COOKIE_NAME\"]``\n+            instead.\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'session_cookie_name' is deprecated and will be removed in Flask 2.3. Use\"\n+            \" 'SESSION_COOKIE_NAME' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return self.config[\"SESSION_COOKIE_NAME\"]\n+\n+    @session_cookie_name.setter\n+    def session_cookie_name(self, value: str) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'session_cookie_name' is deprecated and will be removed in Flask 2.3. Use\"\n+            \" 'SESSION_COOKIE_NAME' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self.config[\"SESSION_COOKIE_NAME\"] = value\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n@@ -290,29 +314,70 @@ class Flask(Scaffold):\n         \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta\n     )\n \n-    #: A :class:`~datetime.timedelta` or number of seconds which is used\n-    #: as the default ``max_age`` for :func:`send_file`. The default is\n-    #: ``None``, which tells the browser to use conditional requests\n-    #: instead of a timed cache.\n-    #:\n-    #: Configured with the :data:`SEND_FILE_MAX_AGE_DEFAULT`\n-    #: configuration key.\n-    #:\n-    #: .. versionchanged:: 2.0\n-    #:     Defaults to ``None`` instead of 12 hours.\n-    send_file_max_age_default = ConfigAttribute(\n-        \"SEND_FILE_MAX_AGE_DEFAULT\", get_converter=_make_timedelta\n-    )\n+    @property\n+    def send_file_max_age_default(self) -> t.Optional[timedelta]:\n+        \"\"\"The default value for ``max_age`` for :func:`~flask.send_file`. The default\n+        is ``None``, which tells the browser to use conditional requests instead of a\n+        timed cache.\n \n-    #: Enable this if you want to use the X-Sendfile feature.  Keep in\n-    #: mind that the server has to support this.  This only affects files\n-    #: sent with the :func:`send_file` method.\n-    #:\n-    #: .. versionadded:: 0.2\n-    #:\n-    #: This attribute can also be configured from the config with the\n-    #: ``USE_X_SENDFILE`` configuration key.  Defaults to ``False``.\n-    use_x_sendfile = ConfigAttribute(\"USE_X_SENDFILE\")\n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3. Use\n+            ``app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]`` instead.\n+\n+        .. versionchanged:: 2.0\n+            Defaults to ``None`` instead of 12 hours.\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'send_file_max_age_default' is deprecated and will be removed in Flask\"\n+            \" 2.3. Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return _make_timedelta(self.config[\"SEND_FILE_MAX_AGE_DEFAULT\"])\n+\n+    @send_file_max_age_default.setter\n+    def send_file_max_age_default(self, value: t.Union[int, timedelta, None]) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'send_file_max_age_default' is deprecated and will be removed in Flask\"\n+            \" 2.3. Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = _make_timedelta(value)\n+\n+    @property\n+    def use_x_sendfile(self) -> bool:\n+        \"\"\"Enable this to use the ``X-Sendfile`` feature, assuming the server supports\n+        it, from :func:`~flask.send_file`.\n+\n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3. Use ``app.config[\"USE_X_SENDFILE\"]`` instead.\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'use_x_sendfile' is deprecated and will be removed in Flask 2.3. Use\"\n+            \" 'USE_X_SENDFILE' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return self.config[\"USE_X_SENDFILE\"]\n+\n+    @use_x_sendfile.setter\n+    def use_x_sendfile(self, value: bool) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'use_x_sendfile' is deprecated and will be removed in Flask 2.3. Use\"\n+            \" 'USE_X_SENDFILE' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self.config[\"USE_X_SENDFILE\"] = value\n \n     #: The JSON encoder class to use. Defaults to\n     #: :class:`~flask.json.JSONEncoder`.\n@@ -624,8 +689,18 @@ class Flask(Scaffold):\n         \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n         value in case it's set, otherwise a sensible default is returned.\n \n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3.\n+\n         .. versionadded:: 0.7\n         \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'propagate_exceptions' is deprecated and will be removed in Flask 2.3.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         rv = self.config[\"PROPAGATE_EXCEPTIONS\"]\n         if rv is not None:\n             return rv\n@@ -734,20 +809,37 @@ class Flask(Scaffold):\n     @property\n     def templates_auto_reload(self) -> bool:\n         \"\"\"Reload templates when they are changed. Used by\n-        :meth:`create_jinja_environment`.\n+        :meth:`create_jinja_environment`. It is enabled by default in debug mode.\n \n-        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n-        not set, it will be enabled in debug mode.\n+        .. deprecated:: 2.2\n+            Will be removed in Flask 2.3. Use ``app.config[\"TEMPLATES_AUTO_RELOAD\"]``\n+            instead.\n \n         .. versionadded:: 1.0\n             This property was added but the underlying config and behavior\n             already existed.\n         \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'templates_auto_reload' is deprecated and will be removed in Flask 2.3.\"\n+            \" Use 'TEMPLATES_AUTO_RELOAD' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         rv = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n         return rv if rv is not None else self.debug\n \n     @templates_auto_reload.setter\n     def templates_auto_reload(self, value: bool) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'templates_auto_reload' is deprecated and will be removed in Flask 2.3.\"\n+            \" Use 'TEMPLATES_AUTO_RELOAD' in 'app.config' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         self.config[\"TEMPLATES_AUTO_RELOAD\"] = value\n \n     def create_jinja_environment(self) -> Environment:\n@@ -768,7 +860,12 @@ class Flask(Scaffold):\n             options[\"autoescape\"] = self.select_jinja_autoescape\n \n         if \"auto_reload\" not in options:\n-            options[\"auto_reload\"] = self.templates_auto_reload\n+            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n+\n+            if auto_reload is None:\n+                auto_reload = self.debug\n+\n+            options[\"auto_reload\"] = auto_reload\n \n         rv = self.jinja_environment(self, **options)\n         rv.globals.update(\n@@ -898,7 +995,9 @@ class Flask(Scaffold):\n     @debug.setter\n     def debug(self, value: bool) -> None:\n         self.config[\"DEBUG\"] = value\n-        self.jinja_env.auto_reload = self.templates_auto_reload\n+\n+        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:\n+            self.jinja_env.auto_reload = value\n \n     def run(\n         self,\n@@ -1541,8 +1640,12 @@ class Flask(Scaffold):\n         \"\"\"\n         exc_info = sys.exc_info()\n         got_request_exception.send(self, exception=e)\n+        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]\n \n-        if self.propagate_exceptions:\n+        if propagate is None:\n+            propagate = self.testing or self.debug\n+\n+        if propagate:\n             # Re-raise if called with an active exception, otherwise\n             # raise the passed in exception.\n             if exc_info[1] is e:\n\n@@ -414,7 +414,7 @@ def _prepare_send_file_kwargs(**kwargs: t.Any) -> t.Dict[str, t.Any]:\n \n     kwargs.update(\n         environ=request.environ,\n-        use_x_sendfile=current_app.use_x_sendfile,\n+        use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],\n         response_class=current_app.response_class,\n         _root_path=current_app.root_path,  # type: ignore\n     )\n\n@@ -5,6 +5,7 @@ import pkgutil\n import sys\n import typing as t\n from collections import defaultdict\n+from datetime import timedelta\n from functools import update_wrapper\n \n from jinja2 import FileSystemLoader\n@@ -302,13 +303,16 @@ class Scaffold:\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        value = current_app.send_file_max_age_default\n+        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n \n         if value is None:\n             return None\n \n+        if isinstance(value, timedelta):\n             return int(value.total_seconds())\n \n+        return value\n+\n     def send_static_file(self, filename: str) -> \"Response\":\n         \"\"\"The view function used to serve files from\n         :attr:`static_folder`. A route is automatically registered for\n\n@@ -177,11 +177,8 @@ class SessionInterface:\n         return isinstance(obj, self.null_session_class)\n \n     def get_cookie_name(self, app: \"Flask\") -> str:\n-        \"\"\"Returns the name of the session cookie.\n-\n-        Uses ``app.session_cookie_name`` which is set to ``SESSION_COOKIE_NAME``\n-        \"\"\"\n-        return app.session_cookie_name\n+        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n+        return app.config[\"SESSION_COOKIE_NAME\"]\n \n     def get_cookie_domain(self, app: \"Flask\") -> t.Optional[str]:\n         \"\"\"Returns the domain that should be set for the session cookie.\n\n@@ -1,7 +1,6 @@\n import json\n import os\n import textwrap\n-from datetime import timedelta\n \n import pytest\n \n@@ -207,14 +206,6 @@ def test_session_lifetime():\n     assert app.permanent_session_lifetime.seconds == 42\n \n \n-def test_send_file_max_age():\n-    app = flask.Flask(__name__)\n-    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 3600\n-    assert app.send_file_max_age_default.seconds == 3600\n-    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = timedelta(hours=2)\n-    assert app.send_file_max_age_default.seconds == 7200\n-\n-\n def test_get_namespace():\n     app = flask.Flask(__name__)\n     app.config[\"FOO_OPTION_1\"] = \"foo option 1\"\n\n@@ -397,11 +397,9 @@ def test_templates_auto_reload_debug_run(app, monkeypatch):\n     monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n \n     app.run()\n-    assert not app.templates_auto_reload\n     assert not app.jinja_env.auto_reload\n \n     app.run(debug=True)\n-    assert app.templates_auto_reload\n     assert app.jinja_env.auto_reload\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#292c7e5c5db14824a23bbd6fdfe69f62015aee20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 291 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.0.dev0\"\n+__version__ = \"2.2.0\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9a1b25fce4ddd553d7cba01bab3df5841a24aeff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 293 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.0\"\n+__version__ = \"2.2.1.dev\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#714ccefeca33db9e87e8ef4abd0008af05c32a4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 160 | Lines Deleted: 38 | Files Changed: 4 | Hunks: 12 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/6 | Churn Δ: 198 | Churn Cumulative: 6020 | Contributors (this commit): 31 | Commits (past 90d): 45 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,6 @@\n import functools\n import inspect\n+import json\n import logging\n import os\n import sys\n@@ -379,25 +380,86 @@ class Flask(Scaffold):\n         )\n         self.config[\"USE_X_SENDFILE\"] = value\n \n-    #: The JSON encoder class to use. Defaults to\n-    #: :class:`~flask.json.JSONEncoder`.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3. Customize\n-    #:      :attr:`json_provider_class` instead.\n-    #:\n-    #: .. versionadded:: 0.10\n-    json_encoder: None = None\n+    _json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n+    _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n \n-    #: The JSON decoder class to use. Defaults to\n-    #: :class:`~flask.json.JSONDecoder`.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3. Customize\n-    #:      :attr:`json_provider_class` instead.\n-    #:\n-    #: .. versionadded:: 0.10\n-    json_decoder: None = None\n+    @property  # type: ignore[override]\n+    def json_encoder(self) -> t.Type[json.JSONEncoder]:  # type: ignore[override]\n+        \"\"\"The JSON encoder class to use. Defaults to\n+        :class:`~flask.json.JSONEncoder`.\n+\n+        .. deprecated:: 2.2\n+             Will be removed in Flask 2.3. Customize\n+             :attr:`json_provider_class` instead.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+\n+        if self._json_encoder is None:\n+            from . import json\n+\n+            return json.JSONEncoder\n+\n+        return self._json_encoder\n+\n+    @json_encoder.setter\n+    def json_encoder(self, value: t.Type[json.JSONEncoder]) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self._json_encoder = value\n+\n+    @property  # type: ignore[override]\n+    def json_decoder(self) -> t.Type[json.JSONDecoder]:  # type: ignore[override]\n+        \"\"\"The JSON decoder class to use. Defaults to\n+        :class:`~flask.json.JSONDecoder`.\n+\n+        .. deprecated:: 2.2\n+             Will be removed in Flask 2.3. Customize\n+             :attr:`json_provider_class` instead.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+\n+        if self._json_decoder is None:\n+            from . import json\n+\n+            return json.JSONDecoder\n+\n+        return self._json_decoder\n+\n+    @json_decoder.setter\n+    def json_decoder(self, value: t.Type[json.JSONDecoder]) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'app.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self._json_decoder = value\n \n     json_provider_class: t.Type[JSONProvider] = DefaultJSONProvider\n     \"\"\"A subclass of :class:`~flask.json.provider.JSONProvider`. An\n\n@@ -1,3 +1,4 @@\n+import json\n import os\n import typing as t\n from collections import defaultdict\n@@ -172,18 +173,76 @@ class Blueprint(Scaffold):\n \n     _got_registered_once = False\n \n-    #: Blueprint local JSON encoder class to use. Set to ``None`` to use\n-    #: the app's :class:`~flask.Flask.json_encoder`.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3.\n-    json_encoder: None = None\n-    #: Blueprint local JSON decoder class to use. Set to ``None`` to use\n-    #: the app's :class:`~flask.Flask.json_decoder`.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3.\n-    json_decoder: None = None\n+    _json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n+    _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n+\n+    @property  # type: ignore[override]\n+    def json_encoder(  # type: ignore[override]\n+        self,\n+    ) -> t.Union[t.Type[json.JSONEncoder], None]:\n+        \"\"\"Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.\n+\n+        .. deprecated:: 2.2\n+             Will be removed in Flask 2.3. Customize\n+             :attr:`json_provider_class` instead.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'bp.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return self._json_encoder\n+\n+    @json_encoder.setter\n+    def json_encoder(self, value: t.Union[t.Type[json.JSONEncoder], None]) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'bp.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self._json_encoder = value\n+\n+    @property  # type: ignore[override]\n+    def json_decoder(  # type: ignore[override]\n+        self,\n+    ) -> t.Union[t.Type[json.JSONDecoder], None]:\n+        \"\"\"Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.\n+\n+        .. deprecated:: 2.2\n+             Will be removed in Flask 2.3. Customize\n+             :attr:`json_provider_class` instead.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'bp.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return self._json_decoder\n+\n+    @json_decoder.setter\n+    def json_decoder(self, value: t.Union[t.Type[json.JSONDecoder], None]) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'bp.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n+            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        self._json_decoder = value\n \n     def __init__(\n         self,\n\n@@ -176,11 +176,11 @@ class DefaultJSONProvider(JSONProvider):\n         :param obj: The data to serialize.\n         :param kwargs: Passed to :func:`json.dumps`.\n         \"\"\"\n-        cls = self._app.json_encoder\n+        cls = self._app._json_encoder\n         bp = self._app.blueprints.get(request.blueprint) if request else None\n \n-        if bp is not None and bp.json_encoder is not None:\n-            cls = bp.json_encoder\n+        if bp is not None and bp._json_encoder is not None:\n+            cls = bp._json_encoder\n \n         if cls is not None:\n             import warnings\n@@ -235,11 +235,11 @@ class DefaultJSONProvider(JSONProvider):\n         :param s: Text or UTF-8 bytes.\n         :param kwargs: Passed to :func:`json.loads`.\n         \"\"\"\n-        cls = self._app.json_decoder\n+        cls = self._app._json_decoder\n         bp = self._app.blueprints.get(request.blueprint) if request else None\n \n-        if bp is not None and bp.json_decoder is not None:\n-            cls = bp.json_decoder\n+        if bp is not None and bp._json_decoder is not None:\n+            cls = bp._json_decoder\n \n         if cls is not None:\n             import warnings\n\n@@ -1,4 +1,5 @@\n import importlib.util\n+import json\n import os\n import pathlib\n import pkgutil\n@@ -78,14 +79,14 @@ class Scaffold:\n     #:\n     #: .. deprecated:: 2.2\n     #:      Will be removed in Flask 2.3.\n-    json_encoder: None = None\n+    json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n \n     #: JSON decoder class used by :func:`flask.json.loads`. If a\n     #: blueprint sets this, it will be used instead of the app's value.\n     #:\n     #: .. deprecated:: 2.2\n     #:      Will be removed in Flask 2.3.\n-    json_decoder: None = None\n+    json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n \n     def __init__(\n         self,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
