{"custom_id": "requests#d24ee0e1dce2b8e387aca70ce9483b93ca618fae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 12 | Churn Cumulative: 4893 | Contributors (this commit): 50 | Commits (past 90d): 91 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -30,3 +30,9 @@ class URLRequired(RequestException):\n \n class TooManyRedirects(RequestException):\n     \"\"\"Too many redirects.\"\"\"\n+\n+class MissingSchema(RequestException, ValueError):\n+    \"\"\"The URL schema (e.g. http or https) is missing.\"\"\"\n+\n+class InvalidSchema(RequestException, ValueError):\n+    \"\"\"See defaults.py for valid schemas.\"\"\"\n\\ No newline at end of file\n\n@@ -24,7 +24,7 @@ from .packages.urllib3.filepost import encode_multipart_formdata\n from .defaults import SCHEMAS\n from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n-    URLRequired, SSLError)\n+    URLRequired, SSLError, MissingSchema, InvalidSchema)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n     dict_from_string, stream_decode_response_unicode, get_netrc_auth)\n@@ -321,10 +321,10 @@ class Request(object):\n         scheme, netloc, path, params, query, fragment = urlparse(url)\n \n         if not scheme:\n-            raise ValueError(\"Invalid URL %r: No schema supplied\" % url)\n+            raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n         if not scheme in SCHEMAS:\n-            raise ValueError(\"Invalid scheme %r\" % scheme)\n+            raise InvalidSchema(\"Invalid scheme %r\" % scheme)\n \n         netloc = netloc.encode('idna').decode('utf-8')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#21ccf8f8c0266ca9d713c6717a25015b6c0bd748", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 190 | Lines Deleted: 162 | Files Changed: 7 | Hunks: 29 | Methods Changed: 15 | Complexity Δ (Sum/Max): 5/19 | Churn Δ: 352 | Churn Cumulative: 3718 | Contributors (this commit): 1 | Commits (past 90d): 32 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,26 +10,20 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.2.2'\n+__version__ = '1.3'\n \n \n from .connectionpool import (\n     HTTPConnectionPool,\n     HTTPSConnectionPool,\n-    connection_from_url,\n-    get_host,\n-    make_headers)\n-\n-\n-from .exceptions import (\n-    HTTPError,\n-    MaxRetryError,\n-    SSLError,\n-    TimeoutError)\n+    connection_from_url\n+)\n \n+from . import exceptions\n+from .filepost import encode_multipart_formdata\n from .poolmanager import PoolManager, ProxyManager, proxy_from_url\n from .response import HTTPResponse\n-from .filepost import encode_multipart_formdata\n+from .util import make_headers, get_host\n \n \n # Set default logging handler to avoid \"No handler found\" warnings.\n\n@@ -7,15 +7,8 @@\n import logging\n import socket\n \n-from base64 import b64encode\n from socket import error as SocketError, timeout as SocketTimeout\n \n-try:\n-    from select import poll, POLLIN\n-except ImportError: # Doesn't exist on OSX and other platforms\n-    from select import select\n-    poll = False\n-\n try:   # Python 3\n     from http.client import HTTPConnection, HTTPException\n     from http.client import HTTP_PORT, HTTPS_PORT\n@@ -42,17 +35,16 @@ try:   # Compiled with SSL?\n     import ssl\n     BaseSSLError = ssl.SSLError\n \n-except ImportError:\n+except (ImportError, AttributeError):\n     pass\n \n \n-from .packages.ssl_match_hostname import match_hostname, CertificateError\n from .request import RequestMethods\n from .response import HTTPResponse\n+from .util import get_host, is_connection_dropped\n from .exceptions import (\n     EmptyPoolError,\n     HostChangedError,\n-    LocationParseError,\n     MaxRetryError,\n     SSLError,\n     TimeoutError,\n@@ -61,6 +53,7 @@ from .exceptions import (\n from .packages.ssl_match_hostname import match_hostname, CertificateError\n from .packages import six\n \n+\n xrange = six.moves.xrange\n \n log = logging.getLogger(__name__)\n@@ -72,6 +65,7 @@ port_by_scheme = {\n     'https': HTTPS_PORT,\n }\n \n+\n ## Connection objects (extension of httplib)\n \n class VerifiedHTTPSConnection(HTTPSConnection):\n@@ -107,6 +101,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n         if self.ca_certs:\n             match_hostname(self.sock.getpeercert(), self.host)\n \n+\n ## Pool objects\n \n class ConnectionPool(object):\n@@ -212,7 +207,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             conn = self.pool.get(block=self.block, timeout=timeout)\n \n             # If this is a persistent connection, check if it got disconnected\n-            if conn and conn.sock and is_connection_dropped(conn):\n+            if conn and is_connection_dropped(conn):\n                 log.info(\"Resetting dropped connection: %s\" % self.host)\n                 conn.close()\n \n@@ -256,9 +251,13 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             timeout = self.timeout\n \n         conn.timeout = timeout # This only does anything in Py26+\n-\n         conn.request(method, url, **httplib_request_kw)\n-        conn.sock.settimeout(timeout)\n+\n+        # Set timeout\n+        sock = getattr(conn, 'sock', False) # AppEngine doesn't have sock attr.\n+        if sock:\n+            sock.settimeout(timeout)\n+\n         httplib_response = conn.getresponse()\n \n         log.debug(\"\\\"%s %s %s\\\" %s %s\" %\n@@ -295,7 +294,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         .. note::\n \n            More commonly, it's appropriate to use a convenience method provided\n-           by :class:`.RequestMethods`, such as :meth:`.request`.\n+           by :class:`.RequestMethods`, such as :meth:`request`.\n \n         .. note::\n \n@@ -495,94 +494,6 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         return connection\n \n \n-## Helpers\n-\n-def make_headers(keep_alive=None, accept_encoding=None, user_agent=None,\n-                 basic_auth=None):\n-    \"\"\"\n-    Shortcuts for generating request headers.\n-\n-    :param keep_alive:\n-        If ``True``, adds 'connection: keep-alive' header.\n-\n-    :param accept_encoding:\n-        Can be a boolean, list, or string.\n-        ``True`` translates to 'gzip,deflate'.\n-        List will get joined by comma.\n-        String will be used as provided.\n-\n-    :param user_agent:\n-        String representing the user-agent you want, such as\n-        \"python-urllib3/0.6\"\n-\n-    :param basic_auth:\n-        Colon-separated username:password string for 'authorization: basic ...'\n-        auth header.\n-\n-    Example: ::\n-\n-        >>> make_headers(keep_alive=True, user_agent=\"Batman/1.0\")\n-        {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}\n-        >>> make_headers(accept_encoding=True)\n-        {'accept-encoding': 'gzip,deflate'}\n-    \"\"\"\n-    headers = {}\n-    if accept_encoding:\n-        if isinstance(accept_encoding, str):\n-            pass\n-        elif isinstance(accept_encoding, list):\n-            accept_encoding = ','.join(accept_encoding)\n-        else:\n-            accept_encoding = 'gzip,deflate'\n-        headers['accept-encoding'] = accept_encoding\n-\n-    if user_agent:\n-        headers['user-agent'] = user_agent\n-\n-    if keep_alive:\n-        headers['connection'] = 'keep-alive'\n-\n-    if basic_auth:\n-        headers['authorization'] = 'Basic ' + \\\n-            b64encode(six.b(basic_auth)).decode('utf-8')\n-\n-    return headers\n-\n-\n-def get_host(url):\n-    \"\"\"\n-    Given a url, return its scheme, host and port (None if it's not there).\n-\n-    For example: ::\n-\n-        >>> get_host('http://google.com/mail/')\n-        ('http', 'google.com', None)\n-        >>> get_host('google.com:80')\n-        ('http', 'google.com', 80)\n-    \"\"\"\n-\n-    # This code is actually similar to urlparse.urlsplit, but much\n-    # simplified for our needs.\n-    port = None\n-    scheme = 'http'\n-\n-    if '://' in url:\n-        scheme, url = url.split('://', 1)\n-    if '/' in url:\n-        url, _path = url.split('/', 1)\n-    if '@' in url:\n-        _auth, url = url.split('@', 1)\n-    if ':' in url:\n-        url, port = url.split(':', 1)\n-\n-        if not port.isdigit():\n-            raise LocationParseError(\"Failed to parse: %s\")\n-\n-        port = int(port)\n-\n-    return scheme, url, port\n-\n-\n def connection_from_url(url, **kw):\n     \"\"\"\n     Given a url, return an :class:`.ConnectionPool` instance of its host.\n@@ -608,22 +519,3 @@ def connection_from_url(url, **kw):\n         return HTTPSConnectionPool(host, port=port, **kw)\n     else:\n         return HTTPConnectionPool(host, port=port, **kw)\n-\n-\n-def is_connection_dropped(conn):\n-    \"\"\"\n-    Returns True if the connection is dropped and should be closed.\n-\n-    :param conn:\n-        ``HTTPConnection`` object.\n-    \"\"\"\n-    if not poll: # Platform-specific\n-        return select([conn.sock], [], [], 0.0)[0]\n-\n-    # This version is better on platforms that support it.\n-    p = poll()\n-    p.register(conn.sock, POLLIN)\n-    for (fno, ev) in p.poll(0.0):\n-        if fno == conn.sock.fileno():\n-            # Either data is buffered (bad), or the connection is dropped.\n-            return True\n\n@@ -24,15 +24,29 @@ def get_content_type(filename):\n     return mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n \n \n+def iter_fields(fields):\n+    \"\"\"\n+    Iterate over fields.\n+\n+    Supports list of (k, v) tuples and dicts.\n+    \"\"\"\n+    if isinstance(fields, dict):\n+        return ((k, v) for k, v in six.iteritems(fields))\n+\n+    return ((k, v) for k, v in fields)\n+\n+\n def encode_multipart_formdata(fields, boundary=None):\n     \"\"\"\n     Encode a dictionary of ``fields`` using the multipart/form-data mime format.\n \n     :param fields:\n-        Dictionary of fields. The key is treated as the field name, and the\n-        value as the body of the form-data. If the value is a tuple of two\n-        elements, then the first element is treated as the filename of the\n-        form-data section.\n+        Dictionary of fields or list of (key, value) field tuples.  The key is\n+        treated as the field name, and the value as the body of the form-data\n+        bytes. If the value is a tuple of two elements, then the first element\n+        is treated as the filename of the form-data section.\n+\n+        Field names and filenames must be unicode.\n \n     :param boundary:\n         If not specified, then a random boundary will be generated using\n@@ -42,7 +56,7 @@ def encode_multipart_formdata(fields, boundary=None):\n     if boundary is None:\n         boundary = choose_boundary()\n \n-    for fieldname, value in six.iteritems(fields):\n+    for fieldname, value in iter_fields(fields):\n         body.write(b('--%s\\r\\n' % (boundary)))\n \n         if isinstance(value, tuple):\n\n@@ -39,11 +39,11 @@ class PoolManager(RequestMethods):\n \n     Example: ::\n \n-        >>> manager = PoolManager()\n+        >>> manager = PoolManager(num_pools=2)\n         >>> r = manager.urlopen(\"http://google.com/\")\n         >>> r = manager.urlopen(\"http://google.com/mail\")\n         >>> r = manager.urlopen(\"http://yahoo.com/\")\n-        >>> len(r.pools)\n+        >>> len(manager.pools)\n         2\n \n     \"\"\"\n\n@@ -44,7 +44,7 @@ class RequestMethods(object):\n \n     def urlopen(self, method, url, body=None, headers=None,\n                 encode_multipart=True, multipart_boundary=None,\n-                **kw):\n+                **kw): # Abstract\n         raise NotImplemented(\"Classes extending RequestMethods must implement \"\n                              \"their own ``urlopen`` method.\")\n \n@@ -126,22 +126,3 @@ class RequestMethods(object):\n \n         return self.urlopen(method, url, body=body, headers=headers,\n                             **urlopen_kw)\n-\n-    # Deprecated:\n-\n-    def get_url(self, url, fields=None, **urlopen_kw):\n-        \"\"\"\n-        .. deprecated:: 1.0\n-           Use :meth:`request` instead.\n-        \"\"\"\n-        return self.request_encode_url('GET', url, fields=fields,\n-                                       **urlopen_kw)\n-\n-    def post_url(self, url, fields=None, headers=None, **urlopen_kw):\n-        \"\"\"\n-        .. deprecated:: 1.0\n-           Use :meth:`request` instead.\n-        \"\"\"\n-        return self.request_encode_body('POST', url, fields=fields,\n-                                        headers=headers,\n-                                        **urlopen_kw)\n\n@@ -171,11 +171,22 @@ class HTTPResponse(object):\n         with ``original_response=r``.\n         \"\"\"\n \n+        # Normalize headers between different versions of Python\n+        headers = {}\n+        for k, v in r.getheaders():\n+            # Python 3: Header keys are returned capitalised\n+            k = k.lower()\n+\n+            has_value = headers.get(k)\n+            if has_value: # Python 3: Repeating header keys are unmerged.\n+                v = ', '.join([has_value, v])\n+\n+            headers[k] = v\n+\n         # HTTPResponse objects in Python 3 don't have a .strict attribute\n         strict = getattr(r, 'strict', 0)\n         return ResponseCls(body=r,\n-                           # In Python 3, the header keys are returned capitalised\n-                           headers=dict((k.lower(), v) for k,v in r.getheaders()),\n+                           headers=headers,\n                            status=r.status,\n                            version=r.version,\n                            reason=r.reason,\n\n@@ -0,0 +1,136 @@\n+# urllib3/util.py\n+# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n+\n+from base64 import b64encode\n+\n+try:\n+    from select import poll, POLLIN\n+except ImportError: # `poll` doesn't exist on OSX and other platforms\n+    poll = False\n+    try:\n+        from select import select\n+    except ImportError: # `select` doesn't exist on AppEngine.\n+        select = False\n+\n+from .packages import six\n+from .exceptions import LocationParseError\n+\n+\n+def make_headers(keep_alive=None, accept_encoding=None, user_agent=None,\n+                 basic_auth=None):\n+    \"\"\"\n+    Shortcuts for generating request headers.\n+\n+    :param keep_alive:\n+        If ``True``, adds 'connection: keep-alive' header.\n+\n+    :param accept_encoding:\n+        Can be a boolean, list, or string.\n+        ``True`` translates to 'gzip,deflate'.\n+        List will get joined by comma.\n+        String will be used as provided.\n+\n+    :param user_agent:\n+        String representing the user-agent you want, such as\n+        \"python-urllib3/0.6\"\n+\n+    :param basic_auth:\n+        Colon-separated username:password string for 'authorization: basic ...'\n+        auth header.\n+\n+    Example: ::\n+\n+        >>> make_headers(keep_alive=True, user_agent=\"Batman/1.0\")\n+        {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}\n+        >>> make_headers(accept_encoding=True)\n+        {'accept-encoding': 'gzip,deflate'}\n+    \"\"\"\n+    headers = {}\n+    if accept_encoding:\n+        if isinstance(accept_encoding, str):\n+            pass\n+        elif isinstance(accept_encoding, list):\n+            accept_encoding = ','.join(accept_encoding)\n+        else:\n+            accept_encoding = 'gzip,deflate'\n+        headers['accept-encoding'] = accept_encoding\n+\n+    if user_agent:\n+        headers['user-agent'] = user_agent\n+\n+    if keep_alive:\n+        headers['connection'] = 'keep-alive'\n+\n+    if basic_auth:\n+        headers['authorization'] = 'Basic ' + \\\n+            b64encode(six.b(basic_auth)).decode('utf-8')\n+\n+    return headers\n+\n+\n+def get_host(url):\n+    \"\"\"\n+    Given a url, return its scheme, host and port (None if it's not there).\n+\n+    For example: ::\n+\n+        >>> get_host('http://google.com/mail/')\n+        ('http', 'google.com', None)\n+        >>> get_host('google.com:80')\n+        ('http', 'google.com', 80)\n+    \"\"\"\n+\n+    # This code is actually similar to urlparse.urlsplit, but much\n+    # simplified for our needs.\n+    port = None\n+    scheme = 'http'\n+\n+    if '://' in url:\n+        scheme, url = url.split('://', 1)\n+    if '/' in url:\n+        url, _path = url.split('/', 1)\n+    if '@' in url:\n+        _auth, url = url.split('@', 1)\n+    if ':' in url:\n+        url, port = url.split(':', 1)\n+\n+        if not port.isdigit():\n+            raise LocationParseError(\"Failed to parse: %s\" % url)\n+\n+        port = int(port)\n+\n+    return scheme, url, port\n+\n+\n+\n+def is_connection_dropped(conn):\n+    \"\"\"\n+    Returns True if the connection is dropped and should be closed.\n+\n+    :param conn:\n+        ``HTTPConnection`` object.\n+\n+    Note: For platforms like AppEngine, this will always return ``False`` to\n+    let the platform handle connection recycling transparently for us.\n+    \"\"\"\n+    sock = getattr(conn, 'sock', False)\n+    if not sock: #Platform-specific: AppEngine\n+        return False\n+\n+    if not poll: # Platform-specific\n+        if not select: #Platform-specific: AppEngine\n+            return False\n+\n+        return select([sock], [], [], 0.0)[0]\n+\n+    # This version is better on platforms that support it.\n+    p = poll()\n+    p.register(sock, POLLIN)\n+    for (fno, ev) in p.poll(0.0):\n+        if fno == sock.fileno():\n+            # Either data is buffered (bad), or the connection is dropped.\n+            return True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f25901874ab9cb7c6be20f8126f744e13c49a041", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 8 | Churn Cumulative: 4823 | Contributors (this commit): 51 | Commits (past 90d): 86 | Contributors (cumulative): 51 | DMM Complexity: None\n\nDIFF:\n@@ -408,6 +408,10 @@ class Request(object):\n         # Build the URL\n         url = self.full_url\n \n+        # Pre-request hook.\n+        r = dispatch_hook('pre_request', self.hooks, self)\n+        self.__dict__.update(r.__dict__)\n+\n         # Logging\n         if self.config.get('verbose'):\n             self.config.get('verbose').write('%s   %s   %s\\n' % (\n@@ -537,10 +541,6 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n-            # Pre-request hook.\n-            r = dispatch_hook('pre_request', self.hooks, self)\n-            self.__dict__.update(r.__dict__)\n-\n             try:\n                 # The inner try .. except re-raises certain exceptions as\n                 # internal exception types; the outer suppresses exceptions\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e831947be43bc97b39d6e6e573cb0842b67fea80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 161 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,10 +15,12 @@ Configurations:\n :max_retries: The number of times a request should be retried in the event of a connection failure.\n :danger_mode: If true, Requests will raise errors immediately.\n :safe_mode: If true, Requests will catch all errors.\n+:strict_mode: If true, Requests will do its best to follow RFCs (e.g. POST redirects).\n :pool_maxsize: The maximium size of an HTTP connection pool.\n :pool_connections: The number of active HTTP connection pools to use.\n :encode_uri: If true, URIs will automatically be percent-encoded.\n :trust_env: If true, the surrouding environment will be trusted (environ, netrc).\n+\n \"\"\"\n \n SCHEMAS = ['http', 'https']\n@@ -41,6 +43,7 @@ defaults['pool_maxsize'] = 10\n defaults['max_retries'] = 0\n defaults['danger_mode'] = False\n defaults['safe_mode'] = False\n+defaults['strict_mode'] = False\n defaults['keep_alive'] = True\n defaults['encode_uri'] = True\n defaults['trust_env'] = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fff5269d1a9eb3c07acbbb0d995b689d674123c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 1164 | Contributors (this commit): 18 | Commits (past 90d): 28 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ def get_netrc_auth(url):\n             # Return with login / password\n             login_i = (0 if _netrc[0] else 1)\n             return (_netrc[login_i], _netrc[2])\n-    except (NetrcParseError, IOError):\n+    except (NetrcParseError, IOError, AttributeError):\n         # If there was a parsing error or a permissions issue reading the file,\n         # we'll just skip netrc auth\n         pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b20d171c1c11ecee83b7e4a0beead1e54902d37b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 10 | Churn Cumulative: 4833 | Contributors (this commit): 51 | Commits (past 90d): 85 | Contributors (cumulative): 51 | DMM Complexity: 0.0\n\nDIFF:\n@@ -216,6 +216,7 @@ class Request(object):\n         self.cookies.update(r.cookies)\n \n         if r.status_code in REDIRECT_STATI and not self.redirect:\n+\n             while (('location' in r.headers) and\n                    ((r.status_code is codes.see_other) or (self.allow_redirects))):\n \n@@ -250,6 +251,15 @@ class Request(object):\n                 else:\n                     method = self.method\n \n+                # Do what the browsers do if strict_mode is off...\n+                if (not self.config.get('strict_mode')):\n+\n+                    if r.status_code in (codes.moved, codes.found) and self.method == 'POST':\n+                        method = 'GET'\n+\n+                    if (r.status_code == 303) and self.method != 'HEAD':\n+                        method = 'GET'\n+\n                 # Remove the cookie headers that were sent.\n                 headers = self.headers\n                 try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18591920f3599d34a8c50d371d58d0d33bd4623f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 4838 | Contributors (this commit): 51 | Commits (past 90d): 86 | Contributors (cumulative): 51 | DMM Complexity: 0.0\n\nDIFF:\n@@ -231,6 +231,7 @@ class Request(object):\n                 history.append(r)\n \n                 url = r.headers['location']\n+                data = self.data\n \n                 # Handle redirection without scheme (see: RFC 1808 Section 4)\n                 if url.startswith('//'):\n@@ -248,6 +249,7 @@ class Request(object):\n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is codes.see_other:\n                     method = 'GET'\n+                    data = None\n                 else:\n                     method = self.method\n \n@@ -256,9 +258,11 @@ class Request(object):\n \n                     if r.status_code in (codes.moved, codes.found) and self.method == 'POST':\n                         method = 'GET'\n+                        data = None\n \n                     if (r.status_code == 303) and self.method != 'HEAD':\n                         method = 'GET'\n+                        data = None\n \n                 # Remove the cookie headers that were sent.\n                 headers = self.headers\n@@ -276,6 +280,7 @@ class Request(object):\n                     auth=self.auth,\n                     cookies=self.cookies,\n                     redirect=True,\n+                    data=data,\n                     config=self.config,\n                     timeout=self.timeout,\n                     _poolmanager=self._poolmanager,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dacc1d8aafedf80f8736d794005b6c8e8b1d4ad1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 832 | Contributors (this commit): 10 | Commits (past 90d): 12 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -115,7 +115,7 @@ class Session(object):\n         files=None,\n         auth=None,\n         timeout=None,\n-        allow_redirects=False,\n+        allow_redirects=True,\n         proxies=None,\n         hooks=None,\n         return_response=True,\n@@ -136,7 +136,7 @@ class Session(object):\n         :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n         :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n         :param timeout: (optional) Float describing the timeout of the request.\n-        :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+        :param allow_redirects: (optional) Boolean. Set to True by default.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n         :param config: (optional) A configuration dictionary.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#775b6f6f0098ffa9edd3874b1af4b98378377211", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 325 | Contributors (this commit): 3 | Commits (past 90d): 18 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.11.0'\n-__build__ = 0x001100\n+__version__ = '0.11.1'\n+__build__ = 0x001101\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#04c329d703784f4d44bb9472f51e7723caabd264", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 176 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ setup(\n     package_data={'': ['LICENSE', 'NOTICE']},\n     include_package_data=True,\n     install_requires=required,\n-    license='ISC',\n+    license=open(\"LICENSE\").read(\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n         'Intended Audience :: Developers',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bcbc1be1c8782b4be98284fa285ff17b3f603254", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 178 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ setup(\n     package_data={'': ['LICENSE', 'NOTICE']},\n     include_package_data=True,\n     install_requires=required,\n-    license=open(\"LICENSE\").read(\n+    license=open(\"LICENSE\").read(),\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n         'Intended Audience :: Developers',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#171b370b0e3bbc0288fb0e4addcef16bf670e324", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 1172 | Contributors (this commit): 18 | Commits (past 90d): 29 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,6 +37,7 @@ def dict_to_sequence(d):\n def get_netrc_auth(url):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n \n+    try:\n         locations = (os.path.expanduser('~/{0}'.format(f)) for f in NETRC_FILES)\n         netrc_path = None\n \n@@ -59,11 +60,16 @@ def get_netrc_auth(url):\n                 # Return with login / password\n                 login_i = (0 if _netrc[0] else 1)\n                 return (_netrc[login_i], _netrc[2])\n-    except (NetrcParseError, IOError, AttributeError):\n+        except (NetrcParseError, IOError):\n             # If there was a parsing error or a permissions issue reading the file,\n             # we'll just skip netrc auth\n             pass\n \n+    # AppEngine hackiness.\n+    except AttributeError:\n+        pass\n+\n+\n \n def dict_from_string(s):\n     \"\"\"Returns a MultiDict with Cookies.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e12d053ab81c3b8580f6f4855eb194813caf6c70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 193 | Contributors (this commit): 6 | Commits (past 90d): 17 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,6 @@ HTTPBIN_URL = os.environ.get('HTTPBIN_URL')\n \n def httpbin(*suffix):\n     \"\"\"Returns url for HTTPBIN resource.\"\"\"\n-\n     return HTTPBIN_URL + '/'.join(suffix)\n \n \n@@ -77,11 +76,11 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         self.assertEqual(request.path_url, \"/get/test%20case\")\n \n     def test_HTTP_200_OK_GET(self):\n-        r = get(httpbin('/get'))\n+        r = get(httpbin('get'))\n         self.assertEqual(r.status_code, 200)\n \n     def test_response_sent(self):\n-        r = get(httpbin('/get'))\n+        r = get(httpbin('get'))\n \n         self.assertTrue(r.request.sent)\n \n@@ -204,7 +203,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         self.assertTrue(heads['user-agent'] in r.text)\n \n     def test_HTTP_200_OK_HEAD(self):\n-        r = head(httpbin('/get'))\n+        r = head(httpbin('get'))\n         self.assertEqual(r.status_code, 200)\n \n     def test_HTTP_200_OK_PUT(self):\n@@ -533,7 +532,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     def test_session_HTTP_200_OK_GET(self):\n \n         s = requests.session()\n-        r = get(httpbin('/get'), session=s)\n+        r = get(httpbin('get'), session=s)\n         self.assertEqual(r.status_code, 200)\n \n     def test_session_persistent_headers(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2bae0d295ba4d28392caf1aa4b8f95d54692db34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2210 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.3'\n+__version__ = 'dev'\n \n \n from .connectionpool import (\n\n@@ -260,10 +260,11 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n         httplib_response = conn.getresponse()\n \n-        log.debug(\"\\\"%s %s %s\\\" %s %s\" %\n-                  (method, url,\n-                   conn._http_vsn_str, # pylint: disable-msg=W0212\n-                   httplib_response.status, httplib_response.length))\n+        # AppEngine doesn't have a version attr.\n+        http_version = getattr(conn, '_http_vsn_str', 'HTTP/?'),\n+        log.debug(\"\\\"%s %s %s\\\" %s %s\" % (method, url, http_version,\n+                                          httplib_response.status,\n+                                          httplib_response.length))\n \n         return httplib_response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#32799067374744e420cc5b2284203b8bda27c878", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 180 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -18,7 +18,7 @@ if sys.argv[-1] == 'publish':\n     sys.exit()\n \n if sys.argv[-1] == 'test':\n-    os.system('python test_requests.py')\n+    os.system('python tests/test_requests.py')\n     sys.exit()\n \n required = ['certifi>=0.0.7',]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b92feb3f0af4c4b13e2f65a7601baccb378fd800", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 5040 | Contributors (this commit): 53 | Commits (past 90d): 99 | Contributors (cumulative): 59 | DMM Complexity: 1.0\n\nDIFF:\n@@ -623,7 +623,7 @@ class Response(object):\n \n     def __init__(self):\n \n-        self._content = None\n+        self._content = False\n         self._content_consumed = False\n \n         #: Integer Code of responded HTTP Status.\n@@ -736,7 +736,7 @@ class Response(object):\n     def content(self):\n         \"\"\"Content of the response, in bytes.\"\"\"\n \n-        if self._content is None:\n+        if self._content is False:\n             # Read the contents.\n             try:\n                 if self._content_consumed:\n\n@@ -800,5 +800,10 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n \n+    def test_no_conent(self):\n+        r = requests.get(httpbin('status', \"0\"), config={\"safe_mode\":True})\n+        r.content\n+        r.content\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#11cd2b825377ae237e2e88f6e46eed696db0ecf2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 200 | Contributors (this commit): 7 | Commits (past 90d): 19 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -800,7 +800,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n \n-    def test_no_conent(self):\n+    def test_no_content(self):\n         r = requests.get(httpbin('status', \"0\"), config={\"safe_mode\":True})\n         r.content\n         r.content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a8a8f2bd304ff77077b77c766977919c33ac5c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4845 | Contributors (this commit): 53 | Commits (past 90d): 81 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,8 @@ class Request(object):\n         self.data = None\n \n         #: Dictionary or byte of querystring data to attach to the\n-        #: :class:`Request <Request>`.\n+        #: :class:`Request <Request>`. The dictionary values can be lists for representing\n+        #: multivalued query parameters.\n         self.params = None\n \n         #: True if :class:`Request <Request>` is part of a redirect chain (disables history\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#365c64fe3bd074ad942ae720813693e8d8cf68d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4847 | Contributors (this commit): 53 | Commits (past 90d): 82 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -680,7 +680,7 @@ class Response(object):\n             return False\n         return True\n \n-    def iter_content(self, chunk_size=10 * 1024, decode_unicode=False):\n+    def iter_content(self, chunk_size=1, decode_unicode=False):\n         \"\"\"Iterates over the response data.  This avoids reading the content\n         at once into memory for large responses.  The chunk size is the number\n         of bytes it should read into memory.  This is not necessarily the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c89a3e207ea01c78a193b13da6172427be86ac45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 334 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -74,21 +74,21 @@ class HTTPDigestAuth(AuthBase):\n             algorithm = algorithm.upper()\n             # lambdas assume digest modules are imported at the top level\n             if algorithm == 'MD5':\n-                def h(x):\n+                def md5_utf8(x):\n                     if isinstance(x, str):\n                         x = x.encode('utf-8')\n                     return hashlib.md5(x).hexdigest()\n-                H = h\n+                hash_utf8 = md5_utf8\n             elif algorithm == 'SHA':\n-                def h(x):\n+                def sha_utf8(x):\n                     if isinstance(x, str):\n                         x = x.encode('utf-8')\n                     return hashlib.sha1(x).hexdigest()\n-                H = h\n+                hash_utf8 = sha_utf8\n             # XXX MD5-sess\n-            KD = lambda s, d: H(\"%s:%s\" % (s, d))\n+            KD = lambda s, d: hash_utf8(\"%s:%s\" % (s, d))\n \n-            if H is None:\n+            if hash_utf8 is None:\n                 return None\n \n             # XXX not implemented yet\n@@ -115,10 +115,10 @@ class HTTPDigestAuth(AuthBase):\n                 s += randombytes(8)\n \n                 cnonce = (hashlib.sha1(s).hexdigest()[:16])\n-                noncebit = \"%s:%s:%s:%s:%s\" % (nonce, ncvalue, cnonce, qop, H(A2))\n-                respdig = KD(H(A1), noncebit)\n+                noncebit = \"%s:%s:%s:%s:%s\" % (nonce, ncvalue, cnonce, qop, hash_utf8(A2))\n+                respdig = KD(hash_utf8(A1), noncebit)\n             elif qop is None:\n-                respdig = KD(H(A1), \"%s:%s\" % (nonce, H(A2)))\n+                respdig = KD(hash_utf8(A1), \"%s:%s\" % (nonce, hash_utf8(A2)))\n             else:\n                 # XXX handle auth-int.\n                 return None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3550ac7473883aea52ca7f4153de8c26357d5c37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 58 | Files Changed: 1 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 116 | Churn Cumulative: 316 | Contributors (this commit): 8 | Commits (past 90d): 20 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -117,71 +117,71 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     #     self.assertRaises(UnicodeEncodeError, requests.get,\n     #                       url=httpbin('get'), headers=heads)\n \n-    # def test_session_with_escaped_url(self):\n-    #     # Test a URL that contains percent-escaped characters\n-    #     # This URL should not be modified (double-escaped)\n-    #     # Tests:\n-    #     # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n-    #     # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n-    #     # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n-    #     path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n-    #     url = httpbin('get/' + path_fully_escaped)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+    def test_session_with_escaped_url(self):\n+        # Test a URL that contains percent-escaped characters\n+        # This URL should not be modified (double-escaped)\n+        # Tests:\n+        # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n+        # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n+        # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n+        path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n+        url = httpbin('get/' + path_fully_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-    #     # Test that illegal characters in a path get properly percent-escaped\n-    #     # Tests:\n-    #     # - Bare illegal characters (space, '<')\n-    #     # - Bare non-ASCII characters ('\\u00d8')\n-    #     path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n-    #     url = httpbin('get/' + path)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+        # Test that illegal characters in a path get properly percent-escaped\n+        # Tests:\n+        # - Bare illegal characters (space, '<')\n+        # - Bare non-ASCII characters ('\\u00d8')\n+        path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n+        url = httpbin('get/' + path)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-    #     # Test that reserved characters in a path do not get percent-escaped\n-    #     # Tests:\n-    #     # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n-    #     #   which are not allowed in the path, and ';' which delimits\n-    #     #   parameters.\n-    #     #   All such characters must be allowed bare in path, and must not be\n-    #     #   encoded.\n-    #     # - Special unreserved characters (RFC 3986), which should not be\n-    #     #   encoded (even though it wouldn't hurt).\n-    #     path_reserved = '!$&\\'()*+,/:=@-._~'\n-    #     url = httpbin('get/' + path_reserved)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/' + path_reserved))\n+        # Test that reserved characters in a path do not get percent-escaped\n+        # Tests:\n+        # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n+        #   which are not allowed in the path, and ';' which delimits\n+        #   parameters.\n+        #   All such characters must be allowed bare in path, and must not be\n+        #   encoded.\n+        # - Special unreserved characters (RFC 3986), which should not be\n+        #   encoded (even though it wouldn't hurt).\n+        path_reserved = '!$&\\'()*+,/:=@-._~'\n+        url = httpbin('get/' + path_reserved)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_reserved))\n \n-    #     # Test that percent-encoded unreserved characters in a path get\n-    #     # normalised to their un-encoded forms.\n-    #     path_unreserved = 'ABCDwxyz1234-._~'\n-    #     path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n-    #     url = httpbin('get/' + path_unreserved_escaped)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n+        # Test that percent-encoded unreserved characters in a path get\n+        # normalised to their un-encoded forms.\n+        path_unreserved = 'ABCDwxyz1234-._~'\n+        path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n+        url = httpbin('get/' + path_unreserved_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n \n-    #     # Re-run all of the same tests on the query part of the URI\n-    #     query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n-    #     url = httpbin('get/?' + query_fully_escaped)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+        # Re-run all of the same tests on the query part of the URI\n+        query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n+        url = httpbin('get/?' + query_fully_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-    #     query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n-    #     url = httpbin('get/?' + query)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+        query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n+        url = httpbin('get/?' + query)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-    #     # The legal characters in query happens to be the same as in path\n-    #     query_reserved = '!$&\\'()*+,/:=@-._~'\n-    #     url = httpbin('get/?' + query_reserved)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n+        # The legal characters in query happens to be the same as in path\n+        query_reserved = '!$&\\'()*+,/:=@-._~'\n+        url = httpbin('get/?' + query_reserved)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n \n-    #     query_unreserved = 'ABCDwxyz=1234-._~'\n-    #     query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n-    #     url = httpbin('get/?' + query_unreserved_escaped)\n-    #     response = get(url)\n-    #     self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n+        query_unreserved = 'ABCDwxyz=1234-._~'\n+        query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n+        url = httpbin('get/?' + query_unreserved_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
