{"custom_id": "scrapy#7a438a51b783f099894212abdefc95ad591fce3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 272 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -675,10 +675,11 @@ class FormRequestTest(RequestTest):\n             <input type=\"text\" name=\"i2\">\n             <input type=\"text\" value=\"i3v1\">\n             <input type=\"text\">\n+            <input name=\"i4\" value=\"i4v1\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})\n+        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': [''], 'i4': ['i4v1']})\n \n     def test_from_response_input_hidden(self):\n         res = _buildresponse(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2d25eab0df4c5c8bb1894cbc45cc15059d726c8d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 741 | Contributors (this commit): 18 | Commits (past 90d): 3 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -107,7 +107,7 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n \n     inputs = form.xpath('descendant::textarea'\n                         '|descendant::select'\n-                        '|descendant::input[@type['\n+                        '|descendant::input[not(@type) or @type['\n                         ' translate(., \"SUBMIT\", \"submit\") != \"submit\"'\n                         ' and translate(., \"IMAGE\", \"image\") !=\"image\"'\n                         ' and translate(., \"RESET\", \"reset\") != \"reset\"'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#395ef805eb74c1c575d32ab0c52d406f55c7d276", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 285 | Contributors (this commit): 6 | Commits (past 90d): 4 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,6 @@\n import cgi\n import unittest\n+import re\n \n import six\n from six.moves import xmlrpc_client as xmlrpclib\n@@ -747,6 +748,18 @@ class FormRequestTest(RequestTest):\n         self.assertRaises(ValueError, self.request_class.from_response,\n                           response, formxpath=\"//form/input[@name='abc']\")\n \n+    def test_from_response_unicode_xpath(self):\n+        response = _buildresponse(b'<form name=\"\\xd1\\x8a\"></form>')\n+        r = self.request_class.from_response(response, formxpath=u\"//form[@name='\\u044a']\")\n+        fs = _qs(r)\n+        self.assertEqual(fs, {})\n+\n+        xpath = u\"//form[@name='\\u03b1']\"\n+        encoded = xpath if six.PY3 else xpath.encode('unicode_escape')\n+        self.assertRaisesRegexp(ValueError, re.escape(encoded),\n+                                self.request_class.from_response,\n+                                response, formxpath=xpath)\n+\n     def test_from_response_button_submit(self):\n         response = _buildresponse(\n             \"\"\"<form action=\"post.php\" method=\"POST\">\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4f98be60be700e0c0c359f3cbaa1535ae9ece7ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 744 | Contributors (this commit): 18 | Commits (past 90d): 4 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -85,7 +85,8 @@ def _get_form(response, formname, formid, formnumber, formxpath):\n                 el = el.getparent()\n                 if el is None:\n                     break\n-        raise ValueError('No <form> element found with %s' % formxpath)\n+        encoded = formxpath if six.PY3 else formxpath.encode('unicode_escape')\n+        raise ValueError('No <form> element found with %s' % encoded)\n \n     # If we get here, it means that either formname was None\n     # or invalid\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ebfdb9bb03fd876bf519535dd57ec0816e0c3c2a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 761 | Contributors (this commit): 18 | Commits (past 90d): 5 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -109,12 +109,11 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     inputs = form.xpath('descendant::textarea'\n                         '|descendant::select'\n                         '|descendant::input[not(@type) or @type['\n-                        ' translate(., \"SUBMIT\", \"submit\") != \"submit\"'\n-                        ' and translate(., \"IMAGE\", \"image\") !=\"image\"'\n-                        ' and translate(., \"RESET\", \"reset\") != \"reset\"'\n-                        ' and (../@checked or ('\n-                        '  translate(., \"CHECKBOX\", \"checkbox\") != \"checkbox\"'\n-                        '  and translate(., \"RADIO\", \"radio\") != \"radio\"))]]')\n+                        ' not(re:test(., \"^(?:submit|image|reset)$\", \"i\"))'\n+                        ' and (../@checked or'\n+                        '  not(re:test(., \"^(?:checkbox|radio)$\", \"i\")))]]',\n+                        namespaces={\n+                            \"re\": \"http://exslt.org/regular-expressions\"})\n     values = [(k, u'' if v is None else v)\n               for k, v in (_value(e) for e in inputs)\n               if k and k not in formdata]\n@@ -160,8 +159,10 @@ def _get_clickable(clickdata, form):\n     clickables = [\n         el for el in form.xpath(\n             'descendant::*[(self::input or self::button)'\n-            ' and translate(@type, \"SUBMIT\", \"submit\") = \"submit\"]'\n-            '|descendant::button[not(@type)]')]\n+            ' and re:test(@type, \"^submit$\", \"i\")]'\n+            '|descendant::button[not(@type)]',\n+            namespaces={\"re\": \"http://exslt.org/regular-expressions\"})\n+        ]\n     if not clickables:\n         return\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#751155eadeb3b053666804061608b0ceb41f15f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 32 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -124,9 +124,6 @@ class SgmlLinkExtractor(FilteringLinkExtractor):\n             restrict_xpaths=restrict_xpaths, restrict_css=restrict_css,\n             canonicalize=canonicalize, deny_extensions=deny_extensions)\n \n-        # FIXME: was added to fix a RegexLinkExtractor testcase\n-        self.base_url = None\n-\n     def extract_links(self, response):\n         base_url = None\n         if self.restrict_xpaths:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2c251000d3f53f34e2d3610199f2fee9c6ecf8b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 43 | Churn Cumulative: 244 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,10 +1,9 @@\n from __future__ import print_function\n import re\n-import shutil\n import string\n from importlib import import_module\n from os.path import join, exists, abspath\n-from shutil import copytree, ignore_patterns\n+from shutil import copytree, ignore_patterns, move\n \n import scrapy\n from scrapy.commands import ScrapyCommand\n@@ -12,8 +11,6 @@ from scrapy.utils.template import render_templatefile, string_camelcase\n from scrapy.exceptions import UsageError\n \n \n-TEMPLATES_PATH = join(scrapy.__path__[0], 'templates', 'project')\n-\n TEMPLATES_TO_RENDER = (\n     ('scrapy.cfg',),\n     ('${project_name}', 'settings.py.tmpl'),\n@@ -63,17 +60,24 @@ class Command(ScrapyCommand):\n             self.exitcode = 1\n             return\n \n-        moduletpl = join(TEMPLATES_PATH, 'module')\n-        copytree(moduletpl, join(project_name, project_name), ignore=IGNORE)\n-        shutil.copy(join(TEMPLATES_PATH, 'scrapy.cfg'), project_name)\n+        copytree(self.templates_dir, project_name, ignore=IGNORE)\n+        move(join(project_name, 'module'), join(project_name, project_name))\n         for paths in TEMPLATES_TO_RENDER:\n             path = join(*paths)\n             tplfile = join(project_name,\n                 string.Template(path).substitute(project_name=project_name))\n             render_templatefile(tplfile, project_name=project_name,\n                 ProjectName=string_camelcase(project_name))\n-        print(\"New Scrapy project %r created in:\" % project_name)\n+        print(\"New Scrapy project %r, using template directory %r, created in:\" % \\\n+              (project_name, self.templates_dir))\n         print(\"    %s\\n\" % abspath(project_name))\n         print(\"You can start your first spider with:\")\n         print(\"    cd %s\" % project_name)\n         print(\"    scrapy genspider example example.com\")\n+\n+    @property\n+    def templates_dir(self):\n+        _templates_base_dir = self.settings['TEMPLATES_DIR'] or \\\n+            join(scrapy.__path__[0], 'templates')\n+        return join(_templates_base_dir, 'project')\n+    \n\\ No newline at end of file\n\n@@ -4,13 +4,14 @@ import subprocess\n import tempfile\n from time import sleep\n from os.path import exists, join, abspath\n-from shutil import rmtree\n+from shutil import rmtree, copytree\n from tempfile import mkdtemp\n import six\n \n from twisted.trial import unittest\n from twisted.internet import defer\n \n+import scrapy\n from scrapy.utils.python import to_native_str\n from scrapy.utils.python import retry_on_eintr\n from scrapy.utils.test import get_testenv\n@@ -73,6 +74,26 @@ class StartprojectTest(ProjectTest):\n         self.assertEqual(1, self.call('startproject', 'sys'))\n     \n \n+class StartprojectTemplatesTest(ProjectTest):\n+\n+    def setUp(self):\n+        super(StartprojectTemplatesTest, self).setUp()\n+        self.tmpl = join(self.temp_path, 'templates')\n+        self.tmpl_proj = join(self.tmpl, 'project')\n+        \n+    def test_startproject_template_override(self):\n+        copytree(join(scrapy.__path__[0], 'templates'), self.tmpl)\n+        os.mknod(join(self.tmpl_proj, 'root_template'))\n+        assert exists(join(self.tmpl_proj, 'root_template'))\n+\n+        args = ['--set', 'TEMPLATES_DIR=%s' % self.tmpl]\n+        p = self.proc('startproject', self.project_name, *args)\n+        out = to_native_str(retry_on_eintr(p.stdout.read))\n+        self.assertIn(\"New Scrapy project %r, using template directory %r, created in:\" % \\\n+                      (self.project_name, join(self.tmpl, 'project')), out)\n+        assert exists(join(self.proj_path, 'root_template'))\n+\n+\n class CommandTest(ProjectTest):\n \n     def setUp(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5750ce92c0c9298aaf5df77825fb0d4f99d53392", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2181 | Contributors (this commit): 17 | Commits (past 90d): 1 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,7 +7,7 @@ For more information see docs/topics/architecture.rst\n import logging\n from time import time\n \n-from twisted.internet import defer\n+from twisted.internet import defer, task\n from twisted.python.failure import Failure\n \n from scrapy import signals\n@@ -30,6 +30,7 @@ class Slot(object):\n         self.close_if_idle = close_if_idle\n         self.nextcall = nextcall\n         self.scheduler = scheduler\n+        self.heartbeat = task.LoopingCall(nextcall.schedule)\n \n     def add_request(self, request):\n         self.inprogress.add(request)\n@@ -47,6 +48,7 @@ class Slot(object):\n         if self.closing and not self.inprogress:\n             if self.nextcall:\n                 self.nextcall.cancel()\n+                self.heartbeat.stop()\n             self.closing.callback(None)\n \n \n@@ -113,7 +115,6 @@ class ExecutionEngine(object):\n             return\n \n         if self.paused:\n-            slot.nextcall.schedule(5)\n             return\n \n         while not self._needs_backout(spider):\n@@ -254,6 +255,7 @@ class ExecutionEngine(object):\n         self.crawler.stats.open_spider(spider)\n         yield self.signals.send_catch_log_deferred(signals.spider_opened, spider=spider)\n         slot.nextcall.schedule()\n+        slot.heartbeat.start(5)\n \n     def _spider_idle(self, spider):\n         \"\"\"Called when a spider gets idle. This function is called when there\n@@ -267,7 +269,6 @@ class ExecutionEngine(object):\n             spider=spider, dont_log=DontCloseSpider)\n         if any(isinstance(x, Failure) and isinstance(x.value, DontCloseSpider) \\\n                 for _, x in res):\n-            self.slot.nextcall.schedule(5)\n             return\n \n         if self.spider_is_idle(spider):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c4d29ecaef534cdab31fb73ec83545010f7a5ad8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 87 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,7 @@\n import glob\n import six\n import pytest\n+from twisted import version as twisted_version\n \n \n def _py_files(folder):\n@@ -26,6 +27,9 @@ collect_ignore = [\n \n ] + _py_files(\"scrapy/contrib\") + _py_files(\"scrapy/contrib_exp\")\n \n+if (twisted_version.major, twisted_version.minor, twisted_version.micro) >= (15, 5, 0):\n+    collect_ignore += _py_files(\"scrapy/xlib/tx\")\n+\n \n if six.PY3:\n     for line in open('tests/py3-ignores.txt'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#016875fd513c66b7ee1bcc80a1f2ae0d6ffda2d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 1175 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -239,11 +239,16 @@ class ScrapyAgent(object):\n         expected_size = txresponse.length if txresponse.length != UNKNOWN_LENGTH else -1\n \n         if maxsize and expected_size > maxsize:\n-            logger.error(\"Expected response size (%(size)s) larger than \"\n-                         \"download max size (%(maxsize)s).\",\n-                         {'size': expected_size, 'maxsize': maxsize})\n+            error_message = (\n+                \"Cancelling download of {url}: expected response \"\n+                \"size ({size}) larger than \"\n+                \"download max size ({maxsize}).\".format(\n+                    url=request.url, size=expected_size, maxsize=maxsize\n+                )\n+            )\n+            logger.error(error_message)\n             txresponse._transport._producer.loseConnection()\n-            raise defer.CancelledError()\n+            raise defer.CancelledError(error_message)\n \n         if warnsize and expected_size > warnsize:\n             logger.warning(\"Expected response size (%(size)s) larger than \"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#37289815ac98404458c43159abfd46dd54ed4b7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1185 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -239,13 +239,11 @@ class ScrapyAgent(object):\n         expected_size = txresponse.length if txresponse.length != UNKNOWN_LENGTH else -1\n \n         if maxsize and expected_size > maxsize:\n-            error_message = (\n-                \"Cancelling download of {url}: expected response \"\n+            error_message = (\"Cancelling download of {url}: expected response \"\n                              \"size ({size}) larger than \"\n-                \"download max size ({maxsize}).\".format(\n-                    url=request.url, size=expected_size, maxsize=maxsize\n-                )\n-            )\n+                             \"download max size ({maxsize}).\"\n+            ).format(url=request.url, size=expected_size, maxsize=maxsize)\n+\n             logger.error(error_message)\n             txresponse._transport._producer.loseConnection()\n             raise defer.CancelledError(error_message)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4f49aab7c068c553c5dcb2935ee3e4df6c0b71aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 15 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,6 @@ if sys.version_info[0] == 2:\n import twisted.persisted.styles  # NOQA\n # Remove only entries with twisted serializers for non-twisted types.\n for k, v in frozenset(copyreg.dispatch_table.items()):\n-    if not getattr(k, '__module__', '').startswith('twisted') \\\n-            and getattr(v, '__module__', '').startswith('twisted'):\n+    if not str(getattr(k, '__module__', '')).startswith('twisted') \\\n+            and str(getattr(v, '__module__', '')).startswith('twisted'):\n         copyreg.dispatch_table.pop(k)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f57121c77be82ad7521c3f4ed5cda17ada118ef4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 1197 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -292,6 +292,7 @@ class _ResponseReader(protocol.Protocol):\n         self._bodybuf = BytesIO()\n         self._maxsize  = maxsize\n         self._warnsize  = warnsize\n+        self._reached_warnsize = False\n         self._bytes_received = 0\n \n     def dataReceived(self, bodyBytes):\n@@ -305,11 +306,12 @@ class _ResponseReader(protocol.Protocol):\n                           'maxsize': self._maxsize})\n             self._finished.cancel()\n \n-        if self._warnsize and self._bytes_received > self._warnsize:\n-            logger.warning(\"Received (%(bytes)s) bytes larger than download \"\n-                           \"warn size (%(warnsize)s).\",\n-                           {'bytes': self._bytes_received,\n-                            'warnsize': self._warnsize})\n+        if self._warnsize and self._bytes_received > self._warnsize and not self._reached_warnsize:\n+            self._reached_warnsize = True\n+            logger.warning(\"Received more bytes than download \"\n+                           \"warn size (%(warnsize)s) in request %(request)s.\",\n+                           {'warnsize': self._warnsize,\n+                            'request': self._request})\n \n     def connectionLost(self, reason):\n         if self._finished.called:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c702c5301523e57ce276d80c8106f9a52853948d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 149 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,7 +83,8 @@ class StartprojectTemplatesTest(ProjectTest):\n         \n     def test_startproject_template_override(self):\n         copytree(join(scrapy.__path__[0], 'templates'), self.tmpl)\n-        os.mknod(join(self.tmpl_proj, 'root_template'))\n+        with open(join(self.tmpl_proj, 'root_template'), 'w'):\n+            pass\n         assert exists(join(self.tmpl_proj, 'root_template'))\n \n         args = ['--set', 'TEMPLATES_DIR=%s' % self.tmpl]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d4872940dbb450fcd0fa688766af0aa6dfccc861", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 13 | Methods Changed: 10 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 29 | Churn Cumulative: 407 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,6 +8,8 @@ except ImportError:\n     from io import BytesIO\n \n import six\n+if six.PY3:\n+    from io import StringIO\n \n from scrapy.http import TextResponse, Response\n from scrapy.selector import Selector\n@@ -65,7 +67,7 @@ class _StreamReader(object):\n             self._text, self.encoding = obj.body, obj.encoding\n         else:\n             self._text, self.encoding = obj, 'utf-8'\n-        self._is_unicode = isinstance(self._text, unicode)\n+        self._is_unicode = isinstance(self._text, six.text_type)\n \n     def read(self, n=65535):\n         self.read = self._read_unicode if self._is_unicode else self._read_string\n@@ -102,6 +104,10 @@ def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):\n     def _getrow(csv_r):\n         return [to_unicode(field, encoding) for field in next(csv_r)]\n \n+    # Python 3 csv reader input object needs to return strings\n+    if six.PY3:\n+        lines = StringIO(_body_or_str(obj, unicode=True))\n+    else:\n         lines = BytesIO(_body_or_str(obj, unicode=False))\n \n     kwargs = {}\n@@ -125,7 +131,7 @@ def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):\n \n \n def _body_or_str(obj, unicode=True):\n-    assert isinstance(obj, (Response, six.string_types)), \\\n+    assert isinstance(obj, (Response, six.string_types, six.binary_type)), \\\n         \"obj must be Response or basestring, not %s\" % type(obj).__name__\n     if isinstance(obj, Response):\n         if not unicode:\n\n@@ -1,4 +1,5 @@\n import os\n+import six\n from twisted.trial import unittest\n \n from scrapy.utils.iterators import csviter, xmliter, _body_or_str, xmliter_lxml\n@@ -99,7 +100,7 @@ class XmliterTestCase(unittest.TestCase):\n         body = b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n<xml>\\n    <item>Some Turkish Characters \\xd6\\xc7\\xde\\xdd\\xd0\\xdc \\xfc\\xf0\\xfd\\xfe\\xe7\\xf6</item>\\n</xml>\\n\\n'\n         response = XmlResponse('http://www.example.com', body=body)\n         self.assertEqual(\n-            self.xmliter(response, 'item').next().extract(),\n+            next(self.xmliter(response, 'item')).extract(),\n             u'<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>'\n         )\n \n@@ -189,11 +190,11 @@ class UtilsCsvTestCase(unittest.TestCase):\n \n         # explicit type check cuz' we no like stinkin' autocasting! yarrr\n         for result_row in result:\n-            self.assert_(all((isinstance(k, unicode) for k in result_row.keys())))\n-            self.assert_(all((isinstance(v, unicode) for v in result_row.values())))\n+            self.assert_(all((isinstance(k, six.text_type) for k in result_row.keys())))\n+            self.assert_(all((isinstance(v, six.text_type) for v in result_row.values())))\n \n     def test_csviter_delimiter(self):\n-        body = get_testdata('feeds', 'feed-sample3.csv').replace(',', '\\t')\n+        body = get_testdata('feeds', 'feed-sample3.csv').replace(b',', b'\\t')\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response, delimiter='\\t')\n \n@@ -205,7 +206,7 @@ class UtilsCsvTestCase(unittest.TestCase):\n \n     def test_csviter_quotechar(self):\n         body1 = get_testdata('feeds', 'feed-sample6.csv')\n-        body2 = get_testdata('feeds', 'feed-sample6.csv').replace(\",\", '|')\n+        body2 = get_testdata('feeds', 'feed-sample6.csv').replace(b',', b'|')\n \n         response1 = TextResponse(url=\"http://example.com/\", body=body1)\n         csv1 = csviter(response1, quotechar=\"'\")\n@@ -237,7 +238,7 @@ class UtilsCsvTestCase(unittest.TestCase):\n                           {u\"'id'\": u\"4\",   u\"'name'\": u\"'empty'\",   u\"'value'\": u\"\"}])\n \n     def test_csviter_delimiter_binary_response_assume_utf8_encoding(self):\n-        body = get_testdata('feeds', 'feed-sample3.csv').replace(',', '\\t')\n+        body = get_testdata('feeds', 'feed-sample3.csv').replace(b',', b'\\t')\n         response = Response(url=\"http://example.com/\", body=body)\n         csv = csviter(response, delimiter='\\t')\n \n@@ -249,10 +250,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n \n     def test_csviter_headers(self):\n         sample = get_testdata('feeds', 'feed-sample3.csv').splitlines()\n-        headers, body = sample[0].split(','), '\\n'.join(sample[1:])\n+        headers, body = sample[0].split(b','), b'\\n'.join(sample[1:])\n \n         response = TextResponse(url=\"http://example.com/\", body=body)\n-        csv = csviter(response, headers=headers)\n+        csv = csviter(response, headers=[h.decode('utf-8') for h in headers])\n \n         self.assertEqual([row for row in csv],\n                          [{u'id': u'1', u'name': u'alpha',   u'value': u'foobar'},\n@@ -262,7 +263,7 @@ class UtilsCsvTestCase(unittest.TestCase):\n \n     def test_csviter_falserow(self):\n         body = get_testdata('feeds', 'feed-sample3.csv')\n-        body = '\\n'.join((body, 'a,b', 'a,b,c,d'))\n+        body = b'\\n'.join((body, b'a,b', b'a,b,c,d'))\n \n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#6ddd8147382348f4796ac905f0357925dfa81da1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 57 | Churn Cumulative: 464 | Contributors (this commit): 14 | Commits (past 90d): 4 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,7 @@ logger = logging.getLogger(__name__)\n \n def xmliter(obj, nodename):\n     \"\"\"Return a iterator of Selector's over all nodes of a XML document,\n-       given tha name of the node to iterate. Useful for parsing XML feeds.\n+       given the name of the node to iterate. Useful for parsing XML feeds.\n \n     obj can be:\n     - a Response object\n@@ -36,7 +36,7 @@ def xmliter(obj, nodename):\n     header_end = re_rsearch(HEADER_END_RE, text)\n     header_end = text[header_end[1]:].strip() if header_end else ''\n \n-    r = re.compile(r\"<{0}[\\s>].*?</{0}>\".format(nodename_patt), re.DOTALL)\n+    r = re.compile(r'<%(np)s[\\s>].*?</%(np)s>' % {'np': nodename_patt}, re.DOTALL)\n     for match in r.finditer(text):\n         nodetext = header_start + match.group() + header_end\n         yield Selector(text=nodetext, type='xml').xpath('//' + nodename)[0]\n@@ -49,7 +49,7 @@ def xmliter_lxml(obj, nodename, namespace=None, prefix='x'):\n     iterable = etree.iterparse(reader, tag=tag, encoding=reader.encoding)\n     selxpath = '//' + ('%s:%s' % (prefix, nodename) if namespace else nodename)\n     for _, node in iterable:\n-        nodetext = etree.tostring(node)\n+        nodetext = etree.tostring(node, encoding='unicode')\n         node.clear()\n         xs = Selector(text=nodetext, type='xml')\n         if namespace:\n@@ -125,7 +125,7 @@ def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):\n \n \n def _body_or_str(obj, unicode=True):\n-    assert isinstance(obj, (Response, six.string_types)), \\\n+    assert isinstance(obj, (Response, six.string_types, bytes)), \\\n         \"obj must be Response or basestring, not %s\" % type(obj).__name__\n     if isinstance(obj, Response):\n         if not unicode:\n\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n import os\n from twisted.trial import unittest\n \n@@ -45,6 +46,54 @@ class XmliterTestCase(unittest.TestCase):\n                  for e in self.xmliter(response, 'matchme...')]\n         self.assertEqual(nodenames, [['matchme...']])\n \n+    def test_xmliter_unicode(self):\n+        # example taken from https://github.com/scrapy/scrapy/issues/1665\n+        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+            <þingflokkar>\n+               <þingflokkur id=\"26\">\n+                  <heiti />\n+                  <skammstafanir>\n+                     <stuttskammstöfun>-</stuttskammstöfun>\n+                     <löngskammstöfun />\n+                  </skammstafanir>\n+                  <tímabil>\n+                     <fyrstaþing>80</fyrstaþing>\n+                  </tímabil>\n+               </þingflokkur>\n+               <þingflokkur id=\"21\">\n+                  <heiti>Alþýðubandalag</heiti>\n+                  <skammstafanir>\n+                     <stuttskammstöfun>Ab</stuttskammstöfun>\n+                     <löngskammstöfun>Alþb.</löngskammstöfun>\n+                  </skammstafanir>\n+                  <tímabil>\n+                     <fyrstaþing>76</fyrstaþing>\n+                     <síðastaþing>123</síðastaþing>\n+                  </tímabil>\n+               </þingflokkur>\n+               <þingflokkur id=\"27\">\n+                  <heiti>Alþýðuflokkur</heiti>\n+                  <skammstafanir>\n+                     <stuttskammstöfun>A</stuttskammstöfun>\n+                     <löngskammstöfun>Alþfl.</löngskammstöfun>\n+                  </skammstafanir>\n+                  <tímabil>\n+                     <fyrstaþing>27</fyrstaþing>\n+                     <síðastaþing>120</síðastaþing>\n+                  </tímabil>\n+               </þingflokkur>\n+            </þingflokkar>\"\"\"\n+        response = XmlResponse(url=\"http://example.com\", body=body)\n+        attrs = []\n+        for x in self.xmliter(response, u'þingflokkur'):\n+            attrs.append((x.xpath('@id').extract(),\n+                          x.xpath(u'./skammstafanir/stuttskammstöfun/text()').extract(),\n+                          x.xpath(u'./tímabil/fyrstaþing/text()').extract()))\n+\n+        self.assertEqual(attrs,\n+                         [([u'26'], [u'-'], [u'80']),\n+                          ([u'21'], [u'Ab'], [u'76']),\n+                          ([u'27'], [u'A'], [u'27'])])\n \n     def test_xmliter_text(self):\n         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><products><product>one</product><product>two</product></products>\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d7d4ef67a697243143df969e32b8ed956394f4fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 304 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -1,15 +1,12 @@\n import re\n import csv\n import logging\n-\n try:\n     from cStringIO import StringIO as BytesIO\n except ImportError:\n     from io import BytesIO\n-\n-import six\n-if six.PY3:\n from io import StringIO\n+import six\n \n from scrapy.http import TextResponse, Response\n from scrapy.selector import Selector\n@@ -131,7 +128,7 @@ def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):\n \n \n def _body_or_str(obj, unicode=True):\n-    assert isinstance(obj, (Response, six.string_types, six.binary_type)), \\\n+    assert isinstance(obj, (Response, six.string_types, bytes)), \\\n         \"obj must be Response or basestring, not %s\" % type(obj).__name__\n     if isinstance(obj, Response):\n         if not unicode:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9fad25f3d14091d250cc4b1d668befca00c30ef0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 28 | Churn Cumulative: 499 | Contributors (this commit): 14 | Commits (past 90d): 7 | Contributors (cumulative): 20 | DMM Complexity: 0.7692307692307693\n\nDIFF:\n@@ -48,7 +48,7 @@ def xmliter_lxml(obj, nodename, namespace=None, prefix='x'):\n     iterable = etree.iterparse(reader, tag=tag, encoding=reader.encoding)\n     selxpath = '//' + ('%s:%s' % (prefix, nodename) if namespace else nodename)\n     for _, node in iterable:\n-        nodetext = etree.tostring(node, encoding='unicode')\n+        nodetext = etree.tostring(node, encoding=six.text_type)\n         node.clear()\n         xs = Selector(text=nodetext, type='xml')\n         if namespace:\n@@ -128,8 +128,11 @@ def csviter(obj, delimiter=None, headers=None, encoding=None, quotechar=None):\n \n \n def _body_or_str(obj, unicode=True):\n-    assert isinstance(obj, (Response, six.string_types, bytes)), \\\n-        \"obj must be Response or basestring, not %s\" % type(obj).__name__\n+    expected_types = (Response, six.text_type, six.binary_type)\n+    assert isinstance(obj, expected_types), \\\n+        \"obj must be %s, not %s\" % (\n+            \" or \".join(t.__name__ for t in expected_types),\n+            type(obj).__name__)\n     if isinstance(obj, Response):\n         if not unicode:\n             return obj.body\n\n@@ -49,7 +49,7 @@ class XmliterTestCase(unittest.TestCase):\n \n     def test_xmliter_unicode(self):\n         # example taken from https://github.com/scrapy/scrapy/issues/1665\n-        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n             <þingflokkar>\n                <þingflokkur id=\"26\">\n                   <heiti />\n@@ -84,7 +84,22 @@ class XmliterTestCase(unittest.TestCase):\n                   </tímabil>\n                </þingflokkur>\n             </þingflokkar>\"\"\"\n-        response = XmlResponse(url=\"http://example.com\", body=body)\n+\n+        # with bytes\n+        response = XmlResponse(url=\"http://example.com\", body=body.encode('utf-8'))\n+        attrs = []\n+        for x in self.xmliter(response, u'þingflokkur'):\n+            attrs.append((x.xpath('@id').extract(),\n+                          x.xpath(u'./skammstafanir/stuttskammstöfun/text()').extract(),\n+                          x.xpath(u'./tímabil/fyrstaþing/text()').extract()))\n+\n+        self.assertEqual(attrs,\n+                         [([u'26'], [u'-'], [u'80']),\n+                          ([u'21'], [u'Ab'], [u'76']),\n+                          ([u'27'], [u'A'], [u'27'])])\n+\n+        # Unicode body needs encoding information\n+        response = XmlResponse(url=\"http://example.com\", body=body, encoding='utf-8')\n         attrs = []\n         for x in self.xmliter(response, u'þingflokkur'):\n             attrs.append((x.xpath('@id').extract(),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d4c7d72b2b6fc20c1df0f697dd60801b93848628", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 193 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -160,6 +160,10 @@ class XmliterTestCase(unittest.TestCase):\n \n         self.assertRaises(StopIteration, next, iter)\n \n+    def test_xmliter_objtype_exception(self):\n+        i = self.xmliter(42, 'product')\n+        self.assertRaises(AssertionError, next, i)\n+\n     def test_xmliter_encoding(self):\n         body = b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n<xml>\\n    <item>Some Turkish Characters \\xd6\\xc7\\xde\\xdd\\xd0\\xdc \\xfc\\xf0\\xfd\\xfe\\xe7\\xf6</item>\\n</xml>\\n\\n'\n         response = XmlResponse('http://www.example.com', body=body)\n@@ -233,6 +237,9 @@ class LxmlXmliterTestCase(XmliterTestCase):\n         node = next(my_iter)\n         self.assertEqual(node.xpath('f:name/text()').extract(), ['African Coffee Table'])\n \n+    def test_xmliter_objtype_exception(self):\n+        i = self.xmliter(42, 'product')\n+        self.assertRaises(TypeError, next, i)\n \n class UtilsCsvTestCase(unittest.TestCase):\n     sample_feeds_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'sample_data', 'feeds')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1347015a80b9d8dafe0e1ac067d65b7e0e7c3f84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 212 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -85,23 +85,14 @@ class XmliterTestCase(unittest.TestCase):\n                </þingflokkur>\n             </þingflokkar>\"\"\"\n \n+        for r in (\n             # with bytes\n-        response = XmlResponse(url=\"http://example.com\", body=body.encode('utf-8'))\n-        attrs = []\n-        for x in self.xmliter(response, u'þingflokkur'):\n-            attrs.append((x.xpath('@id').extract(),\n-                          x.xpath(u'./skammstafanir/stuttskammstöfun/text()').extract(),\n-                          x.xpath(u'./tímabil/fyrstaþing/text()').extract()))\n-\n-        self.assertEqual(attrs,\n-                         [([u'26'], [u'-'], [u'80']),\n-                          ([u'21'], [u'Ab'], [u'76']),\n-                          ([u'27'], [u'A'], [u'27'])])\n-\n+            XmlResponse(url=\"http://example.com\", body=body.encode('utf-8')),\n             # Unicode body needs encoding information\n-        response = XmlResponse(url=\"http://example.com\", body=body, encoding='utf-8')\n+            XmlResponse(url=\"http://example.com\", body=body, encoding='utf-8')):\n+\n             attrs = []\n-        for x in self.xmliter(response, u'þingflokkur'):\n+            for x in self.xmliter(r, u'þingflokkur'):\n                 attrs.append((x.xpath('@id').extract(),\n                               x.xpath(u'./skammstafanir/stuttskammstöfun/text()').extract(),\n                               x.xpath(u'./tímabil/fyrstaþing/text()').extract()))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9f2be23a3957ff17b252c47958affb9f5fcd6e72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 25 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,18 +14,21 @@ from twisted.protocols.policies import WrappingFactory\n \n from scrapy.core.downloader import webclient as client\n from scrapy.http import Request, Headers\n+from scrapy.utils.python import to_bytes, to_unicode\n \n \n def getPage(url, contextFactory=None, *args, **kwargs):\n     \"\"\"Adapted version of twisted.web.client.getPage\"\"\"\n-    def _clientfactory(*args, **kwargs):\n+    def _clientfactory(url, *args, **kwargs):\n+        url = to_unicode(url)\n         timeout = kwargs.pop('timeout', 0)\n-        f = client.ScrapyHTTPClientFactory(Request(*args, **kwargs), timeout=timeout)\n+        f = client.ScrapyHTTPClientFactory(\n+            Request(url, *args, **kwargs), timeout=timeout)\n         f.deferred.addCallback(lambda r: r.body)\n         return f\n \n     from twisted.web.client import _makeGetterFactory\n-    return _makeGetterFactory(url, _clientfactory,\n+    return _makeGetterFactory(to_bytes(url), _clientfactory,\n         contextFactory=contextFactory, *args, **kwargs).deferred\n \n \n@@ -212,7 +215,7 @@ class WebClientTestCase(unittest.TestCase):\n     def setUp(self):\n         name = self.mktemp()\n         os.mkdir(name)\n-        FilePath(name).child(\"file\").setContent(\"0123456789\")\n+        FilePath(name).child(\"file\").setContent(b\"0123456789\")\n         r = static.File(name)\n         r.putChild(\"redirect\", util.Redirect(\"/file\"))\n         r.putChild(\"wait\", ForeverTakingResource())\n@@ -250,7 +253,7 @@ class WebClientTestCase(unittest.TestCase):\n         the body of the response if the default method B{GET} is used.\n         \"\"\"\n         d = getPage(self.getURL(\"file\"))\n-        d.addCallback(self.assertEquals, \"0123456789\")\n+        d.addCallback(self.assertEquals, b\"0123456789\")\n         return d\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1d5ab671833b1e054bf15a1b562a33b5ac5f1af7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 29 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -266,8 +266,8 @@ class WebClientTestCase(unittest.TestCase):\n         def _getPage(method):\n             return getPage(self.getURL(\"file\"), method=method)\n         return defer.gatherResults([\n-            _getPage(\"head\").addCallback(self.assertEqual, \"\"),\n-            _getPage(\"HEAD\").addCallback(self.assertEqual, \"\")])\n+            _getPage(\"head\").addCallback(self.assertEqual, b\"\"),\n+            _getPage(\"HEAD\").addCallback(self.assertEqual, b\"\")])\n \n \n     def test_timeoutNotTriggering(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#945674eb8f351e71aea090f1e94c3fa337c52cf8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 36 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,6 +3,7 @@ from twisted.internet import defer\n Tests borrowed from the twisted.web.client tests.\n \"\"\"\n import os\n+import six\n from six.moves.urllib.parse import urlparse\n \n from twisted.trial import unittest\n@@ -75,8 +76,10 @@ class ParseUrlTestCase(unittest.TestCase):\n         elements of its return tuple, even when passed an URL which has\n         previously been passed to L{urlparse} as a C{unicode} string.\n         \"\"\"\n-        badInput = u'http://example.com/path'\n-        goodInput = badInput.encode('ascii')\n+        goodInput = u'http://example.com/path'\n+        badInput = goodInput.encode('ascii')\n+        if six.PY2:\n+            goodInput, badInput = badInput, goodInput\n         urlparse(badInput)\n         scheme, netloc, host, port, path = self._parse(goodInput)\n         self.assertTrue(isinstance(scheme, str))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#325b6af6c2c55bcf47fe339cfe139b357eb1673e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 39 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 78 | Churn Cumulative: 114 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -105,22 +105,22 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n                 'Useful': 'value'}))\n \n         self._test(factory,\n-            \"GET /bar HTTP/1.0\\r\\n\"\n-            \"Content-Length: 9\\r\\n\"\n-            \"Useful: value\\r\\n\"\n-            \"Connection: close\\r\\n\"\n-            \"User-Agent: fooble\\r\\n\"\n-            \"Host: example.net\\r\\n\"\n-            \"Cookie: blah blah\\r\\n\"\n-            \"\\r\\n\"\n-            \"some data\")\n+            b\"GET /bar HTTP/1.0\\r\\n\"\n+            b\"Content-Length: 9\\r\\n\"\n+            b\"Useful: value\\r\\n\"\n+            b\"Connection: close\\r\\n\"\n+            b\"User-Agent: fooble\\r\\n\"\n+            b\"Host: example.net\\r\\n\"\n+            b\"Cookie: blah blah\\r\\n\"\n+            b\"\\r\\n\"\n+            b\"some data\")\n \n         # test minimal sent headers\n         factory = client.ScrapyHTTPClientFactory(Request('http://foo/bar'))\n         self._test(factory,\n-            \"GET /bar HTTP/1.0\\r\\n\"\n-            \"Host: foo\\r\\n\"\n-            \"\\r\\n\")\n+            b\"GET /bar HTTP/1.0\\r\\n\"\n+            b\"Host: foo\\r\\n\"\n+            b\"\\r\\n\")\n \n         # test a simple POST with body and content-type\n         factory = client.ScrapyHTTPClientFactory(Request(\n@@ -130,13 +130,13 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n             headers={'Content-Type': 'application/x-www-form-urlencoded'}))\n \n         self._test(factory,\n-            \"POST /bar HTTP/1.0\\r\\n\"\n-            \"Host: foo\\r\\n\"\n-            \"Connection: close\\r\\n\"\n-            \"Content-Type: application/x-www-form-urlencoded\\r\\n\"\n-            \"Content-Length: 10\\r\\n\"\n-            \"\\r\\n\"\n-            \"name=value\")\n+            b\"POST /bar HTTP/1.0\\r\\n\"\n+            b\"Host: foo\\r\\n\"\n+            b\"Connection: close\\r\\n\"\n+            b\"Content-Type: application/x-www-form-urlencoded\\r\\n\"\n+            b\"Content-Length: 10\\r\\n\"\n+            b\"\\r\\n\"\n+            b\"name=value\")\n \n         # test a POST method with no body provided\n         factory = client.ScrapyHTTPClientFactory(Request(\n@@ -145,10 +145,10 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n         ))\n \n         self._test(factory,\n-                   \"POST /bar HTTP/1.0\\r\\n\"\n-                   \"Host: foo\\r\\n\"\n-                   \"Content-Length: 0\\r\\n\"\n-                   \"\\r\\n\")\n+            b\"POST /bar HTTP/1.0\\r\\n\"\n+            b\"Host: foo\\r\\n\"\n+            b\"Content-Length: 0\\r\\n\"\n+            b\"\\r\\n\")\n \n         # test with single and multivalued headers\n         factory = client.ScrapyHTTPClientFactory(Request(\n@@ -159,12 +159,12 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n                 }))\n \n         self._test(factory,\n-            \"GET /bar HTTP/1.0\\r\\n\"\n-            \"Host: foo\\r\\n\"\n-            \"X-Meta-Multivalued: value1\\r\\n\"\n-            \"X-Meta-Multivalued: value2\\r\\n\"\n-            \"X-Meta-Single: single\\r\\n\"\n-            \"\\r\\n\")\n+            b\"GET /bar HTTP/1.0\\r\\n\"\n+            b\"Host: foo\\r\\n\"\n+            b\"X-Meta-Multivalued: value1\\r\\n\"\n+            b\"X-Meta-Multivalued: value2\\r\\n\"\n+            b\"X-Meta-Single: single\\r\\n\"\n+            b\"\\r\\n\")\n \n         # same test with single and multivalued headers but using Headers class\n         factory = client.ScrapyHTTPClientFactory(Request(\n@@ -175,12 +175,12 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n                 })))\n \n         self._test(factory,\n-            \"GET /bar HTTP/1.0\\r\\n\"\n-            \"Host: foo\\r\\n\"\n-            \"X-Meta-Multivalued: value1\\r\\n\"\n-            \"X-Meta-Multivalued: value2\\r\\n\"\n-            \"X-Meta-Single: single\\r\\n\"\n-            \"\\r\\n\")\n+            b\"GET /bar HTTP/1.0\\r\\n\"\n+            b\"Host: foo\\r\\n\"\n+            b\"X-Meta-Multivalued: value1\\r\\n\"\n+            b\"X-Meta-Multivalued: value2\\r\\n\"\n+            b\"X-Meta-Single: single\\r\\n\"\n+            b\"\\r\\n\")\n \n     def _test(self, factory, testvalue):\n         transport = StringTransport()\n@@ -199,10 +199,10 @@ class ScrapyHTTPPageGetterTests(unittest.TestCase):\n         protocol = client.ScrapyHTTPPageGetter()\n         protocol.factory = factory\n         protocol.headers = Headers()\n-        protocol.dataReceived(\"HTTP/1.0 200 OK\\n\")\n-        protocol.dataReceived(\"Hello: World\\n\")\n-        protocol.dataReceived(\"Foo: Bar\\n\")\n-        protocol.dataReceived(\"\\n\")\n+        protocol.dataReceived(b\"HTTP/1.0 200 OK\\n\")\n+        protocol.dataReceived(b\"Hello: World\\n\")\n+        protocol.dataReceived(b\"Foo: Bar\\n\")\n+        protocol.dataReceived(b\"\\n\")\n         self.assertEqual(protocol.headers,\n             Headers({'Hello': ['World'], 'Foo': ['Bar']}))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
