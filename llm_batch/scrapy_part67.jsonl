{"custom_id": "scrapy#10a527daca130265498618cb6bb501cefe2ef571", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 317 | Files Changed: 2 | Hunks: 2 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 317 | Churn Cumulative: 317 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1 +0,0 @@\n-from scrapy.contrib.codecs.x_mac_roman import XMacRomanCodec\n\n@@ -1,316 +0,0 @@\n-\"\"\"\n-Python Character Mapping Codec macintosh generated from 'VENDORS/APPLE/ROMAN.TXT' with gencodec.py.\n-\"\"\"\n-\n-import codecs\n-\n-### Codec APIs\n-\n-class Codec(codecs.Codec):\n-\n-    def encode(self,input,errors='strict'):\n-        return codecs.charmap_encode(input,errors,encoding_table)\n-\n-    def decode(self,input,errors='strict'):\n-        return codecs.charmap_decode(input,errors,decoding_table)\n-\n-class IncrementalEncoder(codecs.IncrementalEncoder):\n-    def encode(self, input, final=False):\n-        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\n-\n-class IncrementalDecoder(codecs.IncrementalDecoder):\n-    def decode(self, input, final=False):\n-        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\n-\n-class StreamWriter(Codec,codecs.StreamWriter):\n-    pass\n-\n-class StreamReader(Codec,codecs.StreamReader):\n-    pass\n-\n-### encodings module API\n-\n-def getregentry():\n-    return codecs.CodecInfo(\n-        name='x-mac-roman',\n-        encode=Codec().encode,\n-        decode=Codec().decode,\n-        incrementalencoder=IncrementalEncoder,\n-        incrementaldecoder=IncrementalDecoder,\n-        streamreader=StreamReader,\n-        streamwriter=StreamWriter,\n-    )\n-\n-\n-### Decoding Table\n-\n-decoding_table = (\n-    u'\\x00'     #  0x00 -> CONTROL CHARACTER\n-    u'\\x01'     #  0x01 -> CONTROL CHARACTER\n-    u'\\x02'     #  0x02 -> CONTROL CHARACTER\n-    u'\\x03'     #  0x03 -> CONTROL CHARACTER\n-    u'\\x04'     #  0x04 -> CONTROL CHARACTER\n-    u'\\x05'     #  0x05 -> CONTROL CHARACTER\n-    u'\\x06'     #  0x06 -> CONTROL CHARACTER\n-    u'\\x07'     #  0x07 -> CONTROL CHARACTER\n-    u'\\x08'     #  0x08 -> CONTROL CHARACTER\n-    u'\\t'       #  0x09 -> CONTROL CHARACTER\n-    u'\\n'       #  0x0A -> CONTROL CHARACTER\n-    u'\\x0b'     #  0x0B -> CONTROL CHARACTER\n-    u'\\x0c'     #  0x0C -> CONTROL CHARACTER\n-    u'\\r'       #  0x0D -> CONTROL CHARACTER\n-    u'\\x0e'     #  0x0E -> CONTROL CHARACTER\n-    u'\\x0f'     #  0x0F -> CONTROL CHARACTER\n-    u'\\x10'     #  0x10 -> CONTROL CHARACTER\n-    u'\\x11'     #  0x11 -> CONTROL CHARACTER\n-    u'\\x12'     #  0x12 -> CONTROL CHARACTER\n-    u'\\x13'     #  0x13 -> CONTROL CHARACTER\n-    u'\\x14'     #  0x14 -> CONTROL CHARACTER\n-    u'\\x15'     #  0x15 -> CONTROL CHARACTER\n-    u'\\x16'     #  0x16 -> CONTROL CHARACTER\n-    u'\\x17'     #  0x17 -> CONTROL CHARACTER\n-    u'\\x18'     #  0x18 -> CONTROL CHARACTER\n-    u'\\x19'     #  0x19 -> CONTROL CHARACTER\n-    u'\\x1a'     #  0x1A -> CONTROL CHARACTER\n-    u'\\x1b'     #  0x1B -> CONTROL CHARACTER\n-    u'\\x1c'     #  0x1C -> CONTROL CHARACTER\n-    u'\\x1d'     #  0x1D -> CONTROL CHARACTER\n-    u'\\x1e'     #  0x1E -> CONTROL CHARACTER\n-    u'\\x1f'     #  0x1F -> CONTROL CHARACTER\n-    u' '        #  0x20 -> SPACE\n-    u'!'        #  0x21 -> EXCLAMATION MARK\n-    u'\"'        #  0x22 -> QUOTATION MARK\n-    u'#'        #  0x23 -> NUMBER SIGN\n-    u'$'        #  0x24 -> DOLLAR SIGN\n-    u'%'        #  0x25 -> PERCENT SIGN\n-    u'&'        #  0x26 -> AMPERSAND\n-    u\"'\"        #  0x27 -> APOSTROPHE\n-    u'('        #  0x28 -> LEFT PARENTHESIS\n-    u')'        #  0x29 -> RIGHT PARENTHESIS\n-    u'*'        #  0x2A -> ASTERISK\n-    u'+'        #  0x2B -> PLUS SIGN\n-    u','        #  0x2C -> COMMA\n-    u'-'        #  0x2D -> HYPHEN-MINUS\n-    u'.'        #  0x2E -> FULL STOP\n-    u'/'        #  0x2F -> SOLIDUS\n-    u'0'        #  0x30 -> DIGIT ZERO\n-    u'1'        #  0x31 -> DIGIT ONE\n-    u'2'        #  0x32 -> DIGIT TWO\n-    u'3'        #  0x33 -> DIGIT THREE\n-    u'4'        #  0x34 -> DIGIT FOUR\n-    u'5'        #  0x35 -> DIGIT FIVE\n-    u'6'        #  0x36 -> DIGIT SIX\n-    u'7'        #  0x37 -> DIGIT SEVEN\n-    u'8'        #  0x38 -> DIGIT EIGHT\n-    u'9'        #  0x39 -> DIGIT NINE\n-    u':'        #  0x3A -> COLON\n-    u';'        #  0x3B -> SEMICOLON\n-    u'<'        #  0x3C -> LESS-THAN SIGN\n-    u'='        #  0x3D -> EQUALS SIGN\n-    u'>'        #  0x3E -> GREATER-THAN SIGN\n-    u'?'        #  0x3F -> QUESTION MARK\n-    u'@'        #  0x40 -> COMMERCIAL AT\n-    u'A'        #  0x41 -> LATIN CAPITAL LETTER A\n-    u'B'        #  0x42 -> LATIN CAPITAL LETTER B\n-    u'C'        #  0x43 -> LATIN CAPITAL LETTER C\n-    u'D'        #  0x44 -> LATIN CAPITAL LETTER D\n-    u'E'        #  0x45 -> LATIN CAPITAL LETTER E\n-    u'F'        #  0x46 -> LATIN CAPITAL LETTER F\n-    u'G'        #  0x47 -> LATIN CAPITAL LETTER G\n-    u'H'        #  0x48 -> LATIN CAPITAL LETTER H\n-    u'I'        #  0x49 -> LATIN CAPITAL LETTER I\n-    u'J'        #  0x4A -> LATIN CAPITAL LETTER J\n-    u'K'        #  0x4B -> LATIN CAPITAL LETTER K\n-    u'L'        #  0x4C -> LATIN CAPITAL LETTER L\n-    u'M'        #  0x4D -> LATIN CAPITAL LETTER M\n-    u'N'        #  0x4E -> LATIN CAPITAL LETTER N\n-    u'O'        #  0x4F -> LATIN CAPITAL LETTER O\n-    u'P'        #  0x50 -> LATIN CAPITAL LETTER P\n-    u'Q'        #  0x51 -> LATIN CAPITAL LETTER Q\n-    u'R'        #  0x52 -> LATIN CAPITAL LETTER R\n-    u'S'        #  0x53 -> LATIN CAPITAL LETTER S\n-    u'T'        #  0x54 -> LATIN CAPITAL LETTER T\n-    u'U'        #  0x55 -> LATIN CAPITAL LETTER U\n-    u'V'        #  0x56 -> LATIN CAPITAL LETTER V\n-    u'W'        #  0x57 -> LATIN CAPITAL LETTER W\n-    u'X'        #  0x58 -> LATIN CAPITAL LETTER X\n-    u'Y'        #  0x59 -> LATIN CAPITAL LETTER Y\n-    u'Z'        #  0x5A -> LATIN CAPITAL LETTER Z\n-    u'['        #  0x5B -> LEFT SQUARE BRACKET\n-    u'\\\\'       #  0x5C -> REVERSE SOLIDUS\n-    u']'        #  0x5D -> RIGHT SQUARE BRACKET\n-    u'^'        #  0x5E -> CIRCUMFLEX ACCENT\n-    u'_'        #  0x5F -> LOW LINE\n-    u'`'        #  0x60 -> GRAVE ACCENT\n-    u'a'        #  0x61 -> LATIN SMALL LETTER A\n-    u'b'        #  0x62 -> LATIN SMALL LETTER B\n-    u'c'        #  0x63 -> LATIN SMALL LETTER C\n-    u'd'        #  0x64 -> LATIN SMALL LETTER D\n-    u'e'        #  0x65 -> LATIN SMALL LETTER E\n-    u'f'        #  0x66 -> LATIN SMALL LETTER F\n-    u'g'        #  0x67 -> LATIN SMALL LETTER G\n-    u'h'        #  0x68 -> LATIN SMALL LETTER H\n-    u'i'        #  0x69 -> LATIN SMALL LETTER I\n-    u'j'        #  0x6A -> LATIN SMALL LETTER J\n-    u'k'        #  0x6B -> LATIN SMALL LETTER K\n-    u'l'        #  0x6C -> LATIN SMALL LETTER L\n-    u'm'        #  0x6D -> LATIN SMALL LETTER M\n-    u'n'        #  0x6E -> LATIN SMALL LETTER N\n-    u'o'        #  0x6F -> LATIN SMALL LETTER O\n-    u'p'        #  0x70 -> LATIN SMALL LETTER P\n-    u'q'        #  0x71 -> LATIN SMALL LETTER Q\n-    u'r'        #  0x72 -> LATIN SMALL LETTER R\n-    u's'        #  0x73 -> LATIN SMALL LETTER S\n-    u't'        #  0x74 -> LATIN SMALL LETTER T\n-    u'u'        #  0x75 -> LATIN SMALL LETTER U\n-    u'v'        #  0x76 -> LATIN SMALL LETTER V\n-    u'w'        #  0x77 -> LATIN SMALL LETTER W\n-    u'x'        #  0x78 -> LATIN SMALL LETTER X\n-    u'y'        #  0x79 -> LATIN SMALL LETTER Y\n-    u'z'        #  0x7A -> LATIN SMALL LETTER Z\n-    u'{'        #  0x7B -> LEFT CURLY BRACKET\n-    u'|'        #  0x7C -> VERTICAL LINE\n-    u'}'        #  0x7D -> RIGHT CURLY BRACKET\n-    u'~'        #  0x7E -> TILDE\n-    u'\\x7f'     #  0x7F -> CONTROL CHARACTER\n-    u'\\xc4'     #  0x80 -> LATIN CAPITAL LETTER A WITH DIAERESIS\n-    u'\\xc5'     #  0x81 -> LATIN CAPITAL LETTER A WITH RING ABOVE\n-    u'\\xc7'     #  0x82 -> LATIN CAPITAL LETTER C WITH CEDILLA\n-    u'\\xc9'     #  0x83 -> LATIN CAPITAL LETTER E WITH ACUTE\n-    u'\\xd1'     #  0x84 -> LATIN CAPITAL LETTER N WITH TILDE\n-    u'\\xd6'     #  0x85 -> LATIN CAPITAL LETTER O WITH DIAERESIS\n-    u'\\xdc'     #  0x86 -> LATIN CAPITAL LETTER U WITH DIAERESIS\n-    u'\\xe1'     #  0x87 -> LATIN SMALL LETTER A WITH ACUTE\n-    u'\\xe0'     #  0x88 -> LATIN SMALL LETTER A WITH GRAVE\n-    u'\\xe2'     #  0x89 -> LATIN SMALL LETTER A WITH CIRCUMFLEX\n-    u'\\xe4'     #  0x8A -> LATIN SMALL LETTER A WITH DIAERESIS\n-    u'\\xe3'     #  0x8B -> LATIN SMALL LETTER A WITH TILDE\n-    u'\\xe5'     #  0x8C -> LATIN SMALL LETTER A WITH RING ABOVE\n-    u'\\xe7'     #  0x8D -> LATIN SMALL LETTER C WITH CEDILLA\n-    u'\\xe9'     #  0x8E -> LATIN SMALL LETTER E WITH ACUTE\n-    u'\\xe8'     #  0x8F -> LATIN SMALL LETTER E WITH GRAVE\n-    u'\\xea'     #  0x90 -> LATIN SMALL LETTER E WITH CIRCUMFLEX\n-    u'\\xeb'     #  0x91 -> LATIN SMALL LETTER E WITH DIAERESIS\n-    u'\\xed'     #  0x92 -> LATIN SMALL LETTER I WITH ACUTE\n-    u'\\xec'     #  0x93 -> LATIN SMALL LETTER I WITH GRAVE\n-    u'\\xee'     #  0x94 -> LATIN SMALL LETTER I WITH CIRCUMFLEX\n-    u'\\xef'     #  0x95 -> LATIN SMALL LETTER I WITH DIAERESIS\n-    u'\\xf1'     #  0x96 -> LATIN SMALL LETTER N WITH TILDE\n-    u'\\xf3'     #  0x97 -> LATIN SMALL LETTER O WITH ACUTE\n-    u'\\xf2'     #  0x98 -> LATIN SMALL LETTER O WITH GRAVE\n-    u'\\xf4'     #  0x99 -> LATIN SMALL LETTER O WITH CIRCUMFLEX\n-    u'\\xf6'     #  0x9A -> LATIN SMALL LETTER O WITH DIAERESIS\n-    u'\\xf5'     #  0x9B -> LATIN SMALL LETTER O WITH TILDE\n-    u'\\xfa'     #  0x9C -> LATIN SMALL LETTER U WITH ACUTE\n-    u'\\xf9'     #  0x9D -> LATIN SMALL LETTER U WITH GRAVE\n-    u'\\xfb'     #  0x9E -> LATIN SMALL LETTER U WITH CIRCUMFLEX\n-    u'\\xfc'     #  0x9F -> LATIN SMALL LETTER U WITH DIAERESIS\n-    u'\\u2020'   #  0xA0 -> DAGGER\n-    u'\\xb0'     #  0xA1 -> DEGREE SIGN\n-    u'\\xa2'     #  0xA2 -> CENT SIGN\n-    u'\\xa3'     #  0xA3 -> POUND SIGN\n-    u'\\xa7'     #  0xA4 -> SECTION SIGN\n-    u'\\u2022'   #  0xA5 -> BULLET\n-    u'\\xb6'     #  0xA6 -> PILCROW SIGN\n-    u'\\xdf'     #  0xA7 -> LATIN SMALL LETTER SHARP S\n-    u'\\xae'     #  0xA8 -> REGISTERED SIGN\n-    u'\\xa9'     #  0xA9 -> COPYRIGHT SIGN\n-    u'\\u2122'   #  0xAA -> TRADE MARK SIGN\n-    u'\\xb4'     #  0xAB -> ACUTE ACCENT\n-    u'\\xa8'     #  0xAC -> DIAERESIS\n-    u'\\u2260'   #  0xAD -> NOT EQUAL TO\n-    u'\\xc6'     #  0xAE -> LATIN CAPITAL LETTER AE\n-    u'\\xd8'     #  0xAF -> LATIN CAPITAL LETTER O WITH STROKE\n-    u'\\u221e'   #  0xB0 -> INFINITY\n-    u'\\xb1'     #  0xB1 -> PLUS-MINUS SIGN\n-    u'\\u2264'   #  0xB2 -> LESS-THAN OR EQUAL TO\n-    u'\\u2265'   #  0xB3 -> GREATER-THAN OR EQUAL TO\n-    u'\\xa5'     #  0xB4 -> YEN SIGN\n-    u'\\xb5'     #  0xB5 -> MICRO SIGN\n-    u'\\u2202'   #  0xB6 -> PARTIAL DIFFERENTIAL\n-    u'\\u2211'   #  0xB7 -> N-ARY SUMMATION\n-    u'\\u220f'   #  0xB8 -> N-ARY PRODUCT\n-    u'\\u03c0'   #  0xB9 -> GREEK SMALL LETTER PI\n-    u'\\u222b'   #  0xBA -> INTEGRAL\n-    u'\\xaa'     #  0xBB -> FEMININE ORDINAL INDICATOR\n-    u'\\xba'     #  0xBC -> MASCULINE ORDINAL INDICATOR\n-    u'\\u03a9'   #  0xBD -> GREEK CAPITAL LETTER OMEGA\n-    u'\\xe6'     #  0xBE -> LATIN SMALL LETTER AE\n-    u'\\xf8'     #  0xBF -> LATIN SMALL LETTER O WITH STROKE\n-    u'\\xbf'     #  0xC0 -> INVERTED QUESTION MARK\n-    u'\\xa1'     #  0xC1 -> INVERTED EXCLAMATION MARK\n-    u'\\xac'     #  0xC2 -> NOT SIGN\n-    u'\\u221a'   #  0xC3 -> SQUARE ROOT\n-    u'\\u0192'   #  0xC4 -> LATIN SMALL LETTER F WITH HOOK\n-    u'\\u2248'   #  0xC5 -> ALMOST EQUAL TO\n-    u'\\u2206'   #  0xC6 -> INCREMENT\n-    u'\\xab'     #  0xC7 -> LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n-    u'\\xbb'     #  0xC8 -> RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n-    u'\\u2026'   #  0xC9 -> HORIZONTAL ELLIPSIS\n-    u'\\xa0'     #  0xCA -> NO-BREAK SPACE\n-    u'\\xc0'     #  0xCB -> LATIN CAPITAL LETTER A WITH GRAVE\n-    u'\\xc3'     #  0xCC -> LATIN CAPITAL LETTER A WITH TILDE\n-    u'\\xd5'     #  0xCD -> LATIN CAPITAL LETTER O WITH TILDE\n-    u'\\u0152'   #  0xCE -> LATIN CAPITAL LIGATURE OE\n-    u'\\u0153'   #  0xCF -> LATIN SMALL LIGATURE OE\n-    u'\\u2013'   #  0xD0 -> EN DASH\n-    u'\\u2014'   #  0xD1 -> EM DASH\n-    u'\\u201c'   #  0xD2 -> LEFT DOUBLE QUOTATION MARK\n-    u'\\u201d'   #  0xD3 -> RIGHT DOUBLE QUOTATION MARK\n-    u'\\u2018'   #  0xD4 -> LEFT SINGLE QUOTATION MARK\n-    u'\\u2019'   #  0xD5 -> RIGHT SINGLE QUOTATION MARK\n-    u'\\xf7'     #  0xD6 -> DIVISION SIGN\n-    u'\\u25ca'   #  0xD7 -> LOZENGE\n-    u'\\xff'     #  0xD8 -> LATIN SMALL LETTER Y WITH DIAERESIS\n-    u'\\u0178'   #  0xD9 -> LATIN CAPITAL LETTER Y WITH DIAERESIS\n-    u'\\u2044'   #  0xDA -> FRACTION SLASH\n-    u'\\u20ac'   #  0xDB -> EURO SIGN\n-    u'\\u2039'   #  0xDC -> SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n-    u'\\u203a'   #  0xDD -> SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n-    u'\\ufb01'   #  0xDE -> LATIN SMALL LIGATURE FI\n-    u'\\ufb02'   #  0xDF -> LATIN SMALL LIGATURE FL\n-    u'\\u2021'   #  0xE0 -> DOUBLE DAGGER\n-    u'\\xb7'     #  0xE1 -> MIDDLE DOT\n-    u'\\u201a'   #  0xE2 -> SINGLE LOW-9 QUOTATION MARK\n-    u'\\u201e'   #  0xE3 -> DOUBLE LOW-9 QUOTATION MARK\n-    u'\\u2030'   #  0xE4 -> PER MILLE SIGN\n-    u'\\xc2'     #  0xE5 -> LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n-    u'\\xca'     #  0xE6 -> LATIN CAPITAL LETTER E WITH CIRCUMFLEX\n-    u'\\xc1'     #  0xE7 -> LATIN CAPITAL LETTER A WITH ACUTE\n-    u'\\xcb'     #  0xE8 -> LATIN CAPITAL LETTER E WITH DIAERESIS\n-    u'\\xc8'     #  0xE9 -> LATIN CAPITAL LETTER E WITH GRAVE\n-    u'\\xcd'     #  0xEA -> LATIN CAPITAL LETTER I WITH ACUTE\n-    u'\\xce'     #  0xEB -> LATIN CAPITAL LETTER I WITH CIRCUMFLEX\n-    u'\\xcf'     #  0xEC -> LATIN CAPITAL LETTER I WITH DIAERESIS\n-    u'\\xcc'     #  0xED -> LATIN CAPITAL LETTER I WITH GRAVE\n-    u'\\xd3'     #  0xEE -> LATIN CAPITAL LETTER O WITH ACUTE\n-    u'\\xd4'     #  0xEF -> LATIN CAPITAL LETTER O WITH CIRCUMFLEX\n-    u'\\uf8ff'   #  0xF0 -> Apple logo\n-    u'\\xd2'     #  0xF1 -> LATIN CAPITAL LETTER O WITH GRAVE\n-    u'\\xda'     #  0xF2 -> LATIN CAPITAL LETTER U WITH ACUTE\n-    u'\\xdb'     #  0xF3 -> LATIN CAPITAL LETTER U WITH CIRCUMFLEX\n-    u'\\xd9'     #  0xF4 -> LATIN CAPITAL LETTER U WITH GRAVE\n-    u'\\u0131'   #  0xF5 -> LATIN SMALL LETTER DOTLESS I\n-    u'\\u02c6'   #  0xF6 -> MODIFIER LETTER CIRCUMFLEX ACCENT\n-    u'\\u02dc'   #  0xF7 -> SMALL TILDE\n-    u'\\xaf'     #  0xF8 -> MACRON\n-    u'\\u02d8'   #  0xF9 -> BREVE\n-    u'\\u02d9'   #  0xFA -> DOT ABOVE\n-    u'\\u02da'   #  0xFB -> RING ABOVE\n-    u'\\xb8'     #  0xFC -> CEDILLA\n-    u'\\u02dd'   #  0xFD -> DOUBLE ACUTE ACCENT\n-    u'\\u02db'   #  0xFE -> OGONEK\n-    u'\\u02c7'   #  0xFF -> CARON\n-)\n-\n-### Encoding table\n-encoding_table=codecs.charmap_build(decoding_table)\n-\n-### Registering the codec\n-def x_mac_roman_search_function(name):\n-    if name == 'x-mac-roman':\n-       return getregentry()\n-\n-class XMacRomanCodec(object):\n-    def __init__(self):\n-        codecs.register(x_mac_roman_search_function)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#743d3261841b221216482250a16114018c768cf6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 102 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n from scrapy import log\n from scrapy.utils.url import urljoin_rfc\n from scrapy.utils.response import get_meta_refresh\n+from scrapy.core.exceptions import IgnoreRequest\n from scrapy.conf import settings\n \n \n@@ -49,5 +50,6 @@ class RedirectMiddleware(object):\n         else:\n             log.msg(\"Discarding %s: max redirections reached\" % request,\n                     domain=spider.domain_name, level=log.DEBUG)\n+            raise IgnoreRequest\n \n \n\n@@ -2,6 +2,7 @@ import unittest\n \n from scrapy.contrib.downloadermiddleware.redirect import RedirectMiddleware\n from scrapy.spider import spiders\n+from scrapy.core.exceptions import IgnoreRequest\n from scrapy.http import Request, Response, Headers\n \n class RedirectMiddlewareTest(unittest.TestCase):\n@@ -84,9 +85,7 @@ class RedirectMiddlewareTest(unittest.TestCase):\n         assert isinstance(req, Request)\n         assert 'redirect_times' in req.meta\n         self.assertEqual(req.meta['redirect_times'], 1)\n-\n-        req = self.mw.process_response(req, rsp, self.spider)\n-        self.assertEqual(req, None)\n+        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)\n \n     def test_ttl(self):\n         self.mw.max_redirect_times = 100\n@@ -95,8 +94,7 @@ class RedirectMiddlewareTest(unittest.TestCase):\n \n         req = self.mw.process_response(req, rsp, self.spider)\n         assert isinstance(req, Request)\n-        req = self.mw.process_response(req, rsp, self.spider)\n-        self.assertEqual(req, None)\n+        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)\n \n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5fac909670a1969147e57768a87b9a3584c86aa4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 18/11 | Churn Δ: 15 | Churn Cumulative: 15 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,6 +3,9 @@ from twisted.trial import unittest\n class SerializationTest(unittest.TestCase):\n \n     def setUp(self):\n+        try:\n+            import json\n+        except ImportError:\n             try:\n                 import simplejson\n             except ImportError, e:\n\n@@ -11,9 +11,13 @@ import decimal\n import cPickle as pickle\n import pprint\n \n-import simplejson\n+try:\n+    import json\n+except ImportError:\n+    import simplejson as json\n \n-class ScrapyJSONEncoder(simplejson.JSONEncoder):\n+\n+class ScrapyJSONEncoder(json.JSONEncoder):\n     \"\"\"\n     JSONEncoder subclass that knows how to encode date/time and decimal types.\n     \"\"\"\n@@ -34,13 +38,13 @@ class ScrapyJSONEncoder(simplejson.JSONEncoder):\n             return super(ScrapyJSONEncoder, self).default(o)\n \n serialize_funcs = {\n-    'json': lambda obj: simplejson.dumps(obj, cls=ScrapyJSONEncoder),\n+    'json': lambda obj: json.dumps(obj, cls=ScrapyJSONEncoder),\n     'pprint': lambda obj: pprint.pformat(obj),\n     'pickle': lambda obj: pickle.dumps(obj),\n }\n \n unserialize_funcs = {\n-    'json': lambda text: simplejson.loads(text),\n+    'json': lambda text: json.loads(text),\n     'pprint': lambda text: eval(text),\n     'pickle': lambda text: pickle.loads(text),\n }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#cd8eed77c536b34215e727ea2ae05f02b8b24665", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 115 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -37,6 +37,14 @@ class StatsCollector(object):\n         d = self._stats[domain]\n         d[key] = d.setdefault(key, start) + count\n \n+    def max_value(self, key, value, default, domain=None):\n+        d = self._stats[domain]\n+        d[key] = max(d.setdefault(key, default), value)\n+\n+    def min_value(self, key, value, default, domain=None):\n+        d = self._stats[domain]\n+        d[key] = min(d.setdefault(key, default), value)\n+\n     def clear_stats(self, domain=None):\n         self._stats[domain].clear()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#02cb1e3432f2fa59243a90c0fdb64cc21babe657", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 358 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -84,6 +84,8 @@ class Scraper(object):\n     def enqueue_scrape(self, response, request, spider):\n         site = self.sites[spider.domain_name]\n         dfd = site.add_response_request(response, request)\n+        stats.max_value('scraper/max_active_size', \\\n+                site.active_size, 0, domain=spider.domain_name),\n         def finish_scraping(_):\n             site.finish_response(response)\n             self._scrape_next(spider, site)\n@@ -158,6 +160,8 @@ class Scraper(object):\n             signals.send_catch_log(signal=signals.item_scraped, sender=self.__class__, \\\n                 item=output, spider=spider, response=response)\n             self.sites[domain].itemproc_size += 1\n+            stats.max_value('scraper/max_itemproc_size', \\\n+                    self.sites[domain].itemproc_size, 0, domain=domain)\n             dfd = self.itemproc.process_item(output, spider)\n             dfd.addBoth(self._itemproc_finished, output, spider)\n             return dfd\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8f16e7f9fa17f987f8ac36c0da9a2bd47de45e66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 493 | Contributors (this commit): 3 | Commits (past 90d): 19 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -85,7 +85,7 @@ class Scraper(object):\n         site = self.sites[spider.domain_name]\n         dfd = site.add_response_request(response, request)\n         stats.max_value('scraper/max_active_size', \\\n-                site.active_size, 0, domain=spider.domain_name),\n+                site.active_size, domain=spider.domain_name),\n         def finish_scraping(_):\n             site.finish_response(response)\n             self._scrape_next(spider, site)\n@@ -161,7 +161,7 @@ class Scraper(object):\n                 item=output, spider=spider, response=response)\n             self.sites[domain].itemproc_size += 1\n             stats.max_value('scraper/max_itemproc_size', \\\n-                    self.sites[domain].itemproc_size, 0, domain=domain)\n+                    self.sites[domain].itemproc_size, domain=domain)\n             dfd = self.itemproc.process_item(output, spider)\n             dfd.addBoth(self._itemproc_finished, output, spider)\n             return dfd\n\n@@ -37,13 +37,13 @@ class StatsCollector(object):\n         d = self._stats[domain]\n         d[key] = d.setdefault(key, start) + count\n \n-    def max_value(self, key, value, default, domain=None):\n+    def max_value(self, key, value, domain=None):\n         d = self._stats[domain]\n-        d[key] = max(d.setdefault(key, default), value)\n+        d[key] = max(d.setdefault(key, value), value)\n \n-    def min_value(self, key, value, default, domain=None):\n+    def min_value(self, key, value, domain=None):\n         d = self._stats[domain]\n-        d[key] = min(d.setdefault(key, default), value)\n+        d[key] = min(d.setdefault(key, value), value)\n \n     def clear_stats(self, domain=None):\n         self._stats[domain].clear()\n@@ -95,3 +95,11 @@ class DummyStatsCollector(StatsCollector):\n \n     def inc_value(self, key, count=1, start=0, domain=None):\n         pass\n+\n+    def max_value(self, key, value, domain=None):\n+        pass\n+\n+    def min_value(self, key, value, domain=None):\n+        pass\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4dbeaf75e282314709dea70838d645b6ccef5ed6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 45 | Files Changed: 2 | Hunks: 9 | Methods Changed: 14 | Complexity Δ (Sum/Max): 25/23 | Churn Δ: 68 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,25 +7,12 @@ import pprint\n from cPickle import Pickler\n from xml.sax.saxutils import XMLGenerator\n \n-from scrapy.newitem import fields\n \n __all__ = ['BaseItemExporter', 'PprintItemExporter', 'PickleItemExporter', \\\n     'CsvItemExporter', 'XmlItemExporter']\n \n-class BaseItemExporter(object):\n \n-    def __init__(self):\n-        self.field_serializers = {\n-            fields.TextField: self._serialize_text_field,\n-            fields.IntegerField: self._serialize_integer_field,\n-            fields.DecimalField: self._serialize_decimal_field,\n-            fields.FloatField: self._serialize_float_field,\n-            fields.BooleanField: self._serialize_boolean_field,\n-            fields.DateTimeField: self._serialize_datetime_field,\n-            fields.DateField: self._serialize_date_field,\n-            fields.TimeField: self._serialize_time_field,\n-            fields.ListField: self._serialize_list_field,\n-         }\n+class BaseItemExporter(object):\n \n     def export(self, item):\n         raise NotImplementedError\n@@ -34,41 +21,18 @@ class BaseItemExporter(object):\n         pass\n \n     def _serialize_field(self, field, name, value):\n-        try:\n-            fieldexp = self.field_serializers[field.__class__]\n-            return fieldexp(field, name, value)\n-        except KeyError:\n-            raise TypeError(\"%s doesn't know how to export field type: %s\" % \\\n-                self.__class__.__name__, field.__class__.__name__)\n+        if hasattr(self, 'serialize_%s' % name):\n+            serializer = getattr('serialize_%s' % name)\n+        elif hasattr(field, 'serializer'):\n+            serializer = field.serializer\n+        else:\n+            serializer = _default_serializer(field, name, value)\n \n-    def _serialize_text_field(self, field, name, value):\n-        return value.encode('utf-8')\n+        return serializer(field, name, value)\n \n-    def _serialize_integer_field(self, field, name, value):\n+    def _default_serializer(field, name, value):\n         return str(value)\n \n-    def _serialize_decimal_field(self, field, name, value):\n-        return str(value)\n-\n-    def _serialize_float_field(self, field, name, value):\n-        return str(value)\n-\n-    def _serialize_boolean_field(self, field, name, value):\n-        return '1' if value else '0'\n-\n-    def _serialize_datetime_field(self, field, name, value):\n-        return str(value)\n-\n-    def _serialize_date_field(self, field, name, value):\n-        return str(value)\n-\n-    def _serialize_time_field(self, field, name, value):\n-        return str(value)\n-\n-    def _serialize_list_field(self, field, name, value):\n-        item_field = field._field # TODO: should this attribute be public?\n-        return \" \".join([self._serialize_field(item_field, name, v) for v in value])\n-\n \n class PprintItemExporter(BaseItemExporter):\n \n@@ -147,3 +111,4 @@ class XmlItemExporter(BaseItemExporter):\n         self.xg.startElement(name, {})\n         self.xg.characters(self._serialize_field(field, name, value))\n         self.xg.endElement(name)\n+\n\n@@ -0,0 +1,13 @@\n+from scrapy.newitem.exporters import BaseItemExporter\n+from scrapy.utils.serialization import serialize\n+\n+\n+class JSONItemExporter(BaseItemExporter):\n+\n+    def __init__(self, file):\n+        super(BaseItemExporter, self).__init__()\n+        self.file = file\n+\n+    def export(self, item):\n+        self.file.write(serialize(dict(item), 'json') + '\\n')\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bc4ec80db7e34fc0134cc3fb5a8b75a76c242193", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 48 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 90 | Churn Cumulative: 101 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,55 +1,49 @@\n-from unittest import TestCase, main\n-from scrapy.conf import settings\n+import unittest \n+\n from scrapy.stats.collector import StatsCollector, DummyStatsCollector\n \n-class StatsTest(TestCase):\n-    def test_stats(self):\n-        # TODO: restore stats tests for new stats collector\n-        \"\"\"\n-        stats = DummyStatsCollector()\n-        self.assertEqual(stats, {})\n-        self.assertEqual(stats.get_value('anything'), None)\n-        self.assertEqual(stats.getpath('anything', 'default'), 'default')\n-        stats.setpath('test', 'value')\n-        self.assertEqual(stats, {})\n+class StatsCollectorTest(unittest.TestCase):\n \n+    def test_collector(self):\n         stats = StatsCollector()\n-        self.assertEqual(stats, {})\n-        self.assertEqual(stats.getpath('anything'), None)\n-        self.assertEqual(stats.getpath('anything', 'default'), 'default')\n-        stats.setpath('test', 'value')\n-        self.assertEqual(stats, {'test': 'value'})\n-        stats.setpath('test2', 23)\n-        self.assertEqual(stats, {'test': 'value', 'test2': 23})\n-        stats.setpath('one/two', 'val2')\n-        self.assertEqual(stats, {'test': 'value', 'test2': 23, 'one': {'two': 'val2'}})\n-        self.assertEqual(stats.getpath('one/two'), 'val2')\n-        self.assertEqual(stats.getpath('one/three'), None)\n-        self.assertEqual(stats.getpath('one/three', 'four'), 'four')\n-        self.assertEqual(stats.getpath('one'), {'two': 'val2'})\n+        self.assertEqual(stats.get_stats(), {})\n+        self.assertEqual(stats.get_value('anything'), None)\n+        self.assertEqual(stats.get_value('anything', 'default'), 'default')\n+        stats.set_value('test', 'value')\n+        self.assertEqual(stats.get_stats(), {'test': 'value'})\n+        stats.set_value('test2', 23)\n+        self.assertEqual(stats.get_stats(), {'test': 'value', 'test2': 23})\n+        self.assertEqual(stats.get_value('test2'), 23)\n+        stats.inc_value('test2')\n+        self.assertEqual(stats.get_value('test2'), 24)\n+        stats.inc_value('test2', 6)\n+        self.assertEqual(stats.get_value('test2'), 30)\n+        stats.max_value('test2', 6)\n+        self.assertEqual(stats.get_value('test2'), 30)\n+        stats.max_value('test2', 40)\n+        self.assertEqual(stats.get_value('test2'), 40)\n+        stats.max_value('test3', 1)\n+        self.assertEqual(stats.get_value('test3'), 1)\n+        stats.min_value('test2', 60)\n+        self.assertEqual(stats.get_value('test2'), 40)\n+        stats.min_value('test2', 35)\n+        self.assertEqual(stats.get_value('test2'), 35)\n+        stats.min_value('test4', 7)\n+        self.assertEqual(stats.get_value('test4'), 7)\n \n-        # nodes must contain either data or other nodes, but not both!\n-        self.assertRaises(TypeError, stats.setpath, 'one/two/three', 22)\n-\n-        stats.delpath('test2')\n-        self.assertEqual(stats, {'test': 'value', 'one': {'two': 'val2'}})\n-        stats.delpath('one/two')\n-        self.assertEqual(stats, {'test': 'value', 'one': {}})\n-        stats.delpath('one')\n-        self.assertEqual(stats, {'test': 'value'})\n-\n-        stats.setpath('one/other/three', 20)\n-        self.assertEqual(stats.getpath('one/other/three'), 20)\n-        stats.incpath('one/other/three')\n-        self.assertEqual(stats.getpath('one/other/three'), 21)\n-        stats.incpath('one/other/three', 4)\n-        self.assertEqual(stats.getpath('one/other/three'), 25)\n-\n-        stats.incpath('one/newnode', 1)\n-        self.assertEqual(stats.getpath('one/newnode'), 1)\n-        stats.incpath('one/newnode', -1)\n-        self.assertEqual(stats.getpath('one/newnode'), 0)\n-        \"\"\"\n+    def test_dummy_collector(self):\n+        stats = DummyStatsCollector()\n+        self.assertEqual(stats.get_stats(), {})\n+        self.assertEqual(stats.get_value('anything'), None)\n+        self.assertEqual(stats.get_value('anything', 'default'), 'default')\n+        stats.set_value('test', 'value')\n+        stats.inc_value('v1')\n+        stats.max_value('v2', 100)\n+        stats.min_value('v3', 100)\n+        stats.open_domain('a')\n+        stats.set_value('test', 'value', domain='a')\n+        self.assertEqual(stats.get_stats(), {})\n+        self.assertEqual(stats.get_stats('a'), {})\n \n if __name__ == \"__main__\":\n-    main()\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c83fb1c7d123bc510f11ed2f75d424f2b5c8a446", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 136 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 8 | Methods Changed: 12 | Complexity Δ (Sum/Max): 11/13 | Churn Δ: 146 | Churn Cumulative: 201 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,15 +22,15 @@ class BaseItemExporter(object):\n \n     def _serialize_field(self, field, name, value):\n         if hasattr(self, 'serialize_%s' % name):\n-            serializer = getattr('serialize_%s' % name)\n+            serializer = getattr(self, 'serialize_%s' % name)\n         elif hasattr(field, 'serializer'):\n             serializer = field.serializer\n         else:\n-            serializer = _default_serializer(field, name, value)\n+            serializer = self._default_serializer\n \n         return serializer(field, name, value)\n \n-    def _default_serializer(field, name, value):\n+    def _default_serializer(self, field, name, value):\n         return str(value)\n \n \n@@ -67,8 +67,8 @@ class CsvItemExporter(BaseItemExporter):\n         values = []\n         for field in self.fields_to_export:\n             if field in item:\n-                values.append(self._serialize_field(item.fields[field]), field, \\\n-                    item[field])\n+                values.append(self._serialize_field(item.fields[field], field,\n+                                                    item[field]))\n             else:\n                 values.append('')\n         self.csv_writer.writerow(values)\n@@ -92,9 +92,7 @@ class XmlItemExporter(BaseItemExporter):\n         self.xg.startElement(self.item_element, {})\n         for field in self.fields_to_export:\n             if field in item:\n-                self.xg.startElement(self.item_element, {})\n                 self._export_xml_field(item.fields[field], field, item[field])\n-                self.xg.endElement(self.item_element)\n             elif self.include_empty_elements:\n                 self.xg.startElement(self.item_element, {})\n                 self.xg.endElement()\n@@ -105,9 +103,6 @@ class XmlItemExporter(BaseItemExporter):\n         self.xg.endDocument()\n \n     def _export_xml_field(self, field, name, value):\n-        if isinstance(field, fields.ListField):\n-            for v in value:\n-                self._export_xml_field(field._field, 'value', v)\n         self.xg.startElement(name, {})\n         self.xg.characters(self._serialize_field(field, name, value))\n         self.xg.endElement(name)\n\n@@ -0,0 +1,131 @@\n+from cPickle import Pickler\n+from cStringIO import StringIO\n+import pprint\n+from twisted.trial import unittest\n+\n+from scrapy.newitem import Item, Field\n+from scrapy.newitem.exporters import *\n+\n+class TestItem(Item):\n+    name = Field()\n+    age = Field()\n+\n+\n+class BaseItemExporterTest(unittest.TestCase):\n+    \n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        ie = BaseItemExporter()\n+\n+        self.assertRaises(NotImplementedError, ie.export, i)\n+\n+    def test_default_serializer(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        ie = BaseItemExporter()\n+\n+        self.assertEqual(ie._serialize_field(i.fields['name'], 'name', i['name']), 'John')\n+        self.assertEqual( ie._serialize_field(i.fields['age'], 'age', i['age']), '22')\n+\n+    def test_exporter_custom_serializer(self):\n+        class CustomItemExporter(BaseItemExporter):\n+            def serialize_age(self, field, name, value):\n+                return str(value + 1)\n+\n+        i = TestItem(name=u'John', age=22)\n+\n+        ie = CustomItemExporter()\n+\n+        self.assertEqual(ie._serialize_field(i.fields['name'], 'name', i['name']), 'John')\n+        self.assertEqual(ie._serialize_field(i.fields['age'], 'age', i['age']), '23')\n+\n+    def test_field_custom_serializer(self):\n+        class CustomField(Field):\n+            def serializer(self, field, name, value):\n+                return str(value + 2)\n+\n+        class CustomFieldItem(Item):\n+            name = Field()\n+            age = CustomField()\n+\n+        i = CustomFieldItem(name=u'John', age=22)\n+\n+        ie = BaseItemExporter()\n+\n+        self.assertEqual(ie._serialize_field(i.fields['name'], 'name', i['name']), 'John')\n+        self.assertEqual(ie._serialize_field(i.fields['age'], 'age', i['age']), '24')\n+\n+\n+class PprintItemExporterTest(unittest.TestCase):\n+\n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        output = StringIO()\n+        ie = PprintItemExporter(output)\n+        ie.export(i)\n+\n+        self.assertEqual(output.getvalue(), \"{'age': 22, 'name': u'John'}\\n\")\n+\n+\n+class PickleItemExporterTest(unittest.TestCase):\n+        \n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        output = StringIO()\n+        ie = PickleItemExporter(output)\n+        ie.export(i)\n+\n+        poutput = StringIO()\n+        p = Pickler(poutput)\n+        p.dump(dict(i))\n+        \n+        self.assertEqual(output.getvalue(), poutput.getvalue())\n+\n+\n+class CsvItemExporterTest(unittest.TestCase):\n+\n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        output = StringIO()\n+        ie = CsvItemExporter(output)\n+        ie.fields_to_export = i.fields.keys()\n+        ie.export(i)\n+\n+        self.assertEqual(output.getvalue(), 'age,name\\r\\n22,John\\r\\n')\n+\n+\n+class XmlItemExporterTest(unittest.TestCase):\n+\n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        output = StringIO()\n+        ie = XmlItemExporter(output)\n+        ie.fields_to_export = i.fields.keys()\n+        ie.export(i)\n+\n+        self.assertEqual(output.getvalue(), '<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\\n<items><item><age>22</age><name>John</name></item>')\n+\n+\n+class JSONItemExporterTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        try:\n+            from scrapy.newitem.exporters.jsonexporter import JSONItemExporter\n+            self.output = StringIO()\n+            self.ie = JSONItemExporter(self.output)\n+\n+        except ImportError, e:\n+            raise unittest.SkipTest(\"Json library not available\") \n+\n+    def test_export(self):\n+        i = TestItem(name=u'John', age=22)\n+\n+        self.ie.export(i)\n+\n+        self.assertEqual(self.output.getvalue(), '{\"age\": 22, \"name\": \"John\"}\\n')\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7cbbc3ffb050c18969943713336bb70e894bdf97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 438 | Lines Deleted: 433 | Files Changed: 8 | Hunks: 8 | Methods Changed: 94 | Complexity Δ (Sum/Max): -3/30 | Churn Δ: 871 | Churn Cumulative: 2066 | Contributors (this commit): 1 | Commits (past 90d): 36 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,93 @@\n+\"\"\"\n+Item Parser\n+\n+See documentation in docs/topics/itemparser.rst\n+\"\"\"\n+\n+from collections import defaultdict\n+\n+from scrapy.newitem import Item\n+from scrapy.xpath import HtmlXPathSelector\n+from scrapy.utils.misc import arg_to_iter\n+from .common import wrap_parser_context\n+from .parsers import Identity\n+\n+class ItemParser(object):\n+\n+    default_item_class = Item\n+    default_input_parser = Identity()\n+    default_output_parser = Identity()\n+\n+    def __init__(self, item=None, **context):\n+        if item is None:\n+            item = self.default_item_class()\n+        self.item = context['item'] = item\n+        self.context = context\n+        self._values = defaultdict(list)\n+\n+    def add_value(self, field_name, value):\n+        parsed_value = self._parse_input_value(field_name, value)\n+        self._values[field_name] += arg_to_iter(parsed_value)\n+\n+    def replace_value(self, field_name, value):\n+        parsed_value = self._parse_input_value(field_name, value)\n+        self._values[field_name] = arg_to_iter(parsed_value)\n+\n+    def populate_item(self):\n+        item = self.item\n+        for field_name in self._values:\n+            item[field_name] = self.get_output_value(field_name)\n+        return item\n+\n+    def get_output_value(self, field_name):\n+        parser = self.get_output_parser(field_name)\n+        parser = wrap_parser_context(parser, self.context)\n+        return parser(self._values[field_name])\n+\n+    def get_collected_values(self, field_name):\n+        return self._values[field_name]\n+\n+    def get_input_parser(self, field_name):\n+        parser = getattr(self, '%s_in' % field_name, None)\n+        if not parser:\n+            parser = self.item.fields[field_name].get('input_parser', \\\n+                self.default_input_parser)\n+        return parser\n+\n+    def get_output_parser(self, field_name):\n+        parser = getattr(self, '%s_out' % field_name, None)\n+        if not parser:\n+            parser = self.item.fields[field_name].get('output_parser', \\\n+                self.default_output_parser)\n+        return parser\n+\n+    def _parse_input_value(self, field_name, value):\n+        parser = self.get_input_parser(field_name)\n+        parser = wrap_parser_context(parser, self.context)\n+        return parser(value)\n+\n+\n+class XPathItemParser(ItemParser):\n+\n+    default_selector_class = HtmlXPathSelector\n+\n+    def __init__(self, item=None, selector=None, response=None, **context):\n+        if selector is None and response is None:\n+            raise RuntimeError(\"%s must be instantiated with a selector\" \\\n+                \"or response\" % self.__class__.__name__)\n+        if selector is None:\n+            selector = self.default_selector_class(response)\n+        self.selector = selector\n+        context.update(selector=selector, response=response)\n+        super(XPathItemParser, self).__init__(item, **context)\n+\n+    def add_xpath(self, field_name, xpath, re=None):\n+        self.add_value(field_name, self._get_values(field_name, xpath, re))\n+\n+    def replace_xpath(self, field_name, xpath, re=None):\n+        self.replace_value(field_name, self._get_values(field_name, xpath, re))\n+\n+    def _get_values(self, field_name, xpath, re):\n+        x = self.selector.x(xpath)\n+        return x.re(re) if re else x.extract()\n+\n\n@@ -0,0 +1,13 @@\n+\"\"\"Common functions used in Item Parsers code\"\"\"\n+\n+from functools import partial\n+from scrapy.utils.python import get_func_args\n+\n+def wrap_parser_context(function, context):\n+    \"\"\"Wrap functions that receive parser_context to contain those parser\n+    arguments pre-loaded and expose a interface that receives only one argument\n+    \"\"\"\n+    if 'parser_context' in get_func_args(function):\n+        return partial(function, parser_context=context)\n+    else:\n+        return function\n\n@@ -0,0 +1,52 @@\n+\"\"\"\n+This module provides some commonly used parser functions for Item Parsers.\n+\n+See documentation in docs/topics/itemparser.rst\n+\"\"\"\n+\n+from scrapy.utils.misc import arg_to_iter\n+from scrapy.utils.datatypes import MergeDict\n+from .common import wrap_parser_context\n+\n+class ApplyConcat(object):\n+\n+    def __init__(self, *functions, **default_parser_context):\n+        self.functions = functions\n+        self.default_parser_context = default_parser_context\n+        \n+    def __call__(self, value, parser_context=None):\n+        values = arg_to_iter(value)\n+        if parser_context:\n+            context = MergeDict(parser_context, self.default_parser_context)\n+        else:\n+            context = self.default_parser_context\n+        wrapped_funcs = [wrap_parser_context(f, context) for f in self.functions]\n+        for func in wrapped_funcs:\n+            next_values = []\n+            for v in values:\n+                next_values += arg_to_iter(func(v))\n+            values = next_values\n+        return list(values)\n+\n+\n+class TakeFirst(object):\n+\n+    def __call__(self, values):\n+        for value in values:\n+            if value:\n+                return value\n+\n+\n+class Identity(object):\n+\n+    def __call__(self, values):\n+        return values\n+\n+\n+class Join(object):\n+\n+    def __init__(self, separator=u' '):\n+        self.separator = separator\n+\n+    def __call__(self, values):\n+        return self.separator.join(values)\n\n@@ -1,89 +0,0 @@\n-from collections import defaultdict\n-\n-from scrapy.utils.datatypes import MergeDict\n-from scrapy.newitem import Item\n-from scrapy.newitem.loader.reducers import TakeFirst\n-from scrapy.newitem.loader.expanders import IdentityExpander\n-from scrapy.xpath import HtmlXPathSelector\n-\n-class Loader(object):\n-\n-    default_item_class = Item\n-    default_expander = IdentityExpander()\n-    default_reducer = TakeFirst()\n-\n-    def __init__(self, item=None, **loader_args):\n-        if item is None:\n-            item = self.default_item_class()\n-        self._item = loader_args['item'] = item\n-        self._loader_args = loader_args\n-        self._values = defaultdict(list)\n-\n-    def add_value(self, field_name, value, **new_loader_args):\n-        self._values[field_name] += self._expand_value(field_name, value, \\\n-            new_loader_args)\n-\n-    def replace_value(self, field_name, value, **new_loader_args):\n-        self._values[field_name] = self._expand_value(field_name, value, \\\n-            new_loader_args)\n-\n-    def get_item(self):\n-        item = self._item\n-        for field_name in self._values:\n-            item[field_name] = self.get_reduced_value(field_name)\n-        return item\n-\n-    def get_expanded_value(self, field_name):\n-        return self._values[field_name]\n-\n-    def get_reduced_value(self, field_name):\n-        reducer = self.get_reducer(field_name)\n-        return reducer(self._values[field_name])\n-\n-    def get_expander(self, field_name):\n-        expander = getattr(self, '%s_exp' % field_name, None)\n-        if not expander:\n-            expander = self._item.fields[field_name].get('expander', \\\n-                self.default_expander)\n-        return expander\n-\n-    def get_reducer(self, field_name):\n-        reducer = getattr(self, '%s_red' % field_name, None)\n-        if not reducer:\n-            reducer = self._item.fields[field_name].get('reducer', \\\n-                self.default_reducer)\n-        return reducer\n-\n-    def _expand_value(self, field_name, value, new_loader_args):\n-        loader_args = self._loader_args\n-        if new_loader_args:\n-            loader_args = MergeDict(new_loader_args, self._loader_args)\n-        expander = self.get_expander(field_name)\n-        return expander(value, loader_args=loader_args)\n-\n-\n-class XPathLoader(Loader):\n-\n-    default_selector_class = HtmlXPathSelector\n-\n-    def __init__(self, item=None, selector=None, response=None, **loader_args):\n-        if selector is None and response is None:\n-            raise RuntimeError(\"%s must be instantiated with a selector\" \\\n-                \"or response\" % self.__class__.__name__)\n-        if selector is None:\n-            selector = self.default_selector_class(response)\n-        self.selector = selector\n-        loader_args.update(selector=selector, response=response)\n-        super(XPathLoader, self).__init__(item, **loader_args)\n-\n-    def add_xpath(self, field_name, xpath, re=None, **new_loader_args):\n-        self.add_value(field_name, self._get_values(field_name, xpath, re),\n-            **new_loader_args)\n-\n-    def replace_xpath(self, field_name, xpath, re=None, **new_loader_args):\n-        self.replace_value(field_name, self._get_values(field_name, xpath, re), \\\n-            **new_loader_args)\n-\n-    def _get_values(self, field_name, xpath, re):\n-        x = self.selector.x(xpath)\n-        return x.re(re) if re else x.extract()\n\n@@ -1,45 +0,0 @@\n-\"\"\"\n-This module provides some commonly used Expanders.\n-\n-See documentation in docs/topics/newitem-loader.rst\n-\"\"\"\n-\n-from scrapy.utils.misc import arg_to_iter\n-from scrapy.utils.python import get_func_args\n-from scrapy.utils.datatypes import MergeDict\n-\n-class TreeExpander(object):\n-\n-    def __init__(self, *functions, **default_loader_args):\n-        self.default_loader_args = default_loader_args\n-        self.wrapped_funcs = []\n-        for func in functions:\n-            if 'loader_args' in get_func_args(func):\n-                wfunc = self.wrap_with_args(func)\n-            else:\n-                wfunc = self.wrap_no_args(func)\n-            self.wrapped_funcs.append(wfunc)\n-        \n-    def wrap_no_args(self, f):\n-        return lambda x, y: f(x)\n-\n-    def wrap_with_args(self, f):\n-        return lambda x, y: f(x, loader_args=y)\n-\n-    def __call__(self, value, loader_args=None):\n-        values = arg_to_iter(value)\n-        largs = self.default_loader_args\n-        if loader_args:\n-            largs = MergeDict(loader_args, self.default_loader_args)\n-        for func in self.wrapped_funcs:\n-            next_values = []\n-            for v in values:\n-                next_values += arg_to_iter(func(v, largs))\n-            values = next_values\n-        return list(values)\n-\n-\n-class IdentityExpander(object):\n-\n-    def __call__(self, values, loader_args):\n-        return arg_to_iter(values)\n\n@@ -1,27 +0,0 @@\n-\"\"\"\n-This module provides some commonly used Reducers.\n-\n-See documentation in docs/topics/newitem-loader.rst\n-\"\"\"\n-\n-class TakeFirst(object):\n-\n-    def __call__(self, values):\n-        for value in values:\n-            if value:\n-                return value\n-\n-\n-class Identity(object):\n-\n-    def __call__(self, values):\n-        return values\n-\n-\n-class Join(object):\n-\n-    def __init__(self, separator=u' '):\n-        self.separator = separator\n-\n-    def __call__(self, values):\n-        return self.separator.join(values)\n\n@@ -1,272 +0,0 @@\n-import unittest\n-\n-from scrapy.newitem.loader import Loader, XPathLoader\n-from scrapy.newitem.loader.expanders import TreeExpander, IdentityExpander\n-from scrapy.newitem.loader.reducers import Join, Identity\n-from scrapy.newitem import Item, Field\n-from scrapy.xpath import HtmlXPathSelector\n-from scrapy.http import HtmlResponse\n-\n-# test items\n-\n-class NameItem(Item):\n-    name = Field()\n-\n-class TestItem(NameItem):\n-    url = Field()\n-    summary = Field()\n-\n-# test loaders\n-\n-class NameLoader(Loader):\n-    default_item_class = TestItem\n-\n-class TestLoader(NameLoader):\n-    name_exp = TreeExpander(lambda v: v.title())\n-\n-class DefaultedLoader(NameLoader):\n-    default_expander = TreeExpander(lambda v: v[:-1])\n-\n-# test expanders\n-\n-def expander_func_with_args(value, other=None, loader_args=None):\n-    if 'key' in loader_args:\n-        return loader_args['key']\n-    return value\n-\n-class LoaderTest(unittest.TestCase):\n-\n-    def test_get_item_using_default_loader(self):\n-        i = TestItem()\n-        i['summary'] = u'lala'\n-        il = Loader(item=i)\n-        il.add_value('name', u'marta')\n-        item = il.get_item()\n-        assert item is i\n-        self.assertEqual(item['summary'], u'lala')\n-        self.assertEqual(item['name'], u'marta')\n-\n-    def test_get_item_using_custom_loader(self):\n-        il = TestLoader()\n-        il.add_value('name', u'marta')\n-        item = il.get_item()\n-        self.assertEqual(item['name'], u'Marta')\n-\n-    def test_add_value(self):\n-        il = TestLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-        il.add_value('name', u'pepe')\n-        self.assertEqual(il.get_expanded_value('name'), [u'Marta', u'Pepe'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-\n-    def test_replace_value(self):\n-        il = TestLoader()\n-        il.replace_value('name', u'marta')\n-        self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-        il.replace_value('name', u'pepe')\n-        self.assertEqual(il.get_expanded_value('name'), [u'Pepe'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Pepe')\n-\n-    def test_tree_expander_filter(self):\n-        def filter_world(x):\n-            return None if x == 'world' else x\n-\n-        expander = TreeExpander(filter_world, str.upper)\n-        self.assertEqual(expander(['hello', 'world', 'this', 'is', 'scrapy']),\n-                         ['HELLO', 'THIS', 'IS', 'SCRAPY'])\n-\n-    def test_tree_expander_multiple_functions(self):\n-        class TestLoader(NameLoader):\n-            name_exp = TreeExpander(lambda v: v.title(), lambda v: v[:-1])\n-\n-        il = TestLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'Mart')\n-        item = il.get_item()\n-        self.assertEqual(item['name'], u'Mart')\n-\n-    def test_default_expander(self):\n-        il = DefaultedLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'mart')\n-\n-    def test_inherited_default_expander(self):\n-        class InheritDefaultedLoader(DefaultedLoader):\n-            pass\n-\n-        il = InheritDefaultedLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'mart')\n-\n-    def test_expander_inheritance(self):\n-        class ChildLoader(TestLoader):\n-            url_exp = TreeExpander(lambda v: v.lower())\n-\n-        il = ChildLoader()\n-        il.add_value('url', u'HTTP://scrapy.ORG')\n-        self.assertEqual(il.get_reduced_value('url'), u'http://scrapy.org')\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-\n-        class ChildChildLoader(ChildLoader):\n-            url_exp = TreeExpander(lambda v: v.upper())\n-            summary_exp = TreeExpander(lambda v: v)\n-\n-        il = ChildChildLoader()\n-        il.add_value('url', u'http://scrapy.org')\n-        self.assertEqual(il.get_reduced_value('url'), u'HTTP://SCRAPY.ORG')\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-\n-    def test_empty_tree_expander(self):\n-        class IdentityDefaultedLoader(DefaultedLoader):\n-            name_exp = TreeExpander()\n-\n-        il = IdentityDefaultedLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'marta')\n-\n-    def test_identity_expander(self):\n-        class IdentityDefaultedLoader(DefaultedLoader):\n-            name_exp = IdentityExpander()\n-\n-        il = IdentityDefaultedLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'marta')\n-\n-    def test_extend_custom_expanders(self):\n-        class ChildLoader(TestLoader):\n-            name_exp = TreeExpander(TestLoader.name_exp, unicode.swapcase)\n-\n-        il = ChildLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'mARTA')\n-\n-    def test_extend_default_expanders(self):\n-        class ChildDefaultedLoader(DefaultedLoader):\n-            name_exp = TreeExpander(DefaultedLoader.default_expander, unicode.swapcase)\n-\n-        il = ChildDefaultedLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_reduced_value('name'), u'MART')\n-\n-    def test_reducer_using_function(self):\n-        il = TestLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n-\n-        class TakeFirstLoader(TestLoader):\n-            name_red = u\" \".join\n-\n-        il = TakeFirstLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n-\n-    def test_reducer_using_classes(self):\n-        il = TestLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n-\n-        class TakeFirstLoader(TestLoader):\n-            name_red = Join()\n-\n-        il = TakeFirstLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n-\n-        class TakeFirstLoader(TestLoader):\n-            name_red = Join(\"<br>\")\n-\n-        il = TakeFirstLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar<br>Ta')\n-\n-    def test_default_reducer(self):\n-        il = TestLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n-\n-        class LalaLoader(TestLoader):\n-            default_reducer = Identity()\n-\n-        il = LalaLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_reduced_value('name'), [u'Mar', u'Ta'])\n-\n-    def test_expander_args_on_declaration(self):\n-        class ChildLoader(TestLoader):\n-            url_exp = TreeExpander(expander_func_with_args, key=u'val')\n-\n-        il = ChildLoader()\n-        il.add_value('url', u'text', key=u'val')\n-        self.assertEqual(il.get_reduced_value('url'), 'val')\n-\n-    def test_expander_args_on_instantiation(self):\n-        class ChildLoader(TestLoader):\n-            url_exp = TreeExpander(expander_func_with_args)\n-\n-        il = ChildLoader(key=u'val')\n-        il.add_value('url', u'text')\n-        self.assertEqual(il.get_reduced_value('url'), 'val')\n-\n-    def test_expander_args_on_assign(self):\n-        class ChildLoader(TestLoader):\n-            url_exp = TreeExpander(expander_func_with_args)\n-\n-        il = ChildLoader()\n-        il.add_value('url', u'text', key=u'val')\n-        self.assertEqual(il.get_reduced_value('url'), 'val')\n-\n-    def test_item_passed_to_expander_functions(self):\n-        def exp_func(value, loader_args):\n-            return loader_args['item']['name']\n-\n-        class ChildLoader(TestLoader):\n-            url_exp = TreeExpander(exp_func)\n-\n-        it = TestItem(name='marta')\n-        il = ChildLoader(item=it)\n-        il.add_value('url', u'text', key=u'val')\n-        self.assertEqual(il.get_reduced_value('url'), 'marta')\n-\n-    def test_add_value_on_unknown_field(self):\n-        il = TestLoader()\n-        self.assertRaises(KeyError, il.add_value, 'wrong_field', [u'lala', u'lolo'])\n-\n-\n-class TestXPathLoader(XPathLoader):\n-    default_item_class = TestItem\n-    name_exp = TreeExpander(lambda v: v.title())\n-\n-class XPathLoaderTest(unittest.TestCase):\n-\n-    def test_constructor_errors(self):\n-        self.assertRaises(RuntimeError, XPathLoader)\n-\n-    def test_constructor_with_selector(self):\n-        sel = HtmlXPathSelector(text=u\"<html><body><div>marta</div></body></html>\")\n-        l = TestXPathLoader(selector=sel)\n-        self.assert_(l.selector is sel)\n-        l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_reduced_value('name'), u'Marta')\n-\n-    def test_constructor_with_response(self):\n-        response = HtmlResponse(url=\"\", body=\"<html><body><div>marta</div></body></html>\")\n-        l = TestXPathLoader(response=response)\n-        self.assert_(l.selector)\n-        l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_reduced_value('name'), u'Marta')\n-\n-    def test_add_xpath_re(self):\n-        response = HtmlResponse(url=\"\", body=\"<html><body><div>marta</div></body></html>\")\n-        l = TestXPathLoader(response=response)\n-        l.add_xpath('name', '//div/text()', re='ma')\n-        self.assertEqual(l.get_reduced_value('name'), u'Ma')\n-\n-\n-if __name__ == \"__main__\":\n-    unittest.main()\n-\n\n@@ -0,0 +1,280 @@\n+import unittest\n+\n+from scrapy.contrib.itemparser import ItemParser, XPathItemParser\n+from scrapy.contrib.itemparser.parsers import ApplyConcat, Join, Identity\n+from scrapy.newitem import Item, Field\n+from scrapy.xpath import HtmlXPathSelector\n+from scrapy.http import HtmlResponse\n+\n+# test items\n+\n+class NameItem(Item):\n+    name = Field()\n+\n+class TestItem(NameItem):\n+    url = Field()\n+    summary = Field()\n+\n+# test item parsers\n+\n+class NameItemParser(ItemParser):\n+    default_item_class = TestItem\n+\n+class TestItemParser(NameItemParser):\n+    name_in = ApplyConcat(lambda v: v.title())\n+\n+class DefaultedItemParser(NameItemParser):\n+    default_input_parser = ApplyConcat(lambda v: v[:-1])\n+\n+# test parsers\n+\n+def parser_with_args(value, other=None, parser_context=None):\n+    if 'key' in parser_context:\n+        return parser_context['key']\n+    return value\n+\n+class ItemParserTest(unittest.TestCase):\n+\n+    def test_populate_item_using_default_loader(self):\n+        i = TestItem()\n+        i['summary'] = u'lala'\n+        ip = ItemParser(item=i)\n+        ip.add_value('name', u'marta')\n+        item = ip.populate_item()\n+        assert item is i\n+        self.assertEqual(item['summary'], u'lala')\n+        self.assertEqual(item['name'], [u'marta'])\n+\n+    def test_populate_item_using_custom_loader(self):\n+        ip = TestItemParser()\n+        ip.add_value('name', u'marta')\n+        item = ip.populate_item()\n+        self.assertEqual(item['name'], [u'Marta'])\n+\n+    def test_add_value(self):\n+        ip = TestItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_collected_values('name'), [u'Marta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Marta'])\n+        ip.add_value('name', u'pepe')\n+        self.assertEqual(ip.get_collected_values('name'), [u'Marta', u'Pepe'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Marta', u'Pepe'])\n+\n+    def test_replace_value(self):\n+        ip = TestItemParser()\n+        ip.replace_value('name', u'marta')\n+        self.assertEqual(ip.get_collected_values('name'), [u'Marta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Marta'])\n+        ip.replace_value('name', u'pepe')\n+        self.assertEqual(ip.get_collected_values('name'), [u'Pepe'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Pepe'])\n+\n+    def test_map_concat_filter(self):\n+        def filter_world(x):\n+            return None if x == 'world' else x\n+\n+        parser = ApplyConcat(filter_world, str.upper)\n+        self.assertEqual(parser(['hello', 'world', 'this', 'is', 'scrapy']),\n+                         ['HELLO', 'THIS', 'IS', 'SCRAPY'])\n+\n+    def test_map_concat_filter_multiple_functions(self):\n+        class TestItemParser(NameItemParser):\n+            name_in = ApplyConcat(lambda v: v.title(), lambda v: v[:-1])\n+\n+        ip = TestItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'Mart'])\n+        item = ip.populate_item()\n+        self.assertEqual(item['name'], [u'Mart'])\n+\n+    def test_default_input_parser(self):\n+        ip = DefaultedItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'mart'])\n+\n+    def test_inherited_default_input_parser(self):\n+        class InheritDefaultedItemParser(DefaultedItemParser):\n+            pass\n+\n+        ip = InheritDefaultedItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'mart'])\n+\n+    def test_input_parser_inheritance(self):\n+        class ChildItemParser(TestItemParser):\n+            url_in = ApplyConcat(lambda v: v.lower())\n+\n+        ip = ChildItemParser()\n+        ip.add_value('url', u'HTTP://scrapy.ORG')\n+        self.assertEqual(ip.get_output_value('url'), [u'http://scrapy.org'])\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'Marta'])\n+\n+        class ChildChildItemParser(ChildItemParser):\n+            url_in = ApplyConcat(lambda v: v.upper())\n+            summary_in = ApplyConcat(lambda v: v)\n+\n+        ip = ChildChildItemParser()\n+        ip.add_value('url', u'http://scrapy.org')\n+        self.assertEqual(ip.get_output_value('url'), [u'HTTP://SCRAPY.ORG'])\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'Marta'])\n+\n+    def test_empty_map_concat(self):\n+        class IdentityDefaultedItemParser(DefaultedItemParser):\n+            name_in = ApplyConcat()\n+\n+        ip = IdentityDefaultedItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'marta'])\n+\n+    def test_identity_input_parser(self):\n+        class IdentityDefaultedItemParser(DefaultedItemParser):\n+            name_in = Identity()\n+\n+        ip = IdentityDefaultedItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'marta'])\n+\n+    def test_extend_custom_input_parsers(self):\n+        class ChildItemParser(TestItemParser):\n+            name_in = ApplyConcat(TestItemParser.name_in, unicode.swapcase)\n+\n+        ip = ChildItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'mARTA'])\n+\n+    def test_extend_default_input_parsers(self):\n+        class ChildDefaultedItemParser(DefaultedItemParser):\n+            name_in = ApplyConcat(DefaultedItemParser.default_input_parser, unicode.swapcase)\n+\n+        ip = ChildDefaultedItemParser()\n+        ip.add_value('name', u'marta')\n+        self.assertEqual(ip.get_output_value('name'), [u'MART'])\n+\n+    def test_output_parser_using_function(self):\n+        ip = TestItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Mar', u'Ta'])\n+\n+        class TakeFirstItemParser(TestItemParser):\n+            name_out = u\" \".join\n+\n+        ip = TakeFirstItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), u'Mar Ta')\n+\n+    def test_output_parser_using_classes(self):\n+        ip = TestItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Mar', u'Ta'])\n+\n+        class TakeFirstItemParser(TestItemParser):\n+            name_out = Join()\n+\n+        ip = TakeFirstItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), u'Mar Ta')\n+\n+        class TakeFirstItemParser(TestItemParser):\n+            name_out = Join(\"<br>\")\n+\n+        ip = TakeFirstItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), u'Mar<br>Ta')\n+\n+    def test_default_output_parser(self):\n+        ip = TestItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Mar', u'Ta'])\n+\n+        class LalaItemParser(TestItemParser):\n+            default_output_parser = Identity()\n+\n+        ip = LalaItemParser()\n+        ip.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ip.get_output_value('name'), [u'Mar', u'Ta'])\n+\n+    def test_parser_context_on_declaration(self):\n+        class ChildItemParser(TestItemParser):\n+            url_in = ApplyConcat(parser_with_args, key=u'val')\n+\n+        ip = ChildItemParser()\n+        ip.add_value('url', u'text')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+        ip.replace_value('url', u'text2')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+\n+    def test_parser_context_on_instantiation(self):\n+        class ChildItemParser(TestItemParser):\n+            url_in = ApplyConcat(parser_with_args)\n+\n+        ip = ChildItemParser(key=u'val')\n+        ip.add_value('url', u'text')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+        ip.replace_value('url', u'text2')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+\n+    def test_parser_context_on_assign(self):\n+        class ChildItemParser(TestItemParser):\n+            url_in = ApplyConcat(parser_with_args)\n+\n+        ip = ChildItemParser()\n+        ip.context['key'] = u'val'\n+        ip.add_value('url', u'text')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+        ip.replace_value('url', u'text2')\n+        self.assertEqual(ip.get_output_value('url'), ['val'])\n+\n+    def test_item_passed_to_input_parser_functions(self):\n+        def parser(value, parser_context):\n+            return parser_context['item']['name']\n+\n+        class ChildItemParser(TestItemParser):\n+            url_in = ApplyConcat(parser)\n+\n+        it = TestItem(name='marta')\n+        ip = ChildItemParser(item=it)\n+        ip.add_value('url', u'text')\n+        self.assertEqual(ip.get_output_value('url'), ['marta'])\n+        ip.replace_value('url', u'text2')\n+        self.assertEqual(ip.get_output_value('url'), ['marta'])\n+\n+    def test_add_value_on_unknown_field(self):\n+        ip = TestItemParser()\n+        self.assertRaises(KeyError, ip.add_value, 'wrong_field', [u'lala', u'lolo'])\n+\n+\n+class TestXPathItemParser(XPathItemParser):\n+    default_item_class = TestItem\n+    name_in = ApplyConcat(lambda v: v.title())\n+\n+class XPathItemParserTest(unittest.TestCase):\n+\n+    def test_constructor_errors(self):\n+        self.assertRaises(RuntimeError, XPathItemParser)\n+\n+    def test_constructor_with_selector(self):\n+        sel = HtmlXPathSelector(text=u\"<html><body><div>marta</div></body></html>\")\n+        l = TestXPathItemParser(selector=sel)\n+        self.assert_(l.selector is sel)\n+        l.add_xpath('name', '//div/text()')\n+        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+\n+    def test_constructor_with_response(self):\n+        response = HtmlResponse(url=\"\", body=\"<html><body><div>marta</div></body></html>\")\n+        l = TestXPathItemParser(response=response)\n+        self.assert_(l.selector)\n+        l.add_xpath('name', '//div/text()')\n+        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+\n+    def test_add_xpath_re(self):\n+        response = HtmlResponse(url=\"\", body=\"<html><body><div>marta</div></body></html>\")\n+        l = TestXPathItemParser(response=response)\n+        l.add_xpath('name', '//div/text()', re='ma')\n+        self.assertEqual(l.get_output_value('name'), [u'Ma'])\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
