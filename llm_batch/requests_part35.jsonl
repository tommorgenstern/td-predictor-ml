{"custom_id": "requests#80eafe3b63389539a201e6d26505ad91c2428fcc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 8 | Churn Cumulative: 6539 | Contributors (this commit): 45 | Commits (past 90d): 127 | Contributors (cumulative): 60 | DMM Complexity: 1.0\n\nDIFF:\n@@ -351,7 +351,7 @@ class Request(object):\n         if not path:\n             path = '/'\n \n-        # if is_py3:\n+        if is_py3:\n             path = quote(path.encode('utf-8'))\n \n         url.append(path)\n\n@@ -72,6 +72,12 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     def test_invalid_url(self):\n         self.assertRaises(ValueError, get, 'hiwpefhipowhefopw')\n \n+\n+    def test_path_is_not_double_encoded(self):\n+        request = requests.Request(\"http://0.0.0.0/get/~test\")\n+\n+        assert request.path_url == \"/get/%7Etest\"\n+\n     def test_HTTP_200_OK_GET(self):\n         r = get(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f478c346712d730df0cbe410b632bd120b0589aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 2079 | Contributors (this commit): 21 | Commits (past 90d): 42 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -111,6 +111,11 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_session_with_unicode_headers(self):\n+        heads = { u'User-Agent': u'\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af' }\n+\n+        requests.get(url=httpbin('get'), headers=heads)\n+\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#04c0bcc9b482180351d9a9f1e1e70bb5b8186784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 109 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -86,8 +86,9 @@ if is_py2:\n     from .packages.oreos.monkeys import SimpleCookie\n     from StringIO import StringIO\n \n-    str = unicode\n     bytes = str\n+    str = unicode\n+\n \n \n elif is_py3:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e6959412aa7f0d54e01d9448a90da84de1fec0f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 174 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@\n import os\n import sys\n import requests\n-from requests.compat import is_py3\n+from requests.compat import is_py3, is_py2\n \n try:\n     from setuptools import setup\n@@ -22,11 +22,20 @@ if sys.argv[-1] == 'test':\n     sys.exit()\n \n required = ['certifi>=0.0.7',]\n+packages = [\n+    'requests',\n+    'requests.packages',\n+    'requests.packages.urllib3',\n+    'requests.packages.urllib3.packages',\n+    'requests.packages.urllib3.packages.ssl_match_hostname',\n+    'requests.packages.urllib3.packages.mimetools_choose_boundary',\n+]\n \n if is_py3:\n     required.append('chardet2')\n else:\n     required.append('chardet>=1.0.0')\n+    packages.append('requests.packages.oreos')\n \n \n setup(\n@@ -38,15 +47,7 @@ setup(\n     author='Kenneth Reitz',\n     author_email='me@kennethreitz.com',\n     url='http://python-requests.org',\n-    packages=[\n-        'requests',\n-        'requests.packages',\n-        'requests.packages.urllib3',\n-        'requests.packages.urllib3.packages',\n-        'requests.packages.urllib3.packages.ssl_match_hostname',\n-        'requests.packages.urllib3.packages.mimetools_choose_boundary',\n-        'requests.packages.oreos'\n-    ],\n+    packages=packages,\n     package_data={'': ['LICENSE', 'NOTICE']},\n     include_package_data=True,\n     install_requires=required,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49bed18a8357cf60761e55bb88802233de78bbe3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 4472 | Contributors (this commit): 40 | Commits (past 90d): 87 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -207,11 +207,8 @@ class Request(object):\n         self.cookies.update(r.cookies)\n \n         if r.status_code in REDIRECT_STATI and not self.redirect:\n-\n-            while (\n-                ('location' in r.headers) and\n-                ((r.status_code is codes.see_other) or (self.allow_redirects))\n-            ):\n+            while (('location' in r.headers) and\n+                   ((r.status_code is codes.see_other) or (self.allow_redirects))):\n \n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3020d0e56a552cd0a1f603aba69393511ac22d81", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 4477 | Contributors (this commit): 40 | Commits (past 90d): 88 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -203,7 +203,7 @@ class Request(object):\n         history = []\n \n         r = build(resp)\n-        cookies = self.cookies\n+\n         self.cookies.update(r.cookies)\n \n         if r.status_code in REDIRECT_STATI and not self.redirect:\n@@ -247,7 +247,7 @@ class Request(object):\n                     method=method,\n                     params=self.session.params,\n                     auth=self.auth,\n-                    cookies=cookies,\n+                    cookies=self.cookies,\n                     redirect=True,\n                     config=self.config,\n                     timeout=self.timeout,\n@@ -258,7 +258,6 @@ class Request(object):\n                 )\n \n                 request.send()\n-                cookies.update(request.response.cookies)\n                 r = request.response\n                 self.cookies.update(r.cookies)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#730c0e2e2bef77968a86962f9d5f2bebba4d19ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4480 | Contributors (this commit): 40 | Commits (past 90d): 89 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -210,6 +210,8 @@ class Request(object):\n             while (('location' in r.headers) and\n                    ((r.status_code is codes.see_other) or (self.allow_redirects))):\n \n+                r.content  # Consume socket so it can be released\n+\n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n@@ -262,6 +264,7 @@ class Request(object):\n                 self.cookies.update(r.cookies)\n \n             r.history = history\n+            r.content  # Consume socket so it can be released\n \n         self.response = r\n         self.response.request = self\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4516bd45b23dccf819e1d3d564415276ccbe7b07", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4483 | Contributors (this commit): 40 | Commits (past 90d): 90 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -216,6 +216,9 @@ class Request(object):\n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n+                # Release the connection back into the pool.\n+                r.raw.release_conn()\n+\n                 history.append(r)\n \n                 url = r.headers['location']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#495646bb6a89802a60208c2ab09749edba1f8e51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 11 | Churn Cumulative: 445 | Contributors (this commit): 9 | Commits (past 90d): 11 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,15 +46,15 @@ def patched(f):\n     return wrapped\n \n \n-def send(r, pool=None):\n+def send(r, pool=None, prefetch=False):\n     \"\"\"Sends the request object using the specified pool. If a pool isn't\n     specified this method blocks. Pools are useful because you can specify size\n     and can hence limit concurrency.\"\"\"\n \n     if pool != None:\n-        return pool.spawn(r.send)\n+        return pool.spawn(r.send, prefetch=prefetch)\n \n-    return gevent.spawn(r.send)\n+    return gevent.spawn(r.send, prefetch=prefetch)\n \n \n # Patched requests.api functions.\n@@ -79,10 +79,7 @@ def map(requests, prefetch=True, size=None):\n     requests = list(requests)\n \n     pool = Pool(size) if size else None\n-    jobs = [send(r, pool) for r in requests]\n+    jobs = [send(r, pool, prefetch=prefetch) for r in requests]\n     gevent.joinall(jobs)\n \n-    if prefetch:\n-        [r.response.content for r in requests]\n-\n     return [r.response for r in requests]\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b98cc8b4e9d8c4c12b8f52c9a9be151c306cb977", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4486 | Contributors (this commit): 40 | Commits (past 90d): 91 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -210,8 +210,6 @@ class Request(object):\n             while (('location' in r.headers) and\n                    ((r.status_code is codes.see_other) or (self.allow_redirects))):\n \n-                r.content  # Consume socket so it can be released\n-\n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n@@ -264,7 +262,6 @@ class Request(object):\n                 self.cookies.update(r.cookies)\n \n             r.history = history\n-            r.content  # Consume socket so it can be released\n \n         self.response = r\n         self.response.request = self\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#67f50a0fe53765987e5a6a1c02daabe6400322af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4488 | Contributors (this commit): 40 | Commits (past 90d): 92 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -210,6 +210,8 @@ class Request(object):\n             while (('location' in r.headers) and\n                    ((r.status_code is codes.see_other) or (self.allow_redirects))):\n \n+                r.content  # Consume socket so it can be released\n+\n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c363ca476fd378c854407fbd63d628893671027c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 4491 | Contributors (this commit): 41 | Commits (past 90d): 93 | Contributors (cumulative): 41 | DMM Complexity: 0.0\n\nDIFF:\n@@ -317,6 +317,9 @@ class Request(object):\n \n         netloc = netloc.encode('idna').decode('utf-8')\n \n+        if not path:\n+            path = '/'\n+\n         if is_py2:\n             if isinstance(path, str):\n                 path = path.encode('utf-8')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a61a861cfb8ae9a0bb14e4fce7859a5ed865840c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 9 | Churn Cumulative: 4500 | Contributors (this commit): 42 | Commits (past 90d): 94 | Contributors (cumulative): 42 | DMM Complexity: 1.0\n\nDIFF:\n@@ -773,14 +773,7 @@ class Response(object):\n \n         # Decode unicode from given encoding.\n         try:\n-            content = str(self.content, encoding)\n-        except (UnicodeError, TypeError):\n-            pass\n-\n-        # Try to fall back:\n-        if not content:\n-            try:\n-                content = str(content, encoding, errors='replace')\n+            content = str(self.content, encoding, errors='replace')\n         except (UnicodeError, TypeError):\n             pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5be412db133b46288409a9bb195c24f9e74cf405", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 5 | Churn Cumulative: 4505 | Contributors (this commit): 42 | Commits (past 90d): 95 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -323,9 +323,6 @@ class Request(object):\n \n             path = requote_path(path)\n \n-        # print([ scheme, netloc, path, params, query, fragment ])\n-        # print('---------------------')\n-\n         url = (urlunparse([ scheme, netloc, path, params, query, fragment ]))\n \n         if self._enc_params:\n@@ -362,8 +359,6 @@ class Request(object):\n             url.append('?')\n             url.append(query)\n \n-        # print(url)\n-\n         return ''.join(url)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#986704dc62dc7bce0ed323a25dc3c52fe24cef06", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 288 | Contributors (this commit): 3 | Commits (past 90d): 25 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.1'\n-__build__ = 0x001001\n+__version__ = '0.10.2'\n+__build__ = 0x001002\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f10605389812e84998e73e91754aeff0bc09b41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 290 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.2'\n+__version__ = '0.10.3'\n __build__ = 0x001002\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b47effe5d890edec7cb1b9ffc2bd9a2625246d60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 292 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.3'\n+__version__ = '0.10.2'\n __build__ = 0x001002\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c40d6d05096ce10440390f11753985bcb6b96e86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 405 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -362,7 +362,7 @@ class MultiDict(TypeConversionDict):\n         \"\"\"\n         try:\n             return dict.pop(self, key)[0]\n-        except KeyError, e:\n+        except KeyError as e:\n             if default is not _missing:\n                 return default\n             raise KeyError(str(e))\n@@ -372,7 +372,7 @@ class MultiDict(TypeConversionDict):\n         try:\n             item = dict.popitem(self)\n             return (item[0], item[1][0])\n-        except KeyError, e:\n+        except KeyError as e:\n             raise KeyError(str(e))\n \n     def poplist(self, key):\n@@ -389,7 +389,7 @@ class MultiDict(TypeConversionDict):\n         \"\"\"Pop a ``(key, list)`` tuple from the dict.\"\"\"\n         try:\n             return dict.popitem(self)\n-        except KeyError, e:\n+        except KeyError as e:\n             raise KeyError(str(e))\n \n     def __copy__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f8b3141204c83737fd6ab7a5ba3aa84e0a1b6d61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1085 | Contributors (this commit): 12 | Commits (past 90d): 18 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -88,6 +88,7 @@ if is_py2:\n \n     bytes = str\n     str = unicode\n+    basestring = basestring\n \n \n \n@@ -100,4 +101,5 @@ elif is_py3:\n \n     str = str\n     bytes = bytes\n+    basestring = (str,bytes)\n \n\n@@ -18,6 +18,7 @@ import zlib\n \n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, unquote, cookielib, SimpleCookie, is_py2\n+from .compat import basestring\n \n \n def dict_from_string(s):\n@@ -146,7 +147,7 @@ def header_expand(headers):\n     if isinstance(headers, dict):\n         headers = list(headers.items())\n \n-    elif isinstance(headers, str):\n+    elif isinstance(headers, basestring):\n         return headers\n \n     for i, (value, params) in enumerate(headers):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7842ab34b6cfae91b62eb1c251b0a460c3d62df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 409 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-oreos.sructures\n-~~~~~~~~~~~~~~~\n+oreos.structures\n+~~~~~~~~~~~~~~~~\n \n The plastic blue packaging.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0a17badb21c2dd9ceabb82dc6f3ca30a2c8d5aad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 3070 | Contributors (this commit): 29 | Commits (past 90d): 46 | Contributors (cumulative): 35 | DMM Complexity: 0.6\n\nDIFF:\n@@ -146,9 +146,13 @@ def header_expand(headers):\n \n     if isinstance(headers, dict):\n         headers = list(headers.items())\n-\n     elif isinstance(headers, basestring):\n         return headers\n+    elif isinstance(headers, unicode):\n+        # As discussed in https://github.com/kennethreitz/requests/issues/400\n+        # latin-1 is the most conservative encoding used on the web. Anyone\n+        # who needs more can encode to a byte-string before calling\n+        return headers.encode(\"latin-1\")\n \n     for i, (value, params) in enumerate(headers):\n \n\n@@ -111,11 +111,16 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n-    def test_session_with_unicode_headers(self):\n-        heads = { u'User-Agent': u'\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af' }\n-\n+    def test_unicode_headers(self):\n+        # Simply calling requests with a unicode instance should simply work\n+        # when the characters are all representable using latin-1:\n+        heads = { u'User-Agent': u'Requests Test Suite' }\n         requests.get(url=httpbin('get'), headers=heads)\n \n+        # Characters outside latin-1 should raise an exception:\n+        heads = { u'User-Agent': u'\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af' }\n+        self.assertRaises(UnicodeEncodeError, requests.get,\n+                          url=httpbin('get'), headers=heads)\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f72c13ffdad47ff684d102b6d9fb6122db899891", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 775 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -252,7 +252,8 @@ class CookieError(Exception):\n #       _LegalChars       is the list of chars which don't require \"'s\n #       _Translator       hash-table for fast quoting\n #\n-_LegalChars       = string.ascii_letters + string.digits + \"!#$%&'*+-.^_`|~[]_\"\n+_LegalChars       = ( string.ascii_letters + string.digits + \n+                      \"!#$%&'*+-.^_`|~[]_:{}\" )\n _Translator       = {\n     '\\000' : '\\\\000',  '\\001' : '\\\\001',  '\\002' : '\\\\002',\n     '\\003' : '\\\\003',  '\\004' : '\\\\004',  '\\005' : '\\\\005',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#329efcae6e93e992582f0f3e01f4a7ed31b54979", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 2112 | Contributors (this commit): 23 | Commits (past 90d): 35 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -117,6 +117,28 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         requests.get(url=httpbin('get'), headers=heads)\n \n \n+    def test_session_with_escaped_url(self):\n+        # Test a URL that contains percent-escaped characters\n+        # This URL should not be modified (double-escaped)\n+        # Tests:\n+        # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n+        # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n+        # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n+        path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n+        url = httpbin('get/' + path_fully_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+\n+        # Test that illegal characters in a path get properly percent-escaped\n+        # Tests:\n+        # - Bare illegal characters (space, '<')\n+        # - Bare non-ASCII characters ('\\u00d8')\n+        path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n+        url = httpbin('get/' + path)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+\n+\n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cf54f60367199042d56334c9a1e2a75546025933", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 9 | Churn Cumulative: 5494 | Contributors (this commit): 45 | Commits (past 90d): 84 | Contributors (cumulative): 57 | DMM Complexity: 0.0\n\nDIFF:\n@@ -352,9 +352,6 @@ class Request(object):\n         if not path:\n             path = '/'\n \n-        if is_py3:\n-            path = quote(path.encode('utf-8'))\n-\n         url.append(path)\n \n         query = p.query\n\n@@ -403,6 +403,6 @@ def requote_path(path):\n     This function passes the given path through an unquote/quote cycle to\n     ensure that it is fully and consistently quoted.\n     \"\"\"\n-    parts = path.split(b\"/\")\n-    parts = (quote(unquote(part), safe=b\"\") for part in parts)\n-    return b\"/\".join(parts)\n+    parts = path.split(\"/\")\n+    parts = (quote(unquote(part), safe=\"\") for part in parts)\n+    return \"/\".join(parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#08bc1198d3ed312ab5ce60c29d8447dd5d3f90ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 2126 | Contributors (this commit): 23 | Commits (past 90d): 36 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -138,6 +138,20 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         response = get(url)\n         self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n+        # Test that reserved characters in a path do not get percent-escaped\n+        # Tests:\n+        # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n+        #   which are not allowed in the path, and ';' which delimits\n+        #   parameters.\n+        #   All such characters must be allowed bare in path, and must not be\n+        #   encoded.\n+        # - Special unreserved characters (RFC 3986), which should not be\n+        #   encoded (even though it wouldn't hurt).\n+        path_reserved = '!$&\\'()*+,/:=@-._~'\n+        url = httpbin('get/' + path_reserved)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_reserved))\n+\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#75bd9d0e9446dd9819142848fb26c6b8ae8c3532", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2134 | Contributors (this commit): 23 | Commits (past 90d): 37 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -152,6 +152,14 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         response = get(url)\n         self.assertEqual(response.url, httpbin('get/' + path_reserved))\n \n+        # Test that percent-encoded unreserved characters in a path get\n+        # normalised to their un-encoded forms.\n+        path_unreserved = 'ABCDwxyz1234-._~'\n+        path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n+        url = httpbin('get/' + path_unreserved_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n+\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c0763bb8d5b3f4ac74a1d77d064474e4823e2246", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2138 | Contributors (this commit): 23 | Commits (past 90d): 38 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -74,9 +74,9 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n \n     def test_path_is_not_double_encoded(self):\n-        request = requests.Request(\"http://0.0.0.0/get/~test\")\n+        request = requests.Request(\"http://0.0.0.0/get/test case\")\n \n-        assert request.path_url == \"/get/%7Etest\"\n+        assert request.path_url == \"/get/test%20case\"\n \n     def test_HTTP_200_OK_GET(self):\n         r = get(httpbin('/get'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fcac1c3746b72777b8b25f78b9abff0d3e283389", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 28 | Churn Cumulative: 1014 | Contributors (this commit): 14 | Commits (past 90d): 14 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -396,6 +396,28 @@ def stream_decompress(iterator, mode='gzip'):\n         if rv:\n             yield rv\n \n+# The unreserved URI characters (RFC 3986)\n+UNRESERVED_SET = frozenset(\n+    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n+    + \"0123456789-._~\")\n+\n+def unquote_unreserved(uri):\n+    \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n+    characters.\n+    This leaves all reserved, illegal and non-ASCII bytes encoded.\n+    \"\"\"\n+    parts = uri.split('%')\n+    for i in range(1, len(parts)):\n+        h = parts[i][0:2]\n+        if len(h) == 2:\n+            c = chr(int(h, 16))\n+            if c in UNRESERVED_SET:\n+                parts[i] = c + parts[i][2:]\n+            else:\n+                parts[i] = '%' + parts[i]\n+        else:\n+            parts[i] = '%' + parts[i]\n+    return ''.join(parts)\n \n def requote_path(path):\n     \"\"\"Re-quote the given URL path component.\n@@ -404,5 +426,9 @@ def requote_path(path):\n     ensure that it is fully and consistently quoted.\n     \"\"\"\n     parts = path.split(\"/\")\n-    parts = (quote(unquote(part), safe=\"\") for part in parts)\n+    # Unquote only the unreserved characters\n+    # Then quote only illegal characters (do not quote reserved, unreserved,\n+    # or '%')\n+    parts = (quote(unquote_unreserved(part), safe=\"!#$%&'()*+,/:;=?@[]~\")\n+             for part in parts)\n     return \"/\".join(parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1ffce4f7dcb646c4c4b357c214aa9ad77e69f645", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 1018 | Contributors (this commit): 14 | Commits (past 90d): 15 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -425,10 +425,8 @@ def requote_path(path):\n     This function passes the given path through an unquote/quote cycle to\n     ensure that it is fully and consistently quoted.\n     \"\"\"\n-    parts = path.split(\"/\")\n     # Unquote only the unreserved characters\n     # Then quote only illegal characters (do not quote reserved, unreserved,\n     # or '%')\n-    parts = (quote(unquote_unreserved(part), safe=\"!#$%&'()*+,/:;=?@[]~\")\n-             for part in parts)\n+    return quote(unquote_unreserved(path), safe=\"!#$%&'()*+,/:;=?@[]~\")\n     return \"/\".join(parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#658da765ecc72b369a9f01d267ffb5db4bb6871e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 777 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -253,7 +253,7 @@ class CookieError(Exception):\n #       _Translator       hash-table for fast quoting\n #\n _LegalChars       = ( string.ascii_letters + string.digits + \n-                      \"!#$%&'*+-.^_`|~[]_:{}\" )\n+                      \"!#$%&'*+-.^_`|~_\" + \"[]:{}\")\n _Translator       = {\n     '\\000' : '\\\\000',  '\\001' : '\\\\001',  '\\002' : '\\\\002',\n     '\\003' : '\\\\003',  '\\004' : '\\\\004',  '\\005' : '\\\\005',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d7107c2cdcdc380c610112bd22f292b2f2113b83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 781 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -249,11 +249,13 @@ class CookieError(Exception):\n # quoted with a preceeding '\\' slash.\n #\n # These are taken from RFC2068 and RFC2109.\n+#       _RFC2068Forbidden is the list of forbidden chars we accept anyway\n #       _LegalChars       is the list of chars which don't require \"'s\n #       _Translator       hash-table for fast quoting\n #\n+_RFC2068Forbidden = \"[]:{}\"\n _LegalChars       = ( string.ascii_letters + string.digits + \n-                      \"!#$%&'*+-.^_`|~_\" + \"[]:{}\")\n+                      \"!#$%&'*+-.^_`|~_\" + _RFC2068Forbidden )\n _Translator       = {\n     '\\000' : '\\\\000',  '\\001' : '\\\\001',  '\\002' : '\\\\002',\n     '\\003' : '\\\\003',  '\\004' : '\\\\004',  '\\005' : '\\\\005',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80e29bfcab15a7e4ed3c10a013bd80010f9ea071", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 787 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -249,13 +249,13 @@ class CookieError(Exception):\n # quoted with a preceeding '\\' slash.\n #\n # These are taken from RFC2068 and RFC2109.\n-#       _RFC2068Forbidden is the list of forbidden chars we accept anyway\n+#       _RFC2965Forbidden is the list of forbidden chars we accept anyway\n #       _LegalChars       is the list of chars which don't require \"'s\n #       _Translator       hash-table for fast quoting\n #\n-_RFC2068Forbidden = \"[]:{}\"\n+_RFC2965Forbidden = \"[]:{}\"\n _LegalChars       = ( string.ascii_letters + string.digits + \n-                      \"!#$%&'*+-.^_`|~_\" + _RFC2068Forbidden )\n+                      \"!#$%&'*+-.^_`|~_\" + _RFC2965Forbidden )\n _Translator       = {\n     '\\000' : '\\\\000',  '\\001' : '\\\\001',  '\\002' : '\\\\002',\n     '\\003' : '\\\\003',  '\\004' : '\\\\004',  '\\005' : '\\\\005',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3ae0ff36853d14b3bb23f1344df4889f0f44ed4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 2161 | Contributors (this commit): 23 | Commits (past 90d): 39 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -160,6 +160,29 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         response = get(url)\n         self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n \n+        # Re-run all of the same tests on the query part of the URI\n+        query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n+        url = httpbin('get/?' + query_fully_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+\n+        query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n+        url = httpbin('get/?' + query)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+\n+        # The legal characters in query happens to be the same as in path\n+        query_reserved = '!$&\\'()*+,/:=@-._~'\n+        url = httpbin('get/?' + query_reserved)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n+\n+        query_unreserved = 'ABCDwxyz=1234-._~'\n+        query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n+        url = httpbin('get/?' + query_unreserved_escaped)\n+        response = get(url)\n+        self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n+\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3bd5406c0628b4e917d5dc47eb0fbf0697e8ea3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 20 | Churn Cumulative: 4528 | Contributors (this commit): 43 | Commits (past 90d): 69 | Contributors (cumulative): 43 | DMM Complexity: 0.0\n\nDIFF:\n@@ -321,19 +321,29 @@ class Request(object):\n             path = '/'\n \n         if is_py2:\n+            if isinstance(scheme, str):\n+                scheme = scheme.encode('utf-8')\n+            if isinstance(netloc, str):\n+                netloc = netloc.encode('utf-8')\n             if isinstance(path, str):\n                 path = path.encode('utf-8')\n-\n-        path = requote_path(path)\n+            if isinstance(params, str):\n+                params = params.encode('utf-8')\n+            if isinstance(query, str):\n+                query = query.encode('utf-8')\n+            if isinstance(fragment, str):\n+                fragment = fragment.encode('utf-8')\n \n         url = (urlunparse([ scheme, netloc, path, params, query, fragment ]))\n \n         if self._enc_params:\n             if urlparse(url).query:\n-                return '%s&%s' % (url, self._enc_params)\n-            else:\n-                return '%s?%s' % (url, self._enc_params)\n+                url = '%s&%s' % (url, self._enc_params)\n             else:\n+                url = '%s?%s' % (url, self._enc_params)\n+\n+        url = requote_path(url)\n+\n         return url\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8298b071032e90dd9de3af0a96cbb9ec9cb2e13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 5558 | Contributors (this commit): 45 | Commits (past 90d): 85 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -26,7 +26,7 @@ from .exceptions import (\n     URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_decode_response_unicode,\n-    stream_decompress, guess_filename, requote_path, dict_from_string)\n+    stream_decompress, guess_filename, requote_uri, dict_from_string)\n \n from .compat import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, str, bytes, SimpleCookie, is_py3, is_py2\n \n@@ -342,7 +342,7 @@ class Request(object):\n             else:\n                 url = '%s?%s' % (url, self._enc_params)\n \n-        url = requote_path(url)\n+        url = requote_uri(url)\n \n         return url\n \n\n@@ -419,14 +419,14 @@ def unquote_unreserved(uri):\n             parts[i] = '%' + parts[i]\n     return ''.join(parts)\n \n-def requote_path(path):\n-    \"\"\"Re-quote the given URL path component.\n+def requote_uri(uri):\n+    \"\"\"Re-quote the given URI.\n \n-    This function passes the given path through an unquote/quote cycle to\n+    This function passes the given URI through an unquote/quote cycle to\n     ensure that it is fully and consistently quoted.\n     \"\"\"\n     # Unquote only the unreserved characters\n     # Then quote only illegal characters (do not quote reserved, unreserved,\n     # or '%')\n-    return quote(unquote_unreserved(path), safe=\"!#$%&'()*+,/:;=?@[]~\")\n+    return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")\n     return \"/\".join(parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d39cdc45d13c36faf6cbb32425afa7256bd81e5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4534 | Contributors (this commit): 43 | Commits (past 90d): 71 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -196,7 +196,7 @@ class Request(object):\n \n             # Save original response for later.\n             response.raw = resp\n-            response.url = self.full_url\n+            response.url = self.full_url.decode('utf-8')\n \n             return response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c0f066626eacc1e412f0288906c681512d8761e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2163 | Contributors (this commit): 23 | Commits (past 90d): 40 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,6 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n-\n-\n import io\n import json\n import time\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#58bf1588401410e771797c06a8def16a9c7f53ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 71 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ This module contains the set of Requests' exceptions.\n \n \"\"\"\n \n-class RequestException(Exception):\n+class RequestException(RuntimeError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#75b0c4be1b71831768e44517b63258f68b04792e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 314 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -7,8 +7,6 @@ requests.auth\n This module contains the authentication handlers for Requests.\n \"\"\"\n \n-from __future__ import unicode_literals\n-\n import time\n import hashlib\n \n@@ -21,7 +19,7 @@ from .utils import randombytes, parse_dict_header\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n-    return 'Basic ' + b64encode((\"%s:%s\" % (username, password)).encode('utf-8')).strip().decode('utf-8')\n+    return 'Basic ' + b64encode(('%s:%s' % (username, password)).encode('latin1')).strip().decode('latin1')\n \n \n class AuthBase(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
