{"custom_id": "requests#3004ad539875ffc2c9ec5a376af7203189ce6fe1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2881 | Contributors (this commit): 47 | Commits (past 90d): 39 | Contributors (cumulative): 54 | DMM Complexity: None\n\nDIFF:\n@@ -118,7 +118,7 @@ class HTTPAdapter(BaseAdapter):\n         :param verify: Whether we should actually verify the certificate.\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n-        if url.startswith('https') and verify:\n+        if url.lower.startswith('https') and verify:\n \n             cert_loc = None\n \n\n@@ -467,7 +467,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"Returns the appropriate connnection adapter for the given URL.\"\"\"\n         for (prefix, adapter) in self.adapters.items():\n \n-            if url.startswith(prefix):\n+            if url.lower.startswith(prefix):\n                 return adapter\n \n         # Nothing matches :-/\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5e94f38001fdaccda924aab9e5f0ffc064492129", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 25 | Churn Cumulative: 6097 | Contributors (this commit): 82 | Commits (past 90d): 66 | Contributors (cumulative): 105 | DMM Complexity: 1.0\n\nDIFF:\n@@ -118,7 +118,7 @@ class HTTPAdapter(BaseAdapter):\n         :param verify: Whether we should actually verify the certificate.\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n-        if url.lower.startswith('https') and verify:\n+        if url.lower().startswith('https') and verify:\n \n             cert_loc = None\n \n\n@@ -467,7 +467,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"Returns the appropriate connnection adapter for the given URL.\"\"\"\n         for (prefix, adapter) in self.adapters.items():\n \n-            if url.lower.startswith(prefix):\n+            if url.lower().startswith(prefix):\n                 return adapter\n \n         # Nothing matches :-/\n\n@@ -87,6 +87,27 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(request.url,\n             \"http://example.com/path?key=value&a=b#fragment\")\n \n+    def test_mixed_case_scheme_acceptable(self):\n+        s = requests.Session()\n+        r = requests.Request('GET', 'HTTP://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'hTTp://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'HttP://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'HTTPS://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'hTTps://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'HttPs://httbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+\n     def test_HTTP_200_OK_GET_ALTERNATIVE(self):\n         r = requests.Request('GET', httpbin('get'))\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#01993d21dc7d6fa8f0acf657425d2fead9b2ddea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 3821 | Contributors (this commit): 55 | Commits (past 90d): 39 | Contributors (cumulative): 62 | DMM Complexity: 1.0\n\nDIFF:\n@@ -190,13 +190,13 @@ class HTTPAdapter(BaseAdapter):\n         :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n         \"\"\"\n         proxies = proxies or {}\n-        proxy = proxies.get(urlparse(url).scheme)\n+        proxy = proxies.get(urlparse(url.lower()).scheme)\n \n         if proxy:\n-            proxy = prepend_scheme_if_needed(proxy, urlparse(url).scheme)\n+            proxy = prepend_scheme_if_needed(proxy, urlparse(url.lower()).scheme)\n             conn = ProxyManager(self.poolmanager.connection_from_url(proxy))\n         else:\n-            conn = self.poolmanager.connection_from_url(url)\n+            conn = self.poolmanager.connection_from_url(url.lower())\n \n         return conn\n \n\n@@ -89,22 +89,29 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_mixed_case_scheme_acceptable(self):\n         s = requests.Session()\n-        r = requests.Request('GET', 'HTTP://httbin.org/get')\n+        r = requests.Request('GET', 'http://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'hTTp://httbin.org/get')\n+        s = requests.Session()\n+        r = requests.Request('GET', 'HTTP://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HttP://httbin.org/get')\n+        r = requests.Request('GET', 'hTTp://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HTTPS://httbin.org/get')\n+        r = requests.Request('GET', 'HttP://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'hTTps://httbin.org/get')\n+        r = requests.Request('GET', 'https://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n-        r = requests.Request('GET', 'HttPs://httbin.org/get')\n+        r = requests.Request('GET', 'HTTPS://httpbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'hTTps://httpbin.org/get')\n+        r = s.send(r.prepare())\n+        self.assertEqual(r.status_code,200)\n+        r = requests.Request('GET', 'HttPs://httpbin.org/get')\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code,200)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3bb13f8fbb9d4ed1a20bd33495cdc087eb062ca0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 501 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.2.2'\n-__build__ = 0x010202\n+__version__ = '1.2.3'\n+__build__ = 0x010203\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e715d7184b98f6c2a8c4810e7524e2e9a5a033c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2305 | Contributors (this commit): 44 | Commits (past 90d): 44 | Contributors (cumulative): 44 | DMM Complexity: 0.0\n\nDIFF:\n@@ -97,6 +97,10 @@ class SessionRedirectMixin(object):\n                 parsed_rurl = urlparse(resp.url)\n                 url = '%s:%s' % (parsed_rurl.scheme, url)\n \n+            # The scheme should be lower case...\n+            scheme, uri = url.split('://')\n+            url = '%s://%s' % (scheme.lower(), uri)\n+\n             # Facilitate non-RFC2616-compliant 'location' headers\n             # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n             # Compliant with RFC3986, we percent encode the url.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#72e155e529ae9f1892c5dffb5a021fa36ca0243e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 5547 | Contributors (this commit): 80 | Commits (past 90d): 79 | Contributors (cumulative): 96 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -98,7 +98,8 @@ class SessionRedirectMixin(object):\n                 url = '%s:%s' % (parsed_rurl.scheme, url)\n \n             # The scheme should be lower case...\n-            scheme, uri = url.split('://')\n+            if '://' in url:\n+                scheme, uri = url.split('://', 1)\n                 url = '%s://%s' % (scheme.lower(), uri)\n \n             # Facilitate non-RFC2616-compliant 'location' headers\n\n@@ -495,6 +495,9 @@ class RequestsTestCase(unittest.TestCase):\n             headers['ACCEPT'.encode('ascii')],\n             'application/json'\n         )\n+    def test_uppercase_scheme(self):\n+        r = requests.get('HTTP://example.com/')\n+        self.assertEqual(r.status_code, 200)\n \n     def test_transport_adapter_ordering(self):\n         s = requests.Session()\n@@ -702,5 +705,10 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         self.assertEqual(frozenset(cid), keyset)\n \n \n+\n+    def test_uppercase_scheme_redirect(self):\n+        r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3036adc4f156627dce26a6106e22d3631940d3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3241 | Contributors (this commit): 52 | Commits (past 90d): 37 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -708,7 +708,7 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n \n     def test_uppercase_scheme_redirect(self):\n         r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n-\n+        self.assertEqual(r.status_code, 200)\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d59510481ad624641ec404bac423e8ab44f0f41b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 3249 | Contributors (this commit): 52 | Commits (past 90d): 38 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -499,6 +499,9 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get('HTTP://example.com/')\n         self.assertEqual(r.status_code, 200)\n \n+    def test_uppercase_scheme_redirect(self):\n+        r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n+        self.assertEqual(r.status_code, 200)\n     def test_transport_adapter_ordering(self):\n         s = requests.Session()\n         order = ['https://', 'http://']\n@@ -705,10 +708,5 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         self.assertEqual(frozenset(cid), keyset)\n \n \n-\n-    def test_uppercase_scheme_redirect(self):\n-        r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n-        self.assertEqual(r.status_code, 200)\n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2c5ea69e5df963a4914424639b2a7382cf82e4fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3251 | Contributors (this commit): 52 | Commits (past 90d): 30 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -495,6 +495,7 @@ class RequestsTestCase(unittest.TestCase):\n             headers['ACCEPT'.encode('ascii')],\n             'application/json'\n         )\n+\n     def test_uppercase_scheme(self):\n         r = requests.get('HTTP://example.com/')\n         self.assertEqual(r.status_code, 200)\n@@ -502,6 +503,7 @@ class RequestsTestCase(unittest.TestCase):\n     def test_uppercase_scheme_redirect(self):\n         r = requests.get(httpbin('redirect-to'), params={'url': 'HTTP://example.com/'})\n         self.assertEqual(r.status_code, 200)\n+\n     def test_transport_adapter_ordering(self):\n         s = requests.Session()\n         order = ['https://', 'http://']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#93be6916f98f191eee9ac053994f61e99869735b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 26 | Churn Cumulative: 2017 | Contributors (this commit): 46 | Commits (past 90d): 7 | Contributors (cumulative): 55 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,7 +83,7 @@ except ImportError:\n # ---------\n \n if is_py2:\n-    from urllib import quote, unquote, quote_plus, unquote_plus, urlencode\n+    from urllib import quote, unquote, quote_plus, unquote_plus, urlencode, getproxies, proxy_bypass\n     from urlparse import urlparse, urlunparse, urljoin, urlsplit, urldefrag\n     from urllib2 import parse_http_list\n     import cookielib\n@@ -100,7 +100,7 @@ if is_py2:\n \n elif is_py3:\n     from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus, urldefrag\n-    from urllib.request import parse_http_list\n+    from urllib.request import parse_http_list, getproxies, proxy_bypass\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n     from io import StringIO\n\n@@ -22,6 +22,7 @@ from . import __version__\n from . import certs\n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n+from .compat import getproxies, proxy_bypass\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n \n@@ -386,25 +387,17 @@ def requote_uri(uri):\n def get_environ_proxies(url):\n     \"\"\"Return a dict of environment proxies.\"\"\"\n \n-    proxy_keys = [\n-        'all',\n-        'http',\n-        'https',\n-        'ftp',\n-        'socks'\n-    ]\n-\n     get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n \n     # First check whether no_proxy is defined. If it is, check that the URL\n     # we're getting isn't in the no_proxy list.\n     no_proxy = get_proxy('no_proxy')\n+    netloc = urlparse(url).netloc\n     \n     if no_proxy:\n         # We need to check whether we match here. We need to see if we match\n         # the end of the netloc, both with and without the port.\n         no_proxy = no_proxy.split(',')\n-        netloc = urlparse(url).netloc\n         \n         for host in no_proxy:\n             if netloc.endswith(host) or netloc.split(':')[0].endswith(host):\n@@ -412,10 +405,15 @@ def get_environ_proxies(url):\n                 # to apply the proxies on this URL.\n                 return {}\n                 \n+    # If the system proxy settings indicate that this URL should be bypassed,\n+    # don't proxy.\n+    if proxy_bypass(netloc):\n+        return {}\n+\n     # If we get here, we either didn't have no_proxy set or we're not going\n-    # anywhere that no_proxy applies to.\n-    proxies = [(key, get_proxy(key + '_proxy')) for key in proxy_keys]\n-    return dict([(key, val) for (key, val) in proxies if val])\n+    # anywhere that no_proxy applies to, and the system settings don't require\n+    # bypassing the proxy for the current URL.\n+    return getproxies()\n     \n \n def default_user_agent():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#961790f95c7c06dc073d882acb28810a22d27b77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 575 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -359,12 +359,8 @@ def morsel_to_cookie(morsel):\n         value=morsel.value,\n         version=morsel['version'] or 0,\n         port=None,\n-        port_specified=False,\n         domain=morsel['domain'],\n-        domain_specified=bool(morsel['domain']),\n-        domain_initial_dot=morsel['domain'].startswith('.'),\n         path=morsel['path'],\n-        path_specified=bool(morsel['path']),\n         secure=bool(morsel['secure']),\n         expires=morsel['max-age'] or morsel['expires'],\n         discard=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#767f758aacba8f70721fc1abbeb1d8ad929a084c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 586 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,6 +6,7 @@ Compatibility code to be able to use `cookielib.CookieJar` with requests.\n requests.utils imports from here, so be careful with imports.\n \"\"\"\n \n+import time\n import collections\n from .compat import cookielib, urlparse, Morsel\n \n@@ -354,6 +355,14 @@ def create_cookie(name, value, **kwargs):\n \n def morsel_to_cookie(morsel):\n     \"\"\"Convert a Morsel object into a Cookie containing the one k/v pair.\"\"\"\n+    expires = None\n+    if morsel[\"max-age\"]:\n+        expires = time.time() + morsel[\"max-age\"]\n+    elif morsel['expires']:\n+        expires = morsel['expires']\n+        if type(expires) == type(\"\"):\n+            time_template = \"%a, %d-%b-%Y %H:%M:%S GMT\"\n+            expires = time.mktime(time.strptime(expires, time_template))\n     c = create_cookie(\n         name=morsel.key,\n         value=morsel.value,\n@@ -362,7 +371,7 @@ def morsel_to_cookie(morsel):\n         domain=morsel['domain'],\n         path=morsel['path'],\n         secure=bool(morsel['secure']),\n-        expires=morsel['max-age'] or morsel['expires'],\n+        expires=expires,\n         discard=False,\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ed976ea7147a9d0c18998e02b16d691b6798a3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 6 | Files Changed: 7 | Hunks: 12 | Methods Changed: 9 | Complexity Δ (Sum/Max): 15/13 | Churn Δ: 58 | Churn Cumulative: 4437 | Contributors (this commit): 6 | Commits (past 90d): 16 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -110,7 +110,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n             if self.assert_fingerprint:\n                 assert_fingerprint(self.sock.getpeercert(binary_form=True),\n                                    self.assert_fingerprint)\n-            else:\n+            elif self.assert_hostname is not False:\n                 match_hostname(self.sock.getpeercert(),\n                                self.assert_hostname or self.host)\n \n@@ -513,6 +513,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n \n     :class:`.VerifiedHTTPSConnection` uses one of ``assert_fingerprint``,\n     ``assert_hostname`` and ``host`` in this order to verify connections.\n+    If ``assert_hostname`` is False, no verification is done.\n \n     The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs`` and\n     ``ssl_version`` are only used if :mod:`ssl` is available and are fed into\n\n@@ -33,7 +33,7 @@ class NTLMConnectionPool(HTTPSConnectionPool):\n     def __init__(self, user, pw, authurl, *args, **kwargs):\n         \"\"\"\n         authurl is a random URL on the server that is protected by NTLM.\n-        user is the Windows user, probably in the DOMAIN\\username format.\n+        user is the Windows user, probably in the DOMAIN\\\\username format.\n         pw is the password for the user.\n         \"\"\"\n         super(NTLMConnectionPool, self).__init__(*args, **kwargs)\n\n@@ -115,6 +115,9 @@ class WrappedSocket(object):\n     def sendall(self, data):\n         return self.connection.sendall(data)\n \n+    def close(self):\n+        return self.connection.shutdown()\n+\n     def getpeercert(self, binary_form=False):\n         x509 = self.connection.get_peer_certificate()\n         if not x509:\n\n@@ -1,5 +1,5 @@\n # urllib3/filepost.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n\n@@ -6,6 +6,11 @@\n \n import logging\n \n+try:  # Python 3\n+    from urllib.parse import urljoin\n+except ImportError:\n+    from urlparse import urljoin\n+\n from ._collections import RecentlyUsedContainer\n from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool\n from .connectionpool import connection_from_url, port_by_scheme\n@@ -145,6 +150,10 @@ class PoolManager(RequestMethods):\n         if not redirect_location:\n             return response\n \n+        # Support relative URLs for redirecting.\n+        redirect_location = urljoin(url, redirect_location)\n+\n+        # RFC 2616, Section 10.3.4\n         if response.status == 303:\n             method = 'GET'\n \n\n@@ -30,7 +30,7 @@ class RequestMethods(object):\n     in the URL (such as GET, HEAD, DELETE).\n \n     :meth:`.request_encode_body` is for sending requests whose fields are\n-    encoded in the *body* of the request using multipart or www-orm-urlencoded\n+    encoded in the *body* of the request using multipart or www-form-urlencoded\n     (such as for POST, PUT, PATCH).\n \n     :meth:`.request` is for making any kind of request, it will look up the\n\n@@ -1,5 +1,5 @@\n # urllib3/response.py\n-# Copyright 2008-2012 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+# Copyright 2008-2013 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n #\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n@@ -7,6 +7,7 @@\n \n import logging\n import zlib\n+import io\n \n from .exceptions import DecodeError\n from .packages.six import string_types as basestring, binary_type\n@@ -48,7 +49,7 @@ def _get_decoder(mode):\n     return DeflateDecoder()\n \n \n-class HTTPResponse(object):\n+class HTTPResponse(io.IOBase):\n     \"\"\"\n     HTTP Response container.\n \n@@ -239,3 +240,35 @@ class HTTPResponse(object):\n \n     def getheader(self, name, default=None):\n         return self.headers.get(name, default)\n+\n+    # Overrides from io.IOBase\n+    def close(self):\n+        if not self.closed:\n+            self._fp.close()\n+\n+    @property\n+    def closed(self):\n+        if self._fp is None:\n+            return True\n+        elif hasattr(self._fp, 'closed'):\n+            return self._fp.closed\n+        elif hasattr(self._fp, 'isclosed'):  # Python 2\n+            return self._fp.isclosed()\n+        else:\n+            return True\n+\n+    def fileno(self):\n+        if self._fp is None:\n+            raise IOError(\"HTTPResponse has no file to get a fileno from\")\n+        elif hasattr(self._fp, \"fileno\"):\n+            return self._fp.fileno()\n+        else:\n+            raise IOError(\"The file-like object  this HTTPResponse is wrapped \"\n+                          \"around has no file descriptor\")\n+\n+    def flush(self):\n+        if self._fp is not None and hasattr(self._fp, 'flush'):\n+            return self._fp.flush()\n+\n+    def readable(self):\n+        return True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#798a1ffdec682fe8b9e0c3386f445ab6e1fd801c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 7 | Churn Cumulative: 3258 | Contributors (this commit): 53 | Commits (past 90d): 57 | Contributors (cumulative): 53 | DMM Complexity: 1.0\n\nDIFF:\n@@ -169,6 +169,7 @@ class RequestsTestCase(unittest.TestCase):\n             }\n         )\n         assert 'foo' not in s.cookies\n+<<<<<<< HEAD\n \n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n@@ -189,6 +190,12 @@ class RequestsTestCase(unittest.TestCase):\n         # Make sure the session cj is still the custom one\n         assert s.cookies is cj\n     \n+    def test_requests_in_history_are_not_overridden(self):\n+        resp = requests.get(httpbin('redirect/3'))\n+        urls = [r.url for r in resp.history]\n+        req_urls = [r.request.url for r in resp.history]\n+        self.assertEquals(urls, req_urls)\n+        \n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#716b627c1e7c86af722affe973a11df4d5812a1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 5581 | Contributors (this commit): 80 | Commits (past 90d): 111 | Contributors (cumulative): 97 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,15 +71,13 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+\n+        # ((resp.status_code is codes.see_other))\n+        while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n             prepared_request = PreparedRequest()\n             prepared_request.body = req.body\n             prepared_request.headers = req.headers.copy()\n             prepared_request.hooks = req.hooks\n-        prepared_request.method = req.method\n-        prepared_request.url = req.url\n-\n-        # ((resp.status_code is codes.see_other))\n-        while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n \n             resp.content  # Consume socket so it can be released\n \n@@ -90,7 +88,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = prepared_request.method\n+            method = req.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n@@ -114,12 +112,12 @@ class SessionRedirectMixin(object):\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n             if (resp.status_code == codes.see_other and\n-                    prepared_request.method != 'HEAD'):\n+                    method != 'HEAD'):\n                 method = 'GET'\n \n             # Do what the browsers do, despite standards...\n             if (resp.status_code in (codes.moved, codes.found) and\n-                    prepared_request.method not in ('GET', 'HEAD')):\n+                    method not in ('GET', 'HEAD')):\n                 method = 'GET'\n \n             prepared_request.method = method\n\n@@ -169,7 +169,6 @@ class RequestsTestCase(unittest.TestCase):\n             }\n         )\n         assert 'foo' not in s.cookies\n-<<<<<<< HEAD\n \n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ecf57cac5ce1d9e365b52ded97e59038287c6a9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 39 | Churn Cumulative: 1240 | Contributors (this commit): 6 | Commits (past 90d): 6 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,6 +11,7 @@ import io\n \n from .exceptions import DecodeError\n from .packages.six import string_types as basestring, binary_type\n+from .util import is_fp_closed\n \n \n log = logging.getLogger(__name__)\n@@ -201,6 +202,29 @@ class HTTPResponse(io.IOBase):\n             if self._original_response and self._original_response.isclosed():\n                 self.release_conn()\n \n+    def stream(self, amt=2**16, decode_content=None):\n+        \"\"\"\n+        A generator wrapper for the read() method. A call will block until\n+        ``amt`` bytes have been read from the connection or until the\n+        connection is closed.\n+\n+        :param amt:\n+            How much of the content to read. The generator will return up to\n+            much data per iteration, but may return less. This is particularly\n+            likely when using compressed data. However, the empty string will\n+            never be returned.\n+\n+        :param decode_content:\n+            If True, will attempt to decode the body based on the\n+            'content-encoding' header.\n+        \"\"\"\n+        while not is_fp_closed(self._fp):\n+            data = self.read(amt=amt, decode_content=decode_content)\n+\n+            if data:\n+                yield data\n+\n+\n     @classmethod\n     def from_httplib(ResponseCls, r, **response_kw):\n         \"\"\"\n\n@@ -31,7 +31,6 @@ try:  # Test for SSL features\n except ImportError:\n     pass\n \n-\n from .packages import six\n from .exceptions import LocationParseError, SSLError\n \n@@ -341,6 +340,20 @@ def assert_fingerprint(cert, fingerprint):\n                        .format(hexlify(fingerprint_bytes),\n                                hexlify(cert_digest)))\n \n+def is_fp_closed(obj):\n+    \"\"\"\n+    Checks whether a given file-like object is closed.\n+\n+    :param obj:\n+        The file-like object to check.\n+    \"\"\"\n+    if hasattr(obj, 'fp'):\n+        # Object is a container for another file-like object that gets released\n+        # on exhaustion (e.g. HTTPResponse)\n+        return obj.fp is None\n+\n+    return obj.closed\n+\n \n if SSLContext is not None:  # Python 3.2+\n     def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1faa76a86fe170fcab8ddfeb0d069ca10793f8a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 8734 | Contributors (this commit): 112 | Commits (past 90d): 19 | Contributors (cumulative): 112 | DMM Complexity: 1.0\n\nDIFF:\n@@ -537,11 +537,18 @@ class Response(object):\n             return iter_slices(self._content, chunk_size)\n \n         def generate():\n+            try:\n+                # Special case for urllib3.\n+                for chunk in self.raw.stream(chunk_size, decode_content=True):\n+                    yield chunk\n+            except AttributeError:\n+                # Standard file-like object.\n                 while 1:\n                     chunk = self.raw.read(chunk_size, decode_content=True)\n                     if not chunk:\n                         break\n                     yield chunk\n+\n             self._content_consumed = True\n \n         gen = generate()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#90837359632b43aba7900b65b42744715f0b739a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1862 | Contributors (this commit): 43 | Commits (past 90d): 5 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -302,7 +302,7 @@ def stream_decode_response_unicode(iterator, r):\n         rv = decoder.decode(chunk)\n         if rv:\n             yield rv\n-    rv = decoder.decode('', final=True)\n+    rv = decoder.decode(b'', final=True)\n     if rv:\n         yield rv\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#188e7609b36eb2100abe3a6a5c3bbebcf1205cfb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 2326 | Contributors (this commit): 45 | Commits (past 90d): 20 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -289,8 +289,8 @@ class Session(SessionRedirectMixin):\n             for (k, v) in env_proxies.items():\n                 proxies.setdefault(k, v)\n \n-            # Set environment's basic authentication.\n-            if not auth:\n+            # Set environment's basic authentication if not explicitly set.\n+            if not auth and not self.auth:\n                 auth = get_netrc_auth(url)\n \n             # Look for configuration.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d9c49ad30d1107591f3b5150da6f95ec90c63784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 28 | Churn Cumulative: 3287 | Contributors (this commit): 54 | Commits (past 90d): 26 | Contributors (cumulative): 54 | DMM Complexity: 1.0\n\nDIFF:\n@@ -234,6 +234,34 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(url)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_basicauth_with_netrc(self):\n+        auth = ('user', 'pass')\n+        wrong_auth = ('wronguser', 'wrongpass')\n+        url = httpbin('basic-auth', 'user', 'pass')\n+\n+        def get_netrc_auth_mock(url):\n+            return auth\n+        requests.sessions.get_netrc_auth = get_netrc_auth_mock\n+\n+        # Should use netrc and work.\n+        r = requests.get(url)\n+        self.assertEqual(r.status_code, 200)\n+\n+        # Given auth should override and fail.\n+        r = requests.get(url, auth=wrong_auth)\n+        self.assertEqual(r.status_code, 401)\n+\n+        s = requests.session()\n+        \n+        # Should use netrc and work.\n+        r = s.get(url)\n+        self.assertEqual(r.status_code, 200)\n+\n+        # Given auth should override and fail.\n+        s.auth = wrong_auth\n+        r = s.get(url)\n+        self.assertEqual(r.status_code, 401)\n+\n     def test_DIGEST_HTTP_200_OK_GET(self):\n \n         auth = HTTPDigestAuth('user', 'pass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cdab4fabf448f287f6f537265aa23ac06a080599", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/3 | Churn Δ: 10 | Churn Cumulative: 3883 | Contributors (this commit): 64 | Commits (past 90d): 28 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -259,6 +259,11 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Deletes a cookie given a name. Wraps cookielib.CookieJar's remove_cookie_by_name().\"\"\"\n         remove_cookie_by_name(self, name)\n \n+    def set_cookie(self, cookie, *args, **kwargs):\n+        if cookie.value.startswith('\"') and cookie.value.endswith('\"'):\n+            cookie.value = cookie.value.strip('\\\\\"')\n+        return super(RequestsCookieJar, self).set_cookie(cookie, *args, **kwargs)\n+\n     def update(self, other):\n         \"\"\"Updates this jar with cookies from another CookieJar or dict-like\"\"\"\n         if isinstance(other, cookielib.CookieJar):\n\n@@ -170,6 +170,11 @@ class RequestsTestCase(unittest.TestCase):\n         )\n         assert 'foo' not in s.cookies\n \n+    def test_cookie_quote_wrapped(self):\n+        s = requests.session()\n+        s.get(httpbin('cookies/set?foo=\"bar:baz\"'))\n+        self.assertTrue(s.cookies['foo'] == 'bar:baz')\n+\n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n         s.cookies['foo'] = 'bar'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a8cf5b85027e523c54d3d496ee5467eac90555bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3887 | Contributors (this commit): 64 | Commits (past 90d): 30 | Contributors (cumulative): 69 | DMM Complexity: None\n\nDIFF:\n@@ -261,7 +261,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n \n     def set_cookie(self, cookie, *args, **kwargs):\n         if cookie.value.startswith('\"') and cookie.value.endswith('\"'):\n-            cookie.value = cookie.value.strip('\\\\\"')\n+            cookie.value = cookie.value.replace('\\\\\"', '')\n         return super(RequestsCookieJar, self).set_cookie(cookie, *args, **kwargs)\n \n     def update(self, other):\n\n@@ -173,7 +173,7 @@ class RequestsTestCase(unittest.TestCase):\n     def test_cookie_quote_wrapped(self):\n         s = requests.session()\n         s.get(httpbin('cookies/set?foo=\"bar:baz\"'))\n-        self.assertTrue(s.cookies['foo'] == 'bar:baz')\n+        self.assertTrue(s.cookies['foo'] == '\"bar:baz\"')\n \n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#555472bf1e3ab4ad6c2057c93e195427bda5a18b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8736 | Contributors (this commit): 112 | Commits (past 90d): 9 | Contributors (cumulative): 112 | DMM Complexity: None\n\nDIFF:\n@@ -544,7 +544,7 @@ class Response(object):\n             except AttributeError:\n                 # Standard file-like object.\n                 while 1:\n-                    chunk = self.raw.read(chunk_size, decode_content=True)\n+                    chunk = self.raw.read(chunk_size)\n                     if not chunk:\n                         break\n                     yield chunk\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#41517e2111ce964db9f3a102b89eea103f2dc411", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 10 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,5 +0,0 @@\n-from invoke import run, task\n-\n-@task\n-def build():\n-    print(\"Building!\")\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7bdf37bc272da9ef92a8cf4d58ac886f4c6b2da1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 117 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -18,7 +18,7 @@ _codes = {\n     205: ('reset_content', 'reset'),\n     206: ('partial_content', 'partial'),\n     207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),\n-    208: ('im_used',),\n+    226: ('im_used',),\n \n     # Redirection.\n     300: ('multiple_choices',),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18a736fbe67f5dfd03f95cc9e0d16cda54c9ea4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 118 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -18,6 +18,7 @@ _codes = {\n     205: ('reset_content', 'reset'),\n     206: ('partial_content', 'partial'),\n     207: ('multi_status', 'multiple_status', 'multi_stati', 'multiple_stati'),\n+    208: ('already_reported',),\n     226: ('im_used',),\n \n     # Redirection.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9f119ee420318c113094e15bc5e6d7dbda5c98b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 10 | Files Changed: 4 | Hunks: 12 | Methods Changed: 10 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 25 | Churn Cumulative: 1807 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 16 | DMM Complexity: 0.75\n\nDIFF:\n@@ -5,7 +5,7 @@\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n from collections import MutableMapping\n-from threading import Lock\n+from threading import RLock\n \n try: # Python 2.7+\n     from collections import OrderedDict\n@@ -40,18 +40,18 @@ class RecentlyUsedContainer(MutableMapping):\n         self.dispose_func = dispose_func\n \n         self._container = self.ContainerCls()\n-        self._lock = Lock()\n+        self.lock = RLock()\n \n     def __getitem__(self, key):\n         # Re-insert the item, moving it to the end of the eviction line.\n-        with self._lock:\n+        with self.lock:\n             item = self._container.pop(key)\n             self._container[key] = item\n             return item\n \n     def __setitem__(self, key, value):\n         evicted_value = _Null\n-        with self._lock:\n+        with self.lock:\n             # Possibly evict the existing value of 'key'\n             evicted_value = self._container.get(key, _Null)\n             self._container[key] = value\n@@ -65,21 +65,21 @@ class RecentlyUsedContainer(MutableMapping):\n             self.dispose_func(evicted_value)\n \n     def __delitem__(self, key):\n-        with self._lock:\n+        with self.lock:\n             value = self._container.pop(key)\n \n         if self.dispose_func:\n             self.dispose_func(value)\n \n     def __len__(self):\n-        with self._lock:\n+        with self.lock:\n             return len(self._container)\n \n     def __iter__(self):\n         raise NotImplementedError('Iteration over this class is unlikely to be threadsafe.')\n \n     def clear(self):\n-        with self._lock:\n+        with self.lock:\n             # Copy pointers to all values, then wipe the mapping\n             # under Python 2, this copies the list of values twice :-|\n             values = list(self._container.values())\n@@ -90,5 +90,5 @@ class RecentlyUsedContainer(MutableMapping):\n                 self.dispose_func(value)\n \n     def keys(self):\n-        with self._lock:\n+        with self.lock:\n             return self._container.keys()\n\n@@ -106,6 +106,9 @@ class WrappedSocket(object):\n         self.connection = connection\n         self.socket = socket\n \n+    def fileno(self):\n+        return self.socket.fileno()\n+\n     def makefile(self, mode, bufsize=-1):\n         return _fileobject(self.connection, mode, bufsize)\n \n\n@@ -104,6 +104,7 @@ class PoolManager(RequestMethods):\n \n         pool_key = (scheme, host, port)\n \n+        with self.pools.lock:\n           # If the scheme, host, or port doesn't match existing open connections,\n           # open a new ConnectionPool.\n           pool = self.pools.get(pool_key)\n\n@@ -113,7 +113,7 @@ def parse_url(url):\n \n     # While this code has overlap with stdlib's urlparse, it is much\n     # simplified for our needs and less annoying.\n-    # Additionally, this imeplementations does silly things to be optimal\n+    # Additionally, this implementations does silly things to be optimal\n     # on CPython.\n \n     scheme = None\n@@ -142,7 +142,8 @@ def parse_url(url):\n \n     # IPv6\n     if url and url[0] == '[':\n-        host, url = url[1:].split(']', 1)\n+        host, url = url.split(']', 1)\n+        host += ']'\n \n     # Port\n     if ':' in url:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b84547d78699a3a5c75dbdf2c2e422dbaa83b988", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 8747 | Contributors (this commit): 112 | Commits (past 90d): 8 | Contributors (cumulative): 112 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,7 @@ from .utils import (\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len)\n from .compat import (\n-    cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n+    cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring)\n \n CONTENT_CHUNK_SIZE = 10 * 1024\n@@ -267,6 +267,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def __repr__(self):\n         return '<PreparedRequest [%s]>' % (self.method)\n \n+    def copy(self):\n+        p = PreparedRequest()\n+        p.method = self.method\n+        p.url = self.url\n+        p.headers = self.headers\n+        p.body = self.body\n+        p.hooks = self.hooks\n+        return p\n+\n     def prepare_method(self, method):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
