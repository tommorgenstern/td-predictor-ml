{"custom_id": "requests#c65065177f528595a9b55dd62a916146ecdf40cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 260 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 25 | Complexity Δ (Sum/Max): 59/59 | Churn Δ: 260 | Churn Cumulative: 260 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.8727272727272727\n\nDIFF:\n@@ -0,0 +1,260 @@\n+# Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.\n+# Passes Python2.7's test suite and incorporates all the latest updates.\n+# Copyright 2009 Raymond Hettinger, released under the MIT License.\n+# http://code.activestate.com/recipes/576693/\n+\n+try:\n+    from thread import get_ident as _get_ident\n+except ImportError:\n+    from dummy_thread import get_ident as _get_ident\n+\n+try:\n+    from _abcoll import KeysView, ValuesView, ItemsView\n+except ImportError:\n+    pass\n+\n+\n+class OrderedDict(dict):\n+    'Dictionary that remembers insertion order'\n+    # An inherited dict maps keys to values.\n+    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n+    # The remaining methods are order-aware.\n+    # Big-O running times for all methods are the same as for regular dictionaries.\n+\n+    # The internal self.__map dictionary maps keys to links in a doubly linked list.\n+    # The circular doubly linked list starts and ends with a sentinel element.\n+    # The sentinel element never gets deleted (this simplifies the algorithm).\n+    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].\n+\n+    def __init__(self, *args, **kwds):\n+        '''Initialize an ordered dictionary.  Signature is the same as for\n+        regular dictionaries, but keyword arguments are not recommended\n+        because their insertion order is arbitrary.\n+\n+        '''\n+        if len(args) > 1:\n+            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n+        try:\n+            self.__root\n+        except AttributeError:\n+            self.__root = root = []                     # sentinel node\n+            root[:] = [root, root, None]\n+            self.__map = {}\n+        self.__update(*args, **kwds)\n+\n+    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):\n+        'od.__setitem__(i, y) <==> od[i]=y'\n+        # Setting a new item creates a new link which goes at the end of the linked\n+        # list, and the inherited dictionary is updated with the new key/value pair.\n+        if key not in self:\n+            root = self.__root\n+            last = root[0]\n+            last[1] = root[0] = self.__map[key] = [last, root, key]\n+        dict_setitem(self, key, value)\n+\n+    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n+        'od.__delitem__(y) <==> del od[y]'\n+        # Deleting an existing item uses self.__map to find the link which is\n+        # then removed by updating the links in the predecessor and successor nodes.\n+        dict_delitem(self, key)\n+        link_prev, link_next, key = self.__map.pop(key)\n+        link_prev[1] = link_next\n+        link_next[0] = link_prev\n+\n+    def __iter__(self):\n+        'od.__iter__() <==> iter(od)'\n+        root = self.__root\n+        curr = root[1]\n+        while curr is not root:\n+            yield curr[2]\n+            curr = curr[1]\n+\n+    def __reversed__(self):\n+        'od.__reversed__() <==> reversed(od)'\n+        root = self.__root\n+        curr = root[0]\n+        while curr is not root:\n+            yield curr[2]\n+            curr = curr[0]\n+\n+    def clear(self):\n+        'od.clear() -> None.  Remove all items from od.'\n+        try:\n+            for node in self.__map.itervalues():\n+                del node[:]\n+            root = self.__root\n+            root[:] = [root, root, None]\n+            self.__map.clear()\n+        except AttributeError:\n+            pass\n+        dict.clear(self)\n+\n+    def popitem(self, last=True):\n+        '''od.popitem() -> (k, v), return and remove a (key, value) pair.\n+        Pairs are returned in LIFO order if last is true or FIFO order if false.\n+\n+        '''\n+        if not self:\n+            raise KeyError('dictionary is empty')\n+        root = self.__root\n+        if last:\n+            link = root[0]\n+            link_prev = link[0]\n+            link_prev[1] = root\n+            root[0] = link_prev\n+        else:\n+            link = root[1]\n+            link_next = link[1]\n+            root[1] = link_next\n+            link_next[0] = root\n+        key = link[2]\n+        del self.__map[key]\n+        value = dict.pop(self, key)\n+        return key, value\n+\n+    # -- the following methods do not depend on the internal structure --\n+\n+    def keys(self):\n+        'od.keys() -> list of keys in od'\n+        return list(self)\n+\n+    def values(self):\n+        'od.values() -> list of values in od'\n+        return [self[key] for key in self]\n+\n+    def items(self):\n+        'od.items() -> list of (key, value) pairs in od'\n+        return [(key, self[key]) for key in self]\n+\n+    def iterkeys(self):\n+        'od.iterkeys() -> an iterator over the keys in od'\n+        return iter(self)\n+\n+    def itervalues(self):\n+        'od.itervalues -> an iterator over the values in od'\n+        for k in self:\n+            yield self[k]\n+\n+    def iteritems(self):\n+        'od.iteritems -> an iterator over the (key, value) items in od'\n+        for k in self:\n+            yield (k, self[k])\n+\n+    def update(*args, **kwds):\n+        '''od.update(E, **F) -> None.  Update od from dict/iterable E and F.\n+\n+        If E is a dict instance, does:           for k in E: od[k] = E[k]\n+        If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]\n+        Or if E is an iterable of items, does:   for k, v in E: od[k] = v\n+        In either case, this is followed by:     for k, v in F.items(): od[k] = v\n+\n+        '''\n+        if len(args) > 2:\n+            raise TypeError('update() takes at most 2 positional '\n+                            'arguments (%d given)' % (len(args),))\n+        elif not args:\n+            raise TypeError('update() takes at least 1 argument (0 given)')\n+        self = args[0]\n+        # Make progressively weaker assumptions about \"other\"\n+        other = ()\n+        if len(args) == 2:\n+            other = args[1]\n+        if isinstance(other, dict):\n+            for key in other:\n+                self[key] = other[key]\n+        elif hasattr(other, 'keys'):\n+            for key in other.keys():\n+                self[key] = other[key]\n+        else:\n+            for key, value in other:\n+                self[key] = value\n+        for key, value in kwds.items():\n+            self[key] = value\n+\n+    __update = update  # let subclasses override update without breaking __init__\n+\n+    __marker = object()\n+\n+    def pop(self, key, default=__marker):\n+        '''od.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n+        If key is not found, d is returned if given, otherwise KeyError is raised.\n+\n+        '''\n+        if key in self:\n+            result = self[key]\n+            del self[key]\n+            return result\n+        if default is self.__marker:\n+            raise KeyError(key)\n+        return default\n+\n+    def setdefault(self, key, default=None):\n+        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'\n+        if key in self:\n+            return self[key]\n+        self[key] = default\n+        return default\n+\n+    def __repr__(self, _repr_running={}):\n+        'od.__repr__() <==> repr(od)'\n+        call_key = id(self), _get_ident()\n+        if call_key in _repr_running:\n+            return '...'\n+        _repr_running[call_key] = 1\n+        try:\n+            if not self:\n+                return '%s()' % (self.__class__.__name__,)\n+            return '%s(%r)' % (self.__class__.__name__, self.items())\n+        finally:\n+            del _repr_running[call_key]\n+\n+    def __reduce__(self):\n+        'Return state information for pickling'\n+        items = [[k, self[k]] for k in self]\n+        inst_dict = vars(self).copy()\n+        for k in vars(OrderedDict()):\n+            inst_dict.pop(k, None)\n+        if inst_dict:\n+            return (self.__class__, (items,), inst_dict)\n+        return self.__class__, (items,)\n+\n+    def copy(self):\n+        'od.copy() -> a shallow copy of od'\n+        return self.__class__(self)\n+\n+    @classmethod\n+    def fromkeys(cls, iterable, value=None):\n+        '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n+        and values equal to v (which defaults to None).\n+\n+        '''\n+        d = cls()\n+        for key in iterable:\n+            d[key] = value\n+        return d\n+\n+    def __eq__(self, other):\n+        '''od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n+        while comparison to a regular mapping is order-insensitive.\n+\n+        '''\n+        if isinstance(other, OrderedDict):\n+            return len(self)==len(other) and self.items() == other.items()\n+        return dict.__eq__(self, other)\n+\n+    def __ne__(self, other):\n+        return not self == other\n+\n+    # -- the following methods are only used in Python 2.7 --\n+\n+    def viewkeys(self):\n+        \"od.viewkeys() -> a set-like object providing a view on od's keys\"\n+        return KeysView(self)\n+\n+    def viewvalues(self):\n+        \"od.viewvalues() -> an object providing a view on od's values\"\n+        return ValuesView(self)\n+\n+    def viewitems(self):\n+        \"od.viewitems() -> a set-like object providing a view on od's items\"\n+        return ItemsView(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e0fed46561b609cee05e12472425949d7962585b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 21/21 | Churn Δ: 4 | Churn Cumulative: 657 | Contributors (this commit): 10 | Commits (past 90d): 15 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -97,6 +97,10 @@ class OAuth1(AuthBase):\n                 r.url, r.headers, r.data = self.client.sign(\n                     unicode(r.full_url), unicode(r.method), r.data, r.headers)\n \n+            # Both flows add params to the URL by using r.full_url,\n+            # so this prevents adding it again later\n+            r.params = {}\n+\n             # Having the authorization header, key or value, in unicode will\n             # result in UnicodeDecodeErrors when the request is concatenated\n             # by httplib. This can easily be seen when attaching files.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#82d343fa007a8655f97782c711f0b7d37166aa05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 33 | Files Changed: 1 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 66 | Churn Cumulative: 717 | Contributors (this commit): 14 | Commits (past 90d): 15 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -811,20 +811,20 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         assert not ds1.prefetch\n         assert ds2.prefetch\n \n-    def test_invalid_content(self):\n-        # WARNING: if you're using a terrible DNS provider (comcast),\n-        # this will fail.\n-        try:\n-            hah = 'http://somedomainthatclearlydoesntexistg.com'\n-            r = get(hah, allow_redirects=False)\n-        except requests.ConnectionError:\n-            pass   # \\o/\n-        else:\n-            assert False\n+    # def test_invalid_content(self):\n+    #     # WARNING: if you're using a terrible DNS provider (comcast),\n+    #     # this will fail.\n+    #     try:\n+    #         hah = 'http://somedomainthatclearlydoesntexistg.com'\n+    #         r = get(hah, allow_redirects=False)\n+    #     except requests.ConnectionError:\n+    #         pass   # \\o/\n+    #     else:\n+    #         assert False\n \n-        config = {'safe_mode': True}\n-        r = get(hah, allow_redirects=False, config=config)\n-        assert r.content == None\n+    #     config = {'safe_mode': True}\n+    #     r = get(hah, allow_redirects=False, config=config)\n+    #     assert r.content == None\n \n     def test_cached_response(self):\n \n@@ -868,31 +868,31 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         joined = lines[0] + '\\n' + lines[1] + '\\r\\n' + lines[2]\n         self.assertEqual(joined, quote)\n \n-    def test_safe_mode(self):\n+    # def test_safe_mode(self):\n \n-        safe = requests.session(config=dict(safe_mode=True))\n+    #     safe = requests.session(config=dict(safe_mode=True))\n \n-        # Safe mode creates empty responses for failed requests.\n-        # Iterating on these responses should produce empty sequences\n-        r = get('http://_/', session=safe)\n-        self.assertEqual(list(r.iter_lines()), [])\n-        assert isinstance(r.error, requests.exceptions.ConnectionError)\n+    #     # Safe mode creates empty responses for failed requests.\n+    #     # Iterating on these responses should produce empty sequences\n+    #     r = get('http://0.0.0.0:700/', session=safe)\n+    #     self.assertEqual(list(r.iter_lines()), [])\n+    #     assert isinstance(r.error, requests.exceptions.ConnectionError)\n \n-        r = get('http://_/', session=safe)\n-        self.assertEqual(list(r.iter_content()), [])\n-        assert isinstance(r.error, requests.exceptions.ConnectionError)\n+    #     r = get('http://0.0.0.0:789/', session=safe)\n+    #     self.assertEqual(list(r.iter_content()), [])\n+    #     assert isinstance(r.error, requests.exceptions.ConnectionError)\n \n-        # When not in safe mode, should raise Timeout exception\n-        self.assertRaises(\n-            requests.exceptions.Timeout,\n-            get,\n-            httpbin('stream', '1000'), timeout=0.0001)\n+    #     # When not in safe mode, should raise Timeout exception\n+    #     self.assertRaises(\n+    #         requests.exceptions.Timeout,\n+    #         get,\n+    #         httpbin('stream', '1000'), timeout=0.0001)\n \n-        # In safe mode, should return a blank response\n-        r = get(httpbin('stream', '1000'), timeout=0.0001,\n-                config=dict(safe_mode=True))\n-        assert r.content is None\n-        assert isinstance(r.error, requests.exceptions.Timeout)\n+    #     # In safe mode, should return a blank response\n+    #     r = get(httpbin('stream', '1000'), timeout=0.0001,\n+    #             config=dict(safe_mode=True))\n+    #     assert r.content is None\n+    #     assert isinstance(r.error, requests.exceptions.Timeout)\n \n     def test_upload_binary_data(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#767751599e4d4d7bcf0c5bee3751cbec6ef1fb7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 359 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.2'\n-__build__ = 0x001302\n+__version__ = '0.13.4'\n+__build__ = 0x001304\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9abc9ad1b3e93307b6a82c54ed94faa11d43bd4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 363 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.4'\n-__build__ = 0x001304\n+__version__ = '0.13.5'\n+__build__ = 0x001305\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#02dcc40acd53ffbabd9c1d4bdd584ea8491a739d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 728 | Contributors (this commit): 14 | Commits (past 90d): 16 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -962,5 +962,16 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r.content\n         r.text\n \n+    def test_post_fields_with_multiple_values_and_files(self):\n+        \"\"\"Test that it is possible to POST using the files argument and a\n+        list for a value in the data argument.\"\"\"\n+\n+        data = {'field': ['a', 'b']}\n+        files = {'file': 'Garbled data'}\n+        r = post(httpbin('post'), data=data, files=files)\n+        t = json.loads(r.text)\n+        self.assertEqual(t.get('form'), {'field': 'a, b'})\n+        self.assertEqual(t.get('files'), files)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5e175ef24ce93a14b145a55d1a7f31267602f7b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 30 | Churn Cumulative: 5434 | Contributors (this commit): 74 | Commits (past 90d): 44 | Contributors (cumulative): 74 | DMM Complexity: None\n\nDIFF:\n@@ -486,21 +486,6 @@ class Request(object):\n         body = None\n         content_type = None\n \n-        # Use .netrc auth if none was provided.\n-        if not self.auth and self.config.get('trust_env'):\n-            self.auth = get_netrc_auth(url)\n-\n-        if self.auth:\n-            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n-                # special-case basic HTTP auth\n-                self.auth = HTTPBasicAuth(*self.auth)\n-\n-            # Allow auth to make its changes.\n-            r = self.auth(self)\n-\n-            # Update self to reflect the auth changes.\n-            self.__dict__.update(r.__dict__)\n-\n         # Multi-part file uploads.\n         if self.files:\n             (body, content_type) = self._encode_files(self.files)\n@@ -517,6 +502,21 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n+        # Use .netrc auth if none was provided.\n+        if not self.auth and self.config.get('trust_env'):\n+            self.auth = get_netrc_auth(url)\n+\n+        if self.auth:\n+            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n+                # special-case basic HTTP auth\n+                self.auth = HTTPBasicAuth(*self.auth)\n+\n+            # Allow auth to make its changes.\n+            r = self.auth(self)\n+\n+            # Update self to reflect the auth changes.\n+            self.__dict__.update(r.__dict__)\n+\n         _p = urlparse(url)\n         no_proxy = filter(lambda x:x.strip(), self.proxies.get('no', '').split(','))\n         proxy = self.proxies.get(_p.scheme)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca7ee6865671a96fbdd39dd6fbce988df9141570", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 328 | Contributors (this commit): 7 | Commits (past 90d): 15 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -15,6 +15,8 @@ if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n \n+os.environ['PYTHONDONTWRITEBYTECODE'] = '1'\n+\n packages = [\n     'requests',\n     'requests.packages',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f40b3befc2bb830ae48a2637e3af99fc5bbc768", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 45 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -28,7 +28,8 @@ def catch_exceptions_if_in_safe_mode(function):\n                                             and kwargs.get('session').config.get('safe_mode')):\n             try:\n                 return function(method, url, **kwargs)\n-            except (RequestException, ConnectionError, HTTPError, socket.timeout) as e:\n+            except (RequestException, ConnectionError, HTTPError,\n+                    socket.timeout, socket.gaierror) as e:\n                 r = Response()\n                 r.error = e\n                 r.raw = HTTPResponse() # otherwise, tests fail\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#204649521bf8d165690b78a349d0f7c10d03bb99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 18 | Churn Cumulative: 5452 | Contributors (this commit): 75 | Commits (past 90d): 28 | Contributors (cumulative): 75 | DMM Complexity: 1.0\n\nDIFF:\n@@ -827,17 +827,15 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n-        if (self.status_code >= 300) and (self.status_code < 400) and not allow_redirects:\n-            http_error = HTTPError('%s Redirection: %s' % (self.status_code, self.reason))\n-            http_error.response = self\n-            raise http_error\n+        if 300 <= self.status_code < 400 and not allow_redirects:\n+            http_error_msg = '%s Redirection: %s' % (self.status_code, self.reason)\n \n-        elif (self.status_code >= 400) and (self.status_code < 500):\n-            http_error = HTTPError('%s Client Error: %s' % (self.status_code, self.reason))\n-            http_error.response = self\n-            raise http_error\n+        elif 400 <= self.status_code < 500:\n+            http_error_msg = '%s Client Error: %s' % (self.status_code, self.reason)\n \n-        elif (self.status_code >= 500) and (self.status_code < 600):\n-            http_error = HTTPError('%s Server Error: %s' % (self.status_code, self.reason))\n+        elif 500 <= self.status_code < 600:\n+            http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n+\n+        http_error = HTTPError(http_error_msg)\n         http_error.response = self\n         raise http_error\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#42ddc4c9e8faff8103adf1e083f0260945357646", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 39 | Churn Cumulative: 5491 | Contributors (this commit): 76 | Commits (past 90d): 35 | Contributors (cumulative): 76 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,9 +37,10 @@ from .compat import (\n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n \n+\n class Request(object):\n-    \"\"\"The :class:`Request <Request>` object. It carries out all functionality of\n-    Requests. Recommended interface is with the Requests functions.\n+    \"\"\"The :class:`Request <Request>` object. It carries out all functionality\n+    of Requests. Recommended interface is with the Requests functions.\n     \"\"\"\n \n     def __init__(self,\n@@ -311,9 +312,7 @@ class Request(object):\n         if parameters are supplied as a dict.\n         \"\"\"\n \n-        if isinstance(data, bytes):\n-            return data\n-        if isinstance(data, str):\n+        if isinstance(data, (str, bytes)):\n             return data\n         elif hasattr(data, 'read'):\n             return data\n@@ -321,7 +320,8 @@ class Request(object):\n             try:\n                 dict(data)\n             except ValueError:\n-                raise ValueError('Unable to encode lists with elements that are not 2-tuples.')\n+                raise ValueError('Unable to encode lists with elements that '\n+                        'are not 2-tuples.')\n \n             params = list(data.items() if isinstance(data, dict) else data)\n             result = []\n@@ -340,11 +340,14 @@ class Request(object):\n             return None\n \n         try:\n-            fields = self.data.copy()\n+            fields = self.data.items()\n         except AttributeError:\n-            fields = dict(self.data)\n+            fields = dict(self.data).items()\n \n-        for (k, v) in list(files.items()):\n+        if isinstance(files, dict):\n+            files = files.items()\n+\n+        for (k, v) in files:\n             # support for explicit filename\n             if isinstance(v, (tuple, list)):\n                 fn, fp = v\n@@ -353,14 +356,18 @@ class Request(object):\n                 fp = v\n             if isinstance(fp, (bytes, str)):\n                 fp = StringIO(fp)\n-            fields.update({k: (fn, fp.read())})\n+            fields.append((k, (fn, fp.read())))\n \n-        for field in fields:\n-            if isinstance(fields[field], float):\n-                fields[field] = str(fields[field])\n-            if isinstance(fields[field], list):\n-                newvalue = ', '.join(fields[field])\n-                fields[field] = newvalue\n+        new_fields = []\n+        for field, val in fields:\n+            if isinstance(val, float):\n+                new_fields.append((field, str(val)))\n+            elif isinstance(val, list):\n+                newvalue = ', '.join(val)\n+                new_fields.append((field, newvalue))\n+            else:\n+                new_fields.append((field, val))\n+        fields = new_fields\n \n         (body, content_type) = encode_multipart_formdata(fields)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b33bc289f78adde0df16589122d8cdc8eb09567", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 43 | Churn Cumulative: 771 | Contributors (this commit): 15 | Commits (past 90d): 15 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -309,11 +309,13 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             with open(__file__) as f:\n                 post2 = post(url, files={'some': f})\n+                post3 = post(url, files=[('some', f)])\n             self.assertEqual(post2.status_code, 200)\n-\n-            post3 = post(url, data='[{\"some\": \"json\"}]')\n             self.assertEqual(post3.status_code, 200)\n \n+            post4 = post(url, data='[{\"some\": \"json\"}]')\n+            self.assertEqual(post4.status_code, 200)\n+\n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n \n         for service in SERVICES:\n@@ -323,8 +325,13 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n                 post1 = post(url,\n                              files={'some': f},\n                              data={'some': 'data'})\n+                post2 = post(url, data={'some': 'data'}, files=[('some', f)])\n+                post3 = post(url, data=[('some', 'data')],\n+                        files=[('some', f)])\n \n             self.assertEqual(post1.status_code, 200)\n+            self.assertEqual(post2.status_code, 200)\n+            self.assertEqual(post3.status_code, 200)\n \n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n \n@@ -349,10 +356,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             post1 = post(url, files={'fname.txt': 'fdata'})\n             self.assertEqual(post1.status_code, 200)\n \n-            post2 = post(url, files={'fname.txt': 'fdata', 'fname2.txt':'more fdata'})\n+            post2 = post(url, files={'fname.txt': 'fdata',\n+                    'fname2.txt': 'more fdata'})\n             self.assertEqual(post2.status_code, 200)\n \n-            post3 = post(url, files={'fname.txt': 'fdata', 'fname2.txt':open(__file__,'rb')})\n+            post3 = post(url, files={'fname.txt': 'fdata',\n+                    'fname2.txt': open(__file__, 'rb')})\n             self.assertEqual(post3.status_code, 200)\n \n             post4 = post(url, files={'fname.txt': 'fdata'})\n@@ -374,9 +383,29 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             post7 = post(url, files={'fname.txt': 'fdata to verify'})\n             rbody = json.loads(post7.text)\n             self.assertTrue(rbody.get('files', None))\n-            self.assertTrue(rbody['files'].get('fname.txt'), None)\n+            self.assertTrue(rbody['files'].get('fname.txt', None))\n             self.assertEqual(rbody['files']['fname.txt'], 'fdata to verify')\n \n+            post8 = post(url, files=[('fname.txt', 'fdata')])\n+            self.assertEqual(post8.status_code, 200)\n+            resp_body = post8.json\n+            self.assertTrue(resp_body.get('files', None))\n+            self.assertTrue(resp_body['files'].get('fname.txt', None))\n+            self.assertEqual(resp_body['files']['fname.txt'], 'fdata')\n+\n+            post9 = post(url, files=[('fname.txt', fdata)])\n+            self.assertEqual(post9.status_code, 200)\n+\n+            post10 = post(url, files=[('file',\n+                        ('file.txt', 'more file data'))])\n+            self.assertEqual(post10.status_code, 200)\n+\n+            post11 = post(url, files=[('fname.txt', 'fdata'),\n+                    ('fname2.txt', 'more fdata')])\n+            post12 = post(url, files=[('fname.txt', 'fdata'),\n+                    ('fname2.txt', open(__file__, 'rb'))])\n+            self.assertEqual(post11.status_code, 200)\n+            self.assertEqual(post12.status_code, 200)\n \n     def test_nonzero_evaluation(self):\n \n@@ -972,6 +1001,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         t = json.loads(r.text)\n         self.assertEqual(t.get('form'), {'field': 'a, b'})\n         self.assertEqual(t.get('files'), files)\n+        r = post(httpbin('post'), data=data, files=files.items())\n+        t = r.json\n+        self.assertEqual(t.get('form'), {'field': 'a, b'})\n+        self.assertEqual(t.get('files'), files)\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c71f48b5f1d989644e26b9004c2af7a6f27d4708", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 12 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 806 | Contributors (this commit): 15 | Commits (past 90d): 16 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,15 +52,18 @@ class TestSetup(object):\n             # time.sleep(1)\n             _httpbin = True\n \n+\n class TestBaseMixin(object):\n \n     def assertCookieHas(self, cookie, **kwargs):\n         \"\"\"Assert that a cookie has various specified properties.\"\"\"\n         for attr, expected_value in kwargs.items():\n             cookie_attr = getattr(cookie, attr)\n-            message = 'Failed comparison for %s: %s != %s' % (attr, cookie_attr, expected_value)\n+            message = 'Failed comparison for %s: %s != %s' % (attr,\n+                    cookie_attr, expected_value)\n             self.assertEqual(cookie_attr, expected_value, message)\n \n+\n class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n \n@@ -121,7 +124,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n-        r = get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n+        r = get(httpbin('get') + '?test=true', params={'q': 'test'},\n+                headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n     # def test_unicode_headers(self):\n@@ -761,7 +765,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         self.assertEqual(c, _c)\n \n         # Have the server set a cookie.\n-        r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n+        r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True,\n+                session=s)\n         c = json.loads(r.text).get('cookies')\n \n         assert 'k' in c\n@@ -826,7 +831,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n     def test_unpickled_session_requests(self):\n         s = requests.session()\n-        r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n+        r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True,\n+                session=s)\n         c = json.loads(r.text).get('cookies')\n         assert 'k' in c\n \n@@ -955,24 +961,31 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         s.config['danger_mode'] = True\n         s.get(httpbin('redirect', '4'))\n \n-\n     def test_empty_response(self):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n \n     def test_max_redirects(self):\n-        \"\"\"Test the max_redirects config variable, normally and under safe_mode.\"\"\"\n+        \"\"\"Test the max_redirects config variable, normally and under\n+        safe_mode.\n+        \"\"\"\n         def unsafe_callable():\n-            requests.get(httpbin('redirect', '3'), config=dict(max_redirects=2))\n-        self.assertRaises(requests.exceptions.TooManyRedirects, unsafe_callable)\n+            requests.get(httpbin('redirect', '3'),\n+                    config=dict(max_redirects=2))\n+        self.assertRaises(requests.exceptions.TooManyRedirects,\n+                unsafe_callable)\n \n         # add safe mode\n-        response = requests.get(httpbin('redirect', '3'), config=dict(safe_mode=True, max_redirects=2))\n+        response = requests.get(httpbin('redirect', '3'),\n+                config=dict(safe_mode=True, max_redirects=2))\n         self.assertTrue(response.content is None)\n-        self.assertTrue(isinstance(response.error, requests.exceptions.TooManyRedirects))\n+        self.assertTrue(isinstance(response.error,\n+                requests.exceptions.TooManyRedirects))\n \n     def test_connection_keepalive_and_close(self):\n-        \"\"\"Test that we send 'Connection: close' when keep_alive is disabled.\"\"\"\n+        \"\"\"Test that we send 'Connection: close' when keep_alive is\n+        disabled.\n+        \"\"\"\n         # keep-alive should be on by default\n         r1 = requests.get(httpbin('get'))\n         # XXX due to proxying issues, test the header sent back by httpbin, rather than\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#46b6207f05f0f91c88a69156f88afa7e92c560cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5495 | Contributors (this commit): 76 | Commits (past 90d): 32 | Contributors (cumulative): 76 | DMM Complexity: None\n\nDIFF:\n@@ -340,9 +340,9 @@ class Request(object):\n             return None\n \n         try:\n-            fields = self.data.items()\n+            fields = list(self.data.items())\n         except AttributeError:\n-            fields = dict(self.data).items()\n+            fields = list(dict(self.data).items())\n \n         if isinstance(files, dict):\n             files = files.items()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1efd06a87da37c074f7590ff5968090d849cea3f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5497 | Contributors (this commit): 76 | Commits (past 90d): 33 | Contributors (cumulative): 76 | DMM Complexity: None\n\nDIFF:\n@@ -342,7 +342,7 @@ class Request(object):\n         try:\n             fields = list(self.data.items())\n         except AttributeError:\n-            fields = list(dict(self.data).items())\n+            fields = list(self.data)\n \n         if isinstance(files, dict):\n             files = files.items()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ff165a1e2b30d5568c058b11139038963b4f979", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 12 | Churn Cumulative: 6315 | Contributors (this commit): 77 | Commits (past 90d): 50 | Contributors (cumulative): 91 | DMM Complexity: 0.4\n\nDIFF:\n@@ -342,8 +342,15 @@ class Request(object):\n         try:\n             fields = list(self.data.items())\n         except AttributeError:\n+            dict(self.data)\n             fields = list(self.data)\n \n+        try:\n+            dict(files)\n+        except ValueError:\n+            raise ValueError('Unable to encode lists with elements that '\n+                    'are not 2-tuples.')\n+\n         if isinstance(files, dict):\n             files = files.items()\n \n\n@@ -320,6 +320,11 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             post4 = post(url, data='[{\"some\": \"json\"}]')\n             self.assertEqual(post4.status_code, 200)\n \n+            try:\n+                post(url, files=['bad file data'])\n+            except ValueError:\n+                pass\n+\n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4bc76f8ebe688afea622860990ddef1e5ec628b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5506 | Contributors (this commit): 76 | Commits (past 90d): 33 | Contributors (cumulative): 76 | DMM Complexity: 0.0\n\nDIFF:\n@@ -827,6 +827,7 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n+        http_error_msg = ''\n         if 300 <= self.status_code < 400 and not allow_redirects:\n             http_error_msg = '%s Redirection: %s' % (self.status_code, self.reason)\n \n@@ -836,6 +837,7 @@ class Response(object):\n         elif 500 <= self.status_code < 600:\n             http_error_msg = '%s Server Error: %s' % (self.status_code, self.reason)\n \n+        if http_error_msg:\n             http_error = HTTPError(http_error_msg)\n             http_error.response = self\n             raise http_error\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#12328d6e58d0b52f0a5f425f4dcd84236583c679", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 818 | Contributors (this commit): 16 | Commits (past 90d): 15 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -973,5 +973,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         self.assertEqual(t.get('form'), {'field': 'a, b'})\n         self.assertEqual(t.get('files'), files)\n \n+    def test_str_data_content_type(self):\n+        data = \"test string data\"\n+        r = post(httpbin('post'), data=data)\n+        t = json.loads(r.text)\n+        self.assertEqual(t.get('headers').get('Content-Type'), 'text/plain')\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2d5e38f30ad9f3bd0e3a87518ae79ccbdf779369", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 18 | Churn Cumulative: 1743 | Contributors (this commit): 28 | Commits (past 90d): 21 | Contributors (cumulative): 33 | DMM Complexity: 0.36363636363636365\n\nDIFF:\n@@ -18,6 +18,7 @@ from .hooks import dispatch_hook\n from .utils import header_expand\n from .packages.urllib3.poolmanager import PoolManager\n \n+\n def merge_kwargs(local_kwarg, default_kwarg):\n     \"\"\"Merges kwarg dictionaries.\n \n@@ -37,12 +38,21 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if not hasattr(default_kwarg, 'items'):\n         return local_kwarg\n \n+    try:\n+        dict(local_kwarg)\n+    except ValueError:\n+        raise ValueError('Unable to encode lists with elements that are not '\n+                '2-tuples.')\n+\n+    if hasattr(local_kwarg, 'items'):\n+        local_kwarg = list(local_kwarg.items())\n+\n     # Update new values.\n     kwargs = default_kwarg.copy()\n     kwargs.update(local_kwarg)\n \n     # Remove keys that are set to None.\n-    for (k, v) in list(local_kwarg.items()):\n+    for (k, v) in local_kwarg:\n         if v is None:\n             del kwargs[k]\n \n@@ -56,7 +66,6 @@ class Session(object):\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n         'params', 'config', 'verify', 'cert', 'prefetch']\n \n-\n     def __init__(self,\n         headers=None,\n         cookies=None,\n\n@@ -96,6 +96,11 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         self.assertEqual(request.full_url,\n             \"http://example.com/path?key=value&a=b#fragment\")\n \n+    def test_params_accepts_kv_list(self):\n+        request = requests.Request('http://example.com/path',\n+                params=[('a', 'b')])\n+        self.assertEqual(request.full_url, 'http://example.com/path?a=b')\n+\n     def test_HTTP_200_OK_GET(self):\n         r = get(httpbin('get'))\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2110f7d18c67ce42073b440df0853447df842e99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 825 | Contributors (this commit): 16 | Commits (past 90d): 17 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -977,7 +977,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         data = \"test string data\"\n         r = post(httpbin('post'), data=data)\n         t = json.loads(r.text)\n-        self.assertEqual(t.get('headers').get('Content-Type'), 'text/plain')\n+        self.assertEqual(t.get('headers').get('Content-Type'), '')\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#493ea934699d10f5e7fae174403c59fd511b605b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 6339 | Contributors (this commit): 78 | Commits (past 90d): 52 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -34,6 +34,8 @@ from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     StringIO, is_py2, chardet, json)\n \n+from __builtin__ import str as builtin_str\n+\n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n \n@@ -493,7 +495,7 @@ class Request(object):\n             if self.data:\n \n                 body = self._encode_params(self.data)\n-                if isinstance(self.data, str) or hasattr(self.data, 'read'):\n+                if isinstance(self.data, str) or isinstance(self.data, builtin_str) or hasattr(self.data, 'read'):\n                     content_type = None\n                 else:\n                     content_type = 'application/x-www-form-urlencoded'\n\n@@ -974,10 +974,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         self.assertEqual(t.get('files'), files)\n \n     def test_str_data_content_type(self):\n-        data = \"test string data\"\n+        data = 'test string data'\n         r = post(httpbin('post'), data=data)\n         t = json.loads(r.text)\n-        self.assertEqual(t.get('headers').get('Content-Type'), 'text/plain')\n+        self.assertEqual(t.get('headers').get('Content-Type'), '')\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f60579ddda183e10888bd5059ba3033792ddb043", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 5637 | Contributors (this commit): 78 | Commits (past 90d): 38 | Contributors (cumulative): 81 | DMM Complexity: None\n\nDIFF:\n@@ -91,6 +91,7 @@ if is_py2:\n     from StringIO import StringIO\n     from .packages import chardet\n \n+    builtin_str = str\n     bytes = str\n     str = unicode\n     basestring = basestring\n@@ -105,6 +106,7 @@ elif is_py3:\n     from io import StringIO\n     from .packages import chardet2 as chardet\n \n+    builtin_str = str\n     str = str\n     bytes = bytes\n     basestring = (str,bytes)\n\n@@ -32,9 +32,7 @@ from .utils import (\n     DEFAULT_CA_BUNDLE_PATH)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n-    StringIO, is_py2, chardet, json)\n-\n-from __builtin__ import str as builtin_str\n+    StringIO, is_py2, chardet, json, builtin_str)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
