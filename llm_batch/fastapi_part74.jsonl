{"custom_id": "fastapi#67da3bb52ebe79657380e2f1b9ba098cc95eca75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 477 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.111.0.dev1\"\n+__version__ = \"0.111.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#817cc1d7548a508f80a346eb18889e29177ec03c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 7529 | Contributors (this commit): 35 | Commits (past 90d): 3 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -902,7 +902,7 @@ class FastAPI(Starlette):\n                 A state object for the application. This is the same object for the\n                 entire application, it doesn't change from request to request.\n \n-                You normally woudln't use this in FastAPI, for most of the cases you\n+                You normally wouldn't use this in FastAPI, for most of the cases you\n                 would instead use FastAPI dependencies.\n \n                 This is simply inherited from Starlette.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5fa8e38681b1f3e835991159d27bf0a3a76308f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 22 | Files Changed: 11 | Hunks: 33 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 55 | Churn Cumulative: 1803 | Contributors (this commit): 8 | Commits (past 90d): 22 | Contributors (cumulative): 61 | DMM Complexity: None\n\nDIFF:\n@@ -1,9 +1,10 @@\n from datetime import datetime, timedelta, timezone\n from typing import Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n \n@@ -98,7 +99,7 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n-    except JWTError:\n+    except InvalidTokenError:\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,9 +1,10 @@\n from datetime import datetime, timedelta, timezone\n from typing import Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n from typing_extensions import Annotated\n@@ -99,7 +100,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n-    except JWTError:\n+    except InvalidTokenError:\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,9 +1,10 @@\n from datetime import datetime, timedelta, timezone\n from typing import Annotated\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n \n@@ -98,7 +99,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n-    except JWTError:\n+    except InvalidTokenError:\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,9 +1,10 @@\n from datetime import datetime, timedelta, timezone\n from typing import Annotated, Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n \n@@ -98,7 +99,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n-    except JWTError:\n+    except InvalidTokenError:\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,8 +1,9 @@\n from datetime import datetime, timedelta, timezone\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n \n@@ -97,7 +98,7 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n-    except JWTError:\n+    except InvalidTokenError:\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,13 +1,14 @@\n from datetime import datetime, timedelta, timezone\n from typing import List, Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n \n@@ -120,7 +121,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,13 +1,14 @@\n from datetime import datetime, timedelta, timezone\n from typing import List, Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n from typing_extensions import Annotated\n@@ -121,7 +122,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,13 +1,14 @@\n from datetime import datetime, timedelta, timezone\n from typing import Annotated\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n \n@@ -120,7 +121,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,13 +1,14 @@\n from datetime import datetime, timedelta, timezone\n from typing import Annotated, List, Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n \n@@ -120,7 +121,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,12 +1,13 @@\n from datetime import datetime, timedelta, timezone\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n \n@@ -119,7 +120,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n@@ -1,13 +1,14 @@\n from datetime import datetime, timedelta, timezone\n from typing import Union\n \n+import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n )\n-from jose import JWTError, jwt\n+from jwt.exceptions import InvalidTokenError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n \n@@ -120,7 +121,7 @@ async def get_current_user(\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n         token_data = TokenData(scopes=token_scopes, username=username)\n-    except (JWTError, ValidationError):\n+    except (InvalidTokenError, ValidationError):\n         raise credentials_exception\n     user = get_user(fake_users_db, username=token_data.username)\n     if user is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a69f38340f5ca80e4d97fa0af7ea5f70b1d771a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 648 | Contributors (this commit): 15 | Commits (past 90d): 4 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,8 +14,8 @@ async def custom_swagger_ui_html():\n         openapi_url=app.openapi_url,\n         title=app.title + \" - Swagger UI\",\n         oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n-        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n-        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\",\n+        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n+        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n     )\n \n \n\n@@ -53,7 +53,7 @@ def get_swagger_ui_html(\n             It is normally set to a CDN URL.\n             \"\"\"\n         ),\n-    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n+    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n     swagger_css_url: Annotated[\n         str,\n         Doc(\n@@ -63,7 +63,7 @@ def get_swagger_ui_html(\n             It is normally set to a CDN URL.\n             \"\"\"\n         ),\n-    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css\",\n+    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n     swagger_favicon_url: Annotated[\n         str,\n         Doc(\n\n@@ -20,10 +20,8 @@ def client():\n def test_swagger_ui_html(client: TestClient):\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n-    assert (\n-        \"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\" in response.text\n-    )\n-    assert \"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\" in response.text\n+    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\" in response.text\n+    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\" in response.text\n \n \n def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9d74b23670ae7b7fa4ccb5d6cbfea7373ff12dd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 150 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -39,7 +39,7 @@ def on_config(config: MkDocsConfig, **kwargs: Any) -> MkDocsConfig:\n     lang = dir_path.parent.name\n     if lang in available_langs:\n         config.theme[\"language\"] = lang\n-    if not (config.site_url or \"\").endswith(f\"{lang}/\") and not lang == \"en\":\n+    if not (config.site_url or \"\").endswith(f\"{lang}/\") and lang != \"en\":\n         config.site_url = f\"{config.site_url}{lang}/\"\n     return config\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b1993642461031bac9d21dd87e7faf59f19049f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 479 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.111.0\"\n+__version__ = \"0.111.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d6dfb9397b9c8b68bfc5a8ca3ccbcef9f9ad089d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 521 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ from pydantic import BaseModel, BaseSettings, SecretStr\n \n awaiting_label = \"awaiting-review\"\n lang_all_label = \"lang-all\"\n-approved_label = \"approved-2\"\n+approved_label = \"approved-1\"\n translations_path = Path(__file__).parent / \"translations.yml\"\n \n github_graphql_url = \"https://api.github.com/graphql\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#221e59b0d16e81d75261574e39209ffebf249618", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1707 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ questions_translations_category_id = \"DIC_kwDOCZduT84CT5P9\"\n \n all_discussions_query = \"\"\"\n query Q($category_id: ID) {\n-  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+  repository(name: \"fastapi\", owner: \"fastapi\") {\n     discussions(categoryId: $category_id, first: 100) {\n       nodes {\n         title\n@@ -41,7 +41,7 @@ query Q($category_id: ID) {\n \n translation_discussion_query = \"\"\"\n query Q($after: String, $discussion_number: Int!) {\n-  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+  repository(name: \"fastapi\", owner: \"fastapi\") {\n     discussion(number: $discussion_number) {\n       comments(first: 100, after: $after) {\n         edges {\n\n@@ -17,7 +17,7 @@ questions_category_id = \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDAxNDM0\"\n \n discussions_query = \"\"\"\n query Q($after: String, $category_id: ID) {\n-  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+  repository(name: \"fastapi\", owner: \"fastapi\") {\n     discussions(first: 100, after: $after, categoryId: $category_id) {\n       edges {\n         cursor\n@@ -61,7 +61,7 @@ query Q($after: String, $category_id: ID) {\n \n prs_query = \"\"\"\n query Q($after: String) {\n-  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+  repository(name: \"fastapi\", owner: \"fastapi\") {\n     pullRequests(first: 100, after: $after) {\n       edges {\n         cursor\n@@ -109,7 +109,7 @@ query Q($after: String) {\n \n sponsors_query = \"\"\"\n query Q($after: String) {\n-  user(login: \"tiangolo\") {\n+  user(login: \"fastapi\") {\n     sponsorshipsAsMaintainer(first: 100, after: $after) {\n       edges {\n         cursor\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2e35b176cf5ff73e4cb035322f0af8157d654f7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 821 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -21,6 +21,6 @@ async def read_next_item():\n     return {\n         \"name\": \"Island In The Moon\",\n         \"price\": 12.99,\n-        \"description\": \"A place to be be playin' and havin' fun\",\n+        \"description\": \"A place to be playin' and havin' fun\",\n         \"tags\": [\"breater\"],\n     }\n\n@@ -33,7 +33,7 @@ def get_authors():  # (8)\n             \"items\": [\n                 {\n                     \"name\": \"Island In The Moon\",\n-                    \"description\": \"A place to be be playin' and havin' fun\",\n+                    \"description\": \"A place to be playin' and havin' fun\",\n                 },\n                 {\"name\": \"Holy Buddies\"},\n             ],\n\n@@ -12,7 +12,7 @@ def test_get_item():\n     assert response.json() == {\n         \"name\": \"Island In The Moon\",\n         \"price\": 12.99,\n-        \"description\": \"A place to be be playin' and havin' fun\",\n+        \"description\": \"A place to be playin' and havin' fun\",\n         \"tags\": [\"breater\"],\n         \"tax\": None,\n     }\n\n@@ -31,7 +31,7 @@ def test_get_authors():\n             \"items\": [\n                 {\n                     \"name\": \"Island In The Moon\",\n-                    \"description\": \"A place to be be playin' and havin' fun\",\n+                    \"description\": \"A place to be playin' and havin' fun\",\n                 },\n                 {\"name\": \"Holy Buddies\", \"description\": None},\n             ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8b930f88474d3da3551fb1f3e844b0591cce1f84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 69 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 100 | Churn Cumulative: 183 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,69 +0,0 @@\n-import logging\n-import sys\n-from pathlib import Path\n-from typing import Union\n-\n-import httpx\n-from github import Github\n-from github.PullRequest import PullRequest\n-from pydantic import BaseModel, SecretStr, ValidationError\n-from pydantic_settings import BaseSettings\n-\n-github_api = \"https://api.github.com\"\n-\n-\n-class Settings(BaseSettings):\n-    github_repository: str\n-    github_event_path: Path\n-    github_event_name: Union[str, None] = None\n-    input_token: SecretStr\n-    input_deploy_url: str\n-\n-\n-class PartialGithubEventHeadCommit(BaseModel):\n-    id: str\n-\n-\n-class PartialGithubEventWorkflowRun(BaseModel):\n-    head_commit: PartialGithubEventHeadCommit\n-\n-\n-class PartialGithubEvent(BaseModel):\n-    workflow_run: PartialGithubEventWorkflowRun\n-\n-\n-if __name__ == \"__main__\":\n-    logging.basicConfig(level=logging.INFO)\n-    settings = Settings()\n-    logging.info(f\"Using config: {settings.json()}\")\n-    g = Github(settings.input_token.get_secret_value())\n-    repo = g.get_repo(settings.github_repository)\n-    try:\n-        event = PartialGithubEvent.parse_file(settings.github_event_path)\n-    except ValidationError as e:\n-        logging.error(f\"Error parsing event file: {e.errors()}\")\n-        sys.exit(0)\n-    use_pr: Union[PullRequest, None] = None\n-    for pr in repo.get_pulls():\n-        if pr.head.sha == event.workflow_run.head_commit.id:\n-            use_pr = pr\n-            break\n-    if not use_pr:\n-        logging.error(f\"No PR found for hash: {event.workflow_run.head_commit.id}\")\n-        sys.exit(0)\n-    github_headers = {\n-        \"Authorization\": f\"token {settings.input_token.get_secret_value()}\"\n-    }\n-    url = f\"{github_api}/repos/{settings.github_repository}/issues/{use_pr.number}/comments\"\n-    logging.info(f\"Using comments URL: {url}\")\n-    response = httpx.post(\n-        url,\n-        headers=github_headers,\n-        json={\n-            \"body\": f\"📝 Docs preview for commit {use_pr.head.sha} at: {settings.input_deploy_url}\"\n-        },\n-    )\n-    if not (200 <= response.status_code <= 300):\n-        logging.error(f\"Error posting comment: {response.text}\")\n-        sys.exit(1)\n-    logging.info(\"Finished\")\n\n@@ -0,0 +1,31 @@\n+import logging\n+import sys\n+\n+from github import Github\n+from pydantic import SecretStr\n+from pydantic_settings import BaseSettings\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    github_token: SecretStr\n+    deploy_url: str\n+    commit_sha: str\n+\n+\n+if __name__ == \"__main__\":\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+    logging.info(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+    use_pr = next(\n+        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n+    )\n+    if not use_pr:\n+        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n+        sys.exit(0)\n+    use_pr.as_issue().create_comment(\n+        f\"📝 Docs preview for commit {settings.commit_sha} at: {settings.deploy_url}\"\n+    )\n+    logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a25c92ceb9ab5be49901443d7184c149797192df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 23 | Files Changed: 4 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 75 | Churn Cumulative: 114 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,3 @@\n+from fastapi.cli import main\n+\n+main()\n\n@@ -0,0 +1,13 @@\n+try:\n+    from fastapi_cli.cli import main as cli_main\n+\n+except ImportError:  # pragma: no cover\n+    cli_main = None  # type: ignore\n+\n+\n+def main() -> None:\n+    if not cli_main:  # type: ignore[truthy-function]\n+        message = 'To use the fastapi command, please install \"fastapi[standard]\":\\n\\n\\tpip install \"fastapi[standard]\"\\n'\n+        print(message)\n+        raise RuntimeError(message)  # noqa: B904\n+    cli_main()\n\n@@ -1,5 +1,5 @@\n import os\n-from typing import Any, Dict, List\n+from typing import Any, Dict\n \n from pdm.backend.hooks import Context\n \n@@ -11,29 +11,10 @@ def pdm_build_initialize(context: Context) -> None:\n     # Get custom config for the current package, from the env var\n     config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n         \"_internal-slim-build\"\n-    ][\"packages\"][TIANGOLO_BUILD_PACKAGE]\n+    ][\"packages\"].get(TIANGOLO_BUILD_PACKAGE)\n+    if not config:\n+        return\n     project_config: Dict[str, Any] = config[\"project\"]\n-    # Get main optional dependencies, extras\n-    optional_dependencies: Dict[str, List[str]] = metadata.get(\n-        \"optional-dependencies\", {}\n-    )\n-    # Get custom optional dependencies name to always include in this (non-slim) package\n-    include_optional_dependencies: List[str] = config.get(\n-        \"include-optional-dependencies\", []\n-    )\n     # Override main [project] configs with custom configs for this package\n     for key, value in project_config.items():\n         metadata[key] = value\n-    # Get custom build config for the current package\n-    build_config: Dict[str, Any] = (\n-        config.get(\"tool\", {}).get(\"pdm\", {}).get(\"build\", {})\n-    )\n-    # Override PDM build config with custom build config for this package\n-    for key, value in build_config.items():\n-        context.config.build_config[key] = value\n-    # Get main dependencies\n-    dependencies: List[str] = metadata.get(\"dependencies\", [])\n-    # Add optional dependencies to the default dependencies for this (non-slim) package\n-    for include_optional in include_optional_dependencies:\n-        optional_dependencies_group = optional_dependencies.get(include_optional, [])\n-        dependencies.extend(optional_dependencies_group)\n\n@@ -0,0 +1,32 @@\n+import subprocess\n+import sys\n+from unittest.mock import patch\n+\n+import fastapi.cli\n+import pytest\n+\n+\n+def test_fastapi_cli():\n+    result = subprocess.run(\n+        [\n+            sys.executable,\n+            \"-m\",\n+            \"coverage\",\n+            \"run\",\n+            \"-m\",\n+            \"fastapi\",\n+            \"dev\",\n+            \"non_existent_file.py\",\n+        ],\n+        capture_output=True,\n+        encoding=\"utf-8\",\n+    )\n+    assert result.returncode == 1, result.stdout\n+    assert \"Using path non_existent_file.py\" in result.stdout\n+\n+\n+def test_fastapi_cli_not_installed():\n+    with patch.object(fastapi.cli, \"cli_main\", None):\n+        with pytest.raises(RuntimeError) as exc_info:\n+            fastapi.cli.main()\n+        assert \"To use the fastapi command, please install\" in str(exc_info.value)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b2e233867cdd255ac7cb86878d643d953c78f418", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 481 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.111.1\"\n+__version__ = \"0.112.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0cd844d3877e6ae9e9fce1c99ea68327254e9b6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 1004 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,9 +11,6 @@ from multiprocessing import Pool\n from pathlib import Path\n from typing import Any, Dict, List, Optional, Union\n \n-import mkdocs.commands.build\n-import mkdocs.commands.serve\n-import mkdocs.config\n import mkdocs.utils\n import typer\n import yaml\n@@ -165,6 +162,13 @@ def generate_readme_content() -> str:\n     pre_content = content[frontmatter_end:pre_end]\n     post_content = content[post_start:]\n     new_content = pre_content + message + post_content\n+    # Remove content between <!-- only-mkdocs --> and <!-- /only-mkdocs -->\n+    new_content = re.sub(\n+        r\"<!-- only-mkdocs -->.*?<!-- /only-mkdocs -->\",\n+        \"\",\n+        new_content,\n+        flags=re.DOTALL,\n+    )\n     return new_content\n \n \n@@ -258,12 +262,15 @@ def live(\n     en.\n     \"\"\"\n     # Enable line numbers during local development to make it easier to highlight\n-    os.environ[\"LINENUMS\"] = \"true\"\n     if lang is None:\n         lang = \"en\"\n     lang_path: Path = docs_path / lang\n-    os.chdir(lang_path)\n-    mkdocs.commands.serve.serve(dev_addr=\"127.0.0.1:8008\")\n+    subprocess.run(\n+        [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\", \"--dirty\"],\n+        env={**os.environ, \"LINENUMS\": \"true\"},\n+        cwd=lang_path,\n+        check=True,\n+    )\n \n \n def get_updated_config_content() -> Dict[str, Any]:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7ff5da8bf2b8bfe895e4621f630e9fc3f2c434f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 4 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -7,8 +7,8 @@ app = FastAPI()\n \n @app.middleware(\"http\")\n async def add_process_time_header(request: Request, call_next):\n-    start_time = time.time()\n+    start_time = time.perf_counter()\n     response = await call_next(request)\n-    process_time = time.time() - start_time\n+    process_time = time.perf_counter() - start_time\n     response.headers[\"X-Process-Time\"] = str(process_time)\n     return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f118154576d5c4d8a2f8a7e88d1f92a6a9d07d7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 97 | Lines Deleted: 31 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 128 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,31 +0,0 @@\n-import logging\n-import sys\n-\n-from github import Github\n-from pydantic import SecretStr\n-from pydantic_settings import BaseSettings\n-\n-\n-class Settings(BaseSettings):\n-    github_repository: str\n-    github_token: SecretStr\n-    deploy_url: str\n-    commit_sha: str\n-\n-\n-if __name__ == \"__main__\":\n-    logging.basicConfig(level=logging.INFO)\n-    settings = Settings()\n-    logging.info(f\"Using config: {settings.model_dump_json()}\")\n-    g = Github(settings.github_token.get_secret_value())\n-    repo = g.get_repo(settings.github_repository)\n-    use_pr = next(\n-        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n-    )\n-    if not use_pr:\n-        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n-        sys.exit(0)\n-    use_pr.as_issue().create_comment(\n-        f\"📝 Docs preview for commit {settings.commit_sha} at: {settings.deploy_url}\"\n-    )\n-    logging.info(\"Finished\")\n\n@@ -0,0 +1,97 @@\n+import logging\n+import re\n+\n+from github import Github\n+from pydantic import SecretStr\n+from pydantic_settings import BaseSettings\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    github_token: SecretStr\n+    deploy_url: str | None = None\n+    commit_sha: str\n+    run_id: int\n+\n+\n+def main():\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+\n+    logging.info(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+    use_pr = next(\n+        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n+    )\n+    if not use_pr:\n+        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n+        return\n+    commits = list(use_pr.get_commits())\n+    current_commit = [c for c in commits if c.sha == settings.commit_sha][0]\n+    run_url = f\"https://github.com/{settings.github_repository}/actions/runs/{settings.run_id}\"\n+    if not settings.deploy_url:\n+        current_commit.create_status(\n+            state=\"pending\",\n+            description=\"Deploy Docs\",\n+            context=\"deploy-docs\",\n+            target_url=run_url,\n+        )\n+        logging.info(\"No deploy URL available yet\")\n+        return\n+    current_commit.create_status(\n+        state=\"success\",\n+        description=\"Deploy Docs\",\n+        context=\"deploy-docs\",\n+        target_url=run_url,\n+    )\n+\n+    files = list(use_pr.get_files())\n+    docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n+\n+    lang_links: dict[str, list[str]] = {}\n+    for f in docs_files:\n+        match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n+        assert match\n+        lang = match.group(1)\n+        path = match.group(2)\n+        if path.endswith(\"index.md\"):\n+            path = path.replace(\"index.md\", \"\")\n+        else:\n+            path = path.replace(\".md\", \"/\")\n+        if lang == \"en\":\n+            link = f\"{settings.deploy_url}{path}\"\n+        else:\n+            link = f\"{settings.deploy_url}{lang}/{path}\"\n+        lang_links.setdefault(lang, []).append(link)\n+\n+    links: list[str] = []\n+    en_links = lang_links.get(\"en\", [])\n+    en_links.sort()\n+    links.extend(en_links)\n+\n+    langs = list(lang_links.keys())\n+    langs.sort()\n+    for lang in langs:\n+        if lang == \"en\":\n+            continue\n+        current_lang_links = lang_links[lang]\n+        current_lang_links.sort()\n+        links.extend(current_lang_links)\n+\n+    message = (\n+        f\"📝 Docs preview for commit {settings.commit_sha} at: {settings.deploy_url}\"\n+    )\n+\n+    if links:\n+        message += \"\\n\\n### Modified Pages\\n\\n\"\n+        message += \"\\n\".join([f\"* {link}\" for link in links])\n+\n+    print(message)\n+    use_pr.as_issue().create_comment(message)\n+\n+    logging.info(\"Finished\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#58279670b6757dccb510721ec3461aac87c51c2c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 106 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -49,6 +49,7 @@ def main():\n     files = list(use_pr.get_files())\n     docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n \n+    deploy_url = settings.deploy_url.rstrip(\"/\")\n     lang_links: dict[str, list[str]] = {}\n     for f in docs_files:\n         match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n@@ -60,9 +61,9 @@ def main():\n         else:\n             path = path.replace(\".md\", \"/\")\n         if lang == \"en\":\n-            link = f\"{settings.deploy_url}{path}\"\n+            link = f\"{deploy_url}/{path}\"\n         else:\n-            link = f\"{settings.deploy_url}{lang}/{path}\"\n+            link = f\"{deploy_url}/{lang}/{path}\"\n         lang_links.setdefault(lang, []).append(link)\n \n     links: list[str] = []\n@@ -79,9 +80,7 @@ def main():\n         current_lang_links.sort()\n         links.extend(current_lang_links)\n \n-    message = (\n-        f\"📝 Docs preview for commit {settings.commit_sha} at: {settings.deploy_url}\"\n-    )\n+    message = f\"📝 Docs preview for commit {settings.commit_sha} at: {deploy_url}\"\n \n     if links:\n         message += \"\\n\\n### Modified Pages\\n\\n\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#233bab7f419c5bf2f9167a850f83c06a7d2c2af0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 120 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,6 +12,7 @@ class Settings(BaseSettings):\n     deploy_url: str | None = None\n     commit_sha: str\n     run_id: int\n+    is_done: bool = False\n \n \n def main():\n@@ -30,10 +31,19 @@ def main():\n     commits = list(use_pr.get_commits())\n     current_commit = [c for c in commits if c.sha == settings.commit_sha][0]\n     run_url = f\"https://github.com/{settings.github_repository}/actions/runs/{settings.run_id}\"\n+    if settings.is_done and not settings.deploy_url:\n+        current_commit.create_status(\n+            state=\"success\",\n+            description=\"No Docs Changes\",\n+            context=\"deploy-docs\",\n+            target_url=run_url,\n+        )\n+        logging.info(\"No docs changes found\")\n+        return\n     if not settings.deploy_url:\n         current_commit.create_status(\n             state=\"pending\",\n-            description=\"Deploy Docs\",\n+            description=\"Deploying Docs\",\n             context=\"deploy-docs\",\n             target_url=run_url,\n         )\n@@ -41,7 +51,7 @@ def main():\n         return\n     current_commit.create_status(\n         state=\"success\",\n-        description=\"Deploy Docs\",\n+        description=\"Docs Deployed\",\n         context=\"deploy-docs\",\n         target_url=run_url,\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8b6d9ba7898a130e7e3b2ce59d3a84c4476f7142", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 123 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -63,7 +63,8 @@ def main():\n     lang_links: dict[str, list[str]] = {}\n     for f in docs_files:\n         match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n-        assert match\n+        if not match:\n+            continue\n         lang = match.group(1)\n         path = match.group(2)\n         if path.endswith(\"index.md\"):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#06fc1c2cc82bc585d0e695d57b1d7c7a0c2e0a67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 1014 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -251,6 +251,7 @@ def live(\n     lang: str = typer.Argument(\n         None, callback=lang_callback, autocompletion=complete_existing_lang\n     ),\n+    dirty: bool = False,\n ) -> None:\n     \"\"\"\n     Serve with livereload a docs site for a specific language.\n@@ -265,11 +266,12 @@ def live(\n     if lang is None:\n         lang = \"en\"\n     lang_path: Path = docs_path / lang\n+    # Enable line numbers during local development to make it easier to highlight\n+    args = [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\"]\n+    if dirty:\n+        args.append(\"--dirty\")\n     subprocess.run(\n-        [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\", \"--dirty\"],\n-        env={**os.environ, \"LINENUMS\": \"true\"},\n-        cwd=lang_path,\n-        check=True,\n+        args, env={**os.environ, \"LINENUMS\": \"true\"}, cwd=lang_path, check=True\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#85bd4067c2133a9eac1cec30b2c7d39aa67f4fc2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 41 | Churn Cumulative: 1205 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: 0.047619047619047616\n\nDIFF:\n@@ -26,6 +26,15 @@ missing_translation_snippet = \"\"\"\n {!../../../docs/missing-translation.md!}\n \"\"\"\n \n+non_translated_sections = [\n+    \"reference/\",\n+    \"release-notes.md\",\n+    \"external-links.md\",\n+    \"newsletter.md\",\n+    \"management-tasks.md\",\n+    \"management.md\",\n+]\n+\n docs_path = Path(\"docs\")\n en_docs_path = Path(\"docs/en\")\n en_config_path: Path = en_docs_path / mkdocs_name\n@@ -333,10 +342,34 @@ def verify_config() -> None:\n     typer.echo(\"Valid mkdocs.yml ✅\")\n \n \n+@app.command()\n+def verify_non_translated() -> None:\n+    \"\"\"\n+    Verify there are no files in the non translatable pages.\n+    \"\"\"\n+    print(\"Verifying non translated pages\")\n+    lang_paths = get_lang_paths()\n+    error_paths = []\n+    for lang in lang_paths:\n+        if lang.name == \"en\":\n+            continue\n+        for non_translatable in non_translated_sections:\n+            non_translatable_path = lang / \"docs\" / non_translatable\n+            if non_translatable_path.exists():\n+                error_paths.append(non_translatable_path)\n+    if error_paths:\n+        print(\"Non-translated pages found, remove them:\")\n+        for error_path in error_paths:\n+            print(error_path)\n+        raise typer.Abort()\n+    print(\"No non-translated pages found ✅\")\n+\n+\n @app.command()\n def verify_docs():\n     verify_readme()\n     verify_config()\n+    verify_non_translated()\n \n \n @app.command()\n\n@@ -8,9 +8,13 @@ from mkdocs.structure.files import File, Files\n from mkdocs.structure.nav import Link, Navigation, Section\n from mkdocs.structure.pages import Page\n \n-non_traslated_sections = [\n+non_translated_sections = [\n     \"reference/\",\n     \"release-notes.md\",\n+    \"external-links.md\",\n+    \"newsletter.md\",\n+    \"management-tasks.md\",\n+    \"management.md\",\n ]\n \n \n@@ -128,7 +132,7 @@ def on_page_markdown(\n     markdown: str, *, page: Page, config: MkDocsConfig, files: Files\n ) -> str:\n     if isinstance(page.file, EnFile):\n-        for excluded_section in non_traslated_sections:\n+        for excluded_section in non_translated_sections:\n             if page.file.src_path.startswith(excluded_section):\n                 return markdown\n         missing_translation_content = get_missing_translation_content(config.docs_dir)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4f937c0c4afbd0b46cf2db91acac6814504bbdcb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 483 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.112.0\"\n+__version__ = \"0.112.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2cb1333b971ae17b83499bca952a7803cec21b0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 6 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 328 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -34,6 +34,6 @@ async def create_item(item: Item, x_token: Annotated[str, Header()]):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n-        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+        raise HTTPException(status_code=409, detail=\"Item already exists\")\n     fake_db[item.id] = item\n     return item\n\n@@ -61,5 +61,5 @@ def test_create_existing_item():\n             \"description\": \"There goes my stealer\",\n         },\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 409\n     assert response.json() == {\"detail\": \"Item already exists\"}\n\n@@ -33,6 +33,6 @@ async def create_item(item: Item, x_token: Annotated[str, Header()]):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n-        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+        raise HTTPException(status_code=409, detail=\"Item already exists\")\n     fake_db[item.id] = item\n     return item\n\n@@ -61,5 +61,5 @@ def test_create_existing_item():\n             \"description\": \"There goes my stealer\",\n         },\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 409\n     assert response.json() == {\"detail\": \"Item already exists\"}\n\n@@ -33,6 +33,6 @@ async def create_item(item: Item, x_token: Annotated[str, Header()]):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n-        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+        raise HTTPException(status_code=409, detail=\"Item already exists\")\n     fake_db[item.id] = item\n     return item\n\n@@ -61,5 +61,5 @@ def test_create_existing_item():\n             \"description\": \"There goes my stealer\",\n         },\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 409\n     assert response.json() == {\"detail\": \"Item already exists\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
