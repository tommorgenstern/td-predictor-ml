{"custom_id": "requests#5cd116d078ca885f81c89390d1e5ebe8cd7f5068", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 5 | Churn Cumulative: 1538 | Contributors (this commit): 29 | Commits (past 90d): 8 | Contributors (cumulative): 29 | DMM Complexity: 0.0\n\nDIFF:\n@@ -311,10 +311,7 @@ def dict_from_cookiejar(cj):\n \n     cookie_dict = {}\n \n-    for _, cookies in list(cj._cookies.items()):\n-        for _, cookies in list(cookies.items()):\n-            for cookie in list(cookies.values()):\n-                # print cookie\n+    for cookie in cj:\n         cookie_dict[cookie.name] = cookie.value\n \n     return cookie_dict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#170c46c06bd9b6f7233c95f998642ff365d47a0b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 505 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -67,8 +67,8 @@ class MockRequest(object):\n     def get_new_headers(self):\n         return self._new_headers\n \n-    def __getattr__(self, name):\n-        if name == 'unverifiable':\n+    @property\n+    def unverifiable(self):\n         return self.is_unverifiable()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9dce7861134c60596b91dfa8eda2ff66f5c5d5e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 424 | Contributors (this commit): 4 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.14.0'\n-__build__ = 0x001400\n+__version__ = '0.14.1'\n+__build__ = 0x001401\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c520ece69ade644d2e0c7a52e06ebaef8c5260f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 336 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -65,6 +65,8 @@ setup(\n         'Programming Language :: Python :: 3',\n         'Programming Language :: Python :: 3.0',\n         'Programming Language :: Python :: 3.1',\n+        'Programming Language :: Python :: 3.2',\n+        'Programming Language :: Python :: 3.3',\n     ),\n )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77677eb71d41f20d657254b7d88c17337369e600", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 10 | Churn Cumulative: 6821 | Contributors (this commit): 86 | Commits (past 90d): 76 | Contributors (cumulative): 104 | DMM Complexity: 1.0\n\nDIFF:\n@@ -462,10 +462,10 @@ class Request(object):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-        if isinstance(hook, (list, tuple, set)):\n-            self.hooks[event].extend(hook)\n-        else:\n+        if callable(hook):\n             self.hooks[event].append(hook)\n+        elif hasattr(hook, '__iter__'):\n+            self.hooks[event].extend(h for h in hook if callable(h))\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n\n@@ -778,6 +778,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r = requests.models.Request(hooks={'args': hooks})\n         assert_hooks_are_callable(r.hooks)\n \n+        hooks.append('string that should not be registered')\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#601a2b8c749c05bafc4b9845c938dc94e5f16f33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 507 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n \"\"\"\n Compatibility code to be able to use `cookielib.CookieJar` with requests.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#86b39bf3e33c174f5535207082ccac64aaf7aa45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 6842 | Contributors (this commit): 87 | Commits (past 90d): 74 | Contributors (cumulative): 106 | DMM Complexity: 1.0\n\nDIFF:\n@@ -360,9 +360,9 @@ class Request(object):\n         for field, val in fields:\n             if isinstance(val, list):\n                 for v in val:\n-                    new_fields.append((field, str(v)))\n+                    new_fields.append((field, builtin_str(v)))\n             else:\n-                new_fields.append((field, str(val)))\n+                new_fields.append((field, builtin_str(val)))\n \n         for (k, v) in files:\n             # support for explicit filename\n\n@@ -347,6 +347,23 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             self.assertEqual(post2.status_code, 200)\n             self.assertEqual(post3.status_code, 200)\n \n+    def test_POSTBIN_GET_POST_FILES_WITH_CJK_PARAMS(self):\n+\n+        for service in SERVICES:\n+\n+            with open(__file__) as f:\n+                url = service('post')\n+                post1 = post(url,\n+                             files={'some': f},\n+                             data={'some': '中文'})\n+                post2 = post(url, data={'some': '日本語'}, files=[('some', f)])\n+                post3 = post(url, data=[('some', '한국의')],\n+                        files=[('some', f)])\n+\n+            self.assertEqual(post1.status_code, 200)\n+            self.assertEqual(post2.status_code, 200)\n+            self.assertEqual(post3.status_code, 200)\n+\n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2bb49ff386deab4e67e199450085720c1521411a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 5 | Churn Cumulative: 5750 | Contributors (this commit): 84 | Commits (past 90d): 49 | Contributors (cumulative): 84 | DMM Complexity: 0.0\n\nDIFF:\n@@ -834,6 +834,11 @@ class Response(object):\n             #\n             # So we try blindly encoding.\n             content = str(self.content, errors='replace')\n+        except TypeError:\n+            # A TypeError can be raised if encoding is None\n+            #\n+            # So we try blindly encoding.\n+            content = str(self.content, errors='replace')\n \n         return content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eb6a6b1a234e520d9ef6263fc1f35758ca1b662a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 5755 | Contributors (this commit): 84 | Commits (past 90d): 50 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -828,13 +828,10 @@ class Response(object):\n         # Decode unicode from given encoding.\n         try:\n             content = str(self.content, encoding, errors='replace')\n-        except LookupError:\n+        except (LookupError, TypeError):\n             # A LookupError is raised if the encoding was not found which could\n             # indicate a misspelling or similar mistake.\n             #\n-            # So we try blindly encoding.\n-            content = str(self.content, errors='replace')\n-        except TypeError:\n             # A TypeError can be raised if encoding is None\n             #\n             # So we try blindly encoding.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e656222188475369ec3493cdeb37d398a7e7e1c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 511 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -67,6 +67,10 @@ class MockRequest(object):\n     def get_new_headers(self):\n         return self._new_headers\n \n+    def __getattr__(self, name):\n+        if name == 'unverifiable':\n+            return self.is_unverifiable()\n+\n \n class MockResponse(object):\n     \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f9e5521480e5b9fa760e0f19274441c363aca5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1543 | Contributors (this commit): 29 | Commits (past 90d): 9 | Contributors (cumulative): 29 | DMM Complexity: 0.0\n\nDIFF:\n@@ -311,10 +311,7 @@ def dict_from_cookiejar(cj):\n \n     cookie_dict = {}\n \n-    for _, cookies in list(cj._cookies.items()):\n-        for _, cookies in list(cookies.items()):\n-            for cookie in list(cookies.values()):\n-                # print cookie\n+    for cookie in cj:\n         cookie_dict[cookie.name] = cookie.value\n \n     return cookie_dict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#22fdecba521610466f4316ad4a22c6f25870b46f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 515 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -67,8 +67,8 @@ class MockRequest(object):\n     def get_new_headers(self):\n         return self._new_headers\n \n-    def __getattr__(self, name):\n-        if name == 'unverifiable':\n+    @property\n+    def unverifiable(self):\n         return self.is_unverifiable()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ed8a3f319958844870bb071db7a185fb66d25171", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 428 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.14.0'\n-__build__ = 0x001400\n+__version__ = '0.14.1'\n+__build__ = 0x001401\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#46fd297c3ac903793a99fd9712f04d747a027538", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 338 | Contributors (this commit): 8 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -65,6 +65,8 @@ setup(\n         'Programming Language :: Python :: 3',\n         'Programming Language :: Python :: 3.0',\n         'Programming Language :: Python :: 3.1',\n+        'Programming Language :: Python :: 3.2',\n+        'Programming Language :: Python :: 3.3',\n     ),\n )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4e6cf21d8231b28a9bbfdd94392137255e434033", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/3 | Churn Δ: 10 | Churn Cumulative: 6862 | Contributors (this commit): 87 | Commits (past 90d): 82 | Contributors (cumulative): 106 | DMM Complexity: 1.0\n\nDIFF:\n@@ -462,10 +462,10 @@ class Request(object):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-        if isinstance(hook, (list, tuple, set)):\n-            self.hooks[event].extend(hook)\n-        else:\n+        if callable(hook):\n             self.hooks[event].append(hook)\n+        elif hasattr(hook, '__iter__'):\n+            self.hooks[event].extend(h for h in hook if callable(h))\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n\n@@ -778,6 +778,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r = requests.models.Request(hooks={'args': hooks})\n         assert_hooks_are_callable(r.hooks)\n \n+        hooks.append('string that should not be registered')\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ec2c96f0298d2bbac523396683cfb9f3ce971f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 517 | Contributors (this commit): 7 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n \"\"\"\n Compatibility code to be able to use `cookielib.CookieJar` with requests.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#820dfb0495ef379f140ad3c78c30e0a16c7e9fa8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 15 | Files Changed: 9 | Hunks: 17 | Methods Changed: 7 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 38 | Churn Cumulative: 4608 | Contributors (this commit): 64 | Commits (past 90d): 75 | Contributors (cumulative): 100 | DMM Complexity: 0.0\n\nDIFF:\n@@ -94,7 +94,7 @@ class OAuth1(AuthBase):\n             # to preserve body.\n             r.url, r.headers, _ = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), None, r.headers)\n-        elif decoded_body != None and contenttype in (CONTENT_TYPE_FORM_URLENCODED, ''):\n+        elif decoded_body is not None and contenttype in (CONTENT_TYPE_FORM_URLENCODED, ''):\n             # Normal signing\n             if not contenttype:\n                 r.headers['Content-Type'] = CONTENT_TYPE_FORM_URLENCODED\n\n@@ -235,7 +235,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         Python dict of name-value pairs of cookies that meet the requirements.\"\"\"\n         dictionary = {}\n         for cookie in iter(self):\n-            if (domain == None or cookie.domain == domain) and (path == None\n+            if (domain is None or cookie.domain == domain) and (path is None\n                                                 or cookie.path == path):\n                 dictionary[cookie.name] = cookie.value\n         return dictionary\n@@ -279,7 +279,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n             if cookie.name == name:\n                 if domain is None or cookie.domain == domain:\n                     if path is None or cookie.path == path:\n-                        if toReturn != None:  # if there are multiple cookies that meet passed in criteria\n+                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria\n                             raise CookieConflictError('There are multiple cookies with name, %r' % (name))\n                         toReturn = cookie.value  # we will eventually return this as long as no cookie conflict\n \n@@ -324,8 +324,7 @@ def create_cookie(name, value, **kwargs):\n         comment=None,\n         comment_url=None,\n         rest={'HttpOnly': None},\n-        rfc2109=False,\n-        )\n+        rfc2109=False,)\n \n     badargs = set(kwargs) - set(result)\n     if badargs:\n@@ -360,8 +359,7 @@ def morsel_to_cookie(morsel):\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n         rest={'HttpOnly': morsel['httponly']},\n-        rfc2109=False,\n-        )\n+        rfc2109=False,)\n     return c\n \n \n\n@@ -45,5 +45,4 @@ def dispatch_hook(key, hooks, hook_data):\n             if _hook_data is not None:\n                 hook_data = _hook_data\n \n-\n     return hook_data\n\n@@ -378,6 +378,7 @@ def stream_decode_response_unicode(iterator, r):\n     if rv:\n         yield rv\n \n+\n def iter_slices(string, slice_length):\n     \"\"\"Iterate over slices of a string.\"\"\"\n     pos = 0\n@@ -385,6 +386,7 @@ def iter_slices(string, slice_length):\n         yield string[pos:pos + slice_length]\n         pos += slice_length\n \n+\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n@@ -543,6 +545,7 @@ def default_user_agent():\n             '%s/%s' % (platform.system(), platform.release()),\n         ])\n \n+\n def parse_header_links(value):\n     \"\"\"Return a dict of parsed link headers proxies.\n \n\n@@ -4,7 +4,11 @@ it verifies that Requests does not leak connections when\n the body of the request is not read.\n \"\"\"\n \n-import gc, os, subprocess, requests, sys\n+import gc\n+import os\n+import requests\n+import subprocess\n+import sys\n \n \n def main():\n\n@@ -1,7 +1,9 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n-import sys, os, unittest\n+import os\n+import sys\n+import unittest\n \n # Path hack.\n sys.path.insert(0, os.path.abspath('..'))\n\n@@ -51,6 +51,7 @@ class TestSetup(object):\n             # time.sleep(1)\n             _httpbin = True\n \n+\n class TestBaseMixin(object):\n \n     def assertCookieHas(self, cookie, **kwargs):\n@@ -60,6 +61,7 @@ class TestBaseMixin(object):\n             message = 'Failed comparison for %s: %s != %s' % (attr, cookie_attr, expected_value)\n             self.assertEqual(cookie_attr, expected_value, message)\n \n+\n class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n \n@@ -903,7 +905,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_connection_error_with_safe_mode(self):\n         config = {'safe_mode': True}\n         r = get('http://localhost:1/nope', allow_redirects=False, config=config)\n-        assert r.content == None\n+        assert r.content is None\n \n     # def test_invalid_content(self):\n     #     # WARNING: if you're using a terrible DNS provider (comcast),\n@@ -1038,7 +1040,6 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         s.config['danger_mode'] = True\n         s.get(httpbin('redirect', '4'))\n \n-\n     def test_empty_response(self):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n\n@@ -2,7 +2,8 @@\n # -*- coding: utf-8 -*-\n \n # Path hack.\n-import sys, os\n+import os\n+import sys\n sys.path.insert(0, os.path.abspath('..'))\n \n import unittest\n\n@@ -1,8 +1,8 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n-import sys, os\n-import json\n+import os\n+import sys\n import unittest\n \n # Path hack.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bb9e72885a9a516550efbe1a1f40c780a3e2554d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 1120 | Contributors (this commit): 23 | Commits (past 90d): 33 | Contributors (cumulative): 23 | DMM Complexity: 0.0\n\nDIFF:\n@@ -336,12 +336,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             with open(__file__) as f:\n                 url = service('post')\n-                post1 = post(url,\n-                             files={'some': f},\n-                             data={'some': 'data'})\n+                post1 = post(url, data={'some': 'data'}, files={'some': f})\n                 post2 = post(url, data={'some': 'data'}, files=[('some', f)])\n-                post3 = post(url, data=[('some', 'data')],\n-                        files=[('some', f)])\n+                post3 = post(url, data=[('some', 'data')], files=[('some', f)])\n \n             self.assertEqual(post1.status_code, 200)\n             self.assertEqual(post2.status_code, 200)\n@@ -353,12 +350,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             with open(__file__) as f:\n                 url = service('post')\n-                post1 = post(url,\n-                             files={'some': f},\n-                             data={'some': '中文'})\n+                post1 = post(url, data={'some': '中文'}, files={'some': f})\n                 post2 = post(url, data={'some': '日本語'}, files=[('some', f)])\n-                post3 = post(url, data=[('some', '한국의')],\n-                        files=[('some', f)])\n+                post3 = post(url, data=[('some', '한국의')], files=[('some', f)])\n \n             self.assertEqual(post1.status_code, 200)\n             self.assertEqual(post2.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce7c86cc5816e8412956e251c22cca73101136b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 40 | Files Changed: 2 | Hunks: 30 | Methods Changed: 23 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 81 | Churn Cumulative: 1305 | Contributors (this commit): 24 | Commits (past 90d): 38 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -121,7 +121,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n         r = get(httpbin('user-agent'), headers=heads)\n \n-        assert heads['User-agent'] in r.text\n+        self.assertTrue(heads['User-agent'] in r.text)\n         self.assertEqual(r.status_code, 200)\n \n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n@@ -483,7 +483,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             response = get(url)\n \n-            assert isinstance(response.url, str)\n+            self.assertTrue(isinstance(response.url, str))\n \n     def test_unicode_get(self):\n \n@@ -534,7 +534,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             # Body wasn't valid url encoded data, so the server returns None as\n             # \"form\" and the raw body as \"data\".\n \n-            assert rbody.get('form') in (None, {})\n+            self.assertTrue(rbody.get('form') in (None, {}))\n             self.assertEqual(rbody.get('data'), 'fooaowpeuf')\n \n     def test_file_post_data(self):\n@@ -557,7 +557,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             self.assertEqual(r.url, service('post'))\n \n             rbody = json.loads(r.text)\n-            assert rbody.get('form') in (None, {})\n+            self.assertTrue(rbody.get('form') in (None, {}))\n             self.assertEqual(rbody.get('data'), filecontent.decode('ascii'))\n         os.remove(testfile.name)\n \n@@ -603,7 +603,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             rbody = json.loads(r.text)\n \n-            assert rbody.get('form') in (None, {})\n+            self.assertTrue(rbody.get('form') in (None, {}))\n             self.assertEqual(rbody.get('data'), 'foobar')\n \n     def test_urlencoded_get_query_multivalued_param(self):\n@@ -694,14 +694,14 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n         # Make 2 requests from Session object, should send header both times\n         r1 = get(httpbin('user-agent'), session=s)\n-        assert heads['User-agent'] in r1.text\n+        self.assertTrue(heads['User-agent'] in r1.text)\n \n         r2 = get(httpbin('user-agent'), session=s)\n-        assert heads['User-agent'] in r2.text\n+        self.assertTrue(heads['User-agent'] in r2.text)\n \n         new_heads = {'User-agent': 'blah'}\n         r3 = get(httpbin('user-agent'), headers=new_heads, session=s)\n-        assert new_heads['User-agent'] in r3.text\n+        self.assertTrue(new_heads['User-agent'] in r3.text)\n \n         self.assertEqual(r2.status_code, 200)\n \n@@ -721,7 +721,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             url = service('headers')\n             response = get(url=url, hooks={'args': add_foo_header})\n \n-            assert 'foo' in response.text\n+            self.assertTrue('foo' in response.text)\n \n     def test_multiple_hooks(self):\n \n@@ -754,8 +754,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n                 }\n             )\n \n-            assert 'foo' in response.text\n-            assert 'bar' in response.text\n+            for text in ('foo', 'bar'):\n+                self.assertTrue(text in response.text)\n \n     def test_allow_list_of_hooks_to_register_hook(self):\n         \"\"\"Issue 785: https://github.com/kennethreitz/requests/issues/785\"\"\"\n@@ -781,7 +781,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n         def assert_hooks_are_callable(hooks):\n             for h in hooks['args']:\n-                assert callable(h) is True\n+                self.assertTrue(callable(h))\n \n         hooks = [add_foo_header, add_bar_header]\n         r = requests.models.Request()\n@@ -829,13 +829,13 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n         c = json.loads(r.text).get('cookies')\n \n-        assert 'k' in c\n+        self.assertTrue('k' in c)\n \n         # And server-set cookie persistience.\n         r = get(httpbin('cookies'), session=s)\n         c = json.loads(r.text).get('cookies')\n \n-        assert 'k' in c\n+        self.assertTrue('k' in c)\n \n     def test_session_persistent_params(self):\n \n@@ -846,21 +846,22 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n         # Make 2 requests from Session object, should send header both times\n         r1 = get(httpbin('get'), session=s)\n-        assert params['a'] in r1.text\n+        self.assertTrue(params['a'] in r1.text)\n \n         params2 = {'b': 'b_test'}\n \n         r2 = get(httpbin('get'), params=params2, session=s)\n-        assert params['a'] in r2.text\n-        assert params2['b'] in r2.text\n+        for param in (params['a'], params2['b']):\n+            self.assertTrue(param in r2.text)\n \n         params3 = {'b': 'b_test', 'a': None, 'c': 'c_test'}\n \n         r3 = get(httpbin('get'), params=params3, session=s)\n \n-        assert not params['a'] in r3.text\n-        assert params3['b'] in r3.text\n-        assert params3['c'] in r3.text\n+        self.assertFalse(params['a'] in r3.text)\n+\n+        for param in (params3['b'], params3['c']):\n+            self.assertTrue(param in r3.text)\n \n     def test_session_cookies_with_return_response_false(self):\n         s = requests.session()\n@@ -869,8 +870,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n                  allow_redirects=True, session=s)\n         rq.send(prefetch=True)\n         c = rq.response.json.get('cookies')\n-        assert 'k' in c\n-        assert 'k' in s.cookies\n+        self.assertTrue('k' in c)\n+        self.assertTrue('k' in s.cookies)\n \n     def test_session_pickling(self):\n \n@@ -893,17 +894,17 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         s = requests.session()\n         r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n         c = json.loads(r.text).get('cookies')\n-        assert 'k' in c\n+        self.assertTrue('k' in c)\n \n         ds = pickle.loads(pickle.dumps(s))\n         r = get(httpbin('cookies'), session=ds)\n         c = json.loads(r.text).get('cookies')\n-        assert 'k' in c\n+        self.assertTrue('k' in c)\n \n         ds1 = pickle.loads(pickle.dumps(requests.session()))\n         ds2 = pickle.loads(pickle.dumps(requests.session(prefetch=False)))\n-        assert ds1.prefetch\n-        assert not ds2.prefetch\n+        self.assertTrue(ds1.prefetch)\n+        self.assertFalse(ds2.prefetch)\n \n     def test_connection_error(self):\n         try:\n@@ -911,12 +912,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         except requests.ConnectionError:\n             pass\n         else:\n-            assert False\n+            self.fail()\n \n     def test_connection_error_with_safe_mode(self):\n         config = {'safe_mode': True}\n         r = get('http://localhost:1/nope', allow_redirects=False, config=config)\n-        assert r.content is None\n+        self.assertTrue(r.content is None)\n \n     # def test_invalid_content(self):\n     #     # WARNING: if you're using a terrible DNS provider (comcast),\n@@ -936,14 +937,14 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_cached_response(self):\n \n         r1 = get(httpbin('get'), prefetch=False)\n-        assert not r1._content\n-        assert r1.content\n-        assert r1.text\n+        self.assertFalse(r1._content)\n+        self.assertTrue(r1.content)\n+        self.assertTrue(r1.text)\n \n         r2 = get(httpbin('get'), prefetch=True)\n-        assert r2._content\n-        assert r2.content\n-        assert r2.text\n+        self.assertTrue(r2._content)\n+        self.assertTrue(r2.content)\n+        self.assertTrue(r2.text)\n \n     def test_iter_lines(self):\n \n@@ -978,7 +979,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_permissive_iter_content(self):\n         \"\"\"Test that iter_content and iter_lines work even after the body has been fetched.\"\"\"\n         r = get(httpbin('stream', '10'), prefetch=True)\n-        assert r._content_consumed\n+        self.assertTrue(r._content_consumed)\n         # iter_lines should still work without crashing\n         self.assertEqual(len(list(r.iter_lines())), 10)\n \n\n@@ -24,7 +24,7 @@ class RequestsTestSuite(unittest.TestCase):\n     _multiprocess_can_split_ = True\n \n     def test_addition(self):\n-        assert (1 + 1) == 2\n+        self.assertEqual(2, 1 + 1)\n \n     def test_ssl_hostname_ok(self):\n         requests.get('https://github.com', verify=True)\n@@ -79,7 +79,7 @@ class RequestsTestSuite(unittest.TestCase):\n         '''\n         r = requests.get('http://www.marketwire.com/mw/release.' +\n                          'do?id=1628202&sourceType=3')\n-        assert r.ok\n+        self.assertTrue(r.ok)\n \n     def test_unicode_url_outright(self):\n         '''This url visits in my browser'''\n@@ -87,7 +87,7 @@ class RequestsTestSuite(unittest.TestCase):\n                          'jp-morgan-behauptet-sich-der-spitze-euro' +\n                          'p%C3%A4ischer-anleihe-analysten-laut-umf' +\n                          'rageergebnissen-1628202.htm')\n-        assert r.ok\n+        self.assertTrue(r.ok)\n \n     def test_redirect_encoding(self):\n         '''This url redirects to\n@@ -96,7 +96,7 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://feedproxy.google.com/~r/Dealipedia' +\n                          'News/~3/BQtUJRJeZlo/deal_view_investment.' +\n                          'php')\n-        assert r.ok\n+        self.assertTrue(r.ok)\n \n     def test_cookies_on_redirects(self):\n         \"\"\"Test interaction between cookie handling and redirection.\"\"\"\n@@ -117,7 +117,7 @@ class RequestsTestSuite(unittest.TestCase):\n         # this redirects to another domain, httpbin.org\n         # cookies of the first domain should NOT be sent to the next one\n         r3 = s.get(url='http://tinyurl.com/7zp3jnr')\n-        assert r3.url == 'http://httpbin.org/cookies'\n+        self.assertEqual(r3.url, 'http://httpbin.org/cookies')\n         self.assertTrue('preview' not in json.loads(r3.text)['cookies'])\n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4dfa51ae030e59ddaf9e3736dfdc2e85818a7575", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1551 | Contributors (this commit): 31 | Commits (past 90d): 10 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -454,9 +454,10 @@ def stream_decompress(iterator, mode='gzip'):\n \n \n def stream_untransfer(gen, resp):\n-    if 'gzip' in resp.headers.get('content-encoding', ''):\n+    ce = resp.headers.get('content-encoding', '').lower()\n+    if 'gzip' in ce:\n         gen = stream_decompress(gen, mode='gzip')\n-    elif 'deflate' in resp.headers.get('content-encoding', ''):\n+    elif 'deflate' in ce:\n         gen = stream_decompress(gen, mode='deflate')\n \n     return gen\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c03553ed4ae856d1732ea7ce084549758dc5007f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 35 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,9 +16,8 @@ try:\n     from oauthlib.common import extract_params\n     from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n except ImportError:\n-    directory = os.path.dirname(__file__)\n-    path = os.path.join(directory, 'packages')\n-    sys.path.insert(0, path)\n+    from .packages import oauthlib\n+    sys.modules['oauthlib'] = oauthlib\n     from oauthlib.oauth1 import rfc5849\n     from oauthlib.common import extract_params\n     from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b36863b2c0ad2477335ff8104382965cecd6f4e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1688 | Contributors (this commit): 34 | Commits (past 90d): 17 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -83,7 +83,7 @@ except ImportError:\n \n \n if is_py2:\n-    from urllib import quote, unquote, urlencode\n+    from urllib import quote, unquote, quote_plus, unquote_plus, urlencode\n     from urlparse import urlparse, urlunparse, urljoin, urlsplit\n     from urllib2 import parse_http_list\n     import cookielib\n@@ -104,7 +104,7 @@ if is_py2:\n \n \n elif is_py3:\n-    from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote\n+    from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus\n     from urllib.request import parse_http_list\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n\n@@ -20,7 +20,7 @@ from netrc import netrc, NetrcParseError\n \n from . import __version__\n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, urlparse, basestring, bytes, str, OrderedDict\n+from .compat import quote, quote_plus, urlparse, basestring, bytes, str, OrderedDict\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n \n _hush_pyflakes = (RequestsCookieJar,)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9832bd89172fb1200e8fdfb2e1cc334ad0fcf332", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 55 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ from requests.compat import is_py3, bytes\n \n \n class GuessJSONUTFTests(unittest.TestCase):\n-    \"\"\"Smoke test for https functionality.\"\"\"\n+    \"\"\"Tests for the JSON UTF encoding guessing code.\"\"\"\n \n     codecs = (\n         'utf-8', 'utf-8-sig',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a4be9a2578dcb8f0862cc80f1e37243edfc04bd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 62 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,6 +12,11 @@ import requests.utils\n from requests.compat import is_py3, bytes\n \n \n+if is_py3:\n+    unichr = chr\n+    chr = lambda c: bytes([c])\n+\n+\n class GuessJSONUTFTests(unittest.TestCase):\n     \"\"\"Tests for the JSON UTF encoding guessing code.\"\"\"\n \n@@ -24,7 +29,6 @@ class GuessJSONUTFTests(unittest.TestCase):\n     def test_guess_encoding(self):\n         # Throw 4-character ASCII strings (encoded to a UTF encoding)\n         # at the guess routine; it should correctly guess all codecs.\n-        unichr = chr if is_py3 else __builtins__.unichr\n         guess = requests.utils.guess_json_utf\n         for c in range(33, 127):  # printable only\n             sample = unichr(c) * 4\n@@ -36,7 +40,6 @@ class GuessJSONUTFTests(unittest.TestCase):\n         # Throw random 4-byte strings at the guess function.\n         # Any guess for a UTF encoding is verified, a decode exception\n         # is a test failure.\n-        chr = (lambda c: bytes([c])) if is_py3 else __builtins__.chr\n         guess = requests.utils.guess_json_utf\n         for i in range(1000):\n             sample = bytes().join(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be01a35ef12c7e71c0e71c4e37d1f1a392a66fd8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,9 @@ from requests.compat import is_py3, bytes\n \n if is_py3:\n     unichr = chr\n-    chr = lambda c: bytes([c])\n+    byteschr = lambda c: bytes([c])\n+else:\n+    byteschr = chr\n \n \n class GuessJSONUTFTests(unittest.TestCase):\n@@ -43,7 +45,7 @@ class GuessJSONUTFTests(unittest.TestCase):\n         guess = requests.utils.guess_json_utf\n         for i in range(1000):\n             sample = bytes().join(\n-                [chr(random.randrange(256)) for _ in range(4)])\n+                [byteschr(random.randrange(256)) for _ in range(4)])\n             res = guess(sample)\n             if res is not None and res != 'utf-8':\n                 # This should decode without errors if this is *really*\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e26ccb34eb1c0d3948bfd9e50ffe333605ae554d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 27 | Churn Cumulative: 95 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n+import codecs\n import os\n import sys\n import unittest\n@@ -47,12 +48,30 @@ class GuessJSONUTFTests(unittest.TestCase):\n             sample = bytes().join(\n                 [byteschr(random.randrange(256)) for _ in range(4)])\n             res = guess(sample)\n-            if res is not None and res != 'utf-8':\n+            if res is not None:\n                 # This should decode without errors if this is *really*\n-                # something in this encoding. Skip UTF-8, it is more\n-                # picky about valid data.\n+                # something in this encoding. However, UTF-8 is a lot\n+                # more picky, so we expect errors there. UTF-16 surrogate\n+                # pairs also fail\n+                try:\n                     sample.decode(res)\n-\n+                except UnicodeDecodeError as e:\n+                    self.assertEqual(e.args[0].replace('-', '').lower(),\n+                                     res.replace('-', '').lower())\n+                    if res == 'utf-8':\n+                        self.assertTrue(e.args[-1], (\n+                            'invalid continuation byte',\n+                            'invalid start byte'))\n+                        continue\n+                    if res == 'utf-16':\n+                        self.assertEqual(e.args[-1], 'unexpected end of data')\n+                        self.assertTrue(sample[:2] in (\n+                            codecs.BOM_UTF16_LE, codecs.BOM_UTF16_BE))\n+                        # the second two bytes are in the range \\ud800-\\udfff\n+                        # if someone wants to add tests for that as well. I don't\n+                        # see the need; we are not testing UTF decoding here.\n+                        continue\n+                    raise\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#724a3889bcd26c318cd4063519e67581d3be5d7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 10 | Churn Cumulative: 5921 | Contributors (this commit): 89 | Commits (past 90d): 47 | Contributors (cumulative): 96 | DMM Complexity: 1.0\n\nDIFF:\n@@ -84,7 +84,7 @@ except ImportError:\n \n if is_py2:\n     from urllib import quote, unquote, quote_plus, unquote_plus, urlencode\n-    from urlparse import urlparse, urlunparse, urljoin, urlsplit\n+    from urlparse import urlparse, urlunparse, urljoin, urlsplit, urldefrag\n     from urllib2 import parse_http_list\n     import cookielib\n     from Cookie import Morsel\n@@ -104,7 +104,7 @@ if is_py2:\n \n \n elif is_py3:\n-    from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus\n+    from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus, urldefrag\n     from urllib.request import parse_http_list\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n\n@@ -34,7 +34,7 @@ from .utils import (\n     to_key_val_list, DEFAULT_CA_BUNDLE_PATH, parse_header_links, iter_slices)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n-    StringIO, is_py2, chardet, json, builtin_str)\n+    StringIO, is_py2, chardet, json, builtin_str, urldefrag)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n@@ -445,7 +445,9 @@ class Request(object):\n \n         # Proxies use full URLs.\n         if p.scheme in self.proxies:\n-            return self.full_url\n+            url_base, frag = urldefrag(self.full_url)\n+            return url_base\n+\n \n         path = p.path\n         if not path:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#63243b1e3b435c7736acf1e51c0f6fa6666d861d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 432 | Contributors (this commit): 4 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.14.1'\n-__build__ = 0x001401\n+__version__ = '0.14.2'\n+__build__ = 0x001402\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
