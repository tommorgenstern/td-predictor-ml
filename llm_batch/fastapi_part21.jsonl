{"custom_id": "fastapi#2b7f201a44ed5dc4dc9ab49e887fc6e429a272a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 63 | Churn Cumulative: 63 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,22 @@\n+from datetime import datetime\n+\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+fake_db = {}\n+\n+\n+class Item(BaseModel):\n+    title: str\n+    timestamp: datetime\n+    description: str = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{id}\")\n+def update_item(id: str, item: Item):\n+    json_compatible_item_data = jsonable_encoder(item)\n+    fake_db[id] = json_compatible_item_data\n\n@@ -0,0 +1,21 @@\n+from datetime import datetime\n+\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+\n+\n+class Item(BaseModel):\n+    title: str\n+    timestamp: datetime\n+    description: str = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{id}\")\n+def update_item(id: str, item: Item):\n+    json_compatible_item_data = jsonable_encoder(item)\n+    return JSONResponse(content=json_compatible_item_data)\n\n@@ -0,0 +1,20 @@\n+from fastapi import FastAPI\n+from starlette.responses import Response\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/legacy/\")\n+def get_legacy_data():\n+    data = \"\"\"\n+    <?xml version=\"1.0\"?>\n+    <shampoo>\n+    <Header>\n+        Apply shampoo here.\n+    <Header>\n+    <Body>\n+        You'll have to use soap here.\n+    </Body>\n+    </shampoo>\n+    \"\"\"\n+    return Response(content=data, media_type=\"application/xml\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8e3a7699a3cabbe35f2c45b915167c2adf69b476", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 121 | Contributors (this commit): 1 | Commits (past 90d): 35 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.18.0\"\n+__version__ = \"0.19.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#528ef7e0799ce4758dad88a0252c7d09c4efdd68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 6 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/1 | Churn Δ: 48 | Churn Cumulative: 48 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI\n+from starlette.responses import JSONResponse\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/cookie/\")\n+def create_cookie():\n+    content = {\"message\": \"Come to the dark side, we have cookies\"}\n+    response = JSONResponse(content=content)\n+    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n+    return response\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI\n+from starlette.responses import JSONResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/headers/\")\n+def get_headers():\n+    content = {\"message\": \"Hello World\"}\n+    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n+    return JSONResponse(content=content, headers=headers)\n\n\n@@ -0,0 +1,12 @@\n+from starlette.testclient import TestClient\n+\n+from response_cookies.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_path_operation():\n+    response = client.post(\"/cookie/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n+    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n\n\n@@ -0,0 +1,13 @@\n+from starlette.testclient import TestClient\n+\n+from response_headers.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/headers/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\"}\n+    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n+    assert response.headers[\"Content-Language\"] == \"en-US\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c1df0f6b84eb5851a43d63449fe2f87593e5110d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 41 | Churn Cumulative: 41 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,6 @@\n+from fastapi import FastAPI\n+from starlette.staticfiles import StaticFiles\n+\n+app = FastAPI()\n+\n+app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI\n+from starlette.requests import Request\n+from starlette.staticfiles import StaticFiles\n+from starlette.templating import Jinja2Templates\n+\n+app = FastAPI()\n+\n+app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n+\n+\n+templates = Jinja2Templates(directory=\"templates\")\n+\n+\n+@app.get(\"/items/{id}\")\n+async def read_item(request: Request, id: str):\n+    return templates.TemplateResponse(\"item.html\", {\"request\": request, \"id\": id})\n\n\n@@ -0,0 +1,19 @@\n+import shutil\n+\n+from starlette.testclient import TestClient\n+\n+\n+def test_main():\n+    shutil.copytree(\"./docs/src/templates/templates/\", \"./templates\")\n+    shutil.copytree(\"./docs/src/templates/static/\", \"./static\")\n+    from templates.tutorial001 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert b\"<h1>Item ID: foo</h1>\" in response.content\n+    response = client.get(\"/static/styles.css\")\n+    assert response.status_code == 200\n+    assert b\"color: green;\" in response.content\n+    shutil.rmtree(\"./templates\")\n+    shutil.rmtree(\"./static\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3797c04946bac7a8ae79eee7bbe31f0505325757", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 114 | Lines Deleted: 48 | Files Changed: 9 | Hunks: 49 | Methods Changed: 26 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 162 | Churn Cumulative: 1364 | Contributors (this commit): 1 | Commits (past 90d): 22 | Contributors (cumulative): 9 | DMM Complexity: 0.8222222222222222\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from fastapi import FastAPI, Security\n+from fastapi import Depends, FastAPI\n from fastapi.security import OAuth2PasswordBearer\n \n app = FastAPI()\n@@ -7,5 +7,5 @@ oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\")\n \n \n @app.get(\"/items/\")\n-async def read_items(token: str = Security(oauth2_scheme)):\n+async def read_items(token: str = Depends(oauth2_scheme)):\n     return {\"token\": token}\n\n@@ -1,6 +1,6 @@\n from typing import Optional\n \n-from fastapi import Depends, FastAPI, Security\n+from fastapi import Depends, FastAPI\n from fastapi.security import OAuth2PasswordBearer\n from pydantic import BaseModel\n \n@@ -22,7 +22,7 @@ def fake_decode_token(token):\n     )\n \n \n-async def get_current_user(token: str = Security(oauth2_scheme)):\n+async def get_current_user(token: str = Depends(oauth2_scheme)):\n     user = fake_decode_token(token)\n     return user\n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Depends, FastAPI, HTTPException, Security\n+from fastapi import Depends, FastAPI, HTTPException\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from pydantic import BaseModel\n+from starlette.status import HTTP_401_UNAUTHORIZED\n \n fake_users_db = {\n     \"johndoe\": {\n@@ -53,11 +54,13 @@ def fake_decode_token(token):\n     return user\n \n \n-async def get_current_user(token: str = Security(oauth2_scheme)):\n+async def get_current_user(token: str = Depends(oauth2_scheme)):\n     user = fake_decode_token(token)\n     if not user:\n         raise HTTPException(\n-            status_code=400, detail=\"Invalid authentication credentials\"\n+            status_code=HTTP_401_UNAUTHORIZED,\n+            detail=\"Invalid authentication credentials\",\n+            headers={\"WWW-Authenticate\": \"Bearer\"},\n         )\n     return user\n \n\n@@ -6,7 +6,7 @@ from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from jwt import PyJWTError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n-from starlette.status import HTTP_403_FORBIDDEN\n+from starlette.status import HTTP_401_UNAUTHORIZED\n \n # to get a string like this run:\n # openssl rand -hex 32\n@@ -89,7 +89,9 @@ def create_access_token(*, data: dict, expires_delta: timedelta = None):\n \n async def get_current_user(token: str = Depends(oauth2_scheme)):\n     credentials_exception = HTTPException(\n-        status_code=HTTP_403_FORBIDDEN, detail=\"Could not validate credentials\"\n+        status_code=HTTP_401_UNAUTHORIZED,\n+        detail=\"Could not validate credentials\",\n+        headers={\"WWW-Authenticate\": \"Bearer\"},\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n@@ -115,7 +117,11 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n-        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n+        raise HTTPException(\n+            status_code=HTTP_401_UNAUTHORIZED,\n+            detail=\"Incorrect username or password\",\n+            headers={\"WWW-Authenticate\": \"Bearer\"},\n+        )\n     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n\n@@ -11,7 +11,7 @@ from fastapi.security import (\n from jwt import PyJWTError\n from passlib.context import CryptContext\n from pydantic import BaseModel, ValidationError\n-from starlette.status import HTTP_403_FORBIDDEN\n+from starlette.status import HTTP_401_UNAUTHORIZED\n \n # to get a string like this run:\n # openssl rand -hex 32\n@@ -106,8 +106,14 @@ def create_access_token(*, data: dict, expires_delta: timedelta = None):\n async def get_current_user(\n     security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n ):\n+    if security_scopes.scopes:\n+        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n+    else:\n+        authenticate_value = f\"Bearer\"\n     credentials_exception = HTTPException(\n-        status_code=HTTP_403_FORBIDDEN, detail=\"Could not validate credentials\"\n+        status_code=HTTP_401_UNAUTHORIZED,\n+        detail=\"Could not validate credentials\",\n+        headers={\"WWW-Authenticate\": authenticate_value},\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n@@ -124,7 +130,9 @@ async def get_current_user(\n     for scope in security_scopes.scopes:\n         if scope not in token_data.scopes:\n             raise HTTPException(\n-                status_code=HTTP_403_FORBIDDEN, detail=\"Not enough permissions\"\n+                status_code=HTTP_401_UNAUTHORIZED,\n+                detail=\"Not enough permissions\",\n+                headers={\"WWW-Authenticate\": authenticate_value},\n             )\n     return user\n \n@@ -160,3 +168,8 @@ async def read_own_items(\n     current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n+\n+\n+@app.get(\"/status/\")\n+async def read_system_status(current_user: User = Depends(get_current_user)):\n+    return {\"status\": \"ok\"}\n\n@@ -1,12 +1,12 @@\n from typing import List, Optional\n \n+from fastapi.exceptions import HTTPException\n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n from fastapi.params import Form\n from fastapi.security.base import SecurityBase\n from fastapi.security.utils import get_authorization_scheme_param\n-from starlette.exceptions import HTTPException\n from starlette.requests import Request\n-from starlette.status import HTTP_403_FORBIDDEN\n+from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n \n \n class OAuth2PasswordRequestForm:\n@@ -154,7 +154,9 @@ class OAuth2PasswordBearer(OAuth2):\n         if not authorization or scheme.lower() != \"bearer\":\n             if self.auto_error:\n                 raise HTTPException(\n-                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+                    status_code=HTTP_401_UNAUTHORIZED,\n+                    detail=\"Not authenticated\",\n+                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                 )\n             else:\n                 return None\n@@ -164,3 +166,4 @@ class OAuth2PasswordBearer(OAuth2):\n class SecurityScopes:\n     def __init__(self, scopes: List[str] = None):\n         self.scopes = scopes or []\n+        self.scope_str = \" \".join(self.scopes)\n\n@@ -41,8 +41,9 @@ def test_openapi_schema():\n \n def test_no_token():\n     response = client.get(\"/items\")\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_token():\n@@ -53,5 +54,6 @@ def test_token():\n \n def test_incorrect_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -135,8 +135,9 @@ def test_login_incorrect_username():\n \n def test_no_token():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_token():\n@@ -153,16 +154,18 @@ def test_token():\n \n def test_incorrect_token():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_incorrect_token_type():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_inactive_user():\n\n@@ -80,9 +80,42 @@ openapi_schema = {\n                 \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n             }\n         },\n+        \"/status/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read System Status\",\n+                \"operationId\": \"read_system_status_status__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n+                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"Token\": {\n+                \"title\": \"Token\",\n+                \"required\": [\"access_token\", \"token_type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"access_token\": {\"title\": \"Access_Token\", \"type\": \"string\"},\n+                    \"token_type\": {\"title\": \"Token_Type\", \"type\": \"string\"},\n+                },\n+            },\n             \"Body_login_for_access_token\": {\n                 \"title\": \"Body_login_for_access_token\",\n                 \"required\": [\"username\", \"password\"],\n@@ -100,26 +133,6 @@ openapi_schema = {\n                     \"client_secret\": {\"title\": \"Client_Secret\", \"type\": \"string\"},\n                 },\n             },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access_Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token_Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n             \"ValidationError\": {\n                 \"title\": \"ValidationError\",\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n@@ -204,8 +217,9 @@ def test_login_incorrect_username():\n \n def test_no_token():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_token():\n@@ -225,16 +239,18 @@ def test_token():\n \n def test_incorrect_token():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n def test_incorrect_token_type():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_verify_password():\n@@ -257,8 +273,9 @@ def test_token_no_sub():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n         },\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n def test_token_no_username():\n@@ -268,8 +285,9 @@ def test_token_no_username():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n         },\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n def test_token_no_scope():\n@@ -277,8 +295,9 @@ def test_token_no_scope():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Not enough permissions\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n def test_token_inexistent_user():\n@@ -288,8 +307,9 @@ def test_token_inexistent_user():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n         },\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n def test_token_inactive_user():\n@@ -311,3 +331,19 @@ def test_read_items():\n     )\n     assert response.status_code == 200\n     assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n+\n+\n+def test_read_system_status():\n+    access_token = get_access_token()\n+    response = client.get(\n+        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"status\": \"ok\"}\n+\n+\n+def test_read_system_status_no_token():\n+    response = client.get(\"/status/\")\n+    assert response.status_code == 401\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7f673cf4e94667eddf15ef724146e5792d9eb82e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 123 | Contributors (this commit): 1 | Commits (past 90d): 36 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.19.0\"\n+__version__ = \"0.20.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6ff89284c52dc88223fc72fe2d26af8776d527b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 34 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 101 | Churn Cumulative: 157 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,67 @@\n+import inspect\n+import os\n+\n+import requests\n+\n+room_id = \"5c9c9540d73408ce4fbc1403\"  # FastAPI\n+room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n+\n+gitter_token = os.getenv(\"GITTER_TOKEN\")\n+assert gitter_token\n+github_token = os.getenv(\"GITHUB_TOKEN\")\n+assert github_token\n+tag_name = os.getenv(\"TRAVIS_TAG\")\n+assert tag_name\n+\n+\n+def get_github_graphql(tag_name: str):\n+    github_graphql = \"\"\"\n+    {\n+    repository(owner: \"tiangolo\", name: \"fastapi\") {\n+        release (tagName: \"{{tag_name}}\" ) {\n+        description\n+        }\n+      }\n+    }\n+    \"\"\"\n+    github_graphql = github_graphql.replace(\"{{tag_name}}\", tag_name)\n+    return github_graphql\n+\n+\n+def get_github_release_text(tag_name: str):\n+    url = \"https://api.github.com/graphql\"\n+    headers = {\"Authorization\": f\"Bearer {github_token}\"}\n+    github_graphql = get_github_graphql(tag_name=tag_name)\n+    response = requests.post(url, json={\"query\": github_graphql}, headers=headers)\n+    assert response.status_code == 200\n+    data = response.json()\n+    return data[\"data\"][\"repository\"][\"release\"][\"description\"]\n+\n+\n+def get_gitter_message(release_text: str):\n+    text = f\"\"\"\n+    New release! :tada: :rocket:\n+    (by FastAPI bot)\n+\n+    ## {tag_name}\n+    \"\"\"\n+    text = inspect.cleandoc(text) + \"\\n\\n\" + release_text\n+    return text\n+\n+\n+def send_gitter_message(text: str):\n+    headers = {\"Authorization\": f\"Bearer {gitter_token}\"}\n+    url = f\"https://api.gitter.im/v1/rooms/{room_id}/chatMessages\"\n+    data = {\"text\": text}\n+    response = requests.post(url, headers=headers, json=data)\n+    assert response.status_code == 200\n+\n+\n+def main():\n+    release_text = get_github_release_text(tag_name=tag_name)\n+    text = get_gitter_message(release_text=release_text)\n+    send_gitter_message(text=text)\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n@@ -1,34 +0,0 @@\n-#%%\n-from pathlib import Path, PurePath\n-from string import digits\n-\n-directory = Path(\"./docs/src\")\n-skip_names = {\"bigger_applications\"}\n-skip_dirs = {directory / name for name in skip_names}\n-dirs = sorted([Path(f) for f in directory.iterdir() if f not in skip_dirs])\n-d: PurePath\n-sufix = \"__out__\"\n-for d in dirs:\n-    if d.name.endswith(sufix):\n-        continue\n-    output_dir_name = d.name + \"__out__\"\n-    output_directory = directory / output_dir_name\n-    output_directory.mkdir(exist_ok=True)\n-    files = sorted([Path(f) for f in d.iterdir()])\n-    f: PurePath\n-    for i, f in enumerate(files):\n-        index = str(i + 1).zfill(3)\n-        if f.name != \"__init__.py\" and f.name.endswith(\".py\"):\n-            new_name = output_directory / f\"tutorial{index}.py\"\n-        else:\n-            new_name = output_directory / f.name\n-        print(new_name)\n-        f.rename(new_name)\n-\n-for d in dirs:\n-    current_dir = Path(str(d) + sufix)\n-    print(current_dir)\n-    current_dir.rename(d)\n-\n-\n-#%%\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5189c93d851dfcc56d9b49f6ba66665f737b0a69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 125 | Contributors (this commit): 1 | Commits (past 90d): 35 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.20.0\"\n+__version__ = \"0.20.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5f13b53ea57af1e65cc75b1c190887f1212c1395", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 69 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ import os\n import requests\n \n room_id = \"5c9c9540d73408ce4fbc1403\"  # FastAPI\n-room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n+# room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n \n gitter_token = os.getenv(\"GITTER_TOKEN\")\n assert gitter_token\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4a1648b04e74b5943f3ffadf92737f7d9c8201af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2475 | Contributors (this commit): 4 | Commits (past 90d): 18 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ def get_app(\n     response_class: Type[Response] = JSONResponse,\n     response_field: Field = None,\n ) -> Callable:\n-    assert dependant.call is not None, \"dependant.call must me a function\"\n+    assert dependant.call is not None, \"dependant.call must be a function\"\n     is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n     is_body_form = body_field and isinstance(body_field.schema, params.Form)\n \n@@ -71,7 +71,7 @@ def get_app(\n                 status_code=HTTP_422_UNPROCESSABLE_ENTITY, detail=errors_out.errors()\n             )\n         else:\n-            assert dependant.call is not None, \"dependant.call must me a function\"\n+            assert dependant.call is not None, \"dependant.call must be a function\"\n             if is_coroutine:\n                 raw_response = await dependant.call(**values)\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f541d2c200faee900e2c31faf1883588c414100e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 500 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,13 +5,15 @@ from typing import Any, Dict, List, Optional, Union\n from pydantic import BaseModel, Schema as PSchema\n from pydantic.types import UrlStr\n \n+logger = logging.getLogger(\"fastapi\")\n+\n try:\n     import email_validator\n \n     assert email_validator  # make autoflake ignore the unused import\n     from pydantic.types import EmailStr  # type: ignore\n except ImportError:  # pragma: no cover\n-    logging.warning(\n+    logger.warning(\n         \"email-validator not installed, email fields will be treated as str.\\n\"\n         + \"To install, run: pip install email-validator\"\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b0b88f9d5b717cff28dd3e056e31fb6eb4fef73f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2477 | Contributors (this commit): 5 | Commits (past 90d): 19 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -61,7 +61,7 @@ def get_app(\n             logging.error(f\"Error getting request body: {e}\")\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n-            )\n+            ) from e\n         values, errors, background_tasks = await solve_dependencies(\n             request=request, dependant=dependant, body=body\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7b2993682f94c4fc9b56549bb00de641c361954c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 127 | Contributors (this commit): 1 | Commits (past 90d): 34 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.20.1\"\n+__version__ = \"0.21.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ca27317b654e8265b8783df22e88a439adf96e8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 260 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 3 | Methods Changed: 10 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 262 | Churn Cumulative: 1095 | Contributors (this commit): 2 | Commits (past 90d): 43 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,5 +7,15 @@ from starlette.background import BackgroundTasks\n from .applications import FastAPI\n from .datastructures import UploadFile\n from .exceptions import HTTPException\n-from .params import Body, Cookie, Depends, File, Form, Header, Path, Query, Security\n+from .param_functions import (\n+    Body,\n+    Cookie,\n+    Depends,\n+    File,\n+    Form,\n+    Header,\n+    Path,\n+    Query,\n+    Security,\n+)\n from .routing import APIRouter\n\n@@ -66,7 +66,7 @@ def get_sub_dependant(\n         dependency_scopes = depends.scopes\n         security_scopes.extend(dependency_scopes)\n     if isinstance(dependency, SecurityBase):\n-        use_scopes = []\n+        use_scopes: List[str] = []\n         if isinstance(dependency, (OAuth2, OpenIdConnect)):\n             use_scopes = security_scopes\n         security_requirement = SecurityRequirement(\n\n@@ -0,0 +1,248 @@\n+from typing import Any, Callable, Sequence\n+\n+from fastapi import params\n+\n+\n+def Path(  # noqa: N802\n+    default: Any,\n+    *,\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    deprecated: bool = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Path(\n+        default=default,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        deprecated=deprecated,\n+        **extra,\n+    )\n+\n+\n+def Query(  # noqa: N802\n+    default: Any,\n+    *,\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    deprecated: bool = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Query(\n+        default,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        deprecated=deprecated,\n+        **extra,\n+    )\n+\n+\n+def Header(  # noqa: N802\n+    default: Any,\n+    *,\n+    alias: str = None,\n+    convert_underscores: bool = True,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    deprecated: bool = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Header(\n+        default,\n+        alias=alias,\n+        convert_underscores=convert_underscores,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        deprecated=deprecated,\n+        **extra,\n+    )\n+\n+\n+def Cookie(  # noqa: N802\n+    default: Any,\n+    *,\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    deprecated: bool = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Cookie(\n+        default,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        deprecated=deprecated,\n+        **extra,\n+    )\n+\n+\n+def Body(  # noqa: N802\n+    default: Any,\n+    *,\n+    embed: bool = False,\n+    media_type: str = \"application/json\",\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Body(\n+        default,\n+        embed=embed,\n+        media_type=media_type,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        **extra,\n+    )\n+\n+\n+def Form(  # noqa: N802\n+    default: Any,\n+    *,\n+    media_type: str = \"application/x-www-form-urlencoded\",\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.Form(\n+        default,\n+        media_type=media_type,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        **extra,\n+    )\n+\n+\n+def File(  # noqa: N802\n+    default: Any,\n+    *,\n+    media_type: str = \"multipart/form-data\",\n+    alias: str = None,\n+    title: str = None,\n+    description: str = None,\n+    gt: float = None,\n+    ge: float = None,\n+    lt: float = None,\n+    le: float = None,\n+    min_length: int = None,\n+    max_length: int = None,\n+    regex: str = None,\n+    **extra: Any,\n+) -> Any:\n+    return params.File(\n+        default,\n+        media_type=media_type,\n+        alias=alias,\n+        title=title,\n+        description=description,\n+        gt=gt,\n+        ge=ge,\n+        lt=lt,\n+        le=le,\n+        min_length=min_length,\n+        max_length=max_length,\n+        regex=regex,\n+        **extra,\n+    )\n+\n+\n+def Depends(dependency: Callable = None) -> Any:  # noqa: N802\n+    return params.Depends(dependency=dependency)\n+\n+\n+def Security(  # noqa: N802\n+    dependency: Callable = None, scopes: Sequence[str] = None\n+) -> Any:\n+    return params.Security(dependency=dependency, scopes=scopes)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#adfbd271000b87334e393f95a682364c4dc7fd8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 9 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 57 | Churn Cumulative: 789 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: 0.9230769230769231\n\nDIFF:\n@@ -114,7 +114,7 @@ def get_openapi_operation_request_body(\n def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:\n     if route.operation_id:\n         return route.operation_id\n-    path: str = route.path\n+    path: str = route.path_format\n     operation_id = route.name + path\n     operation_id = operation_id.replace(\"{\", \"_\").replace(\"}\", \"_\").replace(\"/\", \"_\")\n     operation_id = operation_id + \"_\" + method.lower()\n@@ -253,7 +253,9 @@ def get_openapi(\n             if result:\n                 path, security_schemes, path_definitions = result\n                 if path:\n-                    paths.setdefault(openapi_prefix + route.path, {}).update(path)\n+                    paths.setdefault(openapi_prefix + route.path_format, {}).update(\n+                        path\n+                    )\n                 if security_schemes:\n                     components.setdefault(\"securitySchemes\", {}).update(\n                         security_schemes\n\n@@ -0,0 +1,51 @@\n+from fastapi import FastAPI, Path\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/int/{param:int}\")\n+def int_convertor(param: int = Path(...)):\n+    return {\"int\": param}\n+\n+\n+@app.get(\"/float/{param:float}\")\n+def float_convertor(param: float = Path(...)):\n+    return {\"float\": param}\n+\n+\n+@app.get(\"/path/{param:path}\")\n+def path_convertor(param: str = Path(...)):\n+    return {\"path\": param}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_route_converters_int():\n+    # Test integer conversion\n+    response = client.get(\"/int/5\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"int\": 5}\n+    assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"\n+\n+\n+def test_route_converters_float():\n+    # Test float conversion\n+    response = client.get(\"/float/25.5\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"float\": 25.5}\n+    assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"\n+\n+\n+def test_route_converters_path():\n+    # Test path conversion\n+    response = client.get(\"/path/some/example\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"path\": \"some/example\"}\n+\n+\n+def test_url_path_for_path_convertor():\n+    assert (\n+        app.url_path_for(\"path_convertor\", param=\"some/example\") == \"/path/some/example\"\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e92b43b5c826ffc2109e813cbbca7875cdc13bbc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 365 | Lines Deleted: 37 | Files Changed: 10 | Hunks: 76 | Methods Changed: 56 | Complexity Δ (Sum/Max): 41/14 | Churn Δ: 402 | Churn Cumulative: 5909 | Contributors (this commit): 7 | Commits (past 90d): 54 | Contributors (cumulative): 19 | DMM Complexity: 0.9420289855072463\n\nDIFF:\n@@ -1,13 +1,20 @@\n-from fastapi import FastAPI\n+from fastapi import Depends, FastAPI, Header, HTTPException\n \n from .routers import items, users\n \n app = FastAPI()\n \n+\n+async def get_token_header(x_token: str = Header(...)):\n+    if x_token != \"fake-super-secret-token\":\n+        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n+\n+\n app.include_router(users.router)\n app.include_router(\n     items.router,\n     prefix=\"/items\",\n     tags=[\"items\"],\n+    dependencies=[Depends(get_token_header)],\n     responses={404: {\"description\": \"Not found\"}},\n )\n\n@@ -1,21 +1,19 @@\n-from fastapi import Depends, FastAPI\n+from fastapi import Depends, FastAPI, Header, HTTPException\n \n app = FastAPI()\n \n \n-class FixedContentQueryChecker:\n-    def __init__(self, fixed_content: str):\n-        self.fixed_content = fixed_content\n-\n-    def __call__(self, q: str = \"\"):\n-        if q:\n-            return self.fixed_content in q\n-        return False\n+async def verify_token(x_token: str = Header(...)):\n+    if x_token != \"fake-super-secret-token\":\n+        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n \n \n-checker = FixedContentQueryChecker(\"bar\")\n+async def verify_key(x_key: str = Header(...)):\n+    if x_key != \"fake-super-secret-key\":\n+        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n+    return x_key\n \n \n-@app.get(\"/query-checker/\")\n-async def read_query_check(fixed_content_included: bool = Depends(checker)):\n-    return {\"fixed_content_in_query\": fixed_content_included}\n+@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\n+async def read_items():\n+    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -0,0 +1,21 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+class FixedContentQueryChecker:\n+    def __init__(self, fixed_content: str):\n+        self.fixed_content = fixed_content\n+\n+    def __call__(self, q: str = \"\"):\n+        if q:\n+            return self.fixed_content in q\n+        return False\n+\n+\n+checker = FixedContentQueryChecker(\"bar\")\n+\n+\n+@app.get(\"/query-checker/\")\n+async def read_query_check(fixed_content_included: bool = Depends(checker)):\n+    return {\"fixed_content_in_query\": fixed_content_included}\n\n@@ -3,6 +3,7 @@ from typing import Any, Callable, Dict, List, Optional, Type, Union\n from fastapi import routing\n from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n from fastapi.openapi.utils import get_openapi\n+from fastapi.params import Depends\n from pydantic import BaseModel\n from starlette.applications import Starlette\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n@@ -111,6 +112,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -128,6 +130,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -147,6 +150,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -165,6 +169,7 @@ class FastAPI(Starlette):\n                 response_model=response_model,\n                 status_code=status_code,\n                 tags=tags or [],\n+                dependencies=dependencies or [],\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n@@ -186,10 +191,15 @@ class FastAPI(Starlette):\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         self.router.include_router(\n-            router, prefix=prefix, tags=tags, responses=responses or {}\n+            router,\n+            prefix=prefix,\n+            tags=tags,\n+            dependencies=dependencies,\n+            responses=responses or {},\n         )\n \n     def get(\n@@ -199,6 +209,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -214,6 +225,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -232,6 +244,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -247,6 +260,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -265,6 +279,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -280,6 +295,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -298,6 +314,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -313,6 +330,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -331,6 +349,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -346,6 +365,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -364,6 +384,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -379,6 +400,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -397,6 +419,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -412,6 +435,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -430,6 +454,7 @@ class FastAPI(Starlette):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -445,6 +470,7 @@ class FastAPI(Starlette):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n\n@@ -52,7 +52,7 @@ sequence_types = (list, set, tuple)\n sequence_shape_to_type = {Shape.LIST: list, Shape.SET: set, Shape.TUPLE: tuple}\n \n \n-def get_sub_dependant(\n+def get_param_sub_dependant(\n     *, param: inspect.Parameter, path: str, security_scopes: List[str] = None\n ) -> Dependant:\n     depends: params.Depends = param.default\n@@ -60,6 +60,30 @@ def get_sub_dependant(\n         dependency = depends.dependency\n     else:\n         dependency = param.annotation\n+    return get_sub_dependant(\n+        depends=depends,\n+        dependency=dependency,\n+        path=path,\n+        name=param.name,\n+        security_scopes=security_scopes,\n+    )\n+\n+\n+def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n+    assert callable(\n+        depends.dependency\n+    ), \"A parameter-less dependency must have a callable dependency\"\n+    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)\n+\n+\n+def get_sub_dependant(\n+    *,\n+    depends: params.Depends,\n+    dependency: Callable,\n+    path: str,\n+    name: str = None,\n+    security_scopes: List[str] = None,\n+) -> Dependant:\n     security_requirement = None\n     security_scopes = security_scopes or []\n     if isinstance(depends, params.Security):\n@@ -73,7 +97,7 @@ def get_sub_dependant(\n             security_scheme=dependency, scopes=use_scopes\n         )\n     sub_dependant = get_dependant(\n-        path=path, call=dependency, name=param.name, security_scopes=security_scopes\n+        path=path, call=dependency, name=name, security_scopes=security_scopes\n     )\n     if security_requirement:\n         sub_dependant.security_requirements.append(security_requirement)\n@@ -111,7 +135,7 @@ def get_dependant(\n     for param_name in signature_params:\n         param = signature_params[param_name]\n         if isinstance(param.default, params.Depends):\n-            sub_dependant = get_sub_dependant(\n+            sub_dependant = get_param_sub_dependant(\n                 param=param, path=path, security_scopes=security_scopes\n             )\n             dependant.dependencies.append(sub_dependant)\n@@ -277,7 +301,7 @@ async def solve_dependencies(\n             solved = await sub_dependant.call(**sub_values)\n         else:\n             solved = await run_in_threadpool(sub_dependant.call, **sub_values)\n-        assert sub_dependant.name is not None, \"Subdependants always have a name\"\n+        if sub_dependant.name is not None:\n             values[sub_dependant.name] = solved\n     path_values, path_errors = request_params_to_args(\n         dependant.path_params, request.path_params\n\n@@ -5,7 +5,12 @@ from typing import Any, Callable, Dict, List, Optional, Type, Union\n \n from fastapi import params\n from fastapi.dependencies.models import Dependant\n-from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n+from fastapi.dependencies.utils import (\n+    get_body_field,\n+    get_dependant,\n+    get_parameterless_sub_dependant,\n+    solve_dependencies,\n+)\n from fastapi.encoders import jsonable_encoder\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n@@ -101,6 +106,7 @@ class APIRoute(routing.Route):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -135,6 +141,7 @@ class APIRoute(routing.Route):\n             self.response_field = None\n         self.status_code = status_code\n         self.tags = tags or []\n+        self.dependencies = dependencies or []\n         self.summary = summary\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         self.response_description = response_description\n@@ -175,6 +182,10 @@ class APIRoute(routing.Route):\n             endpoint\n         ), f\"An endpoint must be a function or method\"\n         self.dependant = get_dependant(path=path, call=self.endpoint)\n+        for depends in self.dependencies[::-1]:\n+            self.dependant.dependencies.insert(\n+                0, get_parameterless_sub_dependant(depends=depends, path=path)\n+            )\n         self.body_field = get_body_field(dependant=self.dependant, name=self.name)\n         self.app = request_response(\n             get_app(\n@@ -196,6 +207,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -213,6 +225,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -233,6 +246,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -251,6 +265,7 @@ class APIRouter(routing.Router):\n                 response_model=response_model,\n                 status_code=status_code,\n                 tags=tags or [],\n+                dependencies=dependencies or [],\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n@@ -272,6 +287,7 @@ class APIRouter(routing.Router):\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         if prefix:\n@@ -290,6 +306,7 @@ class APIRouter(routing.Router):\n                     response_model=route.response_model,\n                     status_code=route.status_code,\n                     tags=(route.tags or []) + (tags or []),\n+                    dependencies=(dependencies or []) + (route.dependencies or []),\n                     summary=route.summary,\n                     description=route.description,\n                     response_description=route.response_description,\n@@ -321,6 +338,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -336,6 +354,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -355,6 +374,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -370,6 +390,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -389,6 +410,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -404,6 +426,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -423,6 +446,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -438,6 +462,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -457,6 +482,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -472,6 +498,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -491,6 +518,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -506,6 +534,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -525,6 +554,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -540,6 +570,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -559,6 +590,7 @@ class APIRouter(routing.Router):\n         response_model: Type[BaseModel] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n+        dependencies: List[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -574,6 +606,7 @@ class APIRouter(routing.Router):\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n+            dependencies=dependencies or [],\n             summary=summary,\n             description=description,\n             response_description=response_description,\n\n@@ -74,10 +74,28 @@ openapi_schema = {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n                 },\n                 \"tags\": [\"items\"],\n                 \"summary\": \"Read Items\",\n                 \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                        \"name\": \"x-token\",\n+                        \"in\": \"header\",\n+                    }\n+                ],\n             }\n         },\n         \"/items/{item_id}\": {\n@@ -108,7 +126,13 @@ openapi_schema = {\n                         \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n                         \"name\": \"item_id\",\n                         \"in\": \"path\",\n-                    }\n+                    },\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                        \"name\": \"x-token\",\n+                        \"in\": \"header\",\n+                    },\n                 ],\n             },\n             \"put\": {\n@@ -139,7 +163,13 @@ openapi_schema = {\n                         \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n                         \"name\": \"item_id\",\n                         \"in\": \"path\",\n-                    }\n+                    },\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                        \"name\": \"x-token\",\n+                        \"in\": \"header\",\n+                    },\n                 ],\n             },\n         },\n@@ -177,29 +207,94 @@ openapi_schema = {\n \n \n @pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n+    \"path,expected_status,expected_response,headers\",\n     [\n-        (\"/users\", 200, [{\"username\": \"Foo\"}, {\"username\": \"Bar\"}]),\n-        (\"/users/foo\", 200, {\"username\": \"foo\"}),\n-        (\"/users/me\", 200, {\"username\": \"fakecurrentuser\"}),\n-        (\"/items\", 200, [{\"name\": \"Item Foo\"}, {\"name\": \"item Bar\"}]),\n-        (\"/items/bar\", 200, {\"name\": \"Fake Specific Item\", \"item_id\": \"bar\"}),\n-        (\"/openapi.json\", 200, openapi_schema),\n+        (\"/users\", 200, [{\"username\": \"Foo\"}, {\"username\": \"Bar\"}], {}),\n+        (\"/users/foo\", 200, {\"username\": \"foo\"}, {}),\n+        (\"/users/me\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n+        (\n+            \"/items\",\n+            200,\n+            [{\"name\": \"Item Foo\"}, {\"name\": \"item Bar\"}],\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\n+            \"/items/bar\",\n+            200,\n+            {\"name\": \"Fake Specific Item\", \"item_id\": \"bar\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items\", 400, {\"detail\": \"X-Token header invalid\"}, {\"X-Token\": \"invalid\"}),\n+        (\n+            \"/items/bar\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\n+            \"/items/bar\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\"/openapi.json\", 200, openapi_schema, {}),\n     ],\n )\n-def test_get_path(path, expected_status, expected_response):\n-    response = client.get(path)\n+def test_get_path(path, expected_status, expected_response, headers):\n+    response = client.get(path, headers=headers)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_put():\n+def test_put_no_header():\n     response = client.put(\"/items/foo\")\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_put_invalid_header():\n+    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_put():\n+    response = client.put(\"/items/foo\", headers={\"X-Token\": \"fake-super-secret-token\"})\n     assert response.status_code == 200\n     assert response.json() == {\"item_id\": \"foo\", \"name\": \"The Fighters\"}\n \n \n def test_put_forbidden():\n-    response = client.put(\"/items/bar\")\n+    response = client.put(\"/items/bar\", headers={\"X-Token\": \"fake-super-secret-token\"})\n     assert response.status_code == 403\n     assert response.json() == {\"detail\": \"You can only update the item: foo\"}\n\n@@ -0,0 +1,128 @@\n+from starlette.testclient import TestClient\n+\n+from dependencies.tutorial006 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                        \"name\": \"x-token\",\n+                        \"in\": \"header\",\n+                    },\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n+                        \"name\": \"x-key\",\n+                        \"in\": \"header\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_no_headers():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_invalid_one_header():\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_second_header():\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_valid_headers():\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -166,8 +166,6 @@ def test_post_form_no_body():\n \n def test_post_body_json():\n     response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    print(response)\n-    print(response.content)\n     assert response.status_code == 422\n     assert response.json() == file_required\n \n\n@@ -227,7 +227,6 @@ def test_token():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    print(response.json())\n     assert response.status_code == 200\n     assert response.json() == {\n         \"username\": \"johndoe\",\n@@ -319,7 +318,6 @@ def test_token_inactive_user():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    print(response.json())\n     assert response.status_code == 400\n     assert response.json() == {\"detail\": \"Inactive user\"}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
