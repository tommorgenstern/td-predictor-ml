{"custom_id": "flask#97ad0859128a1e6f2ec3efb9efc46c7c40646318", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 546 | Contributors (this commit): 14 | Commits (past 90d): 3 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -267,9 +267,10 @@ intersphinx_mapping = {\n     'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n     'click': ('http://click.pocoo.org/', None),\n     'jinja': ('http://jinja.pocoo.org/docs/', None),\n+    'itsdangerous': ('https://pythonhosted.org/itsdangerous', None),\n     'sqlalchemy': ('https://docs.sqlalchemy.org/en/latest/', None),\n     'wtforms': ('https://wtforms.readthedocs.io/en/latest/', None),\n-    'blinker': ('https://pythonhosted.org/blinker/', None)\n+    'blinker': ('https://pythonhosted.org/blinker/', None),\n }\n \n html_theme_options = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5888d76342ef6005af20c0b9a42426d17118570e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 242 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -161,7 +161,7 @@ def purge_module(request):\n     return inner\n \n \n-@pytest.yield_fixture(autouse=True)\n+@pytest.fixture(autouse=True)\n def catch_deprecation_warnings(recwarn):\n     yield\n     gc.collect()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#851ca95778ded1b4b97fa92ddd45ab5b43fdcd90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2279 | Contributors (this commit): 51 | Commits (past 90d): 2 | Contributors (cumulative): 51 | DMM Complexity: None\n\nDIFF:\n@@ -383,7 +383,7 @@ def flash(message, category='message'):\n     #     session.setdefault('_flashes', []).append((category, message))\n     #\n     # This assumed that changes made to mutable structures in the session are\n-    # are always in sync with the session object, which is not true for session\n+    # always in sync with the session object, which is not true for session\n     # implementations that use external storage for keeping their keys/values.\n     flashes = session.get('_flashes', [])\n     flashes.append((category, message))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0a1090890f8425a69e5b004aceb04fd7527b8e35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1102 | Contributors (this commit): 25 | Commits (past 90d): 1 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -119,6 +119,10 @@ class Request(RequestBase, JSONMixin):\n     #: The internal URL rule that matched the request.  This can be\n     #: useful to inspect which methods are allowed for the URL from\n     #: a before/after handler (``request.url_rule.methods``) etc.\n+    #: Though if the request's method was invalid for the URL rule,\n+    #: the valid list is available in ``routing_exception.valid_methods``\n+    #: instead (an attribute of the Werkzeug exception :exc:`~werkzeug.exceptions.MethodNotAllowed`)\n+    #: because the request was never internally bound. \n     #:\n     #: .. versionadded:: 0.6\n     url_rule = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2f57a0b917478a028859b9d036b59cf1bba6cad2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 1446 | Contributors (this commit): 20 | Commits (past 90d): 13 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -198,6 +198,8 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"\n         if endpoint:\n             assert '.' not in endpoint, \"Blueprint endpoints should not contain dots\"\n+        if view_func:\n+            assert '.' not in view_func.__name__, \"Blueprint view function name should not contain dots\"\n         self.record(lambda s:\n             s.add_url_rule(rule, endpoint, view_func, **options))\n \n\n@@ -360,6 +360,15 @@ def test_route_decorator_custom_endpoint_with_dots(app, client):\n         lambda: None\n     )\n \n+    foo_foo_foo.__name__ = 'bar.123'\n+\n+    pytest.raises(\n+        AssertionError,\n+        lambda: bp.add_url_rule(\n+            '/bar/123', view_func=foo_foo_foo\n+        )\n+    )\n+\n     app.register_blueprint(bp, url_prefix='/py')\n \n     assert client.get('/py/foo').data == b'bp.foo'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5436dddf64f0103088c4ca212f16efa40c88766a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 49 | Files Changed: 3 | Hunks: 21 | Methods Changed: 8 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 121 | Churn Cumulative: 3129 | Contributors (this commit): 32 | Commits (past 90d): 35 | Contributors (cumulative): 44 | DMM Complexity: 0.25\n\nDIFF:\n@@ -46,6 +46,7 @@ def find_best_app(script_info, module):\n     # Search for the most common names first.\n     for attr_name in ('app', 'application'):\n         app = getattr(module, attr_name, None)\n+\n         if isinstance(app, Flask):\n             return app\n \n@@ -58,8 +59,8 @@ def find_best_app(script_info, module):\n         return matches[0]\n     elif len(matches) > 1:\n         raise NoAppException(\n-            'Auto-detected multiple Flask applications in module \"{module}\".'\n-            ' Use \"FLASK_APP={module}:name\" to specify the correct'\n+            'Detected multiple Flask applications in module \"{module}\". Use '\n+            '\"FLASK_APP={module}:name\" to specify the correct '\n             'one.'.format(module=module.__name__)\n         )\n \n@@ -69,25 +70,29 @@ def find_best_app(script_info, module):\n \n         if inspect.isfunction(app_factory):\n             try:\n-                app = call_factory(app_factory, script_info)\n+                app = call_factory(script_info, app_factory)\n+\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n                 raise NoAppException(\n-                    'Auto-detected \"{function}()\" in module \"{module}\", but '\n-                    'could not call it without specifying arguments.'.format(\n-                        function=attr_name, module=module.__name__\n+                    'Detected factory \"{factory}\" in module \"{module}\", but '\n+                    'could not call it without arguments. Use '\n+                    '\"FLASK_APP=\\'{module}:{factory}(args)\\'\" to specify '\n+                    'arguments.'.format(\n+                        factory=attr_name, module=module.__name__\n                     )\n                 )\n \n     raise NoAppException(\n-        'Failed to find application in module \"{module}\". Are you sure '\n-        'it contains a Flask application? Maybe you wrapped it in a WSGI '\n-        'middleware.'.format(module=module.__name__)\n+        'Failed to find Flask application or factory in module \"{module}\". '\n+        'Use \"FLASK_APP={module}:name to specify one.'.format(\n+            module=module.__name__\n+        )\n     )\n \n \n-def call_factory(app_factory, script_info, arguments=()):\n+def call_factory(script_info, app_factory, arguments=()):\n     \"\"\"Takes an app factory, a ``script_info` object and  optionally a tuple\n     of arguments. Checks for the existence of a script_info argument and calls\n     the app_factory depending on that and the arguments provided.\n@@ -102,54 +107,65 @@ def call_factory(app_factory, script_info, arguments=()):\n         return app_factory(*arguments)\n     elif not arguments and len(arg_names) == 1 and arg_defaults is None:\n         return app_factory(script_info)\n+\n     return app_factory()\n \n \n-def find_app_by_string(string, script_info, module):\n-    \"\"\"Checks if the given string is a variable name or a function. If it is\n-    a function, it checks for specified arguments and whether it takes\n-    a ``script_info`` argument and calls the function with the appropriate\n-    arguments.\"\"\"\n-    from . import Flask\n-    function_regex = r'^(?P<name>\\w+)(?:\\((?P<args>.*)\\))?$'\n-    match = re.match(function_regex, string)\n-    if match:\n+def find_app_by_string(script_info, module, app_name):\n+    \"\"\"Checks if the given string is a variable name or a function. If it is a\n+    function, it checks for specified arguments and whether it takes a\n+    ``script_info`` argument and calls the function with the appropriate\n+    arguments.\n+    \"\"\"\n+    from flask import Flask\n+    match = re.match(r'^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name)\n+\n+    if not match:\n+        raise NoAppException(\n+            '\"{name}\" is not a valid variable name or function '\n+            'expression.'.format(name=app_name)\n+        )\n+\n     name, args = match.groups()\n+\n     try:\n-            if args is not None:\n-                args = args.rstrip(' ,')\n+        attr = getattr(module, name)\n+    except AttributeError as e:\n+        raise NoAppException(e.args[0])\n+\n+    if inspect.isfunction(attr):\n         if args:\n-                    args = ast.literal_eval(\n-                        \"({args}, )\".format(args=args))\n+            try:\n+                args = ast.literal_eval('({args},)'.format(args=args))\n+            except (ValueError, SyntaxError)as e:\n+                raise NoAppException(\n+                    'Could not parse the arguments in '\n+                    '\"{app_name}\".'.format(e=e, app_name=app_name)\n+                )\n         else:\n             args = ()\n-                app_factory = getattr(module, name, None)\n-                app = call_factory(app_factory, script_info, args)\n-            else:\n-                attr = getattr(module, name, None)\n-                if inspect.isfunction(attr):\n-                    app = call_factory(attr, script_info)\n+\n+        try:\n+            app = call_factory(script_info, attr, args)\n+        except TypeError as e:\n+            raise NoAppException(\n+                '{e}\\nThe factory \"{app_name}\" in module \"{module}\" could not '\n+                'be called with the specified arguments.'.format(\n+                    e=e, app_name=app_name, module=module.__name__\n+                )\n+            )\n     else:\n         app = attr\n \n     if isinstance(app, Flask):\n         return app\n-            else:\n-                raise NoAppException('Failed to find application in module '\n-                                   '\"{name}\"'.format(name=module))\n-        except TypeError as e:\n-            new_error = NoAppException(\n-                '{e}\\nThe app factory \"{factory}\" in module \"{module}\" could'\n-                ' not be called with the specified arguments (and a'\n-                ' script_info argument automatically added if applicable).'\n-                ' Did you make sure to use the right number of arguments as'\n-                ' well as not using keyword arguments or'\n-                ' non-literals?'.format(e=e, factory=string, module=module))\n-            reraise(NoAppException, new_error, sys.exc_info()[2])\n-    else:\n+\n     raise NoAppException(\n-            'The provided string \"{string}\" is not a valid variable name'\n-            'or function expression.'.format(string=string))\n+        'A valid Flask application was not obtained from '\n+        '\"{module}:{app_name}\".'.format(\n+            module=module.__name__, app_name=app_name\n+        )\n+    )\n \n \n def prepare_import(path):\n@@ -181,7 +197,6 @@ def prepare_import(path):\n \n \n def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n-    \"\"\"Attempts to locate the application.\"\"\"\n     __traceback_hide__ = True\n \n     try:\n@@ -206,7 +221,7 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n     if app_name is None:\n         return find_best_app(script_info, module)\n     else:\n-        return find_app_by_string(app_name, script_info, module)\n+        return find_app_by_string(script_info, module, app_name)\n \n \n def get_version(ctx, param, value):\n@@ -312,7 +327,7 @@ class ScriptInfo(object):\n         app = None\n \n         if self.create_app is not None:\n-            app = call_factory(self.create_app, self)\n+            app = call_factory(self, self.create_app)\n         else:\n             if self.app_import_path:\n                 path, name = (self.app_import_path.split(':', 1) + [None])[:2]\n\n@@ -13,3 +13,7 @@ def create_app2(foo, bar):\n \n def create_app3(foo, script_info):\n     return Flask('_'.join(['app3', foo, script_info.data['test']]))\n+\n+\n+def no_app():\n+    pass\n\n@@ -200,6 +200,8 @@ def test_prepare_import(request, value, path, result):\n     ('cliapp.factory', 'create_app2(\"foo\", \"bar\", )', 'app2_foo_bar'),\n     # takes script_info\n     ('cliapp.factory', 'create_app3(\"foo\")', 'app3_foo_spam'),\n+    # strip whitespace\n+    ('cliapp.factory', ' create_app () ', 'app'),\n ))\n def test_locate_app(test_apps, iname, aname, result):\n     info = ScriptInfo()\n@@ -213,12 +215,14 @@ def test_locate_app(test_apps, iname, aname, result):\n     ('cliapp.app', 'notanapp'),\n     # not enough arguments\n     ('cliapp.factory', 'create_app2(\"foo\")'),\n+    # invalid identifier\n+    ('cliapp.factory', 'create_app('),\n+    # no app returned\n+    ('cliapp.factory', 'no_app'),\n     # nested import error\n     ('cliapp.importerrorapp', None),\n     # not a Python file\n     ('cliapp.message.txt', None),\n-    # space before arg list\n-    ('cliapp.factory', 'create_app ()'),\n ))\n def test_locate_app_raises(test_apps, iname, aname):\n     info = ScriptInfo()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9bc329c0c9dcdb5a3a6919f31542b6e7453d8aa8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 2293 | Contributors (this commit): 25 | Commits (past 90d): 4 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -234,11 +234,16 @@ def get_version(ctx, param, value):\n     }, color=ctx.color)\n     ctx.exit()\n \n-version_option = click.Option(['--version'],\n+\n+version_option = click.Option(\n+    ['--version'],\n     help='Show the flask version',\n     expose_value=False,\n     callback=get_version,\n-                              is_flag=True, is_eager=True)\n+    is_flag=True,\n+    is_eager=True\n+)\n+\n \n class DispatchingApp(object):\n     \"\"\"Special application that dispatches to a Flask application which\n@@ -713,24 +718,21 @@ def routes_command(sort, all_methods):\n \n \n cli = FlaskGroup(help=\"\"\"\\\n-This shell command acts as general utility script for Flask applications.\n+A general utility script for Flask applications.\n \n-It loads the application configured (through the FLASK_APP environment\n-variable) and then provides commands either provided by the application or\n-Flask itself.\n-\n-The most useful commands are the \"run\" and \"shell\" command.\n-\n-Example usage:\n+Provides commands from Flask, extensions, and the application. Loads the\n+application defined in the FLASK_APP environment variable, or from a wsgi.py\n+file. Debug mode can be controlled with the FLASK_DEBUG\n+environment variable.\n \n \\b\n-  %(prefix)s%(cmd)s FLASK_APP=hello.py\n-  %(prefix)s%(cmd)s FLASK_DEBUG=1\n-  %(prefix)sflask run\n-\"\"\" % {\n-    'cmd': os.name == 'posix' and 'export' or 'set',\n-    'prefix': os.name == 'posix' and '$ ' or '',\n-})\n+  {prefix}{cmd} FLASK_APP=hello.py\n+  {prefix}{cmd} FLASK_DEBUG=1\n+  {prefix}flask run\n+\"\"\".format(\n+    cmd='export' if os.name == 'posix' else 'set',\n+    prefix='$ ' if os.name == 'posix' else '> '\n+))\n \n \n def main(as_module=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e3c853e60401bccf1564bee19dda7a3b41602ff9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2295 | Contributors (this commit): 26 | Commits (past 90d): 2 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -644,7 +644,7 @@ def shell_command():\n     namespace of this shell according to it's configuration.\n \n     This is useful for executing small snippets of management code\n-    without having to manually configuring the application.\n+    without having to manually configure the application.\n     \"\"\"\n     import code\n     from flask.globals import _app_ctx_stack\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c23a63a185104b4dc39fe53d82254059c5ff4727", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 17 | Churn Cumulative: 3157 | Contributors (this commit): 33 | Commits (past 90d): 4 | Contributors (cumulative): 43 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -33,6 +33,12 @@ except ImportError:\n     dotenv = None\n \n \n+def _called_with_wrong_args(factory, exc_info):\n+    exc_type, exc_value, tb = exc_info\n+    return exc_type is TypeError and \\\n+        str(exc_value).startswith('%s() takes' % factory.__name__)\n+\n+\n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n \n@@ -75,6 +81,8 @@ def find_best_app(script_info, module):\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n+                if not _called_with_wrong_args(app_factory, sys.exc_info()):\n+                    raise\n                 raise NoAppException(\n                     'Detected factory \"{factory}\" in module \"{module}\", but '\n                     'could not call it without arguments. Use '\n@@ -148,6 +156,8 @@ def find_app_by_string(script_info, module, app_name):\n         try:\n             app = call_factory(script_info, attr, args)\n         except TypeError as e:\n+            if not _called_with_wrong_args(attr, sys.exc_info()):\n+                raise\n             raise NoAppException(\n                 '{e}\\nThe factory \"{app_name}\" in module \"{module}\" could not '\n                 'be called with the specified arguments.'.format(\n\n@@ -144,6 +144,13 @@ def test_find_best_app(test_apps):\n \n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n+    class Module:\n+        @staticmethod\n+        def create_app():\n+            raise TypeError('bad bad factory!')\n+\n+    pytest.raises(TypeError, find_best_app, script_info, Module)\n+\n \n @pytest.mark.parametrize('value,path,result', (\n     ('test', cwd, 'test'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2ef2000a39541d8424f3163ef5feeabacc81e681", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 2 | Churn Cumulative: 2307 | Contributors (this commit): 26 | Commits (past 90d): 4 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -592,7 +592,7 @@ def load_dotenv(path=None):\n @click.option('--eager-loading/--lazy-loader', default=None,\n               help='Enable or disable eager loading.  By default eager '\n               'loading is enabled if the reloader is disabled.')\n-@click.option('--with-threads/--without-threads', default=False,\n+@click.option('--with-threads/--without-threads', default=True,\n               help='Enable or disable multithreading.')\n @pass_script_info\n def run_command(info, host, port, reload, debugger, eager_loading,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1a2dc6f205003cd2307b33927b8628a3d97b7ce6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 4 | Churn Cumulative: 2311 | Contributors (this commit): 26 | Commits (past 90d): 5 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,7 +36,9 @@ except ImportError:\n def _called_with_wrong_args(factory, exc_info):\n     exc_type, exc_value, tb = exc_info\n     return exc_type is TypeError and \\\n-        str(exc_value).startswith('%s() takes' % factory.__name__)\n+        str(exc_value).startswith((\n+            '%s() takes' % factory.__name__,\n+            '%s() missing' % factory.__name__))\n \n \n class NoAppException(click.UsageError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c52e1b7388c17466a551391cdf81964bf0b7aef0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/1 | Churn Δ: 22 | Churn Cumulative: 4032 | Contributors (this commit): 63 | Commits (past 90d): 3 | Contributors (cumulative): 77 | DMM Complexity: 0.9166666666666666\n\nDIFF:\n@@ -591,6 +591,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                 rv = rv.make_conditional(request, accept_ranges=True,\n                                          complete_length=fsize)\n             except RequestedRangeNotSatisfiable:\n+                if file is not None:\n                     file.close()\n                 raise\n         else:\n\n@@ -468,7 +468,7 @@ class TestSendfile(object):\n \n     @pytest.mark.skipif(\n         not callable(getattr(Range, 'to_content_range_header', None)),\n-        reason=\"not implement within werkzeug\"\n+        reason=\"not implemented within werkzeug\"\n     )\n     def test_send_file_range_request(self):\n         app = flask.Flask(__name__)\n@@ -529,6 +529,25 @@ class TestSendfile(object):\n         assert rv.status_code == 200\n         rv.close()\n \n+    @pytest.mark.skipif(\n+        not callable(getattr(Range, 'to_content_range_header', None)),\n+        reason=\"not implemented within werkzeug\"\n+    )\n+    def test_send_file_range_request_xsendfile_invalid(self):\n+        # https://github.com/pallets/flask/issues/2526\n+        app = flask.Flask(__name__)\n+        app.use_x_sendfile = True\n+\n+        @app.route('/')\n+        def index():\n+            return flask.send_file('static/index.html', conditional=True)\n+\n+        c = app.test_client()\n+\n+        rv = c.get('/', headers={'Range': 'bytes=1000-'})\n+        assert rv.status_code == 416\n+        rv.close()\n+\n     def test_attachment(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#777cc17de34622a7f8324a3ce42fbc589d86476b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 4 | Churn Cumulative: 1756 | Contributors (this commit): 25 | Commits (past 90d): 2 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -571,6 +571,10 @@ class TestSendfile(object):\n         # https://github.com/pallets/flask/issues/2526\n         app.use_x_sendfile = True\n \n+        @app.route('/')\n+        def index():\n+            return flask.send_file('static/index.html', conditional=True)\n+\n         rv = client.get('/', headers={'Range': 'bytes=1000-'})\n         assert rv.status_code == 416\n         rv.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e30c39fe78cb8d3fe8379f032b66f7719b2e99c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 97 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,6 +17,10 @@ def reset_logging(monkeypatch):\n     logger.handlers = []\n     logger.setLevel(logging.NOTSET)\n \n+    logging_plugin = pytest.config.pluginmanager.getplugin('logging-plugin')\n+    pytest.config.pluginmanager.unregister(name='logging-plugin')\n+    logging.root.handlers = []\n+\n     yield\n \n     logging.root.handlers[:] = root_handlers\n@@ -25,6 +29,8 @@ def reset_logging(monkeypatch):\n     logger.handlers = []\n     logger.setLevel(logging.NOTSET)\n \n+    pytest.config.pluginmanager.register(logging_plugin, 'logging-plugin')\n+\n \n def test_logger(app):\n     assert app.logger.name == 'flask.app'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#33fa58094701d5b1edbf13ddfe7c93b4c5821b63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 98 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,6 +29,7 @@ def reset_logging(monkeypatch):\n     logger.handlers = []\n     logger.setLevel(logging.NOTSET)\n \n+    if logging_plugin:\n         pytest.config.pluginmanager.register(logging_plugin, 'logging-plugin')\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#604cc758fb6601782745572452715fc295dda011", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 108 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -9,17 +9,17 @@ from flask.logging import default_handler, has_level_handler, \\\n \n \n @pytest.fixture(autouse=True)\n-def reset_logging(monkeypatch):\n+def reset_logging(pytestconfig):\n     root_handlers = logging.root.handlers[:]\n+    logging.root.handlers = []\n     root_level = logging.root.level\n \n     logger = logging.getLogger('flask.app')\n     logger.handlers = []\n     logger.setLevel(logging.NOTSET)\n \n-    logging_plugin = pytest.config.pluginmanager.getplugin('logging-plugin')\n-    pytest.config.pluginmanager.unregister(name='logging-plugin')\n-    logging.root.handlers = []\n+    logging_plugin = pytestconfig.pluginmanager.unregister(\n+        name='logging-plugin')\n \n     yield\n \n@@ -30,7 +30,7 @@ def reset_logging(monkeypatch):\n     logger.setLevel(logging.NOTSET)\n \n     if logging_plugin:\n-        pytest.config.pluginmanager.register(logging_plugin, 'logging-plugin')\n+        pytestconfig.pluginmanager.register(logging_plugin, 'logging-plugin')\n \n \n def test_logger(app):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f7983ae96a5da9c7763ebd65947fb6032e2df36c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 19 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -264,7 +264,7 @@ def jsonify(*args, **kwargs):\n         data = args or kwargs\n \n     return current_app.response_class(\n-        (dumps(data, indent=indent, separators=separators), '\\n'),\n+        dumps(data, indent=indent, separators=separators) + '\\n',\n         mimetype=current_app.config['JSONIFY_MIMETYPE']\n     )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0a339545551b5303fb2750e6e5b0e72acbea60d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 27 | Files Changed: 2 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 74 | Churn Cumulative: 3704 | Contributors (this commit): 38 | Commits (past 90d): 2 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@\n \"\"\"\n import hashlib\n import warnings\n+from collections import MutableMapping\n from datetime import datetime\n \n from itsdangerous import BadSignature, URLSafeTimedSerializer\n@@ -19,43 +20,55 @@ from flask.helpers import is_ip, total_seconds\n from flask.json.tag import TaggedJSONSerializer\n \n \n-class SessionMixin(object):\n-    \"\"\"Expands a basic dictionary with an accessors that are expected\n-    by Flask extensions and users for the session.\n-    \"\"\"\n+class SessionMixin(MutableMapping):\n+    \"\"\"Expands a basic dictionary with session attributes.\"\"\"\n \n-    def _get_permanent(self):\n+    @property\n+    def permanent(self):\n+        \"\"\"This reflects the ``'_permanent'`` key in the dict.\"\"\"\n         return self.get('_permanent', False)\n \n-    def _set_permanent(self, value):\n+    @permanent.setter\n+    def permanent(self, value):\n         self['_permanent'] = bool(value)\n \n-    #: this reflects the ``'_permanent'`` key in the dict.\n-    permanent = property(_get_permanent, _set_permanent)\n-    del _get_permanent, _set_permanent\n-\n-    #: some session backends can tell you if a session is new, but that is\n-    #: not necessarily guaranteed.  Use with caution.  The default mixin\n-    #: implementation just hardcodes ``False`` in.\n+    #: Some implementations can detect whether a session is newly\n+    #: created, but that is not guaranteed. Use with caution. The mixin\n+    # default is hard-coded ``False``.\n     new = False\n \n-    #: for some backends this will always be ``True``, but some backends will\n-    #: default this to false and detect changes in the dictionary for as\n-    #: long as changes do not happen on mutable structures in the session.\n-    #: The default mixin implementation just hardcodes ``True`` in.\n+    #: Some implementations can detect changes to the session and set\n+    #: this when that happens. The mixin default is hard coded to\n+    #: ``True``.\n     modified = True\n \n-    #: the accessed variable indicates whether or not the session object has\n-    #: been accessed in that request. This allows flask to append a `Vary:\n-    #: Cookie` header to the response if the session is being accessed. This\n-    #: allows caching proxy servers, like Varnish, to use both the URL and the\n-    #: session cookie as keys when caching pages, preventing multiple users\n-    #: from being served the same cache.\n+    #: Some implementations can detect when session data is read or\n+    #: written and set this when that happens. The mixin default is hard\n+    #: coded to ``True``.\n     accessed = True\n \n \n class SecureCookieSession(CallbackDict, SessionMixin):\n-    \"\"\"Base class for sessions based on signed cookies.\"\"\"\n+    \"\"\"Base class for sessions based on signed cookies.\n+\n+    This session backend will set the :attr:`modified` and\n+    :attr:`accessed` attributes. It cannot reliably track whether a\n+    session is new (vs. empty), so :attr:`new` remains hard coded to\n+    ``False``.\n+    \"\"\"\n+\n+    #: When data is changed, this is set to ``True``. Only the session\n+    #: dictionary itself is tracked; if the session contains mutable\n+    #: data (for example a nested dict) then this must be set to\n+    #: ``True`` manually when modifying that data. The session cookie\n+    #: will only be written to the response if this is ``True``.\n+    modified = False\n+\n+    #: When data is read or written, this is set to ``True``. Used by\n+    # :class:`.SecureCookieSessionInterface` to add a ``Vary: Cookie``\n+    #: header, which allows caching proxies to cache different pages for\n+    #: different users.\n+    accessed = False\n \n     def __init__(self, initial=None):\n         def on_update(self):\n@@ -63,8 +76,6 @@ class SecureCookieSession(CallbackDict, SessionMixin):\n             self.accessed = True\n \n         super(SecureCookieSession, self).__init__(initial, on_update)\n-        self.modified = False\n-        self.accessed = False\n \n     def __getitem__(self, key):\n         self.accessed = True\n\n@@ -221,12 +221,21 @@ def test_endpoint_decorator(app, client):\n def test_session(app, client):\n     @app.route('/set', methods=['POST'])\n     def set():\n+        assert not flask.session.accessed\n+        assert not flask.session.modified\n         flask.session['value'] = flask.request.form['value']\n+        assert flask.session.accessed\n+        assert flask.session.modified\n         return 'value set'\n \n     @app.route('/get')\n     def get():\n-        return flask.session['value']\n+        assert not flask.session.accessed\n+        assert not flask.session.modified\n+        v = flask.session.get('value', 'None')\n+        assert flask.session.accessed\n+        assert not flask.session.modified\n+        return v\n \n     assert client.post('/set', data={'value': '42'}).data == b'value set'\n     assert client.get('/get').data == b'42'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#06f96df67e291caeaeb09ad296aa368c80cc1a58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 226 | Contributors (this commit): 17 | Commits (past 90d): 1 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -129,7 +129,9 @@ class Config(dict):\n             with open(filename, mode='rb') as config_file:\n                 exec(compile(config_file.read(), filename, 'exec'), d.__dict__)\n         except IOError as e:\n-            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+            if silent and e.errno in (\n+                errno.ENOENT, errno.EISDIR, errno.ENOTDIR\n+            ):\n                 return False\n             e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n             raise\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ffca68fc86718b133668f341ddd8c2635d7e29ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 122 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -17,33 +17,25 @@ from flaskr.blueprints.flaskr import init_db\n \n \n @pytest.fixture\n-def app(request):\n-\n-    db_fd, temp_db_location = tempfile.mkstemp()\n+def app():\n+    db_fd, db_path = tempfile.mkstemp()\n     config = {\n-        'DATABASE': temp_db_location,\n+        'DATABASE': db_path,\n         'TESTING': True,\n-        'DB_FD': db_fd\n     }\n-\n     app = create_app(config=config)\n \n     with app.app_context():\n         init_db()\n         yield app\n \n+    os.close(db_fd)\n+    os.unlink(db_path)\n+\n \n @pytest.fixture\n-def client(request, app):\n-\n-    client = app.test_client()\n-\n-    def teardown():\n-        os.close(app.config['DB_FD'])\n-        os.unlink(app.config['DATABASE'])\n-    request.addfinalizer(teardown)\n-\n-    return client\n+def client(app):\n+    return app.test_client()\n \n \n def login(client, username, password):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#333865ea34acefbca565170881ff403fd7840d57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 12 | Churn Cumulative: 2292 | Contributors (this commit): 52 | Commits (past 90d): 2 | Contributors (cumulative): 52 | DMM Complexity: 0.0\n\nDIFF:\n@@ -42,8 +42,7 @@ from jinja2 import FileSystemLoader\n from .signals import message_flashed\n from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n-from ._compat import string_types, text_type\n-\n+from ._compat import string_types, text_type, PY2\n \n # sentinel\n _missing = object()\n@@ -1002,12 +1001,21 @@ def total_seconds(td):\n def is_ip(value):\n     \"\"\"Determine if the given string is an IP address.\n \n+    Python 2 on Windows doesn't provide ``inet_pton``, so this only\n+    checks IPv4 addresses in that environment.\n+\n     :param value: value to check\n     :type value: str\n \n     :return: True if string is an IP address\n     :rtype: bool\n     \"\"\"\n+    if PY2 and os.name == 'nt':\n+        try:\n+            socket.inet_aton(value)\n+            return True\n+        except socket.error:\n+            return False\n \n     for family in (socket.AF_INET, socket.AF_INET6):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#22e072379b9fcffd229cdd239dd3ff5ed4eed571", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 2683 | Contributors (this commit): 61 | Commits (past 90d): 4 | Contributors (cumulative): 69 | DMM Complexity: None\n\nDIFF:\n@@ -22,21 +22,12 @@ import unicodedata\n from werkzeug.routing import BuildError\n from functools import update_wrapper\n \n-try:\n from werkzeug.urls import url_quote\n-except ImportError:\n-    from urlparse import quote as url_quote\n-\n from werkzeug.datastructures import Headers, Range\n from werkzeug.exceptions import BadRequest, NotFound, \\\n     RequestedRangeNotSatisfiable\n \n-# this was moved in 0.7\n-try:\n from werkzeug.wsgi import wrap_file\n-except ImportError:\n-    from werkzeug.utils import wrap_file\n-\n from jinja2 import FileSystemLoader\n \n from .signals import message_flashed\n\n@@ -15,11 +15,7 @@ from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n from flask.json import dumps as json_dumps\n-\n-try:\n from werkzeug.urls import url_parse\n-except ImportError:\n-    from urlparse import urlsplit as url_parse\n \n \n def make_test_environ_builder(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#60eecb547d8af9916c55163c7356999ca2d5ffb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 391 | Contributors (this commit): 23 | Commits (past 90d): 1 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -95,10 +95,8 @@ setup(\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2',\n-        'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n-        'Programming Language :: Python :: 3.3',\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2433522d2967b8a5e46f16de587a8fac5088a47c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 82 | Lines Deleted: 45 | Files Changed: 4 | Hunks: 26 | Methods Changed: 16 | Complexity Δ (Sum/Max): 1/3 | Churn Δ: 127 | Churn Cumulative: 11629 | Contributors (this commit): 152 | Commits (past 90d): 14 | Contributors (cumulative): 191 | DMM Complexity: 0.7391304347826086\n\nDIFF:\n@@ -27,7 +27,7 @@ from .config import Config, ConfigAttribute\n from .ctx import AppContext, RequestContext, _AppCtxGlobals\n from .globals import _request_ctx_stack, g, request, session\n from .helpers import _PackageBoundObject, \\\n-    _endpoint_from_view_func, find_package, get_debug_flag, \\\n+    _endpoint_from_view_func, find_package, get_env, get_debug_flag, \\\n     get_flashed_messages, locked_cached_property, url_for\n from .logging import create_logger\n from .sessions import SecureCookieSessionInterface\n@@ -196,15 +196,6 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.11\n     config_class = Config\n \n-    #: The debug flag.  Set this to ``True`` to enable debugging of the\n-    #: application.  In debug mode the debugger will kick in when an unhandled\n-    #: exception occurs and the integrated server will automatically reload\n-    #: the application if changes in the code are detected.\n-    #:\n-    #: This attribute can also be configured from the config with the ``DEBUG``\n-    #: configuration key.  Defaults to ``False``.\n-    debug = ConfigAttribute('DEBUG')\n-\n     #: The testing flag.  Set this to ``True`` to enable the test mode of\n     #: Flask extensions (and in the future probably also Flask itself).\n     #: For example this might activate test helpers that have an\n@@ -278,7 +269,8 @@ class Flask(_PackageBoundObject):\n \n     #: Default configuration parameters.\n     default_config = ImmutableDict({\n-        'DEBUG':                                get_debug_flag(default=False),\n+        'ENV':                                  None,\n+        'DEBUG':                                None,\n         'TESTING':                              False,\n         'PROPAGATE_EXCEPTIONS':                 None,\n         'PRESERVE_CONTEXT_ON_EXCEPTION':        None,\n@@ -647,7 +639,10 @@ class Flask(_PackageBoundObject):\n         root_path = self.root_path\n         if instance_relative:\n             root_path = self.instance_path\n-        return self.config_class(root_path, self.default_config)\n+        defaults = dict(self.default_config)\n+        defaults['ENV'] = get_env()\n+        defaults['DEBUG'] = get_debug_flag()\n+        return self.config_class(root_path, defaults)\n \n     def auto_find_instance_path(self):\n         \"\"\"Tries to locate the instance path if it was not provided to the\n@@ -790,25 +785,38 @@ class Flask(_PackageBoundObject):\n             rv.update(processor())\n         return rv\n \n-    def _reconfigure_for_run_debug(self, debug):\n-        \"\"\"The ``run`` commands will set the application's debug flag. Some\n-        application configuration may already be calculated based on the\n-        previous debug value. This method will recalculate affected values.\n+    #: The environment value.  This is typically set from outside the\n+    #: process by setting the `FLASK_ENV` environment variable and can be\n+    #: used to quickly switch between different environments like\n+    #: `production` and `development`.  If not set this defaults to\n+    #: `production`.\n+    env = ConfigAttribute('ENV')\n \n-        Called by the :func:`flask.cli.run` command or :meth:`Flask.run`\n-        method if the debug flag is set explicitly in the call.\n+    def _get_debug(self):\n+        return self.config['DEBUG']\n+    def _set_debug(self, value):\n+        self._set_debug_value(value)\n \n-        :param debug: the new value of the debug flag\n+    #: The debug flag.  If this is ``True`` it enables debugging of the\n+    #: application.  In debug mode the debugger will kick in when an\n+    #: unhandled exception occurs and the integrated server will\n+    #: automatically reload the application if changes in the code are\n+    #: detected.\n+    #:\n+    #: This value should only be configured by the :envvar:`FLASK_DEBUG`\n+    #: environment variable.  Changing it by other means will not yield\n+    #: consistent results.  The default value depends on the Flask\n+    #: environment and will be true for the development environment and false\n+    #: otherwise.\n+    debug = property(_get_debug, _set_debug)\n+    del _get_debug, _set_debug\n \n-        .. versionadded:: 1.0\n-            Reconfigures ``app.jinja_env.auto_reload``.\n-        \"\"\"\n-        self.debug = debug\n+    def _set_debug_value(self, value):\n+        self.config['DEBUG'] = value\n         self.jinja_env.auto_reload = self.templates_auto_reload\n \n-    def run(\n-        self, host=None, port=None, debug=None, load_dotenv=True, **options\n-    ):\n+    def run(self, host=None, port=None, debug=None,\n+            load_dotenv=True, **options):\n         \"\"\"Runs the application on a local development server.\n \n         Do not use ``run()`` in a production setting. It is not intended to\n@@ -872,11 +880,11 @@ class Flask(_PackageBoundObject):\n             load_dotenv()\n \n         if debug is not None:\n-            self._reconfigure_for_run_debug(bool(debug))\n+            self.debug = bool(debug)\n \n         _host = '127.0.0.1'\n         _port = 5000\n-        server_name = self.config.get(\"SERVER_NAME\")\n+        server_name = self.config.get('SERVER_NAME')\n         sn_host, sn_port = None, None\n \n         if server_name:\n@@ -1055,7 +1063,8 @@ class Flask(_PackageBoundObject):\n         return iter(self._blueprint_order)\n \n     @setupmethod\n-    def add_url_rule(self, rule, endpoint=None, view_func=None, provide_automatic_options=None, **options):\n+    def add_url_rule(self, rule, endpoint=None, view_func=None,\n+                     provide_automatic_options=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n         endpoint.\n\n@@ -25,7 +25,7 @@ import click\n from . import __version__\n from ._compat import getargspec, iteritems, reraise\n from .globals import current_app\n-from .helpers import get_debug_flag\n+from .helpers import get_debug_flag, get_env\n \n try:\n     import dotenv\n@@ -341,9 +341,8 @@ class ScriptInfo(object):\n             else:\n                 for path in ('wsgi.py', 'app.py'):\n                     import_name = prepare_import(path)\n-                    app = locate_app(\n-                        self, import_name, None, raise_if_not_found=False\n-                    )\n+                    app = locate_app(self, import_name, None,\n+                                     raise_if_not_found=False)\n \n                     if app:\n                         break\n@@ -357,8 +356,10 @@ class ScriptInfo(object):\n \n         debug = get_debug_flag()\n \n+        # Update the app's debug flag through the descriptor so that other\n+        # values repopulate as well.\n         if debug is not None:\n-            app._reconfigure_for_run_debug(debug)\n+            app.debug = debug\n \n         self._loaded_app = app\n         return app\n@@ -432,10 +433,8 @@ class FlaskGroup(AppGroup):\n         from :file:`.env` and :file:`.flaskenv` files.\n     \"\"\"\n \n-    def __init__(\n-        self, add_default_commands=True, create_app=None,\n-        add_version_option=True, load_dotenv=True, **extra\n-    ):\n+    def __init__(self, add_default_commands=True, create_app=None,\n+                 add_version_option=True, load_dotenv=True, **extra):\n         params = list(extra.pop('params', None) or ())\n \n         if add_version_option:\n@@ -610,6 +609,13 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n     \"\"\"\n     from werkzeug.serving import run_simple\n \n+    if get_env() == 'production':\n+        click.secho('Warning: Detected a production environment. Do not '\n+                    'use `flask run` for production use.',\n+                    fg='red')\n+        click.secho('Use a production ready WSGI server instead',\n+                    dim=True)\n+\n     debug = get_debug_flag()\n     if reload is None:\n         reload = bool(debug)\n@@ -629,6 +635,7 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n         # we won't print anything.\n         if info.app_import_path is not None:\n             print(' * Serving Flask app \"%s\"' % info.app_import_path)\n+        print(' * Env %s' % get_env())\n         if debug is not None:\n             print(' * Forcing debug mode %s' % (debug and 'on' or 'off'))\n \n@@ -649,11 +656,11 @@ def shell_command():\n     import code\n     from flask.globals import _app_ctx_stack\n     app = _app_ctx_stack.top.app\n-    banner = 'Python %s on %s\\nApp: %s%s\\nInstance: %s' % (\n+    banner = 'Python %s on %s\\nApp: %s [%s]\\nInstance: %s' % (\n         sys.version,\n         sys.platform,\n         app.import_name,\n-        app.debug and ' [debug]' or '',\n+        app.env,\n         app.instance_path,\n     )\n     ctx = {}\n\n@@ -46,10 +46,20 @@ _os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n                     if sep not in (None, '/'))\n \n \n-def get_debug_flag(default=None):\n+def get_env():\n+    val = os.environ.get('FLASK_ENV')\n+    if not val:\n+        val = 'production'\n+    return val\n+\n+\n+def get_debug_flag():\n     val = os.environ.get('FLASK_DEBUG')\n     if not val:\n-        return default\n+        env = get_env()\n+        if env == 'development':\n+            return True\n+        return False\n     return val.lower() not in ('0', 'false', 'no')\n \n \n\n@@ -21,7 +21,7 @@ from werkzeug.http import http_date, parse_cache_control_header, \\\n \n import flask\n from flask._compat import StringIO, text_type\n-from flask.helpers import get_debug_flag\n+from flask.helpers import get_debug_flag, get_env\n \n \n def has_encoding(name):\n@@ -886,7 +886,7 @@ class TestSafeJoin(object):\n class TestHelpers(object):\n \n     @pytest.mark.parametrize('debug, expected_flag, expected_default_flag', [\n-        ('', None, True),\n+        ('', False, False),\n         ('0', False, False),\n         ('False', False, False),\n         ('No', False, False),\n@@ -898,7 +898,18 @@ class TestHelpers(object):\n             assert get_debug_flag() is None\n         else:\n             assert get_debug_flag() == expected_flag\n-        assert get_debug_flag(default=True) == expected_default_flag\n+        assert get_debug_flag() == expected_default_flag\n+\n+    @pytest.mark.parametrize('env, ref_env, debug', [\n+        ('', 'production', False),\n+        ('production', 'production', False),\n+        ('development', 'development', True),\n+        ('other', 'other', False),\n+    ])\n+    def test_get_env(self, monkeypatch, env, ref_env, debug):\n+        monkeypatch.setenv('FLASK_ENV', env)\n+        assert get_debug_flag() == debug\n+        assert get_env() == ref_env\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
