{"custom_id": "requests#b6e16799d0225af6a389eb040d940c9f97de63d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 4312 | Contributors (this commit): 70 | Commits (past 90d): 27 | Contributors (cumulative): 70 | DMM Complexity: 1.0\n\nDIFF:\n@@ -412,6 +412,9 @@ class RequestsTestCase(unittest.TestCase):\n     def test_unicode_header_name(self):\n         requests.put(httpbin('put'), headers={str('Content-Type'): 'application/octet-stream'}, data='\\xff') # compat.str is unicode.\n \n+    def test_pyopenssl_redirect(self):\n+        requests.get('https://httpbin.org/status/301')\n+\n     def test_urlencoded_get_query_multivalued_param(self):\n \n         r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8b792be81bfaa79fde1ee8de3b72e4e07ef4f6c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2619 | Contributors (this commit): 51 | Commits (past 90d): 12 | Contributors (cumulative): 51 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ from .cookies import (\n     cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n-from .utils import to_key_val_list, default_headers\n+from .utils import to_key_val_list, default_headers, to_native_string\n from .exceptions import TooManyRedirects, InvalidSchema\n from .structures import CaseInsensitiveDict\n \n@@ -121,7 +121,7 @@ class SessionRedirectMixin(object):\n             else:\n                 url = requote_uri(url)\n \n-            prepared_request.url = url\n+            prepared_request.url = to_native_string(url)\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n             if (resp.status_code == codes.see_other and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#27eb54a20a6f21cfe7138d4a26a8f41f5b2ced4b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 873 | Contributors (this commit): 29 | Commits (past 90d): 13 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -372,19 +372,19 @@ class HTTPAdapter(BaseAdapter):\n                     conn._put_conn(low_conn)\n \n         except socket.error as sockerr:\n-            raise ConnectionError(sockerr)\n+            raise ConnectionError(sockerr, request=request)\n \n         except MaxRetryError as e:\n-            raise ConnectionError(e)\n+            raise ConnectionError(e, request=request)\n \n         except _ProxyError as e:\n             raise ProxyError(e)\n \n         except (_SSLError, _HTTPError) as e:\n             if isinstance(e, _SSLError):\n-                raise SSLError(e)\n+                raise SSLError(e, request=request)\n             elif isinstance(e, TimeoutError):\n-                raise Timeout(e)\n+                raise Timeout(e, request=request)\n             else:\n                 raise\n \n\n@@ -14,15 +14,20 @@ class RequestException(IOError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n+    def __init__(self, *args, **kwargs):\n+        \"\"\"\n+        Initialize RequestException with `request` and `response` objects.\n+        \"\"\"\n+        self.response = kwargs.pop('response', None)\n+        self.request = kwargs.pop('request', None)\n+        if self.response and not self.request:\n+            self.request = self.response.request\n+        super(RequestException, self).__init__(*args, **kwargs)\n+\n \n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n \n-    def __init__(self, *args, **kwargs):\n-        \"\"\" Initializes HTTPError with optional `response` object. \"\"\"\n-        self.response = kwargs.pop('response', None)\n-        super(HTTPError, self).__init__(*args, **kwargs)\n-\n \n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2fab5b4ca2f8dcdc76fabb1851bd268f0d41889", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 134 | Contributors (this commit): 14 | Commits (past 90d): 4 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,9 +18,10 @@ class RequestException(IOError):\n         \"\"\"\n         Initialize RequestException with `request` and `response` objects.\n         \"\"\"\n-        self.response = kwargs.pop('response', None)\n+        response = kwargs.pop('response', None)\n+        self.response = response\n         self.request = kwargs.pop('request', None)\n-        if self.response and not self.request:\n+        if response and not self.request and hasattr(response, 'request'):\n             self.request = self.response.request\n         super(RequestException, self).__init__(*args, **kwargs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#07e0a6198d132fee147806105a6ff05e541d3ba2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 137 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,7 +21,8 @@ class RequestException(IOError):\n         response = kwargs.pop('response', None)\n         self.response = response\n         self.request = kwargs.pop('request', None)\n-        if response and not self.request and hasattr(response, 'request'):\n+        if (response is not None and not self.request and\n+                hasattr(response, 'request')):\n             self.request = self.response.request\n         super(RequestException, self).__init__(*args, **kwargs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7ba5a534ae9fc24e40b3ae6c480c9075d684727e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 17 | Churn Cumulative: 2636 | Contributors (this commit): 51 | Commits (past 90d): 13 | Contributors (cumulative): 51 | DMM Complexity: 0.0\n\nDIFF:\n@@ -158,6 +158,23 @@ class SessionRedirectMixin(object):\n             prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n \n+            # If we get redirected to a new host, we should strip out any\n+            # authentication headers.\n+            original_parsed = urlparse(resp.request.url)\n+            redirect_parsed = urlparse(url)\n+\n+            if original_parsed.hostname != redirect_parsed.hostname:\n+                try:\n+                    del headers['Authorization']\n+                except KeyError:\n+                    pass\n+\n+            # However, .netrc might have more auth for us. Let's get it if it\n+            # does.\n+            new_auth = get_netrc_auth(url)\n+            if new_auth is not None:\n+                prepared_request.prepare_auth(new_auth)\n+\n             resp = self.send(\n                 prepared_request,\n                 stream=stream,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0163a836a104bfd03ceb27055e88d726b53be1ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 394 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -30,8 +30,6 @@ with open('README.rst') as f:\n     readme = f.read()\n with open('HISTORY.rst') as f:\n     history = f.read()\n-with open('LICENSE') as f:\n-    license = f.read()\n \n setup(\n     name='requests',\n@@ -46,7 +44,7 @@ setup(\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n-    license=license,\n+    license='Apache 2.0',\n     zip_safe=False,\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#326a22e8880c1dba52698a479eb7b6038d5b2e87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 2642 | Contributors (this commit): 51 | Commits (past 90d): 14 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -163,11 +163,9 @@ class SessionRedirectMixin(object):\n             original_parsed = urlparse(resp.request.url)\n             redirect_parsed = urlparse(url)\n \n-            if original_parsed.hostname != redirect_parsed.hostname:\n-                try:\n+            if (original_parsed.hostname != redirect_parsed.hostname and\n+                   'Authorization' in headers):\n                 del headers['Authorization']\n-                except KeyError:\n-                    pass\n \n             # However, .netrc might have more auth for us. Let's get it if it\n             # does.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d9f34c6848b9b313beefa7d3ce05f52fdea28c27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 2644 | Contributors (this commit): 51 | Commits (past 90d): 15 | Contributors (cumulative): 51 | DMM Complexity: None\n\nDIFF:\n@@ -169,7 +169,7 @@ class SessionRedirectMixin(object):\n \n             # However, .netrc might have more auth for us. Let's get it if it\n             # does.\n-            new_auth = get_netrc_auth(url)\n+            new_auth = get_netrc_auth(url) if self.trust_env else None\n             if new_auth is not None:\n                 prepared_request.prepare_auth(new_auth)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f74f5e3ebf0943163cd21b93fb682f790277aa19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2654 | Contributors (this commit): 51 | Commits (past 90d): 16 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -153,22 +153,20 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n-            extract_cookies_to_jar(prepared_request._cookies,\n-                                   prepared_request, resp.raw)\n+            extract_cookies_to_jar(prepared_request._cookies, prepared_request, resp.raw)\n             prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n \n+            if 'Authorization' in headers:\n                 # If we get redirected to a new host, we should strip out any\n                 # authentication headers.\n                 original_parsed = urlparse(resp.request.url)\n                 redirect_parsed = urlparse(url)\n \n-            if (original_parsed.hostname != redirect_parsed.hostname and\n-                   'Authorization' in headers):\n+                if (original_parsed.hostname != redirect_parsed.hostname):\n                     del headers['Authorization']\n \n-            # However, .netrc might have more auth for us. Let's get it if it\n-            # does.\n+            # .netrc might have more auth for us.\n             new_auth = get_netrc_auth(url) if self.trust_env else None\n             if new_auth is not None:\n                 prepared_request.prepare_auth(new_auth)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c042c08179cae74e7b2c520b33ea19881c0ec842", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 2670 | Contributors (this commit): 51 | Commits (past 90d): 17 | Contributors (cumulative): 51 | DMM Complexity: 0.0\n\nDIFF:\n@@ -480,8 +480,7 @@ class Session(SessionRedirectMixin):\n         if not isinstance(request, PreparedRequest):\n             raise ValueError('You can only send PreparedRequests.')\n \n-        # Set up variables needed for resolve_redirects and dispatching of\n-        # hooks\n+        # Set up variables needed for resolve_redirects and dispatching of hooks\n         allow_redirects = kwargs.pop('allow_redirects', True)\n         stream = kwargs.get('stream')\n         timeout = kwargs.get('timeout')\n@@ -495,8 +494,10 @@ class Session(SessionRedirectMixin):\n \n         # Start time (approximately) of the request\n         start = datetime.utcnow()\n+\n         # Send the request\n         r = adapter.send(request, **kwargs)\n+\n         # Total elapsed time of the request (approximately)\n         r.elapsed = datetime.utcnow() - start\n \n@@ -505,14 +506,19 @@ class Session(SessionRedirectMixin):\n \n         # Persist cookies\n         if r.history:\n+\n             # If the hooks create history then we want those cookies too\n             for resp in r.history:\n                 extract_cookies_to_jar(self.cookies, resp.request, resp.raw)\n+\n         extract_cookies_to_jar(self.cookies, request, r.raw)\n \n         # Redirect resolving generator.\n-        gen = self.resolve_redirects(r, request, stream=stream,\n-                                     timeout=timeout, verify=verify, cert=cert,\n+        gen = self.resolve_redirects(r, request,\n+            stream=stream,\n+            timeout=timeout,\n+            verify=verify,\n+            cert=cert,\n             proxies=proxies)\n \n         # Resolve redirects if allowed.\n@@ -547,8 +553,10 @@ class Session(SessionRedirectMixin):\n         \"\"\"Registers a connection adapter to a prefix.\n \n         Adapters are sorted in descending order by key length.\"\"\"\n+\n         self.adapters[prefix] = adapter\n         keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]\n+\n         for key in keys_to_move:\n             self.adapters[key] = self.adapters.pop(key)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b23d6a9f7aa02561fe6d38be31cde4d609d0e2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9029 | Contributors (this commit): 124 | Commits (past 90d): 9 | Contributors (cumulative): 124 | DMM Complexity: 1.0\n\nDIFF:\n@@ -644,8 +644,7 @@ class Response(object):\n \n         pending = None\n \n-        for chunk in self.iter_content(chunk_size=chunk_size,\n-                                       decode_unicode=decode_unicode):\n+        for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):\n \n             if pending is not None:\n                 chunk = pending + chunk\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c6084704ccb5610ea093b6b47fb45d2149570174", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9032 | Contributors (this commit): 124 | Commits (past 90d): 10 | Contributors (cumulative): 124 | DMM Complexity: 1.0\n\nDIFF:\n@@ -612,8 +612,7 @@ class Response(object):\n             try:\n                 # Special case for urllib3.\n                 try:\n-                    for chunk in self.raw.stream(chunk_size,\n-                                                 decode_content=True):\n+                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n                 except IncompleteRead as e:\n                     raise ChunkedEncodingError(e)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ee8b348ebab9a7c427a87355dd089c83ee74be9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 9043 | Contributors (this commit): 124 | Commits (past 90d): 11 | Contributors (cumulative): 124 | DMM Complexity: 1.0\n\nDIFF:\n@@ -725,11 +725,20 @@ class Response(object):\n         if not self.encoding and len(self.content) > 3:\n             # No encoding set. JSON RFC 4627 section 3 states we should expect\n             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n-            # decoding fails, fall back to `self.text` (using chardet to make\n+            # decoding fails, fall back to `self.text` (using charade to make\n             # a best guess).\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n+                try:\n                     return json.loads(self.content.decode(encoding), **kwargs)\n+                except UnicodeDecodeError:\n+                    # Wrong UTF codec detected; usually because it's not UTF-8\n+                    # but some other 8-bit codec.  This is an RFC violation,\n+                    # and the server didn't bother to tell us what codec *was*\n+                    # used.\n+                    pass\n+            log.warn('No encoding specified for JSON response, and no '\n+                     'UTF codec detected. Falling back to charade best guess.')\n         return json.loads(self.text, **kwargs)\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f35838beb6a84b1ece6e775570f6dd668dcd8da0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9047 | Contributors (this commit): 124 | Commits (past 90d): 12 | Contributors (cumulative): 124 | DMM Complexity: 0.0\n\nDIFF:\n@@ -725,7 +725,7 @@ class Response(object):\n         if not self.encoding and len(self.content) > 3:\n             # No encoding set. JSON RFC 4627 section 3 states we should expect\n             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n-            # decoding fails, fall back to `self.text` (using charade to make\n+            # decoding fails, fall back to `self.text` (using chardet to make\n             # a best guess).\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n@@ -737,8 +737,6 @@ class Response(object):\n                     # and the server didn't bother to tell us what codec *was*\n                     # used.\n                     pass\n-            log.warn('No encoding specified for JSON response, and no '\n-                     'UTF codec detected. Falling back to charade best guess.')\n         return json.loads(self.text, **kwargs)\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c5b6a107eb9af0fd6a1a48c7bf0276fbf71e9157", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9050 | Contributors (this commit): 124 | Commits (past 90d): 13 | Contributors (cumulative): 124 | DMM Complexity: None\n\nDIFF:\n@@ -593,8 +593,7 @@ class Response(object):\n \n     @property\n     def apparent_encoding(self):\n-        \"\"\"The apparent encoding, provided by the lovely Charade library\n-        (Thanks, Ian!).\"\"\"\n+        \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#488b90f5acfafe65b428765aea70ebebd4afe58a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 10262 | Contributors (this commit): 138 | Commits (past 90d): 20 | Contributors (cumulative): 154 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,6 @@ import os\n import re\n import time\n import hashlib\n-import logging\n \n from base64 import b64encode\n \n@@ -19,8 +18,6 @@ from .compat import urlparse, str\n from .cookies import extract_cookies_to_jar\n from .utils import parse_dict_header\n \n-log = logging.getLogger(__name__)\n-\n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n \n\n@@ -8,7 +8,6 @@ This module contains the primary objects that power Requests.\n \"\"\"\n \n import collections\n-import logging\n import datetime\n \n from io import BytesIO, UnsupportedOperation\n@@ -35,8 +34,6 @@ from .compat import (\n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n \n-log = logging.getLogger(__name__)\n-\n \n class RequestEncodingMixin(object):\n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3443c177a3b8279b6c5b5ce9c1643689d8983521", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9056 | Contributors (this commit): 124 | Commits (past 90d): 13 | Contributors (cumulative): 124 | DMM Complexity: None\n\nDIFF:\n@@ -517,7 +517,7 @@ class Response(object):\n         self._content = False\n         self._content_consumed = False\n \n-        #: Integer Code of responded HTTP Status.\n+        #: Integer Code of responded HTTP Status, e.g. 404 or 200.\n         self.status_code = None\n \n         #: Case-insensitive Dictionary of Response Headers.\n@@ -541,6 +541,7 @@ class Response(object):\n         #: up here. The list is sorted from the oldest to the most recent request.\n         self.history = []\n \n+        #: Textual reason of responded HTTP Status, e.g. \"Not Found\" or \"OK\".\n         self.reason = None\n \n         #: A CookieJar of Cookies the server sent back.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0caa2432123bab2d991e635ce558226d019d7bc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/3 | Churn Δ: 38 | Churn Cumulative: 16605 | Contributors (this commit): 176 | Commits (past 90d): 55 | Contributors (cumulative): 258 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.2.1'\n-__build__ = 0x020201\n+__version__ = '2.3.0'\n+__build__ = 0x020300\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n@@ -30,7 +30,17 @@ from .utils import (\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring, IncompleteRead)\n+from .status_codes import codes\n \n+#: The set of HTTP status codes that indicate an automatically\n+#: processable redirect.\n+REDIRECT_STATI = (\n+    codes.moved,  # 301\n+    codes.found,  # 302\n+    codes.other,  # 303\n+    codes.temporary_moved,  # 307\n+)\n+DEFAULT_REDIRECT_LIMIT = 30\n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n \n@@ -589,6 +599,13 @@ class Response(object):\n             return False\n         return True\n \n+    @property\n+    def is_redirect(self):\n+        \"\"\"True if this Response is a well-formed HTTP redirect that could have\n+        been processed automatically (by :meth:`Session.resolve_redirects`).\n+        \"\"\"\n+        return ('location' in self.headers and self.status_code in REDIRECT_STATI)\n+\n     @property\n     def apparent_encoding(self):\n         \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n\n@@ -15,7 +15,7 @@ from datetime import datetime\n from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str\n from .cookies import (\n     cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n-from .models import Request, PreparedRequest\n+from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers, to_native_string\n from .exceptions import TooManyRedirects, InvalidSchema\n@@ -26,13 +26,9 @@ from .adapters import HTTPAdapter\n from .utils import requote_uri, get_environ_proxies, get_netrc_auth\n \n from .status_codes import codes\n-REDIRECT_STATI = (\n-    codes.moved,  # 301\n-    codes.found,  # 302\n-    codes.other,  # 303\n-    codes.temporary_moved,  # 307\n-)\n-DEFAULT_REDIRECT_LIMIT = 30\n+\n+# formerly defined here, reexposed here for backward compatibility\n+from .models import REDIRECT_STATI\n \n \n def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n@@ -89,8 +85,7 @@ class SessionRedirectMixin(object):\n \n         i = 0\n \n-        # ((resp.status_code is codes.see_other))\n-        while ('location' in resp.headers and resp.status_code in REDIRECT_STATI):\n+        while resp.is_redirect:\n             prepared_request = req.copy()\n \n             resp.content  # Consume socket so it can be released\n\n@@ -115,6 +115,8 @@ class RequestsTestCase(unittest.TestCase):\n     def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n         r = requests.get(httpbin('redirect', '1'))\n         assert r.status_code == 200\n+        assert r.history[0].status_code == 302\n+        assert r.history[0].is_redirect\n \n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d2f647cee45fd05cc1977cc3faf4b095b5047b29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 10 | Churn Cumulative: 7009 | Contributors (this commit): 100 | Commits (past 90d): 38 | Contributors (cumulative): 123 | DMM Complexity: 0.8571428571428571\n\nDIFF:\n@@ -59,6 +59,8 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n         if v is None:\n             del merged_setting[k]\n \n+    merged_setting = dict((k, v) for (k, v) in merged_setting.items() if v is not None)\n+\n     return merged_setting\n \n \n\n@@ -211,6 +211,14 @@ class RequestsTestCase(unittest.TestCase):\n         req_urls = [r.request.url for r in resp.history]\n         assert urls == req_urls\n \n+    def test_headers_on_session_with_None_are_not_sent(self):\n+        \"\"\"Do not send headers in Session.headers with None values.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = None\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#81e88b70bd757f5ca5e9bc418a17369c13c6abf2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 3780 | Contributors (this commit): 63 | Commits (past 90d): 17 | Contributors (cumulative): 81 | DMM Complexity: None\n\nDIFF:\n@@ -26,7 +26,7 @@ def request(method, url, **kwargs):\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n     :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n+    :param timeout: (optional) Float describing the timeout of the request in seconds.\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n\n@@ -328,7 +328,7 @@ class Session(SessionRedirectMixin):\n         :param auth: (optional) Auth tuple or callable to enable\n             Basic/Digest/Custom HTTP Auth.\n         :param timeout: (optional) Float describing the timeout of the\n-            request.\n+            request in seconds.\n         :param allow_redirects: (optional) Boolean. Set to True by default.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of\n             the proxy.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#780ce3902eccc7f7087e195211daf4c592cb28fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 25 | Churn Cumulative: 2890 | Contributors (this commit): 66 | Commits (past 90d): 27 | Contributors (cumulative): 70 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,7 @@ from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.util import Timeout as TimeoutSauce\n from .compat import urlparse, basestring, urldefrag, unquote\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n-                    except_on_missing_scheme, get_auth_from_url)\n+                    prepend_scheme_if_needed, get_auth_from_url)\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import TimeoutError\n@@ -203,7 +203,7 @@ class HTTPAdapter(BaseAdapter):\n         proxy = proxies.get(urlparse(url.lower()).scheme)\n \n         if proxy:\n-            except_on_missing_scheme(proxy)\n+            proxy = prepend_scheme_if_needed(proxy, urlparse(url.lower()).scheme)\n             proxy_headers = self.proxy_headers(proxy)\n \n             if not proxy in self.proxy_manager:\n\n@@ -24,10 +24,10 @@ from . import __version__\n from . import certs\n from .compat import parse_http_list as _parse_list_header\n from .compat import (quote, urlparse, bytes, str, OrderedDict, unquote, is_py2,\n-                     builtin_str, getproxies, proxy_bypass)\n+                     builtin_str, getproxies, proxy_bypass, urlunparse)\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n-from .exceptions import MissingSchema, InvalidURL\n+from .exceptions import InvalidURL\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -622,13 +622,18 @@ def guess_json_utf(data):\n     return None\n \n \n-def except_on_missing_scheme(url):\n-    \"\"\"Given a URL, raise a MissingSchema exception if the scheme is missing.\n-    \"\"\"\n-    scheme, netloc, path, params, query, fragment = urlparse(url)\n+def prepend_scheme_if_needed(url, new_scheme):\n+    '''Given a URL that may or may not have a scheme, prepend the given scheme.\n+    Does not replace a present scheme with the one provided as an argument.'''\n+    scheme, netloc, path, params, query, fragment = urlparse(url, new_scheme)\n \n-    if not scheme:\n-        raise MissingSchema('Proxy URLs must have explicit schemes.')\n+    # urlparse is a finicky beast, and sometimes decides that there isn't a\n+    # netloc present. Assume that it's being over-cautious, and switch netloc\n+    # and path if urlparse decided there was no netloc.\n+    if not netloc:\n+        netloc, path = path, netloc\n+\n+    return urlunparse((scheme, netloc, path, params, query, fragment))\n \n \n def get_auth_from_url(url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4404e7e328114868a272b99ffc81b4c74ecd06ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 750 | Contributors (this commit): 21 | Commits (past 90d): 9 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -203,7 +203,7 @@ class HTTPAdapter(BaseAdapter):\n         proxy = proxies.get(urlparse(url.lower()).scheme)\n \n         if proxy:\n-            proxy = prepend_scheme_if_needed(proxy, urlparse(url.lower()).scheme)\n+            proxy = prepend_scheme_if_needed(proxy, 'http')\n             proxy_headers = self.proxy_headers(proxy)\n \n             if not proxy in self.proxy_manager:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#930f03c8649613da9efb7915e17428dd1e8526af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 12 | Churn Cumulative: 5084 | Contributors (this commit): 83 | Commits (past 90d): 33 | Contributors (cumulative): 94 | DMM Complexity: 1.0\n\nDIFF:\n@@ -310,9 +310,6 @@ class HTTPAdapter(BaseAdapter):\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n-        if stream:\n-            timeout = TimeoutSauce(connect=timeout)\n-        else:\n         timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n\n@@ -1170,6 +1170,15 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n         with pytest.raises(TypeError):\n             morsel_to_cookie(morsel)\n \n+class TestTimeout:\n+    def test_stream_timeout(self):\n+        try:\n+            r = requests.get('https://httpbin.org/delay/10', timeout=5.0)\n+        except requests.exceptions.Timeout as e:\n+            assert 'Read timed out' in e.args[0].args[0]\n+\n \n if __name__ == '__main__':\n     unittest.main()\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5f404a0592bba18c5eae7b2aead033f3d0cb27ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4334 | Contributors (this commit): 72 | Commits (past 90d): 24 | Contributors (cumulative): 72 | DMM Complexity: None\n\nDIFF:\n@@ -1170,6 +1170,7 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n         with pytest.raises(TypeError):\n             morsel_to_cookie(morsel)\n \n+\n class TestTimeout:\n     def test_stream_timeout(self):\n         try:\n@@ -1180,5 +1181,3 @@ class TestTimeout:\n \n if __name__ == '__main__':\n     unittest.main()\n-\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8226f69e13b9a076f725965e2ed462216c2f4c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9076 | Contributors (this commit): 126 | Commits (past 90d): 14 | Contributors (cumulative): 126 | DMM Complexity: None\n\nDIFF:\n@@ -617,6 +617,9 @@ class Response(object):\n         large responses.  The chunk size is the number of bytes it should\n         read into memory.  This is not necessarily the length of each item\n         returned as decoding can take place.\n+\n+        If decode_unicode is True, content will be decoded using the best\n+        available encoding based on the response.\n         \"\"\"\n         if self._content_consumed:\n             # simulate reading small chunks of the content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d289eb22f164e0bc71c81b191c1f00bdd08fe669", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 9091 | Contributors (this commit): 126 | Commits (past 90d): 15 | Contributors (cumulative): 126 | DMM Complexity: None\n\nDIFF:\n@@ -621,10 +621,6 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n-        if self._content_consumed:\n-            # simulate reading small chunks of the content\n-            return iter_slices(self._content, chunk_size)\n-\n         def generate():\n             try:\n                 # Special case for urllib3.\n@@ -645,12 +641,17 @@ class Response(object):\n \n             self._content_consumed = True\n \n-        gen = generate()\n+        # simulate reading small chunks of the content\n+        reused_chunks = iter_slices(self._content, chunk_size)\n+\n+        stream_chunks = generate()\n+\n+        chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            gen = stream_decode_response_unicode(gen, self)\n+            chunks = stream_decode_response_unicode(chunks, self)\n \n-        return gen\n+        return chunks\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7b378cb74266ccea308a83c5b0f7129cb4962567", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 21 | Churn Cumulative: 4355 | Contributors (this commit): 73 | Commits (past 90d): 15 | Contributors (cumulative): 73 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,6 +9,7 @@ import os\n import pickle\n import unittest\n \n+import io\n import requests\n import pytest\n from requests.adapters import HTTPAdapter\n@@ -690,6 +691,26 @@ class RequestsTestCase(unittest.TestCase):\n         assert next(iter(r))\n         io.close()\n \n+    def test_response_decode_unicode(self):\n+        \"\"\"\n+        When called with decode_unicode, Response.iter_content should always\n+        return unicode.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'the content'\n+        r.encoding = 'ascii'\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+        # also for streaming\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'ascii'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n     def test_request_and_response_are_pickleable(self):\n         r = requests.get(httpbin('get'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a59fac5e4ba290164cd0e108769bcab523f1bfb2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2144 | Contributors (this commit): 49 | Commits (past 90d): 10 | Contributors (cumulative): 49 | DMM Complexity: None\n\nDIFF:\n@@ -548,7 +548,7 @@ def default_user_agent(name=\"python-requests\"):\n def default_headers():\n     return CaseInsensitiveDict({\n         'User-Agent': default_user_agent(),\n-        'Accept-Encoding': ', '.join(('gzip', 'deflate', 'compress')),\n+        'Accept-Encoding': ', '.join(('gzip', 'deflate')),\n         'Accept': '*/*'\n     })\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ee7fe02953d864021298ed8d3e3e5f6aff1f6731", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 9092 | Contributors (this commit): 126 | Commits (past 90d): 16 | Contributors (cumulative): 126 | DMM Complexity: 1.0\n\nDIFF:\n@@ -575,6 +575,7 @@ class Response(object):\n \n         # pickled objects do not have .raw\n         setattr(self, '_content_consumed', True)\n+        setattr(self, 'raw', None)\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6d7e8a97bbefa287366bc5d0b0b8f789532e853a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 2167 | Contributors (this commit): 49 | Commits (past 90d): 11 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -466,9 +466,10 @@ def is_valid_cidr(string_network):\n     return True\n \n \n-def get_environ_proxies(url):\n-    \"\"\"Return a dict of environment proxies.\"\"\"\n-\n+def should_bypass_proxies(url):\n+    \"\"\"\n+    Returns whether we should bypass proxies or not.\n+    \"\"\"\n     get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n \n     # First check whether no_proxy is defined. If it is, check that the URL\n@@ -486,13 +487,13 @@ def get_environ_proxies(url):\n             for proxy_ip in no_proxy:\n                 if is_valid_cidr(proxy_ip):\n                     if address_in_network(ip, proxy_ip):\n-                        return {}\n+                        return True\n         else:\n             for host in no_proxy:\n                 if netloc.endswith(host) or netloc.split(':')[0].endswith(host):\n                     # The URL does match something in no_proxy, so we don't want\n                     # to apply the proxies on this URL.\n-                    return {}\n+                    return True\n \n     # If the system proxy settings indicate that this URL should be bypassed,\n     # don't proxy.\n@@ -506,11 +507,15 @@ def get_environ_proxies(url):\n         bypass = False\n \n     if bypass:\n-        return {}\n+        return True\n \n-    # If we get here, we either didn't have no_proxy set or we're not going\n-    # anywhere that no_proxy applies to, and the system settings don't require\n-    # bypassing the proxy for the current URL.\n+    return False\n+\n+def get_environ_proxies(url):\n+    \"\"\"Return a dict of environment proxies.\"\"\"\n+    if should_bypass_proxies(url):\n+        return {}\n+    else:\n         return getproxies()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#97cf16e958a948ecf30c3019ae94f2e7ec7dcb7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 39 | Churn Cumulative: 2728 | Contributors (this commit): 52 | Commits (past 90d): 11 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -154,19 +154,7 @@ class SessionRedirectMixin(object):\n             prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n \n-            if 'Authorization' in headers:\n-                # If we get redirected to a new host, we should strip out any\n-                # authentication headers.\n-                original_parsed = urlparse(resp.request.url)\n-                redirect_parsed = urlparse(url)\n-\n-                if (original_parsed.hostname != redirect_parsed.hostname):\n-                    del headers['Authorization']\n-\n-            # .netrc might have more auth for us.\n-            new_auth = get_netrc_auth(url) if self.trust_env else None\n-            if new_auth is not None:\n-                prepared_request.prepare_auth(new_auth)\n+            self.rebuild_auth(prepared_request, resp)\n \n             resp = self.send(\n                 prepared_request,\n@@ -183,6 +171,31 @@ class SessionRedirectMixin(object):\n             i += 1\n             yield resp\n \n+    def rebuild_auth(self, prepared_request, response):\n+        \"\"\"\n+        When being redirected we may want to strip authentication from the\n+        request to avoid leaking credentials. This method intelligently removes\n+        and reapplies authentication where possible to avoid credential loss.\n+        \"\"\"\n+        headers = prepared_request.headers\n+        url = prepared_request.url\n+\n+        if 'Authorization' in headers:\n+            # If we get redirected to a new host, we should strip out any\n+            # authentication headers.\n+            original_parsed = urlparse(response.request.url)\n+            redirect_parsed = urlparse(url)\n+\n+            if (original_parsed.hostname != redirect_parsed.hostname):\n+                del headers['Authorization']\n+\n+        # .netrc might have more auth for us on our new host.\n+        new_auth = get_netrc_auth(url) if self.trust_env else None\n+        if new_auth is not None:\n+            prepared_request.prepare_auth(new_auth)\n+\n+        return\n+\n \n class Session(SessionRedirectMixin):\n     \"\"\"A Requests session.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
