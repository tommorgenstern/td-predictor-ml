{"custom_id": "flask#e044b00047da9bf94e7eb88049a17fe1dcf78f4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 47 | Files Changed: 1 | Hunks: 14 | Methods Changed: 10 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 84 | Churn Cumulative: 4649 | Contributors (this commit): 45 | Commits (past 90d): 4 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -329,6 +329,11 @@ def test_session_using_session_settings(app, client):\n         flask.session[\"testing\"] = 42\n         return \"Hello World\"\n \n+    @app.route(\"/clear\")\n+    def clear():\n+        flask.session.pop(\"testing\", None)\n+        return \"Goodbye World\"\n+\n     rv = client.get(\"/\", \"http://www.example.com:8080/test/\")\n     cookie = rv.headers[\"set-cookie\"].lower()\n     assert \"domain=.example.com\" in cookie\n@@ -337,11 +342,6 @@ def test_session_using_session_settings(app, client):\n     assert \"httponly\" not in cookie\n     assert \"samesite\" in cookie\n \n-    @app.route(\"/clear\")\n-    def clear():\n-        flask.session.pop(\"testing\", None)\n-        return \"Goodbye World\"\n-\n     rv = client.get(\"/clear\", \"http://www.example.com:8080/test/\")\n     cookie = rv.headers[\"set-cookie\"].lower()\n     assert \"session=;\" in cookie\n@@ -1031,7 +1031,14 @@ def test_errorhandler_precedence(app, client):\n     assert rv.data == b\"E2\"\n \n \n-def test_trapping_of_bad_request_key_errors(app, client):\n+@pytest.mark.parametrize(\n+    (\"debug\", \"trap\", \"expect_key\", \"expect_abort\"),\n+    [(False, None, True, True), (True, None, False, True), (False, True, False, False)],\n+)\n+def test_trap_bad_request_key_error(app, client, debug, trap, expect_key, expect_abort):\n+    app.config[\"DEBUG\"] = debug\n+    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = trap\n+\n     @app.route(\"/key\")\n     def fail():\n         flask.request.form[\"missing_key\"]\n@@ -1040,24 +1047,21 @@ def test_trapping_of_bad_request_key_errors(app, client):\n     def allow_abort():\n         flask.abort(400)\n \n+    if expect_key:\n         rv = client.get(\"/key\")\n         assert rv.status_code == 400\n         assert b\"missing_key\" not in rv.data\n+    else:\n+        with pytest.raises(KeyError) as exc_info:\n+            client.get(\"/key\")\n+\n+        assert exc_info.errisinstance(BadRequest)\n+        assert \"missing_key\" in exc_info.value.get_description()\n+\n+    if expect_abort:\n         rv = client.get(\"/abort\")\n         assert rv.status_code == 400\n-\n-    app.debug = True\n-    with pytest.raises(KeyError) as e:\n-        client.get(\"/key\")\n-    assert e.errisinstance(BadRequest)\n-    assert \"missing_key\" in e.value.get_description()\n-    rv = client.get(\"/abort\")\n-    assert rv.status_code == 400\n-\n-    app.debug = False\n-    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = True\n-    with pytest.raises(KeyError):\n-        client.get(\"/key\")\n+    else:\n         with pytest.raises(BadRequest):\n             client.get(\"/abort\")\n \n@@ -1661,7 +1665,7 @@ def test_nonascii_pathinfo(app, client):\n     assert rv.data == b\"Hello World!\"\n \n \n-def test_debug_mode_complains_after_first_request(app, client):\n+def test_no_setup_after_first_request(app, client):\n     app.debug = True\n \n     @app.route(\"/\")\n@@ -1671,19 +1675,10 @@ def test_debug_mode_complains_after_first_request(app, client):\n     assert not app.got_first_request\n     assert client.get(\"/\").data == b\"Awesome\"\n \n-    with pytest.raises(AssertionError) as e:\n+    with pytest.raises(AssertionError) as exc_info:\n         app.add_url_rule(\"/foo\", endpoint=\"late\")\n \n-    assert \"A setup function was called\" in str(e.value)\n-\n-    app.debug = False\n-\n-    @app.route(\"/foo\")\n-    def working():\n-        return \"Meh\"\n-\n-    assert client.get(\"/foo\").data == b\"Meh\"\n-    assert app.got_first_request\n+    assert \"setup method 'add_url_rule'\" in str(exc_info.value)\n \n \n def test_before_first_request_functions(app, client):\n@@ -1720,28 +1715,23 @@ def test_before_first_request_functions_concurrent(app, client):\n \n \n def test_routing_redirect_debugging(monkeypatch, app, client):\n-    @app.route(\"/foo/\", methods=[\"GET\", \"POST\"])\n-    def foo():\n-        return \"success\"\n+    app.config[\"DEBUG\"] = True\n \n-    app.debug = False\n-    rv = client.post(\"/foo\", data={}, follow_redirects=True)\n-    assert rv.data == b\"success\"\n-\n-    app.debug = True\n-\n-    with client:\n-        rv = client.post(\"/foo\", data={}, follow_redirects=True)\n-        assert rv.data == b\"success\"\n-        rv = client.get(\"/foo\", data={}, follow_redirects=True)\n+    @app.route(\"/user/\", methods=[\"GET\", \"POST\"])\n+    def user():\n+        return flask.request.form[\"status\"]\n+\n+    # default redirect code preserves form data\n+    rv = client.post(\"/user\", data={\"status\": \"success\"}, follow_redirects=True)\n     assert rv.data == b\"success\"\n \n+    # 301 and 302 raise error\n     monkeypatch.setattr(RequestRedirect, \"code\", 301)\n \n-    with client, pytest.raises(AssertionError) as e:\n-        client.post(\"/foo\", data={})\n+    with client, pytest.raises(AssertionError) as exc_info:\n+        client.post(\"/user\", data={\"status\": \"error\"}, follow_redirects=True)\n \n-    assert \"canonical URL 'http://localhost/foo/'\" in str(e.value)\n+    assert \"canonical URL 'http://localhost/user/'\" in str(exc_info.value)\n \n \n def test_route_decorator_custom_endpoint(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1232d698600e11dcb83bb5dc349ca785eae02d2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 35 | Files Changed: 2 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 72 | Churn Cumulative: 2445 | Contributors (this commit): 39 | Commits (past 90d): 8 | Contributors (cumulative): 45 | DMM Complexity: 0.5263157894736842\n\nDIFF:\n@@ -9,8 +9,6 @@ from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock\n from threading import Thread\n-from typing import Any\n-from typing import TYPE_CHECKING\n \n import click\n from werkzeug.utils import import_string\n@@ -20,31 +18,6 @@ from .helpers import get_debug_flag\n from .helpers import get_env\n from .helpers import get_load_dotenv\n \n-try:\n-    import dotenv\n-except ImportError:\n-    dotenv = None\n-\n-try:\n-    import ssl\n-except ImportError:\n-    ssl = None  # type: ignore\n-\n-if sys.version_info >= (3, 10):\n-    from importlib import metadata\n-else:\n-    # Use a backport on Python < 3.10.\n-    #\n-    # We technically have importlib.metadata on 3.8+,\n-    # but the API changed in 3.10, so use the backport\n-    # for consistency.\n-    if TYPE_CHECKING:\n-        metadata: Any\n-    else:\n-        # we do this to avoid a version dependent mypy error\n-        # because importlib_metadata is not installed in python3.10+\n-        import importlib_metadata as metadata\n-\n \n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n@@ -520,6 +493,14 @@ class FlaskGroup(AppGroup):\n         if self._loaded_plugin_commands:\n             return\n \n+        if sys.version_info >= (3, 10):\n+            from importlib import metadata\n+        else:\n+            # Use a backport on Python < 3.10. We technically have\n+            # importlib.metadata on 3.8+, but the API changed in 3.10,\n+            # so use the backport for consistency.\n+            import importlib_metadata as metadata\n+\n         for ep in metadata.entry_points(group=\"flask.commands\"):\n             self.add_command(ep.load(), ep.name)\n \n@@ -615,7 +596,9 @@ def load_dotenv(path=None):\n \n     .. versionadded:: 1.0\n     \"\"\"\n-    if dotenv is None:\n+    try:\n+        import dotenv\n+    except ImportError:\n         if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n             click.secho(\n                 \" * Tip: There are .env or .flaskenv files present.\"\n@@ -691,12 +674,14 @@ class CertParamType(click.ParamType):\n         self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)\n \n     def convert(self, value, param, ctx):\n-        if ssl is None:\n+        try:\n+            import ssl\n+        except ImportError:\n             raise click.BadParameter(\n                 'Using \"--cert\" requires Python to be compiled with SSL support.',\n                 ctx,\n                 param,\n-            )\n+            ) from None\n \n         try:\n             return self.path_type(value, param, ctx)\n@@ -729,7 +714,13 @@ def _validate_key(ctx, param, value):\n     \"\"\"\n     cert = ctx.params.get(\"cert\")\n     is_adhoc = cert == \"adhoc\"\n-    is_context = ssl and isinstance(cert, ssl.SSLContext)\n+\n+    try:\n+        import ssl\n+    except ImportError:\n+        is_context = False\n+    else:\n+        is_context = isinstance(cert, ssl.SSLContext)\n \n     if value is not None:\n         if is_adhoc:\n\n@@ -18,7 +18,6 @@ from flask import current_app\n from flask import Flask\n from flask.cli import AppGroup\n from flask.cli import DispatchingApp\n-from flask.cli import dotenv\n from flask.cli import find_best_app\n from flask.cli import FlaskGroup\n from flask.cli import get_version\n@@ -492,7 +491,18 @@ class TestRoutes:\n         assert \"No routes were registered.\" in result.output\n \n \n-need_dotenv = pytest.mark.skipif(dotenv is None, reason=\"dotenv is not installed\")\n+def dotenv_not_available():\n+    try:\n+        import dotenv  # noqa: F401\n+    except ImportError:\n+        return True\n+\n+    return False\n+\n+\n+need_dotenv = pytest.mark.skipif(\n+    dotenv_not_available(), reason=\"dotenv is not installed\"\n+)\n \n \n @need_dotenv\n@@ -530,7 +540,7 @@ def test_dotenv_path(monkeypatch):\n \n \n def test_dotenv_optional(monkeypatch):\n-    monkeypatch.setattr(\"flask.cli.dotenv\", None)\n+    monkeypatch.setitem(sys.modules, \"dotenv\", None)\n     monkeypatch.chdir(test_path)\n     load_dotenv()\n     assert \"FOO\" not in os.environ\n@@ -602,7 +612,8 @@ def test_run_cert_import(monkeypatch):\n \n \n def test_run_cert_no_ssl(monkeypatch):\n-    monkeypatch.setattr(\"flask.cli.ssl\", None)\n+    monkeypatch.setitem(sys.modules, \"ssl\", None)\n+\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a4f63e0390e4f9aba543514d16479ce6f40e46be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 257 | Contributors (this commit): 4 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.2\"\n+__version__ = \"2.1.3.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8cb950671f39c64707b6aaebfc60d7a8f1157da5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 108 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ import typing as t\n if t.TYPE_CHECKING:\n     from _typeshed.wsgi import WSGIApplication  # noqa: F401\n     from werkzeug.datastructures import Headers  # noqa: F401\n-    from werkzeug.wrappers.response import Response  # noqa: F401\n+    from werkzeug.wrappers import Response  # noqa: F401\n \n # The possible types that are directly convertible or are a Response object.\n ResponseValue = t.Union[\n@@ -35,8 +35,13 @@ ResponseReturnValue = t.Union[\n     \"WSGIApplication\",\n ]\n \n+# Allow any subclass of werkzeug.Response, such as the one from Flask,\n+# as a callback argument. Using werkzeug.Response directly makes a\n+# callback annotated with flask.Response fail type checking.\n+ResponseClass = t.TypeVar(\"ResponseClass\", bound=\"Response\")\n+\n AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n-AfterRequestCallable = t.Callable[[\"Response\"], \"Response\"]\n+AfterRequestCallable = t.Callable[[ResponseClass], ResponseClass]\n BeforeFirstRequestCallable = t.Callable[[], None]\n BeforeRequestCallable = t.Callable[[], t.Optional[ResponseReturnValue]]\n TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#61f62e6005f72c44a90026e2589b6bc5234f2f24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 96 | Files Changed: 5 | Hunks: 73 | Methods Changed: 87 | Complexity Δ (Sum/Max): -12/2 | Churn Δ: 173 | Churn Cumulative: 5006 | Contributors (this commit): 34 | Commits (past 90d): 28 | Contributors (cumulative): 59 | DMM Complexity: 0.5\n\nDIFF:\n@@ -26,6 +26,7 @@ from werkzeug.wrappers import Response as BaseResponse\n \n from . import cli\n from . import json\n+from . import typing as ft\n from .config import Config\n from .config import ConfigAttribute\n from .ctx import _AppCtxGlobals\n@@ -58,12 +59,6 @@ from .signals import request_started\n from .signals import request_tearing_down\n from .templating import DispatchingJinjaLoader\n from .templating import Environment\n-from .typing import BeforeFirstRequestCallable\n-from .typing import ResponseReturnValue\n-from .typing import TeardownCallable\n-from .typing import TemplateFilterCallable\n-from .typing import TemplateGlobalCallable\n-from .typing import TemplateTestCallable\n from .wrappers import Request\n from .wrappers import Response\n \n@@ -72,7 +67,6 @@ if t.TYPE_CHECKING:\n     from .blueprints import Blueprint\n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n-    from .typing import ErrorHandlerCallable\n \n if sys.version_info >= (3, 8):\n     iscoroutinefunction = inspect.iscoroutinefunction\n@@ -436,7 +430,7 @@ class Flask(Scaffold):\n         #: :meth:`before_first_request` decorator.\n         #:\n         #: .. versionadded:: 0.8\n-        self.before_first_request_funcs: t.List[BeforeFirstRequestCallable] = []\n+        self.before_first_request_funcs: t.List[ft.BeforeFirstRequestCallable] = []\n \n         #: A list of functions that are called when the application context\n         #: is destroyed.  Since the application context is also torn down\n@@ -444,7 +438,7 @@ class Flask(Scaffold):\n         #: from databases.\n         #:\n         #: .. versionadded:: 0.9\n-        self.teardown_appcontext_funcs: t.List[TeardownCallable] = []\n+        self.teardown_appcontext_funcs: t.List[ft.TeardownCallable] = []\n \n         #: A list of shell context processor functions that should be run\n         #: when a shell context is created.\n@@ -1096,7 +1090,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_filter(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateFilterCallable], TemplateFilterCallable]:\n+    ) -> t.Callable[[ft.TemplateFilterCallable], ft.TemplateFilterCallable]:\n         \"\"\"A decorator that is used to register custom template filter.\n         You can specify a name for the filter, otherwise the function\n         name will be used. Example::\n@@ -1109,7 +1103,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateFilterCallable) -> TemplateFilterCallable:\n+        def decorator(f: ft.TemplateFilterCallable) -> ft.TemplateFilterCallable:\n             self.add_template_filter(f, name=name)\n             return f\n \n@@ -1117,7 +1111,7 @@ class Flask(Scaffold):\n \n     @setupmethod\n     def add_template_filter(\n-        self, f: TemplateFilterCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template filter.  Works exactly like the\n         :meth:`template_filter` decorator.\n@@ -1130,7 +1124,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_test(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateTestCallable], TemplateTestCallable]:\n+    ) -> t.Callable[[ft.TemplateTestCallable], ft.TemplateTestCallable]:\n         \"\"\"A decorator that is used to register custom template test.\n         You can specify a name for the test, otherwise the function\n         name will be used. Example::\n@@ -1150,7 +1144,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateTestCallable) -> TemplateTestCallable:\n+        def decorator(f: ft.TemplateTestCallable) -> ft.TemplateTestCallable:\n             self.add_template_test(f, name=name)\n             return f\n \n@@ -1158,7 +1152,7 @@ class Flask(Scaffold):\n \n     @setupmethod\n     def add_template_test(\n-        self, f: TemplateTestCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template test.  Works exactly like the\n         :meth:`template_test` decorator.\n@@ -1173,7 +1167,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_global(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateGlobalCallable], TemplateGlobalCallable]:\n+    ) -> t.Callable[[ft.TemplateGlobalCallable], ft.TemplateGlobalCallable]:\n         \"\"\"A decorator that is used to register a custom template global function.\n         You can specify a name for the global function, otherwise the function\n         name will be used. Example::\n@@ -1188,7 +1182,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateGlobalCallable) -> TemplateGlobalCallable:\n+        def decorator(f: ft.TemplateGlobalCallable) -> ft.TemplateGlobalCallable:\n             self.add_template_global(f, name=name)\n             return f\n \n@@ -1196,7 +1190,7 @@ class Flask(Scaffold):\n \n     @setupmethod\n     def add_template_global(\n-        self, f: TemplateGlobalCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template global function. Works exactly like the\n         :meth:`template_global` decorator.\n@@ -1210,8 +1204,8 @@ class Flask(Scaffold):\n \n     @setupmethod\n     def before_first_request(\n-        self, f: BeforeFirstRequestCallable\n-    ) -> BeforeFirstRequestCallable:\n+        self, f: ft.BeforeFirstRequestCallable\n+    ) -> ft.BeforeFirstRequestCallable:\n         \"\"\"Registers a function to be run before the first request to this\n         instance of the application.\n \n@@ -1224,7 +1218,7 @@ class Flask(Scaffold):\n         return f\n \n     @setupmethod\n-    def teardown_appcontext(self, f: TeardownCallable) -> TeardownCallable:\n+    def teardown_appcontext(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n         \"\"\"Registers a function to be called when the application context\n         ends.  These functions are typically also called when the request\n         context is popped.\n@@ -1265,7 +1259,7 @@ class Flask(Scaffold):\n         self.shell_context_processors.append(f)\n         return f\n \n-    def _find_error_handler(self, e: Exception) -> t.Optional[\"ErrorHandlerCallable\"]:\n+    def _find_error_handler(self, e: Exception) -> t.Optional[ft.ErrorHandlerCallable]:\n         \"\"\"Return a registered error handler for an exception in this order:\n         blueprint handler for a specific code, app handler for a specific code,\n         blueprint handler for an exception class, app handler for an exception\n@@ -1290,7 +1284,7 @@ class Flask(Scaffold):\n \n     def handle_http_exception(\n         self, e: HTTPException\n-    ) -> t.Union[HTTPException, ResponseReturnValue]:\n+    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\n         registered error handlers and fall back to returning the\n         exception as response.\n@@ -1360,7 +1354,7 @@ class Flask(Scaffold):\n \n     def handle_user_exception(\n         self, e: Exception\n-    ) -> t.Union[HTTPException, ResponseReturnValue]:\n+    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:\n         \"\"\"This method is called whenever an exception occurs that\n         should be handled. A special case is :class:`~werkzeug\n         .exceptions.HTTPException` which is forwarded to the\n@@ -1430,7 +1424,7 @@ class Flask(Scaffold):\n             raise e\n \n         self.log_exception(exc_info)\n-        server_error: t.Union[InternalServerError, ResponseReturnValue]\n+        server_error: t.Union[InternalServerError, ft.ResponseReturnValue]\n         server_error = InternalServerError(original_exception=e)\n         handler = self._find_error_handler(server_error)\n \n@@ -1484,7 +1478,7 @@ class Flask(Scaffold):\n \n         raise FormDataRoutingRedirect(request)\n \n-    def dispatch_request(self) -> ResponseReturnValue:\n+    def dispatch_request(self) -> ft.ResponseReturnValue:\n         \"\"\"Does the request dispatching.  Matches the URL and returns the\n         return value of the view or error handler.  This does not have to\n         be a response object.  In order to convert the return value to a\n@@ -1527,7 +1521,7 @@ class Flask(Scaffold):\n \n     def finalize_request(\n         self,\n-        rv: t.Union[ResponseReturnValue, HTTPException],\n+        rv: t.Union[ft.ResponseReturnValue, HTTPException],\n         from_error_handler: bool = False,\n     ) -> Response:\n         \"\"\"Given the return value from a view function this finalizes\n@@ -1630,7 +1624,7 @@ class Flask(Scaffold):\n \n         return asgiref_async_to_sync(func)\n \n-    def make_response(self, rv: ResponseReturnValue) -> Response:\n+    def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n         \"\"\"Convert the return value from a view function to an instance of\n         :attr:`response_class`.\n \n@@ -1722,7 +1716,9 @@ class Flask(Scaffold):\n                 # evaluate a WSGI callable, or coerce a different response\n                 # class to the correct type\n                 try:\n-                    rv = self.response_class.force_type(rv, request.environ)  # type: ignore  # noqa: B950\n+                    rv = self.response_class.force_type(\n+                        rv, request.environ  # type: ignore[arg-type]\n+                    )\n                 except TypeError as e:\n                     raise TypeError(\n                         f\"{e}\\nThe view function did not return a valid\"\n@@ -1838,7 +1834,7 @@ class Flask(Scaffold):\n \n         raise error\n \n-    def preprocess_request(self) -> t.Optional[ResponseReturnValue]:\n+    def preprocess_request(self) -> t.Optional[ft.ResponseReturnValue]:\n         \"\"\"Called before the request is dispatched. Calls\n         :attr:`url_value_preprocessors` registered with the app and the\n         current blueprint (if any). Then calls :attr:`before_request_funcs`\n\n@@ -3,23 +3,13 @@ import typing as t\n from collections import defaultdict\n from functools import update_wrapper\n \n+from . import typing as ft\n from .scaffold import _endpoint_from_view_func\n from .scaffold import _sentinel\n from .scaffold import Scaffold\n-from .typing import AfterRequestCallable\n-from .typing import BeforeFirstRequestCallable\n-from .typing import BeforeRequestCallable\n-from .typing import TeardownCallable\n-from .typing import TemplateContextProcessorCallable\n-from .typing import TemplateFilterCallable\n-from .typing import TemplateGlobalCallable\n-from .typing import TemplateTestCallable\n-from .typing import URLDefaultCallable\n-from .typing import URLValuePreprocessorCallable\n \n if t.TYPE_CHECKING:\n     from .app import Flask\n-    from .typing import ErrorHandlerCallable\n \n DeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], t.Callable]\n \n@@ -419,7 +409,7 @@ class Blueprint(Scaffold):\n \n     def app_template_filter(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateFilterCallable], TemplateFilterCallable]:\n+    ) -> t.Callable[[ft.TemplateFilterCallable], ft.TemplateFilterCallable]:\n         \"\"\"Register a custom template filter, available application wide.  Like\n         :meth:`Flask.template_filter` but for a blueprint.\n \n@@ -427,14 +417,14 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateFilterCallable) -> TemplateFilterCallable:\n+        def decorator(f: ft.TemplateFilterCallable) -> ft.TemplateFilterCallable:\n             self.add_app_template_filter(f, name=name)\n             return f\n \n         return decorator\n \n     def add_app_template_filter(\n-        self, f: TemplateFilterCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template filter, available application wide.  Like\n         :meth:`Flask.add_template_filter` but for a blueprint.  Works exactly\n@@ -451,7 +441,7 @@ class Blueprint(Scaffold):\n \n     def app_template_test(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateTestCallable], TemplateTestCallable]:\n+    ) -> t.Callable[[ft.TemplateTestCallable], ft.TemplateTestCallable]:\n         \"\"\"Register a custom template test, available application wide.  Like\n         :meth:`Flask.template_test` but for a blueprint.\n \n@@ -461,14 +451,14 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateTestCallable) -> TemplateTestCallable:\n+        def decorator(f: ft.TemplateTestCallable) -> ft.TemplateTestCallable:\n             self.add_app_template_test(f, name=name)\n             return f\n \n         return decorator\n \n     def add_app_template_test(\n-        self, f: TemplateTestCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template test, available application wide.  Like\n         :meth:`Flask.add_template_test` but for a blueprint.  Works exactly\n@@ -487,7 +477,7 @@ class Blueprint(Scaffold):\n \n     def app_template_global(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[TemplateGlobalCallable], TemplateGlobalCallable]:\n+    ) -> t.Callable[[ft.TemplateGlobalCallable], ft.TemplateGlobalCallable]:\n         \"\"\"Register a custom template global, available application wide.  Like\n         :meth:`Flask.template_global` but for a blueprint.\n \n@@ -497,14 +487,14 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: TemplateGlobalCallable) -> TemplateGlobalCallable:\n+        def decorator(f: ft.TemplateGlobalCallable) -> ft.TemplateGlobalCallable:\n             self.add_app_template_global(f, name=name)\n             return f\n \n         return decorator\n \n     def add_app_template_global(\n-        self, f: TemplateGlobalCallable, name: t.Optional[str] = None\n+        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None\n     ) -> None:\n         \"\"\"Register a custom template global, available application wide.  Like\n         :meth:`Flask.add_template_global` but for a blueprint.  Works exactly\n@@ -521,7 +511,9 @@ class Blueprint(Scaffold):\n \n         self.record_once(register_template)\n \n-    def before_app_request(self, f: BeforeRequestCallable) -> BeforeRequestCallable:\n+    def before_app_request(\n+        self, f: ft.BeforeRequestCallable\n+    ) -> ft.BeforeRequestCallable:\n         \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n         before each request, even if outside of a blueprint.\n         \"\"\"\n@@ -531,15 +523,15 @@ class Blueprint(Scaffold):\n         return f\n \n     def before_app_first_request(\n-        self, f: BeforeFirstRequestCallable\n-    ) -> BeforeFirstRequestCallable:\n+        self, f: ft.BeforeFirstRequestCallable\n+    ) -> ft.BeforeFirstRequestCallable:\n         \"\"\"Like :meth:`Flask.before_first_request`.  Such a function is\n         executed before the first request to the application.\n         \"\"\"\n         self.record_once(lambda s: s.app.before_first_request_funcs.append(f))\n         return f\n \n-    def after_app_request(self, f: AfterRequestCallable) -> AfterRequestCallable:\n+    def after_app_request(self, f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:\n         \"\"\"Like :meth:`Flask.after_request` but for a blueprint.  Such a function\n         is executed after each request, even if outside of the blueprint.\n         \"\"\"\n@@ -548,7 +540,7 @@ class Blueprint(Scaffold):\n         )\n         return f\n \n-    def teardown_app_request(self, f: TeardownCallable) -> TeardownCallable:\n+    def teardown_app_request(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n         \"\"\"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a\n         function is executed when tearing down each request, even if outside of\n         the blueprint.\n@@ -559,8 +551,8 @@ class Blueprint(Scaffold):\n         return f\n \n     def app_context_processor(\n-        self, f: TemplateContextProcessorCallable\n-    ) -> TemplateContextProcessorCallable:\n+        self, f: ft.TemplateContextProcessorCallable\n+    ) -> ft.TemplateContextProcessorCallable:\n         \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  Such a\n         function is executed each request, even if outside of the blueprint.\n         \"\"\"\n@@ -574,22 +566,22 @@ class Blueprint(Scaffold):\n         handler is used for all requests, even if outside of the blueprint.\n         \"\"\"\n \n-        def decorator(f: \"ErrorHandlerCallable\") -> \"ErrorHandlerCallable\":\n+        def decorator(f: ft.ErrorHandlerCallable) -> ft.ErrorHandlerCallable:\n             self.record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n \n         return decorator\n \n     def app_url_value_preprocessor(\n-        self, f: URLValuePreprocessorCallable\n-    ) -> URLValuePreprocessorCallable:\n+        self, f: ft.URLValuePreprocessorCallable\n+    ) -> ft.URLValuePreprocessorCallable:\n         \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\"\"\"\n         self.record_once(\n             lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n         )\n         return f\n \n-    def app_url_defaults(self, f: URLDefaultCallable) -> URLDefaultCallable:\n+    def app_url_defaults(self, f: ft.URLDefaultCallable) -> ft.URLDefaultCallable:\n         \"\"\"Same as :meth:`url_defaults` but application wide.\"\"\"\n         self.record_once(\n             lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n\n@@ -5,11 +5,11 @@ from types import TracebackType\n \n from werkzeug.exceptions import HTTPException\n \n+from . import typing as ft\n from .globals import _app_ctx_stack\n from .globals import _request_ctx_stack\n from .signals import appcontext_popped\n from .signals import appcontext_pushed\n-from .typing import AfterRequestCallable\n \n if t.TYPE_CHECKING:\n     from .app import Flask\n@@ -109,7 +109,7 @@ class _AppCtxGlobals:\n         return object.__repr__(self)\n \n \n-def after_this_request(f: AfterRequestCallable) -> AfterRequestCallable:\n+def after_this_request(f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:\n     \"\"\"Executes a function after this request.  This is useful to modify\n     response objects.  The function is passed the response object and has\n     to return the same or a new one.\n@@ -341,7 +341,7 @@ class RequestContext:\n         # Functions that should be executed after the request on the response\n         # object.  These will be called before the regular \"after_request\"\n         # functions.\n-        self._after_request_functions: t.List[AfterRequestCallable] = []\n+        self._after_request_functions: t.List[ft.AfterRequestCallable] = []\n \n     @property\n     def g(self) -> _AppCtxGlobals:\n\n@@ -12,23 +12,16 @@ from jinja2 import FileSystemLoader\n from werkzeug.exceptions import default_exceptions\n from werkzeug.exceptions import HTTPException\n \n+from . import typing as ft\n from .cli import AppGroup\n from .globals import current_app\n from .helpers import get_root_path\n from .helpers import locked_cached_property\n from .helpers import send_from_directory\n from .templating import _default_template_ctx_processor\n-from .typing import AfterRequestCallable\n-from .typing import AppOrBlueprintKey\n-from .typing import BeforeRequestCallable\n-from .typing import TeardownCallable\n-from .typing import TemplateContextProcessorCallable\n-from .typing import URLDefaultCallable\n-from .typing import URLValuePreprocessorCallable\n \n if t.TYPE_CHECKING:\n     from .wrappers import Response\n-    from .typing import ErrorHandlerCallable\n \n # a singleton sentinel value for parameter defaults\n _sentinel = object()\n@@ -143,8 +136,8 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.error_handler_spec: t.Dict[\n-            AppOrBlueprintKey,\n-            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], \"ErrorHandlerCallable\"]],\n+            ft.AppOrBlueprintKey,\n+            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ft.ErrorHandlerCallable]],\n         ] = defaultdict(lambda: defaultdict(dict))\n \n         #: A data structure of functions to call at the beginning of\n@@ -158,7 +151,7 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.before_request_funcs: t.Dict[\n-            AppOrBlueprintKey, t.List[BeforeRequestCallable]\n+            ft.AppOrBlueprintKey, t.List[ft.BeforeRequestCallable]\n         ] = defaultdict(list)\n \n         #: A data structure of functions to call at the end of each\n@@ -172,7 +165,7 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.after_request_funcs: t.Dict[\n-            AppOrBlueprintKey, t.List[AfterRequestCallable]\n+            ft.AppOrBlueprintKey, t.List[ft.AfterRequestCallable]\n         ] = defaultdict(list)\n \n         #: A data structure of functions to call at the end of each\n@@ -187,7 +180,7 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.teardown_request_funcs: t.Dict[\n-            AppOrBlueprintKey, t.List[TeardownCallable]\n+            ft.AppOrBlueprintKey, t.List[ft.TeardownCallable]\n         ] = defaultdict(list)\n \n         #: A data structure of functions to call to pass extra context\n@@ -202,7 +195,7 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.template_context_processors: t.Dict[\n-            AppOrBlueprintKey, t.List[TemplateContextProcessorCallable]\n+            ft.AppOrBlueprintKey, t.List[ft.TemplateContextProcessorCallable]\n         ] = defaultdict(list, {None: [_default_template_ctx_processor]})\n \n         #: A data structure of functions to call to modify the keyword\n@@ -217,8 +210,8 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.url_value_preprocessors: t.Dict[\n-            AppOrBlueprintKey,\n-            t.List[URLValuePreprocessorCallable],\n+            ft.AppOrBlueprintKey,\n+            t.List[ft.URLValuePreprocessorCallable],\n         ] = defaultdict(list)\n \n         #: A data structure of functions to call to modify the keyword\n@@ -233,7 +226,7 @@ class Scaffold:\n         #: This data structure is internal. It should not be modified\n         #: directly and its format may change at any time.\n         self.url_default_functions: t.Dict[\n-            AppOrBlueprintKey, t.List[URLDefaultCallable]\n+            ft.AppOrBlueprintKey, t.List[ft.URLDefaultCallable]\n         ] = defaultdict(list)\n \n     def __repr__(self) -> str:\n@@ -534,7 +527,7 @@ class Scaffold:\n         return decorator\n \n     @setupmethod\n-    def before_request(self, f: BeforeRequestCallable) -> BeforeRequestCallable:\n+    def before_request(self, f: ft.BeforeRequestCallable) -> ft.BeforeRequestCallable:\n         \"\"\"Register a function to run before each request.\n \n         For example, this can be used to open a database connection, or\n@@ -556,7 +549,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def after_request(self, f: AfterRequestCallable) -> AfterRequestCallable:\n+    def after_request(self, f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:\n         \"\"\"Register a function to run after each request to this object.\n \n         The function is called with the response object, and must return\n@@ -572,7 +565,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def teardown_request(self, f: TeardownCallable) -> TeardownCallable:\n+    def teardown_request(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n         \"\"\"Register a function to be run at the end of each request,\n         regardless of whether there was an exception or not.  These functions\n         are executed when the request context is popped, even if not an\n@@ -612,16 +605,16 @@ class Scaffold:\n \n     @setupmethod\n     def context_processor(\n-        self, f: TemplateContextProcessorCallable\n-    ) -> TemplateContextProcessorCallable:\n+        self, f: ft.TemplateContextProcessorCallable\n+    ) -> ft.TemplateContextProcessorCallable:\n         \"\"\"Registers a template context processor function.\"\"\"\n         self.template_context_processors[None].append(f)\n         return f\n \n     @setupmethod\n     def url_value_preprocessor(\n-        self, f: URLValuePreprocessorCallable\n-    ) -> URLValuePreprocessorCallable:\n+        self, f: ft.URLValuePreprocessorCallable\n+    ) -> ft.URLValuePreprocessorCallable:\n         \"\"\"Register a URL value preprocessor function for all view\n         functions in the application. These functions will be called before the\n         :meth:`before_request` functions.\n@@ -638,7 +631,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def url_defaults(self, f: URLDefaultCallable) -> URLDefaultCallable:\n+    def url_defaults(self, f: ft.URLDefaultCallable) -> ft.URLDefaultCallable:\n         \"\"\"Callback function for URL defaults for all view functions of the\n         application.  It's called with the endpoint and values and should\n         update the values passed in place.\n@@ -649,7 +642,7 @@ class Scaffold:\n     @setupmethod\n     def errorhandler(\n         self, code_or_exception: t.Union[t.Type[Exception], int]\n-    ) -> t.Callable[[\"ErrorHandlerCallable\"], \"ErrorHandlerCallable\"]:\n+    ) -> t.Callable[[ft.ErrorHandlerCallable], ft.ErrorHandlerCallable]:\n         \"\"\"Register a function to handle errors by code or exception class.\n \n         A decorator that is used to register a function given an\n@@ -679,7 +672,7 @@ class Scaffold:\n                                   an arbitrary exception\n         \"\"\"\n \n-        def decorator(f: \"ErrorHandlerCallable\") -> \"ErrorHandlerCallable\":\n+        def decorator(f: ft.ErrorHandlerCallable) -> ft.ErrorHandlerCallable:\n             self.register_error_handler(code_or_exception, f)\n             return f\n \n@@ -689,7 +682,7 @@ class Scaffold:\n     def register_error_handler(\n         self,\n         code_or_exception: t.Union[t.Type[Exception], int],\n-        f: \"ErrorHandlerCallable\",\n+        f: ft.ErrorHandlerCallable,\n     ) -> None:\n         \"\"\"Alternative error attach function to the :meth:`errorhandler`\n         decorator that is more straightforward to use for non decorator\n\n@@ -1,8 +1,8 @@\n import typing as t\n \n+from . import typing as ft\n from .globals import current_app\n from .globals import request\n-from .typing import ResponseReturnValue\n \n \n http_method_funcs = frozenset(\n@@ -59,7 +59,7 @@ class View:\n     #: .. versionadded:: 0.8\n     decorators: t.List[t.Callable] = []\n \n-    def dispatch_request(self) -> ResponseReturnValue:\n+    def dispatch_request(self) -> ft.ResponseReturnValue:\n         \"\"\"Subclasses have to override this method to implement the\n         actual view function code.  This method is called with all\n         the arguments from the URL rule.\n@@ -79,7 +79,7 @@ class View:\n         constructor of the class.\n         \"\"\"\n \n-        def view(*args: t.Any, **kwargs: t.Any) -> ResponseReturnValue:\n+        def view(*args: t.Any, **kwargs: t.Any) -> ft.ResponseReturnValue:\n             self = view.view_class(*class_args, **class_kwargs)  # type: ignore\n             return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)\n \n@@ -146,7 +146,7 @@ class MethodView(View, metaclass=MethodViewType):\n         app.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))\n     \"\"\"\n \n-    def dispatch_request(self, *args: t.Any, **kwargs: t.Any) -> ResponseReturnValue:\n+    def dispatch_request(self, *args: t.Any, **kwargs: t.Any) -> ft.ResponseReturnValue:\n         meth = getattr(self, request.method.lower(), None)\n \n         # If the request method is HEAD and we don't have a handler for it\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3ecebcdf8de02818cd409afd6edd39a09248b3ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1142 | Contributors (this commit): 10 | Commits (past 90d): 5 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -113,6 +113,10 @@ def test_config_from_mapping():\n     app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\")\n     common_object_test(app)\n \n+    app = flask.Flask(__name__)\n+    app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\", skip_key=\"skip\")\n+    common_object_test(app)\n+\n     app = flask.Flask(__name__)\n     with pytest.raises(TypeError):\n         app.config.from_mapping({}, {})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8c6f1d96ded2a22429b1ee7da6c3870cb140b587", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 53 | Churn Cumulative: 53 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,53 @@\n+from http import HTTPStatus\n+from typing import Tuple\n+from typing import Union\n+\n+from flask import Flask\n+from flask import jsonify\n+from flask.templating import render_template\n+from flask.views import View\n+from flask.wrappers import Response\n+\n+\n+app = Flask(__name__)\n+\n+\n+@app.route(\"/\")\n+def hello_world() -> str:\n+    return \"<p>Hello, World!</p>\"\n+\n+\n+@app.route(\"/json\")\n+def hello_world_json() -> Response:\n+    return jsonify({\"response\": \"Hello, World!\"})\n+\n+\n+@app.route(\"/template\")\n+@app.route(\"/template/<name>\")\n+def return_template(name: Union[str, None] = None) -> str:\n+    return render_template(\"index.html\", name=name)\n+\n+\n+@app.errorhandler(HTTPStatus.INTERNAL_SERVER_ERROR)\n+def error_500(e) -> Tuple[str, int]:\n+    return \"<p>Sorry, we are having problems</p>\", HTTPStatus.INTERNAL_SERVER_ERROR\n+\n+\n+@app.before_request\n+def before_request() -> None:\n+    app.logger.debug(\"Executing a sample before_request function\")\n+    return None\n+\n+\n+class RenderTemplateView(View):\n+    def __init__(self: \"RenderTemplateView\", template_name: str) -> None:\n+        self.template_name = template_name\n+\n+    def dispatch_request(self: \"RenderTemplateView\") -> str:\n+        return render_template(self.template_name)\n+\n+\n+app.add_url_rule(\n+    \"/about\",\n+    view_func=RenderTemplateView.as_view(\"about_page\", template_name=\"about.html\"),\n+)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#72cae9ce2b6a5a296b7328df8dd73240e14718e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1664 | Contributors (this commit): 14 | Commits (past 90d): 8 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -123,7 +123,7 @@ class Scaffold:\n         self.view_functions: t.Dict[str, t.Callable] = {}\n \n         #: A data structure of registered error handlers, in the format\n-        #: ``{scope: {code: {class: handler}}}```. The ``scope`` key is\n+        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is\n         #: the name of a blueprint the handlers are active for, or\n         #: ``None`` for all requests. The ``code`` key is the HTTP\n         #: status code for ``HTTPException``, or ``None`` for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#81be290ec8889c157c84bc7ce857f883396c5daf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 46 | Files Changed: 5 | Hunks: 30 | Methods Changed: 32 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 110 | Churn Cumulative: 4936 | Contributors (this commit): 34 | Commits (past 90d): 35 | Contributors (cumulative): 59 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1033,7 +1033,7 @@ class Flask(Scaffold):\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[t.Callable] = None,\n+        view_func: t.Optional[ft.ViewCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n@@ -1681,7 +1681,7 @@ class Flask(Scaffold):\n                 if isinstance(rv[1], (Headers, dict, tuple, list)):\n                     rv, headers = rv\n                 else:\n-                    rv, status = rv  # type: ignore[misc]\n+                    rv, status = rv  # type: ignore[assignment,misc]\n             # other sized tuples are not allowed\n             else:\n                 raise TypeError(\n\n@@ -384,7 +384,7 @@ class Blueprint(Scaffold):\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[t.Callable] = None,\n+        view_func: t.Optional[ft.ViewCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n\n@@ -363,48 +363,60 @@ class Scaffold:\n         method: str,\n         rule: str,\n         options: dict,\n-    ) -> t.Callable[[F], F]:\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         if \"methods\" in options:\n             raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n \n         return self.route(rule, methods=[method], **options)\n \n-    def get(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def get(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"GET\", rule, options)\n \n-    def post(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def post(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"POST\", rule, options)\n \n-    def put(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def put(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"PUT\", rule, options)\n \n-    def delete(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def delete(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"DELETE\", rule, options)\n \n-    def patch(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def patch(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"PATCH\", rule, options)\n \n-    def route(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n+    def route(\n+        self, rule: str, **options: t.Any\n+    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n         \"\"\"Decorate a view function to register it with the given URL\n         rule and options. Calls :meth:`add_url_rule`, which has more\n         details about the implementation.\n@@ -428,7 +440,7 @@ class Scaffold:\n             :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n \n-        def decorator(f: F) -> F:\n+        def decorator(f: ft.RouteDecorator) -> ft.RouteDecorator:\n             endpoint = options.pop(\"endpoint\", None)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n@@ -440,7 +452,7 @@ class Scaffold:\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[t.Callable] = None,\n+        view_func: t.Optional[ft.ViewCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n\n@@ -1,37 +1,30 @@\n import typing as t\n \n-\n if t.TYPE_CHECKING:\n     from _typeshed.wsgi import WSGIApplication  # noqa: F401\n     from werkzeug.datastructures import Headers  # noqa: F401\n     from werkzeug.wrappers import Response  # noqa: F401\n \n # The possible types that are directly convertible or are a Response object.\n-ResponseValue = t.Union[\n-    \"Response\",\n-    str,\n-    bytes,\n-    t.Dict[str, t.Any],  # any jsonify-able dict\n-    t.Iterator[str],\n-    t.Iterator[bytes],\n-]\n-StatusCode = int\n+ResponseValue = t.Union[\"Response\", str, bytes, t.Dict[str, t.Any]]\n \n # the possible types for an individual HTTP header\n-HeaderName = str\n+# This should be a Union, but mypy doesn't pass unless it's a TypeVar.\n HeaderValue = t.Union[str, t.List[str], t.Tuple[str, ...]]\n \n # the possible types for HTTP headers\n HeadersValue = t.Union[\n-    \"Headers\", t.Dict[HeaderName, HeaderValue], t.List[t.Tuple[HeaderName, HeaderValue]]\n+    \"Headers\",\n+    t.Mapping[str, HeaderValue],\n+    t.Sequence[t.Tuple[str, HeaderValue]],\n ]\n \n # The possible types returned by a route function.\n ResponseReturnValue = t.Union[\n     ResponseValue,\n     t.Tuple[ResponseValue, HeadersValue],\n-    t.Tuple[ResponseValue, StatusCode],\n-    t.Tuple[ResponseValue, StatusCode, HeadersValue],\n+    t.Tuple[ResponseValue, int],\n+    t.Tuple[ResponseValue, int, HeadersValue],\n     \"WSGIApplication\",\n ]\n \n@@ -51,6 +44,7 @@ TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict], None]\n URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]\n+\n # This should take Exception, but that either breaks typing the argument\n # with a specific exception, or decorating multiple times with different\n # exceptions (and using a union type on the argument).\n@@ -58,3 +52,6 @@ URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], N\n # https://github.com/pallets/flask/issues/4295\n # https://github.com/pallets/flask/issues/4297\n ErrorHandlerCallable = t.Callable[[t.Any], ResponseReturnValue]\n+\n+ViewCallable = t.Callable[..., ResponseReturnValue]\n+RouteDecorator = t.TypeVar(\"RouteDecorator\", bound=ViewCallable)\n\n@@ -1,6 +1,6 @@\n+from __future__ import annotations\n+\n from http import HTTPStatus\n-from typing import Tuple\n-from typing import Union\n \n from flask import Flask\n from flask import jsonify\n@@ -8,42 +8,51 @@ from flask.templating import render_template\n from flask.views import View\n from flask.wrappers import Response\n \n-\n app = Flask(__name__)\n \n \n-@app.route(\"/\")\n-def hello_world() -> str:\n+@app.route(\"/str\")\n+def hello_str() -> str:\n     return \"<p>Hello, World!</p>\"\n \n \n+@app.route(\"/bytes\")\n+def hello_bytes() -> bytes:\n+    return b\"<p>Hello, World!</p>\"\n+\n+\n @app.route(\"/json\")\n-def hello_world_json() -> Response:\n+def hello_json() -> Response:\n     return jsonify({\"response\": \"Hello, World!\"})\n \n \n+@app.route(\"/status\")\n+@app.route(\"/status/<int:code>\")\n+def tuple_status(code: int = 200) -> tuple[str, int]:\n+    return \"hello\", code\n+\n+\n+@app.route(\"/status-enum\")\n+def tuple_status_enum() -> tuple[str, int]:\n+    return \"hello\", HTTPStatus.OK\n+\n+\n+@app.route(\"/headers\")\n+def tuple_headers() -> tuple[str, dict[str, str]]:\n+    return \"Hello, World!\", {\"Content-Type\": \"text/plain\"}\n+\n+\n @app.route(\"/template\")\n @app.route(\"/template/<name>\")\n-def return_template(name: Union[str, None] = None) -> str:\n+def return_template(name: str | None = None) -> str:\n     return render_template(\"index.html\", name=name)\n \n \n-@app.errorhandler(HTTPStatus.INTERNAL_SERVER_ERROR)\n-def error_500(e) -> Tuple[str, int]:\n-    return \"<p>Sorry, we are having problems</p>\", HTTPStatus.INTERNAL_SERVER_ERROR\n-\n-\n-@app.before_request\n-def before_request() -> None:\n-    app.logger.debug(\"Executing a sample before_request function\")\n-    return None\n-\n-\n class RenderTemplateView(View):\n-    def __init__(self: \"RenderTemplateView\", template_name: str) -> None:\n+    def __init__(self: RenderTemplateView, template_name: str) -> None:\n         self.template_name = template_name\n \n-    def dispatch_request(self: \"RenderTemplateView\") -> str:\n+    def dispatch_request(self: RenderTemplateView) -> str:\n         return render_template(self.template_name)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
