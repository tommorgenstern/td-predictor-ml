{"custom_id": "flask#740c42217cb349ab4f03ecba37973ec0c9bed421", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 211 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -48,7 +48,7 @@ class View(object):\n     generated view function!\n     \"\"\"\n \n-    #: A for which methods this pluggable view can handle.\n+    #: A list of methods this view can handle.\n     methods = None\n \n     #: The canonical way to decorate class-based views is to decorate the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2bf477cfeafd87c69b88e1ec58b5eb67abf756e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 5756 | Contributors (this commit): 72 | Commits (past 90d): 8 | Contributors (cumulative): 88 | DMM Complexity: 1.0\n\nDIFF:\n@@ -315,6 +315,7 @@ class Flask(_PackageBoundObject):\n         'JSON_AS_ASCII':                        True,\n         'JSON_SORT_KEYS':                       True,\n         'JSONIFY_PRETTYPRINT_REGULAR':          True,\n+        'JSONIFY_MIMETYPE':                     'application/json',\n         'TEMPLATES_AUTO_RELOAD':                None,\n     })\n \n\n@@ -264,7 +264,7 @@ def jsonify(*args, **kwargs):\n \n     return current_app.response_class(\n         (dumps(data, indent=indent, separators=separators), '\\n'),\n-        mimetype='application/json'\n+        mimetype=current_app.config['JSONIFY_MIMETYPE']\n     )\n \n \n\n@@ -1019,6 +1019,18 @@ def test_jsonify_prettyprint():\n         assert rv.data == pretty_response\n \n \n+def test_jsonify_mimetype():\n+    app = flask.Flask(__name__)\n+    app.config.update({\"JSONIFY_MIMETYPE\": 'application/vnd.api+json'})\n+    with app.test_request_context():\n+        msg = {\n+            \"msg\": {\"submsg\": \"W00t\"},\n+        }\n+        rv = flask.make_response(\n+            flask.jsonify(msg), 200)\n+        assert rv.mimetype == 'application/vnd.api+json'\n+\n+\n def test_url_generation():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#317d60307d7310f0987951164c2c70098b8b5749", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 431 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n #\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n-\n+from __future__ import print_function\n import sys, os\n \n # If extensions (or modules to document with autodoc) are in another directory,\n@@ -26,8 +26,11 @@ sys.path.append(os.path.abspath('.'))\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\n-extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx',\n-              'flaskdocext']\n+extensions = [\n+    'sphinx.ext.autodoc',\n+    'sphinx.ext.intersphinx',\n+    'flaskdocext'\n+]\n \n # Add any paths that contain templates here, relative to this directory.\n templates_path = ['_templates']\n@@ -52,10 +55,8 @@ import pkg_resources\n try:\n     release = pkg_resources.get_distribution('Flask').version\n except pkg_resources.DistributionNotFound:\n-    print 'To build the documentation, The distribution information of Flask'\n-    print 'Has to be available.  Either install the package into your'\n-    print 'development environment or run \"setup.py develop\" to setup the'\n-    print 'metadata.  A virtualenv is recommended!'\n+    print('Flask must be installed to build the documentation.')\n+    print('Install from source using `pip install -e .` in a virtualenv.')\n     sys.exit(1)\n del pkg_resources\n \n@@ -258,13 +259,13 @@ pygments_style = 'flask_theme_support.FlaskyStyle'\n # fall back if theme is not there\n try:\n     __import__('flask_theme_support')\n-except ImportError, e:\n-    print '-' * 74\n-    print 'Warning: Flask themes unavailable.  Building with default theme'\n-    print 'If you want the Flask themes, run this command and build again:'\n-    print\n-    print '  git submodule update --init'\n-    print '-' * 74\n+except ImportError as e:\n+    print('-' * 74)\n+    print('Warning: Flask themes unavailable.  Building with default theme')\n+    print('If you want the Flask themes, run this command and build again:')\n+    print()\n+    print('  git submodule update --init')\n+    print('-' * 74)\n \n     pygments_style = 'tango'\n     html_theme = 'default'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#de25e98f917ae441d186e8a722a0f40a6c7458f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 514 | Contributors (this commit): 19 | Commits (past 90d): 1 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -123,11 +123,12 @@ class Request(RequestBase):\n         return False\n \n     def get_json(self, force=False, silent=False, cache=True):\n-        \"\"\"Parses the incoming JSON request data and returns it.  If\n-        parsing fails the :meth:`on_json_loading_failed` method on the\n-        request object will be invoked.  By default this function will\n-        only load the json data if the mimetype is :mimetype:`application/json`\n-        but this can be overridden by the `force` parameter.\n+        \"\"\"Parses the incoming JSON request data and returns it.  By default\n+        this function will return ``None`` if the mimetype is not\n+        :mimetype:`application/json` but this can be overridden by the\n+        ``force`` parameter. If parsing fails the\n+        :meth:`on_json_loading_failed` method on the request object will be\n+        invoked.\n \n         :param force: if set to ``True`` the mimetype is ignored.\n         :param silent: if set to ``True`` this method will fail silently\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f4c569c83f3f00f43a8ea975821c405ab0057f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 9 | Churn Cumulative: 258 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -39,8 +39,9 @@ def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n class FlaskClient(Client):\n     \"\"\"Works like a regular Werkzeug test client but has some knowledge about\n     how Flask works to defer the cleanup of the request context stack to the\n-    end of a with body when used in a with statement.  For general information\n-    about how to use this class refer to :class:`werkzeug.test.Client`.\n+    end of a ``with`` body when used in a ``with`` statement.  For general\n+    information about how to use this class refer to\n+    :class:`werkzeug.test.Client`.\n \n     Basic usage is outlined in the :ref:`testing` chapter.\n     \"\"\"\n@@ -49,9 +50,9 @@ class FlaskClient(Client):\n \n     @contextmanager\n     def session_transaction(self, *args, **kwargs):\n-        \"\"\"When used in combination with a with statement this opens a\n+        \"\"\"When used in combination with a ``with`` statement this opens a\n         session transaction.  This can be used to modify the session that\n-        the test client uses.  Once the with block is left the session is\n+        the test client uses.  Once the ``with`` block is left the session is\n         stored back.\n \n         ::\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#88500f5cc709e2e931e6547ed9b58033a50215a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 149 | Lines Deleted: 1 | Files Changed: 5 | Hunks: 4 | Methods Changed: 17 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 150 | Churn Cumulative: 4337 | Contributors (this commit): 62 | Commits (past 90d): 6 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -546,7 +546,7 @@ class Flask(_PackageBoundObject):\n         #: provided by Flask itself and can be overridden.\n         #:\n         #: This is an instance of a :class:`click.Group` object.\n-        self.cli = cli.AppGroup(self)\n+        self.cli = cli.AppGroup(self.name)\n \n     def _get_error_handlers(self):\n         from warnings import warn\n\n\n@@ -0,0 +1,5 @@\n+from __future__ import absolute_import, print_function\n+\n+from flask import Flask\n+\n+testapp = Flask('testapp')\n\n@@ -0,0 +1,6 @@\n+from __future__ import absolute_import, print_function\n+\n+from flask import Flask\n+\n+app1 = Flask('app1')\n+app2 = Flask('app2')\n\n@@ -0,0 +1,137 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    tests.test_cli\n+    ~~~~~~~~~~~~~~\n+\n+    :copyright: (c) 2016 by the Flask Team, see AUTHORS for more details.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+#\n+# This file was part of Flask-CLI and was modified under the terms its license,\n+# the Revised BSD License.\n+# Copyright (C) 2015 CERN.\n+#\n+from __future__ import absolute_import, print_function\n+\n+import click\n+import pytest\n+from click.testing import CliRunner\n+from flask import Flask, current_app\n+\n+from flask.cli import AppGroup, FlaskGroup, NoAppException, ScriptInfo, \\\n+    find_best_app, locate_app, script_info_option, with_appcontext\n+\n+\n+def test_cli_name(test_apps):\n+    \"Make sure the CLI object's name is the app's name and not the app itself\"\n+    from cliapp.app import testapp\n+    assert testapp.cli.name == testapp.name\n+\n+\n+def test_find_best_app(test_apps):\n+    \"\"\"Test of find_best_app.\"\"\"\n+    class mod:\n+        app = Flask('appname')\n+    assert find_best_app(mod) == mod.app\n+\n+    class mod:\n+        application = Flask('appname')\n+    assert find_best_app(mod) == mod.application\n+\n+    class mod:\n+        myapp = Flask('appname')\n+    assert find_best_app(mod) == mod.myapp\n+\n+    class mod:\n+        myapp = Flask('appname')\n+        myapp2 = Flask('appname2')\n+\n+    pytest.raises(NoAppException, find_best_app, mod)\n+\n+\n+def test_locate_app(test_apps):\n+    \"\"\"Test of locate_app.\"\"\"\n+    assert locate_app(\"cliapp.app\").name == \"testapp\"\n+    assert locate_app(\"cliapp.app:testapp\").name == \"testapp\"\n+    assert locate_app(\"cliapp.multiapp:app1\").name == \"app1\"\n+    pytest.raises(RuntimeError, locate_app, \"cliapp.app:notanapp\")\n+\n+\n+def test_scriptinfo(test_apps):\n+    \"\"\"Test of ScriptInfo.\"\"\"\n+    obj = ScriptInfo(app_import_path=\"cliapp.app:testapp\")\n+    assert obj.load_app().name == \"testapp\"\n+    assert obj.load_app().name == \"testapp\"\n+\n+    def create_app(info):\n+        return Flask(\"createapp\")\n+\n+    obj = ScriptInfo(create_app=create_app)\n+    app = obj.load_app()\n+    assert app.name == \"createapp\"\n+    assert obj.load_app() == app\n+\n+\n+def test_with_appcontext():\n+    \"\"\"Test of with_appcontext.\"\"\"\n+    @click.command()\n+    @with_appcontext\n+    def testcmd():\n+        click.echo(current_app.name)\n+\n+    obj = ScriptInfo(create_app=lambda info: Flask(\"testapp\"))\n+\n+    runner = CliRunner()\n+    result = runner.invoke(testcmd, obj=obj)\n+    assert result.exit_code == 0\n+    assert result.output == 'testapp\\n'\n+\n+\n+def test_appgroup():\n+    \"\"\"Test of with_appcontext.\"\"\"\n+    @click.group(cls=AppGroup)\n+    def cli():\n+        pass\n+\n+    @cli.command(with_appcontext=True)\n+    def test():\n+        click.echo(current_app.name)\n+\n+    @cli.group()\n+    def subgroup():\n+        pass\n+\n+    @subgroup.command(with_appcontext=True)\n+    def test2():\n+        click.echo(current_app.name)\n+\n+    obj = ScriptInfo(create_app=lambda info: Flask(\"testappgroup\"))\n+\n+    runner = CliRunner()\n+    result = runner.invoke(cli, ['test'], obj=obj)\n+    assert result.exit_code == 0\n+    assert result.output == 'testappgroup\\n'\n+\n+    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n+    assert result.exit_code == 0\n+    assert result.output == 'testappgroup\\n'\n+\n+\n+def test_flaskgroup():\n+    \"\"\"Test FlaskGroup.\"\"\"\n+    def create_app(info):\n+        return Flask(\"flaskgroup\")\n+\n+    @click.group(cls=FlaskGroup, create_app=create_app)\n+    @script_info_option('--config', script_info_key='config')\n+    def cli(**params):\n+        pass\n+\n+    @cli.command()\n+    def test():\n+        click.echo(current_app.name)\n+\n+    runner = CliRunner()\n+    result = runner.invoke(cli, ['test'])\n+    assert result.exit_code == 0\n+    assert result.output == 'flaskgroup\\n'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c810fae9e835ad446e7e9d61c12bbf2f6b597109", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 6 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -112,7 +112,7 @@ RESULT_TEMPATE = u'''\\\n \n \n def log(msg, *args):\n-    print '[EXTTEST]', msg % args\n+    print('[EXTTEST] ' + (msg % args))\n \n \n class TestResult(object):\n@@ -302,7 +302,7 @@ def main():\n     if args.browse:\n         import webbrowser\n         webbrowser.open('file:///' + filename.lstrip('/'))\n-    print 'Results written to', filename\n+    print('Results written to {}'.format(filename))\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#883cb7cedcc23efbb7e73f8884df8f406e452541", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1 | Churn Cumulative: 80 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -39,7 +39,6 @@ class assert_no_leak(object):\n         self.old_objects = len(gc.get_objects())\n \n     def __exit__(self, exc_type, exc_value, tb):\n-        if not hasattr(sys, 'getrefcount'):\n         gc.collect()\n         new_objects = len(gc.get_objects())\n         if new_objects > self.old_objects:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6aee9f6d77e0696bd570d6095445d73c48539f8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 19 | Churn Cumulative: 2337 | Contributors (this commit): 41 | Commits (past 90d): 6 | Contributors (cumulative): 47 | DMM Complexity: 0.625\n\nDIFF:\n@@ -300,14 +300,23 @@ def url_for(endpoint, **values):\n     scheme = values.pop('_scheme', None)\n     appctx.app.inject_url_defaults(endpoint, values)\n \n+    # This is not the best way to deal with this but currently the\n+    # underlying Werkzeug router does not support overriding the scheme on\n+    # a per build call basis.\n+    old_scheme = None\n     if scheme is not None:\n         if not external:\n             raise ValueError('When specifying _scheme, _external must be True')\n+        old_scheme = url_adapter.url_scheme\n         url_adapter.url_scheme = scheme\n \n+    try:\n         try:\n             rv = url_adapter.build(endpoint, values, method=method,\n                                    force_external=external)\n+        finally:\n+            if old_scheme is not None:\n+                url_adapter.url_scheme = old_scheme\n     except BuildError as error:\n         # We need to inject the values again so that the app callback can\n         # deal with that sort of stuff.\n\n@@ -627,6 +627,16 @@ class TestLogging(object):\n                                'index',\n                                _scheme='https')\n \n+    def test_url_for_with_alternating_schemes(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        with app.test_request_context():\n+            assert flask.url_for('index', _external=True) == 'http://localhost/'\n+            assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n+            assert flask.url_for('index', _external=True) == 'http://localhost/'\n+\n     def test_url_with_method(self):\n         from flask.views import MethodView\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#96ec24f6e0ff77a24d0151afe20ec7c97118019f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 27 | Churn Cumulative: 473 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,27 +52,36 @@ class DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n-        explain = self.app.config['EXPLAIN_TEMPLATE_LOADING']\n+        if self.app.config['EXPLAIN_TEMPLATE_LOADING']:\n+            return self._get_source_explained(environment, template)\n+        return self._get_source_fast(environment, template)\n+\n+    def _get_source_explained(self, environment, template):\n         attempts = []\n-        tmplrv = None\n+        trv = None\n \n         for srcobj, loader in self._iter_loaders(template):\n             try:\n                 rv = loader.get_source(environment, template)\n-                if tmplrv is None:\n-                    tmplrv = rv\n-                if not explain:\n-                    break\n+                if trv is None:\n+                    trv = rv\n             except TemplateNotFound:\n                 rv = None\n             attempts.append((loader, srcobj, rv))\n \n-        if explain:\n         from .debughelpers import explain_template_loading_attempts\n         explain_template_loading_attempts(self.app, template, attempts)\n \n-        if tmplrv is not None:\n-            return tmplrv\n+        if trv is not None:\n+            return trv\n+        raise TemplateNotFound(template)\n+\n+    def _get_source_fast(self, environment, template):\n+        for srcobj, loader in self._iter_loaders(template):\n+            try:\n+                return loader.get_source(environment, template)\n+            except TemplateNotFound:\n+                continue\n         raise TemplateNotFound(template)\n \n     def _iter_loaders(self, template):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bdbca923ef26424f605b4c744131512a5edb0f1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 4206 | Contributors (this commit): 63 | Commits (past 90d): 3 | Contributors (cumulative): 63 | DMM Complexity: None\n\nDIFF:\n@@ -934,7 +934,22 @@ class Flask(_PackageBoundObject):\n \n     @setupmethod\n     def register_blueprint(self, blueprint, **options):\n-        \"\"\"Registers a blueprint on the application.\n+        \"\"\"Register a blueprint on the application. For information about \n+        blueprints head over to :ref:`blueprints`.\n+\n+        The blueprint name is passed in as the first argument.\t\n+        Options are passed as additional keyword arguments and forwarded to \n+        `blueprints` in an \"options\" dictionary.\n+\n+        :param subdomain: set a subdomain for the blueprint\n+        :param url_prefix: set the prefix for all URLs defined on the blueprint.\n+                            ``(url_prefix='/<lang code>')``\n+        :param url_defaults: a dictionary with URL defaults that is added to \n+                            each and every URL defined with this blueprint\n+        :param static_folder: add a static folder to urls in this blueprint\n+        :param static_url_path: add a static url path to urls in this blueprint\n+        :param template_folder: set an alternate template folder\n+        :param root_path: set an alternate root path for this blueprint\n \n         .. versionadded:: 0.7\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c5900a1adf8e868eca745225f3cf32218cdbbb23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 16 | Files Changed: 6 | Hunks: 16 | Methods Changed: 13 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 32 | Churn Cumulative: 6624 | Contributors (this commit): 94 | Commits (past 90d): 11 | Contributors (cumulative): 140 | DMM Complexity: None\n\nDIFF:\n@@ -120,7 +120,7 @@ class Flask(_PackageBoundObject):\n        The `instance_path` and `instance_relative_config` parameters were\n        added.\n \n-    .. versionadded:: 1.0\n+    .. versionadded:: 0.11\n        The `root_path` parameter was added.\n \n     :param import_name: the name of the application package\n@@ -159,7 +159,7 @@ class Flask(_PackageBoundObject):\n \n     #: The class that is used for the Jinja environment.\n     #:\n-    #: .. versionadded:: 1.0\n+    #: .. versionadded:: 0.11\n     jinja_environment = Environment\n \n     #: The class that is used for the :data:`~flask.g` instance.\n@@ -198,7 +198,7 @@ class Flask(_PackageBoundObject):\n     #: 1. Default values for certain config options.\n     #: 2. Access to config values through attributes in addition to keys.\n     #:\n-    #: .. versionadded:: 1.0\n+    #: .. versionadded:: 0.11\n     config_class = Config\n \n     #: The debug flag.  Set this to ``True`` to enable debugging of the\n@@ -481,7 +481,7 @@ class Flask(_PackageBoundObject):\n         #: A list of shell context processor functions that should be run\n         #: when a shell context is created.\n         #:\n-        #: .. versionadded:: 1.0\n+        #: .. versionadded:: 0.11\n         self.shell_context_processors = []\n \n         #: all the attached blueprints in a dictionary by name.  Blueprints\n@@ -683,7 +683,7 @@ class Flask(_PackageBoundObject):\n         this function to customize the behavior.\n \n         .. versionadded:: 0.5\n-        .. versionchanged:: 1.0\n+        .. versionchanged:: 0.11\n            ``Environment.auto_reload`` set in accordance with\n            ``TEMPLATES_AUTO_RELOAD`` configuration option.\n         \"\"\"\n@@ -772,7 +772,7 @@ class Flask(_PackageBoundObject):\n         application.  This runs all the registered shell context\n         processors.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         rv = {'app': self, 'g': g}\n         for processor in self.shell_context_processors:\n@@ -893,7 +893,7 @@ class Flask(_PackageBoundObject):\n            to override the client to be used by setting the\n            :attr:`test_client_class` attribute.\n \n-        .. versionchanged:: 1.0\n+        .. versionchanged:: 0.11\n            Added `**kwargs` to support passing additional keyword arguments to\n            the constructor of :attr:`test_client_class`.\n         \"\"\"\n@@ -969,7 +969,7 @@ class Flask(_PackageBoundObject):\n     def iter_blueprints(self):\n         \"\"\"Iterates over all blueprints by the order they were registered.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         return iter(self._blueprint_order)\n \n@@ -1418,7 +1418,7 @@ class Flask(_PackageBoundObject):\n     def shell_context_processor(self, f):\n         \"\"\"Registers a shell context processor function.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         self.shell_context_processors.append(f)\n         return f\n\n@@ -407,7 +407,7 @@ class Blueprint(_PackageBoundObject):\n         application-wide function of the :class:`~flask.Flask` object but\n         for error handlers limited to this blueprint.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         self.record_once(lambda s: s.app._register_error_handler(\n             self.name, code_or_exception, f))\n\n@@ -176,7 +176,7 @@ class Config(dict):\n         :param silent: set to ``True`` if you want silent failure for missing\n                        files.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n \n@@ -194,7 +194,7 @@ class Config(dict):\n         \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n         keys.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         mappings = []\n         if len(mapping) == 1:\n@@ -239,7 +239,7 @@ class Config(dict):\n         :param trim_namespace: a flag indicating if the keys of the resulting\n                           dictionary should not include the namespace\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         rv = {}\n         for k, v in iteritems(self):\n\n@@ -235,7 +235,7 @@ def jsonify(*args, **kwargs):\n         }\n \n \n-    .. versionchanged:: 1.0\n+    .. versionchanged:: 0.11\n        Added support for serializing top-level arrays. This introduces a\n        security risk in ancient browsers. See :ref:`json-security` for details.\n \n\n@@ -263,7 +263,7 @@ class SessionInterface(object):\n \n         This check is usually skipped if sessions get deleted.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         if session.modified:\n             return True\n\n@@ -113,7 +113,7 @@ class Request(RequestBase):\n         is considered to include JSON data if the mimetype is\n         :mimetype:`application/json` or :mimetype:`application/*+json`.\n \n-        .. versionadded:: 1.0\n+        .. versionadded:: 0.11\n         \"\"\"\n         mt = self.mimetype\n         if mt == 'application/json':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#92f63a1c1d483c1a1636efb20cadb1c2932b33ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 139 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -23,7 +23,7 @@ from flask.cli import AppGroup, FlaskGroup, NoAppException, ScriptInfo, \\\n \n \n def test_cli_name(test_apps):\n-    \"Make sure the CLI object's name is the app's name and not the app itself\"\n+    \"\"\"Make sure the CLI object's name is the app's name and not the app itself\"\"\"\n     from cliapp.app import testapp\n     assert testapp.cli.name == testapp.name\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#523e27118359425048541d92892f20ee048c0b76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 89 | Files Changed: 4 | Hunks: 23 | Methods Changed: 13 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 138 | Churn Cumulative: 7482 | Contributors (this commit): 93 | Commits (past 90d): 13 | Contributors (cumulative): 114 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -22,7 +22,8 @@ from werkzeug.exceptions import HTTPException, InternalServerError, \\\n      MethodNotAllowed, BadRequest, default_exceptions\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-     locked_cached_property, _endpoint_from_view_func, find_package\n+     locked_cached_property, _endpoint_from_view_func, find_package, \\\n+     get_debug_flag\n from . import json, cli\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n@@ -289,7 +290,7 @@ class Flask(_PackageBoundObject):\n \n     #: Default configuration parameters.\n     default_config = ImmutableDict({\n-        'DEBUG':                                False,\n+        'DEBUG':                                get_debug_flag(default=False),\n         'TESTING':                              False,\n         'PROPAGATE_EXCEPTIONS':                 None,\n         'PRESERVE_CONTEXT_ON_EXCEPTION':        None,\n\n@@ -17,6 +17,7 @@ from functools import update_wrapper\n import click\n \n from ._compat import iteritems, reraise\n+from .helpers import get_debug_flag\n \n \n class NoAppException(click.UsageError):\n@@ -98,6 +99,15 @@ def locate_app(app_id):\n     return app\n \n \n+def find_default_import_path():\n+    app = os.environ.get('FLASK_APP')\n+    if app is None:\n+        return\n+    if os.path.isfile(app):\n+        return prepare_exec_for_file(app)\n+    return app\n+\n+\n class DispatchingApp(object):\n     \"\"\"Special application that dispatches to a flask application which\n     is imported by name in a background thread.  If an error happens\n@@ -158,12 +168,13 @@ class ScriptInfo(object):\n     to click.\n     \"\"\"\n \n-    def __init__(self, app_import_path=None, debug=None, create_app=None):\n-        #: The application import path\n+    def __init__(self, app_import_path=None, create_app=None):\n+        if create_app is None:\n+            if app_import_path is None:\n+                app_import_path = find_default_import_path()\n             self.app_import_path = app_import_path\n-        #: The debug flag.  If this is not None, the application will\n-        #: automatically have it's debug flag overridden with this value.\n-        self.debug = debug\n+        else:\n+            self.app_import_path = None\n         #: Optionally a function that is passed the script info to create\n         #: the instance of the application.\n         self.create_app = create_app\n@@ -185,11 +196,12 @@ class ScriptInfo(object):\n         else:\n             if self.app_import_path is None:\n                 raise NoAppException('Could not locate Flask application. '\n-                                     'You did not provide FLASK_APP or the '\n-                                     '--app parameter.')\n+                                     'You did not provide the FLASK_APP '\n+                                     'environment variable.')\n             rv = locate_app(self.app_import_path)\n-        if self.debug is not None:\n-            rv.debug = self.debug\n+        debug = get_debug_flag()\n+        if debug is not None:\n+            rv.debug = debug\n         self._loaded_app = rv\n         return rv\n \n@@ -210,29 +222,6 @@ def with_appcontext(f):\n     return update_wrapper(decorator, f)\n \n \n-def set_debug_value(ctx, param, value):\n-    ctx.ensure_object(ScriptInfo).debug = value\n-\n-\n-def set_app_value(ctx, param, value):\n-    if value is not None:\n-        if os.path.isfile(value):\n-            value = prepare_exec_for_file(value)\n-        elif '.' not in sys.path:\n-            sys.path.insert(0, '.')\n-    ctx.ensure_object(ScriptInfo).app_import_path = value\n-\n-\n-debug_option = click.Option(['--debug/--no-debug'],\n-    help='Enable or disable debug mode.',\n-    default=None, callback=set_debug_value)\n-\n-\n-app_option = click.Option(['-a', '--app'],\n-    help='The application to run',\n-    callback=set_app_value, is_eager=True)\n-\n-\n class AppGroup(click.Group):\n     \"\"\"This works similar to a regular click :class:`~click.Group` but it\n     changes the behavior of the :meth:`command` decorator so that it\n@@ -273,25 +262,12 @@ class FlaskGroup(AppGroup):\n \n     :param add_default_commands: if this is True then the default run and\n                                  shell commands wil be added.\n-    :param add_app_option: adds the default :option:`--app` option.  This gets\n-                           automatically disabled if a `create_app`\n-                           callback is defined.\n-    :param add_debug_option: adds the default :option:`--debug` option.\n     :param create_app: an optional callback that is passed the script info\n                        and returns the loaded app.\n     \"\"\"\n \n-    def __init__(self, add_default_commands=True, add_app_option=None,\n-                 add_debug_option=True, create_app=None, **extra):\n-        params = list(extra.pop('params', None) or ())\n-        if add_app_option is None:\n-            add_app_option = create_app is None\n-        if add_app_option:\n-            params.append(app_option)\n-        if add_debug_option:\n-            params.append(debug_option)\n-\n-        AppGroup.__init__(self, params=params, **extra)\n+    def __init__(self, add_default_commands=True, create_app=None, **extra):\n+        AppGroup.__init__(self, **extra)\n         self.create_app = create_app\n \n         if add_default_commands:\n@@ -342,33 +318,6 @@ class FlaskGroup(AppGroup):\n         return AppGroup.main(self, *args, **kwargs)\n \n \n-def script_info_option(*args, **kwargs):\n-    \"\"\"This decorator works exactly like :func:`click.option` but is eager\n-    by default and stores the value in the :attr:`ScriptInfo.data`.  This\n-    is useful to further customize an application factory in very complex\n-    situations.\n-\n-    :param script_info_key: this is a mandatory keyword argument which\n-                            defines under which data key the value should\n-                            be stored.\n-    \"\"\"\n-    try:\n-        key = kwargs.pop('script_info_key')\n-    except LookupError:\n-        raise TypeError('script_info_key not provided.')\n-\n-    real_callback = kwargs.get('callback')\n-    def callback(ctx, param, value):\n-        if real_callback is not None:\n-            value = real_callback(ctx, value)\n-        ctx.ensure_object(ScriptInfo).data[key] = value\n-        return value\n-\n-    kwargs['callback'] = callback\n-    kwargs.setdefault('is_eager', True)\n-    return click.option(*args, **kwargs)\n-\n-\n @click.command('run', short_help='Runs a development server.')\n @click.option('--host', '-h', default='127.0.0.1',\n               help='The interface to bind to.')\n@@ -400,10 +349,12 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n     Flask is enabled and disabled otherwise.\n     \"\"\"\n     from werkzeug.serving import run_simple\n+\n+    debug = get_debug_flag()\n     if reload is None:\n-        reload = info.debug\n+        reload = bool(debug)\n     if debugger is None:\n-        debugger = info.debug\n+        debugger = bool(debug)\n     if eager_loading is None:\n         eager_loading = not reload\n \n@@ -418,12 +369,9 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n         # we won't print anything.\n         if info.app_import_path is not None:\n             print(' * Serving Flask app \"%s\"' % info.app_import_path)\n-        if info.debug is not None:\n-            print(' * Forcing debug %s' % (info.debug and 'on' or 'off'))\n \n     run_simple(host, port, app, use_reloader=reload,\n-               use_debugger=debugger, threaded=with_threads,\n-               passthrough_errors=True)\n+               use_debugger=debugger, threaded=with_threads)\n \n \n @click.command('shell', short_help='Runs a shell in the app context.')\n@@ -464,15 +412,21 @@ cli = FlaskGroup(help=\"\"\"\\\n This shell command acts as general utility script for Flask applications.\n \n It loads the application configured (either through the FLASK_APP environment\n-variable or the --app parameter) and then provides commands either provided\n-by the application or Flask itself.\n+variable) and then provides commands either provided by the application or\n+Flask itself.\n \n The most useful commands are the \"run\" and \"shell\" command.\n \n Example usage:\n \n-  flask --app=hello --debug run\n-\"\"\")\n+\\b\n+  %(prefix)s%(cmd)s FLASK_APP=hello\n+  %(prefix)s%(cmd)s FLASK_DEBUG=1\n+  %(prefix)sflask run\n+\"\"\" % {\n+    'cmd': os.name == 'posix' and 'export' or 'set',\n+    'prefix': os.name == 'posix' and '$ ' or '',\n+})\n \n \n def main(as_module=False):\n\n@@ -14,7 +14,6 @@ import sys\n import pkgutil\n import posixpath\n import mimetypes\n-from datetime import timedelta\n from time import time\n from zlib import adler32\n from threading import RLock\n@@ -54,6 +53,13 @@ _os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n                     if sep not in (None, '/'))\n \n \n+def get_debug_flag(default=None):\n+    val = os.environ.get('FLASK_DEBUG')\n+    if not val:\n+        return default\n+    return val not in ('0', 'false', 'no')\n+\n+\n def _endpoint_from_view_func(view_func):\n     \"\"\"Internal helper that returns the default endpoint for a given\n     function.  This always is the function name.\n\n@@ -19,7 +19,7 @@ from click.testing import CliRunner\n from flask import Flask, current_app\n \n from flask.cli import AppGroup, FlaskGroup, NoAppException, ScriptInfo, \\\n-    find_best_app, locate_app, script_info_option, with_appcontext\n+    find_best_app, locate_app, with_appcontext\n \n \n def test_cli_name(test_apps):\n@@ -123,7 +123,6 @@ def test_flaskgroup():\n         return Flask(\"flaskgroup\")\n \n     @click.group(cls=FlaskGroup, create_app=create_app)\n-    @script_info_option('--config', script_info_key='config')\n     def cli(**params):\n         pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a7d829c61854bc609a343eec114d2a129761fe9f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 22 | Churn Cumulative: 1275 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: 0.6\n\nDIFF:\n@@ -165,7 +165,10 @@ class DispatchingApp(object):\n class ScriptInfo(object):\n     \"\"\"Help object to deal with Flask applications.  This is usually not\n     necessary to interface with as it's used internally in the dispatching\n-    to click.\n+    to click.  In future versions of Flask this object will most likely play\n+    a bigger role.  Typically it's created automatically by the\n+    :class:`FlaskGroup` but you can also manually create it and pass it\n+    onwards as click object.\n     \"\"\"\n \n     def __init__(self, app_import_path=None, create_app=None):\n@@ -174,7 +177,10 @@ class ScriptInfo(object):\n                 app_import_path = find_default_import_path()\n             self.app_import_path = app_import_path\n         else:\n-            self.app_import_path = None\n+            app_import_path = None\n+\n+        #: Optionally the import path for the Flask application.\n+        self.app_import_path = app_import_path\n         #: Optionally a function that is passed the script info to create\n         #: the instance of the application.\n         self.create_app = create_app\n@@ -194,10 +200,12 @@ class ScriptInfo(object):\n         if self.create_app is not None:\n             rv = self.create_app(self)\n         else:\n-            if self.app_import_path is None:\n-                raise NoAppException('Could not locate Flask application. '\n-                                     'You did not provide the FLASK_APP '\n-                                     'environment variable.')\n+            if not self.app_import_path:\n+                raise NoAppException(\n+                    'Could not locate Flask application. You did not provide '\n+                    'the FLASK_APP environment variable.\\n\\nFor more '\n+                    'information see '\n+                    'http://flask.pocoo.org/docs/latest/quickstart/')\n             rv = locate_app(self.app_import_path)\n         debug = get_debug_flag()\n         if debug is not None:\n@@ -369,6 +377,8 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n         # we won't print anything.\n         if info.app_import_path is not None:\n             print(' * Serving Flask app \"%s\"' % info.app_import_path)\n+        if debug is not None:\n+            print(' * Forcing debug mode %s' % (debug and 'on' or 'off'))\n \n     run_simple(host, port, app, use_reloader=reload,\n                use_debugger=debugger, threaded=with_threads)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9594876c1f6377a3f8b911d31e8c941295baa281", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 19 | Churn Cumulative: 1294 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -282,7 +282,24 @@ class FlaskGroup(AppGroup):\n             self.add_command(run_command)\n             self.add_command(shell_command)\n \n+        self._loaded_plugin_commands = False\n+\n+    def _load_plugin_commands(self):\n+        if self._loaded_plugin_commands:\n+            return\n+        try:\n+            import pkg_resources\n+        except ImportError:\n+            self._loaded_plugin_commands = True\n+            return\n+\n+        for ep in pkg_resources.iter_entry_points('flask.commands'):\n+            self.add_command(ep.load(), ep.name)\n+        self._loaded_plugin_commands = True\n+\n     def get_command(self, ctx, name):\n+        self._load_plugin_commands()\n+\n         # We load built-in commands first as these should always be the\n         # same no matter what the app does.  If the app does want to\n         # override this it needs to make a custom instance of this group\n@@ -303,6 +320,8 @@ class FlaskGroup(AppGroup):\n             pass\n \n     def list_commands(self, ctx):\n+        self._load_plugin_commands()\n+\n         # The commands available is the list of both the application (if\n         # available) plus the builtin commands.\n         rv = set(click.Group.list_commands(self, ctx))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8482ce6b8ca9f1110b86bff4c3f998655fdecf8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 32 | Churn Cumulative: 802 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 20 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -181,11 +181,13 @@ class AppContext(object):\n \n     def pop(self, exc=_sentinel):\n         \"\"\"Pops the app context.\"\"\"\n+        try:\n             self._refcnt -= 1\n             if self._refcnt <= 0:\n                 if exc is _sentinel:\n                     exc = sys.exc_info()[1]\n                 self.app.do_teardown_appcontext(exc)\n+        finally:\n             rv = _app_ctx_stack.pop()\n         assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n             % (rv, self)\n@@ -341,6 +343,7 @@ class RequestContext(object):\n         \"\"\"\n         app_ctx = self._implicit_app_ctx_stack.pop()\n \n+        try:\n             clear_request = False\n             if not self._implicit_app_ctx_stack:\n                 self.preserved = False\n@@ -360,10 +363,8 @@ class RequestContext(object):\n                 if request_close is not None:\n                     request_close()\n                 clear_request = True\n-\n+        finally:\n             rv = _request_ctx_stack.pop()\n-        assert rv is self, 'Popped wrong request context.  (%r instead of %r)' \\\n-            % (rv, self)\n \n             # get rid of circular dependencies at the end of the request\n             # so that we don't require the GC to be active.\n@@ -374,6 +375,9 @@ class RequestContext(object):\n             if app_ctx is not None:\n                 app_ctx.pop(exc)\n \n+            assert rv is self, 'Popped wrong request context.  ' \\\n+                '(%r instead of %r)' % (rv, self)\n+\n     def auto_pop(self, exc):\n         if self.request.environ.get('flask._preserve_context') or \\\n            (exc is not None and self.app.preserve_context_on_exception):\n\n@@ -146,3 +146,25 @@ def test_context_refcounts():\n     assert res.status_code == 200\n     assert res.data == b''\n     assert called == ['request', 'app']\n+\n+\n+def test_clean_pop():\n+    called = []\n+    app = flask.Flask(__name__)\n+\n+    @app.teardown_request\n+    def teardown_req(error=None):\n+        1 / 0\n+\n+    @app.teardown_appcontext\n+    def teardown_app(error=None):\n+        called.append('TEARDOWN')\n+\n+    try:\n+        with app.test_request_context():\n+            called.append(flask.current_app.name)\n+    except ZeroDivisionError:\n+        pass\n+\n+    assert called == ['test_appctx', 'TEARDOWN']\n+    assert not flask.current_app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1eccb62965967264acfd1a504fcc3fca0646a8be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 179 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -80,11 +80,6 @@ def set_init_version(version):\n     set_filename_version('flask/__init__.py', version, '__version__')\n \n \n-def set_setup_version(version):\n-    info('Setting setup.py version to %s', version)\n-    set_filename_version('setup.py', version, 'version')\n-\n-\n def build_and_upload():\n     Popen([sys.executable, 'setup.py', 'release', 'sdist', 'bdist_wheel', 'upload']).wait()\n \n@@ -140,12 +135,10 @@ def main():\n         fail('You have uncommitted changes in git')\n \n     set_init_version(version)\n-    set_setup_version(version)\n     make_git_commit('Bump version number to %s', version)\n     make_git_tag(version)\n     build_and_upload()\n     set_init_version(dev_version)\n-    set_setup_version(dev_version)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#13e6a01ac86f9b8c0cad692d5e5e8d600674fb6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 245 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.11.dev0'\n+__version__ = '0.11'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
