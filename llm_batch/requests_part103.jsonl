{"custom_id": "requests#ddada2d7503a5506fb28db8e60890d54f4568317", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 4407 | Contributors (this commit): 57 | Commits (past 90d): 9 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -2308,12 +2308,12 @@ class TestPreparingURLs(object):\n         'input, expected',\n         (\n             (\n-                b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n-                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+                b\"http+unix://%2Fvar%2Frun%2Fsocket/path%7E\",\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path~\",\n             ),\n             (\n-                u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n-                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path%7E\",\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path~\",\n             ),\n             (\n                 b\"mailto:user@example.org\",\n@@ -2346,12 +2346,12 @@ class TestPreparingURLs(object):\n             (\n                 b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n                 {\"key\": \"value\"},\n-                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path?key=value\",\n             ),\n             (\n                 u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n                 {\"key\": \"value\"},\n-                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path?key=value\",\n             ),\n             (\n                 b\"mailto:user@example.org\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#508d47dc6e7458f2db3bc3b3bf629e0bdb1b798a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 686 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.13.0'\n-__build__ = 0x021300\n+__version__ = '2.14.0'\n+__build__ = 0x021400\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#800a074b5d7adbbcaf96a5e6b3754c560f6768ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 516 | Contributors (this commit): 23 | Commits (past 90d): 4 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -99,7 +99,7 @@ setup(\n     extras_require={\n         'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n-        'socks:platform_system == \"Windows\" and python_version<\"3.3\"': ['win_inet_pton'],\n+        'socks:sys_platform == \"win32\" and python_version<\"3.3\"': ['win_inet_pton'],\n     },\n )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3618f3f68ed7b4efe5a6adf6ddf2f413dc71d0e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 690 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.14.0'\n-__build__ = 0x021400\n+__version__ = '2.14.1'\n+__build__ = 0x021401\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3f4c3e20adad6e2faa0068ca221a11f6a53ef7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 518 | Contributors (this commit): 23 | Commits (past 90d): 5 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -99,7 +99,7 @@ setup(\n     extras_require={\n         'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n-        'socks:sys_platform == \"win32\" and python_version<\"3.3\"': ['win_inet_pton'],\n+        'socks:sys_platform == \"win32\" and (python_version == \"2.7\" or python_version == \"2.6\")': ['win_inet_pton'],\n     },\n )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e4693eba4f429230d482ca50d0a537fc13ea6884", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 694 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.14.1'\n-__build__ = 0x021401\n+__version__ = '2.14.2'\n+__build__ = 0x021402\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af66521381d9e6806ca80b7e297b704e6a4966c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 5577 | Contributors (this commit): 90 | Commits (past 90d): 17 | Contributors (cumulative): 100 | DMM Complexity: 0.75\n\nDIFF:\n@@ -209,8 +209,8 @@ class HTTPAdapter(BaseAdapter):\n             to a CA bundle to use\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n-        if url.lower().startswith('https') and verify:\n-\n+        if url.lower().startswith('https'):\n+            if verify:\n                 cert_loc = None\n \n                 # Allow self-specified cert location.\n\n@@ -786,6 +786,10 @@ class TestRequests:\n             requests.get(httpbin_secure(), cert=('.', INVALID_PATH))\n         assert str(e.value) == 'Could not find the TLS key file, invalid path: {0}'.format(INVALID_PATH)\n \n+    def test_http_with_certificate(self, httpbin):\n+        r = requests.get(httpbin(), cert='.')\n+        assert r.status_code == 200\n+\n     def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):\n         \"\"\"warnings are emitted with requests.get\"\"\"\n         if HAS_MODERN_SSL or HAS_PYOPENSSL:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#00c6ad58b765032276f479a6336ad3a2c0ff025a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1171 | Contributors (this commit): 42 | Commits (past 90d): 10 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -209,8 +209,8 @@ class HTTPAdapter(BaseAdapter):\n             to a CA bundle to use\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n-        if url.lower().startswith('https'):\n-            if verify:\n+        if url.lower().startswith('https') and verify:\n+\n             cert_loc = None\n \n             # Allow self-specified cert location.\n@@ -241,6 +241,7 @@ class HTTPAdapter(BaseAdapter):\n                 conn.key_file = cert[1]\n             else:\n                 conn.cert_file = cert\n+                conn.key_file = None\n             if conn.cert_file and not os.path.exists(conn.cert_file):\n                 raise IOError(\"Could not find the TLS certificate file, \"\n                               \"invalid path: {0}\".format(conn.cert_file))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a9470fe31f0c9590dafeac4b53f91fbf11fd6677", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2801 | Contributors (this commit): 76 | Commits (past 90d): 7 | Contributors (cumulative): 76 | DMM Complexity: None\n\nDIFF:\n@@ -684,7 +684,7 @@ def should_bypass_proxies(url, no_proxy):\n     return False\n \n \n-def get_environ_proxies(url, no_proxy):\n+def get_environ_proxies(url, no_proxy=None):\n     \"\"\"\n     Return a dict of environment proxies.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dbb67a13109edef8d02addf5b3fbc8c6f319f4aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 701 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@\n #          /\n \n \"\"\"\n-Requests HTTP library\n+Requests HTTP Library\n ~~~~~~~~~~~~~~~~~~~~~\n \n Requests is an HTTP library, written in Python, for human beings. Basic GET\n@@ -36,7 +36,7 @@ usage:\n The other HTTP methods are supported - see `requests.api`. Full documentation\n is at <http://python-requests.org>.\n \n-:copyright: (c) 2016 by Kenneth Reitz.\n+:copyright: (c) 2017 by Kenneth Reitz.\n :license: Apache 2.0, see LICENSE for more details.\n \"\"\"\n \n@@ -45,7 +45,8 @@ __version__ = '2.14.2'\n __build__ = 0x021402\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2016 Kenneth Reitz'\n+__copyright__ = 'Copyright 2017 Kenneth Reitz'\n+__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3d310b299af587d668493f09d82c84c197d00fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 520 | Contributors (this commit): 23 | Commits (past 90d): 6 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ packages = [\n requires = []\n test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock']\n \n-with open('requests/__init__.py', 'r') as fd:\n+with open('requests/__init__.py', 'r', 'utf-8') as fd:\n     version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n                         fd.read(), re.MULTILINE).group(1)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e32356716572e59c9f10c6c2622bedf5f48b07e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 15 | Files Changed: 3 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 1256 | Contributors (this commit): 32 | Commits (past 90d): 13 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -40,13 +40,7 @@ is at <http://python-requests.org>.\n :license: Apache 2.0, see LICENSE for more details.\n \"\"\"\n \n-__title__ = 'requests'\n-__version__ = '2.14.2'\n-__build__ = 0x021402\n-__author__ = 'Kenneth Reitz'\n-__license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2017 Kenneth Reitz'\n-__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n+from .__version__ import *\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n@@ -0,0 +1,13 @@\n+# -*- coding: utf-8 -*-\n+\n+# .-. .-. .-. . . .-. .-. .-. .-.\n+# |(  |-  |.| | | |-  `-.  |  `-.\n+# ' ' `-' `-`.`-' `-' `-'  '  `-'\n+\n+__title__ = 'requests'\n+__version__ = '2.14.2'\n+__build__ = 0x021402\n+__author__ = 'Kenneth Reitz'\n+__license__ = 'Apache 2.0'\n+__copyright__ = 'Copyright 2017 Kenneth Reitz'\n+__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n\\ No newline at end of file\n\n@@ -9,6 +9,7 @@ from codecs import open\n from setuptools import setup\n from setuptools.command.test import test as TestCommand\n \n+here = os.path.abspath(os.path.dirname(__file__))\n \n class PyTest(TestCommand):\n     user_options = [('pytest-args=', 'a', \"Arguments to pass into py.test\")]\n@@ -28,7 +29,7 @@ class PyTest(TestCommand):\n         errno = pytest.main(self.pytest_args)\n         sys.exit(errno)\n \n-\n+# 'setup.py publish' shortcut.\n if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n@@ -51,12 +52,9 @@ packages = [\n requires = []\n test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock']\n \n-with open('requests/__init__.py', 'r', 'utf-8') as fd:\n-    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n-                        fd.read(), re.MULTILINE).group(1)\n-\n-if not version:\n-    raise RuntimeError('Cannot find version information')\n+about = {}\n+with open(os.path.join(here, \"requests\", \"__version__.py\")) as f:\n+    exec(f.read(), about)\n \n with open('README.rst', 'r', 'utf-8') as f:\n     readme = f.read()\n@@ -65,7 +63,7 @@ with open('HISTORY.rst', 'r', 'utf-8') as f:\n \n setup(\n     name='requests',\n-    version=version,\n+    version=about['__version__'],\n     description='Python HTTP for Humans.',\n     long_description=readme + '\\n\\n' + history,\n     author='Kenneth Reitz',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e634ab73b27f111a1e280f6553a63620293340fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 536 | Contributors (this commit): 23 | Commits (past 90d): 8 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -53,7 +53,7 @@ requires = []\n test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock']\n \n about = {}\n-with open(os.path.join(here, \"requests\", \"__version__.py\")) as f:\n+with open(os.path.join(here, 'requests', '__version__.py')) as f:\n     exec(f.read(), about)\n \n with open('README.rst', 'r', 'utf-8') as f:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9fbfd22f6b6bf0075619e2181e66d557511b14d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 16 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -5,9 +5,12 @@\n # ' ' `-' `-`.`-' `-' `-'  '  `-'\n \n __title__ = 'requests'\n+__description__ = 'Python HTTP for Humans.'\n+__url__ = 'http://python-requests.org'\n __version__ = '2.14.2'\n __build__ = 0x021402\n __author__ = 'Kenneth Reitz'\n+__author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2017 Kenneth Reitz'\n __cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7abfd92aeaeba82e1c527460b539667844fbb557", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 548 | Contributors (this commit): 23 | Commits (past 90d): 9 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -62,19 +62,19 @@ with open('HISTORY.rst', 'r', 'utf-8') as f:\n     history = f.read()\n \n setup(\n-    name='requests',\n+    name=about['__title__'],\n     version=about['__version__'],\n-    description='Python HTTP for Humans.',\n+    description=about['__description__'],\n     long_description=readme + '\\n\\n' + history,\n-    author='Kenneth Reitz',\n-    author_email='me@kennethreitz.com',\n-    url='http://python-requests.org',\n+    author=about['__author__'],\n+    author_email=about['__author_email__'],\n+    url=about['__url__'],\n     packages=packages,\n     package_data={'': ['LICENSE', 'NOTICE'], 'requests': ['*.pem']},\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n-    license='Apache 2.0',\n+    license=about['__license__'],\n     zip_safe=False,\n     classifiers=(\n         'Development Status :: 5 - Production/Stable',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce882a2eae4eaffc4e4f31d9b5917701f714b619", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 521 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ sys.path.insert(0, os.path.abspath('..'))\n sys.path.insert(0, os.path.abspath('_themes'))\n \n import requests\n-from requests import __version__\n+from requests.__version__ import __version__\n \n \n # -- General configuration ------------------------------------------------\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e038aad3ccbd5526346150bd37c8c8a8ee0a0b9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1784 | Contributors (this commit): 36 | Commits (past 90d): 20 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ sys.path.insert(0, os.path.abspath('..'))\n sys.path.insert(0, os.path.abspath('_themes'))\n \n import requests\n-from requests.__version__ import __version__\n+from requests import __version__\n \n \n # -- General configuration ------------------------------------------------\n\n\n@@ -40,7 +40,7 @@ is at <http://python-requests.org>.\n :license: Apache 2.0, see LICENSE for more details.\n \"\"\"\n \n-from .__version__ import *\n+from .__about__ import *\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n@@ -53,7 +53,7 @@ requires = []\n test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock']\n \n about = {}\n-with open(os.path.join(here, 'requests', '__version__.py')) as f:\n+with open(os.path.join(here, 'requests', '__about__.py')) as f:\n     exec(f.read(), about)\n \n with open('README.rst', 'r', 'utf-8') as f:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#296c21576245a1905943a021a56f6c57b0729473", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 528 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,6 @@ sys.path.insert(0, os.path.abspath('..'))\n sys.path.insert(0, os.path.abspath('_themes'))\n \n import requests\n-from requests import __version__\n \n \n # -- General configuration ------------------------------------------------\n@@ -67,9 +66,9 @@ author = u'Kenneth Reitz'\n # built documents.\n #\n # The short X.Y version.\n-version = __version__\n+version = requests.__version__\n # The full version, including alpha/beta/rc tags.\n-release = __version__\n+release = requests.__version__\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1001bc671af1bcd4778c821a1d987be78626106e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3518 | Contributors (this commit): 87 | Commits (past 90d): 15 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -40,7 +40,9 @@ is at <http://python-requests.org>.\n :license: Apache 2.0, see LICENSE for more details.\n \"\"\"\n \n-from .__about__ import *\n+from .__about__ import __title__, __description__, __url__, __version__\n+from .__about__ import __build__, __author__, __author_email__, __license__\n+from .__about__ import __copyright__, __cake__\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n@@ -20,7 +20,7 @@ import socket\n import struct\n import warnings\n \n-from . import __version__\n+from .__about__ import __version__\n from . import certs\n # to_native_string is unused here, but imported here for backwards compatibility\n from ._internal_utils import to_native_string\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#64efd9cfe0909c831bc0737331131a2546237acf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 32 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,16 @@\n+# -*- coding: utf-8 -*-\n+\n+# .-. .-. .-. . . .-. .-. .-. .-.\n+# |(  |-  |.| | | |-  `-.  |  `-.\n+# ' ' `-' `-`.`-' `-' `-'  '  `-'\n+\n+__title__ = 'requests'\n+__description__ = 'Python HTTP for Humans.'\n+__url__ = 'http://python-requests.org'\n+__version__ = '2.14.2'\n+__build__ = 0x021402\n+__author__ = 'Kenneth Reitz'\n+__author_email__ = 'me@kennethreitz.org'\n+__license__ = 'Apache 2.0'\n+__copyright__ = 'Copyright 2017 Kenneth Reitz'\n+__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#14d6fa1472cfbaaeb23c23ad4029bac82547c34d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 21 | Files Changed: 4 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 4094 | Contributors (this commit): 101 | Commits (past 90d): 30 | Contributors (cumulative): 118 | DMM Complexity: None\n\nDIFF:\n@@ -1,16 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-# .-. .-. .-. . . .-. .-. .-. .-.\n-# |(  |-  |.| | | |-  `-.  |  `-.\n-# ' ' `-' `-`.`-' `-' `-'  '  `-'\n-\n-__title__ = 'requests'\n-__description__ = 'Python HTTP for Humans.'\n-__url__ = 'http://python-requests.org'\n-__version__ = '2.14.2'\n-__build__ = 0x021402\n-__author__ = 'Kenneth Reitz'\n-__author_email__ = 'me@kennethreitz.org'\n-__license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2017 Kenneth Reitz'\n-__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n\\ No newline at end of file\n\n@@ -40,9 +40,9 @@ is at <http://python-requests.org>.\n :license: Apache 2.0, see LICENSE for more details.\n \"\"\"\n \n-from .__about__ import __title__, __description__, __url__, __version__\n-from .__about__ import __build__, __author__, __author_email__, __license__\n-from .__about__ import __copyright__, __cake__\n+from .__version__ import __title__, __description__, __url__, __version__\n+from .__version__ import __build__, __author__, __author_email__, __license__\n+from .__version__ import __copyright__, __cake__\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n@@ -20,7 +20,7 @@ import socket\n import struct\n import warnings\n \n-from .__about__ import __version__\n+from .__version__ import __version__\n from . import certs\n # to_native_string is unused here, but imported here for backwards compatibility\n from ._internal_utils import to_native_string\n\n@@ -53,7 +53,7 @@ requires = []\n test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov', 'pytest-mock']\n \n about = {}\n-with open(os.path.join(here, 'requests', '__about__.py')) as f:\n+with open(os.path.join(here, 'requests', '__version__.py')) as f:\n     exec(f.read(), about)\n \n with open('README.rst', 'r', 'utf-8') as f:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce64cce14ef5914216fe52a40496f47b4631d13c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 20 | Churn Cumulative: 13015 | Contributors (this commit): 226 | Commits (past 90d): 10 | Contributors (cumulative): 260 | DMM Complexity: 0.5454545454545454\n\nDIFF:\n@@ -577,6 +577,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         for event in hooks:\n             self.register_hook(event, hooks[event])\n \n+    def send(self, session):\n+        \"\"\"Sends the given PreparedRequest to the given session.\"\"\"\n+        return session.send(self)\n+\n \n class Response(object):\n     \"\"\"The :class:`Response <Response>` object, which contains a\n@@ -593,6 +597,7 @@ class Response(object):\n \n         self._content = False\n         self._content_consumed = False\n+        self._next = None\n \n         #: Integer Code of responded HTTP Status, e.g. 404 or 200.\n         self.status_code = None\n@@ -709,6 +714,9 @@ class Response(object):\n         \"\"\"True if this Response one of the permanent versions of redirect\"\"\"\n         return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n \n+    def next(self):\n+        if self.is_redirect:\n+            return self._next\n     @property\n     def apparent_encoding(self):\n         \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n\n@@ -114,8 +114,8 @@ class SessionRedirectMixin(object):\n         return None\n \n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None, **adapter_kwargs):\n-        \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n+                          verify=True, cert=None, proxies=None, yield_responses=True, **adapter_kwargs):\n+        \"\"\"Receives a Response. Returns a generator of Responses or Requests.\"\"\"\n \n         hist = [] # keep track of history\n \n@@ -203,6 +203,10 @@ class SessionRedirectMixin(object):\n             # Override the original request.\n             req = prepared_request\n \n+            if not yield_responses:\n+                yield req\n+            else:\n+\n                 resp = self.send(\n                     req,\n                     stream=stream,\n@@ -668,6 +672,10 @@ class Session(SessionRedirectMixin):\n             r = history.pop()\n             r.history = history\n \n+        # If redirects aren't being followed, store the response on the Request for Response.next().\n+        if not allow_redirects:\n+            r._next = self.resolve_redirects(r, request, yield_responses=False, **kwargs).next()\n+\n         if not stream:\n             r.content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f41560c5d46e8cbb8d8f741b2f7d2da29a9d6b94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 3342 | Contributors (this commit): 85 | Commits (past 90d): 8 | Contributors (cumulative): 85 | DMM Complexity: 0.0\n\nDIFF:\n@@ -674,7 +674,10 @@ class Session(SessionRedirectMixin):\n \n         # If redirects aren't being followed, store the response on the Request for Response.next().\n         if not allow_redirects:\n+            try:\n                 r._next = self.resolve_redirects(r, request, yield_responses=False, **kwargs).next()\n+            except StopIteration:\n+                pass\n \n         if not stream:\n             r.content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dfd667df96f9d8102100fdf85292e6dbf4b4e22e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 13027 | Contributors (this commit): 226 | Commits (past 90d): 13 | Contributors (cumulative): 260 | DMM Complexity: None\n\nDIFF:\n@@ -711,15 +711,17 @@ class Response(object):\n \n     @property\n     def is_permanent_redirect(self):\n-        \"\"\"True if this Response one of the permanent versions of redirect\"\"\"\n+        \"\"\"True if this Response one of the permanent versions of redirect.\"\"\"\n         return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n \n     def next(self):\n+        \"\"\"Returns a PreparedRequest for the next request in a redirect chain, if there is one.\"\"\"\n         if self.is_redirect:\n             return self._next\n+\n     @property\n     def apparent_encoding(self):\n-        \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n+        \"\"\"The apparent encoding, provided by the chardet library.\"\"\"\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n\n@@ -601,8 +601,7 @@ class Session(SessionRedirectMixin):\n         return self.request('DELETE', url, **kwargs)\n \n     def send(self, request, **kwargs):\n-        \"\"\"\n-        Send a given PreparedRequest.\n+        \"\"\"Send a given PreparedRequest.\n \n         :rtype: requests.Response\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a7239aab84b59534fb5e6eb7b83a97dcf913f8de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3351 | Contributors (this commit): 85 | Commits (past 90d): 10 | Contributors (cumulative): 85 | DMM Complexity: None\n\nDIFF:\n@@ -114,7 +114,7 @@ class SessionRedirectMixin(object):\n         return None\n \n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None, yield_responses=True, **adapter_kwargs):\n+                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):\n         \"\"\"Receives a Response. Returns a generator of Responses or Requests.\"\"\"\n \n         hist = [] # keep track of history\n@@ -203,7 +203,7 @@ class SessionRedirectMixin(object):\n             # Override the original request.\n             req = prepared_request\n \n-            if not yield_responses:\n+            if yield_requests:\n                 yield req\n             else:\n \n@@ -674,7 +674,7 @@ class Session(SessionRedirectMixin):\n         # If redirects aren't being followed, store the response on the Request for Response.next().\n         if not allow_redirects:\n             try:\n-                r._next = self.resolve_redirects(r, request, yield_responses=False, **kwargs).next()\n+                r._next = self.resolve_redirects(r, request, yield_requests=True, **kwargs).next()\n             except StopIteration:\n                 pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c3367d1854208c37855622659ae0a621d9352af2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 9688 | Contributors (this commit): 175 | Commits (past 90d): 5 | Contributors (cumulative): 175 | DMM Complexity: 0.0\n\nDIFF:\n@@ -577,10 +577,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         for event in hooks:\n             self.register_hook(event, hooks[event])\n \n-    def send(self, session):\n-        \"\"\"Sends the given PreparedRequest to the given session.\"\"\"\n-        return session.send(self)\n-\n \n class Response(object):\n     \"\"\"The :class:`Response <Response>` object, which contains a\n@@ -714,9 +710,9 @@ class Response(object):\n         \"\"\"True if this Response one of the permanent versions of redirect.\"\"\"\n         return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n \n+    @property\n     def next(self):\n         \"\"\"Returns a PreparedRequest for the next request in a redirect chain, if there is one.\"\"\"\n-        if self.is_redirect:\n         return self._next\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bf53ace6f80a852b35bdd513cac81d060e78cb33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 36 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -7,8 +7,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.14.2'\n-__build__ = 0x021402\n+__version__ = '2.15.0'\n+__build__ = 0x021500\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0aee4834970714c399f1375830400ff66104bd92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 555 | Contributors (this commit): 23 | Commits (past 90d): 12 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -31,7 +31,8 @@ class PyTest(TestCommand):\n \n # 'setup.py publish' shortcut.\n if sys.argv[-1] == 'publish':\n-    os.system('python setup.py sdist upload')\n+    os.system('python setup.py sdist bdist_wheel')\n+    os.system('twine upload dist/*')\n     sys.exit()\n \n packages = [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#60b9fb17af46c8a2d7367ce101f223abb3a21d0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 38 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,4 +13,4 @@ __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2017 Kenneth Reitz'\n-__cake__ = u'✨ 🍰 ✨ Thanks for using my software. It means the world to me. --kennethreitz'\n\\ No newline at end of file\n+__cake__ = u'✨ 🍰 ✨'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8c2a36140b32975034c8ed20d034900dc4904f96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3353 | Contributors (this commit): 85 | Commits (past 90d): 11 | Contributors (cumulative): 85 | DMM Complexity: None\n\nDIFF:\n@@ -674,7 +674,7 @@ class Session(SessionRedirectMixin):\n         # If redirects aren't being followed, store the response on the Request for Response.next().\n         if not allow_redirects:\n             try:\n-                r._next = self.resolve_redirects(r, request, yield_requests=True, **kwargs).next()\n+                r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs))\n             except StopIteration:\n                 pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#282b01a7c9feae30feccbd54e33afcc06197df62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 42 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -7,8 +7,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.15.0'\n-__build__ = 0x021500\n+__version__ = '2.15.1'\n+__build__ = 0x021501\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8e17600ef60de4faf632acb55d15cb3c178de9bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 26311 | Files Changed: 85 | Hunks: 82 | Methods Changed: 605 | Complexity Δ (Sum/Max): -1923/0 | Churn Δ: 26311 | Churn Cumulative: 76226 | Contributors (this commit): 26 | Commits (past 90d): 145 | Contributors (cumulative): 369 | DMM Complexity: 0.19329836373600565\n\nDIFF:\n@@ -1,36 +0,0 @@\n-'''\n-Debian and other distributions \"unbundle\" requests' vendored dependencies, and\n-rewrite all imports to use the global versions of ``urllib3`` and ``chardet``.\n-The problem with this is that not only requests itself imports those\n-dependencies, but third-party code outside of the distros' control too.\n-\n-In reaction to these problems, the distro maintainers replaced\n-``requests.packages`` with a magical \"stub module\" that imports the correct\n-modules. The implementations were varying in quality and all had severe\n-problems. For example, a symlink (or hardlink) that links the correct modules\n-into place introduces problems regarding object identity, since you now have\n-two modules in `sys.modules` with the same API, but different identities::\n-\n-    requests.packages.urllib3 is not urllib3\n-\n-With version ``2.5.2``, requests started to maintain its own stub, so that\n-distro-specific breakage would be reduced to a minimum, even though the whole\n-issue is not requests' fault in the first place. See\n-https://github.com/kennethreitz/requests/pull/2375 for the corresponding pull\n-request.\n-'''\n-\n-from __future__ import absolute_import\n-import sys\n-\n-try:\n-    from . import urllib3\n-except ImportError:\n-    import urllib3\n-    sys.modules['%s.urllib3' % __name__] = urllib3\n-\n-try:\n-    from . import chardet\n-except ImportError:\n-    import chardet\n-    sys.modules['%s.chardet' % __name__] = chardet\n\n@@ -1,39 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-\n-from .compat import PY2, PY3\n-from .universaldetector import UniversalDetector\n-from .version import __version__, VERSION\n-\n-\n-def detect(byte_str):\n-    \"\"\"\n-    Detect the encoding of the given byte string.\n-\n-    :param byte_str:     The byte sequence to examine.\n-    :type byte_str:      ``bytes`` or ``bytearray``\n-    \"\"\"\n-    if not isinstance(byte_str, bytearray):\n-        if not isinstance(byte_str, bytes):\n-            raise TypeError('Expected object of type bytes or bytearray, got: '\n-                            '{0}'.format(type(byte_str)))\n-        else:\n-            byte_str = bytearray(byte_str)\n-    detector = UniversalDetector()\n-    detector.feed(byte_str)\n-    return detector.close()\n\n@@ -1,386 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# Big5 frequency table\n-# by Taiwan's Mandarin Promotion Council\n-# <http://www.edu.tw:81/mandr/>\n-#\n-# 128  --> 0.42261\n-# 256  --> 0.57851\n-# 512  --> 0.74851\n-# 1024 --> 0.89384\n-# 2048 --> 0.97583\n-#\n-# Ideal Distribution Ratio = 0.74851/(1-0.74851) =2.98\n-# Random Distribution Ration = 512/(5401-512)=0.105\n-#\n-# Typical Distribution Ratio about 25% of Ideal one, still much higher than RDR\n-\n-BIG5_TYPICAL_DISTRIBUTION_RATIO = 0.75\n-\n-#Char to FreqOrder table\n-BIG5_TABLE_SIZE = 5376\n-\n-BIG5_CHAR_TO_FREQ_ORDER = (\n-   1,1801,1506, 255,1431, 198,   9,  82,   6,5008, 177, 202,3681,1256,2821, 110, #   16\n-3814,  33,3274, 261,  76,  44,2114,  16,2946,2187,1176, 659,3971,  26,3451,2653, #   32\n-1198,3972,3350,4202, 410,2215, 302, 590, 361,1964,   8, 204,  58,4510,5009,1932, #   48\n-  63,5010,5011, 317,1614,  75, 222, 159,4203,2417,1480,5012,3555,3091, 224,2822, #   64\n-3682,   3,  10,3973,1471,  29,2787,1135,2866,1940, 873, 130,3275,1123, 312,5013, #   80\n-4511,2052, 507, 252, 682,5014, 142,1915, 124, 206,2947,  34,3556,3204,  64, 604, #   96\n-5015,2501,1977,1978, 155,1991, 645, 641,1606,5016,3452, 337,  72, 406,5017,  80, #  112\n- 630, 238,3205,1509, 263, 939,1092,2654, 756,1440,1094,3453, 449,  69,2987, 591, #  128\n- 179,2096, 471, 115,2035,1844,  60,  50,2988, 134, 806,1869, 734,2036,3454, 180, #  144\n- 995,1607, 156, 537,2907, 688,5018, 319,1305, 779,2145, 514,2379, 298,4512, 359, #  160\n-2502,  90,2716,1338, 663,  11, 906,1099,2553,  20,2441, 182, 532,1716,5019, 732, #  176\n-1376,4204,1311,1420,3206,  25,2317,1056, 113, 399, 382,1950, 242,3455,2474, 529, #  192\n-3276, 475,1447,3683,5020, 117,  21, 656, 810,1297,2300,2334,3557,5021, 126,4205, #  208\n- 706, 456, 150, 613,4513,  71,1118,2037,4206, 145,3092,  85, 835, 486,2115,1246, #  224\n-1426, 428, 727,1285,1015, 800, 106, 623, 303,1281,5022,2128,2359, 347,3815, 221, #  240\n-3558,3135,5023,1956,1153,4207,  83, 296,1199,3093, 192, 624,  93,5024, 822,1898, #  256\n-2823,3136, 795,2065, 991,1554,1542,1592,  27,  43,2867, 859, 139,1456, 860,4514, #  272\n- 437, 712,3974, 164,2397,3137, 695, 211,3037,2097, 195,3975,1608,3559,3560,3684, #  288\n-3976, 234, 811,2989,2098,3977,2233,1441,3561,1615,2380, 668,2077,1638, 305, 228, #  304\n-1664,4515, 467, 415,5025, 262,2099,1593, 239, 108, 300, 200,1033, 512,1247,2078, #  320\n-5026,5027,2176,3207,3685,2682, 593, 845,1062,3277,  88,1723,2038,3978,1951, 212, #  336\n- 266, 152, 149, 468,1899,4208,4516,  77, 187,5028,3038,  37,   5,2990,5029,3979, #  352\n-5030,5031,  39,2524,4517,2908,3208,2079,  55, 148,  74,4518, 545, 483,1474,1029, #  368\n-1665, 217,1870,1531,3138,1104,2655,4209,  24, 172,3562, 900,3980,3563,3564,4519, #  384\n-  32,1408,2824,1312, 329, 487,2360,2251,2717, 784,2683,   4,3039,3351,1427,1789, #  400\n- 188, 109, 499,5032,3686,1717,1790, 888,1217,3040,4520,5033,3565,5034,3352,1520, #  416\n-3687,3981, 196,1034, 775,5035,5036, 929,1816, 249, 439,  38,5037,1063,5038, 794, #  432\n-3982,1435,2301,  46, 178,3278,2066,5039,2381,5040, 214,1709,4521, 804,  35, 707, #  448\n- 324,3688,1601,2554, 140, 459,4210,5041,5042,1365, 839, 272, 978,2262,2580,3456, #  464\n-2129,1363,3689,1423, 697, 100,3094,  48,  70,1231, 495,3139,2196,5043,1294,5044, #  480\n-2080, 462, 586,1042,3279, 853, 256, 988, 185,2382,3457,1698, 434,1084,5045,3458, #  496\n- 314,2625,2788,4522,2335,2336, 569,2285, 637,1817,2525, 757,1162,1879,1616,3459, #  512\n- 287,1577,2116, 768,4523,1671,2868,3566,2526,1321,3816, 909,2418,5046,4211, 933, #  528\n-3817,4212,2053,2361,1222,4524, 765,2419,1322, 786,4525,5047,1920,1462,1677,2909, #  544\n-1699,5048,4526,1424,2442,3140,3690,2600,3353,1775,1941,3460,3983,4213, 309,1369, #  560\n-1130,2825, 364,2234,1653,1299,3984,3567,3985,3986,2656, 525,1085,3041, 902,2001, #  576\n-1475, 964,4527, 421,1845,1415,1057,2286, 940,1364,3141, 376,4528,4529,1381,   7, #  592\n-2527, 983,2383, 336,1710,2684,1846, 321,3461, 559,1131,3042,2752,1809,1132,1313, #  608\n- 265,1481,1858,5049, 352,1203,2826,3280, 167,1089, 420,2827, 776, 792,1724,3568, #  624\n-4214,2443,3281,5050,4215,5051, 446, 229, 333,2753, 901,3818,1200,1557,4530,2657, #  640\n-1921, 395,2754,2685,3819,4216,1836, 125, 916,3209,2626,4531,5052,5053,3820,5054, #  656\n-5055,5056,4532,3142,3691,1133,2555,1757,3462,1510,2318,1409,3569,5057,2146, 438, #  672\n-2601,2910,2384,3354,1068, 958,3043, 461, 311,2869,2686,4217,1916,3210,4218,1979, #  688\n- 383, 750,2755,2627,4219, 274, 539, 385,1278,1442,5058,1154,1965, 384, 561, 210, #  704\n-  98,1295,2556,3570,5059,1711,2420,1482,3463,3987,2911,1257, 129,5060,3821, 642, #  720\n- 523,2789,2790,2658,5061, 141,2235,1333,  68, 176, 441, 876, 907,4220, 603,2602, #  736\n- 710, 171,3464, 404, 549,  18,3143,2398,1410,3692,1666,5062,3571,4533,2912,4534, #  752\n-5063,2991, 368,5064, 146, 366,  99, 871,3693,1543, 748, 807,1586,1185,  22,2263, #  768\n- 379,3822,3211,5065,3212, 505,1942,2628,1992,1382,2319,5066, 380,2362, 218, 702, #  784\n-1818,1248,3465,3044,3572,3355,3282,5067,2992,3694, 930,3283,3823,5068,  59,5069, #  800\n- 585, 601,4221, 497,3466,1112,1314,4535,1802,5070,1223,1472,2177,5071, 749,1837, #  816\n- 690,1900,3824,1773,3988,1476, 429,1043,1791,2236,2117, 917,4222, 447,1086,1629, #  832\n-5072, 556,5073,5074,2021,1654, 844,1090, 105, 550, 966,1758,2828,1008,1783, 686, #  848\n-1095,5075,2287, 793,1602,5076,3573,2603,4536,4223,2948,2302,4537,3825, 980,2503, #  864\n- 544, 353, 527,4538, 908,2687,2913,5077, 381,2629,1943,1348,5078,1341,1252, 560, #  880\n-3095,5079,3467,2870,5080,2054, 973, 886,2081, 143,4539,5081,5082, 157,3989, 496, #  896\n-4224,  57, 840, 540,2039,4540,4541,3468,2118,1445, 970,2264,1748,1966,2082,4225, #  912\n-3144,1234,1776,3284,2829,3695, 773,1206,2130,1066,2040,1326,3990,1738,1725,4226, #  928\n- 279,3145,  51,1544,2604, 423,1578,2131,2067, 173,4542,1880,5083,5084,1583, 264, #  944\n- 610,3696,4543,2444, 280, 154,5085,5086,5087,1739, 338,1282,3096, 693,2871,1411, #  960\n-1074,3826,2445,5088,4544,5089,5090,1240, 952,2399,5091,2914,1538,2688, 685,1483, #  976\n-4227,2475,1436, 953,4228,2055,4545, 671,2400,  79,4229,2446,3285, 608, 567,2689, #  992\n-3469,4230,4231,1691, 393,1261,1792,2401,5092,4546,5093,5094,5095,5096,1383,1672, # 1008\n-3827,3213,1464, 522,1119, 661,1150, 216, 675,4547,3991,1432,3574, 609,4548,2690, # 1024\n-2402,5097,5098,5099,4232,3045,   0,5100,2476, 315, 231,2447, 301,3356,4549,2385, # 1040\n-5101, 233,4233,3697,1819,4550,4551,5102,  96,1777,1315,2083,5103, 257,5104,1810, # 1056\n-3698,2718,1139,1820,4234,2022,1124,2164,2791,1778,2659,5105,3097, 363,1655,3214, # 1072\n-5106,2993,5107,5108,5109,3992,1567,3993, 718, 103,3215, 849,1443, 341,3357,2949, # 1088\n-1484,5110,1712, 127,  67, 339,4235,2403, 679,1412, 821,5111,5112, 834, 738, 351, # 1104\n-2994,2147, 846, 235,1497,1881, 418,1993,3828,2719, 186,1100,2148,2756,3575,1545, # 1120\n-1355,2950,2872,1377, 583,3994,4236,2581,2995,5113,1298,3699,1078,2557,3700,2363, # 1136\n-  78,3829,3830, 267,1289,2100,2002,1594,4237, 348, 369,1274,2197,2178,1838,4552, # 1152\n-1821,2830,3701,2757,2288,2003,4553,2951,2758, 144,3358, 882,4554,3995,2759,3470, # 1168\n-4555,2915,5114,4238,1726, 320,5115,3996,3046, 788,2996,5116,2831,1774,1327,2873, # 1184\n-3997,2832,5117,1306,4556,2004,1700,3831,3576,2364,2660, 787,2023, 506, 824,3702, # 1200\n- 534, 323,4557,1044,3359,2024,1901, 946,3471,5118,1779,1500,1678,5119,1882,4558, # 1216\n- 165, 243,4559,3703,2528, 123, 683,4239, 764,4560,  36,3998,1793, 589,2916, 816, # 1232\n- 626,1667,3047,2237,1639,1555,1622,3832,3999,5120,4000,2874,1370,1228,1933, 891, # 1248\n-2084,2917, 304,4240,5121, 292,2997,2720,3577, 691,2101,4241,1115,4561, 118, 662, # 1264\n-5122, 611,1156, 854,2386,1316,2875,   2, 386, 515,2918,5123,5124,3286, 868,2238, # 1280\n-1486, 855,2661, 785,2216,3048,5125,1040,3216,3578,5126,3146, 448,5127,1525,5128, # 1296\n-2165,4562,5129,3833,5130,4242,2833,3579,3147, 503, 818,4001,3148,1568, 814, 676, # 1312\n-1444, 306,1749,5131,3834,1416,1030, 197,1428, 805,2834,1501,4563,5132,5133,5134, # 1328\n-1994,5135,4564,5136,5137,2198,  13,2792,3704,2998,3149,1229,1917,5138,3835,2132, # 1344\n-5139,4243,4565,2404,3580,5140,2217,1511,1727,1120,5141,5142, 646,3836,2448, 307, # 1360\n-5143,5144,1595,3217,5145,5146,5147,3705,1113,1356,4002,1465,2529,2530,5148, 519, # 1376\n-5149, 128,2133,  92,2289,1980,5150,4003,1512, 342,3150,2199,5151,2793,2218,1981, # 1392\n-3360,4244, 290,1656,1317, 789, 827,2365,5152,3837,4566, 562, 581,4004,5153, 401, # 1408\n-4567,2252,  94,4568,5154,1399,2794,5155,1463,2025,4569,3218,1944,5156, 828,1105, # 1424\n-4245,1262,1394,5157,4246, 605,4570,5158,1784,2876,5159,2835, 819,2102, 578,2200, # 1440\n-2952,5160,1502, 436,3287,4247,3288,2836,4005,2919,3472,3473,5161,2721,2320,5162, # 1456\n-5163,2337,2068,  23,4571, 193, 826,3838,2103, 699,1630,4248,3098, 390,1794,1064, # 1472\n-3581,5164,1579,3099,3100,1400,5165,4249,1839,1640,2877,5166,4572,4573, 137,4250, # 1488\n- 598,3101,1967, 780, 104, 974,2953,5167, 278, 899, 253, 402, 572, 504, 493,1339, # 1504\n-5168,4006,1275,4574,2582,2558,5169,3706,3049,3102,2253, 565,1334,2722, 863,  41, # 1520\n-5170,5171,4575,5172,1657,2338,  19, 463,2760,4251, 606,5173,2999,3289,1087,2085, # 1536\n-1323,2662,3000,5174,1631,1623,1750,4252,2691,5175,2878, 791,2723,2663,2339, 232, # 1552\n-2421,5176,3001,1498,5177,2664,2630, 755,1366,3707,3290,3151,2026,1609, 119,1918, # 1568\n-3474, 862,1026,4253,5178,4007,3839,4576,4008,4577,2265,1952,2477,5179,1125, 817, # 1584\n-4254,4255,4009,1513,1766,2041,1487,4256,3050,3291,2837,3840,3152,5180,5181,1507, # 1600\n-5182,2692, 733,  40,1632,1106,2879, 345,4257, 841,2531, 230,4578,3002,1847,3292, # 1616\n-3475,5183,1263, 986,3476,5184, 735, 879, 254,1137, 857, 622,1300,1180,1388,1562, # 1632\n-4010,4011,2954, 967,2761,2665,1349, 592,2134,1692,3361,3003,1995,4258,1679,4012, # 1648\n-1902,2188,5185, 739,3708,2724,1296,1290,5186,4259,2201,2202,1922,1563,2605,2559, # 1664\n-1871,2762,3004,5187, 435,5188, 343,1108, 596,  17,1751,4579,2239,3477,3709,5189, # 1680\n-4580, 294,3582,2955,1693, 477, 979, 281,2042,3583, 643,2043,3710,2631,2795,2266, # 1696\n-1031,2340,2135,2303,3584,4581, 367,1249,2560,5190,3585,5191,4582,1283,3362,2005, # 1712\n- 240,1762,3363,4583,4584, 836,1069,3153, 474,5192,2149,2532, 268,3586,5193,3219, # 1728\n-1521,1284,5194,1658,1546,4260,5195,3587,3588,5196,4261,3364,2693,1685,4262, 961, # 1744\n-1673,2632, 190,2006,2203,3841,4585,4586,5197, 570,2504,3711,1490,5198,4587,2633, # 1760\n-3293,1957,4588, 584,1514, 396,1045,1945,5199,4589,1968,2449,5200,5201,4590,4013, # 1776\n- 619,5202,3154,3294, 215,2007,2796,2561,3220,4591,3221,4592, 763,4263,3842,4593, # 1792\n-5203,5204,1958,1767,2956,3365,3712,1174, 452,1477,4594,3366,3155,5205,2838,1253, # 1808\n-2387,2189,1091,2290,4264, 492,5206, 638,1169,1825,2136,1752,4014, 648, 926,1021, # 1824\n-1324,4595, 520,4596, 997, 847,1007, 892,4597,3843,2267,1872,3713,2405,1785,4598, # 1840\n-1953,2957,3103,3222,1728,4265,2044,3714,4599,2008,1701,3156,1551,  30,2268,4266, # 1856\n-5207,2027,4600,3589,5208, 501,5209,4267, 594,3478,2166,1822,3590,3479,3591,3223, # 1872\n- 829,2839,4268,5210,1680,3157,1225,4269,5211,3295,4601,4270,3158,2341,5212,4602, # 1888\n-4271,5213,4015,4016,5214,1848,2388,2606,3367,5215,4603, 374,4017, 652,4272,4273, # 1904\n- 375,1140, 798,5216,5217,5218,2366,4604,2269, 546,1659, 138,3051,2450,4605,5219, # 1920\n-2254, 612,1849, 910, 796,3844,1740,1371, 825,3845,3846,5220,2920,2562,5221, 692, # 1936\n- 444,3052,2634, 801,4606,4274,5222,1491, 244,1053,3053,4275,4276, 340,5223,4018, # 1952\n-1041,3005, 293,1168,  87,1357,5224,1539, 959,5225,2240, 721, 694,4277,3847, 219, # 1968\n-1478, 644,1417,3368,2666,1413,1401,1335,1389,4019,5226,5227,3006,2367,3159,1826, # 1984\n- 730,1515, 184,2840,  66,4607,5228,1660,2958, 246,3369, 378,1457, 226,3480, 975, # 2000\n-4020,2959,1264,3592, 674, 696,5229, 163,5230,1141,2422,2167, 713,3593,3370,4608, # 2016\n-4021,5231,5232,1186,  15,5233,1079,1070,5234,1522,3224,3594, 276,1050,2725, 758, # 2032\n-1126, 653,2960,3296,5235,2342, 889,3595,4022,3104,3007, 903,1250,4609,4023,3481, # 2048\n-3596,1342,1681,1718, 766,3297, 286,  89,2961,3715,5236,1713,5237,2607,3371,3008, # 2064\n-5238,2962,2219,3225,2880,5239,4610,2505,2533, 181, 387,1075,4024, 731,2190,3372, # 2080\n-5240,3298, 310, 313,3482,2304, 770,4278,  54,3054, 189,4611,3105,3848,4025,5241, # 2096\n-1230,1617,1850, 355,3597,4279,4612,3373, 111,4280,3716,1350,3160,3483,3055,4281, # 2112\n-2150,3299,3598,5242,2797,4026,4027,3009, 722,2009,5243,1071, 247,1207,2343,2478, # 2128\n-1378,4613,2010, 864,1437,1214,4614, 373,3849,1142,2220, 667,4615, 442,2763,2563, # 2144\n-3850,4028,1969,4282,3300,1840, 837, 170,1107, 934,1336,1883,5244,5245,2119,4283, # 2160\n-2841, 743,1569,5246,4616,4284, 582,2389,1418,3484,5247,1803,5248, 357,1395,1729, # 2176\n-3717,3301,2423,1564,2241,5249,3106,3851,1633,4617,1114,2086,4285,1532,5250, 482, # 2192\n-2451,4618,5251,5252,1492, 833,1466,5253,2726,3599,1641,2842,5254,1526,1272,3718, # 2208\n-4286,1686,1795, 416,2564,1903,1954,1804,5255,3852,2798,3853,1159,2321,5256,2881, # 2224\n-4619,1610,1584,3056,2424,2764, 443,3302,1163,3161,5257,5258,4029,5259,4287,2506, # 2240\n-3057,4620,4030,3162,2104,1647,3600,2011,1873,4288,5260,4289, 431,3485,5261, 250, # 2256\n-  97,  81,4290,5262,1648,1851,1558, 160, 848,5263, 866, 740,1694,5264,2204,2843, # 2272\n-3226,4291,4621,3719,1687, 950,2479, 426, 469,3227,3720,3721,4031,5265,5266,1188, # 2288\n- 424,1996, 861,3601,4292,3854,2205,2694, 168,1235,3602,4293,5267,2087,1674,4622, # 2304\n-3374,3303, 220,2565,1009,5268,3855, 670,3010, 332,1208, 717,5269,5270,3603,2452, # 2320\n-4032,3375,5271, 513,5272,1209,2882,3376,3163,4623,1080,5273,5274,5275,5276,2534, # 2336\n-3722,3604, 815,1587,4033,4034,5277,3605,3486,3856,1254,4624,1328,3058,1390,4035, # 2352\n-1741,4036,3857,4037,5278, 236,3858,2453,3304,5279,5280,3723,3859,1273,3860,4625, # 2368\n-5281, 308,5282,4626, 245,4627,1852,2480,1307,2583, 430, 715,2137,2454,5283, 270, # 2384\n- 199,2883,4038,5284,3606,2727,1753, 761,1754, 725,1661,1841,4628,3487,3724,5285, # 2400\n-5286, 587,  14,3305, 227,2608, 326, 480,2270, 943,2765,3607, 291, 650,1884,5287, # 2416\n-1702,1226, 102,1547,  62,3488, 904,4629,3489,1164,4294,5288,5289,1224,1548,2766, # 2432\n- 391, 498,1493,5290,1386,1419,5291,2056,1177,4630, 813, 880,1081,2368, 566,1145, # 2448\n-4631,2291,1001,1035,2566,2609,2242, 394,1286,5292,5293,2069,5294,  86,1494,1730, # 2464\n-4039, 491,1588, 745, 897,2963, 843,3377,4040,2767,2884,3306,1768, 998,2221,2070, # 2480\n- 397,1827,1195,1970,3725,3011,3378, 284,5295,3861,2507,2138,2120,1904,5296,4041, # 2496\n-2151,4042,4295,1036,3490,1905, 114,2567,4296, 209,1527,5297,5298,2964,2844,2635, # 2512\n-2390,2728,3164, 812,2568,5299,3307,5300,1559, 737,1885,3726,1210, 885,  28,2695, # 2528\n-3608,3862,5301,4297,1004,1780,4632,5302, 346,1982,2222,2696,4633,3863,1742, 797, # 2544\n-1642,4043,1934,1072,1384,2152, 896,4044,3308,3727,3228,2885,3609,5303,2569,1959, # 2560\n-4634,2455,1786,5304,5305,5306,4045,4298,1005,1308,3728,4299,2729,4635,4636,1528, # 2576\n-2610, 161,1178,4300,1983, 987,4637,1101,4301, 631,4046,1157,3229,2425,1343,1241, # 2592\n-1016,2243,2570, 372, 877,2344,2508,1160, 555,1935, 911,4047,5307, 466,1170, 169, # 2608\n-1051,2921,2697,3729,2481,3012,1182,2012,2571,1251,2636,5308, 992,2345,3491,1540, # 2624\n-2730,1201,2071,2406,1997,2482,5309,4638, 528,1923,2191,1503,1874,1570,2369,3379, # 2640\n-3309,5310, 557,1073,5311,1828,3492,2088,2271,3165,3059,3107, 767,3108,2799,4639, # 2656\n-1006,4302,4640,2346,1267,2179,3730,3230, 778,4048,3231,2731,1597,2667,5312,4641, # 2672\n-5313,3493,5314,5315,5316,3310,2698,1433,3311, 131,  95,1504,4049, 723,4303,3166, # 2688\n-1842,3610,2768,2192,4050,2028,2105,3731,5317,3013,4051,1218,5318,3380,3232,4052, # 2704\n-4304,2584, 248,1634,3864, 912,5319,2845,3732,3060,3865, 654,  53,5320,3014,5321, # 2720\n-1688,4642, 777,3494,1032,4053,1425,5322, 191, 820,2121,2846, 971,4643, 931,3233, # 2736\n- 135, 664, 783,3866,1998, 772,2922,1936,4054,3867,4644,2923,3234, 282,2732, 640, # 2752\n-1372,3495,1127, 922, 325,3381,5323,5324, 711,2045,5325,5326,4055,2223,2800,1937, # 2768\n-4056,3382,2224,2255,3868,2305,5327,4645,3869,1258,3312,4057,3235,2139,2965,4058, # 2784\n-4059,5328,2225, 258,3236,4646, 101,1227,5329,3313,1755,5330,1391,3314,5331,2924, # 2800\n-2057, 893,5332,5333,5334,1402,4305,2347,5335,5336,3237,3611,5337,5338, 878,1325, # 2816\n-1781,2801,4647, 259,1385,2585, 744,1183,2272,4648,5339,4060,2509,5340, 684,1024, # 2832\n-4306,5341, 472,3612,3496,1165,3315,4061,4062, 322,2153, 881, 455,1695,1152,1340, # 2848\n- 660, 554,2154,4649,1058,4650,4307, 830,1065,3383,4063,4651,1924,5342,1703,1919, # 2864\n-5343, 932,2273, 122,5344,4652, 947, 677,5345,3870,2637, 297,1906,1925,2274,4653, # 2880\n-2322,3316,5346,5347,4308,5348,4309,  84,4310, 112, 989,5349, 547,1059,4064, 701, # 2896\n-3613,1019,5350,4311,5351,3497, 942, 639, 457,2306,2456, 993,2966, 407, 851, 494, # 2912\n-4654,3384, 927,5352,1237,5353,2426,3385, 573,4312, 680, 921,2925,1279,1875, 285, # 2928\n- 790,1448,1984, 719,2168,5354,5355,4655,4065,4066,1649,5356,1541, 563,5357,1077, # 2944\n-5358,3386,3061,3498, 511,3015,4067,4068,3733,4069,1268,2572,3387,3238,4656,4657, # 2960\n-5359, 535,1048,1276,1189,2926,2029,3167,1438,1373,2847,2967,1134,2013,5360,4313, # 2976\n-1238,2586,3109,1259,5361, 700,5362,2968,3168,3734,4314,5363,4315,1146,1876,1907, # 2992\n-4658,2611,4070, 781,2427, 132,1589, 203, 147, 273,2802,2407, 898,1787,2155,4071, # 3008\n-4072,5364,3871,2803,5365,5366,4659,4660,5367,3239,5368,1635,3872, 965,5369,1805, # 3024\n-2699,1516,3614,1121,1082,1329,3317,4073,1449,3873,  65,1128,2848,2927,2769,1590, # 3040\n-3874,5370,5371,  12,2668,  45, 976,2587,3169,4661, 517,2535,1013,1037,3240,5372, # 3056\n-3875,2849,5373,3876,5374,3499,5375,2612, 614,1999,2323,3877,3110,2733,2638,5376, # 3072\n-2588,4316, 599,1269,5377,1811,3735,5378,2700,3111, 759,1060, 489,1806,3388,3318, # 3088\n-1358,5379,5380,2391,1387,1215,2639,2256, 490,5381,5382,4317,1759,2392,2348,5383, # 3104\n-4662,3878,1908,4074,2640,1807,3241,4663,3500,3319,2770,2349, 874,5384,5385,3501, # 3120\n-3736,1859,  91,2928,3737,3062,3879,4664,5386,3170,4075,2669,5387,3502,1202,1403, # 3136\n-3880,2969,2536,1517,2510,4665,3503,2511,5388,4666,5389,2701,1886,1495,1731,4076, # 3152\n-2370,4667,5390,2030,5391,5392,4077,2702,1216, 237,2589,4318,2324,4078,3881,4668, # 3168\n-4669,2703,3615,3504, 445,4670,5393,5394,5395,5396,2771,  61,4079,3738,1823,4080, # 3184\n-5397, 687,2046, 935, 925, 405,2670, 703,1096,1860,2734,4671,4081,1877,1367,2704, # 3200\n-3389, 918,2106,1782,2483, 334,3320,1611,1093,4672, 564,3171,3505,3739,3390, 945, # 3216\n-2641,2058,4673,5398,1926, 872,4319,5399,3506,2705,3112, 349,4320,3740,4082,4674, # 3232\n-3882,4321,3741,2156,4083,4675,4676,4322,4677,2408,2047, 782,4084, 400, 251,4323, # 3248\n-1624,5400,5401, 277,3742, 299,1265, 476,1191,3883,2122,4324,4325,1109, 205,5402, # 3264\n-2590,1000,2157,3616,1861,5403,5404,5405,4678,5406,4679,2573, 107,2484,2158,4085, # 3280\n-3507,3172,5407,1533, 541,1301, 158, 753,4326,2886,3617,5408,1696, 370,1088,4327, # 3296\n-4680,3618, 579, 327, 440, 162,2244, 269,1938,1374,3508, 968,3063,  56,1396,3113, # 3312\n-2107,3321,3391,5409,1927,2159,4681,3016,5410,3619,5411,5412,3743,4682,2485,5413, # 3328\n-2804,5414,1650,4683,5415,2613,5416,5417,4086,2671,3392,1149,3393,4087,3884,4088, # 3344\n-5418,1076,  49,5419, 951,3242,3322,3323, 450,2850, 920,5420,1812,2805,2371,4328, # 3360\n-1909,1138,2372,3885,3509,5421,3243,4684,1910,1147,1518,2428,4685,3886,5422,4686, # 3376\n-2393,2614, 260,1796,3244,5423,5424,3887,3324, 708,5425,3620,1704,5426,3621,1351, # 3392\n-1618,3394,3017,1887, 944,4329,3395,4330,3064,3396,4331,5427,3744, 422, 413,1714, # 3408\n-3325, 500,2059,2350,4332,2486,5428,1344,1911, 954,5429,1668,5430,5431,4089,2409, # 3424\n-4333,3622,3888,4334,5432,2307,1318,2512,3114, 133,3115,2887,4687, 629,  31,2851, # 3440\n-2706,3889,4688, 850, 949,4689,4090,2970,1732,2089,4335,1496,1853,5433,4091, 620, # 3456\n-3245, 981,1242,3745,3397,1619,3746,1643,3326,2140,2457,1971,1719,3510,2169,5434, # 3472\n-3246,5435,5436,3398,1829,5437,1277,4690,1565,2048,5438,1636,3623,3116,5439, 869, # 3488\n-2852, 655,3890,3891,3117,4092,3018,3892,1310,3624,4691,5440,5441,5442,1733, 558, # 3504\n-4692,3747, 335,1549,3065,1756,4336,3748,1946,3511,1830,1291,1192, 470,2735,2108, # 3520\n-2806, 913,1054,4093,5443,1027,5444,3066,4094,4693, 982,2672,3399,3173,3512,3247, # 3536\n-3248,1947,2807,5445, 571,4694,5446,1831,5447,3625,2591,1523,2429,5448,2090, 984, # 3552\n-4695,3749,1960,5449,3750, 852, 923,2808,3513,3751, 969,1519, 999,2049,2325,1705, # 3568\n-5450,3118, 615,1662, 151, 597,4095,2410,2326,1049, 275,4696,3752,4337, 568,3753, # 3584\n-3626,2487,4338,3754,5451,2430,2275, 409,3249,5452,1566,2888,3514,1002, 769,2853, # 3600\n- 194,2091,3174,3755,2226,3327,4339, 628,1505,5453,5454,1763,2180,3019,4096, 521, # 3616\n-1161,2592,1788,2206,2411,4697,4097,1625,4340,4341, 412,  42,3119, 464,5455,2642, # 3632\n-4698,3400,1760,1571,2889,3515,2537,1219,2207,3893,2643,2141,2373,4699,4700,3328, # 3648\n-1651,3401,3627,5456,5457,3628,2488,3516,5458,3756,5459,5460,2276,2092, 460,5461, # 3664\n-4701,5462,3020, 962, 588,3629, 289,3250,2644,1116,  52,5463,3067,1797,5464,5465, # 3680\n-5466,1467,5467,1598,1143,3757,4342,1985,1734,1067,4702,1280,3402, 465,4703,1572, # 3696\n- 510,5468,1928,2245,1813,1644,3630,5469,4704,3758,5470,5471,2673,1573,1534,5472, # 3712\n-5473, 536,1808,1761,3517,3894,3175,2645,5474,5475,5476,4705,3518,2929,1912,2809, # 3728\n-5477,3329,1122, 377,3251,5478, 360,5479,5480,4343,1529, 551,5481,2060,3759,1769, # 3744\n-2431,5482,2930,4344,3330,3120,2327,2109,2031,4706,1404, 136,1468,1479, 672,1171, # 3760\n-3252,2308, 271,3176,5483,2772,5484,2050, 678,2736, 865,1948,4707,5485,2014,4098, # 3776\n-2971,5486,2737,2227,1397,3068,3760,4708,4709,1735,2931,3403,3631,5487,3895, 509, # 3792\n-2854,2458,2890,3896,5488,5489,3177,3178,4710,4345,2538,4711,2309,1166,1010, 552, # 3808\n- 681,1888,5490,5491,2972,2973,4099,1287,1596,1862,3179, 358, 453, 736, 175, 478, # 3824\n-1117, 905,1167,1097,5492,1854,1530,5493,1706,5494,2181,3519,2292,3761,3520,3632, # 3840\n-4346,2093,4347,5495,3404,1193,2489,4348,1458,2193,2208,1863,1889,1421,3331,2932, # 3856\n-3069,2182,3521, 595,2123,5496,4100,5497,5498,4349,1707,2646, 223,3762,1359, 751, # 3872\n-3121, 183,3522,5499,2810,3021, 419,2374, 633, 704,3897,2394, 241,5500,5501,5502, # 3888\n- 838,3022,3763,2277,2773,2459,3898,1939,2051,4101,1309,3122,2246,1181,5503,1136, # 3904\n-2209,3899,2375,1446,4350,2310,4712,5504,5505,4351,1055,2615, 484,3764,5506,4102, # 3920\n- 625,4352,2278,3405,1499,4353,4103,5507,4104,4354,3253,2279,2280,3523,5508,5509, # 3936\n-2774, 808,2616,3765,3406,4105,4355,3123,2539, 526,3407,3900,4356, 955,5510,1620, # 3952\n-4357,2647,2432,5511,1429,3766,1669,1832, 994, 928,5512,3633,1260,5513,5514,5515, # 3968\n-1949,2293, 741,2933,1626,4358,2738,2460, 867,1184, 362,3408,1392,5516,5517,4106, # 3984\n-4359,1770,1736,3254,2934,4713,4714,1929,2707,1459,1158,5518,3070,3409,2891,1292, # 4000\n-1930,2513,2855,3767,1986,1187,2072,2015,2617,4360,5519,2574,2514,2170,3768,2490, # 4016\n-3332,5520,3769,4715,5521,5522, 666,1003,3023,1022,3634,4361,5523,4716,1814,2257, # 4032\n- 574,3901,1603, 295,1535, 705,3902,4362, 283, 858, 417,5524,5525,3255,4717,4718, # 4048\n-3071,1220,1890,1046,2281,2461,4107,1393,1599, 689,2575, 388,4363,5526,2491, 802, # 4064\n-5527,2811,3903,2061,1405,2258,5528,4719,3904,2110,1052,1345,3256,1585,5529, 809, # 4080\n-5530,5531,5532, 575,2739,3524, 956,1552,1469,1144,2328,5533,2329,1560,2462,3635, # 4096\n-3257,4108, 616,2210,4364,3180,2183,2294,5534,1833,5535,3525,4720,5536,1319,3770, # 4112\n-3771,1211,3636,1023,3258,1293,2812,5537,5538,5539,3905, 607,2311,3906, 762,2892, # 4128\n-1439,4365,1360,4721,1485,3072,5540,4722,1038,4366,1450,2062,2648,4367,1379,4723, # 4144\n-2593,5541,5542,4368,1352,1414,2330,2935,1172,5543,5544,3907,3908,4724,1798,1451, # 4160\n-5545,5546,5547,5548,2936,4109,4110,2492,2351, 411,4111,4112,3637,3333,3124,4725, # 4176\n-1561,2674,1452,4113,1375,5549,5550,  47,2974, 316,5551,1406,1591,2937,3181,5552, # 4192\n-1025,2142,3125,3182, 354,2740, 884,2228,4369,2412, 508,3772, 726,3638, 996,2433, # 4208\n-3639, 729,5553, 392,2194,1453,4114,4726,3773,5554,5555,2463,3640,2618,1675,2813, # 4224\n- 919,2352,2975,2353,1270,4727,4115,  73,5556,5557, 647,5558,3259,2856,2259,1550, # 4240\n-1346,3024,5559,1332, 883,3526,5560,5561,5562,5563,3334,2775,5564,1212, 831,1347, # 4256\n-4370,4728,2331,3909,1864,3073, 720,3910,4729,4730,3911,5565,4371,5566,5567,4731, # 4272\n-5568,5569,1799,4732,3774,2619,4733,3641,1645,2376,4734,5570,2938, 669,2211,2675, # 4288\n-2434,5571,2893,5572,5573,1028,3260,5574,4372,2413,5575,2260,1353,5576,5577,4735, # 4304\n-3183, 518,5578,4116,5579,4373,1961,5580,2143,4374,5581,5582,3025,2354,2355,3912, # 4320\n- 516,1834,1454,4117,2708,4375,4736,2229,2620,1972,1129,3642,5583,2776,5584,2976, # 4336\n-1422, 577,1470,3026,1524,3410,5585,5586, 432,4376,3074,3527,5587,2594,1455,2515, # 4352\n-2230,1973,1175,5588,1020,2741,4118,3528,4737,5589,2742,5590,1743,1361,3075,3529, # 4368\n-2649,4119,4377,4738,2295, 895, 924,4378,2171, 331,2247,3076, 166,1627,3077,1098, # 4384\n-5591,1232,2894,2231,3411,4739, 657, 403,1196,2377, 542,3775,3412,1600,4379,3530, # 4400\n-5592,4740,2777,3261, 576, 530,1362,4741,4742,2540,2676,3776,4120,5593, 842,3913, # 4416\n-5594,2814,2032,1014,4121, 213,2709,3413, 665, 621,4380,5595,3777,2939,2435,5596, # 4432\n-2436,3335,3643,3414,4743,4381,2541,4382,4744,3644,1682,4383,3531,1380,5597, 724, # 4448\n-2282, 600,1670,5598,1337,1233,4745,3126,2248,5599,1621,4746,5600, 651,4384,5601, # 4464\n-1612,4385,2621,5602,2857,5603,2743,2312,3078,5604, 716,2464,3079, 174,1255,2710, # 4480\n-4122,3645, 548,1320,1398, 728,4123,1574,5605,1891,1197,3080,4124,5606,3081,3082, # 4496\n-3778,3646,3779, 747,5607, 635,4386,4747,5608,5609,5610,4387,5611,5612,4748,5613, # 4512\n-3415,4749,2437, 451,5614,3780,2542,2073,4388,2744,4389,4125,5615,1764,4750,5616, # 4528\n-4390, 350,4751,2283,2395,2493,5617,4391,4126,2249,1434,4127, 488,4752, 458,4392, # 4544\n-4128,3781, 771,1330,2396,3914,2576,3184,2160,2414,1553,2677,3185,4393,5618,2494, # 4560\n-2895,2622,1720,2711,4394,3416,4753,5619,2543,4395,5620,3262,4396,2778,5621,2016, # 4576\n-2745,5622,1155,1017,3782,3915,5623,3336,2313, 201,1865,4397,1430,5624,4129,5625, # 4592\n-5626,5627,5628,5629,4398,1604,5630, 414,1866, 371,2595,4754,4755,3532,2017,3127, # 4608\n-4756,1708, 960,4399, 887, 389,2172,1536,1663,1721,5631,2232,4130,2356,2940,1580, # 4624\n-5632,5633,1744,4757,2544,4758,4759,5634,4760,5635,2074,5636,4761,3647,3417,2896, # 4640\n-4400,5637,4401,2650,3418,2815, 673,2712,2465, 709,3533,4131,3648,4402,5638,1148, # 4656\n- 502, 634,5639,5640,1204,4762,3649,1575,4763,2623,3783,5641,3784,3128, 948,3263, # 4672\n- 121,1745,3916,1110,5642,4403,3083,2516,3027,4132,3785,1151,1771,3917,1488,4133, # 4688\n-1987,5643,2438,3534,5644,5645,2094,5646,4404,3918,1213,1407,2816, 531,2746,2545, # 4704\n-3264,1011,1537,4764,2779,4405,3129,1061,5647,3786,3787,1867,2897,5648,2018, 120, # 4720\n-4406,4407,2063,3650,3265,2314,3919,2678,3419,1955,4765,4134,5649,3535,1047,2713, # 4736\n-1266,5650,1368,4766,2858, 649,3420,3920,2546,2747,1102,2859,2679,5651,5652,2000, # 4752\n-5653,1111,3651,2977,5654,2495,3921,3652,2817,1855,3421,3788,5655,5656,3422,2415, # 4768\n-2898,3337,3266,3653,5657,2577,5658,3654,2818,4135,1460, 856,5659,3655,5660,2899, # 4784\n-2978,5661,2900,3922,5662,4408, 632,2517, 875,3923,1697,3924,2296,5663,5664,4767, # 4800\n-3028,1239, 580,4768,4409,5665, 914, 936,2075,1190,4136,1039,2124,5666,5667,5668, # 4816\n-5669,3423,1473,5670,1354,4410,3925,4769,2173,3084,4137, 915,3338,4411,4412,3339, # 4832\n-1605,1835,5671,2748, 398,3656,4413,3926,4138, 328,1913,2860,4139,3927,1331,4414, # 4848\n-3029, 937,4415,5672,3657,4140,4141,3424,2161,4770,3425, 524, 742, 538,3085,1012, # 4864\n-5673,5674,3928,2466,5675, 658,1103, 225,3929,5676,5677,4771,5678,4772,5679,3267, # 4880\n-1243,5680,4142, 963,2250,4773,5681,2714,3658,3186,5682,5683,2596,2332,5684,4774, # 4896\n-5685,5686,5687,3536, 957,3426,2547,2033,1931,2941,2467, 870,2019,3659,1746,2780, # 4912\n-2781,2439,2468,5688,3930,5689,3789,3130,3790,3537,3427,3791,5690,1179,3086,5691, # 4928\n-3187,2378,4416,3792,2548,3188,3131,2749,4143,5692,3428,1556,2549,2297, 977,2901, # 4944\n-2034,4144,1205,3429,5693,1765,3430,3189,2125,1271, 714,1689,4775,3538,5694,2333, # 4960\n-3931, 533,4417,3660,2184, 617,5695,2469,3340,3539,2315,5696,5697,3190,5698,5699, # 4976\n-3932,1988, 618, 427,2651,3540,3431,5700,5701,1244,1690,5702,2819,4418,4776,5703, # 4992\n-3541,4777,5704,2284,1576, 473,3661,4419,3432, 972,5705,3662,5706,3087,5707,5708, # 5008\n-4778,4779,5709,3793,4145,4146,5710, 153,4780, 356,5711,1892,2902,4420,2144, 408, # 5024\n- 803,2357,5712,3933,5713,4421,1646,2578,2518,4781,4782,3934,5714,3935,4422,5715, # 5040\n-2416,3433, 752,5716,5717,1962,3341,2979,5718, 746,3030,2470,4783,4423,3794, 698, # 5056\n-4784,1893,4424,3663,2550,4785,3664,3936,5719,3191,3434,5720,1824,1302,4147,2715, # 5072\n-3937,1974,4425,5721,4426,3192, 823,1303,1288,1236,2861,3542,4148,3435, 774,3938, # 5088\n-5722,1581,4786,1304,2862,3939,4787,5723,2440,2162,1083,3268,4427,4149,4428, 344, # 5104\n-1173, 288,2316, 454,1683,5724,5725,1461,4788,4150,2597,5726,5727,4789, 985, 894, # 5120\n-5728,3436,3193,5729,1914,2942,3795,1989,5730,2111,1975,5731,4151,5732,2579,1194, # 5136\n- 425,5733,4790,3194,1245,3796,4429,5734,5735,2863,5736, 636,4791,1856,3940, 760, # 5152\n-1800,5737,4430,2212,1508,4792,4152,1894,1684,2298,5738,5739,4793,4431,4432,2213, # 5168\n- 479,5740,5741, 832,5742,4153,2496,5743,2980,2497,3797, 990,3132, 627,1815,2652, # 5184\n-4433,1582,4434,2126,2112,3543,4794,5744, 799,4435,3195,5745,4795,2113,1737,3031, # 5200\n-1018, 543, 754,4436,3342,1676,4796,4797,4154,4798,1489,5746,3544,5747,2624,2903, # 5216\n-4155,5748,5749,2981,5750,5751,5752,5753,3196,4799,4800,2185,1722,5754,3269,3270, # 5232\n-1843,3665,1715, 481, 365,1976,1857,5755,5756,1963,2498,4801,5757,2127,3666,3271, # 5248\n- 433,1895,2064,2076,5758, 602,2750,5759,5760,5761,5762,5763,3032,1628,3437,5764, # 5264\n-3197,4802,4156,2904,4803,2519,5765,2551,2782,5766,5767,5768,3343,4804,2905,5769, # 5280\n-4805,5770,2864,4806,4807,1221,2982,4157,2520,5771,5772,5773,1868,1990,5774,5775, # 5296\n-5776,1896,5777,5778,4808,1897,4158, 318,5779,2095,4159,4437,5780,5781, 485,5782, # 5312\n- 938,3941, 553,2680, 116,5783,3942,3667,5784,3545,2681,2783,3438,3344,2820,5785, # 5328\n-3668,2943,4160,1747,2944,2983,5786,5787, 207,5788,4809,5789,4810,2521,5790,3033, # 5344\n- 890,3669,3943,5791,1878,3798,3439,5792,2186,2358,3440,1652,5793,5794,5795, 941, # 5360\n-2299, 208,3546,4161,2020, 330,4438,3944,2906,2499,3799,4439,4811,5796,5797,5798, # 5376\n-)\n-\n\n@@ -1,47 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import Big5DistributionAnalysis\n-from .mbcssm import BIG5_SM_MODEL\n-\n-\n-class Big5Prober(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(Big5Prober, self).__init__()\n-        self.coding_sm = CodingStateMachine(BIG5_SM_MODEL)\n-        self.distribution_analyzer = Big5DistributionAnalysis()\n-        self.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"Big5\"\n-\n-    @property\n-    def language(self):\n-        return \"Chinese\"\n\n@@ -1,233 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .euctwfreq import (EUCTW_CHAR_TO_FREQ_ORDER, EUCTW_TABLE_SIZE,\n-                        EUCTW_TYPICAL_DISTRIBUTION_RATIO)\n-from .euckrfreq import (EUCKR_CHAR_TO_FREQ_ORDER, EUCKR_TABLE_SIZE,\n-                        EUCKR_TYPICAL_DISTRIBUTION_RATIO)\n-from .gb2312freq import (GB2312_CHAR_TO_FREQ_ORDER, GB2312_TABLE_SIZE,\n-                         GB2312_TYPICAL_DISTRIBUTION_RATIO)\n-from .big5freq import (BIG5_CHAR_TO_FREQ_ORDER, BIG5_TABLE_SIZE,\n-                       BIG5_TYPICAL_DISTRIBUTION_RATIO)\n-from .jisfreq import (JIS_CHAR_TO_FREQ_ORDER, JIS_TABLE_SIZE,\n-                      JIS_TYPICAL_DISTRIBUTION_RATIO)\n-\n-\n-class CharDistributionAnalysis(object):\n-    ENOUGH_DATA_THRESHOLD = 1024\n-    SURE_YES = 0.99\n-    SURE_NO = 0.01\n-    MINIMUM_DATA_THRESHOLD = 3\n-\n-    def __init__(self):\n-        # Mapping table to get frequency order from char order (get from\n-        # GetOrder())\n-        self._char_to_freq_order = None\n-        self._table_size = None  # Size of above table\n-        # This is a constant value which varies from language to language,\n-        # used in calculating confidence.  See\n-        # http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html\n-        # for further detail.\n-        self.typical_distribution_ratio = None\n-        self._done = None\n-        self._total_chars = None\n-        self._freq_chars = None\n-        self.reset()\n-\n-    def reset(self):\n-        \"\"\"reset analyser, clear any state\"\"\"\n-        # If this flag is set to True, detection is done and conclusion has\n-        # been made\n-        self._done = False\n-        self._total_chars = 0  # Total characters encountered\n-        # The number of characters whose frequency order is less than 512\n-        self._freq_chars = 0\n-\n-    def feed(self, char, char_len):\n-        \"\"\"feed a character with known length\"\"\"\n-        if char_len == 2:\n-            # we only care about 2-bytes character in our distribution analysis\n-            order = self.get_order(char)\n-        else:\n-            order = -1\n-        if order >= 0:\n-            self._total_chars += 1\n-            # order is valid\n-            if order < self._table_size:\n-                if 512 > self._char_to_freq_order[order]:\n-                    self._freq_chars += 1\n-\n-    def get_confidence(self):\n-        \"\"\"return confidence based on existing data\"\"\"\n-        # if we didn't receive any character in our consideration range,\n-        # return negative answer\n-        if self._total_chars <= 0 or self._freq_chars <= self.MINIMUM_DATA_THRESHOLD:\n-            return self.SURE_NO\n-\n-        if self._total_chars != self._freq_chars:\n-            r = (self._freq_chars / ((self._total_chars - self._freq_chars)\n-                 * self.typical_distribution_ratio))\n-            if r < self.SURE_YES:\n-                return r\n-\n-        # normalize confidence (we don't want to be 100% sure)\n-        return self.SURE_YES\n-\n-    def got_enough_data(self):\n-        # It is not necessary to receive all data to draw conclusion.\n-        # For charset detection, certain amount of data is enough\n-        return self._total_chars > self.ENOUGH_DATA_THRESHOLD\n-\n-    def get_order(self, byte_str):\n-        # We do not handle characters based on the original encoding string,\n-        # but convert this encoding string to a number, here called order.\n-        # This allows multiple encodings of a language to share one frequency\n-        # table.\n-        return -1\n-\n-\n-class EUCTWDistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(EUCTWDistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = EUCTW_CHAR_TO_FREQ_ORDER\n-        self._table_size = EUCTW_TABLE_SIZE\n-        self.typical_distribution_ratio = EUCTW_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for euc-TW encoding, we are interested\n-        #   first  byte range: 0xc4 -- 0xfe\n-        #   second byte range: 0xa1 -- 0xfe\n-        # no validation needed here. State machine has done that\n-        first_char = byte_str[0]\n-        if first_char >= 0xC4:\n-            return 94 * (first_char - 0xC4) + byte_str[1] - 0xA1\n-        else:\n-            return -1\n-\n-\n-class EUCKRDistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(EUCKRDistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = EUCKR_CHAR_TO_FREQ_ORDER\n-        self._table_size = EUCKR_TABLE_SIZE\n-        self.typical_distribution_ratio = EUCKR_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for euc-KR encoding, we are interested\n-        #   first  byte range: 0xb0 -- 0xfe\n-        #   second byte range: 0xa1 -- 0xfe\n-        # no validation needed here. State machine has done that\n-        first_char = byte_str[0]\n-        if first_char >= 0xB0:\n-            return 94 * (first_char - 0xB0) + byte_str[1] - 0xA1\n-        else:\n-            return -1\n-\n-\n-class GB2312DistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(GB2312DistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = GB2312_CHAR_TO_FREQ_ORDER\n-        self._table_size = GB2312_TABLE_SIZE\n-        self.typical_distribution_ratio = GB2312_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for GB2312 encoding, we are interested\n-        #  first  byte range: 0xb0 -- 0xfe\n-        #  second byte range: 0xa1 -- 0xfe\n-        # no validation needed here. State machine has done that\n-        first_char, second_char = byte_str[0], byte_str[1]\n-        if (first_char >= 0xB0) and (second_char >= 0xA1):\n-            return 94 * (first_char - 0xB0) + second_char - 0xA1\n-        else:\n-            return -1\n-\n-\n-class Big5DistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(Big5DistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = BIG5_CHAR_TO_FREQ_ORDER\n-        self._table_size = BIG5_TABLE_SIZE\n-        self.typical_distribution_ratio = BIG5_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for big5 encoding, we are interested\n-        #   first  byte range: 0xa4 -- 0xfe\n-        #   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe\n-        # no validation needed here. State machine has done that\n-        first_char, second_char = byte_str[0], byte_str[1]\n-        if first_char >= 0xA4:\n-            if second_char >= 0xA1:\n-                return 157 * (first_char - 0xA4) + second_char - 0xA1 + 63\n-            else:\n-                return 157 * (first_char - 0xA4) + second_char - 0x40\n-        else:\n-            return -1\n-\n-\n-class SJISDistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(SJISDistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = JIS_CHAR_TO_FREQ_ORDER\n-        self._table_size = JIS_TABLE_SIZE\n-        self.typical_distribution_ratio = JIS_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for sjis encoding, we are interested\n-        #   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xfe\n-        #   second byte range: 0x40 -- 0x7e,  0x81 -- oxfe\n-        # no validation needed here. State machine has done that\n-        first_char, second_char = byte_str[0], byte_str[1]\n-        if (first_char >= 0x81) and (first_char <= 0x9F):\n-            order = 188 * (first_char - 0x81)\n-        elif (first_char >= 0xE0) and (first_char <= 0xEF):\n-            order = 188 * (first_char - 0xE0 + 31)\n-        else:\n-            return -1\n-        order = order + second_char - 0x40\n-        if second_char > 0x7F:\n-            order = -1\n-        return order\n-\n-\n-class EUCJPDistributionAnalysis(CharDistributionAnalysis):\n-    def __init__(self):\n-        super(EUCJPDistributionAnalysis, self).__init__()\n-        self._char_to_freq_order = JIS_CHAR_TO_FREQ_ORDER\n-        self._table_size = JIS_TABLE_SIZE\n-        self.typical_distribution_ratio = JIS_TYPICAL_DISTRIBUTION_RATIO\n-\n-    def get_order(self, byte_str):\n-        # for euc-JP encoding, we are interested\n-        #   first  byte range: 0xa0 -- 0xfe\n-        #   second byte range: 0xa1 -- 0xfe\n-        # no validation needed here. State machine has done that\n-        char = byte_str[0]\n-        if char >= 0xA0:\n-            return 94 * (char - 0xA1) + byte_str[1] - 0xa1\n-        else:\n-            return -1\n\n@@ -1,106 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .enums import ProbingState\n-from .charsetprober import CharSetProber\n-\n-\n-class CharSetGroupProber(CharSetProber):\n-    def __init__(self, lang_filter=None):\n-        super(CharSetGroupProber, self).__init__(lang_filter=lang_filter)\n-        self._active_num = 0\n-        self.probers = []\n-        self._best_guess_prober = None\n-\n-    def reset(self):\n-        super(CharSetGroupProber, self).reset()\n-        self._active_num = 0\n-        for prober in self.probers:\n-            if prober:\n-                prober.reset()\n-                prober.active = True\n-                self._active_num += 1\n-        self._best_guess_prober = None\n-\n-    @property\n-    def charset_name(self):\n-        if not self._best_guess_prober:\n-            self.get_confidence()\n-            if not self._best_guess_prober:\n-                return None\n-        return self._best_guess_prober.charset_name\n-\n-    @property\n-    def language(self):\n-        if not self._best_guess_prober:\n-            self.get_confidence()\n-            if not self._best_guess_prober:\n-                return None\n-        return self._best_guess_prober.language\n-\n-    def feed(self, byte_str):\n-        for prober in self.probers:\n-            if not prober:\n-                continue\n-            if not prober.active:\n-                continue\n-            state = prober.feed(byte_str)\n-            if not state:\n-                continue\n-            if state == ProbingState.FOUND_IT:\n-                self._best_guess_prober = prober\n-                return self.state\n-            elif state == ProbingState.NOT_ME:\n-                prober.active = False\n-                self._active_num -= 1\n-                if self._active_num <= 0:\n-                    self._state = ProbingState.NOT_ME\n-                    return self.state\n-        return self.state\n-\n-    def get_confidence(self):\n-        state = self.state\n-        if state == ProbingState.FOUND_IT:\n-            return 0.99\n-        elif state == ProbingState.NOT_ME:\n-            return 0.01\n-        best_conf = 0.0\n-        self._best_guess_prober = None\n-        for prober in self.probers:\n-            if not prober:\n-                continue\n-            if not prober.active:\n-                self.logger.debug('%s not active', prober.charset_name)\n-                continue\n-            conf = prober.get_confidence()\n-            self.logger.debug('%s %s confidence = %s', prober.charset_name, prober.language, conf)\n-            if best_conf < conf:\n-                best_conf = conf\n-                self._best_guess_prober = prober\n-        if not self._best_guess_prober:\n-            return 0.0\n-        return best_conf\n\n@@ -1,145 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-import logging\n-import re\n-\n-from .enums import ProbingState\n-\n-\n-class CharSetProber(object):\n-\n-    SHORTCUT_THRESHOLD = 0.95\n-\n-    def __init__(self, lang_filter=None):\n-        self._state = None\n-        self.lang_filter = lang_filter\n-        self.logger = logging.getLogger(__name__)\n-\n-    def reset(self):\n-        self._state = ProbingState.DETECTING\n-\n-    @property\n-    def charset_name(self):\n-        return None\n-\n-    def feed(self, buf):\n-        pass\n-\n-    @property\n-    def state(self):\n-        return self._state\n-\n-    def get_confidence(self):\n-        return 0.0\n-\n-    @staticmethod\n-    def filter_high_byte_only(buf):\n-        buf = re.sub(b'([\\x00-\\x7F])+', b' ', buf)\n-        return buf\n-\n-    @staticmethod\n-    def filter_international_words(buf):\n-        \"\"\"\n-        We define three types of bytes:\n-        alphabet: english alphabets [a-zA-Z]\n-        international: international characters [\\x80-\\xFF]\n-        marker: everything else [^a-zA-Z\\x80-\\xFF]\n-\n-        The input buffer can be thought to contain a series of words delimited\n-        by markers. This function works to filter all words that contain at\n-        least one international character. All contiguous sequences of markers\n-        are replaced by a single space ascii character.\n-\n-        This filter applies to all scripts which do not use English characters.\n-        \"\"\"\n-        filtered = bytearray()\n-\n-        # This regex expression filters out only words that have at-least one\n-        # international character. The word may include one marker character at\n-        # the end.\n-        words = re.findall(b'[a-zA-Z]*[\\x80-\\xFF]+[a-zA-Z]*[^a-zA-Z\\x80-\\xFF]?',\n-                           buf)\n-\n-        for word in words:\n-            filtered.extend(word[:-1])\n-\n-            # If the last character in the word is a marker, replace it with a\n-            # space as markers shouldn't affect our analysis (they are used\n-            # similarly across all languages and may thus have similar\n-            # frequencies).\n-            last_char = word[-1:]\n-            if not last_char.isalpha() and last_char < b'\\x80':\n-                last_char = b' '\n-            filtered.extend(last_char)\n-\n-        return filtered\n-\n-    @staticmethod\n-    def filter_with_english_letters(buf):\n-        \"\"\"\n-        Returns a copy of ``buf`` that retains only the sequences of English\n-        alphabet and high byte characters that are not between <> characters.\n-        Also retains English alphabet and high byte characters immediately\n-        before occurrences of >.\n-\n-        This filter can be applied to all scripts which contain both English\n-        characters and extended ASCII characters, but is currently only used by\n-        ``Latin1Prober``.\n-        \"\"\"\n-        filtered = bytearray()\n-        in_tag = False\n-        prev = 0\n-\n-        for curr in range(len(buf)):\n-            # Slice here to get bytes instead of an int with Python 3\n-            buf_char = buf[curr:curr + 1]\n-            # Check if we're coming out of or entering an HTML tag\n-            if buf_char == b'>':\n-                in_tag = False\n-            elif buf_char == b'<':\n-                in_tag = True\n-\n-            # If current character is not extended-ASCII and not alphabetic...\n-            if buf_char < b'\\x80' and not buf_char.isalpha():\n-                # ...and we're not in a tag\n-                if curr > prev and not in_tag:\n-                    # Keep everything after last non-extended-ASCII,\n-                    # non-alphabetic character\n-                    filtered.extend(buf[prev:curr])\n-                    # Output a space to delimit stretch we kept\n-                    filtered.extend(b' ')\n-                prev = curr + 1\n-\n-        # If we're not in a tag...\n-        if not in_tag:\n-            # Keep everything after last non-extended-ASCII, non-alphabetic\n-            # character\n-            filtered.extend(buf[prev:])\n-\n-        return filtered\n\n@@ -1 +0,0 @@\n-\n\n@@ -1,85 +0,0 @@\n-#!/usr/bin/env python\n-\"\"\"\n-Script which takes one or more file paths and reports on their detected\n-encodings\n-\n-Example::\n-\n-    % chardetect somefile someotherfile\n-    somefile: windows-1252 with confidence 0.5\n-    someotherfile: ascii with confidence 1.0\n-\n-If no paths are provided, it takes its input from stdin.\n-\n-\"\"\"\n-\n-from __future__ import absolute_import, print_function, unicode_literals\n-\n-import argparse\n-import sys\n-\n-from chardet import __version__\n-from chardet.compat import PY2\n-from chardet.universaldetector import UniversalDetector\n-\n-\n-def description_of(lines, name='stdin'):\n-    \"\"\"\n-    Return a string describing the probable encoding of a file or\n-    list of strings.\n-\n-    :param lines: The lines to get the encoding of.\n-    :type lines: Iterable of bytes\n-    :param name: Name of file or collection of lines\n-    :type name: str\n-    \"\"\"\n-    u = UniversalDetector()\n-    for line in lines:\n-        line = bytearray(line)\n-        u.feed(line)\n-        # shortcut out of the loop to save reading further - particularly useful if we read a BOM.\n-        if u.done:\n-            break\n-    u.close()\n-    result = u.result\n-    if PY2:\n-        name = name.decode(sys.getfilesystemencoding(), 'ignore')\n-    if result['encoding']:\n-        return '{0}: {1} with confidence {2}'.format(name, result['encoding'],\n-                                                     result['confidence'])\n-    else:\n-        return '{0}: no result'.format(name)\n-\n-\n-def main(argv=None):\n-    \"\"\"\n-    Handles command line arguments and gets things started.\n-\n-    :param argv: List of arguments, as if specified on the command-line.\n-                 If None, ``sys.argv[1:]`` is used instead.\n-    :type argv: list of str\n-    \"\"\"\n-    # Get command line arguments\n-    parser = argparse.ArgumentParser(\n-        description=\"Takes one or more file paths and reports their detected \\\n-                     encodings\")\n-    parser.add_argument('input',\n-                        help='File whose encoding we would like to determine. \\\n-                              (default: stdin)',\n-                        type=argparse.FileType('rb'), nargs='*',\n-                        default=[sys.stdin if PY2 else sys.stdin.buffer])\n-    parser.add_argument('--version', action='version',\n-                        version='%(prog)s {0}'.format(__version__))\n-    args = parser.parse_args(argv)\n-\n-    for f in args.input:\n-        if f.isatty():\n-            print(\"You are running chardetect interactively. Press \" +\n-                  \"CTRL-D twice at the start of a blank line to signal the \" +\n-                  \"end of your input. If you want help, run chardetect \" +\n-                  \"--help\\n\", file=sys.stderr)\n-        print(description_of(f, f.name))\n-\n-\n-if __name__ == '__main__':\n-    main()\n\n@@ -1,88 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-import logging\n-\n-from .enums import MachineState\n-\n-\n-class CodingStateMachine(object):\n-    \"\"\"\n-    A state machine to verify a byte sequence for a particular encoding. For\n-    each byte the detector receives, it will feed that byte to every active\n-    state machine available, one byte at a time. The state machine changes its\n-    state based on its previous state and the byte it receives. There are 3\n-    states in a state machine that are of interest to an auto-detector:\n-\n-    START state: This is the state to start with, or a legal byte sequence\n-                 (i.e. a valid code point) for character has been identified.\n-\n-    ME state:  This indicates that the state machine identified a byte sequence\n-               that is specific to the charset it is designed for and that\n-               there is no other possible encoding which can contain this byte\n-               sequence. This will to lead to an immediate positive answer for\n-               the detector.\n-\n-    ERROR state: This indicates the state machine identified an illegal byte\n-                 sequence for that encoding. This will lead to an immediate\n-                 negative answer for this encoding. Detector will exclude this\n-                 encoding from consideration from here on.\n-    \"\"\"\n-    def __init__(self, sm):\n-        self._model = sm\n-        self._curr_byte_pos = 0\n-        self._curr_char_len = 0\n-        self._curr_state = None\n-        self.logger = logging.getLogger(__name__)\n-        self.reset()\n-\n-    def reset(self):\n-        self._curr_state = MachineState.START\n-\n-    def next_state(self, c):\n-        # for each byte we get its class\n-        # if it is first byte, we also get byte length\n-        byte_class = self._model['class_table'][c]\n-        if self._curr_state == MachineState.START:\n-            self._curr_byte_pos = 0\n-            self._curr_char_len = self._model['char_len_table'][byte_class]\n-        # from byte's class and state_table, we get its next state\n-        curr_state = (self._curr_state * self._model['class_factor']\n-                      + byte_class)\n-        self._curr_state = self._model['state_table'][curr_state]\n-        self._curr_byte_pos += 1\n-        return self._curr_state\n-\n-    def get_current_charlen(self):\n-        return self._curr_char_len\n-\n-    def get_coding_state_machine(self):\n-        return self._model['name']\n-\n-    @property\n-    def language(self):\n-        return self._model['language']\n\n@@ -1,34 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# Contributor(s):\n-#   Dan Blanchard\n-#   Ian Cordasco\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-import sys\n-\n-\n-if sys.version_info < (3, 0):\n-    PY2 = True\n-    PY3 = False\n-    base_str = (str, unicode)\n-    text_type = unicode\n-else:\n-    PY2 = False\n-    PY3 = True\n-    base_str = (bytes, str)\n-    text_type = str\n\n@@ -1,49 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .chardistribution import EUCKRDistributionAnalysis\n-from .codingstatemachine import CodingStateMachine\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .mbcssm import CP949_SM_MODEL\n-\n-\n-class CP949Prober(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(CP949Prober, self).__init__()\n-        self.coding_sm = CodingStateMachine(CP949_SM_MODEL)\n-        # NOTE: CP949 is a superset of EUC-KR, so the distribution should be\n-        #       not different.\n-        self.distribution_analyzer = EUCKRDistributionAnalysis()\n-        self.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"CP949\"\n-\n-    @property\n-    def language(self):\n-        return \"Korean\"\n\n@@ -1,76 +0,0 @@\n-\"\"\"\n-All of the Enums that are used throughout the chardet package.\n-\n-:author: Dan Blanchard (dan.blanchard@gmail.com)\n-\"\"\"\n-\n-\n-class InputState(object):\n-    \"\"\"\n-    This enum represents the different states a universal detector can be in.\n-    \"\"\"\n-    PURE_ASCII = 0\n-    ESC_ASCII = 1\n-    HIGH_BYTE = 2\n-\n-\n-class LanguageFilter(object):\n-    \"\"\"\n-    This enum represents the different language filters we can apply to a\n-    ``UniversalDetector``.\n-    \"\"\"\n-    CHINESE_SIMPLIFIED = 0x01\n-    CHINESE_TRADITIONAL = 0x02\n-    JAPANESE = 0x04\n-    KOREAN = 0x08\n-    NON_CJK = 0x10\n-    ALL = 0x1F\n-    CHINESE = CHINESE_SIMPLIFIED | CHINESE_TRADITIONAL\n-    CJK = CHINESE | JAPANESE | KOREAN\n-\n-\n-class ProbingState(object):\n-    \"\"\"\n-    This enum represents the different states a prober can be in.\n-    \"\"\"\n-    DETECTING = 0\n-    FOUND_IT = 1\n-    NOT_ME = 2\n-\n-\n-class MachineState(object):\n-    \"\"\"\n-    This enum represents the different states a state machine can be in.\n-    \"\"\"\n-    START = 0\n-    ERROR = 1\n-    ITS_ME = 2\n-\n-\n-class SequenceLikelihood(object):\n-    \"\"\"\n-    This enum represents the likelihood of a character following the previous one.\n-    \"\"\"\n-    NEGATIVE = 0\n-    UNLIKELY = 1\n-    LIKELY = 2\n-    POSITIVE = 3\n-\n-    @classmethod\n-    def get_num_categories(cls):\n-        \"\"\":returns: The number of likelihood categories in the enum.\"\"\"\n-        return 4\n-\n-\n-class CharacterCategory(object):\n-    \"\"\"\n-    This enum represents the different categories language models for\n-    ``SingleByteCharsetProber`` put characters into.\n-\n-    Anything less than CONTROL is considered a letter.\n-    \"\"\"\n-    UNDEFINED = 255\n-    LINE_BREAK = 254\n-    SYMBOL = 253\n-    DIGIT = 252\n-    CONTROL = 251\n\n@@ -1,101 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .enums import LanguageFilter, ProbingState, MachineState\n-from .escsm import (HZ_SM_MODEL, ISO2022CN_SM_MODEL, ISO2022JP_SM_MODEL,\n-                    ISO2022KR_SM_MODEL)\n-\n-\n-class EscCharSetProber(CharSetProber):\n-    \"\"\"\n-    This CharSetProber uses a \"code scheme\" approach for detecting encodings,\n-    whereby easily recognizable escape or shift sequences are relied on to\n-    identify these encodings.\n-    \"\"\"\n-\n-    def __init__(self, lang_filter=None):\n-        super(EscCharSetProber, self).__init__(lang_filter=lang_filter)\n-        self.coding_sm = []\n-        if self.lang_filter & LanguageFilter.CHINESE_SIMPLIFIED:\n-            self.coding_sm.append(CodingStateMachine(HZ_SM_MODEL))\n-            self.coding_sm.append(CodingStateMachine(ISO2022CN_SM_MODEL))\n-        if self.lang_filter & LanguageFilter.JAPANESE:\n-            self.coding_sm.append(CodingStateMachine(ISO2022JP_SM_MODEL))\n-        if self.lang_filter & LanguageFilter.KOREAN:\n-            self.coding_sm.append(CodingStateMachine(ISO2022KR_SM_MODEL))\n-        self.active_sm_count = None\n-        self._detected_charset = None\n-        self._detected_language = None\n-        self._state = None\n-        self.reset()\n-\n-    def reset(self):\n-        super(EscCharSetProber, self).reset()\n-        for coding_sm in self.coding_sm:\n-            if not coding_sm:\n-                continue\n-            coding_sm.active = True\n-            coding_sm.reset()\n-        self.active_sm_count = len(self.coding_sm)\n-        self._detected_charset = None\n-        self._detected_language = None\n-\n-    @property\n-    def charset_name(self):\n-        return self._detected_charset\n-\n-    @property\n-    def language(self):\n-        return self._detected_language\n-\n-    def get_confidence(self):\n-        if self._detected_charset:\n-            return 0.99\n-        else:\n-            return 0.00\n-\n-    def feed(self, byte_str):\n-        for c in byte_str:\n-            for coding_sm in self.coding_sm:\n-                if not coding_sm or not coding_sm.active:\n-                    continue\n-                coding_state = coding_sm.next_state(c)\n-                if coding_state == MachineState.ERROR:\n-                    coding_sm.active = False\n-                    self.active_sm_count -= 1\n-                    if self.active_sm_count <= 0:\n-                        self._state = ProbingState.NOT_ME\n-                        return self.state\n-                elif coding_state == MachineState.ITS_ME:\n-                    self._state = ProbingState.FOUND_IT\n-                    self._detected_charset = coding_sm.get_coding_state_machine()\n-                    self._detected_language = coding_sm.language\n-                    return self.state\n-\n-        return self.state\n\n@@ -1,246 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .enums import MachineState\n-\n-HZ_CLS = (\n-1,0,0,0,0,0,0,0,  # 00 - 07\n-0,0,0,0,0,0,0,0,  # 08 - 0f\n-0,0,0,0,0,0,0,0,  # 10 - 17\n-0,0,0,1,0,0,0,0,  # 18 - 1f\n-0,0,0,0,0,0,0,0,  # 20 - 27\n-0,0,0,0,0,0,0,0,  # 28 - 2f\n-0,0,0,0,0,0,0,0,  # 30 - 37\n-0,0,0,0,0,0,0,0,  # 38 - 3f\n-0,0,0,0,0,0,0,0,  # 40 - 47\n-0,0,0,0,0,0,0,0,  # 48 - 4f\n-0,0,0,0,0,0,0,0,  # 50 - 57\n-0,0,0,0,0,0,0,0,  # 58 - 5f\n-0,0,0,0,0,0,0,0,  # 60 - 67\n-0,0,0,0,0,0,0,0,  # 68 - 6f\n-0,0,0,0,0,0,0,0,  # 70 - 77\n-0,0,0,4,0,5,2,0,  # 78 - 7f\n-1,1,1,1,1,1,1,1,  # 80 - 87\n-1,1,1,1,1,1,1,1,  # 88 - 8f\n-1,1,1,1,1,1,1,1,  # 90 - 97\n-1,1,1,1,1,1,1,1,  # 98 - 9f\n-1,1,1,1,1,1,1,1,  # a0 - a7\n-1,1,1,1,1,1,1,1,  # a8 - af\n-1,1,1,1,1,1,1,1,  # b0 - b7\n-1,1,1,1,1,1,1,1,  # b8 - bf\n-1,1,1,1,1,1,1,1,  # c0 - c7\n-1,1,1,1,1,1,1,1,  # c8 - cf\n-1,1,1,1,1,1,1,1,  # d0 - d7\n-1,1,1,1,1,1,1,1,  # d8 - df\n-1,1,1,1,1,1,1,1,  # e0 - e7\n-1,1,1,1,1,1,1,1,  # e8 - ef\n-1,1,1,1,1,1,1,1,  # f0 - f7\n-1,1,1,1,1,1,1,1,  # f8 - ff\n-)\n-\n-HZ_ST = (\n-MachineState.START,MachineState.ERROR,     3,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,# 00-07\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 08-0f\n-MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,     4,MachineState.ERROR,# 10-17\n-     5,MachineState.ERROR,     6,MachineState.ERROR,     5,     5,     4,MachineState.ERROR,# 18-1f\n-     4,MachineState.ERROR,     4,     4,     4,MachineState.ERROR,     4,MachineState.ERROR,# 20-27\n-     4,MachineState.ITS_ME,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 28-2f\n-)\n-\n-HZ_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\n-\n-HZ_SM_MODEL = {'class_table': HZ_CLS,\n-               'class_factor': 6,\n-               'state_table': HZ_ST,\n-               'char_len_table': HZ_CHAR_LEN_TABLE,\n-               'name': \"HZ-GB-2312\",\n-               'language': 'Chinese'}\n-\n-ISO2022CN_CLS = (\n-2,0,0,0,0,0,0,0,  # 00 - 07\n-0,0,0,0,0,0,0,0,  # 08 - 0f\n-0,0,0,0,0,0,0,0,  # 10 - 17\n-0,0,0,1,0,0,0,0,  # 18 - 1f\n-0,0,0,0,0,0,0,0,  # 20 - 27\n-0,3,0,0,0,0,0,0,  # 28 - 2f\n-0,0,0,0,0,0,0,0,  # 30 - 37\n-0,0,0,0,0,0,0,0,  # 38 - 3f\n-0,0,0,4,0,0,0,0,  # 40 - 47\n-0,0,0,0,0,0,0,0,  # 48 - 4f\n-0,0,0,0,0,0,0,0,  # 50 - 57\n-0,0,0,0,0,0,0,0,  # 58 - 5f\n-0,0,0,0,0,0,0,0,  # 60 - 67\n-0,0,0,0,0,0,0,0,  # 68 - 6f\n-0,0,0,0,0,0,0,0,  # 70 - 77\n-0,0,0,0,0,0,0,0,  # 78 - 7f\n-2,2,2,2,2,2,2,2,  # 80 - 87\n-2,2,2,2,2,2,2,2,  # 88 - 8f\n-2,2,2,2,2,2,2,2,  # 90 - 97\n-2,2,2,2,2,2,2,2,  # 98 - 9f\n-2,2,2,2,2,2,2,2,  # a0 - a7\n-2,2,2,2,2,2,2,2,  # a8 - af\n-2,2,2,2,2,2,2,2,  # b0 - b7\n-2,2,2,2,2,2,2,2,  # b8 - bf\n-2,2,2,2,2,2,2,2,  # c0 - c7\n-2,2,2,2,2,2,2,2,  # c8 - cf\n-2,2,2,2,2,2,2,2,  # d0 - d7\n-2,2,2,2,2,2,2,2,  # d8 - df\n-2,2,2,2,2,2,2,2,  # e0 - e7\n-2,2,2,2,2,2,2,2,  # e8 - ef\n-2,2,2,2,2,2,2,2,  # f0 - f7\n-2,2,2,2,2,2,2,2,  # f8 - ff\n-)\n-\n-ISO2022CN_ST = (\n-MachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 00-07\n-MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 08-0f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 10-17\n-MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,# 18-1f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 20-27\n-     5,     6,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 28-2f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 30-37\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,# 38-3f\n-)\n-\n-ISO2022CN_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0, 0, 0, 0)\n-\n-ISO2022CN_SM_MODEL = {'class_table': ISO2022CN_CLS,\n-                      'class_factor': 9,\n-                      'state_table': ISO2022CN_ST,\n-                      'char_len_table': ISO2022CN_CHAR_LEN_TABLE,\n-                      'name': \"ISO-2022-CN\",\n-                      'language': 'Chinese'}\n-\n-ISO2022JP_CLS = (\n-2,0,0,0,0,0,0,0,  # 00 - 07\n-0,0,0,0,0,0,2,2,  # 08 - 0f\n-0,0,0,0,0,0,0,0,  # 10 - 17\n-0,0,0,1,0,0,0,0,  # 18 - 1f\n-0,0,0,0,7,0,0,0,  # 20 - 27\n-3,0,0,0,0,0,0,0,  # 28 - 2f\n-0,0,0,0,0,0,0,0,  # 30 - 37\n-0,0,0,0,0,0,0,0,  # 38 - 3f\n-6,0,4,0,8,0,0,0,  # 40 - 47\n-0,9,5,0,0,0,0,0,  # 48 - 4f\n-0,0,0,0,0,0,0,0,  # 50 - 57\n-0,0,0,0,0,0,0,0,  # 58 - 5f\n-0,0,0,0,0,0,0,0,  # 60 - 67\n-0,0,0,0,0,0,0,0,  # 68 - 6f\n-0,0,0,0,0,0,0,0,  # 70 - 77\n-0,0,0,0,0,0,0,0,  # 78 - 7f\n-2,2,2,2,2,2,2,2,  # 80 - 87\n-2,2,2,2,2,2,2,2,  # 88 - 8f\n-2,2,2,2,2,2,2,2,  # 90 - 97\n-2,2,2,2,2,2,2,2,  # 98 - 9f\n-2,2,2,2,2,2,2,2,  # a0 - a7\n-2,2,2,2,2,2,2,2,  # a8 - af\n-2,2,2,2,2,2,2,2,  # b0 - b7\n-2,2,2,2,2,2,2,2,  # b8 - bf\n-2,2,2,2,2,2,2,2,  # c0 - c7\n-2,2,2,2,2,2,2,2,  # c8 - cf\n-2,2,2,2,2,2,2,2,  # d0 - d7\n-2,2,2,2,2,2,2,2,  # d8 - df\n-2,2,2,2,2,2,2,2,  # e0 - e7\n-2,2,2,2,2,2,2,2,  # e8 - ef\n-2,2,2,2,2,2,2,2,  # f0 - f7\n-2,2,2,2,2,2,2,2,  # f8 - ff\n-)\n-\n-ISO2022JP_ST = (\n-MachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 00-07\n-MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 08-0f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 10-17\n-MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,# 18-1f\n-MachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,MachineState.ERROR,# 20-27\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     6,MachineState.ITS_ME,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,# 28-2f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,# 30-37\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 38-3f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,MachineState.START,# 40-47\n-)\n-\n-ISO2022JP_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n-\n-ISO2022JP_SM_MODEL = {'class_table': ISO2022JP_CLS,\n-                      'class_factor': 10,\n-                      'state_table': ISO2022JP_ST,\n-                      'char_len_table': ISO2022JP_CHAR_LEN_TABLE,\n-                      'name': \"ISO-2022-JP\",\n-                      'language': 'Japanese'}\n-\n-ISO2022KR_CLS = (\n-2,0,0,0,0,0,0,0,  # 00 - 07\n-0,0,0,0,0,0,0,0,  # 08 - 0f\n-0,0,0,0,0,0,0,0,  # 10 - 17\n-0,0,0,1,0,0,0,0,  # 18 - 1f\n-0,0,0,0,3,0,0,0,  # 20 - 27\n-0,4,0,0,0,0,0,0,  # 28 - 2f\n-0,0,0,0,0,0,0,0,  # 30 - 37\n-0,0,0,0,0,0,0,0,  # 38 - 3f\n-0,0,0,5,0,0,0,0,  # 40 - 47\n-0,0,0,0,0,0,0,0,  # 48 - 4f\n-0,0,0,0,0,0,0,0,  # 50 - 57\n-0,0,0,0,0,0,0,0,  # 58 - 5f\n-0,0,0,0,0,0,0,0,  # 60 - 67\n-0,0,0,0,0,0,0,0,  # 68 - 6f\n-0,0,0,0,0,0,0,0,  # 70 - 77\n-0,0,0,0,0,0,0,0,  # 78 - 7f\n-2,2,2,2,2,2,2,2,  # 80 - 87\n-2,2,2,2,2,2,2,2,  # 88 - 8f\n-2,2,2,2,2,2,2,2,  # 90 - 97\n-2,2,2,2,2,2,2,2,  # 98 - 9f\n-2,2,2,2,2,2,2,2,  # a0 - a7\n-2,2,2,2,2,2,2,2,  # a8 - af\n-2,2,2,2,2,2,2,2,  # b0 - b7\n-2,2,2,2,2,2,2,2,  # b8 - bf\n-2,2,2,2,2,2,2,2,  # c0 - c7\n-2,2,2,2,2,2,2,2,  # c8 - cf\n-2,2,2,2,2,2,2,2,  # d0 - d7\n-2,2,2,2,2,2,2,2,  # d8 - df\n-2,2,2,2,2,2,2,2,  # e0 - e7\n-2,2,2,2,2,2,2,2,  # e8 - ef\n-2,2,2,2,2,2,2,2,  # f0 - f7\n-2,2,2,2,2,2,2,2,  # f8 - ff\n-)\n-\n-ISO2022KR_ST = (\n-MachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,# 00-07\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 08-0f\n-MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,MachineState.ERROR,# 10-17\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 18-1f\n-MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 20-27\n-)\n-\n-ISO2022KR_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\n-\n-ISO2022KR_SM_MODEL = {'class_table': ISO2022KR_CLS,\n-                      'class_factor': 6,\n-                      'state_table': ISO2022KR_ST,\n-                      'char_len_table': ISO2022KR_CHAR_LEN_TABLE,\n-                      'name': \"ISO-2022-KR\",\n-                      'language': 'Korean'}\n-\n-\n\n@@ -1,92 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .enums import ProbingState, MachineState\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import EUCJPDistributionAnalysis\n-from .jpcntx import EUCJPContextAnalysis\n-from .mbcssm import EUCJP_SM_MODEL\n-\n-\n-class EUCJPProber(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(EUCJPProber, self).__init__()\n-        self.coding_sm = CodingStateMachine(EUCJP_SM_MODEL)\n-        self.distribution_analyzer = EUCJPDistributionAnalysis()\n-        self.context_analyzer = EUCJPContextAnalysis()\n-        self.reset()\n-\n-    def reset(self):\n-        super(EUCJPProber, self).reset()\n-        self.context_analyzer.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"EUC-JP\"\n-\n-    @property\n-    def language(self):\n-        return \"Japanese\"\n-\n-    def feed(self, byte_str):\n-        for i in range(len(byte_str)):\n-            # PY3K: byte_str is a byte array, so byte_str[i] is an int, not a byte\n-            coding_state = self.coding_sm.next_state(byte_str[i])\n-            if coding_state == MachineState.ERROR:\n-                self.logger.debug('%s %s prober hit error at byte %s',\n-                                  self.charset_name, self.language, i)\n-                self._state = ProbingState.NOT_ME\n-                break\n-            elif coding_state == MachineState.ITS_ME:\n-                self._state = ProbingState.FOUND_IT\n-                break\n-            elif coding_state == MachineState.START:\n-                char_len = self.coding_sm.get_current_charlen()\n-                if i == 0:\n-                    self._last_char[1] = byte_str[0]\n-                    self.context_analyzer.feed(self._last_char, char_len)\n-                    self.distribution_analyzer.feed(self._last_char, char_len)\n-                else:\n-                    self.context_analyzer.feed(byte_str[i - 1:i + 1],\n-                                                char_len)\n-                    self.distribution_analyzer.feed(byte_str[i - 1:i + 1],\n-                                                     char_len)\n-\n-        self._last_char[0] = byte_str[-1]\n-\n-        if self.state == ProbingState.DETECTING:\n-            if (self.context_analyzer.got_enough_data() and\n-               (self.get_confidence() > self.SHORTCUT_THRESHOLD)):\n-                self._state = ProbingState.FOUND_IT\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        context_conf = self.context_analyzer.get_confidence()\n-        distrib_conf = self.distribution_analyzer.get_confidence()\n-        return max(context_conf, distrib_conf)\n\n@@ -1,195 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# Sampling from about 20M text materials include literature and computer technology\n-\n-# 128  --> 0.79\n-# 256  --> 0.92\n-# 512  --> 0.986\n-# 1024 --> 0.99944\n-# 2048 --> 0.99999\n-#\n-# Idea Distribution Ratio = 0.98653 / (1-0.98653) = 73.24\n-# Random Distribution Ration = 512 / (2350-512) = 0.279.\n-#\n-# Typical Distribution Ratio\n-\n-EUCKR_TYPICAL_DISTRIBUTION_RATIO = 6.0\n-\n-EUCKR_TABLE_SIZE = 2352\n-\n-# Char to FreqOrder table ,\n-EUCKR_CHAR_TO_FREQ_ORDER = (\n-  13, 130, 120,1396, 481,1719,1720, 328, 609, 212,1721, 707, 400, 299,1722,  87,\n-1397,1723, 104, 536,1117,1203,1724,1267, 685,1268, 508,1725,1726,1727,1728,1398,\n-1399,1729,1730,1731, 141, 621, 326,1057, 368,1732, 267, 488,  20,1733,1269,1734,\n- 945,1400,1735,  47, 904,1270,1736,1737, 773, 248,1738, 409, 313, 786, 429,1739,\n- 116, 987, 813,1401, 683,  75,1204, 145,1740,1741,1742,1743,  16, 847, 667, 622,\n- 708,1744,1745,1746, 966, 787, 304, 129,1747,  60, 820, 123, 676,1748,1749,1750,\n-1751, 617,1752, 626,1753,1754,1755,1756, 653,1757,1758,1759,1760,1761,1762, 856,\n- 344,1763,1764,1765,1766,  89, 401, 418, 806, 905, 848,1767,1768,1769, 946,1205,\n- 709,1770,1118,1771, 241,1772,1773,1774,1271,1775, 569,1776, 999,1777,1778,1779,\n-1780, 337, 751,1058,  28, 628, 254,1781, 177, 906, 270, 349, 891,1079,1782,  19,\n-1783, 379,1784, 315,1785, 629, 754,1402, 559,1786, 636, 203,1206,1787, 710, 567,\n-1788, 935, 814,1789,1790,1207, 766, 528,1791,1792,1208,1793,1794,1795,1796,1797,\n-1403,1798,1799, 533,1059,1404,1405,1156,1406, 936, 884,1080,1800, 351,1801,1802,\n-1803,1804,1805, 801,1806,1807,1808,1119,1809,1157, 714, 474,1407,1810, 298, 899,\n- 885,1811,1120, 802,1158,1812, 892,1813,1814,1408, 659,1815,1816,1121,1817,1818,\n-1819,1820,1821,1822, 319,1823, 594, 545,1824, 815, 937,1209,1825,1826, 573,1409,\n-1022,1827,1210,1828,1829,1830,1831,1832,1833, 556, 722, 807,1122,1060,1834, 697,\n-1835, 900, 557, 715,1836,1410, 540,1411, 752,1159, 294, 597,1211, 976, 803, 770,\n-1412,1837,1838,  39, 794,1413, 358,1839, 371, 925,1840, 453, 661, 788, 531, 723,\n- 544,1023,1081, 869,  91,1841, 392, 430, 790, 602,1414, 677,1082, 457,1415,1416,\n-1842,1843, 475, 327,1024,1417, 795, 121,1844, 733, 403,1418,1845,1846,1847, 300,\n- 119, 711,1212, 627,1848,1272, 207,1849,1850, 796,1213, 382,1851, 519,1852,1083,\n- 893,1853,1854,1855, 367, 809, 487, 671,1856, 663,1857,1858, 956, 471, 306, 857,\n-1859,1860,1160,1084,1861,1862,1863,1864,1865,1061,1866,1867,1868,1869,1870,1871,\n- 282,  96, 574,1872, 502,1085,1873,1214,1874, 907,1875,1876, 827, 977,1419,1420,\n-1421, 268,1877,1422,1878,1879,1880, 308,1881,   2, 537,1882,1883,1215,1884,1885,\n- 127, 791,1886,1273,1423,1887,  34, 336, 404, 643,1888, 571, 654, 894, 840,1889,\n-   0, 886,1274, 122, 575, 260, 908, 938,1890,1275, 410, 316,1891,1892, 100,1893,\n-1894,1123,  48,1161,1124,1025,1895, 633, 901,1276,1896,1897, 115, 816,1898, 317,\n-1899, 694,1900, 909, 734,1424, 572, 866,1425, 691,  85, 524,1010, 543, 394, 841,\n-1901,1902,1903,1026,1904,1905,1906,1907,1908,1909,  30, 451, 651, 988, 310,1910,\n-1911,1426, 810,1216,  93,1912,1913,1277,1217,1914, 858, 759,  45,  58, 181, 610,\n- 269,1915,1916, 131,1062, 551, 443,1000, 821,1427, 957, 895,1086,1917,1918, 375,\n-1919, 359,1920, 687,1921, 822,1922, 293,1923,1924,  40, 662, 118, 692,  29, 939,\n- 887, 640, 482, 174,1925,  69,1162, 728,1428, 910,1926,1278,1218,1279, 386, 870,\n- 217, 854,1163, 823,1927,1928,1929,1930, 834,1931,  78,1932, 859,1933,1063,1934,\n-1935,1936,1937, 438,1164, 208, 595,1938,1939,1940,1941,1219,1125,1942, 280, 888,\n-1429,1430,1220,1431,1943,1944,1945,1946,1947,1280, 150, 510,1432,1948,1949,1950,\n-1951,1952,1953,1954,1011,1087,1955,1433,1043,1956, 881,1957, 614, 958,1064,1065,\n-1221,1958, 638,1001, 860, 967, 896,1434, 989, 492, 553,1281,1165,1959,1282,1002,\n-1283,1222,1960,1961,1962,1963,  36, 383, 228, 753, 247, 454,1964, 876, 678,1965,\n-1966,1284, 126, 464, 490, 835, 136, 672, 529, 940,1088,1435, 473,1967,1968, 467,\n-  50, 390, 227, 587, 279, 378, 598, 792, 968, 240, 151, 160, 849, 882,1126,1285,\n- 639,1044, 133, 140, 288, 360, 811, 563,1027, 561, 142, 523,1969,1970,1971,   7,\n- 103, 296, 439, 407, 506, 634, 990,1972,1973,1974,1975, 645,1976,1977,1978,1979,\n-1980,1981, 236,1982,1436,1983,1984,1089, 192, 828, 618, 518,1166, 333,1127,1985,\n- 818,1223,1986,1987,1988,1989,1990,1991,1992,1993, 342,1128,1286, 746, 842,1994,\n-1995, 560, 223,1287,  98,   8, 189, 650, 978,1288,1996,1437,1997,  17, 345, 250,\n- 423, 277, 234, 512, 226,  97, 289,  42, 167,1998, 201,1999,2000, 843, 836, 824,\n- 532, 338, 783,1090, 182, 576, 436,1438,1439, 527, 500,2001, 947, 889,2002,2003,\n-2004,2005, 262, 600, 314, 447,2006, 547,2007, 693, 738,1129,2008,  71,1440, 745,\n- 619, 688,2009, 829,2010,2011, 147,2012,  33, 948,2013,2014,  74, 224,2015,  61,\n- 191, 918, 399, 637,2016,1028,1130, 257, 902,2017,2018,2019,2020,2021,2022,2023,\n-2024,2025,2026, 837,2027,2028,2029,2030, 179, 874, 591,  52, 724, 246,2031,2032,\n-2033,2034,1167, 969,2035,1289, 630, 605, 911,1091,1168,2036,2037,2038,1441, 912,\n-2039, 623,2040,2041, 253,1169,1290,2042,1442, 146, 620, 611, 577, 433,2043,1224,\n- 719,1170, 959, 440, 437, 534,  84, 388, 480,1131, 159, 220, 198, 679,2044,1012,\n- 819,1066,1443, 113,1225, 194, 318,1003,1029,2045,2046,2047,2048,1067,2049,2050,\n-2051,2052,2053,  59, 913, 112,2054, 632,2055, 455, 144, 739,1291,2056, 273, 681,\n- 499,2057, 448,2058,2059, 760,2060,2061, 970, 384, 169, 245,1132,2062,2063, 414,\n-1444,2064,2065,  41, 235,2066, 157, 252, 877, 568, 919, 789, 580,2067, 725,2068,\n-2069,1292,2070,2071,1445,2072,1446,2073,2074,  55, 588,  66,1447, 271,1092,2075,\n-1226,2076, 960,1013, 372,2077,2078,2079,2080,2081,1293,2082,2083,2084,2085, 850,\n-2086,2087,2088,2089,2090, 186,2091,1068, 180,2092,2093,2094, 109,1227, 522, 606,\n-2095, 867,1448,1093, 991,1171, 926, 353,1133,2096, 581,2097,2098,2099,1294,1449,\n-1450,2100, 596,1172,1014,1228,2101,1451,1295,1173,1229,2102,2103,1296,1134,1452,\n- 949,1135,2104,2105,1094,1453,1454,1455,2106,1095,2107,2108,2109,2110,2111,2112,\n-2113,2114,2115,2116,2117, 804,2118,2119,1230,1231, 805,1456, 405,1136,2120,2121,\n-2122,2123,2124, 720, 701,1297, 992,1457, 927,1004,2125,2126,2127,2128,2129,2130,\n-  22, 417,2131, 303,2132, 385,2133, 971, 520, 513,2134,1174,  73,1096, 231, 274,\n- 962,1458, 673,2135,1459,2136, 152,1137,2137,2138,2139,2140,1005,1138,1460,1139,\n-2141,2142,2143,2144,  11, 374, 844,2145, 154,1232,  46,1461,2146, 838, 830, 721,\n-1233, 106,2147,  90, 428, 462, 578, 566,1175, 352,2148,2149, 538,1234, 124,1298,\n-2150,1462, 761, 565,2151, 686,2152, 649,2153,  72, 173,2154, 460, 415,2155,1463,\n-2156,1235, 305,2157,2158,2159,2160,2161,2162, 579,2163,2164,2165,2166,2167, 747,\n-2168,2169,2170,2171,1464, 669,2172,2173,2174,2175,2176,1465,2177,  23, 530, 285,\n-2178, 335, 729,2179, 397,2180,2181,2182,1030,2183,2184, 698,2185,2186, 325,2187,\n-2188, 369,2189, 799,1097,1015, 348,2190,1069, 680,2191, 851,1466,2192,2193,  10,\n-2194, 613, 424,2195, 979, 108, 449, 589,  27, 172,  81,1031,  80, 774, 281, 350,\n-1032, 525, 301, 582,1176,2196, 674,1045,2197,2198,1467, 730, 762,2199,2200,2201,\n-2202,1468,2203, 993,2204,2205, 266,1070, 963,1140,2206,2207,2208, 664,1098, 972,\n-2209,2210,2211,1177,1469,1470, 871,2212,2213,2214,2215,2216,1471,2217,2218,2219,\n-2220,2221,2222,2223,2224,2225,2226,2227,1472,1236,2228,2229,2230,2231,2232,2233,\n-2234,2235,1299,2236,2237, 200,2238, 477, 373,2239,2240, 731, 825, 777,2241,2242,\n-2243, 521, 486, 548,2244,2245,2246,1473,1300,  53, 549, 137, 875,  76, 158,2247,\n-1301,1474, 469, 396,1016, 278, 712,2248, 321, 442, 503, 767, 744, 941,1237,1178,\n-1475,2249,  82, 178,1141,1179, 973,2250,1302,2251, 297,2252,2253, 570,2254,2255,\n-2256,  18, 450, 206,2257, 290, 292,1142,2258, 511, 162,  99, 346, 164, 735,2259,\n-1476,1477,   4, 554, 343, 798,1099,2260,1100,2261,  43, 171,1303, 139, 215,2262,\n-2263, 717, 775,2264,1033, 322, 216,2265, 831,2266, 149,2267,1304,2268,2269, 702,\n-1238, 135, 845, 347, 309,2270, 484,2271, 878, 655, 238,1006,1478,2272,  67,2273,\n- 295,2274,2275, 461,2276, 478, 942, 412,2277,1034,2278,2279,2280, 265,2281, 541,\n-2282,2283,2284,2285,2286,  70, 852,1071,2287,2288,2289,2290,  21,  56, 509, 117,\n- 432,2291,2292, 331, 980, 552,1101, 148, 284, 105, 393,1180,1239, 755,2293, 187,\n-2294,1046,1479,2295, 340,2296,  63,1047, 230,2297,2298,1305, 763,1306, 101, 800,\n- 808, 494,2299,2300,2301, 903,2302,  37,1072,  14,   5,2303,  79, 675,2304, 312,\n-2305,2306,2307,2308,2309,1480,   6,1307,2310,2311,2312,   1, 470,  35,  24, 229,\n-2313, 695, 210,  86, 778,  15, 784, 592, 779,  32,  77, 855, 964,2314, 259,2315,\n- 501, 380,2316,2317,  83, 981, 153, 689,1308,1481,1482,1483,2318,2319, 716,1484,\n-2320,2321,2322,2323,2324,2325,1485,2326,2327, 128,  57,  68, 261,1048, 211, 170,\n-1240,  31,2328,  51, 435, 742,2329,2330,2331, 635,2332, 264, 456,2333,2334,2335,\n- 425,2336,1486, 143, 507, 263, 943,2337, 363, 920,1487, 256,1488,1102, 243, 601,\n-1489,2338,2339,2340,2341,2342,2343,2344, 861,2345,2346,2347,2348,2349,2350, 395,\n-2351,1490,1491,  62, 535, 166, 225,2352,2353, 668, 419,1241, 138, 604, 928,2354,\n-1181,2355,1492,1493,2356,2357,2358,1143,2359, 696,2360, 387, 307,1309, 682, 476,\n-2361,2362, 332,  12, 222, 156,2363, 232,2364, 641, 276, 656, 517,1494,1495,1035,\n- 416, 736,1496,2365,1017, 586,2366,2367,2368,1497,2369, 242,2370,2371,2372,1498,\n-2373, 965, 713,2374,2375,2376,2377, 740, 982,1499, 944,1500,1007,2378,2379,1310,\n-1501,2380,2381,2382, 785, 329,2383,2384,1502,2385,2386,2387, 932,2388,1503,2389,\n-2390,2391,2392,1242,2393,2394,2395,2396,2397, 994, 950,2398,2399,2400,2401,1504,\n-1311,2402,2403,2404,2405,1049, 749,2406,2407, 853, 718,1144,1312,2408,1182,1505,\n-2409,2410, 255, 516, 479, 564, 550, 214,1506,1507,1313, 413, 239, 444, 339,1145,\n-1036,1508,1509,1314,1037,1510,1315,2411,1511,2412,2413,2414, 176, 703, 497, 624,\n- 593, 921, 302,2415, 341, 165,1103,1512,2416,1513,2417,2418,2419, 376,2420, 700,\n-2421,2422,2423, 258, 768,1316,2424,1183,2425, 995, 608,2426,2427,2428,2429, 221,\n-2430,2431,2432,2433,2434,2435,2436,2437, 195, 323, 726, 188, 897, 983,1317, 377,\n- 644,1050, 879,2438, 452,2439,2440,2441,2442,2443,2444, 914,2445,2446,2447,2448,\n- 915, 489,2449,1514,1184,2450,2451, 515,  64, 427, 495,2452, 583,2453, 483, 485,\n-1038, 562, 213,1515, 748, 666,2454,2455,2456,2457, 334,2458, 780, 996,1008, 705,\n-1243,2459,2460,2461,2462,2463, 114,2464, 493,1146, 366, 163,1516, 961,1104,2465,\n- 291,2466,1318,1105,2467,1517, 365,2468, 355, 951,1244,2469,1319,2470, 631,2471,\n-2472, 218,1320, 364, 320, 756,1518,1519,1321,1520,1322,2473,2474,2475,2476, 997,\n-2477,2478,2479,2480, 665,1185,2481, 916,1521,2482,2483,2484, 584, 684,2485,2486,\n- 797,2487,1051,1186,2488,2489,2490,1522,2491,2492, 370,2493,1039,1187,  65,2494,\n- 434, 205, 463,1188,2495, 125, 812, 391, 402, 826, 699, 286, 398, 155, 781, 771,\n- 585,2496, 590, 505,1073,2497, 599, 244, 219, 917,1018, 952, 646,1523,2498,1323,\n-2499,2500,  49, 984, 354, 741,2501, 625,2502,1324,2503,1019, 190, 357, 757, 491,\n-  95, 782, 868,2504,2505,2506,2507,2508,2509, 134,1524,1074, 422,1525, 898,2510,\n- 161,2511,2512,2513,2514, 769,2515,1526,2516,2517, 411,1325,2518, 472,1527,2519,\n-2520,2521,2522,2523,2524, 985,2525,2526,2527,2528,2529,2530, 764,2531,1245,2532,\n-2533,  25, 204, 311,2534, 496,2535,1052,2536,2537,2538,2539,2540,2541,2542, 199,\n- 704, 504, 468, 758, 657,1528, 196,  44, 839,1246, 272, 750,2543, 765, 862,2544,\n-2545,1326,2546, 132, 615, 933,2547, 732,2548,2549,2550,1189,1529,2551, 283,1247,\n-1053, 607, 929,2552,2553,2554, 930, 183, 872, 616,1040,1147,2555,1148,1020, 441,\n- 249,1075,2556,2557,2558, 466, 743,2559,2560,2561,  92, 514, 426, 420, 526,2562,\n-2563,2564,2565,2566,2567,2568, 185,2569,2570,2571,2572, 776,1530, 658,2573, 362,\n-2574, 361, 922,1076, 793,2575,2576,2577,2578,2579,2580,1531, 251,2581,2582,2583,\n-2584,1532,  54, 612, 237,1327,2585,2586, 275, 408, 647, 111,2587,1533,1106, 465,\n-   3, 458,   9,  38,2588, 107, 110, 890, 209,  26, 737, 498,2589,1534,2590, 431,\n- 202,  88,1535, 356, 287,1107, 660,1149,2591, 381,1536, 986,1150, 445,1248,1151,\n- 974,2592,2593, 846,2594, 446, 953, 184,1249,1250, 727,2595, 923, 193, 883,2596,\n-2597,2598, 102, 324, 539, 817,2599, 421,1041,2600, 832,2601,  94, 175, 197, 406,\n-2602, 459,2603,2604,2605,2606,2607, 330, 555,2608,2609,2610, 706,1108, 389,2611,\n-2612,2613,2614, 233,2615, 833, 558, 931, 954,1251,2616,2617,1537, 546,2618,2619,\n-1009,2620,2621,2622,1538, 690,1328,2623, 955,2624,1539,2625,2626, 772,2627,2628,\n-2629,2630,2631, 924, 648, 863, 603,2632,2633, 934,1540, 864, 865,2634, 642,1042,\n- 670,1190,2635,2636,2637,2638, 168,2639, 652, 873, 542,1054,1541,2640,2641,2642,  # 512, 256\n-)\n-\n\n@@ -1,47 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import EUCKRDistributionAnalysis\n-from .mbcssm import EUCKR_SM_MODEL\n-\n-\n-class EUCKRProber(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(EUCKRProber, self).__init__()\n-        self.coding_sm = CodingStateMachine(EUCKR_SM_MODEL)\n-        self.distribution_analyzer = EUCKRDistributionAnalysis()\n-        self.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"EUC-KR\"\n-\n-    @property\n-    def language(self):\n-        return \"Korean\"\n\n@@ -1,387 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# EUCTW frequency table\n-# Converted from big5 work\n-# by Taiwan's Mandarin Promotion Council\n-# <http:#www.edu.tw:81/mandr/>\n-\n-# 128  --> 0.42261\n-# 256  --> 0.57851\n-# 512  --> 0.74851\n-# 1024 --> 0.89384\n-# 2048 --> 0.97583\n-#\n-# Idea Distribution Ratio = 0.74851/(1-0.74851) =2.98\n-# Random Distribution Ration = 512/(5401-512)=0.105\n-#\n-# Typical Distribution Ratio about 25% of Ideal one, still much higher than RDR\n-\n-EUCTW_TYPICAL_DISTRIBUTION_RATIO = 0.75\n-\n-# Char to FreqOrder table ,\n-EUCTW_TABLE_SIZE = 5376\n-\n-EUCTW_CHAR_TO_FREQ_ORDER = (\n-   1,1800,1506, 255,1431, 198,   9,  82,   6,7310, 177, 202,3615,1256,2808, 110,  # 2742\n-3735,  33,3241, 261,  76,  44,2113,  16,2931,2184,1176, 659,3868,  26,3404,2643,  # 2758\n-1198,3869,3313,4060, 410,2211, 302, 590, 361,1963,   8, 204,  58,4296,7311,1931,  # 2774\n-  63,7312,7313, 317,1614,  75, 222, 159,4061,2412,1480,7314,3500,3068, 224,2809,  # 2790\n-3616,   3,  10,3870,1471,  29,2774,1135,2852,1939, 873, 130,3242,1123, 312,7315,  # 2806\n-4297,2051, 507, 252, 682,7316, 142,1914, 124, 206,2932,  34,3501,3173,  64, 604,  # 2822\n-7317,2494,1976,1977, 155,1990, 645, 641,1606,7318,3405, 337,  72, 406,7319,  80,  # 2838\n- 630, 238,3174,1509, 263, 939,1092,2644, 756,1440,1094,3406, 449,  69,2969, 591,  # 2854\n- 179,2095, 471, 115,2034,1843,  60,  50,2970, 134, 806,1868, 734,2035,3407, 180,  # 2870\n- 995,1607, 156, 537,2893, 688,7320, 319,1305, 779,2144, 514,2374, 298,4298, 359,  # 2886\n-2495,  90,2707,1338, 663,  11, 906,1099,2545,  20,2436, 182, 532,1716,7321, 732,  # 2902\n-1376,4062,1311,1420,3175,  25,2312,1056, 113, 399, 382,1949, 242,3408,2467, 529,  # 2918\n-3243, 475,1447,3617,7322, 117,  21, 656, 810,1297,2295,2329,3502,7323, 126,4063,  # 2934\n- 706, 456, 150, 613,4299,  71,1118,2036,4064, 145,3069,  85, 835, 486,2114,1246,  # 2950\n-1426, 428, 727,1285,1015, 800, 106, 623, 303,1281,7324,2127,2354, 347,3736, 221,  # 2966\n-3503,3110,7325,1955,1153,4065,  83, 296,1199,3070, 192, 624,  93,7326, 822,1897,  # 2982\n-2810,3111, 795,2064, 991,1554,1542,1592,  27,  43,2853, 859, 139,1456, 860,4300,  # 2998\n- 437, 712,3871, 164,2392,3112, 695, 211,3017,2096, 195,3872,1608,3504,3505,3618,  # 3014\n-3873, 234, 811,2971,2097,3874,2229,1441,3506,1615,2375, 668,2076,1638, 305, 228,  # 3030\n-1664,4301, 467, 415,7327, 262,2098,1593, 239, 108, 300, 200,1033, 512,1247,2077,  # 3046\n-7328,7329,2173,3176,3619,2673, 593, 845,1062,3244,  88,1723,2037,3875,1950, 212,  # 3062\n- 266, 152, 149, 468,1898,4066,4302,  77, 187,7330,3018,  37,   5,2972,7331,3876,  # 3078\n-7332,7333,  39,2517,4303,2894,3177,2078,  55, 148,  74,4304, 545, 483,1474,1029,  # 3094\n-1665, 217,1869,1531,3113,1104,2645,4067,  24, 172,3507, 900,3877,3508,3509,4305,  # 3110\n-  32,1408,2811,1312, 329, 487,2355,2247,2708, 784,2674,   4,3019,3314,1427,1788,  # 3126\n- 188, 109, 499,7334,3620,1717,1789, 888,1217,3020,4306,7335,3510,7336,3315,1520,  # 3142\n-3621,3878, 196,1034, 775,7337,7338, 929,1815, 249, 439,  38,7339,1063,7340, 794,  # 3158\n-3879,1435,2296,  46, 178,3245,2065,7341,2376,7342, 214,1709,4307, 804,  35, 707,  # 3174\n- 324,3622,1601,2546, 140, 459,4068,7343,7344,1365, 839, 272, 978,2257,2572,3409,  # 3190\n-2128,1363,3623,1423, 697, 100,3071,  48,  70,1231, 495,3114,2193,7345,1294,7346,  # 3206\n-2079, 462, 586,1042,3246, 853, 256, 988, 185,2377,3410,1698, 434,1084,7347,3411,  # 3222\n- 314,2615,2775,4308,2330,2331, 569,2280, 637,1816,2518, 757,1162,1878,1616,3412,  # 3238\n- 287,1577,2115, 768,4309,1671,2854,3511,2519,1321,3737, 909,2413,7348,4069, 933,  # 3254\n-3738,7349,2052,2356,1222,4310, 765,2414,1322, 786,4311,7350,1919,1462,1677,2895,  # 3270\n-1699,7351,4312,1424,2437,3115,3624,2590,3316,1774,1940,3413,3880,4070, 309,1369,  # 3286\n-1130,2812, 364,2230,1653,1299,3881,3512,3882,3883,2646, 525,1085,3021, 902,2000,  # 3302\n-1475, 964,4313, 421,1844,1415,1057,2281, 940,1364,3116, 376,4314,4315,1381,   7,  # 3318\n-2520, 983,2378, 336,1710,2675,1845, 321,3414, 559,1131,3022,2742,1808,1132,1313,  # 3334\n- 265,1481,1857,7352, 352,1203,2813,3247, 167,1089, 420,2814, 776, 792,1724,3513,  # 3350\n-4071,2438,3248,7353,4072,7354, 446, 229, 333,2743, 901,3739,1200,1557,4316,2647,  # 3366\n-1920, 395,2744,2676,3740,4073,1835, 125, 916,3178,2616,4317,7355,7356,3741,7357,  # 3382\n-7358,7359,4318,3117,3625,1133,2547,1757,3415,1510,2313,1409,3514,7360,2145, 438,  # 3398\n-2591,2896,2379,3317,1068, 958,3023, 461, 311,2855,2677,4074,1915,3179,4075,1978,  # 3414\n- 383, 750,2745,2617,4076, 274, 539, 385,1278,1442,7361,1154,1964, 384, 561, 210,  # 3430\n-  98,1295,2548,3515,7362,1711,2415,1482,3416,3884,2897,1257, 129,7363,3742, 642,  # 3446\n- 523,2776,2777,2648,7364, 141,2231,1333,  68, 176, 441, 876, 907,4077, 603,2592,  # 3462\n- 710, 171,3417, 404, 549,  18,3118,2393,1410,3626,1666,7365,3516,4319,2898,4320,  # 3478\n-7366,2973, 368,7367, 146, 366,  99, 871,3627,1543, 748, 807,1586,1185,  22,2258,  # 3494\n- 379,3743,3180,7368,3181, 505,1941,2618,1991,1382,2314,7369, 380,2357, 218, 702,  # 3510\n-1817,1248,3418,3024,3517,3318,3249,7370,2974,3628, 930,3250,3744,7371,  59,7372,  # 3526\n- 585, 601,4078, 497,3419,1112,1314,4321,1801,7373,1223,1472,2174,7374, 749,1836,  # 3542\n- 690,1899,3745,1772,3885,1476, 429,1043,1790,2232,2116, 917,4079, 447,1086,1629,  # 3558\n-7375, 556,7376,7377,2020,1654, 844,1090, 105, 550, 966,1758,2815,1008,1782, 686,  # 3574\n-1095,7378,2282, 793,1602,7379,3518,2593,4322,4080,2933,2297,4323,3746, 980,2496,  # 3590\n- 544, 353, 527,4324, 908,2678,2899,7380, 381,2619,1942,1348,7381,1341,1252, 560,  # 3606\n-3072,7382,3420,2856,7383,2053, 973, 886,2080, 143,4325,7384,7385, 157,3886, 496,  # 3622\n-4081,  57, 840, 540,2038,4326,4327,3421,2117,1445, 970,2259,1748,1965,2081,4082,  # 3638\n-3119,1234,1775,3251,2816,3629, 773,1206,2129,1066,2039,1326,3887,1738,1725,4083,  # 3654\n- 279,3120,  51,1544,2594, 423,1578,2130,2066, 173,4328,1879,7386,7387,1583, 264,  # 3670\n- 610,3630,4329,2439, 280, 154,7388,7389,7390,1739, 338,1282,3073, 693,2857,1411,  # 3686\n-1074,3747,2440,7391,4330,7392,7393,1240, 952,2394,7394,2900,1538,2679, 685,1483,  # 3702\n-4084,2468,1436, 953,4085,2054,4331, 671,2395,  79,4086,2441,3252, 608, 567,2680,  # 3718\n-3422,4087,4088,1691, 393,1261,1791,2396,7395,4332,7396,7397,7398,7399,1383,1672,  # 3734\n-3748,3182,1464, 522,1119, 661,1150, 216, 675,4333,3888,1432,3519, 609,4334,2681,  # 3750\n-2397,7400,7401,7402,4089,3025,   0,7403,2469, 315, 231,2442, 301,3319,4335,2380,  # 3766\n-7404, 233,4090,3631,1818,4336,4337,7405,  96,1776,1315,2082,7406, 257,7407,1809,  # 3782\n-3632,2709,1139,1819,4091,2021,1124,2163,2778,1777,2649,7408,3074, 363,1655,3183,  # 3798\n-7409,2975,7410,7411,7412,3889,1567,3890, 718, 103,3184, 849,1443, 341,3320,2934,  # 3814\n-1484,7413,1712, 127,  67, 339,4092,2398, 679,1412, 821,7414,7415, 834, 738, 351,  # 3830\n-2976,2146, 846, 235,1497,1880, 418,1992,3749,2710, 186,1100,2147,2746,3520,1545,  # 3846\n-1355,2935,2858,1377, 583,3891,4093,2573,2977,7416,1298,3633,1078,2549,3634,2358,  # 3862\n-  78,3750,3751, 267,1289,2099,2001,1594,4094, 348, 369,1274,2194,2175,1837,4338,  # 3878\n-1820,2817,3635,2747,2283,2002,4339,2936,2748, 144,3321, 882,4340,3892,2749,3423,  # 3894\n-4341,2901,7417,4095,1726, 320,7418,3893,3026, 788,2978,7419,2818,1773,1327,2859,  # 3910\n-3894,2819,7420,1306,4342,2003,1700,3752,3521,2359,2650, 787,2022, 506, 824,3636,  # 3926\n- 534, 323,4343,1044,3322,2023,1900, 946,3424,7421,1778,1500,1678,7422,1881,4344,  # 3942\n- 165, 243,4345,3637,2521, 123, 683,4096, 764,4346,  36,3895,1792, 589,2902, 816,  # 3958\n- 626,1667,3027,2233,1639,1555,1622,3753,3896,7423,3897,2860,1370,1228,1932, 891,  # 3974\n-2083,2903, 304,4097,7424, 292,2979,2711,3522, 691,2100,4098,1115,4347, 118, 662,  # 3990\n-7425, 611,1156, 854,2381,1316,2861,   2, 386, 515,2904,7426,7427,3253, 868,2234,  # 4006\n-1486, 855,2651, 785,2212,3028,7428,1040,3185,3523,7429,3121, 448,7430,1525,7431,  # 4022\n-2164,4348,7432,3754,7433,4099,2820,3524,3122, 503, 818,3898,3123,1568, 814, 676,  # 4038\n-1444, 306,1749,7434,3755,1416,1030, 197,1428, 805,2821,1501,4349,7435,7436,7437,  # 4054\n-1993,7438,4350,7439,7440,2195,  13,2779,3638,2980,3124,1229,1916,7441,3756,2131,  # 4070\n-7442,4100,4351,2399,3525,7443,2213,1511,1727,1120,7444,7445, 646,3757,2443, 307,  # 4086\n-7446,7447,1595,3186,7448,7449,7450,3639,1113,1356,3899,1465,2522,2523,7451, 519,  # 4102\n-7452, 128,2132,  92,2284,1979,7453,3900,1512, 342,3125,2196,7454,2780,2214,1980,  # 4118\n-3323,7455, 290,1656,1317, 789, 827,2360,7456,3758,4352, 562, 581,3901,7457, 401,  # 4134\n-4353,2248,  94,4354,1399,2781,7458,1463,2024,4355,3187,1943,7459, 828,1105,4101,  # 4150\n-1262,1394,7460,4102, 605,4356,7461,1783,2862,7462,2822, 819,2101, 578,2197,2937,  # 4166\n-7463,1502, 436,3254,4103,3255,2823,3902,2905,3425,3426,7464,2712,2315,7465,7466,  # 4182\n-2332,2067,  23,4357, 193, 826,3759,2102, 699,1630,4104,3075, 390,1793,1064,3526,  # 4198\n-7467,1579,3076,3077,1400,7468,4105,1838,1640,2863,7469,4358,4359, 137,4106, 598,  # 4214\n-3078,1966, 780, 104, 974,2938,7470, 278, 899, 253, 402, 572, 504, 493,1339,7471,  # 4230\n-3903,1275,4360,2574,2550,7472,3640,3029,3079,2249, 565,1334,2713, 863,  41,7473,  # 4246\n-7474,4361,7475,1657,2333,  19, 463,2750,4107, 606,7476,2981,3256,1087,2084,1323,  # 4262\n-2652,2982,7477,1631,1623,1750,4108,2682,7478,2864, 791,2714,2653,2334, 232,2416,  # 4278\n-7479,2983,1498,7480,2654,2620, 755,1366,3641,3257,3126,2025,1609, 119,1917,3427,  # 4294\n- 862,1026,4109,7481,3904,3760,4362,3905,4363,2260,1951,2470,7482,1125, 817,4110,  # 4310\n-4111,3906,1513,1766,2040,1487,4112,3030,3258,2824,3761,3127,7483,7484,1507,7485,  # 4326\n-2683, 733,  40,1632,1106,2865, 345,4113, 841,2524, 230,4364,2984,1846,3259,3428,  # 4342\n-7486,1263, 986,3429,7487, 735, 879, 254,1137, 857, 622,1300,1180,1388,1562,3907,  # 4358\n-3908,2939, 967,2751,2655,1349, 592,2133,1692,3324,2985,1994,4114,1679,3909,1901,  # 4374\n-2185,7488, 739,3642,2715,1296,1290,7489,4115,2198,2199,1921,1563,2595,2551,1870,  # 4390\n-2752,2986,7490, 435,7491, 343,1108, 596,  17,1751,4365,2235,3430,3643,7492,4366,  # 4406\n- 294,3527,2940,1693, 477, 979, 281,2041,3528, 643,2042,3644,2621,2782,2261,1031,  # 4422\n-2335,2134,2298,3529,4367, 367,1249,2552,7493,3530,7494,4368,1283,3325,2004, 240,  # 4438\n-1762,3326,4369,4370, 836,1069,3128, 474,7495,2148,2525, 268,3531,7496,3188,1521,  # 4454\n-1284,7497,1658,1546,4116,7498,3532,3533,7499,4117,3327,2684,1685,4118, 961,1673,  # 4470\n-2622, 190,2005,2200,3762,4371,4372,7500, 570,2497,3645,1490,7501,4373,2623,3260,  # 4486\n-1956,4374, 584,1514, 396,1045,1944,7502,4375,1967,2444,7503,7504,4376,3910, 619,  # 4502\n-7505,3129,3261, 215,2006,2783,2553,3189,4377,3190,4378, 763,4119,3763,4379,7506,  # 4518\n-7507,1957,1767,2941,3328,3646,1174, 452,1477,4380,3329,3130,7508,2825,1253,2382,  # 4534\n-2186,1091,2285,4120, 492,7509, 638,1169,1824,2135,1752,3911, 648, 926,1021,1324,  # 4550\n-4381, 520,4382, 997, 847,1007, 892,4383,3764,2262,1871,3647,7510,2400,1784,4384,  # 4566\n-1952,2942,3080,3191,1728,4121,2043,3648,4385,2007,1701,3131,1551,  30,2263,4122,  # 4582\n-7511,2026,4386,3534,7512, 501,7513,4123, 594,3431,2165,1821,3535,3432,3536,3192,  # 4598\n- 829,2826,4124,7514,1680,3132,1225,4125,7515,3262,4387,4126,3133,2336,7516,4388,  # 4614\n-4127,7517,3912,3913,7518,1847,2383,2596,3330,7519,4389, 374,3914, 652,4128,4129,  # 4630\n- 375,1140, 798,7520,7521,7522,2361,4390,2264, 546,1659, 138,3031,2445,4391,7523,  # 4646\n-2250, 612,1848, 910, 796,3765,1740,1371, 825,3766,3767,7524,2906,2554,7525, 692,  # 4662\n- 444,3032,2624, 801,4392,4130,7526,1491, 244,1053,3033,4131,4132, 340,7527,3915,  # 4678\n-1041,2987, 293,1168,  87,1357,7528,1539, 959,7529,2236, 721, 694,4133,3768, 219,  # 4694\n-1478, 644,1417,3331,2656,1413,1401,1335,1389,3916,7530,7531,2988,2362,3134,1825,  # 4710\n- 730,1515, 184,2827,  66,4393,7532,1660,2943, 246,3332, 378,1457, 226,3433, 975,  # 4726\n-3917,2944,1264,3537, 674, 696,7533, 163,7534,1141,2417,2166, 713,3538,3333,4394,  # 4742\n-3918,7535,7536,1186,  15,7537,1079,1070,7538,1522,3193,3539, 276,1050,2716, 758,  # 4758\n-1126, 653,2945,3263,7539,2337, 889,3540,3919,3081,2989, 903,1250,4395,3920,3434,  # 4774\n-3541,1342,1681,1718, 766,3264, 286,  89,2946,3649,7540,1713,7541,2597,3334,2990,  # 4790\n-7542,2947,2215,3194,2866,7543,4396,2498,2526, 181, 387,1075,3921, 731,2187,3335,  # 4806\n-7544,3265, 310, 313,3435,2299, 770,4134,  54,3034, 189,4397,3082,3769,3922,7545,  # 4822\n-1230,1617,1849, 355,3542,4135,4398,3336, 111,4136,3650,1350,3135,3436,3035,4137,  # 4838\n-2149,3266,3543,7546,2784,3923,3924,2991, 722,2008,7547,1071, 247,1207,2338,2471,  # 4854\n-1378,4399,2009, 864,1437,1214,4400, 373,3770,1142,2216, 667,4401, 442,2753,2555,  # 4870\n-3771,3925,1968,4138,3267,1839, 837, 170,1107, 934,1336,1882,7548,7549,2118,4139,  # 4886\n-2828, 743,1569,7550,4402,4140, 582,2384,1418,3437,7551,1802,7552, 357,1395,1729,  # 4902\n-3651,3268,2418,1564,2237,7553,3083,3772,1633,4403,1114,2085,4141,1532,7554, 482,  # 4918\n-2446,4404,7555,7556,1492, 833,1466,7557,2717,3544,1641,2829,7558,1526,1272,3652,  # 4934\n-4142,1686,1794, 416,2556,1902,1953,1803,7559,3773,2785,3774,1159,2316,7560,2867,  # 4950\n-4405,1610,1584,3036,2419,2754, 443,3269,1163,3136,7561,7562,3926,7563,4143,2499,  # 4966\n-3037,4406,3927,3137,2103,1647,3545,2010,1872,4144,7564,4145, 431,3438,7565, 250,  # 4982\n-  97,  81,4146,7566,1648,1850,1558, 160, 848,7567, 866, 740,1694,7568,2201,2830,  # 4998\n-3195,4147,4407,3653,1687, 950,2472, 426, 469,3196,3654,3655,3928,7569,7570,1188,  # 5014\n- 424,1995, 861,3546,4148,3775,2202,2685, 168,1235,3547,4149,7571,2086,1674,4408,  # 5030\n-3337,3270, 220,2557,1009,7572,3776, 670,2992, 332,1208, 717,7573,7574,3548,2447,  # 5046\n-3929,3338,7575, 513,7576,1209,2868,3339,3138,4409,1080,7577,7578,7579,7580,2527,  # 5062\n-3656,3549, 815,1587,3930,3931,7581,3550,3439,3777,1254,4410,1328,3038,1390,3932,  # 5078\n-1741,3933,3778,3934,7582, 236,3779,2448,3271,7583,7584,3657,3780,1273,3781,4411,  # 5094\n-7585, 308,7586,4412, 245,4413,1851,2473,1307,2575, 430, 715,2136,2449,7587, 270,  # 5110\n- 199,2869,3935,7588,3551,2718,1753, 761,1754, 725,1661,1840,4414,3440,3658,7589,  # 5126\n-7590, 587,  14,3272, 227,2598, 326, 480,2265, 943,2755,3552, 291, 650,1883,7591,  # 5142\n-1702,1226, 102,1547,  62,3441, 904,4415,3442,1164,4150,7592,7593,1224,1548,2756,  # 5158\n- 391, 498,1493,7594,1386,1419,7595,2055,1177,4416, 813, 880,1081,2363, 566,1145,  # 5174\n-4417,2286,1001,1035,2558,2599,2238, 394,1286,7596,7597,2068,7598,  86,1494,1730,  # 5190\n-3936, 491,1588, 745, 897,2948, 843,3340,3937,2757,2870,3273,1768, 998,2217,2069,  # 5206\n- 397,1826,1195,1969,3659,2993,3341, 284,7599,3782,2500,2137,2119,1903,7600,3938,  # 5222\n-2150,3939,4151,1036,3443,1904, 114,2559,4152, 209,1527,7601,7602,2949,2831,2625,  # 5238\n-2385,2719,3139, 812,2560,7603,3274,7604,1559, 737,1884,3660,1210, 885,  28,2686,  # 5254\n-3553,3783,7605,4153,1004,1779,4418,7606, 346,1981,2218,2687,4419,3784,1742, 797,  # 5270\n-1642,3940,1933,1072,1384,2151, 896,3941,3275,3661,3197,2871,3554,7607,2561,1958,  # 5286\n-4420,2450,1785,7608,7609,7610,3942,4154,1005,1308,3662,4155,2720,4421,4422,1528,  # 5302\n-2600, 161,1178,4156,1982, 987,4423,1101,4157, 631,3943,1157,3198,2420,1343,1241,  # 5318\n-1016,2239,2562, 372, 877,2339,2501,1160, 555,1934, 911,3944,7611, 466,1170, 169,  # 5334\n-1051,2907,2688,3663,2474,2994,1182,2011,2563,1251,2626,7612, 992,2340,3444,1540,  # 5350\n-2721,1201,2070,2401,1996,2475,7613,4424, 528,1922,2188,1503,1873,1570,2364,3342,  # 5366\n-3276,7614, 557,1073,7615,1827,3445,2087,2266,3140,3039,3084, 767,3085,2786,4425,  # 5382\n-1006,4158,4426,2341,1267,2176,3664,3199, 778,3945,3200,2722,1597,2657,7616,4427,  # 5398\n-7617,3446,7618,7619,7620,3277,2689,1433,3278, 131,  95,1504,3946, 723,4159,3141,  # 5414\n-1841,3555,2758,2189,3947,2027,2104,3665,7621,2995,3948,1218,7622,3343,3201,3949,  # 5430\n-4160,2576, 248,1634,3785, 912,7623,2832,3666,3040,3786, 654,  53,7624,2996,7625,  # 5446\n-1688,4428, 777,3447,1032,3950,1425,7626, 191, 820,2120,2833, 971,4429, 931,3202,  # 5462\n- 135, 664, 783,3787,1997, 772,2908,1935,3951,3788,4430,2909,3203, 282,2723, 640,  # 5478\n-1372,3448,1127, 922, 325,3344,7627,7628, 711,2044,7629,7630,3952,2219,2787,1936,  # 5494\n-3953,3345,2220,2251,3789,2300,7631,4431,3790,1258,3279,3954,3204,2138,2950,3955,  # 5510\n-3956,7632,2221, 258,3205,4432, 101,1227,7633,3280,1755,7634,1391,3281,7635,2910,  # 5526\n-2056, 893,7636,7637,7638,1402,4161,2342,7639,7640,3206,3556,7641,7642, 878,1325,  # 5542\n-1780,2788,4433, 259,1385,2577, 744,1183,2267,4434,7643,3957,2502,7644, 684,1024,  # 5558\n-4162,7645, 472,3557,3449,1165,3282,3958,3959, 322,2152, 881, 455,1695,1152,1340,  # 5574\n- 660, 554,2153,4435,1058,4436,4163, 830,1065,3346,3960,4437,1923,7646,1703,1918,  # 5590\n-7647, 932,2268, 122,7648,4438, 947, 677,7649,3791,2627, 297,1905,1924,2269,4439,  # 5606\n-2317,3283,7650,7651,4164,7652,4165,  84,4166, 112, 989,7653, 547,1059,3961, 701,  # 5622\n-3558,1019,7654,4167,7655,3450, 942, 639, 457,2301,2451, 993,2951, 407, 851, 494,  # 5638\n-4440,3347, 927,7656,1237,7657,2421,3348, 573,4168, 680, 921,2911,1279,1874, 285,  # 5654\n- 790,1448,1983, 719,2167,7658,7659,4441,3962,3963,1649,7660,1541, 563,7661,1077,  # 5670\n-7662,3349,3041,3451, 511,2997,3964,3965,3667,3966,1268,2564,3350,3207,4442,4443,  # 5686\n-7663, 535,1048,1276,1189,2912,2028,3142,1438,1373,2834,2952,1134,2012,7664,4169,  # 5702\n-1238,2578,3086,1259,7665, 700,7666,2953,3143,3668,4170,7667,4171,1146,1875,1906,  # 5718\n-4444,2601,3967, 781,2422, 132,1589, 203, 147, 273,2789,2402, 898,1786,2154,3968,  # 5734\n-3969,7668,3792,2790,7669,7670,4445,4446,7671,3208,7672,1635,3793, 965,7673,1804,  # 5750\n-2690,1516,3559,1121,1082,1329,3284,3970,1449,3794,  65,1128,2835,2913,2759,1590,  # 5766\n-3795,7674,7675,  12,2658,  45, 976,2579,3144,4447, 517,2528,1013,1037,3209,7676,  # 5782\n-3796,2836,7677,3797,7678,3452,7679,2602, 614,1998,2318,3798,3087,2724,2628,7680,  # 5798\n-2580,4172, 599,1269,7681,1810,3669,7682,2691,3088, 759,1060, 489,1805,3351,3285,  # 5814\n-1358,7683,7684,2386,1387,1215,2629,2252, 490,7685,7686,4173,1759,2387,2343,7687,  # 5830\n-4448,3799,1907,3971,2630,1806,3210,4449,3453,3286,2760,2344, 874,7688,7689,3454,  # 5846\n-3670,1858,  91,2914,3671,3042,3800,4450,7690,3145,3972,2659,7691,3455,1202,1403,  # 5862\n-3801,2954,2529,1517,2503,4451,3456,2504,7692,4452,7693,2692,1885,1495,1731,3973,  # 5878\n-2365,4453,7694,2029,7695,7696,3974,2693,1216, 237,2581,4174,2319,3975,3802,4454,  # 5894\n-4455,2694,3560,3457, 445,4456,7697,7698,7699,7700,2761,  61,3976,3672,1822,3977,  # 5910\n-7701, 687,2045, 935, 925, 405,2660, 703,1096,1859,2725,4457,3978,1876,1367,2695,  # 5926\n-3352, 918,2105,1781,2476, 334,3287,1611,1093,4458, 564,3146,3458,3673,3353, 945,  # 5942\n-2631,2057,4459,7702,1925, 872,4175,7703,3459,2696,3089, 349,4176,3674,3979,4460,  # 5958\n-3803,4177,3675,2155,3980,4461,4462,4178,4463,2403,2046, 782,3981, 400, 251,4179,  # 5974\n-1624,7704,7705, 277,3676, 299,1265, 476,1191,3804,2121,4180,4181,1109, 205,7706,  # 5990\n-2582,1000,2156,3561,1860,7707,7708,7709,4464,7710,4465,2565, 107,2477,2157,3982,  # 6006\n-3460,3147,7711,1533, 541,1301, 158, 753,4182,2872,3562,7712,1696, 370,1088,4183,  # 6022\n-4466,3563, 579, 327, 440, 162,2240, 269,1937,1374,3461, 968,3043,  56,1396,3090,  # 6038\n-2106,3288,3354,7713,1926,2158,4467,2998,7714,3564,7715,7716,3677,4468,2478,7717,  # 6054\n-2791,7718,1650,4469,7719,2603,7720,7721,3983,2661,3355,1149,3356,3984,3805,3985,  # 6070\n-7722,1076,  49,7723, 951,3211,3289,3290, 450,2837, 920,7724,1811,2792,2366,4184,  # 6086\n-1908,1138,2367,3806,3462,7725,3212,4470,1909,1147,1518,2423,4471,3807,7726,4472,  # 6102\n-2388,2604, 260,1795,3213,7727,7728,3808,3291, 708,7729,3565,1704,7730,3566,1351,  # 6118\n-1618,3357,2999,1886, 944,4185,3358,4186,3044,3359,4187,7731,3678, 422, 413,1714,  # 6134\n-3292, 500,2058,2345,4188,2479,7732,1344,1910, 954,7733,1668,7734,7735,3986,2404,  # 6150\n-4189,3567,3809,4190,7736,2302,1318,2505,3091, 133,3092,2873,4473, 629,  31,2838,  # 6166\n-2697,3810,4474, 850, 949,4475,3987,2955,1732,2088,4191,1496,1852,7737,3988, 620,  # 6182\n-3214, 981,1242,3679,3360,1619,3680,1643,3293,2139,2452,1970,1719,3463,2168,7738,  # 6198\n-3215,7739,7740,3361,1828,7741,1277,4476,1565,2047,7742,1636,3568,3093,7743, 869,  # 6214\n-2839, 655,3811,3812,3094,3989,3000,3813,1310,3569,4477,7744,7745,7746,1733, 558,  # 6230\n-4478,3681, 335,1549,3045,1756,4192,3682,1945,3464,1829,1291,1192, 470,2726,2107,  # 6246\n-2793, 913,1054,3990,7747,1027,7748,3046,3991,4479, 982,2662,3362,3148,3465,3216,  # 6262\n-3217,1946,2794,7749, 571,4480,7750,1830,7751,3570,2583,1523,2424,7752,2089, 984,  # 6278\n-4481,3683,1959,7753,3684, 852, 923,2795,3466,3685, 969,1519, 999,2048,2320,1705,  # 6294\n-7754,3095, 615,1662, 151, 597,3992,2405,2321,1049, 275,4482,3686,4193, 568,3687,  # 6310\n-3571,2480,4194,3688,7755,2425,2270, 409,3218,7756,1566,2874,3467,1002, 769,2840,  # 6326\n- 194,2090,3149,3689,2222,3294,4195, 628,1505,7757,7758,1763,2177,3001,3993, 521,  # 6342\n-1161,2584,1787,2203,2406,4483,3994,1625,4196,4197, 412,  42,3096, 464,7759,2632,  # 6358\n-4484,3363,1760,1571,2875,3468,2530,1219,2204,3814,2633,2140,2368,4485,4486,3295,  # 6374\n-1651,3364,3572,7760,7761,3573,2481,3469,7762,3690,7763,7764,2271,2091, 460,7765,  # 6390\n-4487,7766,3002, 962, 588,3574, 289,3219,2634,1116,  52,7767,3047,1796,7768,7769,  # 6406\n-7770,1467,7771,1598,1143,3691,4198,1984,1734,1067,4488,1280,3365, 465,4489,1572,  # 6422\n- 510,7772,1927,2241,1812,1644,3575,7773,4490,3692,7774,7775,2663,1573,1534,7776,  # 6438\n-7777,4199, 536,1807,1761,3470,3815,3150,2635,7778,7779,7780,4491,3471,2915,1911,  # 6454\n-2796,7781,3296,1122, 377,3220,7782, 360,7783,7784,4200,1529, 551,7785,2059,3693,  # 6470\n-1769,2426,7786,2916,4201,3297,3097,2322,2108,2030,4492,1404, 136,1468,1479, 672,  # 6486\n-1171,3221,2303, 271,3151,7787,2762,7788,2049, 678,2727, 865,1947,4493,7789,2013,  # 6502\n-3995,2956,7790,2728,2223,1397,3048,3694,4494,4495,1735,2917,3366,3576,7791,3816,  # 6518\n- 509,2841,2453,2876,3817,7792,7793,3152,3153,4496,4202,2531,4497,2304,1166,1010,  # 6534\n- 552, 681,1887,7794,7795,2957,2958,3996,1287,1596,1861,3154, 358, 453, 736, 175,  # 6550\n- 478,1117, 905,1167,1097,7796,1853,1530,7797,1706,7798,2178,3472,2287,3695,3473,  # 6566\n-3577,4203,2092,4204,7799,3367,1193,2482,4205,1458,2190,2205,1862,1888,1421,3298,  # 6582\n-2918,3049,2179,3474, 595,2122,7800,3997,7801,7802,4206,1707,2636, 223,3696,1359,  # 6598\n- 751,3098, 183,3475,7803,2797,3003, 419,2369, 633, 704,3818,2389, 241,7804,7805,  # 6614\n-7806, 838,3004,3697,2272,2763,2454,3819,1938,2050,3998,1309,3099,2242,1181,7807,  # 6630\n-1136,2206,3820,2370,1446,4207,2305,4498,7808,7809,4208,1055,2605, 484,3698,7810,  # 6646\n-3999, 625,4209,2273,3368,1499,4210,4000,7811,4001,4211,3222,2274,2275,3476,7812,  # 6662\n-7813,2764, 808,2606,3699,3369,4002,4212,3100,2532, 526,3370,3821,4213, 955,7814,  # 6678\n-1620,4214,2637,2427,7815,1429,3700,1669,1831, 994, 928,7816,3578,1260,7817,7818,  # 6694\n-7819,1948,2288, 741,2919,1626,4215,2729,2455, 867,1184, 362,3371,1392,7820,7821,  # 6710\n-4003,4216,1770,1736,3223,2920,4499,4500,1928,2698,1459,1158,7822,3050,3372,2877,  # 6726\n-1292,1929,2506,2842,3701,1985,1187,2071,2014,2607,4217,7823,2566,2507,2169,3702,  # 6742\n-2483,3299,7824,3703,4501,7825,7826, 666,1003,3005,1022,3579,4218,7827,4502,1813,  # 6758\n-2253, 574,3822,1603, 295,1535, 705,3823,4219, 283, 858, 417,7828,7829,3224,4503,  # 6774\n-4504,3051,1220,1889,1046,2276,2456,4004,1393,1599, 689,2567, 388,4220,7830,2484,  # 6790\n- 802,7831,2798,3824,2060,1405,2254,7832,4505,3825,2109,1052,1345,3225,1585,7833,  # 6806\n- 809,7834,7835,7836, 575,2730,3477, 956,1552,1469,1144,2323,7837,2324,1560,2457,  # 6822\n-3580,3226,4005, 616,2207,3155,2180,2289,7838,1832,7839,3478,4506,7840,1319,3704,  # 6838\n-3705,1211,3581,1023,3227,1293,2799,7841,7842,7843,3826, 607,2306,3827, 762,2878,  # 6854\n-1439,4221,1360,7844,1485,3052,7845,4507,1038,4222,1450,2061,2638,4223,1379,4508,  # 6870\n-2585,7846,7847,4224,1352,1414,2325,2921,1172,7848,7849,3828,3829,7850,1797,1451,  # 6886\n-7851,7852,7853,7854,2922,4006,4007,2485,2346, 411,4008,4009,3582,3300,3101,4509,  # 6902\n-1561,2664,1452,4010,1375,7855,7856,  47,2959, 316,7857,1406,1591,2923,3156,7858,  # 6918\n-1025,2141,3102,3157, 354,2731, 884,2224,4225,2407, 508,3706, 726,3583, 996,2428,  # 6934\n-3584, 729,7859, 392,2191,1453,4011,4510,3707,7860,7861,2458,3585,2608,1675,2800,  # 6950\n- 919,2347,2960,2348,1270,4511,4012,  73,7862,7863, 647,7864,3228,2843,2255,1550,  # 6966\n-1346,3006,7865,1332, 883,3479,7866,7867,7868,7869,3301,2765,7870,1212, 831,1347,  # 6982\n-4226,4512,2326,3830,1863,3053, 720,3831,4513,4514,3832,7871,4227,7872,7873,4515,  # 6998\n-7874,7875,1798,4516,3708,2609,4517,3586,1645,2371,7876,7877,2924, 669,2208,2665,  # 7014\n-2429,7878,2879,7879,7880,1028,3229,7881,4228,2408,7882,2256,1353,7883,7884,4518,  # 7030\n-3158, 518,7885,4013,7886,4229,1960,7887,2142,4230,7888,7889,3007,2349,2350,3833,  # 7046\n- 516,1833,1454,4014,2699,4231,4519,2225,2610,1971,1129,3587,7890,2766,7891,2961,  # 7062\n-1422, 577,1470,3008,1524,3373,7892,7893, 432,4232,3054,3480,7894,2586,1455,2508,  # 7078\n-2226,1972,1175,7895,1020,2732,4015,3481,4520,7896,2733,7897,1743,1361,3055,3482,  # 7094\n-2639,4016,4233,4521,2290, 895, 924,4234,2170, 331,2243,3056, 166,1627,3057,1098,  # 7110\n-7898,1232,2880,2227,3374,4522, 657, 403,1196,2372, 542,3709,3375,1600,4235,3483,  # 7126\n-7899,4523,2767,3230, 576, 530,1362,7900,4524,2533,2666,3710,4017,7901, 842,3834,  # 7142\n-7902,2801,2031,1014,4018, 213,2700,3376, 665, 621,4236,7903,3711,2925,2430,7904,  # 7158\n-2431,3302,3588,3377,7905,4237,2534,4238,4525,3589,1682,4239,3484,1380,7906, 724,  # 7174\n-2277, 600,1670,7907,1337,1233,4526,3103,2244,7908,1621,4527,7909, 651,4240,7910,  # 7190\n-1612,4241,2611,7911,2844,7912,2734,2307,3058,7913, 716,2459,3059, 174,1255,2701,  # 7206\n-4019,3590, 548,1320,1398, 728,4020,1574,7914,1890,1197,3060,4021,7915,3061,3062,  # 7222\n-3712,3591,3713, 747,7916, 635,4242,4528,7917,7918,7919,4243,7920,7921,4529,7922,  # 7238\n-3378,4530,2432, 451,7923,3714,2535,2072,4244,2735,4245,4022,7924,1764,4531,7925,  # 7254\n-4246, 350,7926,2278,2390,2486,7927,4247,4023,2245,1434,4024, 488,4532, 458,4248,  # 7270\n-4025,3715, 771,1330,2391,3835,2568,3159,2159,2409,1553,2667,3160,4249,7928,2487,  # 7286\n-2881,2612,1720,2702,4250,3379,4533,7929,2536,4251,7930,3231,4252,2768,7931,2015,  # 7302\n-2736,7932,1155,1017,3716,3836,7933,3303,2308, 201,1864,4253,1430,7934,4026,7935,  # 7318\n-7936,7937,7938,7939,4254,1604,7940, 414,1865, 371,2587,4534,4535,3485,2016,3104,  # 7334\n-4536,1708, 960,4255, 887, 389,2171,1536,1663,1721,7941,2228,4027,2351,2926,1580,  # 7350\n-7942,7943,7944,1744,7945,2537,4537,4538,7946,4539,7947,2073,7948,7949,3592,3380,  # 7366\n-2882,4256,7950,4257,2640,3381,2802, 673,2703,2460, 709,3486,4028,3593,4258,7951,  # 7382\n-1148, 502, 634,7952,7953,1204,4540,3594,1575,4541,2613,3717,7954,3718,3105, 948,  # 7398\n-3232, 121,1745,3837,1110,7955,4259,3063,2509,3009,4029,3719,1151,1771,3838,1488,  # 7414\n-4030,1986,7956,2433,3487,7957,7958,2093,7959,4260,3839,1213,1407,2803, 531,2737,  # 7430\n-2538,3233,1011,1537,7960,2769,4261,3106,1061,7961,3720,3721,1866,2883,7962,2017,  # 7446\n- 120,4262,4263,2062,3595,3234,2309,3840,2668,3382,1954,4542,7963,7964,3488,1047,  # 7462\n-2704,1266,7965,1368,4543,2845, 649,3383,3841,2539,2738,1102,2846,2669,7966,7967,  # 7478\n-1999,7968,1111,3596,2962,7969,2488,3842,3597,2804,1854,3384,3722,7970,7971,3385,  # 7494\n-2410,2884,3304,3235,3598,7972,2569,7973,3599,2805,4031,1460, 856,7974,3600,7975,  # 7510\n-2885,2963,7976,2886,3843,7977,4264, 632,2510, 875,3844,1697,3845,2291,7978,7979,  # 7526\n-4544,3010,1239, 580,4545,4265,7980, 914, 936,2074,1190,4032,1039,2123,7981,7982,  # 7542\n-7983,3386,1473,7984,1354,4266,3846,7985,2172,3064,4033, 915,3305,4267,4268,3306,  # 7558\n-1605,1834,7986,2739, 398,3601,4269,3847,4034, 328,1912,2847,4035,3848,1331,4270,  # 7574\n-3011, 937,4271,7987,3602,4036,4037,3387,2160,4546,3388, 524, 742, 538,3065,1012,  # 7590\n-7988,7989,3849,2461,7990, 658,1103, 225,3850,7991,7992,4547,7993,4548,7994,3236,  # 7606\n-1243,7995,4038, 963,2246,4549,7996,2705,3603,3161,7997,7998,2588,2327,7999,4550,  # 7622\n-8000,8001,8002,3489,3307, 957,3389,2540,2032,1930,2927,2462, 870,2018,3604,1746,  # 7638\n-2770,2771,2434,2463,8003,3851,8004,3723,3107,3724,3490,3390,3725,8005,1179,3066,  # 7654\n-8006,3162,2373,4272,3726,2541,3163,3108,2740,4039,8007,3391,1556,2542,2292, 977,  # 7670\n-2887,2033,4040,1205,3392,8008,1765,3393,3164,2124,1271,1689, 714,4551,3491,8009,  # 7686\n-2328,3852, 533,4273,3605,2181, 617,8010,2464,3308,3492,2310,8011,8012,3165,8013,  # 7702\n-8014,3853,1987, 618, 427,2641,3493,3394,8015,8016,1244,1690,8017,2806,4274,4552,  # 7718\n-8018,3494,8019,8020,2279,1576, 473,3606,4275,3395, 972,8021,3607,8022,3067,8023,  # 7734\n-8024,4553,4554,8025,3727,4041,4042,8026, 153,4555, 356,8027,1891,2888,4276,2143,  # 7750\n- 408, 803,2352,8028,3854,8029,4277,1646,2570,2511,4556,4557,3855,8030,3856,4278,  # 7766\n-8031,2411,3396, 752,8032,8033,1961,2964,8034, 746,3012,2465,8035,4279,3728, 698,  # 7782\n-4558,1892,4280,3608,2543,4559,3609,3857,8036,3166,3397,8037,1823,1302,4043,2706,  # 7798\n-3858,1973,4281,8038,4282,3167, 823,1303,1288,1236,2848,3495,4044,3398, 774,3859,  # 7814\n-8039,1581,4560,1304,2849,3860,4561,8040,2435,2161,1083,3237,4283,4045,4284, 344,  # 7830\n-1173, 288,2311, 454,1683,8041,8042,1461,4562,4046,2589,8043,8044,4563, 985, 894,  # 7846\n-8045,3399,3168,8046,1913,2928,3729,1988,8047,2110,1974,8048,4047,8049,2571,1194,  # 7862\n- 425,8050,4564,3169,1245,3730,4285,8051,8052,2850,8053, 636,4565,1855,3861, 760,  # 7878\n-1799,8054,4286,2209,1508,4566,4048,1893,1684,2293,8055,8056,8057,4287,4288,2210,  # 7894\n- 479,8058,8059, 832,8060,4049,2489,8061,2965,2490,3731, 990,3109, 627,1814,2642,  # 7910\n-4289,1582,4290,2125,2111,3496,4567,8062, 799,4291,3170,8063,4568,2112,1737,3013,  # 7926\n-1018, 543, 754,4292,3309,1676,4569,4570,4050,8064,1489,8065,3497,8066,2614,2889,  # 7942\n-4051,8067,8068,2966,8069,8070,8071,8072,3171,4571,4572,2182,1722,8073,3238,3239,  # 7958\n-1842,3610,1715, 481, 365,1975,1856,8074,8075,1962,2491,4573,8076,2126,3611,3240,  # 7974\n- 433,1894,2063,2075,8077, 602,2741,8078,8079,8080,8081,8082,3014,1628,3400,8083,  # 7990\n-3172,4574,4052,2890,4575,2512,8084,2544,2772,8085,8086,8087,3310,4576,2891,8088,  # 8006\n-4577,8089,2851,4578,4579,1221,2967,4053,2513,8090,8091,8092,1867,1989,8093,8094,  # 8022\n-8095,1895,8096,8097,4580,1896,4054, 318,8098,2094,4055,4293,8099,8100, 485,8101,  # 8038\n- 938,3862, 553,2670, 116,8102,3863,3612,8103,3498,2671,2773,3401,3311,2807,8104,  # 8054\n-3613,2929,4056,1747,2930,2968,8105,8106, 207,8107,8108,2672,4581,2514,8109,3015,  # 8070\n- 890,3614,3864,8110,1877,3732,3402,8111,2183,2353,3403,1652,8112,8113,8114, 941,  # 8086\n-2294, 208,3499,4057,2019, 330,4294,3865,2892,2492,3733,4295,8115,8116,8117,8118,  # 8102\n-)\n-\n\n@@ -1,46 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import EUCTWDistributionAnalysis\n-from .mbcssm import EUCTW_SM_MODEL\n-\n-class EUCTWProber(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(EUCTWProber, self).__init__()\n-        self.coding_sm = CodingStateMachine(EUCTW_SM_MODEL)\n-        self.distribution_analyzer = EUCTWDistributionAnalysis()\n-        self.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"EUC-TW\"\n-\n-    @property\n-    def language(self):\n-        return \"Taiwan\"\n\n@@ -1,283 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# GB2312 most frequently used character table\n-#\n-# Char to FreqOrder table , from hz6763\n-\n-# 512  --> 0.79  -- 0.79\n-# 1024 --> 0.92  -- 0.13\n-# 2048 --> 0.98  -- 0.06\n-# 6768 --> 1.00  -- 0.02\n-#\n-# Ideal Distribution Ratio = 0.79135/(1-0.79135) = 3.79\n-# Random Distribution Ration = 512 / (3755 - 512) = 0.157\n-#\n-# Typical Distribution Ratio about 25% of Ideal one, still much higher that RDR\n-\n-GB2312_TYPICAL_DISTRIBUTION_RATIO = 0.9\n-\n-GB2312_TABLE_SIZE = 3760\n-\n-GB2312_CHAR_TO_FREQ_ORDER = (\n-1671, 749,1443,2364,3924,3807,2330,3921,1704,3463,2691,1511,1515, 572,3191,2205,\n-2361, 224,2558, 479,1711, 963,3162, 440,4060,1905,2966,2947,3580,2647,3961,3842,\n-2204, 869,4207, 970,2678,5626,2944,2956,1479,4048, 514,3595, 588,1346,2820,3409,\n- 249,4088,1746,1873,2047,1774, 581,1813, 358,1174,3590,1014,1561,4844,2245, 670,\n-1636,3112, 889,1286, 953, 556,2327,3060,1290,3141, 613, 185,3477,1367, 850,3820,\n-1715,2428,2642,2303,2732,3041,2562,2648,3566,3946,1349, 388,3098,2091,1360,3585,\n- 152,1687,1539, 738,1559,  59,1232,2925,2267,1388,1249,1741,1679,2960, 151,1566,\n-1125,1352,4271, 924,4296, 385,3166,4459, 310,1245,2850,  70,3285,2729,3534,3575,\n-2398,3298,3466,1960,2265, 217,3647, 864,1909,2084,4401,2773,1010,3269,5152, 853,\n-3051,3121,1244,4251,1895, 364,1499,1540,2313,1180,3655,2268, 562, 715,2417,3061,\n- 544, 336,3768,2380,1752,4075, 950, 280,2425,4382, 183,2759,3272, 333,4297,2155,\n-1688,2356,1444,1039,4540, 736,1177,3349,2443,2368,2144,2225, 565, 196,1482,3406,\n- 927,1335,4147, 692, 878,1311,1653,3911,3622,1378,4200,1840,2969,3149,2126,1816,\n-2534,1546,2393,2760, 737,2494,  13, 447, 245,2747,  38,2765,2129,2589,1079, 606,\n- 360, 471,3755,2890, 404, 848, 699,1785,1236, 370,2221,1023,3746,2074,2026,2023,\n-2388,1581,2119, 812,1141,3091,2536,1519, 804,2053, 406,1596,1090, 784, 548,4414,\n-1806,2264,2936,1100, 343,4114,5096, 622,3358, 743,3668,1510,1626,5020,3567,2513,\n-3195,4115,5627,2489,2991,  24,2065,2697,1087,2719,  48,1634, 315,  68, 985,2052,\n- 198,2239,1347,1107,1439, 597,2366,2172, 871,3307, 919,2487,2790,1867, 236,2570,\n-1413,3794, 906,3365,3381,1701,1982,1818,1524,2924,1205, 616,2586,2072,2004, 575,\n- 253,3099,  32,1365,1182, 197,1714,2454,1201, 554,3388,3224,2748, 756,2587, 250,\n-2567,1507,1517,3529,1922,2761,2337,3416,1961,1677,2452,2238,3153, 615, 911,1506,\n-1474,2495,1265,1906,2749,3756,3280,2161, 898,2714,1759,3450,2243,2444, 563,  26,\n-3286,2266,3769,3344,2707,3677, 611,1402, 531,1028,2871,4548,1375, 261,2948, 835,\n-1190,4134, 353, 840,2684,1900,3082,1435,2109,1207,1674, 329,1872,2781,4055,2686,\n-2104, 608,3318,2423,2957,2768,1108,3739,3512,3271,3985,2203,1771,3520,1418,2054,\n-1681,1153, 225,1627,2929, 162,2050,2511,3687,1954, 124,1859,2431,1684,3032,2894,\n- 585,4805,3969,2869,2704,2088,2032,2095,3656,2635,4362,2209, 256, 518,2042,2105,\n-3777,3657, 643,2298,1148,1779, 190, 989,3544, 414,  11,2135,2063,2979,1471, 403,\n-3678, 126, 770,1563, 671,2499,3216,2877, 600,1179, 307,2805,4937,1268,1297,2694,\n- 252,4032,1448,1494,1331,1394, 127,2256, 222,1647,1035,1481,3056,1915,1048, 873,\n-3651, 210,  33,1608,2516, 200,1520, 415, 102,   0,3389,1287, 817,  91,3299,2940,\n- 836,1814, 549,2197,1396,1669,2987,3582,2297,2848,4528,1070, 687,  20,1819, 121,\n-1552,1364,1461,1968,2617,3540,2824,2083, 177, 948,4938,2291, 110,4549,2066, 648,\n-3359,1755,2110,2114,4642,4845,1693,3937,3308,1257,1869,2123, 208,1804,3159,2992,\n-2531,2549,3361,2418,1350,2347,2800,2568,1291,2036,2680,  72, 842,1990, 212,1233,\n-1154,1586,  75,2027,3410,4900,1823,1337,2710,2676, 728,2810,1522,3026,4995, 157,\n- 755,1050,4022, 710, 785,1936,2194,2085,1406,2777,2400, 150,1250,4049,1206, 807,\n-1910, 534, 529,3309,1721,1660, 274,  39,2827, 661,2670,1578, 925,3248,3815,1094,\n-4278,4901,4252,  41,1150,3747,2572,2227,4501,3658,4902,3813,3357,3617,2884,2258,\n- 887, 538,4187,3199,1294,2439,3042,2329,2343,2497,1255, 107, 543,1527, 521,3478,\n-3568, 194,5062,  15, 961,3870,1241,1192,2664,  66,5215,3260,2111,1295,1127,2152,\n-3805,4135, 901,1164,1976, 398,1278, 530,1460, 748, 904,1054,1966,1426,  53,2909,\n- 509, 523,2279,1534, 536,1019, 239,1685, 460,2353, 673,1065,2401,3600,4298,2272,\n-1272,2363, 284,1753,3679,4064,1695,  81, 815,2677,2757,2731,1386, 859, 500,4221,\n-2190,2566, 757,1006,2519,2068,1166,1455, 337,2654,3203,1863,1682,1914,3025,1252,\n-1409,1366, 847, 714,2834,2038,3209, 964,2970,1901, 885,2553,1078,1756,3049, 301,\n-1572,3326, 688,2130,1996,2429,1805,1648,2930,3421,2750,3652,3088, 262,1158,1254,\n- 389,1641,1812, 526,1719, 923,2073,1073,1902, 468, 489,4625,1140, 857,2375,3070,\n-3319,2863, 380, 116,1328,2693,1161,2244, 273,1212,1884,2769,3011,1775,1142, 461,\n-3066,1200,2147,2212, 790, 702,2695,4222,1601,1058, 434,2338,5153,3640,  67,2360,\n-4099,2502, 618,3472,1329, 416,1132, 830,2782,1807,2653,3211,3510,1662, 192,2124,\n- 296,3979,1739,1611,3684,  23, 118, 324, 446,1239,1225, 293,2520,3814,3795,2535,\n-3116,  17,1074, 467,2692,2201, 387,2922,  45,1326,3055,1645,3659,2817, 958, 243,\n-1903,2320,1339,2825,1784,3289, 356, 576, 865,2315,2381,3377,3916,1088,3122,1713,\n-1655, 935, 628,4689,1034,1327, 441, 800, 720, 894,1979,2183,1528,5289,2702,1071,\n-4046,3572,2399,1571,3281,  79, 761,1103, 327, 134, 758,1899,1371,1615, 879, 442,\n- 215,2605,2579, 173,2048,2485,1057,2975,3317,1097,2253,3801,4263,1403,1650,2946,\n- 814,4968,3487,1548,2644,1567,1285,   2, 295,2636,  97, 946,3576, 832, 141,4257,\n-3273, 760,3821,3521,3156,2607, 949,1024,1733,1516,1803,1920,2125,2283,2665,3180,\n-1501,2064,3560,2171,1592, 803,3518,1416, 732,3897,4258,1363,1362,2458, 119,1427,\n- 602,1525,2608,1605,1639,3175, 694,3064,  10, 465,  76,2000,4846,4208, 444,3781,\n-1619,3353,2206,1273,3796, 740,2483, 320,1723,2377,3660,2619,1359,1137,1762,1724,\n-2345,2842,1850,1862, 912, 821,1866, 612,2625,1735,2573,3369,1093, 844,  89, 937,\n- 930,1424,3564,2413,2972,1004,3046,3019,2011, 711,3171,1452,4178, 428, 801,1943,\n- 432, 445,2811, 206,4136,1472, 730, 349,  73, 397,2802,2547, 998,1637,1167, 789,\n- 396,3217, 154,1218, 716,1120,1780,2819,4826,1931,3334,3762,2139,1215,2627, 552,\n-3664,3628,3232,1405,2383,3111,1356,2652,3577,3320,3101,1703, 640,1045,1370,1246,\n-4996, 371,1575,2436,1621,2210, 984,4033,1734,2638,  16,4529, 663,2755,3255,1451,\n-3917,2257,1253,1955,2234,1263,2951, 214,1229, 617, 485, 359,1831,1969, 473,2310,\n- 750,2058, 165,  80,2864,2419, 361,4344,2416,2479,1134, 796,3726,1266,2943, 860,\n-2715, 938, 390,2734,1313,1384, 248, 202, 877,1064,2854, 522,3907, 279,1602, 297,\n-2357, 395,3740, 137,2075, 944,4089,2584,1267,3802,  62,1533,2285, 178, 176, 780,\n-2440, 201,3707, 590, 478,1560,4354,2117,1075,  30,  74,4643,4004,1635,1441,2745,\n- 776,2596, 238,1077,1692,1912,2844, 605, 499,1742,3947, 241,3053, 980,1749, 936,\n-2640,4511,2582, 515,1543,2162,5322,2892,2993, 890,2148,1924, 665,1827,3581,1032,\n- 968,3163, 339,1044,1896, 270, 583,1791,1720,4367,1194,3488,3669,  43,2523,1657,\n- 163,2167, 290,1209,1622,3378, 550, 634,2508,2510, 695,2634,2384,2512,1476,1414,\n- 220,1469,2341,2138,2852,3183,2900,4939,2865,3502,1211,3680, 854,3227,1299,2976,\n-3172, 186,2998,1459, 443,1067,3251,1495, 321,1932,3054, 909, 753,1410,1828, 436,\n-2441,1119,1587,3164,2186,1258, 227, 231,1425,1890,3200,3942, 247, 959, 725,5254,\n-2741, 577,2158,2079, 929, 120, 174, 838,2813, 591,1115, 417,2024,  40,3240,1536,\n-1037, 291,4151,2354, 632,1298,2406,2500,3535,1825,1846,3451, 205,1171, 345,4238,\n-  18,1163, 811, 685,2208,1217, 425,1312,1508,1175,4308,2552,1033, 587,1381,3059,\n-2984,3482, 340,1316,4023,3972, 792,3176, 519, 777,4690, 918, 933,4130,2981,3741,\n-  90,3360,2911,2200,5184,4550, 609,3079,2030, 272,3379,2736, 363,3881,1130,1447,\n- 286, 779, 357,1169,3350,3137,1630,1220,2687,2391, 747,1277,3688,2618,2682,2601,\n-1156,3196,5290,4034,3102,1689,3596,3128, 874, 219,2783, 798, 508,1843,2461, 269,\n-1658,1776,1392,1913,2983,3287,2866,2159,2372, 829,4076,  46,4253,2873,1889,1894,\n- 915,1834,1631,2181,2318, 298, 664,2818,3555,2735, 954,3228,3117, 527,3511,2173,\n- 681,2712,3033,2247,2346,3467,1652, 155,2164,3382, 113,1994, 450, 899, 494, 994,\n-1237,2958,1875,2336,1926,3727, 545,1577,1550, 633,3473, 204,1305,3072,2410,1956,\n-2471, 707,2134, 841,2195,2196,2663,3843,1026,4940, 990,3252,4997, 368,1092, 437,\n-3212,3258,1933,1829, 675,2977,2893, 412, 943,3723,4644,3294,3283,2230,2373,5154,\n-2389,2241,2661,2323,1404,2524, 593, 787, 677,3008,1275,2059, 438,2709,2609,2240,\n-2269,2246,1446,  36,1568,1373,3892,1574,2301,1456,3962, 693,2276,5216,2035,1143,\n-2720,1919,1797,1811,2763,4137,2597,1830,1699,1488,1198,2090, 424,1694, 312,3634,\n-3390,4179,3335,2252,1214, 561,1059,3243,2295,2561, 975,5155,2321,2751,3772, 472,\n-1537,3282,3398,1047,2077,2348,2878,1323,3340,3076, 690,2906,  51, 369, 170,3541,\n-1060,2187,2688,3670,2541,1083,1683, 928,3918, 459, 109,4427, 599,3744,4286, 143,\n-2101,2730,2490,  82,1588,3036,2121, 281,1860, 477,4035,1238,2812,3020,2716,3312,\n-1530,2188,2055,1317, 843, 636,1808,1173,3495, 649, 181,1002, 147,3641,1159,2414,\n-3750,2289,2795, 813,3123,2610,1136,4368,   5,3391,4541,2174, 420, 429,1728, 754,\n-1228,2115,2219, 347,2223,2733, 735,1518,3003,2355,3134,1764,3948,3329,1888,2424,\n-1001,1234,1972,3321,3363,1672,1021,1450,1584, 226, 765, 655,2526,3404,3244,2302,\n-3665, 731, 594,2184, 319,1576, 621, 658,2656,4299,2099,3864,1279,2071,2598,2739,\n- 795,3086,3699,3908,1707,2352,2402,1382,3136,2475,1465,4847,3496,3865,1085,3004,\n-2591,1084, 213,2287,1963,3565,2250, 822, 793,4574,3187,1772,1789,3050, 595,1484,\n-1959,2770,1080,2650, 456, 422,2996, 940,3322,4328,4345,3092,2742, 965,2784, 739,\n-4124, 952,1358,2498,2949,2565, 332,2698,2378, 660,2260,2473,4194,3856,2919, 535,\n-1260,2651,1208,1428,1300,1949,1303,2942, 433,2455,2450,1251,1946, 614,1269, 641,\n-1306,1810,2737,3078,2912, 564,2365,1419,1415,1497,4460,2367,2185,1379,3005,1307,\n-3218,2175,1897,3063, 682,1157,4040,4005,1712,1160,1941,1399, 394, 402,2952,1573,\n-1151,2986,2404, 862, 299,2033,1489,3006, 346, 171,2886,3401,1726,2932, 168,2533,\n-  47,2507,1030,3735,1145,3370,1395,1318,1579,3609,4560,2857,4116,1457,2529,1965,\n- 504,1036,2690,2988,2405, 745,5871, 849,2397,2056,3081, 863,2359,3857,2096,  99,\n-1397,1769,2300,4428,1643,3455,1978,1757,3718,1440,  35,4879,3742,1296,4228,2280,\n- 160,5063,1599,2013, 166, 520,3479,1646,3345,3012, 490,1937,1545,1264,2182,2505,\n-1096,1188,1369,1436,2421,1667,2792,2460,1270,2122, 727,3167,2143, 806,1706,1012,\n-1800,3037, 960,2218,1882, 805, 139,2456,1139,1521, 851,1052,3093,3089, 342,2039,\n- 744,5097,1468,1502,1585,2087, 223, 939, 326,2140,2577, 892,2481,1623,4077, 982,\n-3708, 135,2131,  87,2503,3114,2326,1106, 876,1616, 547,2997,2831,2093,3441,4530,\n-4314,   9,3256,4229,4148, 659,1462,1986,1710,2046,2913,2231,4090,4880,5255,3392,\n-3274,1368,3689,4645,1477, 705,3384,3635,1068,1529,2941,1458,3782,1509, 100,1656,\n-2548, 718,2339, 408,1590,2780,3548,1838,4117,3719,1345,3530, 717,3442,2778,3220,\n-2898,1892,4590,3614,3371,2043,1998,1224,3483, 891, 635, 584,2559,3355, 733,1766,\n-1729,1172,3789,1891,2307, 781,2982,2271,1957,1580,5773,2633,2005,4195,3097,1535,\n-3213,1189,1934,5693,3262, 586,3118,1324,1598, 517,1564,2217,1868,1893,4445,3728,\n-2703,3139,1526,1787,1992,3882,2875,1549,1199,1056,2224,1904,2711,5098,4287, 338,\n-1993,3129,3489,2689,1809,2815,1997, 957,1855,3898,2550,3275,3057,1105,1319, 627,\n-1505,1911,1883,3526, 698,3629,3456,1833,1431, 746,  77,1261,2017,2296,1977,1885,\n- 125,1334,1600, 525,1798,1109,2222,1470,1945, 559,2236,1186,3443,2476,1929,1411,\n-2411,3135,1777,3372,2621,1841,1613,3229, 668,1430,1839,2643,2916, 195,1989,2671,\n-2358,1387, 629,3205,2293,5256,4439, 123,1310, 888,1879,4300,3021,3605,1003,1162,\n-3192,2910,2010, 140,2395,2859,  55,1082,2012,2901, 662, 419,2081,1438, 680,2774,\n-4654,3912,1620,1731,1625,5035,4065,2328, 512,1344, 802,5443,2163,2311,2537, 524,\n-3399,  98,1155,2103,1918,2606,3925,2816,1393,2465,1504,3773,2177,3963,1478,4346,\n- 180,1113,4655,3461,2028,1698, 833,2696,1235,1322,1594,4408,3623,3013,3225,2040,\n-3022, 541,2881, 607,3632,2029,1665,1219, 639,1385,1686,1099,2803,3231,1938,3188,\n-2858, 427, 676,2772,1168,2025, 454,3253,2486,3556, 230,1950, 580, 791,1991,1280,\n-1086,1974,2034, 630, 257,3338,2788,4903,1017,  86,4790, 966,2789,1995,1696,1131,\n- 259,3095,4188,1308, 179,1463,5257, 289,4107,1248,  42,3413,1725,2288, 896,1947,\n- 774,4474,4254, 604,3430,4264, 392,2514,2588, 452, 237,1408,3018, 988,4531,1970,\n-3034,3310, 540,2370,1562,1288,2990, 502,4765,1147,   4,1853,2708, 207, 294,2814,\n-4078,2902,2509, 684,  34,3105,3532,2551, 644, 709,2801,2344, 573,1727,3573,3557,\n-2021,1081,3100,4315,2100,3681, 199,2263,1837,2385, 146,3484,1195,2776,3949, 997,\n-1939,3973,1008,1091,1202,1962,1847,1149,4209,5444,1076, 493, 117,5400,2521, 972,\n-1490,2934,1796,4542,2374,1512,2933,2657, 413,2888,1135,2762,2314,2156,1355,2369,\n- 766,2007,2527,2170,3124,2491,2593,2632,4757,2437, 234,3125,3591,1898,1750,1376,\n-1942,3468,3138, 570,2127,2145,3276,4131, 962, 132,1445,4196,  19, 941,3624,3480,\n-3366,1973,1374,4461,3431,2629, 283,2415,2275, 808,2887,3620,2112,2563,1353,3610,\n- 955,1089,3103,1053,  96,  88,4097, 823,3808,1583, 399, 292,4091,3313, 421,1128,\n- 642,4006, 903,2539,1877,2082, 596,  29,4066,1790, 722,2157, 130, 995,1569, 769,\n-1485, 464, 513,2213, 288,1923,1101,2453,4316, 133, 486,2445,  50, 625, 487,2207,\n-  57, 423, 481,2962, 159,3729,1558, 491, 303, 482, 501, 240,2837, 112,3648,2392,\n-1783, 362,   8,3433,3422, 610,2793,3277,1390,1284,1654,  21,3823, 734, 367, 623,\n- 193, 287, 374,1009,1483, 816, 476, 313,2255,2340,1262,2150,2899,1146,2581, 782,\n-2116,1659,2018,1880, 255,3586,3314,1110,2867,2137,2564, 986,2767,5185,2006, 650,\n- 158, 926, 762, 881,3157,2717,2362,3587, 306,3690,3245,1542,3077,2427,1691,2478,\n-2118,2985,3490,2438, 539,2305, 983, 129,1754, 355,4201,2386, 827,2923, 104,1773,\n-2838,2771, 411,2905,3919, 376, 767, 122,1114, 828,2422,1817,3506, 266,3460,1007,\n-1609,4998, 945,2612,4429,2274, 726,1247,1964,2914,2199,2070,4002,4108, 657,3323,\n-1422, 579, 455,2764,4737,1222,2895,1670, 824,1223,1487,2525, 558, 861,3080, 598,\n-2659,2515,1967, 752,2583,2376,2214,4180, 977, 704,2464,4999,2622,4109,1210,2961,\n- 819,1541, 142,2284,  44, 418, 457,1126,3730,4347,4626,1644,1876,3671,1864, 302,\n-1063,5694, 624, 723,1984,3745,1314,1676,2488,1610,1449,3558,3569,2166,2098, 409,\n-1011,2325,3704,2306, 818,1732,1383,1824,1844,3757, 999,2705,3497,1216,1423,2683,\n-2426,2954,2501,2726,2229,1475,2554,5064,1971,1794,1666,2014,1343, 783, 724, 191,\n-2434,1354,2220,5065,1763,2752,2472,4152, 131, 175,2885,3434,  92,1466,4920,2616,\n-3871,3872,3866, 128,1551,1632, 669,1854,3682,4691,4125,1230, 188,2973,3290,1302,\n-1213, 560,3266, 917, 763,3909,3249,1760, 868,1958, 764,1782,2097, 145,2277,3774,\n-4462,  64,1491,3062, 971,2132,3606,2442, 221,1226,1617, 218, 323,1185,3207,3147,\n- 571, 619,1473,1005,1744,2281, 449,1887,2396,3685, 275, 375,3816,1743,3844,3731,\n- 845,1983,2350,4210,1377, 773, 967,3499,3052,3743,2725,4007,1697,1022,3943,1464,\n-3264,2855,2722,1952,1029,2839,2467,  84,4383,2215, 820,1391,2015,2448,3672, 377,\n-1948,2168, 797,2545,3536,2578,2645,  94,2874,1678, 405,1259,3071, 771, 546,1315,\n- 470,1243,3083, 895,2468, 981, 969,2037, 846,4181, 653,1276,2928,  14,2594, 557,\n-3007,2474, 156, 902,1338,1740,2574, 537,2518, 973,2282,2216,2433,1928, 138,2903,\n-1293,2631,1612, 646,3457, 839,2935, 111, 496,2191,2847, 589,3186, 149,3994,2060,\n-4031,2641,4067,3145,1870,  37,3597,2136,1025,2051,3009,3383,3549,1121,1016,3261,\n-1301, 251,2446,2599,2153, 872,3246, 637, 334,3705, 831, 884, 921,3065,3140,4092,\n-2198,1944, 246,2964, 108,2045,1152,1921,2308,1031, 203,3173,4170,1907,3890, 810,\n-1401,2003,1690, 506, 647,1242,2828,1761,1649,3208,2249,1589,3709,2931,5156,1708,\n- 498, 666,2613, 834,3817,1231, 184,2851,1124, 883,3197,2261,3710,1765,1553,2658,\n-1178,2639,2351,  93,1193, 942,2538,2141,4402, 235,1821, 870,1591,2192,1709,1871,\n-3341,1618,4126,2595,2334, 603, 651,  69, 701, 268,2662,3411,2555,1380,1606, 503,\n- 448, 254,2371,2646, 574,1187,2309,1770, 322,2235,1292,1801, 305, 566,1133, 229,\n-2067,2057, 706, 167, 483,2002,2672,3295,1820,3561,3067, 316, 378,2746,3452,1112,\n- 136,1981, 507,1651,2917,1117, 285,4591, 182,2580,3522,1304, 335,3303,1835,2504,\n-1795,1792,2248, 674,1018,2106,2449,1857,2292,2845, 976,3047,1781,2600,2727,1389,\n-1281,  52,3152, 153, 265,3950, 672,3485,3951,4463, 430,1183, 365, 278,2169,  27,\n-1407,1336,2304, 209,1340,1730,2202,1852,2403,2883, 979,1737,1062, 631,2829,2542,\n-3876,2592, 825,2086,2226,3048,3625, 352,1417,3724, 542, 991, 431,1351,3938,1861,\n-2294, 826,1361,2927,3142,3503,1738, 463,2462,2723, 582,1916,1595,2808, 400,3845,\n-3891,2868,3621,2254,  58,2492,1123, 910,2160,2614,1372,1603,1196,1072,3385,1700,\n-3267,1980, 696, 480,2430, 920, 799,1570,2920,1951,2041,4047,2540,1321,4223,2469,\n-3562,2228,1271,2602, 401,2833,3351,2575,5157, 907,2312,1256, 410, 263,3507,1582,\n- 996, 678,1849,2316,1480, 908,3545,2237, 703,2322, 667,1826,2849,1531,2604,2999,\n-2407,3146,2151,2630,1786,3711, 469,3542, 497,3899,2409, 858, 837,4446,3393,1274,\n- 786, 620,1845,2001,3311, 484, 308,3367,1204,1815,3691,2332,1532,2557,1842,2020,\n-2724,1927,2333,4440, 567,  22,1673,2728,4475,1987,1858,1144,1597, 101,1832,3601,\n-  12, 974,3783,4391, 951,1412,   1,3720, 453,4608,4041, 528,1041,1027,3230,2628,\n-1129, 875,1051,3291,1203,2262,1069,2860,2799,2149,2615,3278, 144,1758,3040,  31,\n- 475,1680, 366,2685,3184, 311,1642,4008,2466,5036,1593,1493,2809, 216,1420,1668,\n- 233, 304,2128,3284, 232,1429,1768,1040,2008,3407,2740,2967,2543, 242,2133, 778,\n-1565,2022,2620, 505,2189,2756,1098,2273, 372,1614, 708, 553,2846,2094,2278, 169,\n-3626,2835,4161, 228,2674,3165, 809,1454,1309, 466,1705,1095, 900,3423, 880,2667,\n-3751,5258,2317,3109,2571,4317,2766,1503,1342, 866,4447,1118,  63,2076, 314,1881,\n-1348,1061, 172, 978,3515,1747, 532, 511,3970,   6, 601, 905,2699,3300,1751, 276,\n-1467,3725,2668,  65,4239,2544,2779,2556,1604, 578,2451,1802, 992,2331,2624,1320,\n-3446, 713,1513,1013, 103,2786,2447,1661, 886,1702, 916, 654,3574,2031,1556, 751,\n-2178,2821,2179,1498,1538,2176, 271, 914,2251,2080,1325, 638,1953,2937,3877,2432,\n-2754,  95,3265,1716, 260,1227,4083, 775, 106,1357,3254, 426,1607, 555,2480, 772,\n-1985, 244,2546, 474, 495,1046,2611,1851,2061,  71,2089,1675,2590, 742,3758,2843,\n-3222,1433, 267,2180,2576,2826,2233,2092,3913,2435, 956,1745,3075, 856,2113,1116,\n- 451,   3,1988,2896,1398, 993,2463,1878,2049,1341,2718,2721,2870,2108, 712,2904,\n-4363,2753,2324, 277,2872,2349,2649, 384, 987, 435, 691,3000, 922, 164,3939, 652,\n-1500,1184,4153,2482,3373,2165,4848,2335,3775,3508,3154,2806,2830,1554,2102,1664,\n-2530,1434,2408, 893,1547,2623,3447,2832,2242,2532,3169,2856,3223,2078,  49,3770,\n-3469, 462, 318, 656,2259,3250,3069, 679,1629,2758, 344,1138,1104,3120,1836,1283,\n-3115,2154,1437,4448, 934, 759,1999, 794,2862,1038, 533,2560,1722,2342, 855,2626,\n-1197,1663,4476,3127,  85,4240,2528,  25,1111,1181,3673, 407,3470,4561,2679,2713,\n- 768,1925,2841,3986,1544,1165, 932, 373,1240,2146,1930,2673, 721,4766, 354,4333,\n- 391,2963, 187,  61,3364,1442,1102, 330,1940,1767, 341,3809,4118, 393,2496,2062,\n-2211, 105, 331, 300, 439, 913,1332, 626, 379,3304,1557, 328, 689,3952, 309,1555,\n- 931, 317,2517,3027, 325, 569, 686,2107,3084,  60,1042,1333,2794, 264,3177,4014,\n-1628, 258,3712,   7,4464,1176,1043,1778, 683, 114,1975,  78,1492, 383,1886, 510,\n- 386, 645,5291,2891,2069,3305,4138,3867,2939,2603,2493,1935,1066,1848,3588,1015,\n-1282,1289,4609, 697,1453,3044,2666,3611,1856,2412,  54, 719,1330, 568,3778,2459,\n-1748, 788, 492, 551,1191,1000, 488,3394,3763, 282,1799, 348,2016,1523,3155,2390,\n-1049, 382,2019,1788,1170, 729,2968,3523, 897,3926,2785,2938,3292, 350,2319,3238,\n-1718,1717,2655,3453,3143,4465, 161,2889,2980,2009,1421,  56,1908,1640,2387,2232,\n-1917,1874,2477,4921, 148,  83,3438, 592,4245,2882,1822,1055, 741, 115,1496,1624,\n- 381,1638,4592,1020, 516,3214, 458, 947,4575,1432, 211,1514,2926,1865,2142, 189,\n- 852,1221,1400,1486, 882,2299,4036, 351,  28,1122, 700,6479,6480,6481,6482,6483,  #last 512\n-)\n-\n\n@@ -1,46 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import GB2312DistributionAnalysis\n-from .mbcssm import GB2312_SM_MODEL\n-\n-class GB2312Prober(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(GB2312Prober, self).__init__()\n-        self.coding_sm = CodingStateMachine(GB2312_SM_MODEL)\n-        self.distribution_analyzer = GB2312DistributionAnalysis()\n-        self.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return \"GB2312\"\n-\n-    @property\n-    def language(self):\n-        return \"Chinese\"\n\n@@ -1,292 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-#          Shy Shalom\n-# Portions created by the Initial Developer are Copyright (C) 2005\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .enums import ProbingState\n-\n-# This prober doesn't actually recognize a language or a charset.\n-# It is a helper prober for the use of the Hebrew model probers\n-\n-### General ideas of the Hebrew charset recognition ###\n-#\n-# Four main charsets exist in Hebrew:\n-# \"ISO-8859-8\" - Visual Hebrew\n-# \"windows-1255\" - Logical Hebrew\n-# \"ISO-8859-8-I\" - Logical Hebrew\n-# \"x-mac-hebrew\" - ?? Logical Hebrew ??\n-#\n-# Both \"ISO\" charsets use a completely identical set of code points, whereas\n-# \"windows-1255\" and \"x-mac-hebrew\" are two different proper supersets of\n-# these code points. windows-1255 defines additional characters in the range\n-# 0x80-0x9F as some misc punctuation marks as well as some Hebrew-specific\n-# diacritics and additional 'Yiddish' ligature letters in the range 0xc0-0xd6.\n-# x-mac-hebrew defines similar additional code points but with a different\n-# mapping.\n-#\n-# As far as an average Hebrew text with no diacritics is concerned, all four\n-# charsets are identical with respect to code points. Meaning that for the\n-# main Hebrew alphabet, all four map the same values to all 27 Hebrew letters\n-# (including final letters).\n-#\n-# The dominant difference between these charsets is their directionality.\n-# \"Visual\" directionality means that the text is ordered as if the renderer is\n-# not aware of a BIDI rendering algorithm. The renderer sees the text and\n-# draws it from left to right. The text itself when ordered naturally is read\n-# backwards. A buffer of Visual Hebrew generally looks like so:\n-# \"[last word of first line spelled backwards] [whole line ordered backwards\n-# and spelled backwards] [first word of first line spelled backwards]\n-# [end of line] [last word of second line] ... etc' \"\n-# adding punctuation marks, numbers and English text to visual text is\n-# naturally also \"visual\" and from left to right.\n-#\n-# \"Logical\" directionality means the text is ordered \"naturally\" according to\n-# the order it is read. It is the responsibility of the renderer to display\n-# the text from right to left. A BIDI algorithm is used to place general\n-# punctuation marks, numbers and English text in the text.\n-#\n-# Texts in x-mac-hebrew are almost impossible to find on the Internet. From\n-# what little evidence I could find, it seems that its general directionality\n-# is Logical.\n-#\n-# To sum up all of the above, the Hebrew probing mechanism knows about two\n-# charsets:\n-# Visual Hebrew - \"ISO-8859-8\" - backwards text - Words and sentences are\n-#    backwards while line order is natural. For charset recognition purposes\n-#    the line order is unimportant (In fact, for this implementation, even\n-#    word order is unimportant).\n-# Logical Hebrew - \"windows-1255\" - normal, naturally ordered text.\n-#\n-# \"ISO-8859-8-I\" is a subset of windows-1255 and doesn't need to be\n-#    specifically identified.\n-# \"x-mac-hebrew\" is also identified as windows-1255. A text in x-mac-hebrew\n-#    that contain special punctuation marks or diacritics is displayed with\n-#    some unconverted characters showing as question marks. This problem might\n-#    be corrected using another model prober for x-mac-hebrew. Due to the fact\n-#    that x-mac-hebrew texts are so rare, writing another model prober isn't\n-#    worth the effort and performance hit.\n-#\n-#### The Prober ####\n-#\n-# The prober is divided between two SBCharSetProbers and a HebrewProber,\n-# all of which are managed, created, fed data, inquired and deleted by the\n-# SBCSGroupProber. The two SBCharSetProbers identify that the text is in\n-# fact some kind of Hebrew, Logical or Visual. The final decision about which\n-# one is it is made by the HebrewProber by combining final-letter scores\n-# with the scores of the two SBCharSetProbers to produce a final answer.\n-#\n-# The SBCSGroupProber is responsible for stripping the original text of HTML\n-# tags, English characters, numbers, low-ASCII punctuation characters, spaces\n-# and new lines. It reduces any sequence of such characters to a single space.\n-# The buffer fed to each prober in the SBCS group prober is pure text in\n-# high-ASCII.\n-# The two SBCharSetProbers (model probers) share the same language model:\n-# Win1255Model.\n-# The first SBCharSetProber uses the model normally as any other\n-# SBCharSetProber does, to recognize windows-1255, upon which this model was\n-# built. The second SBCharSetProber is told to make the pair-of-letter\n-# lookup in the language model backwards. This in practice exactly simulates\n-# a visual Hebrew model using the windows-1255 logical Hebrew model.\n-#\n-# The HebrewProber is not using any language model. All it does is look for\n-# final-letter evidence suggesting the text is either logical Hebrew or visual\n-# Hebrew. Disjointed from the model probers, the results of the HebrewProber\n-# alone are meaningless. HebrewProber always returns 0.00 as confidence\n-# since it never identifies a charset by itself. Instead, the pointer to the\n-# HebrewProber is passed to the model probers as a helper \"Name Prober\".\n-# When the Group prober receives a positive identification from any prober,\n-# it asks for the name of the charset identified. If the prober queried is a\n-# Hebrew model prober, the model prober forwards the call to the\n-# HebrewProber to make the final decision. In the HebrewProber, the\n-# decision is made according to the final-letters scores maintained and Both\n-# model probers scores. The answer is returned in the form of the name of the\n-# charset identified, either \"windows-1255\" or \"ISO-8859-8\".\n-\n-class HebrewProber(CharSetProber):\n-    # windows-1255 / ISO-8859-8 code points of interest\n-    FINAL_KAF = 0xea\n-    NORMAL_KAF = 0xeb\n-    FINAL_MEM = 0xed\n-    NORMAL_MEM = 0xee\n-    FINAL_NUN = 0xef\n-    NORMAL_NUN = 0xf0\n-    FINAL_PE = 0xf3\n-    NORMAL_PE = 0xf4\n-    FINAL_TSADI = 0xf5\n-    NORMAL_TSADI = 0xf6\n-\n-    # Minimum Visual vs Logical final letter score difference.\n-    # If the difference is below this, don't rely solely on the final letter score\n-    # distance.\n-    MIN_FINAL_CHAR_DISTANCE = 5\n-\n-    # Minimum Visual vs Logical model score difference.\n-    # If the difference is below this, don't rely at all on the model score\n-    # distance.\n-    MIN_MODEL_DISTANCE = 0.01\n-\n-    VISUAL_HEBREW_NAME = \"ISO-8859-8\"\n-    LOGICAL_HEBREW_NAME = \"windows-1255\"\n-\n-    def __init__(self):\n-        super(HebrewProber, self).__init__()\n-        self._final_char_logical_score = None\n-        self._final_char_visual_score = None\n-        self._prev = None\n-        self._before_prev = None\n-        self._logical_prober = None\n-        self._visual_prober = None\n-        self.reset()\n-\n-    def reset(self):\n-        self._final_char_logical_score = 0\n-        self._final_char_visual_score = 0\n-        # The two last characters seen in the previous buffer,\n-        # mPrev and mBeforePrev are initialized to space in order to simulate\n-        # a word delimiter at the beginning of the data\n-        self._prev = ' '\n-        self._before_prev = ' '\n-        # These probers are owned by the group prober.\n-\n-    def set_model_probers(self, logicalProber, visualProber):\n-        self._logical_prober = logicalProber\n-        self._visual_prober = visualProber\n-\n-    def is_final(self, c):\n-        return c in [self.FINAL_KAF, self.FINAL_MEM, self.FINAL_NUN,\n-                     self.FINAL_PE, self.FINAL_TSADI]\n-\n-    def is_non_final(self, c):\n-        # The normal Tsadi is not a good Non-Final letter due to words like\n-        # 'lechotet' (to chat) containing an apostrophe after the tsadi. This\n-        # apostrophe is converted to a space in FilterWithoutEnglishLetters\n-        # causing the Non-Final tsadi to appear at an end of a word even\n-        # though this is not the case in the original text.\n-        # The letters Pe and Kaf rarely display a related behavior of not being\n-        # a good Non-Final letter. Words like 'Pop', 'Winamp' and 'Mubarak'\n-        # for example legally end with a Non-Final Pe or Kaf. However, the\n-        # benefit of these letters as Non-Final letters outweighs the damage\n-        # since these words are quite rare.\n-        return c in [self.NORMAL_KAF, self.NORMAL_MEM,\n-                     self.NORMAL_NUN, self.NORMAL_PE]\n-\n-    def feed(self, byte_str):\n-        # Final letter analysis for logical-visual decision.\n-        # Look for evidence that the received buffer is either logical Hebrew\n-        # or visual Hebrew.\n-        # The following cases are checked:\n-        # 1) A word longer than 1 letter, ending with a final letter. This is\n-        #    an indication that the text is laid out \"naturally\" since the\n-        #    final letter really appears at the end. +1 for logical score.\n-        # 2) A word longer than 1 letter, ending with a Non-Final letter. In\n-        #    normal Hebrew, words ending with Kaf, Mem, Nun, Pe or Tsadi,\n-        #    should not end with the Non-Final form of that letter. Exceptions\n-        #    to this rule are mentioned above in isNonFinal(). This is an\n-        #    indication that the text is laid out backwards. +1 for visual\n-        #    score\n-        # 3) A word longer than 1 letter, starting with a final letter. Final\n-        #    letters should not appear at the beginning of a word. This is an\n-        #    indication that the text is laid out backwards. +1 for visual\n-        #    score.\n-        #\n-        # The visual score and logical score are accumulated throughout the\n-        # text and are finally checked against each other in GetCharSetName().\n-        # No checking for final letters in the middle of words is done since\n-        # that case is not an indication for either Logical or Visual text.\n-        #\n-        # We automatically filter out all 7-bit characters (replace them with\n-        # spaces) so the word boundary detection works properly. [MAP]\n-\n-        if self.state == ProbingState.NOT_ME:\n-            # Both model probers say it's not them. No reason to continue.\n-            return ProbingState.NOT_ME\n-\n-        byte_str = self.filter_high_byte_only(byte_str)\n-\n-        for cur in byte_str:\n-            if cur == ' ':\n-                # We stand on a space - a word just ended\n-                if self._before_prev != ' ':\n-                    # next-to-last char was not a space so self._prev is not a\n-                    # 1 letter word\n-                    if self.is_final(self._prev):\n-                        # case (1) [-2:not space][-1:final letter][cur:space]\n-                        self._final_char_logical_score += 1\n-                    elif self.is_non_final(self._prev):\n-                        # case (2) [-2:not space][-1:Non-Final letter][\n-                        #  cur:space]\n-                        self._final_char_visual_score += 1\n-            else:\n-                # Not standing on a space\n-                if ((self._before_prev == ' ') and\n-                        (self.is_final(self._prev)) and (cur != ' ')):\n-                    # case (3) [-2:space][-1:final letter][cur:not space]\n-                    self._final_char_visual_score += 1\n-            self._before_prev = self._prev\n-            self._prev = cur\n-\n-        # Forever detecting, till the end or until both model probers return\n-        # ProbingState.NOT_ME (handled above)\n-        return ProbingState.DETECTING\n-\n-    @property\n-    def charset_name(self):\n-        # Make the decision: is it Logical or Visual?\n-        # If the final letter score distance is dominant enough, rely on it.\n-        finalsub = self._final_char_logical_score - self._final_char_visual_score\n-        if finalsub >= self.MIN_FINAL_CHAR_DISTANCE:\n-            return self.LOGICAL_HEBREW_NAME\n-        if finalsub <= -self.MIN_FINAL_CHAR_DISTANCE:\n-            return self.VISUAL_HEBREW_NAME\n-\n-        # It's not dominant enough, try to rely on the model scores instead.\n-        modelsub = (self._logical_prober.get_confidence()\n-                    - self._visual_prober.get_confidence())\n-        if modelsub > self.MIN_MODEL_DISTANCE:\n-            return self.LOGICAL_HEBREW_NAME\n-        if modelsub < -self.MIN_MODEL_DISTANCE:\n-            return self.VISUAL_HEBREW_NAME\n-\n-        # Still no good, back to final letter distance, maybe it'll save the\n-        # day.\n-        if finalsub < 0.0:\n-            return self.VISUAL_HEBREW_NAME\n-\n-        # (finalsub > 0 - Logical) or (don't know what to do) default to\n-        # Logical.\n-        return self.LOGICAL_HEBREW_NAME\n-\n-    @property\n-    def language(self):\n-        return 'Hebrew'\n-\n-    @property\n-    def state(self):\n-        # Remain active as long as any of the model probers are active.\n-        if (self._logical_prober.state == ProbingState.NOT_ME) and \\\n-           (self._visual_prober.state == ProbingState.NOT_ME):\n-            return ProbingState.NOT_ME\n-        return ProbingState.DETECTING\n\n@@ -1,325 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# Sampling from about 20M text materials include literature and computer technology\n-#\n-# Japanese frequency table, applied to both S-JIS and EUC-JP\n-# They are sorted in order.\n-\n-# 128  --> 0.77094\n-# 256  --> 0.85710\n-# 512  --> 0.92635\n-# 1024 --> 0.97130\n-# 2048 --> 0.99431\n-#\n-# Ideal Distribution Ratio = 0.92635 / (1-0.92635) = 12.58\n-# Random Distribution Ration = 512 / (2965+62+83+86-512) = 0.191\n-#\n-# Typical Distribution Ratio, 25% of IDR\n-\n-JIS_TYPICAL_DISTRIBUTION_RATIO = 3.0\n-\n-# Char to FreqOrder table ,\n-JIS_TABLE_SIZE = 4368\n-\n-JIS_CHAR_TO_FREQ_ORDER = (\n-  40,   1,   6, 182, 152, 180, 295,2127, 285, 381,3295,4304,3068,4606,3165,3510, #   16\n-3511,1822,2785,4607,1193,2226,5070,4608, 171,2996,1247,  18, 179,5071, 856,1661, #   32\n-1262,5072, 619, 127,3431,3512,3230,1899,1700, 232, 228,1294,1298, 284, 283,2041, #   48\n-2042,1061,1062,  48,  49,  44,  45, 433, 434,1040,1041, 996, 787,2997,1255,4305, #   64\n-2108,4609,1684,1648,5073,5074,5075,5076,5077,5078,3687,5079,4610,5080,3927,3928, #   80\n-5081,3296,3432, 290,2285,1471,2187,5082,2580,2825,1303,2140,1739,1445,2691,3375, #   96\n-1691,3297,4306,4307,4611, 452,3376,1182,2713,3688,3069,4308,5083,5084,5085,5086, #  112\n-5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102, #  128\n-5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,4097,5113,5114,5115,5116,5117, #  144\n-5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133, #  160\n-5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149, #  176\n-5150,5151,5152,4612,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164, #  192\n-5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,1472, 598, 618, 820,1205, #  208\n-1309,1412,1858,1307,1692,5176,5177,5178,5179,5180,5181,5182,1142,1452,1234,1172, #  224\n-1875,2043,2149,1793,1382,2973, 925,2404,1067,1241, 960,1377,2935,1491, 919,1217, #  240\n-1865,2030,1406,1499,2749,4098,5183,5184,5185,5186,5187,5188,2561,4099,3117,1804, #  256\n-2049,3689,4309,3513,1663,5189,3166,3118,3298,1587,1561,3433,5190,3119,1625,2998, #  272\n-3299,4613,1766,3690,2786,4614,5191,5192,5193,5194,2161,  26,3377,   2,3929,  20, #  288\n-3691,  47,4100,  50,  17,  16,  35, 268,  27, 243,  42, 155,  24, 154,  29, 184, #  304\n-   4,  91,  14,  92,  53, 396,  33, 289,   9,  37,  64, 620,  21,  39, 321,   5, #  320\n-  12,  11,  52,  13,   3, 208, 138,   0,   7,  60, 526, 141, 151,1069, 181, 275, #  336\n-1591,  83, 132,1475, 126, 331, 829,  15,  69, 160,  59,  22, 157,  55,1079, 312, #  352\n- 109,  38,  23,  25,  10,  19,  79,5195,  61, 382,1124,   8,  30,5196,5197,5198, #  368\n-5199,5200,5201,5202,5203,5204,5205,5206,  89,  62,  74,  34,2416, 112, 139, 196, #  384\n- 271, 149,  84, 607, 131, 765,  46,  88, 153, 683,  76, 874, 101, 258,  57,  80, #  400\n-  32, 364, 121,1508, 169,1547,  68, 235, 145,2999,  41, 360,3027,  70,  63,  31, #  416\n-  43, 259, 262,1383,  99, 533, 194,  66,  93, 846, 217, 192,  56, 106,  58, 565, #  432\n- 280, 272, 311, 256, 146,  82, 308,  71, 100, 128, 214, 655, 110, 261, 104,1140, #  448\n-  54,  51,  36,  87,  67,3070, 185,2618,2936,2020,  28,1066,2390,2059,5207,5208, #  464\n-5209,5210,5211,5212,5213,5214,5215,5216,4615,5217,5218,5219,5220,5221,5222,5223, #  480\n-5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,3514,5237,5238, #  496\n-5239,5240,5241,5242,5243,5244,2297,2031,4616,4310,3692,5245,3071,5246,3598,5247, #  512\n-4617,3231,3515,5248,4101,4311,4618,3808,4312,4102,5249,4103,4104,3599,5250,5251, #  528\n-5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267, #  544\n-5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283, #  560\n-5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299, #  576\n-5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315, #  592\n-5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331, #  608\n-5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347, #  624\n-5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363, #  640\n-5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379, #  656\n-5380,5381, 363, 642,2787,2878,2788,2789,2316,3232,2317,3434,2011, 165,1942,3930, #  672\n-3931,3932,3933,5382,4619,5383,4620,5384,5385,5386,5387,5388,5389,5390,5391,5392, #  688\n-5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408, #  704\n-5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424, #  720\n-5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440, #  736\n-5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456, #  752\n-5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472, #  768\n-5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488, #  784\n-5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504, #  800\n-5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520, #  816\n-5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536, #  832\n-5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552, #  848\n-5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568, #  864\n-5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584, #  880\n-5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600, #  896\n-5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616, #  912\n-5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632, #  928\n-5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648, #  944\n-5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664, #  960\n-5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680, #  976\n-5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696, #  992\n-5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712, # 1008\n-5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728, # 1024\n-5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744, # 1040\n-5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760, # 1056\n-5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776, # 1072\n-5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787,5788,5789,5790,5791,5792, # 1088\n-5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808, # 1104\n-5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824, # 1120\n-5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840, # 1136\n-5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856, # 1152\n-5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872, # 1168\n-5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888, # 1184\n-5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904, # 1200\n-5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920, # 1216\n-5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936, # 1232\n-5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952, # 1248\n-5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968, # 1264\n-5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984, # 1280\n-5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000, # 1296\n-6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016, # 1312\n-6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032, # 1328\n-6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048, # 1344\n-6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064, # 1360\n-6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080, # 1376\n-6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096, # 1392\n-6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112, # 1408\n-6113,6114,2044,2060,4621, 997,1235, 473,1186,4622, 920,3378,6115,6116, 379,1108, # 1424\n-4313,2657,2735,3934,6117,3809, 636,3233, 573,1026,3693,3435,2974,3300,2298,4105, # 1440\n- 854,2937,2463, 393,2581,2417, 539, 752,1280,2750,2480, 140,1161, 440, 708,1569, # 1456\n- 665,2497,1746,1291,1523,3000, 164,1603, 847,1331, 537,1997, 486, 508,1693,2418, # 1472\n-1970,2227, 878,1220, 299,1030, 969, 652,2751, 624,1137,3301,2619,  65,3302,2045, # 1488\n-1761,1859,3120,1930,3694,3516, 663,1767, 852, 835,3695, 269, 767,2826,2339,1305, # 1504\n- 896,1150, 770,1616,6118, 506,1502,2075,1012,2519, 775,2520,2975,2340,2938,4314, # 1520\n-3028,2086,1224,1943,2286,6119,3072,4315,2240,1273,1987,3935,1557, 175, 597, 985, # 1536\n-3517,2419,2521,1416,3029, 585, 938,1931,1007,1052,1932,1685,6120,3379,4316,4623, # 1552\n- 804, 599,3121,1333,2128,2539,1159,1554,2032,3810, 687,2033,2904, 952, 675,1467, # 1568\n-3436,6121,2241,1096,1786,2440,1543,1924, 980,1813,2228, 781,2692,1879, 728,1918, # 1584\n-3696,4624, 548,1950,4625,1809,1088,1356,3303,2522,1944, 502, 972, 373, 513,2827, # 1600\n- 586,2377,2391,1003,1976,1631,6122,2464,1084, 648,1776,4626,2141, 324, 962,2012, # 1616\n-2177,2076,1384, 742,2178,1448,1173,1810, 222, 102, 301, 445, 125,2420, 662,2498, # 1632\n- 277, 200,1476,1165,1068, 224,2562,1378,1446, 450,1880, 659, 791, 582,4627,2939, # 1648\n-3936,1516,1274, 555,2099,3697,1020,1389,1526,3380,1762,1723,1787,2229, 412,2114, # 1664\n-1900,2392,3518, 512,2597, 427,1925,2341,3122,1653,1686,2465,2499, 697, 330, 273, # 1680\n- 380,2162, 951, 832, 780, 991,1301,3073, 965,2270,3519, 668,2523,2636,1286, 535, # 1696\n-1407, 518, 671, 957,2658,2378, 267, 611,2197,3030,6123, 248,2299, 967,1799,2356, # 1712\n- 850,1418,3437,1876,1256,1480,2828,1718,6124,6125,1755,1664,2405,6126,4628,2879, # 1728\n-2829, 499,2179, 676,4629, 557,2329,2214,2090, 325,3234, 464, 811,3001, 992,2342, # 1744\n-2481,1232,1469, 303,2242, 466,1070,2163, 603,1777,2091,4630,2752,4631,2714, 322, # 1760\n-2659,1964,1768, 481,2188,1463,2330,2857,3600,2092,3031,2421,4632,2318,2070,1849, # 1776\n-2598,4633,1302,2254,1668,1701,2422,3811,2905,3032,3123,2046,4106,1763,1694,4634, # 1792\n-1604, 943,1724,1454, 917, 868,2215,1169,2940, 552,1145,1800,1228,1823,1955, 316, # 1808\n-1080,2510, 361,1807,2830,4107,2660,3381,1346,1423,1134,4108,6127, 541,1263,1229, # 1824\n-1148,2540, 545, 465,1833,2880,3438,1901,3074,2482, 816,3937, 713,1788,2500, 122, # 1840\n-1575, 195,1451,2501,1111,6128, 859, 374,1225,2243,2483,4317, 390,1033,3439,3075, # 1856\n-2524,1687, 266, 793,1440,2599, 946, 779, 802, 507, 897,1081, 528,2189,1292, 711, # 1872\n-1866,1725,1167,1640, 753, 398,2661,1053, 246, 348,4318, 137,1024,3440,1600,2077, # 1888\n-2129, 825,4319, 698, 238, 521, 187,2300,1157,2423,1641,1605,1464,1610,1097,2541, # 1904\n-1260,1436, 759,2255,1814,2150, 705,3235, 409,2563,3304, 561,3033,2005,2564, 726, # 1920\n-1956,2343,3698,4109, 949,3812,3813,3520,1669, 653,1379,2525, 881,2198, 632,2256, # 1936\n-1027, 778,1074, 733,1957, 514,1481,2466, 554,2180, 702,3938,1606,1017,1398,6129, # 1952\n-1380,3521, 921, 993,1313, 594, 449,1489,1617,1166, 768,1426,1360, 495,1794,3601, # 1968\n-1177,3602,1170,4320,2344, 476, 425,3167,4635,3168,1424, 401,2662,1171,3382,1998, # 1984\n-1089,4110, 477,3169, 474,6130,1909, 596,2831,1842, 494, 693,1051,1028,1207,3076, # 2000\n- 606,2115, 727,2790,1473,1115, 743,3522, 630, 805,1532,4321,2021, 366,1057, 838, # 2016\n- 684,1114,2142,4322,2050,1492,1892,1808,2271,3814,2424,1971,1447,1373,3305,1090, # 2032\n-1536,3939,3523,3306,1455,2199, 336, 369,2331,1035, 584,2393, 902, 718,2600,6131, # 2048\n-2753, 463,2151,1149,1611,2467, 715,1308,3124,1268, 343,1413,3236,1517,1347,2663, # 2064\n-2093,3940,2022,1131,1553,2100,2941,1427,3441,2942,1323,2484,6132,1980, 872,2368, # 2080\n-2441,2943, 320,2369,2116,1082, 679,1933,3941,2791,3815, 625,1143,2023, 422,2200, # 2096\n-3816,6133, 730,1695, 356,2257,1626,2301,2858,2637,1627,1778, 937, 883,2906,2693, # 2112\n-3002,1769,1086, 400,1063,1325,3307,2792,4111,3077, 456,2345,1046, 747,6134,1524, # 2128\n- 884,1094,3383,1474,2164,1059, 974,1688,2181,2258,1047, 345,1665,1187, 358, 875, # 2144\n-3170, 305, 660,3524,2190,1334,1135,3171,1540,1649,2542,1527, 927, 968,2793, 885, # 2160\n-1972,1850, 482, 500,2638,1218,1109,1085,2543,1654,2034, 876,  78,2287,1482,1277, # 2176\n- 861,1675,1083,1779, 724,2754, 454, 397,1132,1612,2332, 893, 672,1237, 257,2259, # 2192\n-2370, 135,3384, 337,2244, 547, 352, 340, 709,2485,1400, 788,1138,2511, 540, 772, # 2208\n-1682,2260,2272,2544,2013,1843,1902,4636,1999,1562,2288,4637,2201,1403,1533, 407, # 2224\n- 576,3308,1254,2071, 978,3385, 170, 136,1201,3125,2664,3172,2394, 213, 912, 873, # 2240\n-3603,1713,2202, 699,3604,3699, 813,3442, 493, 531,1054, 468,2907,1483, 304, 281, # 2256\n-4112,1726,1252,2094, 339,2319,2130,2639, 756,1563,2944, 748, 571,2976,1588,2425, # 2272\n-2715,1851,1460,2426,1528,1392,1973,3237, 288,3309, 685,3386, 296, 892,2716,2216, # 2288\n-1570,2245, 722,1747,2217, 905,3238,1103,6135,1893,1441,1965, 251,1805,2371,3700, # 2304\n-2601,1919,1078,  75,2182,1509,1592,1270,2640,4638,2152,6136,3310,3817, 524, 706, # 2320\n-1075, 292,3818,1756,2602, 317,  98,3173,3605,3525,1844,2218,3819,2502, 814, 567, # 2336\n- 385,2908,1534,6137, 534,1642,3239, 797,6138,1670,1529, 953,4323, 188,1071, 538, # 2352\n- 178, 729,3240,2109,1226,1374,2000,2357,2977, 731,2468,1116,2014,2051,6139,1261, # 2368\n-1593, 803,2859,2736,3443, 556, 682, 823,1541,6140,1369,2289,1706,2794, 845, 462, # 2384\n-2603,2665,1361, 387, 162,2358,1740, 739,1770,1720,1304,1401,3241,1049, 627,1571, # 2400\n-2427,3526,1877,3942,1852,1500, 431,1910,1503, 677, 297,2795, 286,1433,1038,1198, # 2416\n-2290,1133,1596,4113,4639,2469,1510,1484,3943,6141,2442, 108, 712,4640,2372, 866, # 2432\n-3701,2755,3242,1348, 834,1945,1408,3527,2395,3243,1811, 824, 994,1179,2110,1548, # 2448\n-1453, 790,3003, 690,4324,4325,2832,2909,3820,1860,3821, 225,1748, 310, 346,1780, # 2464\n-2470, 821,1993,2717,2796, 828, 877,3528,2860,2471,1702,2165,2910,2486,1789, 453, # 2480\n- 359,2291,1676,  73,1164,1461,1127,3311, 421, 604, 314,1037, 589, 116,2487, 737, # 2496\n- 837,1180, 111, 244, 735,6142,2261,1861,1362, 986, 523, 418, 581,2666,3822, 103, # 2512\n- 855, 503,1414,1867,2488,1091, 657,1597, 979, 605,1316,4641,1021,2443,2078,2001, # 2528\n-1209,  96, 587,2166,1032, 260,1072,2153, 173,  94, 226,3244, 819,2006,4642,4114, # 2544\n-2203, 231,1744, 782,  97,2667, 786,3387, 887, 391, 442,2219,4326,1425,6143,2694, # 2560\n- 633,1544,1202, 483,2015, 592,2052,1958,2472,1655, 419, 129,4327,3444,3312,1714, # 2576\n-1257,3078,4328,1518,1098, 865,1310,1019,1885,1512,1734, 469,2444, 148, 773, 436, # 2592\n-1815,1868,1128,1055,4329,1245,2756,3445,2154,1934,1039,4643, 579,1238, 932,2320, # 2608\n- 353, 205, 801, 115,2428, 944,2321,1881, 399,2565,1211, 678, 766,3944, 335,2101, # 2624\n-1459,1781,1402,3945,2737,2131,1010, 844, 981,1326,1013, 550,1816,1545,2620,1335, # 2640\n-1008, 371,2881, 936,1419,1613,3529,1456,1395,2273,1834,2604,1317,2738,2503, 416, # 2656\n-1643,4330, 806,1126, 229, 591,3946,1314,1981,1576,1837,1666, 347,1790, 977,3313, # 2672\n- 764,2861,1853, 688,2429,1920,1462,  77, 595, 415,2002,3034, 798,1192,4115,6144, # 2688\n-2978,4331,3035,2695,2582,2072,2566, 430,2430,1727, 842,1396,3947,3702, 613, 377, # 2704\n- 278, 236,1417,3388,3314,3174, 757,1869, 107,3530,6145,1194, 623,2262, 207,1253, # 2720\n-2167,3446,3948, 492,1117,1935, 536,1838,2757,1246,4332, 696,2095,2406,1393,1572, # 2736\n-3175,1782, 583, 190, 253,1390,2230, 830,3126,3389, 934,3245,1703,1749,2979,1870, # 2752\n-2545,1656,2204, 869,2346,4116,3176,1817, 496,1764,4644, 942,1504, 404,1903,1122, # 2768\n-1580,3606,2945,1022, 515, 372,1735, 955,2431,3036,6146,2797,1110,2302,2798, 617, # 2784\n-6147, 441, 762,1771,3447,3607,3608,1904, 840,3037,  86, 939,1385, 572,1370,2445, # 2800\n-1336, 114,3703, 898, 294, 203,3315, 703,1583,2274, 429, 961,4333,1854,1951,3390, # 2816\n-2373,3704,4334,1318,1381, 966,1911,2322,1006,1155, 309, 989, 458,2718,1795,1372, # 2832\n-1203, 252,1689,1363,3177, 517,1936, 168,1490, 562, 193,3823,1042,4117,1835, 551, # 2848\n- 470,4645, 395, 489,3448,1871,1465,2583,2641, 417,1493, 279,1295, 511,1236,1119, # 2864\n-  72,1231,1982,1812,3004, 871,1564, 984,3449,1667,2696,2096,4646,2347,2833,1673, # 2880\n-3609, 695,3246,2668, 807,1183,4647, 890, 388,2333,1801,1457,2911,1765,1477,1031, # 2896\n-3316,3317,1278,3391,2799,2292,2526, 163,3450,4335,2669,1404,1802,6148,2323,2407, # 2912\n-1584,1728,1494,1824,1269, 298, 909,3318,1034,1632, 375, 776,1683,2061, 291, 210, # 2928\n-1123, 809,1249,1002,2642,3038, 206,1011,2132, 144, 975, 882,1565, 342, 667, 754, # 2944\n-1442,2143,1299,2303,2062, 447, 626,2205,1221,2739,2912,1144,1214,2206,2584, 760, # 2960\n-1715, 614, 950,1281,2670,2621, 810, 577,1287,2546,4648, 242,2168, 250,2643, 691, # 2976\n- 123,2644, 647, 313,1029, 689,1357,2946,1650, 216, 771,1339,1306, 808,2063, 549, # 2992\n- 913,1371,2913,2914,6149,1466,1092,1174,1196,1311,2605,2396,1783,1796,3079, 406, # 3008\n-2671,2117,3949,4649, 487,1825,2220,6150,2915, 448,2348,1073,6151,2397,1707, 130, # 3024\n- 900,1598, 329, 176,1959,2527,1620,6152,2275,4336,3319,1983,2191,3705,3610,2155, # 3040\n-3706,1912,1513,1614,6153,1988, 646, 392,2304,1589,3320,3039,1826,1239,1352,1340, # 3056\n-2916, 505,2567,1709,1437,2408,2547, 906,6154,2672, 384,1458,1594,1100,1329, 710, # 3072\n- 423,3531,2064,2231,2622,1989,2673,1087,1882, 333, 841,3005,1296,2882,2379, 580, # 3088\n-1937,1827,1293,2585, 601, 574, 249,1772,4118,2079,1120, 645, 901,1176,1690, 795, # 3104\n-2207, 478,1434, 516,1190,1530, 761,2080, 930,1264, 355, 435,1552, 644,1791, 987, # 3120\n- 220,1364,1163,1121,1538, 306,2169,1327,1222, 546,2645, 218, 241, 610,1704,3321, # 3136\n-1984,1839,1966,2528, 451,6155,2586,3707,2568, 907,3178, 254,2947, 186,1845,4650, # 3152\n- 745, 432,1757, 428,1633, 888,2246,2221,2489,3611,2118,1258,1265, 956,3127,1784, # 3168\n-4337,2490, 319, 510, 119, 457,3612, 274,2035,2007,4651,1409,3128, 970,2758, 590, # 3184\n-2800, 661,2247,4652,2008,3950,1420,1549,3080,3322,3951,1651,1375,2111, 485,2491, # 3200\n-1429,1156,6156,2548,2183,1495, 831,1840,2529,2446, 501,1657, 307,1894,3247,1341, # 3216\n- 666, 899,2156,1539,2549,1559, 886, 349,2208,3081,2305,1736,3824,2170,2759,1014, # 3232\n-1913,1386, 542,1397,2948, 490, 368, 716, 362, 159, 282,2569,1129,1658,1288,1750, # 3248\n-2674, 276, 649,2016, 751,1496, 658,1818,1284,1862,2209,2087,2512,3451, 622,2834, # 3264\n- 376, 117,1060,2053,1208,1721,1101,1443, 247,1250,3179,1792,3952,2760,2398,3953, # 3280\n-6157,2144,3708, 446,2432,1151,2570,3452,2447,2761,2835,1210,2448,3082, 424,2222, # 3296\n-1251,2449,2119,2836, 504,1581,4338, 602, 817, 857,3825,2349,2306, 357,3826,1470, # 3312\n-1883,2883, 255, 958, 929,2917,3248, 302,4653,1050,1271,1751,2307,1952,1430,2697, # 3328\n-2719,2359, 354,3180, 777, 158,2036,4339,1659,4340,4654,2308,2949,2248,1146,2232, # 3344\n-3532,2720,1696,2623,3827,6158,3129,1550,2698,1485,1297,1428, 637, 931,2721,2145, # 3360\n- 914,2550,2587,  81,2450, 612, 827,2646,1242,4655,1118,2884, 472,1855,3181,3533, # 3376\n-3534, 569,1353,2699,1244,1758,2588,4119,2009,2762,2171,3709,1312,1531,6159,1152, # 3392\n-1938, 134,1830, 471,3710,2276,1112,1535,3323,3453,3535, 982,1337,2950, 488, 826, # 3408\n- 674,1058,1628,4120,2017, 522,2399, 211, 568,1367,3454, 350, 293,1872,1139,3249, # 3424\n-1399,1946,3006,1300,2360,3324, 588, 736,6160,2606, 744, 669,3536,3828,6161,1358, # 3440\n- 199, 723, 848, 933, 851,1939,1505,1514,1338,1618,1831,4656,1634,3613, 443,2740, # 3456\n-3829, 717,1947, 491,1914,6162,2551,1542,4121,1025,6163,1099,1223, 198,3040,2722, # 3472\n- 370, 410,1905,2589, 998,1248,3182,2380, 519,1449,4122,1710, 947, 928,1153,4341, # 3488\n-2277, 344,2624,1511, 615, 105, 161,1212,1076,1960,3130,2054,1926,1175,1906,2473, # 3504\n- 414,1873,2801,6164,2309, 315,1319,3325, 318,2018,2146,2157, 963, 631, 223,4342, # 3520\n-4343,2675, 479,3711,1197,2625,3712,2676,2361,6165,4344,4123,6166,2451,3183,1886, # 3536\n-2184,1674,1330,1711,1635,1506, 799, 219,3250,3083,3954,1677,3713,3326,2081,3614, # 3552\n-1652,2073,4657,1147,3041,1752, 643,1961, 147,1974,3955,6167,1716,2037, 918,3007, # 3568\n-1994, 120,1537, 118, 609,3184,4345, 740,3455,1219, 332,1615,3830,6168,1621,2980, # 3584\n-1582, 783, 212, 553,2350,3714,1349,2433,2082,4124, 889,6169,2310,1275,1410, 973, # 3600\n- 166,1320,3456,1797,1215,3185,2885,1846,2590,2763,4658, 629, 822,3008, 763, 940, # 3616\n-1990,2862, 439,2409,1566,1240,1622, 926,1282,1907,2764, 654,2210,1607, 327,1130, # 3632\n-3956,1678,1623,6170,2434,2192, 686, 608,3831,3715, 903,3957,3042,6171,2741,1522, # 3648\n-1915,1105,1555,2552,1359, 323,3251,4346,3457, 738,1354,2553,2311,2334,1828,2003, # 3664\n-3832,1753,2351,1227,6172,1887,4125,1478,6173,2410,1874,1712,1847, 520,1204,2607, # 3680\n- 264,4659, 836,2677,2102, 600,4660,3833,2278,3084,6174,4347,3615,1342, 640, 532, # 3696\n- 543,2608,1888,2400,2591,1009,4348,1497, 341,1737,3616,2723,1394, 529,3252,1321, # 3712\n- 983,4661,1515,2120, 971,2592, 924, 287,1662,3186,4349,2700,4350,1519, 908,1948, # 3728\n-2452, 156, 796,1629,1486,2223,2055, 694,4126,1259,1036,3392,1213,2249,2742,1889, # 3744\n-1230,3958,1015, 910, 408, 559,3617,4662, 746, 725, 935,4663,3959,3009,1289, 563, # 3760\n- 867,4664,3960,1567,2981,2038,2626, 988,2263,2381,4351, 143,2374, 704,1895,6175, # 3776\n-1188,3716,2088, 673,3085,2362,4352, 484,1608,1921,2765,2918, 215, 904,3618,3537, # 3792\n- 894, 509, 976,3043,2701,3961,4353,2837,2982, 498,6176,6177,1102,3538,1332,3393, # 3808\n-1487,1636,1637, 233, 245,3962, 383, 650, 995,3044, 460,1520,1206,2352, 749,3327, # 3824\n- 530, 700, 389,1438,1560,1773,3963,2264, 719,2951,2724,3834, 870,1832,1644,1000, # 3840\n- 839,2474,3717, 197,1630,3394, 365,2886,3964,1285,2133, 734, 922, 818,1106, 732, # 3856\n- 480,2083,1774,3458, 923,2279,1350, 221,3086,  85,2233,2234,3835,1585,3010,2147, # 3872\n-1387,1705,2382,1619,2475, 133, 239,2802,1991,1016,2084,2383, 411,2838,1113, 651, # 3888\n-1985,1160,3328, 990,1863,3087,1048,1276,2647, 265,2627,1599,3253,2056, 150, 638, # 3904\n-2019, 656, 853, 326,1479, 680,1439,4354,1001,1759, 413,3459,3395,2492,1431, 459, # 3920\n-4355,1125,3329,2265,1953,1450,2065,2863, 849, 351,2678,3131,3254,3255,1104,1577, # 3936\n- 227,1351,1645,2453,2193,1421,2887, 812,2121, 634,  95,2435, 201,2312,4665,1646, # 3952\n-1671,2743,1601,2554,2702,2648,2280,1315,1366,2089,3132,1573,3718,3965,1729,1189, # 3968\n- 328,2679,1077,1940,1136, 558,1283, 964,1195, 621,2074,1199,1743,3460,3619,1896, # 3984\n-1916,1890,3836,2952,1154,2112,1064, 862, 378,3011,2066,2113,2803,1568,2839,6178, # 4000\n-3088,2919,1941,1660,2004,1992,2194, 142, 707,1590,1708,1624,1922,1023,1836,1233, # 4016\n-1004,2313, 789, 741,3620,6179,1609,2411,1200,4127,3719,3720,4666,2057,3721, 593, # 4032\n-2840, 367,2920,1878,6180,3461,1521, 628,1168, 692,2211,2649, 300, 720,2067,2571, # 4048\n-2953,3396, 959,2504,3966,3539,3462,1977, 701,6181, 954,1043, 800, 681, 183,3722, # 4064\n-1803,1730,3540,4128,2103, 815,2314, 174, 467, 230,2454,1093,2134, 755,3541,3397, # 4080\n-1141,1162,6182,1738,2039, 270,3256,2513,1005,1647,2185,3837, 858,1679,1897,1719, # 4096\n-2954,2324,1806, 402, 670, 167,4129,1498,2158,2104, 750,6183, 915, 189,1680,1551, # 4112\n- 455,4356,1501,2455, 405,1095,2955, 338,1586,1266,1819, 570, 641,1324, 237,1556, # 4128\n-2650,1388,3723,6184,1368,2384,1343,1978,3089,2436, 879,3724, 792,1191, 758,3012, # 4144\n-1411,2135,1322,4357, 240,4667,1848,3725,1574,6185, 420,3045,1546,1391, 714,4358, # 4160\n-1967, 941,1864, 863, 664, 426, 560,1731,2680,1785,2864,1949,2363, 403,3330,1415, # 4176\n-1279,2136,1697,2335, 204, 721,2097,3838,  90,6186,2085,2505, 191,3967, 124,2148, # 4192\n-1376,1798,1178,1107,1898,1405, 860,4359,1243,1272,2375,2983,1558,2456,1638, 113, # 4208\n-3621, 578,1923,2609, 880, 386,4130, 784,2186,2266,1422,2956,2172,1722, 497, 263, # 4224\n-2514,1267,2412,2610, 177,2703,3542, 774,1927,1344, 616,1432,1595,1018, 172,4360, # 4240\n-2325, 911,4361, 438,1468,3622, 794,3968,2024,2173,1681,1829,2957, 945, 895,3090, # 4256\n- 575,2212,2476, 475,2401,2681, 785,2744,1745,2293,2555,1975,3133,2865, 394,4668, # 4272\n-3839, 635,4131, 639, 202,1507,2195,2766,1345,1435,2572,3726,1908,1184,1181,2457, # 4288\n-3727,3134,4362, 843,2611, 437, 916,4669, 234, 769,1884,3046,3047,3623, 833,6187, # 4304\n-1639,2250,2402,1355,1185,2010,2047, 999, 525,1732,1290,1488,2612, 948,1578,3728, # 4320\n-2413,2477,1216,2725,2159, 334,3840,1328,3624,2921,1525,4132, 564,1056, 891,4363, # 4336\n-1444,1698,2385,2251,3729,1365,2281,2235,1717,6188, 864,3841,2515, 444, 527,2767, # 4352\n-2922,3625, 544, 461,6189, 566, 209,2437,3398,2098,1065,2068,3331,3626,3257,2137, # 4368  #last 512\n-)\n-\n-\n\n@@ -1,233 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-\n-# This is hiragana 2-char sequence table, the number in each cell represents its frequency category\n-jp2CharContext = (\n-(0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1),\n-(2,4,0,4,0,3,0,4,0,3,4,4,4,2,4,3,3,4,3,2,3,3,4,2,3,3,3,2,4,1,4,3,3,1,5,4,3,4,3,4,3,5,3,0,3,5,4,2,0,3,1,0,3,3,0,3,3,0,1,1,0,4,3,0,3,3,0,4,0,2,0,3,5,5,5,5,4,0,4,1,0,3,4),\n-(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2),\n-(0,4,0,5,0,5,0,4,0,4,5,4,4,3,5,3,5,1,5,3,4,3,4,4,3,4,3,3,4,3,5,4,4,3,5,5,3,5,5,5,3,5,5,3,4,5,5,3,1,3,2,0,3,4,0,4,2,0,4,2,1,5,3,2,3,5,0,4,0,2,0,5,4,4,5,4,5,0,4,0,0,4,4),\n-(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n-(0,3,0,4,0,3,0,3,0,4,5,4,3,3,3,3,4,3,5,4,4,3,5,4,4,3,4,3,4,4,4,4,5,3,4,4,3,4,5,5,4,5,5,1,4,5,4,3,0,3,3,1,3,3,0,4,4,0,3,3,1,5,3,3,3,5,0,4,0,3,0,4,4,3,4,3,3,0,4,1,1,3,4),\n-(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n-(0,4,0,3,0,3,0,4,0,3,4,4,3,2,2,1,2,1,3,1,3,3,3,3,3,4,3,1,3,3,5,3,3,0,4,3,0,5,4,3,3,5,4,4,3,4,4,5,0,1,2,0,1,2,0,2,2,0,1,0,0,5,2,2,1,4,0,3,0,1,0,4,4,3,5,4,3,0,2,1,0,4,3),\n-(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n-(0,3,0,5,0,4,0,2,1,4,4,2,4,1,4,2,4,2,4,3,3,3,4,3,3,3,3,1,4,2,3,3,3,1,4,4,1,1,1,4,3,3,2,0,2,4,3,2,0,3,3,0,3,1,1,0,0,0,3,3,0,4,2,2,3,4,0,4,0,3,0,4,4,5,3,4,4,0,3,0,0,1,4),\n-(1,4,0,4,0,4,0,4,0,3,5,4,4,3,4,3,5,4,3,3,4,3,5,4,4,4,4,3,4,2,4,3,3,1,5,4,3,2,4,5,4,5,5,4,4,5,4,4,0,3,2,2,3,3,0,4,3,1,3,2,1,4,3,3,4,5,0,3,0,2,0,4,5,5,4,5,4,0,4,0,0,5,4),\n-(0,5,0,5,0,4,0,3,0,4,4,3,4,3,3,3,4,0,4,4,4,3,4,3,4,3,3,1,4,2,4,3,4,0,5,4,1,4,5,4,4,5,3,2,4,3,4,3,2,4,1,3,3,3,2,3,2,0,4,3,3,4,3,3,3,4,0,4,0,3,0,4,5,4,4,4,3,0,4,1,0,1,3),\n-(0,3,1,4,0,3,0,2,0,3,4,4,3,1,4,2,3,3,4,3,4,3,4,3,4,4,3,2,3,1,5,4,4,1,4,4,3,5,4,4,3,5,5,4,3,4,4,3,1,2,3,1,2,2,0,3,2,0,3,1,0,5,3,3,3,4,3,3,3,3,4,4,4,4,5,4,2,0,3,3,2,4,3),\n-(0,2,0,3,0,1,0,1,0,0,3,2,0,0,2,0,1,0,2,1,3,3,3,1,2,3,1,0,1,0,4,2,1,1,3,3,0,4,3,3,1,4,3,3,0,3,3,2,0,0,0,0,1,0,0,2,0,0,0,0,0,4,1,0,2,3,2,2,2,1,3,3,3,4,4,3,2,0,3,1,0,3,3),\n-(0,4,0,4,0,3,0,3,0,4,4,4,3,3,3,3,3,3,4,3,4,2,4,3,4,3,3,2,4,3,4,5,4,1,4,5,3,5,4,5,3,5,4,0,3,5,5,3,1,3,3,2,2,3,0,3,4,1,3,3,2,4,3,3,3,4,0,4,0,3,0,4,5,4,4,5,3,0,4,1,0,3,4),\n-(0,2,0,3,0,3,0,0,0,2,2,2,1,0,1,0,0,0,3,0,3,0,3,0,1,3,1,0,3,1,3,3,3,1,3,3,3,0,1,3,1,3,4,0,0,3,1,1,0,3,2,0,0,0,0,1,3,0,1,0,0,3,3,2,0,3,0,0,0,0,0,3,4,3,4,3,3,0,3,0,0,2,3),\n-(2,3,0,3,0,2,0,1,0,3,3,4,3,1,3,1,1,1,3,1,4,3,4,3,3,3,0,0,3,1,5,4,3,1,4,3,2,5,5,4,4,4,4,3,3,4,4,4,0,2,1,1,3,2,0,1,2,0,0,1,0,4,1,3,3,3,0,3,0,1,0,4,4,4,5,5,3,0,2,0,0,4,4),\n-(0,2,0,1,0,3,1,3,0,2,3,3,3,0,3,1,0,0,3,0,3,2,3,1,3,2,1,1,0,0,4,2,1,0,2,3,1,4,3,2,0,4,4,3,1,3,1,3,0,1,0,0,1,0,0,0,1,0,0,0,0,4,1,1,1,2,0,3,0,0,0,3,4,2,4,3,2,0,1,0,0,3,3),\n-(0,1,0,4,0,5,0,4,0,2,4,4,2,3,3,2,3,3,5,3,3,3,4,3,4,2,3,0,4,3,3,3,4,1,4,3,2,1,5,5,3,4,5,1,3,5,4,2,0,3,3,0,1,3,0,4,2,0,1,3,1,4,3,3,3,3,0,3,0,1,0,3,4,4,4,5,5,0,3,0,1,4,5),\n-(0,2,0,3,0,3,0,0,0,2,3,1,3,0,4,0,1,1,3,0,3,4,3,2,3,1,0,3,3,2,3,1,3,0,2,3,0,2,1,4,1,2,2,0,0,3,3,0,0,2,0,0,0,1,0,0,0,0,2,2,0,3,2,1,3,3,0,2,0,2,0,0,3,3,1,2,4,0,3,0,2,2,3),\n-(2,4,0,5,0,4,0,4,0,2,4,4,4,3,4,3,3,3,1,2,4,3,4,3,4,4,5,0,3,3,3,3,2,0,4,3,1,4,3,4,1,4,4,3,3,4,4,3,1,2,3,0,4,2,0,4,1,0,3,3,0,4,3,3,3,4,0,4,0,2,0,3,5,3,4,5,2,0,3,0,0,4,5),\n-(0,3,0,4,0,1,0,1,0,1,3,2,2,1,3,0,3,0,2,0,2,0,3,0,2,0,0,0,1,0,1,1,0,0,3,1,0,0,0,4,0,3,1,0,2,1,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,2,2,3,1,0,3,0,0,0,1,4,4,4,3,0,0,4,0,0,1,4),\n-(1,4,1,5,0,3,0,3,0,4,5,4,4,3,5,3,3,4,4,3,4,1,3,3,3,3,2,1,4,1,5,4,3,1,4,4,3,5,4,4,3,5,4,3,3,4,4,4,0,3,3,1,2,3,0,3,1,0,3,3,0,5,4,4,4,4,4,4,3,3,5,4,4,3,3,5,4,0,3,2,0,4,4),\n-(0,2,0,3,0,1,0,0,0,1,3,3,3,2,4,1,3,0,3,1,3,0,2,2,1,1,0,0,2,0,4,3,1,0,4,3,0,4,4,4,1,4,3,1,1,3,3,1,0,2,0,0,1,3,0,0,0,0,2,0,0,4,3,2,4,3,5,4,3,3,3,4,3,3,4,3,3,0,2,1,0,3,3),\n-(0,2,0,4,0,3,0,2,0,2,5,5,3,4,4,4,4,1,4,3,3,0,4,3,4,3,1,3,3,2,4,3,0,3,4,3,0,3,4,4,2,4,4,0,4,5,3,3,2,2,1,1,1,2,0,1,5,0,3,3,2,4,3,3,3,4,0,3,0,2,0,4,4,3,5,5,0,0,3,0,2,3,3),\n-(0,3,0,4,0,3,0,1,0,3,4,3,3,1,3,3,3,0,3,1,3,0,4,3,3,1,1,0,3,0,3,3,0,0,4,4,0,1,5,4,3,3,5,0,3,3,4,3,0,2,0,1,1,1,0,1,3,0,1,2,1,3,3,2,3,3,0,3,0,1,0,1,3,3,4,4,1,0,1,2,2,1,3),\n-(0,1,0,4,0,4,0,3,0,1,3,3,3,2,3,1,1,0,3,0,3,3,4,3,2,4,2,0,1,0,4,3,2,0,4,3,0,5,3,3,2,4,4,4,3,3,3,4,0,1,3,0,0,1,0,0,1,0,0,0,0,4,2,3,3,3,0,3,0,0,0,4,4,4,5,3,2,0,3,3,0,3,5),\n-(0,2,0,3,0,0,0,3,0,1,3,0,2,0,0,0,1,0,3,1,1,3,3,0,0,3,0,0,3,0,2,3,1,0,3,1,0,3,3,2,0,4,2,2,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,1,2,0,1,0,1,0,0,0,1,3,1,2,0,0,0,1,0,0,1,4),\n-(0,3,0,3,0,5,0,1,0,2,4,3,1,3,3,2,1,1,5,2,1,0,5,1,2,0,0,0,3,3,2,2,3,2,4,3,0,0,3,3,1,3,3,0,2,5,3,4,0,3,3,0,1,2,0,2,2,0,3,2,0,2,2,3,3,3,0,2,0,1,0,3,4,4,2,5,4,0,3,0,0,3,5),\n-(0,3,0,3,0,3,0,1,0,3,3,3,3,0,3,0,2,0,2,1,1,0,2,0,1,0,0,0,2,1,0,0,1,0,3,2,0,0,3,3,1,2,3,1,0,3,3,0,0,1,0,0,0,0,0,2,0,0,0,0,0,2,3,1,2,3,0,3,0,1,0,3,2,1,0,4,3,0,1,1,0,3,3),\n-(0,4,0,5,0,3,0,3,0,4,5,5,4,3,5,3,4,3,5,3,3,2,5,3,4,4,4,3,4,3,4,5,5,3,4,4,3,4,4,5,4,4,4,3,4,5,5,4,2,3,4,2,3,4,0,3,3,1,4,3,2,4,3,3,5,5,0,3,0,3,0,5,5,5,5,4,4,0,4,0,1,4,4),\n-(0,4,0,4,0,3,0,3,0,3,5,4,4,2,3,2,5,1,3,2,5,1,4,2,3,2,3,3,4,3,3,3,3,2,5,4,1,3,3,5,3,4,4,0,4,4,3,1,1,3,1,0,2,3,0,2,3,0,3,0,0,4,3,1,3,4,0,3,0,2,0,4,4,4,3,4,5,0,4,0,0,3,4),\n-(0,3,0,3,0,3,1,2,0,3,4,4,3,3,3,0,2,2,4,3,3,1,3,3,3,1,1,0,3,1,4,3,2,3,4,4,2,4,4,4,3,4,4,3,2,4,4,3,1,3,3,1,3,3,0,4,1,0,2,2,1,4,3,2,3,3,5,4,3,3,5,4,4,3,3,0,4,0,3,2,2,4,4),\n-(0,2,0,1,0,0,0,0,0,1,2,1,3,0,0,0,0,0,2,0,1,2,1,0,0,1,0,0,0,0,3,0,0,1,0,1,1,3,1,0,0,0,1,1,0,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,2,2,0,3,4,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1),\n-(0,1,0,0,0,1,0,0,0,0,4,0,4,1,4,0,3,0,4,0,3,0,4,0,3,0,3,0,4,1,5,1,4,0,0,3,0,5,0,5,2,0,1,0,0,0,2,1,4,0,1,3,0,0,3,0,0,3,1,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),\n-(1,4,0,5,0,3,0,2,0,3,5,4,4,3,4,3,5,3,4,3,3,0,4,3,3,3,3,3,3,2,4,4,3,1,3,4,4,5,4,4,3,4,4,1,3,5,4,3,3,3,1,2,2,3,3,1,3,1,3,3,3,5,3,3,4,5,0,3,0,3,0,3,4,3,4,4,3,0,3,0,2,4,3),\n-(0,1,0,4,0,0,0,0,0,1,4,0,4,1,4,2,4,0,3,0,1,0,1,0,0,0,0,0,2,0,3,1,1,1,0,3,0,0,0,1,2,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,3,0,0,0,0,3,2,0,2,2,0,1,0,0,0,2,3,2,3,3,0,0,0,0,2,1,0),\n-(0,5,1,5,0,3,0,3,0,5,4,4,5,1,5,3,3,0,4,3,4,3,5,3,4,3,3,2,4,3,4,3,3,0,3,3,1,4,4,3,4,4,4,3,4,5,5,3,2,3,1,1,3,3,1,3,1,1,3,3,2,4,5,3,3,5,0,4,0,3,0,4,4,3,5,3,3,0,3,4,0,4,3),\n-(0,5,0,5,0,3,0,2,0,4,4,3,5,2,4,3,3,3,4,4,4,3,5,3,5,3,3,1,4,0,4,3,3,0,3,3,0,4,4,4,4,5,4,3,3,5,5,3,2,3,1,2,3,2,0,1,0,0,3,2,2,4,4,3,1,5,0,4,0,3,0,4,3,1,3,2,1,0,3,3,0,3,3),\n-(0,4,0,5,0,5,0,4,0,4,5,5,5,3,4,3,3,2,5,4,4,3,5,3,5,3,4,0,4,3,4,4,3,2,4,4,3,4,5,4,4,5,5,0,3,5,5,4,1,3,3,2,3,3,1,3,1,0,4,3,1,4,4,3,4,5,0,4,0,2,0,4,3,4,4,3,3,0,4,0,0,5,5),\n-(0,4,0,4,0,5,0,1,1,3,3,4,4,3,4,1,3,0,5,1,3,0,3,1,3,1,1,0,3,0,3,3,4,0,4,3,0,4,4,4,3,4,4,0,3,5,4,1,0,3,0,0,2,3,0,3,1,0,3,1,0,3,2,1,3,5,0,3,0,1,0,3,2,3,3,4,4,0,2,2,0,4,4),\n-(2,4,0,5,0,4,0,3,0,4,5,5,4,3,5,3,5,3,5,3,5,2,5,3,4,3,3,4,3,4,5,3,2,1,5,4,3,2,3,4,5,3,4,1,2,5,4,3,0,3,3,0,3,2,0,2,3,0,4,1,0,3,4,3,3,5,0,3,0,1,0,4,5,5,5,4,3,0,4,2,0,3,5),\n-(0,5,0,4,0,4,0,2,0,5,4,3,4,3,4,3,3,3,4,3,4,2,5,3,5,3,4,1,4,3,4,4,4,0,3,5,0,4,4,4,4,5,3,1,3,4,5,3,3,3,3,3,3,3,0,2,2,0,3,3,2,4,3,3,3,5,3,4,1,3,3,5,3,2,0,0,0,0,4,3,1,3,3),\n-(0,1,0,3,0,3,0,1,0,1,3,3,3,2,3,3,3,0,3,0,0,0,3,1,3,0,0,0,2,2,2,3,0,0,3,2,0,1,2,4,1,3,3,0,0,3,3,3,0,1,0,0,2,1,0,0,3,0,3,1,0,3,0,0,1,3,0,2,0,1,0,3,3,1,3,3,0,0,1,1,0,3,3),\n-(0,2,0,3,0,2,1,4,0,2,2,3,1,1,3,1,1,0,2,0,3,1,2,3,1,3,0,0,1,0,4,3,2,3,3,3,1,4,2,3,3,3,3,1,0,3,1,4,0,1,1,0,1,2,0,1,1,0,1,1,0,3,1,3,2,2,0,1,0,0,0,2,3,3,3,1,0,0,0,0,0,2,3),\n-(0,5,0,4,0,5,0,2,0,4,5,5,3,3,4,3,3,1,5,4,4,2,4,4,4,3,4,2,4,3,5,5,4,3,3,4,3,3,5,5,4,5,5,1,3,4,5,3,1,4,3,1,3,3,0,3,3,1,4,3,1,4,5,3,3,5,0,4,0,3,0,5,3,3,1,4,3,0,4,0,1,5,3),\n-(0,5,0,5,0,4,0,2,0,4,4,3,4,3,3,3,3,3,5,4,4,4,4,4,4,5,3,3,5,2,4,4,4,3,4,4,3,3,4,4,5,5,3,3,4,3,4,3,3,4,3,3,3,3,1,2,2,1,4,3,3,5,4,4,3,4,0,4,0,3,0,4,4,4,4,4,1,0,4,2,0,2,4),\n-(0,4,0,4,0,3,0,1,0,3,5,2,3,0,3,0,2,1,4,2,3,3,4,1,4,3,3,2,4,1,3,3,3,0,3,3,0,0,3,3,3,5,3,3,3,3,3,2,0,2,0,0,2,0,0,2,0,0,1,0,0,3,1,2,2,3,0,3,0,2,0,4,4,3,3,4,1,0,3,0,0,2,4),\n-(0,0,0,4,0,0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,3,1,3,0,3,2,0,0,0,1,0,3,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,2,0,0,0,0,0,0,2),\n-(0,2,1,3,0,2,0,2,0,3,3,3,3,1,3,1,3,3,3,3,3,3,4,2,2,1,2,1,4,0,4,3,1,3,3,3,2,4,3,5,4,3,3,3,3,3,3,3,0,1,3,0,2,0,0,1,0,0,1,0,0,4,2,0,2,3,0,3,3,0,3,3,4,2,3,1,4,0,1,2,0,2,3),\n-(0,3,0,3,0,1,0,3,0,2,3,3,3,0,3,1,2,0,3,3,2,3,3,2,3,2,3,1,3,0,4,3,2,0,3,3,1,4,3,3,2,3,4,3,1,3,3,1,1,0,1,1,0,1,0,1,0,1,0,0,0,4,1,1,0,3,0,3,1,0,2,3,3,3,3,3,1,0,0,2,0,3,3),\n-(0,0,0,0,0,0,0,0,0,0,3,0,2,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,3,0,3,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,2,3,0,0,0,0,0,0,0,0,3),\n-(0,2,0,3,1,3,0,3,0,2,3,3,3,1,3,1,3,1,3,1,3,3,3,1,3,0,2,3,1,1,4,3,3,2,3,3,1,2,2,4,1,3,3,0,1,4,2,3,0,1,3,0,3,0,0,1,3,0,2,0,0,3,3,2,1,3,0,3,0,2,0,3,4,4,4,3,1,0,3,0,0,3,3),\n-(0,2,0,1,0,2,0,0,0,1,3,2,2,1,3,0,1,1,3,0,3,2,3,1,2,0,2,0,1,1,3,3,3,0,3,3,1,1,2,3,2,3,3,1,2,3,2,0,0,1,0,0,0,0,0,0,3,0,1,0,0,2,1,2,1,3,0,3,0,0,0,3,4,4,4,3,2,0,2,0,0,2,4),\n-(0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,3,1,0,0,0,0,0,0,0,3),\n-(0,3,0,3,0,2,0,3,0,3,3,3,2,3,2,2,2,0,3,1,3,3,3,2,3,3,0,0,3,0,3,2,2,0,2,3,1,4,3,4,3,3,2,3,1,5,4,4,0,3,1,2,1,3,0,3,1,1,2,0,2,3,1,3,1,3,0,3,0,1,0,3,3,4,4,2,1,0,2,1,0,2,4),\n-(0,1,0,3,0,1,0,2,0,1,4,2,5,1,4,0,2,0,2,1,3,1,4,0,2,1,0,0,2,1,4,1,1,0,3,3,0,5,1,3,2,3,3,1,0,3,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0,4,0,1,0,3,0,2,0,1,0,3,3,3,4,3,3,0,0,0,0,2,3),\n-(0,0,0,1,0,0,0,0,0,0,2,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,3),\n-(0,1,0,3,0,4,0,3,0,2,4,3,1,0,3,2,2,1,3,1,2,2,3,1,1,1,2,1,3,0,1,2,0,1,3,2,1,3,0,5,5,1,0,0,1,3,2,1,0,3,0,0,1,0,0,0,0,0,3,4,0,1,1,1,3,2,0,2,0,1,0,2,3,3,1,2,3,0,1,0,1,0,4),\n-(0,0,0,1,0,3,0,3,0,2,2,1,0,0,4,0,3,0,3,1,3,0,3,0,3,0,1,0,3,0,3,1,3,0,3,3,0,0,1,2,1,1,1,0,1,2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,2,1,2,0,0,2,0,0,0,0,2,3,3,3,3,0,0,0,0,1,4),\n-(0,0,0,3,0,3,0,0,0,0,3,1,1,0,3,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,3,0,2,0,2,3,0,0,2,2,3,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,2,0,0,0,0,2,3),\n-(2,4,0,5,0,5,0,4,0,3,4,3,3,3,4,3,3,3,4,3,4,4,5,4,5,5,5,2,3,0,5,5,4,1,5,4,3,1,5,4,3,4,4,3,3,4,3,3,0,3,2,0,2,3,0,3,0,0,3,3,0,5,3,2,3,3,0,3,0,3,0,3,4,5,4,5,3,0,4,3,0,3,4),\n-(0,3,0,3,0,3,0,3,0,3,3,4,3,2,3,2,3,0,4,3,3,3,3,3,3,3,3,0,3,2,4,3,3,1,3,4,3,4,4,4,3,4,4,3,2,4,4,1,0,2,0,0,1,1,0,2,0,0,3,1,0,5,3,2,1,3,0,3,0,1,2,4,3,2,4,3,3,0,3,2,0,4,4),\n-(0,3,0,3,0,1,0,0,0,1,4,3,3,2,3,1,3,1,4,2,3,2,4,2,3,4,3,0,2,2,3,3,3,0,3,3,3,0,3,4,1,3,3,0,3,4,3,3,0,1,1,0,1,0,0,0,4,0,3,0,0,3,1,2,1,3,0,4,0,1,0,4,3,3,4,3,3,0,2,0,0,3,3),\n-(0,3,0,4,0,1,0,3,0,3,4,3,3,0,3,3,3,1,3,1,3,3,4,3,3,3,0,0,3,1,5,3,3,1,3,3,2,5,4,3,3,4,5,3,2,5,3,4,0,1,0,0,0,0,0,2,0,0,1,1,0,4,2,2,1,3,0,3,0,2,0,4,4,3,5,3,2,0,1,1,0,3,4),\n-(0,5,0,4,0,5,0,2,0,4,4,3,3,2,3,3,3,1,4,3,4,1,5,3,4,3,4,0,4,2,4,3,4,1,5,4,0,4,4,4,4,5,4,1,3,5,4,2,1,4,1,1,3,2,0,3,1,0,3,2,1,4,3,3,3,4,0,4,0,3,0,4,4,4,3,3,3,0,4,2,0,3,4),\n-(1,4,0,4,0,3,0,1,0,3,3,3,1,1,3,3,2,2,3,3,1,0,3,2,2,1,2,0,3,1,2,1,2,0,3,2,0,2,2,3,3,4,3,0,3,3,1,2,0,1,1,3,1,2,0,0,3,0,1,1,0,3,2,2,3,3,0,3,0,0,0,2,3,3,4,3,3,0,1,0,0,1,4),\n-(0,4,0,4,0,4,0,0,0,3,4,4,3,1,4,2,3,2,3,3,3,1,4,3,4,0,3,0,4,2,3,3,2,2,5,4,2,1,3,4,3,4,3,1,3,3,4,2,0,2,1,0,3,3,0,0,2,0,3,1,0,4,4,3,4,3,0,4,0,1,0,2,4,4,4,4,4,0,3,2,0,3,3),\n-(0,0,0,1,0,4,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,3,2,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2),\n-(0,2,0,3,0,4,0,4,0,1,3,3,3,0,4,0,2,1,2,1,1,1,2,0,3,1,1,0,1,0,3,1,0,0,3,3,2,0,1,1,0,0,0,0,0,1,0,2,0,2,2,0,3,1,0,0,1,0,1,1,0,1,2,0,3,0,0,0,0,1,0,0,3,3,4,3,1,0,1,0,3,0,2),\n-(0,0,0,3,0,5,0,0,0,0,1,0,2,0,3,1,0,1,3,0,0,0,2,0,0,0,1,0,0,0,1,1,0,0,4,0,0,0,2,3,0,1,4,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,3),\n-(0,2,0,5,0,5,0,1,0,2,4,3,3,2,5,1,3,2,3,3,3,0,4,1,2,0,3,0,4,0,2,2,1,1,5,3,0,0,1,4,2,3,2,0,3,3,3,2,0,2,4,1,1,2,0,1,1,0,3,1,0,1,3,1,2,3,0,2,0,0,0,1,3,5,4,4,4,0,3,0,0,1,3),\n-(0,4,0,5,0,4,0,4,0,4,5,4,3,3,4,3,3,3,4,3,4,4,5,3,4,5,4,2,4,2,3,4,3,1,4,4,1,3,5,4,4,5,5,4,4,5,5,5,2,3,3,1,4,3,1,3,3,0,3,3,1,4,3,4,4,4,0,3,0,4,0,3,3,4,4,5,0,0,4,3,0,4,5),\n-(0,4,0,4,0,3,0,3,0,3,4,4,4,3,3,2,4,3,4,3,4,3,5,3,4,3,2,1,4,2,4,4,3,1,3,4,2,4,5,5,3,4,5,4,1,5,4,3,0,3,2,2,3,2,1,3,1,0,3,3,3,5,3,3,3,5,4,4,2,3,3,4,3,3,3,2,1,0,3,2,1,4,3),\n-(0,4,0,5,0,4,0,3,0,3,5,5,3,2,4,3,4,0,5,4,4,1,4,4,4,3,3,3,4,3,5,5,2,3,3,4,1,2,5,5,3,5,5,2,3,5,5,4,0,3,2,0,3,3,1,1,5,1,4,1,0,4,3,2,3,5,0,4,0,3,0,5,4,3,4,3,0,0,4,1,0,4,4),\n-(1,3,0,4,0,2,0,2,0,2,5,5,3,3,3,3,3,0,4,2,3,4,4,4,3,4,0,0,3,4,5,4,3,3,3,3,2,5,5,4,5,5,5,4,3,5,5,5,1,3,1,0,1,0,0,3,2,0,4,2,0,5,2,3,2,4,1,3,0,3,0,4,5,4,5,4,3,0,4,2,0,5,4),\n-(0,3,0,4,0,5,0,3,0,3,4,4,3,2,3,2,3,3,3,3,3,2,4,3,3,2,2,0,3,3,3,3,3,1,3,3,3,0,4,4,3,4,4,1,1,4,4,2,0,3,1,0,1,1,0,4,1,0,2,3,1,3,3,1,3,4,0,3,0,1,0,3,1,3,0,0,1,0,2,0,0,4,4),\n-(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n-(0,3,0,3,0,2,0,3,0,1,5,4,3,3,3,1,4,2,1,2,3,4,4,2,4,4,5,0,3,1,4,3,4,0,4,3,3,3,2,3,2,5,3,4,3,2,2,3,0,0,3,0,2,1,0,1,2,0,0,0,0,2,1,1,3,1,0,2,0,4,0,3,4,4,4,5,2,0,2,0,0,1,3),\n-(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,4,2,1,1,0,1,0,3,2,0,0,3,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,2,0,0,0,1,4,0,4,2,1,0,0,0,0,0,1),\n-(0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,3,1,0,0,0,2,0,2,1,0,0,1,2,1,0,1,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,3,1,0,0,0,0,0,1,0,0,2,1,0,0,0,0,0,0,0,0,2),\n-(0,4,0,4,0,4,0,3,0,4,4,3,4,2,4,3,2,0,4,4,4,3,5,3,5,3,3,2,4,2,4,3,4,3,1,4,0,2,3,4,4,4,3,3,3,4,4,4,3,4,1,3,4,3,2,1,2,1,3,3,3,4,4,3,3,5,0,4,0,3,0,4,3,3,3,2,1,0,3,0,0,3,3),\n-(0,4,0,3,0,3,0,3,0,3,5,5,3,3,3,3,4,3,4,3,3,3,4,4,4,3,3,3,3,4,3,5,3,3,1,3,2,4,5,5,5,5,4,3,4,5,5,3,2,2,3,3,3,3,2,3,3,1,2,3,2,4,3,3,3,4,0,4,0,2,0,4,3,2,2,1,2,0,3,0,0,4,1),\n-)\n-\n-class JapaneseContextAnalysis(object):\n-    NUM_OF_CATEGORY = 6\n-    DONT_KNOW = -1\n-    ENOUGH_REL_THRESHOLD = 100\n-    MAX_REL_THRESHOLD = 1000\n-    MINIMUM_DATA_THRESHOLD = 4\n-\n-    def __init__(self):\n-        self._total_rel = None\n-        self._rel_sample = None\n-        self._need_to_skip_char_num = None\n-        self._last_char_order = None\n-        self._done = None\n-        self.reset()\n-\n-    def reset(self):\n-        self._total_rel = 0  # total sequence received\n-        # category counters, each integer counts sequence in its category\n-        self._rel_sample = [0] * self.NUM_OF_CATEGORY\n-        # if last byte in current buffer is not the last byte of a character,\n-        # we need to know how many bytes to skip in next buffer\n-        self._need_to_skip_char_num = 0\n-        self._last_char_order = -1  # The order of previous char\n-        # If this flag is set to True, detection is done and conclusion has\n-        # been made\n-        self._done = False\n-\n-    def feed(self, byte_str, num_bytes):\n-        if self._done:\n-            return\n-\n-        # The buffer we got is byte oriented, and a character may span in more than one\n-        # buffers. In case the last one or two byte in last buffer is not\n-        # complete, we record how many byte needed to complete that character\n-        # and skip these bytes here.  We can choose to record those bytes as\n-        # well and analyse the character once it is complete, but since a\n-        # character will not make much difference, by simply skipping\n-        # this character will simply our logic and improve performance.\n-        i = self._need_to_skip_char_num\n-        while i < num_bytes:\n-            order, char_len = self.get_order(byte_str[i:i + 2])\n-            i += char_len\n-            if i > num_bytes:\n-                self._need_to_skip_char_num = i - num_bytes\n-                self._last_char_order = -1\n-            else:\n-                if (order != -1) and (self._last_char_order != -1):\n-                    self._total_rel += 1\n-                    if self._total_rel > self.MAX_REL_THRESHOLD:\n-                        self._done = True\n-                        break\n-                    self._rel_sample[jp2CharContext[self._last_char_order][order]] += 1\n-                self._last_char_order = order\n-\n-    def got_enough_data(self):\n-        return self._total_rel > self.ENOUGH_REL_THRESHOLD\n-\n-    def get_confidence(self):\n-        # This is just one way to calculate confidence. It works well for me.\n-        if self._total_rel > self.MINIMUM_DATA_THRESHOLD:\n-            return (self._total_rel - self._rel_sample[0]) / self._total_rel\n-        else:\n-            return self.DONT_KNOW\n-\n-    def get_order(self, byte_str):\n-        return -1, 1\n-\n-class SJISContextAnalysis(JapaneseContextAnalysis):\n-    def __init__(self):\n-        super(SJISContextAnalysis, self).__init__()\n-        self._charset_name = \"SHIFT_JIS\"\n-\n-    @property\n-    def charset_name(self):\n-        return self._charset_name\n-\n-    def get_order(self, byte_str):\n-        if not byte_str:\n-            return -1, 1\n-        # find out current char's byte length\n-        first_char = byte_str[0]\n-        if (0x81 <= first_char <= 0x9F) or (0xE0 <= first_char <= 0xFC):\n-            char_len = 2\n-            if (first_char == 0x87) or (0xFA <= first_char <= 0xFC):\n-                self._charset_name = \"CP932\"\n-        else:\n-            char_len = 1\n-\n-        # return its order if it is hiragana\n-        if len(byte_str) > 1:\n-            second_char = byte_str[1]\n-            if (first_char == 202) and (0x9F <= second_char <= 0xF1):\n-                return second_char - 0x9F, char_len\n-\n-        return -1, char_len\n-\n-class EUCJPContextAnalysis(JapaneseContextAnalysis):\n-    def get_order(self, byte_str):\n-        if not byte_str:\n-            return -1, 1\n-        # find out current char's byte length\n-        first_char = byte_str[0]\n-        if (first_char == 0x8E) or (0xA1 <= first_char <= 0xFE):\n-            char_len = 2\n-        elif first_char == 0x8F:\n-            char_len = 3\n-        else:\n-            char_len = 1\n-\n-        # return its order if it is hiragana\n-        if len(byte_str) > 1:\n-            second_char = byte_str[1]\n-            if (first_char == 0xA4) and (0xA1 <= second_char <= 0xF3):\n-                return second_char - 0xA1, char_len\n-\n-        return -1, char_len\n-\n-\n\n@@ -1,228 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# Character Mapping Table:\n-# this table is modified base on win1251BulgarianCharToOrderMap, so\n-# only number <64 is sure valid\n-\n-Latin5_BulgarianCharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 77, 90, 99,100, 72,109,107,101, 79,185, 81,102, 76, 94, 82,  # 40\n-110,186,108, 91, 74,119, 84, 96,111,187,115,253,253,253,253,253,  # 50\n-253, 65, 69, 70, 66, 63, 68,112,103, 92,194,104, 95, 86, 87, 71,  # 60\n-116,195, 85, 93, 97,113,196,197,198,199,200,253,253,253,253,253,  # 70\n-194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,  # 80\n-210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,  # 90\n- 81,226,227,228,229,230,105,231,232,233,234,235,236, 45,237,238,  # a0\n- 31, 32, 35, 43, 37, 44, 55, 47, 40, 59, 33, 46, 38, 36, 41, 30,  # b0\n- 39, 28, 34, 51, 48, 49, 53, 50, 54, 57, 61,239, 67,240, 60, 56,  # c0\n-  1, 18,  9, 20, 11,  3, 23, 15,  2, 26, 12, 10, 14,  6,  4, 13,  # d0\n-  7,  8,  5, 19, 29, 25, 22, 21, 27, 24, 17, 75, 52,241, 42, 16,  # e0\n- 62,242,243,244, 58,245, 98,246,247,248,249,250,251, 91,252,253,  # f0\n-)\n-\n-win1251BulgarianCharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 77, 90, 99,100, 72,109,107,101, 79,185, 81,102, 76, 94, 82,  # 40\n-110,186,108, 91, 74,119, 84, 96,111,187,115,253,253,253,253,253,  # 50\n-253, 65, 69, 70, 66, 63, 68,112,103, 92,194,104, 95, 86, 87, 71,  # 60\n-116,195, 85, 93, 97,113,196,197,198,199,200,253,253,253,253,253,  # 70\n-206,207,208,209,210,211,212,213,120,214,215,216,217,218,219,220,  # 80\n-221, 78, 64, 83,121, 98,117,105,222,223,224,225,226,227,228,229,  # 90\n- 88,230,231,232,233,122, 89,106,234,235,236,237,238, 45,239,240,  # a0\n- 73, 80,118,114,241,242,243,244,245, 62, 58,246,247,248,249,250,  # b0\n- 31, 32, 35, 43, 37, 44, 55, 47, 40, 59, 33, 46, 38, 36, 41, 30,  # c0\n- 39, 28, 34, 51, 48, 49, 53, 50, 54, 57, 61,251, 67,252, 60, 56,  # d0\n-  1, 18,  9, 20, 11,  3, 23, 15,  2, 26, 12, 10, 14,  6,  4, 13,  # e0\n-  7,  8,  5, 19, 29, 25, 22, 21, 27, 24, 17, 75, 52,253, 42, 16,  # f0\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 96.9392%\n-# first 1024 sequences:3.0618%\n-# rest  sequences:     0.2992%\n-# negative sequences:  0.0020%\n-BulgarianLangModel = (\n-0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,3,2,2,1,2,2,\n-3,1,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,0,1,\n-0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,0,3,1,0,\n-0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,1,3,3,3,3,2,2,2,1,1,2,0,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,2,3,2,2,3,3,1,1,2,3,3,2,3,3,3,3,2,1,2,0,2,0,3,0,0,\n-0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,1,3,3,3,3,3,2,3,2,3,3,3,3,3,2,3,3,1,3,0,3,0,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,3,1,3,3,2,3,3,3,1,3,3,2,3,2,2,2,0,0,2,0,2,0,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,3,3,3,1,2,2,3,2,1,1,2,0,2,0,0,0,0,\n-1,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,2,3,3,1,2,3,2,2,2,3,3,3,3,3,2,2,3,1,2,0,2,1,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,1,3,3,3,3,3,2,3,3,3,2,3,3,2,3,2,2,2,3,1,2,0,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,3,3,3,3,1,1,1,2,2,1,3,1,3,2,2,3,0,0,1,0,1,0,1,0,0,\n-0,0,0,1,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,2,2,3,2,2,3,1,2,1,1,1,2,3,1,3,1,2,2,0,1,1,1,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,1,3,2,2,3,3,1,2,3,1,1,3,3,3,3,1,2,2,1,1,1,0,2,0,2,0,1,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,3,3,2,2,1,1,2,0,2,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,0,1,2,1,3,3,2,3,3,3,3,3,2,3,2,1,0,3,1,2,1,2,1,2,3,2,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,1,3,3,2,3,3,2,2,2,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,3,0,3,3,3,3,3,2,1,1,2,1,3,3,0,3,1,1,1,1,3,2,0,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,1,1,3,1,3,3,2,3,2,2,2,3,0,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,2,3,3,2,2,3,2,1,1,1,1,1,3,1,3,1,1,0,0,0,1,0,0,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,2,3,2,0,3,2,0,3,0,2,0,0,2,1,3,1,0,0,1,0,0,0,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,2,1,1,1,1,2,1,1,2,1,1,1,2,2,1,2,1,1,1,0,1,1,0,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,2,1,3,1,1,2,1,3,2,1,1,0,1,2,3,2,1,1,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,3,2,2,1,0,1,0,0,1,0,0,0,2,1,0,3,0,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,2,3,2,3,3,1,3,2,1,1,1,2,1,1,2,1,3,0,1,0,0,0,1,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,1,2,2,3,3,2,3,2,2,2,3,1,2,2,1,1,2,1,1,2,2,0,1,1,0,1,0,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,2,1,3,1,0,2,2,1,3,2,1,0,0,2,0,2,0,1,0,0,0,0,0,0,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,3,1,2,0,2,3,1,2,3,2,0,1,3,1,2,1,1,1,0,0,1,0,0,2,2,2,3,\n-2,2,2,2,1,2,1,1,2,2,1,1,2,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,0,1,\n-3,3,3,3,3,2,1,2,2,1,2,0,2,0,1,0,1,2,1,2,1,1,0,0,0,1,0,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\n-3,3,2,3,3,1,1,3,1,0,3,2,1,0,0,0,1,2,0,2,0,1,0,0,0,1,0,1,2,1,2,2,\n-1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,0,1,2,1,1,1,0,0,0,0,0,1,1,0,0,\n-3,1,0,1,0,2,3,2,2,2,3,2,2,2,2,2,1,0,2,1,2,1,1,1,0,1,2,1,2,2,2,1,\n-1,1,2,2,2,2,1,2,1,1,0,1,2,1,2,2,2,1,1,1,0,1,1,1,1,2,0,1,0,0,0,0,\n-2,3,2,3,3,0,0,2,1,0,2,1,0,0,0,0,2,3,0,2,0,0,0,0,0,1,0,0,2,0,1,2,\n-2,1,2,1,2,2,1,1,1,2,1,1,1,0,1,2,2,1,1,1,1,1,0,1,1,1,0,0,1,2,0,0,\n-3,3,2,2,3,0,2,3,1,1,2,0,0,0,1,0,0,2,0,2,0,0,0,1,0,1,0,1,2,0,2,2,\n-1,1,1,1,2,1,0,1,2,2,2,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,\n-2,3,2,3,3,0,0,3,0,1,1,0,1,0,0,0,2,2,1,2,0,0,0,0,0,0,0,0,2,0,1,2,\n-2,2,1,1,1,1,1,2,2,2,1,0,2,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,\n-3,3,3,3,2,2,2,2,2,0,2,1,1,1,1,2,1,2,1,1,0,2,0,1,0,1,0,0,2,0,1,2,\n-1,1,1,1,1,1,1,2,2,1,1,0,2,0,1,0,2,0,0,1,1,1,0,0,2,0,0,0,1,1,0,0,\n-2,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0,0,0,1,2,0,1,2,\n-2,2,2,1,1,2,1,1,2,2,2,1,2,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,\n-2,3,3,3,3,0,2,2,0,2,1,0,0,0,1,1,1,2,0,2,0,0,0,3,0,0,0,0,2,0,2,2,\n-1,1,1,2,1,2,1,1,2,2,2,1,2,0,1,1,1,0,1,1,1,1,0,2,1,0,0,0,1,1,0,0,\n-2,3,3,3,3,0,2,1,0,0,2,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,2,0,1,2,\n-1,1,1,2,1,1,1,1,2,2,2,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,\n-3,3,2,2,3,0,1,0,1,0,0,0,0,0,0,0,1,1,0,3,0,0,0,0,0,0,0,0,1,0,2,2,\n-1,1,1,1,1,2,1,1,2,2,1,2,2,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,\n-3,1,0,1,0,2,2,2,2,3,2,1,1,1,2,3,0,0,1,0,2,1,1,0,1,1,1,1,2,1,1,1,\n-1,2,2,1,2,1,2,2,1,1,0,1,2,1,2,2,1,1,1,0,0,1,1,1,2,1,0,1,0,0,0,0,\n-2,1,0,1,0,3,1,2,2,2,2,1,2,2,1,1,1,0,2,1,2,2,1,1,2,1,1,0,2,1,1,1,\n-1,2,2,2,2,2,2,2,1,2,0,1,1,0,2,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,\n-2,1,1,1,1,2,2,2,2,1,2,2,2,1,2,2,1,1,2,1,2,3,2,2,1,1,1,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,3,2,0,1,2,0,1,2,1,1,0,1,0,1,2,1,2,0,0,0,1,1,0,0,0,1,0,0,2,\n-1,1,0,0,1,1,0,1,1,1,1,0,2,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,\n-2,0,0,0,0,1,2,2,2,2,2,2,2,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,\n-1,2,2,2,2,1,1,2,1,2,1,1,1,0,2,1,2,1,1,1,0,2,1,1,1,1,0,1,0,0,0,0,\n-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,\n-1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,3,2,0,0,0,0,1,0,0,0,0,0,0,1,1,0,2,0,0,0,0,0,0,0,0,1,0,1,2,\n-1,1,1,1,1,1,0,0,2,2,2,2,2,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,\n-2,3,1,2,1,0,1,1,0,2,2,2,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,2,\n-1,1,1,1,2,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,\n-2,2,2,2,2,0,0,2,0,0,2,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,2,2,\n-1,1,1,1,1,0,0,1,2,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,2,2,0,0,2,0,1,1,0,0,0,1,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,1,1,\n-0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,3,2,0,0,1,0,0,1,0,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,0,0,0,0,2,\n-1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n-2,1,2,2,2,1,2,1,2,2,1,1,2,1,1,1,0,1,1,1,1,2,0,1,0,1,1,1,1,0,1,1,\n-1,1,2,1,1,1,1,1,1,0,0,1,2,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,\n-1,0,0,1,3,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,2,1,0,0,1,0,2,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,2,0,0,1,\n-0,2,0,1,0,0,1,1,2,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,2,2,0,1,1,0,2,1,0,1,1,1,0,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,1,\n-0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,2,2,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,\n-0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,1,0,0,1,2,1,1,1,1,1,1,2,2,1,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,\n-1,1,2,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,1,2,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,\n-0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,\n-0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,2,0,0,2,0,1,0,0,1,0,0,1,\n-1,1,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,\n-1,1,1,1,1,1,1,2,0,0,0,0,0,0,2,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-)\n-\n-Latin5BulgarianModel = {\n-  'char_to_order_map': Latin5_BulgarianCharToOrderMap,\n-  'precedence_matrix': BulgarianLangModel,\n-  'typical_positive_ratio': 0.969392,\n-  'keep_english_letter': False,\n-  'charset_name': \"ISO-8859-5\",\n-  'language': 'Bulgairan',\n-}\n-\n-Win1251BulgarianModel = {\n-  'char_to_order_map': win1251BulgarianCharToOrderMap,\n-  'precedence_matrix': BulgarianLangModel,\n-  'typical_positive_ratio': 0.969392,\n-  'keep_english_letter': False,\n-  'charset_name': \"windows-1251\",\n-  'language': 'Bulgarian',\n-}\n\n@@ -1,333 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# KOI8-R language model\n-# Character Mapping Table:\n-KOI8R_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n-191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,  # 80\n-207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,  # 90\n-223,224,225, 68,226,227,228,229,230,231,232,233,234,235,236,237,  # a0\n-238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,  # b0\n- 27,  3, 21, 28, 13,  2, 39, 19, 26,  4, 23, 11,  8, 12,  5,  1,  # c0\n- 15, 16,  9,  7,  6, 14, 24, 10, 17, 18, 20, 25, 30, 29, 22, 54,  # d0\n- 59, 37, 44, 58, 41, 48, 53, 46, 55, 42, 60, 36, 49, 38, 31, 34,  # e0\n- 35, 43, 45, 32, 40, 52, 56, 33, 61, 62, 51, 57, 47, 63, 50, 70,  # f0\n-)\n-\n-win1251_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n-191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,\n-207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,\n-223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,\n-239,240,241,242,243,244,245,246, 68,247,248,249,250,251,252,253,\n- 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,\n- 45, 32, 40, 52, 53, 55, 58, 50, 57, 63, 70, 62, 61, 47, 59, 43,\n-  3, 21, 10, 19, 13,  2, 24, 20,  4, 23, 11,  8, 12,  5,  1, 15,\n-  9,  7,  6, 14, 39, 26, 28, 22, 25, 29, 54, 18, 17, 30, 27, 16,\n-)\n-\n-latin5_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n-191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,\n-207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,\n-223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,\n- 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,\n- 45, 32, 40, 52, 53, 55, 58, 50, 57, 63, 70, 62, 61, 47, 59, 43,\n-  3, 21, 10, 19, 13,  2, 24, 20,  4, 23, 11,  8, 12,  5,  1, 15,\n-  9,  7,  6, 14, 39, 26, 28, 22, 25, 29, 54, 18, 17, 30, 27, 16,\n-239, 68,240,241,242,243,244,245,246,247,248,249,250,251,252,255,\n-)\n-\n-macCyrillic_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n- 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,\n- 45, 32, 40, 52, 53, 55, 58, 50, 57, 63, 70, 62, 61, 47, 59, 43,\n-191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,\n-207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,\n-223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,\n-239,240,241,242,243,244,245,246,247,248,249,250,251,252, 68, 16,\n-  3, 21, 10, 19, 13,  2, 24, 20,  4, 23, 11,  8, 12,  5,  1, 15,\n-  9,  7,  6, 14, 39, 26, 28, 22, 25, 29, 54, 18, 17, 30, 27,255,\n-)\n-\n-IBM855_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n-191,192,193,194, 68,195,196,197,198,199,200,201,202,203,204,205,\n-206,207,208,209,210,211,212,213,214,215,216,217, 27, 59, 54, 70,\n-  3, 37, 21, 44, 28, 58, 13, 41,  2, 48, 39, 53, 19, 46,218,219,\n-220,221,222,223,224, 26, 55,  4, 42,225,226,227,228, 23, 60,229,\n-230,231,232,233,234,235, 11, 36,236,237,238,239,240,241,242,243,\n-  8, 49, 12, 38,  5, 31,  1, 34, 15,244,245,246,247, 35, 16,248,\n- 43,  9, 45,  7, 32,  6, 40, 14, 52, 24, 56, 10, 33, 17, 61,249,\n-250, 18, 62, 20, 51, 25, 57, 30, 47, 29, 63, 22, 50,251,252,255,\n-)\n-\n-IBM866_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n-155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n-253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n- 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n- 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,\n- 45, 32, 40, 52, 53, 55, 58, 50, 57, 63, 70, 62, 61, 47, 59, 43,\n-  3, 21, 10, 19, 13,  2, 24, 20,  4, 23, 11,  8, 12,  5,  1, 15,\n-191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,\n-207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,\n-223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,\n-  9,  7,  6, 14, 39, 26, 28, 22, 25, 29, 54, 18, 17, 30, 27, 16,\n-239, 68,240,241,242,243,244,245,246,247,248,249,250,251,252,255,\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 97.6601%\n-# first 1024 sequences: 2.3389%\n-# rest  sequences:      0.1237%\n-# negative sequences:   0.0009%\n-RussianLangModel = (\n-0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,1,3,3,3,2,3,2,3,3,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,2,2,2,2,0,0,2,\n-3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,3,2,3,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,2,2,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,2,3,3,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,2,1,\n-0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,2,1,\n-0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,2,2,2,3,1,3,3,1,3,3,3,3,2,2,3,0,2,2,2,3,3,2,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,3,3,3,3,3,2,2,3,2,3,3,3,2,1,2,2,0,1,2,2,2,2,2,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,3,0,2,2,3,3,2,1,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,3,3,1,2,3,2,2,3,2,3,3,3,3,2,2,3,0,3,2,2,3,1,1,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,2,3,3,3,3,2,2,2,0,3,3,3,2,2,2,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,2,3,2,2,0,1,3,2,1,2,2,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,2,1,1,3,0,1,1,1,1,2,1,1,0,2,2,2,1,2,0,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,3,3,2,2,2,2,1,3,2,3,2,3,2,1,2,2,0,1,1,2,1,2,1,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,2,3,3,3,2,2,2,2,0,2,2,2,2,3,1,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,2,3,2,2,3,3,3,3,3,3,3,3,3,1,3,2,0,0,3,3,3,3,2,3,3,3,3,2,3,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,3,3,2,2,3,3,0,2,1,0,3,2,3,2,3,0,0,1,2,0,0,1,0,1,2,1,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,3,0,2,3,3,3,3,2,3,3,3,3,1,2,2,0,0,2,3,2,2,2,3,2,3,2,2,3,0,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,3,0,2,3,2,3,0,1,2,3,3,2,0,2,3,0,0,2,3,2,2,0,1,3,1,3,2,2,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,3,0,2,3,3,3,3,3,3,3,3,2,1,3,2,0,0,2,2,3,3,3,2,3,3,0,2,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,2,3,3,2,2,2,3,3,0,0,1,1,1,1,1,2,0,0,1,1,1,1,0,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,0,3,2,3,3,2,3,2,0,2,1,0,1,1,0,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,3,3,3,2,2,2,2,3,1,3,2,3,1,1,2,1,0,2,2,2,2,1,3,1,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-2,2,3,3,3,3,3,1,2,2,1,3,1,0,3,0,0,3,0,0,0,1,1,0,1,2,1,0,0,0,0,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,2,1,1,3,3,3,2,2,1,2,2,3,1,1,2,0,0,2,2,1,3,0,0,2,1,1,2,1,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,3,3,3,3,1,2,2,2,1,2,1,3,3,1,1,2,1,2,1,2,2,0,2,0,0,1,1,0,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,3,3,2,1,3,2,2,3,2,0,3,2,0,3,0,1,0,1,1,0,0,1,1,1,1,0,1,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,2,3,3,3,2,2,2,3,3,1,2,1,2,1,0,1,0,1,1,0,1,0,0,2,1,1,1,0,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-3,1,1,2,1,2,3,3,2,2,1,2,2,3,0,2,1,0,0,2,2,3,2,1,2,2,2,2,2,3,1,0,\n-0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,1,1,0,1,1,2,2,1,1,3,0,0,1,3,1,1,1,0,0,0,1,0,1,1,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,1,3,3,3,2,0,0,0,2,1,0,1,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,1,0,0,2,3,2,2,2,1,2,2,2,1,2,1,0,0,1,1,1,0,2,0,1,1,1,0,0,1,1,\n-1,0,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,3,0,0,0,0,1,0,0,0,0,3,0,1,2,1,0,0,0,0,0,0,0,1,1,0,0,1,1,\n-1,0,1,0,1,2,0,0,1,1,2,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,\n-2,2,3,2,2,2,3,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,1,0,1,1,1,0,2,1,\n-1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,\n-3,3,3,2,2,2,2,3,2,2,1,1,2,2,2,2,1,1,3,1,2,1,2,0,0,1,1,0,1,0,2,1,\n-1,1,1,1,1,2,1,0,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,\n-2,0,0,1,0,3,2,2,2,2,1,2,1,2,1,2,0,0,0,2,1,2,2,1,1,2,2,0,1,1,0,2,\n-1,1,1,1,1,0,1,1,1,2,1,1,1,2,1,0,1,2,1,1,1,1,0,1,1,1,0,0,1,0,0,1,\n-1,3,2,2,2,1,1,1,2,3,0,0,0,0,2,0,2,2,1,0,0,0,0,0,0,1,0,0,0,0,1,1,\n-1,0,1,1,0,1,0,1,1,0,1,1,0,2,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,\n-2,3,2,3,2,1,2,2,2,2,1,0,0,0,2,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,2,1,\n-1,1,2,1,0,2,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,\n-3,0,0,1,0,2,2,2,3,2,2,2,2,2,2,2,0,0,0,2,1,2,1,1,1,2,2,0,0,0,1,2,\n-1,1,1,1,1,0,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,\n-2,3,2,3,3,2,0,1,1,1,0,0,1,0,2,0,1,1,3,1,0,0,0,0,0,0,0,1,0,0,2,1,\n-1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,\n-2,3,3,3,3,1,2,2,2,2,0,1,1,0,2,1,1,1,2,1,0,1,1,0,0,1,0,1,0,0,2,0,\n-0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,3,3,2,0,0,1,1,2,2,1,0,0,2,0,1,1,3,0,0,1,0,0,0,0,0,1,0,1,2,1,\n-1,1,2,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,\n-1,3,2,3,2,1,0,0,2,2,2,0,1,0,2,0,1,1,1,0,1,0,0,0,3,0,1,1,0,0,2,1,\n-1,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,2,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,\n-3,1,2,1,1,2,2,2,2,2,2,1,2,2,1,1,0,0,0,2,2,2,0,0,0,1,2,1,0,1,0,1,\n-2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,\n-3,0,0,0,0,2,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,\n-1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,\n-1,3,3,2,2,0,0,0,2,2,0,0,0,1,2,0,1,1,2,0,0,0,0,0,0,0,0,1,0,0,2,1,\n-0,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,\n-2,3,2,3,2,0,0,0,0,1,1,0,0,0,2,0,2,0,2,0,0,0,0,0,1,0,0,1,0,0,1,1,\n-1,1,2,0,1,2,1,0,1,1,2,1,1,1,1,1,2,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,\n-1,3,2,2,2,1,0,0,2,2,1,0,1,2,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,\n-0,0,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,0,2,3,1,2,2,2,2,2,2,1,1,0,0,0,1,0,1,0,2,1,1,1,0,0,0,0,1,\n-1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,\n-2,0,2,0,0,1,0,3,2,1,2,1,2,2,0,1,0,0,0,2,1,0,0,2,1,1,1,1,0,2,0,2,\n-2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,\n-1,2,2,2,2,1,0,0,1,0,0,0,0,0,2,0,1,1,1,1,0,0,0,0,1,0,1,2,0,0,2,0,\n-1,0,1,1,1,2,1,0,1,0,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,0,\n-2,1,2,2,2,0,3,0,1,1,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,\n-1,2,2,3,2,2,0,0,1,1,2,0,1,2,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,\n-0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,\n-2,2,1,1,2,1,2,2,2,2,2,1,2,2,0,1,0,0,0,1,2,2,2,1,2,1,1,1,1,1,2,1,\n-1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,\n-1,2,2,2,2,0,1,0,2,2,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,\n-0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,2,2,0,0,0,2,2,2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,\n-0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,2,2,0,0,0,0,1,0,0,1,1,2,0,0,0,0,1,0,1,0,0,1,0,0,2,0,0,0,1,\n-0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,2,2,1,1,2,0,2,1,1,1,1,0,2,2,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,\n-0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,2,1,2,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,\n-0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,\n-1,0,0,0,0,2,0,1,2,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,\n-0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-1,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,\n-0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,\n-)\n-\n-Koi8rModel = {\n-  'char_to_order_map': KOI8R_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"KOI8-R\",\n-  'language': 'Russian',\n-}\n-\n-Win1251CyrillicModel = {\n-  'char_to_order_map': win1251_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"windows-1251\",\n-  'language': 'Russian',\n-}\n-\n-Latin5CyrillicModel = {\n-  'char_to_order_map': latin5_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"ISO-8859-5\",\n-  'language': 'Russian',\n-}\n-\n-MacCyrillicModel = {\n-  'char_to_order_map': macCyrillic_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"MacCyrillic\",\n-  'language': 'Russian',\n-}\n-\n-Ibm866Model = {\n-  'char_to_order_map': IBM866_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"IBM866\",\n-  'language': 'Russian',\n-}\n-\n-Ibm855Model = {\n-  'char_to_order_map': IBM855_char_to_order_map,\n-  'precedence_matrix': RussianLangModel,\n-  'typical_positive_ratio': 0.976601,\n-  'keep_english_letter': False,\n-  'charset_name': \"IBM855\",\n-  'language': 'Russian',\n-}\n\n@@ -1,225 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# Character Mapping Table:\n-Latin7_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 82,100,104, 94, 98,101,116,102,111,187,117, 92, 88,113, 85,  # 40\n- 79,118,105, 83, 67,114,119, 95, 99,109,188,253,253,253,253,253,  # 50\n-253, 72, 70, 80, 81, 60, 96, 93, 89, 68,120, 97, 77, 86, 69, 55,  # 60\n- 78,115, 65, 66, 58, 76,106,103, 87,107,112,253,253,253,253,253,  # 70\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 80\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 90\n-253,233, 90,253,253,253,253,253,253,253,253,253,253, 74,253,253,  # a0\n-253,253,253,253,247,248, 61, 36, 46, 71, 73,253, 54,253,108,123,  # b0\n-110, 31, 51, 43, 41, 34, 91, 40, 52, 47, 44, 53, 38, 49, 59, 39,  # c0\n- 35, 48,250, 37, 33, 45, 56, 50, 84, 57,120,121, 17, 18, 22, 15,  # d0\n-124,  1, 29, 20, 21,  3, 32, 13, 25,  5, 11, 16, 10,  6, 30,  4,  # e0\n-  9,  8, 14,  7,  2, 12, 28, 23, 42, 24, 64, 75, 19, 26, 27,253,  # f0\n-)\n-\n-win1253_char_to_order_map = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 82,100,104, 94, 98,101,116,102,111,187,117, 92, 88,113, 85,  # 40\n- 79,118,105, 83, 67,114,119, 95, 99,109,188,253,253,253,253,253,  # 50\n-253, 72, 70, 80, 81, 60, 96, 93, 89, 68,120, 97, 77, 86, 69, 55,  # 60\n- 78,115, 65, 66, 58, 76,106,103, 87,107,112,253,253,253,253,253,  # 70\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 80\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 90\n-253,233, 61,253,253,253,253,253,253,253,253,253,253, 74,253,253,  # a0\n-253,253,253,253,247,253,253, 36, 46, 71, 73,253, 54,253,108,123,  # b0\n-110, 31, 51, 43, 41, 34, 91, 40, 52, 47, 44, 53, 38, 49, 59, 39,  # c0\n- 35, 48,250, 37, 33, 45, 56, 50, 84, 57,120,121, 17, 18, 22, 15,  # d0\n-124,  1, 29, 20, 21,  3, 32, 13, 25,  5, 11, 16, 10,  6, 30,  4,  # e0\n-  9,  8, 14,  7,  2, 12, 28, 23, 42, 24, 64, 75, 19, 26, 27,253,  # f0\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 98.2851%\n-# first 1024 sequences:1.7001%\n-# rest  sequences:     0.0359%\n-# negative sequences:  0.0148%\n-GreekLangModel = (\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,2,2,3,3,3,3,3,3,3,3,1,3,3,3,0,2,2,3,3,0,3,0,3,2,0,3,3,3,0,\n-3,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,0,3,3,0,3,2,3,3,0,3,2,3,3,3,0,0,3,0,3,0,3,3,2,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,\n-0,2,3,2,2,3,3,3,3,3,3,3,3,0,3,3,3,3,0,2,3,3,0,3,3,3,3,2,3,3,3,0,\n-2,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,2,1,3,3,3,3,2,3,3,2,3,3,2,0,\n-0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,0,3,3,3,3,3,3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,2,3,3,0,\n-2,0,1,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,2,3,0,0,0,0,3,3,0,3,1,3,3,3,0,3,3,0,3,3,3,3,0,0,0,0,\n-2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,0,3,0,3,3,3,3,3,0,3,2,2,2,3,0,2,3,3,3,3,3,2,3,3,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,3,2,2,2,3,3,3,3,0,3,1,3,3,3,3,2,3,3,3,3,3,3,3,2,2,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,2,0,3,0,0,0,3,3,2,3,3,3,3,3,0,0,3,2,3,0,2,3,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,3,3,3,3,0,0,3,3,0,2,3,0,3,0,3,3,3,0,0,3,0,3,0,2,2,3,3,0,0,\n-0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,2,0,3,2,3,3,3,3,0,3,3,3,3,3,0,3,3,2,3,2,3,3,2,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,2,3,2,3,3,3,3,3,3,0,2,3,2,3,2,2,2,3,2,3,3,2,3,0,2,2,2,3,0,\n-2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,0,0,0,3,3,3,2,3,3,0,0,3,0,3,0,0,0,3,2,0,3,0,3,0,0,2,0,2,0,\n-0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,0,3,3,3,3,3,3,0,3,3,0,3,0,0,0,3,3,0,3,3,3,0,0,1,2,3,0,\n-3,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,2,0,0,3,2,2,3,3,0,3,3,3,3,3,2,1,3,0,3,2,3,3,2,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,3,0,2,3,3,3,3,3,3,0,0,3,0,3,0,0,0,3,3,0,3,2,3,0,0,3,3,3,0,\n-3,0,0,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,0,3,3,3,3,3,3,0,0,3,0,3,0,0,0,3,2,0,3,2,3,0,0,3,2,3,0,\n-2,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,1,2,2,3,3,3,3,3,3,0,2,3,0,3,0,0,0,3,3,0,3,0,2,0,0,2,3,1,0,\n-2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,3,3,3,3,0,3,0,3,3,2,3,0,3,3,3,3,3,3,0,3,3,3,0,2,3,0,0,3,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,3,3,3,0,0,3,0,0,0,3,3,0,3,0,2,3,3,0,0,3,0,3,0,3,3,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,0,0,0,3,3,3,3,3,3,0,0,3,0,2,0,0,0,3,3,0,3,0,3,0,0,2,0,2,0,\n-0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,3,0,3,0,2,0,3,2,0,3,2,3,2,3,0,0,3,2,3,2,3,3,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,0,0,2,3,3,3,3,3,0,0,0,3,0,2,1,0,0,3,2,2,2,0,3,0,0,2,2,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,3,3,3,2,0,3,0,3,0,3,3,0,2,1,2,3,3,0,0,3,0,3,0,3,3,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,3,3,3,0,3,3,3,3,3,3,0,2,3,0,3,0,0,0,2,1,0,2,2,3,0,0,2,2,2,0,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,3,0,0,2,3,3,3,2,3,0,0,1,3,0,2,0,0,0,0,3,0,1,0,2,0,0,1,1,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,3,1,0,3,0,0,0,3,2,0,3,2,3,3,3,0,0,3,0,3,2,2,2,1,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,3,3,3,0,0,3,0,0,0,0,2,0,2,3,3,2,2,2,2,3,0,2,0,2,2,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,3,3,3,2,0,0,0,0,0,0,2,3,0,2,0,2,3,2,0,0,3,0,3,0,3,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,3,2,3,3,2,2,3,0,2,0,3,0,0,0,2,0,0,0,0,1,2,0,2,0,2,0,\n-0,2,0,2,0,2,2,0,0,1,0,2,2,2,0,2,2,2,0,2,2,2,0,0,2,0,0,1,0,0,0,0,\n-0,2,0,3,3,2,0,0,0,0,0,0,1,3,0,2,0,2,2,2,0,0,2,0,3,0,0,2,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,2,3,2,0,2,2,0,2,0,2,2,0,2,0,2,2,2,0,0,0,0,0,0,2,3,0,0,0,2,\n-0,1,2,0,0,0,0,2,2,0,0,0,2,1,0,2,2,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,\n-0,0,2,1,0,2,3,2,2,3,2,3,2,0,0,3,3,3,0,0,3,2,0,0,0,1,1,0,2,0,2,2,\n-0,2,0,2,0,2,2,0,0,2,0,2,2,2,0,2,2,2,2,0,0,2,0,0,0,2,0,1,0,0,0,0,\n-0,3,0,3,3,2,2,0,3,0,0,0,2,2,0,2,2,2,1,2,0,0,1,2,2,0,0,3,0,0,0,2,\n-0,1,2,0,0,0,1,2,0,0,0,0,0,0,0,2,2,0,1,0,0,2,0,0,0,2,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,3,3,2,2,0,0,0,2,0,2,3,3,0,2,0,0,0,0,0,0,2,2,2,0,2,2,0,2,0,2,\n-0,2,2,0,0,2,2,2,2,1,0,0,2,2,0,2,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,\n-0,2,0,3,2,3,0,0,0,3,0,0,2,2,0,2,0,2,2,2,0,0,2,0,0,0,0,0,0,0,0,2,\n-0,0,2,2,0,0,2,2,2,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,2,0,0,3,2,0,2,2,2,2,2,0,0,0,2,0,0,0,0,2,0,1,0,0,2,0,1,0,0,0,\n-0,2,2,2,0,2,2,0,1,2,0,2,2,2,0,2,2,2,2,1,2,2,0,0,2,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,2,0,2,0,2,2,0,0,0,0,1,2,1,0,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,3,2,3,0,0,2,0,0,0,2,2,0,2,0,0,0,1,0,0,2,0,2,0,2,2,0,0,0,0,\n-0,0,2,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,\n-0,2,2,3,2,2,0,0,0,0,0,0,1,3,0,2,0,2,2,0,0,0,1,0,2,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,0,2,0,3,2,0,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-0,0,2,0,0,0,0,1,1,0,0,2,1,2,0,2,2,0,1,0,0,1,0,0,0,2,0,0,0,0,0,0,\n-0,3,0,2,2,2,0,0,2,0,0,0,2,0,0,0,2,3,0,2,0,0,0,0,0,0,2,2,0,0,0,2,\n-0,1,2,0,0,0,1,2,2,1,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,1,2,0,2,2,0,2,0,0,2,0,0,0,0,1,2,1,0,2,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,2,0,0,0,3,1,2,2,0,2,0,0,0,0,2,0,0,0,2,0,0,3,0,0,0,0,2,2,2,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,1,0,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,2,\n-0,2,2,0,0,2,2,2,2,2,0,1,2,0,0,0,2,2,0,1,0,2,0,0,2,2,0,0,0,0,0,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,2,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,2,\n-0,1,2,0,0,0,0,2,2,1,0,1,0,1,0,2,2,2,1,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-0,2,0,1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,0,0,0,0,1,0,0,0,0,0,0,2,\n-0,2,2,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,\n-0,2,2,2,2,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,1,\n-0,0,2,0,0,0,0,1,2,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-0,2,0,2,2,2,0,0,2,0,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,2,\n-0,0,1,0,0,0,0,2,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,\n-0,3,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,\n-0,0,2,0,0,0,0,2,2,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,2,0,2,2,1,0,0,0,0,0,0,2,0,0,2,0,2,2,2,0,0,0,0,0,0,2,0,0,0,0,2,\n-0,0,2,0,0,2,0,2,2,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,\n-0,0,3,0,0,0,2,2,0,2,2,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,\n-0,2,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,\n-0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,2,0,0,0,2,0,0,0,0,0,1,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,2,0,0,0,\n-0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,2,0,2,0,0,0,\n-0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,2,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-)\n-\n-Latin7GreekModel = {\n-  'char_to_order_map': Latin7_char_to_order_map,\n-  'precedence_matrix': GreekLangModel,\n-  'typical_positive_ratio': 0.982851,\n-  'keep_english_letter': False,\n-  'charset_name': \"ISO-8859-7\",\n-  'language': 'Greek',\n-}\n-\n-Win1253GreekModel = {\n-  'char_to_order_map': win1253_char_to_order_map,\n-  'precedence_matrix': GreekLangModel,\n-  'typical_positive_ratio': 0.982851,\n-  'keep_english_letter': False,\n-  'charset_name': \"windows-1253\",\n-  'language': 'Greek',\n-}\n\n@@ -1,200 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-#          Simon Montagu\n-# Portions created by the Initial Developer are Copyright (C) 2005\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#   Shoshannah Forbes - original C code (?)\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# Windows-1255 language model\n-# Character Mapping Table:\n-WIN1255_CHAR_TO_ORDER_MAP = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 69, 91, 79, 80, 92, 89, 97, 90, 68,111,112, 82, 73, 95, 85,  # 40\n- 78,121, 86, 71, 67,102,107, 84,114,103,115,253,253,253,253,253,  # 50\n-253, 50, 74, 60, 61, 42, 76, 70, 64, 53,105, 93, 56, 65, 54, 49,  # 60\n- 66,110, 51, 43, 44, 63, 81, 77, 98, 75,108,253,253,253,253,253,  # 70\n-124,202,203,204,205, 40, 58,206,207,208,209,210,211,212,213,214,\n-215, 83, 52, 47, 46, 72, 32, 94,216,113,217,109,218,219,220,221,\n- 34,116,222,118,100,223,224,117,119,104,125,225,226, 87, 99,227,\n-106,122,123,228, 55,229,230,101,231,232,120,233, 48, 39, 57,234,\n- 30, 59, 41, 88, 33, 37, 36, 31, 29, 35,235, 62, 28,236,126,237,\n-238, 38, 45,239,240,241,242,243,127,244,245,246,247,248,249,250,\n-  9,  8, 20, 16,  3,  2, 24, 14, 22,  1, 25, 15,  4, 11,  6, 23,\n- 12, 19, 13, 26, 18, 27, 21, 17,  7, 10,  5,251,252,128, 96,253,\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 98.4004%\n-# first 1024 sequences: 1.5981%\n-# rest  sequences:      0.087%\n-# negative sequences:   0.0015%\n-HEBREW_LANG_MODEL = (\n-0,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,2,1,2,0,1,0,0,\n-3,0,3,1,0,0,1,3,2,0,1,1,2,0,2,2,2,1,1,1,1,2,1,1,1,2,0,0,2,2,0,1,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,\n-1,2,1,2,1,2,0,0,2,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,\n-1,2,1,3,1,1,0,0,2,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,2,2,1,3,\n-1,2,1,1,2,2,0,0,2,2,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,2,3,2,\n-1,2,1,2,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,3,2,2,3,2,2,2,1,2,2,2,2,\n-1,2,1,1,2,2,0,1,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,2,2,2,2,2,\n-0,2,0,2,2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,0,2,2,2,\n-0,2,1,2,2,2,0,0,2,1,0,0,0,0,1,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,3,2,2,2,\n-1,2,1,2,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,\n-3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,2,0,2,\n-0,2,1,2,2,2,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,2,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,2,3,2,1,2,1,1,1,\n-0,1,1,1,1,1,3,0,1,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,\n-0,0,1,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,\n-0,2,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,2,3,3,3,2,1,2,3,3,2,3,3,3,3,2,3,2,1,2,0,2,1,2,\n-0,2,0,2,2,2,0,0,1,2,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,2,3,3,3,1,2,2,3,3,2,3,2,3,2,2,3,1,2,2,0,2,2,2,\n-0,2,1,2,2,2,0,0,1,2,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,2,2,3,3,3,3,1,3,2,2,2,\n-0,2,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,2,3,2,2,2,1,2,2,0,2,2,2,2,\n-0,2,0,2,2,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,1,3,2,3,3,2,3,3,2,2,1,2,2,2,2,2,2,\n-0,2,1,2,1,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,2,3,2,3,3,2,3,3,3,3,2,3,2,3,3,3,3,3,2,2,2,2,2,2,2,1,\n-0,2,0,1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,2,1,2,3,3,3,3,3,3,3,2,3,2,3,2,1,2,3,0,2,1,2,2,\n-0,2,1,1,2,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,\n-3,3,3,3,3,3,3,3,3,2,3,3,3,3,2,1,3,1,2,2,2,1,2,3,3,1,2,1,2,2,2,2,\n-0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,0,2,3,3,3,1,3,3,3,1,2,2,2,2,1,1,2,2,2,2,2,2,\n-0,2,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,2,3,3,3,2,2,3,3,3,2,1,2,3,2,3,2,2,2,2,1,2,1,1,1,2,2,\n-0,2,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,\n-1,0,1,0,0,0,0,0,2,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,2,3,3,2,3,1,2,2,2,2,3,2,3,1,1,2,2,1,2,2,1,1,0,2,2,2,2,\n-0,1,0,1,2,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n-3,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,\n-0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-3,2,2,1,2,2,2,2,2,2,2,1,2,2,1,2,2,1,1,1,1,1,1,1,1,2,1,1,0,3,3,3,\n-0,3,0,2,2,2,2,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,2,1,1,1,2,0,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,0,0,0,0,0,\n-0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,0,2,1,0,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-0,3,1,1,2,2,2,2,2,1,2,2,2,1,1,2,2,2,2,2,2,2,1,2,2,1,0,1,1,1,1,0,\n-0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,1,1,1,1,2,1,1,2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,\n-0,0,2,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,\n-2,1,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,1,2,1,1,1,1,0,0,0,0,\n-0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,1,2,1,1,1,2,1,2,1,2,0,1,0,1,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,3,1,2,2,2,1,2,2,2,2,2,2,2,2,1,2,1,1,1,1,1,1,2,1,2,1,1,0,1,0,1,\n-0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,1,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,\n-0,2,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,2,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,\n-0,1,1,1,2,1,2,2,2,0,2,0,2,0,1,1,2,1,1,1,1,2,1,0,1,1,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,1,0,0,0,0,0,1,0,1,2,2,0,1,0,0,1,1,2,2,1,2,0,2,0,0,0,1,2,0,1,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,2,0,2,1,2,0,2,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,1,0,0,0,0,0,1,0,2,1,1,0,1,0,0,1,1,1,2,2,0,0,1,0,0,0,1,0,0,1,\n-1,1,2,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,2,1,\n-0,2,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,1,1,1,1,1,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,\n-2,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,1,2,1,1,2,0,1,0,0,0,1,1,0,1,\n-1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,1,1,2,0,1,0,0,0,0,2,1,1,2,0,2,0,0,0,1,1,0,1,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,2,1,1,0,1,0,0,2,2,1,2,1,1,0,1,0,0,0,1,1,0,1,\n-2,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,2,1,1,1,0,2,1,1,0,0,0,2,1,0,1,\n-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,1,1,2,0,1,0,0,1,1,0,2,1,1,0,1,0,0,0,1,1,0,1,\n-2,2,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,2,1,1,0,1,0,0,1,1,0,1,2,1,0,2,0,0,0,1,1,0,1,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,\n-0,1,0,0,2,0,2,1,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,1,0,1,1,2,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,\n-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,2,1,1,1,1,1,0,1,0,0,0,0,1,0,1,\n-0,1,1,1,2,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,\n-)\n-\n-Win1255HebrewModel = {\n-  'char_to_order_map': WIN1255_CHAR_TO_ORDER_MAP,\n-  'precedence_matrix': HEBREW_LANG_MODEL,\n-  'typical_positive_ratio': 0.984004,\n-  'keep_english_letter': False,\n-  'charset_name': \"windows-1255\",\n-  'language': 'Hebrew',\n-}\n\n@@ -1,225 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# Character Mapping Table:\n-Latin2_HungarianCharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 28, 40, 54, 45, 32, 50, 49, 38, 39, 53, 36, 41, 34, 35, 47,\n- 46, 71, 43, 33, 37, 57, 48, 64, 68, 55, 52,253,253,253,253,253,\n-253,  2, 18, 26, 17,  1, 27, 12, 20,  9, 22,  7,  6, 13,  4,  8,\n- 23, 67, 10,  5,  3, 21, 19, 65, 62, 16, 11,253,253,253,253,253,\n-159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,\n-175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,\n-191,192,193,194,195,196,197, 75,198,199,200,201,202,203,204,205,\n- 79,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,\n-221, 51, 81,222, 78,223,224,225,226, 44,227,228,229, 61,230,231,\n-232,233,234, 58,235, 66, 59,236,237,238, 60, 69, 63,239,240,241,\n- 82, 14, 74,242, 70, 80,243, 72,244, 15, 83, 77, 84, 30, 76, 85,\n-245,246,247, 25, 73, 42, 24,248,249,250, 31, 56, 29,251,252,253,\n-)\n-\n-win1250HungarianCharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253, 28, 40, 54, 45, 32, 50, 49, 38, 39, 53, 36, 41, 34, 35, 47,\n- 46, 72, 43, 33, 37, 57, 48, 64, 68, 55, 52,253,253,253,253,253,\n-253,  2, 18, 26, 17,  1, 27, 12, 20,  9, 22,  7,  6, 13,  4,  8,\n- 23, 67, 10,  5,  3, 21, 19, 65, 62, 16, 11,253,253,253,253,253,\n-161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,\n-177,178,179,180, 78,181, 69,182,183,184,185,186,187,188,189,190,\n-191,192,193,194,195,196,197, 76,198,199,200,201,202,203,204,205,\n- 81,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,\n-221, 51, 83,222, 80,223,224,225,226, 44,227,228,229, 61,230,231,\n-232,233,234, 58,235, 66, 59,236,237,238, 60, 70, 63,239,240,241,\n- 84, 14, 75,242, 71, 82,243, 73,244, 15, 85, 79, 86, 30, 77, 87,\n-245,246,247, 25, 74, 42, 24,248,249,250, 31, 56, 29,251,252,253,\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 94.7368%\n-# first 1024 sequences:5.2623%\n-# rest  sequences:     0.8894%\n-# negative sequences:  0.0009%\n-HungarianLangModel = (\n-0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,\n-3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,2,3,3,1,1,2,2,2,2,2,1,2,\n-3,2,2,3,3,3,3,3,2,3,3,3,3,3,3,1,2,3,3,3,3,2,3,3,1,1,3,3,0,1,1,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,\n-3,2,1,3,3,3,3,3,2,3,3,3,3,3,1,1,2,3,3,3,3,3,3,3,1,1,3,2,0,1,1,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,1,1,2,3,3,3,1,3,3,3,3,3,1,3,3,2,2,0,3,2,3,\n-0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,3,3,3,3,2,3,3,2,2,3,2,3,2,0,3,2,2,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,1,2,3,2,2,3,1,2,3,3,2,2,0,3,3,3,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3,3,0,2,3,2,\n-0,0,0,1,1,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,1,1,1,3,3,2,1,3,2,2,3,2,1,3,2,2,1,0,3,3,1,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,2,2,3,3,3,3,3,1,2,3,3,3,3,1,2,1,3,3,3,3,2,2,3,1,1,3,2,0,1,1,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,2,2,3,3,3,3,3,2,1,3,3,3,3,3,2,2,1,3,3,3,0,1,1,2,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,3,3,2,0,3,2,3,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,\n-3,3,3,3,3,3,2,3,3,3,2,3,2,3,3,3,1,3,2,2,2,3,1,1,3,3,1,1,0,3,3,2,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,2,3,3,3,2,3,2,3,3,3,2,3,3,3,3,3,1,2,3,2,2,0,2,2,2,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,2,2,2,3,1,3,3,2,2,1,3,3,3,1,1,3,1,2,3,2,3,2,2,2,1,0,2,2,2,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,\n-3,1,1,3,3,3,3,3,1,2,3,3,3,3,1,2,1,3,3,3,2,2,3,2,1,0,3,2,0,1,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,1,3,3,3,3,3,1,2,3,3,3,3,1,1,0,3,3,3,3,0,2,3,0,0,2,1,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,2,2,3,3,2,2,2,2,3,3,0,1,2,3,2,3,2,2,3,2,1,2,0,2,2,2,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,1,2,3,3,3,2,1,2,3,3,2,2,2,3,2,3,3,1,3,3,1,1,0,2,3,2,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,1,2,2,2,2,3,3,3,1,1,1,3,3,1,1,3,1,1,3,2,1,2,3,1,1,0,2,2,2,\n-0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,2,1,2,1,1,3,3,1,1,1,1,3,3,1,1,2,2,1,2,1,1,2,2,1,1,0,2,2,1,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,1,1,2,1,1,3,3,1,0,1,1,3,3,2,0,1,1,2,3,1,0,2,2,1,0,0,1,3,2,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,2,1,3,3,3,3,3,1,2,3,2,3,3,2,1,1,3,2,3,2,1,2,2,0,1,2,1,0,0,1,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,2,2,2,2,3,1,2,2,1,1,3,3,0,3,2,1,2,3,2,1,3,3,1,1,0,2,1,3,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,3,3,2,2,2,3,2,3,3,3,2,1,1,3,3,1,1,1,2,2,3,2,3,2,2,2,1,0,2,2,1,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-1,0,0,3,3,3,3,3,0,0,3,3,2,3,0,0,0,2,3,3,1,0,1,2,0,0,1,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,2,3,3,3,3,3,1,2,3,3,2,2,1,1,0,3,3,2,2,1,2,2,1,0,2,2,0,1,1,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,2,2,1,3,1,2,3,3,2,2,1,1,2,2,1,1,1,1,3,2,1,1,1,1,2,1,0,1,2,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-2,3,3,1,1,1,1,1,3,3,3,0,1,1,3,3,1,1,1,1,1,2,2,0,3,1,1,2,0,2,1,1,\n-0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n-3,1,0,1,2,1,2,2,0,1,2,3,1,2,0,0,0,2,1,1,1,1,1,2,0,0,1,1,0,0,0,0,\n-1,2,1,2,2,2,1,2,1,2,0,2,0,2,2,1,1,2,1,1,2,1,1,1,0,1,0,0,0,1,1,0,\n-1,1,1,2,3,2,3,3,0,1,2,2,3,1,0,1,0,2,1,2,2,0,1,1,0,0,1,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,3,3,2,2,1,0,0,3,2,3,2,0,0,0,1,1,3,0,0,1,1,0,0,2,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,1,2,2,3,3,1,0,1,3,2,3,1,1,1,0,1,1,1,1,1,3,1,0,0,2,2,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,1,1,2,2,2,1,0,1,2,3,3,2,0,0,0,2,1,1,1,2,1,1,1,0,1,1,1,0,0,0,\n-1,2,2,2,2,2,1,1,1,2,0,2,1,1,1,1,1,2,1,1,1,1,1,1,0,1,1,1,0,0,1,1,\n-3,2,2,1,0,0,1,1,2,2,0,3,0,1,2,1,1,0,0,1,1,1,0,1,1,1,1,0,2,1,1,1,\n-2,2,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,1,1,2,3,1,1,1,1,1,1,1,1,1,0,1,\n-2,3,3,0,1,0,0,0,3,3,1,0,0,1,2,2,1,0,0,0,0,2,0,0,1,1,1,0,2,1,1,1,\n-2,1,1,1,1,1,1,2,1,1,0,1,1,0,1,1,1,0,1,2,1,1,0,1,1,1,1,1,1,1,0,1,\n-2,3,3,0,1,0,0,0,2,2,0,0,0,0,1,2,2,0,0,0,0,1,0,0,1,1,0,0,2,0,1,0,\n-2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,0,1,\n-3,2,2,0,1,0,1,0,2,3,2,0,0,1,2,2,1,0,0,1,1,1,0,0,2,1,0,1,2,2,1,1,\n-2,1,1,1,1,1,1,2,1,1,1,1,1,1,0,2,1,0,1,1,0,1,1,1,0,1,1,2,1,1,0,1,\n-2,2,2,0,0,1,0,0,2,2,1,1,0,0,2,1,1,0,0,0,1,2,0,0,2,1,0,0,2,1,1,1,\n-2,1,1,1,1,2,1,2,1,1,1,2,2,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,0,1,\n-1,2,3,0,0,0,1,0,3,2,1,0,0,1,2,1,1,0,0,0,0,2,1,0,1,1,0,0,2,1,2,1,\n-1,1,0,0,0,1,0,1,1,1,1,1,2,0,0,1,0,0,0,2,0,0,1,1,1,1,1,1,1,1,0,1,\n-3,0,0,2,1,2,2,1,0,0,2,1,2,2,0,0,0,2,1,1,1,0,1,1,0,0,1,1,2,0,0,0,\n-1,2,1,2,2,1,1,2,1,2,0,1,1,1,1,1,1,1,1,1,2,1,1,0,0,1,1,1,1,0,0,1,\n-1,3,2,0,0,0,1,0,2,2,2,0,0,0,2,2,1,0,0,0,0,3,1,1,1,1,0,0,2,1,1,1,\n-2,1,0,1,1,1,0,1,1,1,1,1,1,1,0,2,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,\n-2,3,2,0,0,0,1,0,2,2,0,0,0,0,2,1,1,0,0,0,0,2,1,0,1,1,0,0,2,1,1,0,\n-2,1,1,1,1,2,1,2,1,2,0,1,1,1,0,2,1,1,1,2,1,1,1,1,0,1,1,1,1,1,0,1,\n-3,1,1,2,2,2,3,2,1,1,2,2,1,1,0,1,0,2,2,1,1,1,1,1,0,0,1,1,0,1,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,0,0,0,0,0,2,2,0,0,0,0,2,2,1,0,0,0,1,1,0,0,1,2,0,0,2,1,1,1,\n-2,2,1,1,1,2,1,2,1,1,0,1,1,1,1,2,1,1,1,2,1,1,1,1,0,1,2,1,1,1,0,1,\n-1,0,0,1,2,3,2,1,0,0,2,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,\n-1,2,1,2,1,2,1,1,1,2,0,2,1,1,1,0,1,2,0,0,1,1,1,0,0,0,0,0,0,0,0,0,\n-2,3,2,0,0,0,0,0,1,1,2,1,0,0,1,1,1,0,0,0,0,2,0,0,1,1,0,0,2,1,1,1,\n-2,1,1,1,1,1,1,2,1,0,1,1,1,1,0,2,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,\n-1,2,2,0,1,1,1,0,2,2,2,0,0,0,3,2,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,\n-1,1,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,0,0,1,1,1,0,1,0,1,\n-2,1,0,2,1,1,2,2,1,1,2,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,\n-1,2,2,2,2,2,1,1,1,2,0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,\n-1,2,3,0,0,0,1,0,2,2,0,0,0,0,2,2,0,0,0,0,0,1,0,0,1,0,0,0,2,0,1,0,\n-2,1,1,1,1,1,0,2,0,0,0,1,2,1,1,1,1,0,1,2,0,1,0,1,0,1,1,1,0,1,0,1,\n-2,2,2,0,0,0,1,0,2,1,2,0,0,0,1,1,2,0,0,0,0,1,0,0,1,1,0,0,2,1,0,1,\n-2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,0,1,\n-1,2,2,0,0,0,1,0,2,2,2,0,0,0,1,1,0,0,0,0,0,1,1,0,2,0,0,1,1,1,0,1,\n-1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,\n-1,0,0,1,0,1,2,1,0,0,1,1,1,2,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,\n-0,2,1,2,1,1,1,1,1,2,0,2,0,1,1,0,1,2,1,0,1,1,1,0,0,0,0,0,0,1,0,0,\n-2,1,1,0,1,2,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,2,1,0,1,\n-2,2,1,1,1,1,1,2,1,1,0,1,1,1,1,2,1,1,1,2,1,1,0,1,0,1,1,1,1,1,0,1,\n-1,2,2,0,0,0,0,0,1,1,0,0,0,0,2,1,0,0,0,0,0,2,0,0,2,2,0,0,2,0,0,1,\n-2,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,\n-1,1,2,0,0,3,1,0,2,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,\n-1,2,1,0,1,1,1,2,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,\n-2,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,2,0,0,0,\n-2,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,2,1,1,0,0,1,1,1,1,1,0,1,\n-2,1,1,1,2,1,1,1,0,1,1,2,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,1,0,1,1,1,1,1,0,0,1,1,2,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,0,\n-1,2,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,\n-2,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,2,0,0,1,0,0,1,0,1,0,0,0,\n-0,1,1,1,1,1,1,1,1,2,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,1,1,1,1,0,0,2,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,\n-0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,1,1,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-0,1,1,1,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,1,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,\n-2,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,0,0,1,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,\n-)\n-\n-Latin2HungarianModel = {\n-  'char_to_order_map': Latin2_HungarianCharToOrderMap,\n-  'precedence_matrix': HungarianLangModel,\n-  'typical_positive_ratio': 0.947368,\n-  'keep_english_letter': True,\n-  'charset_name': \"ISO-8859-2\",\n-  'language': 'Hungarian',\n-}\n-\n-Win1250HungarianModel = {\n-  'char_to_order_map': win1250HungarianCharToOrderMap,\n-  'precedence_matrix': HungarianLangModel,\n-  'typical_positive_ratio': 0.947368,\n-  'keep_english_letter': True,\n-  'charset_name': \"windows-1250\",\n-  'language': 'Hungarian',\n-}\n\n@@ -1,199 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# The following result for thai was collected from a limited sample (1M).\n-\n-# Character Mapping Table:\n-TIS620CharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n-253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n-252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n-253,182,106,107,100,183,184,185,101, 94,186,187,108,109,110,111,  # 40\n-188,189,190, 89, 95,112,113,191,192,193,194,253,253,253,253,253,  # 50\n-253, 64, 72, 73,114, 74,115,116,102, 81,201,117, 90,103, 78, 82,  # 60\n- 96,202, 91, 79, 84,104,105, 97, 98, 92,203,253,253,253,253,253,  # 70\n-209,210,211,212,213, 88,214,215,216,217,218,219,220,118,221,222,\n-223,224, 99, 85, 83,225,226,227,228,229,230,231,232,233,234,235,\n-236,  5, 30,237, 24,238, 75,  8, 26, 52, 34, 51,119, 47, 58, 57,\n- 49, 53, 55, 43, 20, 19, 44, 14, 48,  3, 17, 25, 39, 62, 31, 54,\n- 45,  9, 16,  2, 61, 15,239, 12, 42, 46, 18, 21, 76,  4, 66, 63,\n- 22, 10,  1, 36, 23, 13, 40, 27, 32, 35, 86,240,241,242,243,244,\n- 11, 28, 41, 29, 33,245, 50, 37,  6,  7, 67, 77, 38, 93,246,247,\n- 68, 56, 59, 65, 69, 60, 70, 80, 71, 87,248,249,250,251,252,253,\n-)\n-\n-# Model Table:\n-# total sequences: 100%\n-# first 512 sequences: 92.6386%\n-# first 1024 sequences:7.3177%\n-# rest  sequences:     1.0230%\n-# negative sequences:  0.0436%\n-ThaiLangModel = (\n-0,1,3,3,3,3,0,0,3,3,0,3,3,0,3,3,3,3,3,3,3,3,0,0,3,3,3,0,3,3,3,3,\n-0,3,3,0,0,0,1,3,0,3,3,2,3,3,0,1,2,3,3,3,3,0,2,0,2,0,0,3,2,1,2,2,\n-3,0,3,3,2,3,0,0,3,3,0,3,3,0,3,3,3,3,3,3,3,3,3,0,3,2,3,0,2,2,2,3,\n-0,2,3,0,0,0,0,1,0,1,2,3,1,1,3,2,2,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,\n-3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,2,3,2,3,3,2,2,2,\n-3,1,2,3,0,3,3,2,2,1,2,3,3,1,2,0,1,3,0,1,0,0,1,0,0,0,0,0,0,0,1,1,\n-3,3,2,2,3,3,3,3,1,2,3,3,3,3,3,2,2,2,2,3,3,2,2,3,3,2,2,3,2,3,2,2,\n-3,3,1,2,3,1,2,2,3,3,1,0,2,1,0,0,3,1,2,1,0,0,1,0,0,0,0,0,0,1,0,1,\n-3,3,3,3,3,3,2,2,3,3,3,3,2,3,2,2,3,3,2,2,3,2,2,2,2,1,1,3,1,2,1,1,\n-3,2,1,0,2,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-3,3,3,2,3,2,3,3,2,2,3,2,3,3,2,3,1,1,2,3,2,2,2,3,2,2,2,2,2,1,2,1,\n-2,2,1,1,3,3,2,1,0,1,2,2,0,1,3,0,0,0,1,1,0,0,0,0,0,2,3,0,0,2,1,1,\n-3,3,2,3,3,2,0,0,3,3,0,3,3,0,2,2,3,1,2,2,1,1,1,0,2,2,2,0,2,2,1,1,\n-0,2,1,0,2,0,0,2,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,2,3,3,2,0,0,3,3,0,2,3,0,2,1,2,2,2,2,1,2,0,0,2,2,2,0,2,2,1,1,\n-0,2,1,0,2,0,0,2,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,\n-3,3,2,3,2,3,2,0,2,2,1,3,2,1,3,2,1,2,3,2,2,3,0,2,3,2,2,1,2,2,2,2,\n-1,2,2,0,0,0,0,2,0,1,2,0,1,1,1,0,1,0,3,1,1,0,0,0,0,0,0,0,0,0,1,0,\n-3,3,2,3,3,2,3,2,2,2,3,2,2,3,2,2,1,2,3,2,2,3,1,3,2,2,2,3,2,2,2,3,\n-3,2,1,3,0,1,1,1,0,2,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,2,0,0,\n-1,0,0,3,0,3,3,3,3,3,0,0,3,0,2,2,3,3,3,3,3,0,0,0,1,1,3,0,0,0,0,2,\n-0,0,1,0,0,0,0,0,0,0,2,3,0,0,0,3,0,2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,\n-2,0,3,3,3,3,0,0,2,3,0,0,3,0,3,3,2,3,3,3,3,3,0,0,3,3,3,0,0,0,3,3,\n-0,0,3,0,0,0,0,2,0,0,2,1,1,3,0,0,1,0,0,2,3,0,1,0,0,0,0,0,0,0,1,0,\n-3,3,3,3,2,3,3,3,3,3,3,3,1,2,1,3,3,2,2,1,2,2,2,3,1,1,2,0,2,1,2,1,\n-2,2,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,\n-3,0,2,1,2,3,3,3,0,2,0,2,2,0,2,1,3,2,2,1,2,1,0,0,2,2,1,0,2,1,2,2,\n-0,1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,2,1,3,3,1,1,3,0,2,3,1,1,3,2,1,1,2,0,2,2,3,2,1,1,1,1,1,2,\n-3,0,0,1,3,1,2,1,2,0,3,0,0,0,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,\n-3,3,1,1,3,2,3,3,3,1,3,2,1,3,2,1,3,2,2,2,2,1,3,3,1,2,1,3,1,2,3,0,\n-2,1,1,3,2,2,2,1,2,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,\n-3,3,2,3,2,3,3,2,3,2,3,2,3,3,2,1,0,3,2,2,2,1,2,2,2,1,2,2,1,2,1,1,\n-2,2,2,3,0,1,3,1,1,1,1,0,1,1,0,2,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,2,3,2,2,1,1,3,2,3,2,3,2,0,3,2,2,1,2,0,2,2,2,1,2,2,2,2,1,\n-3,2,1,2,2,1,0,2,0,1,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,\n-3,3,3,3,3,2,3,1,2,3,3,2,2,3,0,1,1,2,0,3,3,2,2,3,0,1,1,3,0,0,0,0,\n-3,1,0,3,3,0,2,0,2,1,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,2,3,2,3,3,0,1,3,1,1,2,1,2,1,1,3,1,1,0,2,3,1,1,1,1,1,1,1,1,\n-3,1,1,2,2,2,2,1,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,2,2,1,1,2,1,3,3,2,3,2,2,3,2,2,3,1,2,2,1,2,0,3,2,1,2,2,2,2,2,1,\n-3,2,1,2,2,2,1,1,1,1,0,0,1,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,1,3,3,0,2,1,0,3,2,0,0,3,1,0,1,1,0,1,0,0,0,0,0,1,\n-1,0,0,1,0,3,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,2,2,2,3,0,0,1,3,0,3,2,0,3,2,2,3,3,3,3,3,1,0,2,2,2,0,2,2,1,2,\n-0,2,3,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-3,0,2,3,1,3,3,2,3,3,0,3,3,0,3,2,2,3,2,3,3,3,0,0,2,2,3,0,1,1,1,3,\n-0,0,3,0,0,0,2,2,0,1,3,0,1,2,2,2,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,\n-3,2,3,3,2,0,3,3,2,2,3,1,3,2,1,3,2,0,1,2,2,0,2,3,2,1,0,3,0,0,0,0,\n-3,0,0,2,3,1,3,0,0,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,1,3,2,2,2,1,2,0,1,3,1,1,3,1,3,0,0,2,1,1,1,1,2,1,1,1,0,2,1,0,1,\n-1,2,0,0,0,3,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,3,1,0,0,0,1,0,\n-3,3,3,3,2,2,2,2,2,1,3,1,1,1,2,0,1,1,2,1,2,1,3,2,0,0,3,1,1,1,1,1,\n-3,1,0,2,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,2,3,0,3,3,0,2,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,2,3,1,3,0,0,1,2,0,0,2,0,3,3,2,3,3,3,2,3,0,0,2,2,2,0,0,0,2,2,\n-0,0,1,0,0,0,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-0,0,0,3,0,2,0,0,0,0,0,0,0,0,0,0,1,2,3,1,3,3,0,0,1,0,3,0,0,0,0,0,\n-0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,1,2,3,1,2,3,1,0,3,0,2,2,1,0,2,1,1,2,0,1,0,0,1,1,1,1,0,1,0,0,\n-1,0,0,0,0,1,1,0,3,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,2,1,0,1,1,1,3,1,2,2,2,2,2,2,1,1,1,1,0,3,1,0,1,3,1,1,1,1,\n-1,1,0,2,0,1,3,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,\n-3,0,2,2,1,3,3,2,3,3,0,1,1,0,2,2,1,2,1,3,3,1,0,0,3,2,0,0,0,0,2,1,\n-0,1,0,0,0,0,1,2,0,1,1,3,1,1,2,2,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n-0,0,3,0,0,1,0,0,0,3,0,0,3,0,3,1,0,1,1,1,3,2,0,0,0,3,0,0,0,0,2,0,\n-0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,1,3,2,1,3,3,1,2,2,0,1,2,1,0,1,2,0,0,0,0,0,3,0,0,0,3,0,0,0,0,\n-3,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,1,2,0,3,3,3,2,2,0,1,1,0,1,3,0,0,0,2,2,0,0,0,0,3,1,0,1,0,0,0,\n-0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,2,3,1,2,0,0,2,1,0,3,1,0,1,2,0,1,1,1,1,3,0,0,3,1,1,0,2,2,1,1,\n-0,2,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,0,3,1,2,0,0,2,2,0,1,2,0,1,0,1,3,1,2,1,0,0,0,2,0,3,0,0,0,1,0,\n-0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,1,1,2,2,0,0,0,2,0,2,1,0,1,1,0,1,1,1,2,1,0,0,1,1,1,0,2,1,1,1,\n-0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,\n-0,0,0,2,0,1,3,1,1,1,1,0,0,0,0,3,2,0,1,0,0,0,1,2,0,0,0,1,0,0,0,0,\n-0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,0,2,3,2,2,0,0,0,1,0,0,0,0,2,3,2,1,2,2,3,0,0,0,2,3,1,0,0,0,1,1,\n-0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,\n-3,3,2,2,0,1,0,0,0,0,2,0,2,0,1,0,0,0,1,1,0,0,0,2,1,0,1,0,1,1,0,0,\n-0,1,0,2,0,0,1,0,3,0,1,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,1,0,0,1,0,0,0,0,0,1,1,2,0,0,0,0,1,0,0,1,3,1,0,0,0,0,1,1,0,0,\n-0,1,0,0,0,0,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,\n-3,3,1,1,1,1,2,3,0,0,2,1,1,1,1,1,0,2,1,1,0,0,0,2,1,0,1,2,1,1,0,1,\n-2,1,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,3,1,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,\n-0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,2,0,0,0,0,0,0,1,2,1,0,1,1,0,2,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,2,0,0,0,1,3,0,1,0,0,0,2,0,0,0,0,0,0,0,1,2,0,0,0,0,0,\n-3,3,0,0,1,1,2,0,0,1,2,1,0,1,1,1,0,1,1,0,0,2,1,1,0,1,0,0,1,1,1,0,\n-0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,1,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,3,0,0,1,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-1,1,0,1,2,0,1,2,0,0,1,1,0,2,0,1,0,0,1,0,0,0,0,1,0,0,0,2,0,0,0,0,\n-1,0,0,1,0,1,1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,2,1,3,0,0,0,0,1,1,0,0,0,0,0,0,0,3,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,1,0,1,0,0,2,0,0,2,0,0,1,1,2,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,\n-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,\n-1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,3,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,\n-1,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,1,1,0,0,2,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-)\n-\n-TIS620ThaiModel = {\n-  'char_to_order_map': TIS620CharToOrderMap,\n-  'precedence_matrix': ThaiLangModel,\n-  'typical_positive_ratio': 0.926386,\n-  'keep_english_letter': False,\n-  'charset_name': \"TIS-620\",\n-  'language': 'Thai',\n-}\n\n@@ -1,193 +0,0 @@\n-# -*- coding: utf-8 -*-\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Communicator client code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Özgür Baskın - Turkish Language Model\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-# 255: Control characters that usually does not exist in any text\n-# 254: Carriage/Return\n-# 253: symbol (punctuation) that does not belong to word\n-# 252: 0 - 9\n-\n-# Character Mapping Table:\n-Latin5_TurkishCharToOrderMap = (\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n-255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n-255, 23, 37, 47, 39, 29, 52, 36, 45, 53, 60, 16, 49, 20, 46, 42,\n- 48, 69, 44, 35, 31, 51, 38, 62, 65, 43, 56,255,255,255,255,255,\n-255,  1, 21, 28, 12,  2, 18, 27, 25,  3, 24, 10,  5, 13,  4, 15,\n- 26, 64,  7,  8,  9, 14, 32, 57, 58, 11, 22,255,255,255,255,255,\n-180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,\n-164,163,162,161,160,159,101,158,157,156,155,154,153,152,151,106,\n-150,149,148,147,146,145,144,100,143,142,141,140,139,138,137,136,\n- 94, 80, 93,135,105,134,133, 63,132,131,130,129,128,127,126,125,\n-124,104, 73, 99, 79, 85,123, 54,122, 98, 92,121,120, 91,103,119,\n- 68,118,117, 97,116,115, 50, 90,114,113,112,111, 55, 41, 40, 86,\n- 89, 70, 59, 78, 71, 82, 88, 33, 77, 66, 84, 83,110, 75, 61, 96,\n- 30, 67,109, 74, 87,102, 34, 95, 81,108, 76, 72, 17,  6, 19,107,\n-)\n-\n-TurkishLangModel = (\n-3,2,3,3,3,1,3,3,3,3,3,3,3,3,2,1,1,3,3,1,3,3,0,3,3,3,3,3,0,3,1,3,\n-3,2,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,0,0,1,0,0,1,\n-3,2,2,3,3,0,3,3,3,3,3,3,3,2,3,1,0,3,3,1,3,3,0,3,3,3,3,3,0,3,0,3,\n-3,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,0,0,0,1,0,1,\n-3,3,2,3,3,0,3,3,3,3,3,3,3,2,3,1,1,3,3,0,3,3,1,2,3,3,3,3,0,3,0,3,\n-3,1,1,0,0,0,1,0,0,0,0,1,1,0,1,2,1,0,0,0,1,0,0,0,0,2,0,0,0,0,0,1,\n-3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,3,2,0,3,2,1,2,2,1,3,3,0,0,0,2,\n-2,2,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,\n-3,3,3,2,3,3,1,2,3,3,3,3,3,3,3,1,3,2,1,0,3,2,0,1,2,3,3,2,1,0,0,2,\n-2,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,\n-1,0,1,3,3,1,3,3,3,3,3,3,3,1,2,0,0,2,3,0,2,3,0,0,2,2,2,3,0,3,0,1,\n-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,0,3,2,0,2,3,2,3,3,1,0,0,2,\n-3,2,0,0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,2,0,0,1,\n-3,3,3,2,3,3,2,3,3,3,3,2,3,3,3,0,3,3,0,0,2,1,0,0,2,3,2,2,0,0,0,2,\n-2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,2,0,0,1,\n-3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,0,3,2,0,1,3,2,1,1,3,2,3,2,1,0,0,2,\n-2,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,\n-3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,0,3,2,2,0,2,3,0,0,2,2,2,2,0,0,0,2,\n-3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,0,0,\n-3,3,3,3,3,3,3,2,2,2,2,3,2,3,3,0,3,3,1,1,2,2,0,0,2,2,3,2,0,0,1,3,\n-0,3,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,\n-3,3,3,2,3,3,3,2,1,2,2,3,2,3,3,0,3,2,0,0,1,1,0,1,1,2,1,2,0,0,0,1,\n-0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,\n-3,3,3,2,3,3,2,3,2,2,2,3,3,3,3,1,3,1,1,0,3,2,1,1,3,3,2,3,1,0,0,1,\n-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,1,\n-3,2,2,3,3,0,3,3,3,3,3,3,3,2,2,1,0,3,3,1,3,3,0,1,3,3,2,3,0,3,0,3,\n-2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-2,2,2,3,3,0,3,3,3,3,3,3,3,3,3,0,0,3,2,0,3,3,0,3,2,3,3,3,0,3,1,3,\n-2,0,0,0,0,0,0,0,0,0,0,1,0,1,2,0,1,0,0,0,0,0,0,0,2,2,0,0,1,0,0,1,\n-3,3,3,1,2,3,3,1,0,0,1,0,0,3,3,2,3,0,0,2,0,0,2,0,2,0,0,0,2,0,2,0,\n-0,3,1,0,1,0,0,0,2,2,1,0,1,1,2,1,2,2,2,0,2,1,1,0,0,0,2,0,0,0,0,0,\n-1,2,1,3,3,0,3,3,3,3,3,2,3,0,0,0,0,2,3,0,2,3,1,0,2,3,1,3,0,3,0,2,\n-3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,1,3,3,2,2,3,2,2,0,1,2,3,0,1,2,1,0,1,0,0,0,1,0,2,2,0,0,0,1,\n-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,\n-3,3,3,1,3,3,1,1,3,3,1,1,3,3,1,0,2,1,2,0,2,1,0,0,1,1,2,1,0,0,0,2,\n-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,1,0,2,1,3,0,0,2,0,0,3,3,0,3,0,0,1,0,1,2,0,0,1,1,2,2,0,1,0,\n-0,1,2,1,1,0,1,0,1,1,1,1,1,0,1,1,1,2,2,1,2,0,1,0,0,0,0,0,0,1,0,0,\n-3,3,3,2,3,2,3,3,0,2,2,2,3,3,3,0,3,0,0,0,2,2,0,1,2,1,1,1,0,0,0,1,\n-0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,\n-3,3,3,3,3,3,2,1,2,2,3,3,3,3,2,0,2,0,0,0,2,2,0,0,2,1,3,3,0,0,1,1,\n-1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,\n-1,1,2,3,3,0,3,3,3,3,3,3,2,2,0,2,0,2,3,2,3,2,2,2,2,2,2,2,1,3,2,3,\n-2,0,2,1,2,2,2,2,1,1,2,2,1,2,2,1,2,0,0,2,1,1,0,2,1,0,0,1,0,0,0,1,\n-2,3,3,1,1,1,0,1,1,1,2,3,2,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,\n-0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,2,2,2,3,2,3,2,2,1,3,3,3,0,2,1,2,0,2,1,0,0,1,1,1,1,1,0,0,1,\n-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,2,0,1,0,0,0,\n-3,3,3,2,3,3,3,3,3,2,3,1,2,3,3,1,2,0,0,0,0,0,0,0,3,2,1,1,0,0,0,0,\n-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-3,3,3,2,2,3,3,2,1,1,1,1,1,3,3,0,3,1,0,0,1,1,0,0,3,1,2,1,0,0,0,0,\n-0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,\n-3,3,3,2,2,3,2,2,2,3,2,1,1,3,3,0,3,0,0,0,0,1,0,0,3,1,1,2,0,0,0,1,\n-1,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n-1,1,1,3,3,0,3,3,3,3,3,2,2,2,1,2,0,2,1,2,2,1,1,0,1,2,2,2,2,2,2,2,\n-0,0,2,1,2,1,2,1,0,1,1,3,1,2,1,1,2,0,0,2,0,1,0,1,0,1,0,0,0,1,0,1,\n-3,3,3,1,3,3,3,0,1,1,0,2,2,3,1,0,3,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,2,0,0,2,2,1,0,0,1,0,0,3,3,1,3,0,0,1,1,0,2,0,3,0,0,0,2,0,1,1,\n-0,1,2,0,1,2,2,0,2,2,2,2,1,0,2,1,1,0,2,0,2,1,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,1,3,2,3,2,0,2,2,2,1,3,2,0,2,1,2,0,1,2,0,0,1,0,2,2,0,0,0,2,\n-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,\n-3,3,3,0,3,3,1,1,2,3,1,0,3,2,3,0,3,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,\n-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,3,3,0,3,3,2,3,3,2,2,0,0,0,0,1,2,0,1,3,0,0,0,3,1,1,0,3,0,2,\n-2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,1,2,2,1,0,3,1,1,1,1,3,3,2,3,0,0,1,0,1,2,0,2,2,0,2,2,0,2,1,\n-0,2,2,1,1,1,1,0,2,1,1,0,1,1,1,1,2,1,2,1,2,0,1,0,1,0,0,0,0,0,0,0,\n-3,3,3,0,1,1,3,0,0,1,1,0,0,2,2,0,3,0,0,1,1,0,1,0,0,0,0,0,2,0,0,0,\n-0,3,1,0,1,0,1,0,2,0,0,1,0,1,0,1,1,1,2,1,1,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,3,0,2,0,2,0,1,1,1,0,0,3,3,0,2,0,0,1,0,0,2,1,1,0,1,0,1,0,1,0,\n-0,2,0,1,2,0,2,0,2,1,1,0,1,0,2,1,1,0,2,1,1,0,1,0,0,0,1,1,0,0,0,0,\n-3,2,3,0,1,0,0,0,0,0,0,0,0,1,2,0,1,0,0,1,0,0,1,0,0,0,0,0,2,0,0,0,\n-0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,2,1,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,0,0,2,3,0,0,1,0,1,0,2,3,2,3,0,0,1,3,0,2,1,0,0,0,0,2,0,1,0,\n-0,2,1,0,0,1,1,0,2,1,0,0,1,0,0,1,1,0,1,1,2,0,1,0,0,0,0,1,0,0,0,0,\n-3,2,2,0,0,1,1,0,0,0,0,0,0,3,1,1,1,0,0,0,0,0,1,0,0,0,0,0,2,0,1,0,\n-0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,3,3,0,2,3,2,2,1,2,2,1,1,2,0,1,3,2,2,2,0,0,2,2,0,0,0,1,2,1,\n-3,0,2,1,1,0,1,1,1,0,1,2,2,2,1,1,2,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,\n-0,1,1,2,3,0,3,3,3,2,2,2,2,1,0,1,0,1,0,1,2,2,0,0,2,2,1,3,1,1,2,1,\n-0,0,1,1,2,0,1,1,0,0,1,2,0,2,1,1,2,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,\n-3,3,2,0,0,3,1,0,0,0,0,0,0,3,2,1,2,0,0,1,0,0,2,0,0,0,0,0,2,0,1,0,\n-0,2,1,1,0,0,1,0,1,2,0,0,1,1,0,0,2,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,\n-3,3,2,0,0,1,0,0,0,0,1,0,0,3,3,2,2,0,0,1,0,0,2,0,1,0,0,0,2,0,1,0,\n-0,0,1,1,0,0,2,0,2,1,0,0,1,1,2,1,2,0,2,1,2,1,1,1,0,0,1,1,0,0,0,0,\n-3,3,2,0,0,2,2,0,0,0,1,1,0,2,2,1,3,1,0,1,0,1,2,0,0,0,0,0,1,0,1,0,\n-0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,2,0,0,0,1,0,0,1,0,0,2,3,1,2,0,0,1,0,0,2,0,0,0,1,0,2,0,2,0,\n-0,1,1,2,2,1,2,0,2,1,1,0,0,1,1,0,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,\n-3,3,3,0,2,1,2,1,0,0,1,1,0,3,3,1,2,0,0,1,0,0,2,0,2,0,1,1,2,0,0,0,\n-0,0,1,1,1,1,2,0,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,\n-3,3,3,0,2,2,3,2,0,0,1,0,0,2,3,1,0,0,0,0,0,0,2,0,2,0,0,0,2,0,0,0,\n-0,1,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,\n-3,2,3,0,0,0,0,0,0,0,1,0,0,2,2,2,2,0,0,1,0,0,2,0,0,0,0,0,2,0,1,0,\n-0,0,2,1,1,0,1,0,2,1,1,0,0,1,1,2,1,0,2,0,2,0,1,0,0,0,2,0,0,0,0,0,\n-0,0,0,2,2,0,2,1,1,1,1,2,2,0,0,1,0,1,0,0,1,3,0,0,0,0,1,0,0,2,1,0,\n-0,0,1,0,1,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,\n-2,0,0,2,3,0,2,3,1,2,2,0,2,0,0,2,0,2,1,1,1,2,1,0,0,1,2,1,1,2,1,0,\n-1,0,2,0,1,0,1,1,0,0,2,2,1,2,1,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,\n-3,3,3,0,2,1,2,0,0,0,1,0,0,3,2,0,1,0,0,1,0,0,2,0,0,0,1,2,1,0,1,0,\n-0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,2,2,0,2,2,1,1,0,1,1,1,1,1,0,0,1,2,1,1,1,0,1,0,0,0,1,1,1,1,\n-0,0,2,1,0,1,1,1,0,1,1,2,1,2,1,1,2,0,1,1,2,1,0,2,0,0,0,0,0,0,0,0,\n-3,2,2,0,0,2,0,0,0,0,0,0,0,2,2,0,2,0,0,1,0,0,2,0,0,0,0,0,2,0,0,0,\n-0,2,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,3,2,0,2,2,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,\n-2,0,1,0,1,0,1,1,0,0,1,2,0,1,0,1,1,0,0,1,0,1,0,2,0,0,0,0,0,0,0,0,\n-2,2,2,0,1,1,0,0,0,1,0,0,0,1,2,0,1,0,0,1,0,0,1,0,0,0,0,1,2,0,1,0,\n-0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,2,1,0,1,1,1,0,0,0,0,1,2,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,\n-1,1,2,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,1,\n-0,0,1,2,2,0,2,1,2,1,1,2,2,0,0,0,0,1,0,0,1,1,0,0,2,0,0,0,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,\n-2,2,2,0,0,0,1,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-2,2,2,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n-)\n-\n-Latin5TurkishModel = {\n-  'char_to_order_map': Latin5_TurkishCharToOrderMap,\n-  'precedence_matrix': TurkishLangModel,\n-  'typical_positive_ratio': 0.970290,\n-  'keep_english_letter': True,\n-  'charset_name': \"ISO-8859-9\",\n-  'language': 'Turkish',\n-}\n\n@@ -1,145 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .enums import ProbingState\n-\n-FREQ_CAT_NUM = 4\n-\n-UDF = 0  # undefined\n-OTH = 1  # other\n-ASC = 2  # ascii capital letter\n-ASS = 3  # ascii small letter\n-ACV = 4  # accent capital vowel\n-ACO = 5  # accent capital other\n-ASV = 6  # accent small vowel\n-ASO = 7  # accent small other\n-CLASS_NUM = 8  # total classes\n-\n-Latin1_CharToClass = (\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 30 - 37\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 38 - 3F\n-    OTH, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 40 - 47\n-    ASC, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 48 - 4F\n-    ASC, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 50 - 57\n-    ASC, ASC, ASC, OTH, OTH, OTH, OTH, OTH,   # 58 - 5F\n-    OTH, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 60 - 67\n-    ASS, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 68 - 6F\n-    ASS, ASS, ASS, ASS, ASS, ASS, ASS, ASS,   # 70 - 77\n-    ASS, ASS, ASS, OTH, OTH, OTH, OTH, OTH,   # 78 - 7F\n-    OTH, UDF, OTH, ASO, OTH, OTH, OTH, OTH,   # 80 - 87\n-    OTH, OTH, ACO, OTH, ACO, UDF, ACO, UDF,   # 88 - 8F\n-    UDF, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 90 - 97\n-    OTH, OTH, ASO, OTH, ASO, UDF, ASO, ACO,   # 98 - 9F\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # A0 - A7\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # A8 - AF\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # B0 - B7\n-    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # B8 - BF\n-    ACV, ACV, ACV, ACV, ACV, ACV, ACO, ACO,   # C0 - C7\n-    ACV, ACV, ACV, ACV, ACV, ACV, ACV, ACV,   # C8 - CF\n-    ACO, ACO, ACV, ACV, ACV, ACV, ACV, OTH,   # D0 - D7\n-    ACV, ACV, ACV, ACV, ACV, ACO, ACO, ACO,   # D8 - DF\n-    ASV, ASV, ASV, ASV, ASV, ASV, ASO, ASO,   # E0 - E7\n-    ASV, ASV, ASV, ASV, ASV, ASV, ASV, ASV,   # E8 - EF\n-    ASO, ASO, ASV, ASV, ASV, ASV, ASV, OTH,   # F0 - F7\n-    ASV, ASV, ASV, ASV, ASV, ASO, ASO, ASO,   # F8 - FF\n-)\n-\n-# 0 : illegal\n-# 1 : very unlikely\n-# 2 : normal\n-# 3 : very likely\n-Latin1ClassModel = (\n-# UDF OTH ASC ASS ACV ACO ASV ASO\n-    0,  0,  0,  0,  0,  0,  0,  0,  # UDF\n-    0,  3,  3,  3,  3,  3,  3,  3,  # OTH\n-    0,  3,  3,  3,  3,  3,  3,  3,  # ASC\n-    0,  3,  3,  3,  1,  1,  3,  3,  # ASS\n-    0,  3,  3,  3,  1,  2,  1,  2,  # ACV\n-    0,  3,  3,  3,  3,  3,  3,  3,  # ACO\n-    0,  3,  1,  3,  1,  1,  1,  3,  # ASV\n-    0,  3,  1,  3,  1,  1,  3,  3,  # ASO\n-)\n-\n-\n-class Latin1Prober(CharSetProber):\n-    def __init__(self):\n-        super(Latin1Prober, self).__init__()\n-        self._last_char_class = None\n-        self._freq_counter = None\n-        self.reset()\n-\n-    def reset(self):\n-        self._last_char_class = OTH\n-        self._freq_counter = [0] * FREQ_CAT_NUM\n-        CharSetProber.reset(self)\n-\n-    @property\n-    def charset_name(self):\n-        return \"ISO-8859-1\"\n-\n-    @property\n-    def language(self):\n-        return \"\"\n-\n-    def feed(self, byte_str):\n-        byte_str = self.filter_with_english_letters(byte_str)\n-        for c in byte_str:\n-            char_class = Latin1_CharToClass[c]\n-            freq = Latin1ClassModel[(self._last_char_class * CLASS_NUM)\n-                                    + char_class]\n-            if freq == 0:\n-                self._state = ProbingState.NOT_ME\n-                break\n-            self._freq_counter[freq] += 1\n-            self._last_char_class = char_class\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        if self.state == ProbingState.NOT_ME:\n-            return 0.01\n-\n-        total = sum(self._freq_counter)\n-        if total < 0.01:\n-            confidence = 0.0\n-        else:\n-            confidence = ((self._freq_counter[3] - self._freq_counter[1] * 20.0)\n-                          / total)\n-        if confidence < 0.0:\n-            confidence = 0.0\n-        # lower the confidence of latin1 so that other more accurate\n-        # detector can take priority.\n-        confidence = confidence * 0.73\n-        return confidence\n\n@@ -1,91 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#   Proofpoint, Inc.\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .enums import ProbingState, MachineState\n-\n-\n-class MultiByteCharSetProber(CharSetProber):\n-    \"\"\"\n-    MultiByteCharSetProber\n-    \"\"\"\n-\n-    def __init__(self, lang_filter=None):\n-        super(MultiByteCharSetProber, self).__init__(lang_filter=lang_filter)\n-        self.distribution_analyzer = None\n-        self.coding_sm = None\n-        self._last_char = [0, 0]\n-\n-    def reset(self):\n-        super(MultiByteCharSetProber, self).reset()\n-        if self.coding_sm:\n-            self.coding_sm.reset()\n-        if self.distribution_analyzer:\n-            self.distribution_analyzer.reset()\n-        self._last_char = [0, 0]\n-\n-    @property\n-    def charset_name(self):\n-        raise NotImplementedError\n-\n-    @property\n-    def language(self):\n-        raise NotImplementedError\n-\n-    def feed(self, byte_str):\n-        for i in range(len(byte_str)):\n-            coding_state = self.coding_sm.next_state(byte_str[i])\n-            if coding_state == MachineState.ERROR:\n-                self.logger.debug('%s %s prober hit error at byte %s',\n-                                  self.charset_name, self.language, i)\n-                self._state = ProbingState.NOT_ME\n-                break\n-            elif coding_state == MachineState.ITS_ME:\n-                self._state = ProbingState.FOUND_IT\n-                break\n-            elif coding_state == MachineState.START:\n-                char_len = self.coding_sm.get_current_charlen()\n-                if i == 0:\n-                    self._last_char[1] = byte_str[0]\n-                    self.distribution_analyzer.feed(self._last_char, char_len)\n-                else:\n-                    self.distribution_analyzer.feed(byte_str[i - 1:i + 1],\n-                                                    char_len)\n-\n-        self._last_char[0] = byte_str[-1]\n-\n-        if self.state == ProbingState.DETECTING:\n-            if (self.distribution_analyzer.got_enough_data() and\n-                    (self.get_confidence() > self.SHORTCUT_THRESHOLD)):\n-                self._state = ProbingState.FOUND_IT\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        return self.distribution_analyzer.get_confidence()\n\n@@ -1,54 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#   Proofpoint, Inc.\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetgroupprober import CharSetGroupProber\n-from .utf8prober import UTF8Prober\n-from .sjisprober import SJISProber\n-from .eucjpprober import EUCJPProber\n-from .gb2312prober import GB2312Prober\n-from .euckrprober import EUCKRProber\n-from .cp949prober import CP949Prober\n-from .big5prober import Big5Prober\n-from .euctwprober import EUCTWProber\n-\n-\n-class MBCSGroupProber(CharSetGroupProber):\n-    def __init__(self, lang_filter=None):\n-        super(MBCSGroupProber, self).__init__(lang_filter=lang_filter)\n-        self.probers = [\n-            UTF8Prober(),\n-            SJISProber(),\n-            EUCJPProber(),\n-            GB2312Prober(),\n-            EUCKRProber(),\n-            CP949Prober(),\n-            Big5Prober(),\n-            EUCTWProber()\n-        ]\n-        self.reset()\n\n@@ -1,572 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .enums import MachineState\n-\n-# BIG5\n-\n-BIG5_CLS = (\n-    1,1,1,1,1,1,1,1,  # 00 - 07    #allow 0x00 as legal value\n-    1,1,1,1,1,1,0,0,  # 08 - 0f\n-    1,1,1,1,1,1,1,1,  # 10 - 17\n-    1,1,1,0,1,1,1,1,  # 18 - 1f\n-    1,1,1,1,1,1,1,1,  # 20 - 27\n-    1,1,1,1,1,1,1,1,  # 28 - 2f\n-    1,1,1,1,1,1,1,1,  # 30 - 37\n-    1,1,1,1,1,1,1,1,  # 38 - 3f\n-    2,2,2,2,2,2,2,2,  # 40 - 47\n-    2,2,2,2,2,2,2,2,  # 48 - 4f\n-    2,2,2,2,2,2,2,2,  # 50 - 57\n-    2,2,2,2,2,2,2,2,  # 58 - 5f\n-    2,2,2,2,2,2,2,2,  # 60 - 67\n-    2,2,2,2,2,2,2,2,  # 68 - 6f\n-    2,2,2,2,2,2,2,2,  # 70 - 77\n-    2,2,2,2,2,2,2,1,  # 78 - 7f\n-    4,4,4,4,4,4,4,4,  # 80 - 87\n-    4,4,4,4,4,4,4,4,  # 88 - 8f\n-    4,4,4,4,4,4,4,4,  # 90 - 97\n-    4,4,4,4,4,4,4,4,  # 98 - 9f\n-    4,3,3,3,3,3,3,3,  # a0 - a7\n-    3,3,3,3,3,3,3,3,  # a8 - af\n-    3,3,3,3,3,3,3,3,  # b0 - b7\n-    3,3,3,3,3,3,3,3,  # b8 - bf\n-    3,3,3,3,3,3,3,3,  # c0 - c7\n-    3,3,3,3,3,3,3,3,  # c8 - cf\n-    3,3,3,3,3,3,3,3,  # d0 - d7\n-    3,3,3,3,3,3,3,3,  # d8 - df\n-    3,3,3,3,3,3,3,3,  # e0 - e7\n-    3,3,3,3,3,3,3,3,  # e8 - ef\n-    3,3,3,3,3,3,3,3,  # f0 - f7\n-    3,3,3,3,3,3,3,0  # f8 - ff\n-)\n-\n-BIG5_ST = (\n-    MachineState.ERROR,MachineState.START,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,#08-0f\n-    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START#10-17\n-)\n-\n-BIG5_CHAR_LEN_TABLE = (0, 1, 1, 2, 0)\n-\n-BIG5_SM_MODEL = {'class_table': BIG5_CLS,\n-                 'class_factor': 5,\n-                 'state_table': BIG5_ST,\n-                 'char_len_table': BIG5_CHAR_LEN_TABLE,\n-                 'name': 'Big5'}\n-\n-# CP949\n-\n-CP949_CLS  = (\n-    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,0,0,  # 00 - 0f\n-    1,1,1,1,1,1,1,1, 1,1,1,0,1,1,1,1,  # 10 - 1f\n-    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  # 20 - 2f\n-    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  # 30 - 3f\n-    1,4,4,4,4,4,4,4, 4,4,4,4,4,4,4,4,  # 40 - 4f\n-    4,4,5,5,5,5,5,5, 5,5,5,1,1,1,1,1,  # 50 - 5f\n-    1,5,5,5,5,5,5,5, 5,5,5,5,5,5,5,5,  # 60 - 6f\n-    5,5,5,5,5,5,5,5, 5,5,5,1,1,1,1,1,  # 70 - 7f\n-    0,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,  # 80 - 8f\n-    6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,  # 90 - 9f\n-    6,7,7,7,7,7,7,7, 7,7,7,7,7,8,8,8,  # a0 - af\n-    7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,  # b0 - bf\n-    7,7,7,7,7,7,9,2, 2,3,2,2,2,2,2,2,  # c0 - cf\n-    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,  # d0 - df\n-    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,  # e0 - ef\n-    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,0,  # f0 - ff\n-)\n-\n-CP949_ST = (\n-#cls=    0      1      2      3      4      5      6      7      8      9  # previous state =\n-    MachineState.ERROR,MachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,     4,     5,MachineState.ERROR,     6, # MachineState.START\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR, # MachineState.ERROR\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME, # MachineState.ITS_ME\n-    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START, # 3\n-    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START, # 4\n-    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START, # 5\n-    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START, # 6\n-)\n-\n-CP949_CHAR_LEN_TABLE = (0, 1, 2, 0, 1, 1, 2, 2, 0, 2)\n-\n-CP949_SM_MODEL = {'class_table': CP949_CLS,\n-                  'class_factor': 10,\n-                  'state_table': CP949_ST,\n-                  'char_len_table': CP949_CHAR_LEN_TABLE,\n-                  'name': 'CP949'}\n-\n-# EUC-JP\n-\n-EUCJP_CLS = (\n-    4,4,4,4,4,4,4,4,  # 00 - 07\n-    4,4,4,4,4,4,5,5,  # 08 - 0f\n-    4,4,4,4,4,4,4,4,  # 10 - 17\n-    4,4,4,5,4,4,4,4,  # 18 - 1f\n-    4,4,4,4,4,4,4,4,  # 20 - 27\n-    4,4,4,4,4,4,4,4,  # 28 - 2f\n-    4,4,4,4,4,4,4,4,  # 30 - 37\n-    4,4,4,4,4,4,4,4,  # 38 - 3f\n-    4,4,4,4,4,4,4,4,  # 40 - 47\n-    4,4,4,4,4,4,4,4,  # 48 - 4f\n-    4,4,4,4,4,4,4,4,  # 50 - 57\n-    4,4,4,4,4,4,4,4,  # 58 - 5f\n-    4,4,4,4,4,4,4,4,  # 60 - 67\n-    4,4,4,4,4,4,4,4,  # 68 - 6f\n-    4,4,4,4,4,4,4,4,  # 70 - 77\n-    4,4,4,4,4,4,4,4,  # 78 - 7f\n-    5,5,5,5,5,5,5,5,  # 80 - 87\n-    5,5,5,5,5,5,1,3,  # 88 - 8f\n-    5,5,5,5,5,5,5,5,  # 90 - 97\n-    5,5,5,5,5,5,5,5,  # 98 - 9f\n-    5,2,2,2,2,2,2,2,  # a0 - a7\n-    2,2,2,2,2,2,2,2,  # a8 - af\n-    2,2,2,2,2,2,2,2,  # b0 - b7\n-    2,2,2,2,2,2,2,2,  # b8 - bf\n-    2,2,2,2,2,2,2,2,  # c0 - c7\n-    2,2,2,2,2,2,2,2,  # c8 - cf\n-    2,2,2,2,2,2,2,2,  # d0 - d7\n-    2,2,2,2,2,2,2,2,  # d8 - df\n-    0,0,0,0,0,0,0,0,  # e0 - e7\n-    0,0,0,0,0,0,0,0,  # e8 - ef\n-    0,0,0,0,0,0,0,0,  # f0 - f7\n-    0,0,0,0,0,0,0,5  # f8 - ff\n-)\n-\n-EUCJP_ST = (\n-          3,     4,     3,     5,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n-     MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-     MachineState.ITS_ME,MachineState.ITS_ME,MachineState.START,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#10-17\n-     MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     3,MachineState.ERROR,#18-1f\n-          3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START#20-27\n-)\n-\n-EUCJP_CHAR_LEN_TABLE = (2, 2, 2, 3, 1, 0)\n-\n-EUCJP_SM_MODEL = {'class_table': EUCJP_CLS,\n-                  'class_factor': 6,\n-                  'state_table': EUCJP_ST,\n-                  'char_len_table': EUCJP_CHAR_LEN_TABLE,\n-                  'name': 'EUC-JP'}\n-\n-# EUC-KR\n-\n-EUCKR_CLS  = (\n-    1,1,1,1,1,1,1,1,  # 00 - 07\n-    1,1,1,1,1,1,0,0,  # 08 - 0f\n-    1,1,1,1,1,1,1,1,  # 10 - 17\n-    1,1,1,0,1,1,1,1,  # 18 - 1f\n-    1,1,1,1,1,1,1,1,  # 20 - 27\n-    1,1,1,1,1,1,1,1,  # 28 - 2f\n-    1,1,1,1,1,1,1,1,  # 30 - 37\n-    1,1,1,1,1,1,1,1,  # 38 - 3f\n-    1,1,1,1,1,1,1,1,  # 40 - 47\n-    1,1,1,1,1,1,1,1,  # 48 - 4f\n-    1,1,1,1,1,1,1,1,  # 50 - 57\n-    1,1,1,1,1,1,1,1,  # 58 - 5f\n-    1,1,1,1,1,1,1,1,  # 60 - 67\n-    1,1,1,1,1,1,1,1,  # 68 - 6f\n-    1,1,1,1,1,1,1,1,  # 70 - 77\n-    1,1,1,1,1,1,1,1,  # 78 - 7f\n-    0,0,0,0,0,0,0,0,  # 80 - 87\n-    0,0,0,0,0,0,0,0,  # 88 - 8f\n-    0,0,0,0,0,0,0,0,  # 90 - 97\n-    0,0,0,0,0,0,0,0,  # 98 - 9f\n-    0,2,2,2,2,2,2,2,  # a0 - a7\n-    2,2,2,2,2,3,3,3,  # a8 - af\n-    2,2,2,2,2,2,2,2,  # b0 - b7\n-    2,2,2,2,2,2,2,2,  # b8 - bf\n-    2,2,2,2,2,2,2,2,  # c0 - c7\n-    2,3,2,2,2,2,2,2,  # c8 - cf\n-    2,2,2,2,2,2,2,2,  # d0 - d7\n-    2,2,2,2,2,2,2,2,  # d8 - df\n-    2,2,2,2,2,2,2,2,  # e0 - e7\n-    2,2,2,2,2,2,2,2,  # e8 - ef\n-    2,2,2,2,2,2,2,2,  # f0 - f7\n-    2,2,2,2,2,2,2,0   # f8 - ff\n-)\n-\n-EUCKR_ST = (\n-    MachineState.ERROR,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START #08-0f\n-)\n-\n-EUCKR_CHAR_LEN_TABLE = (0, 1, 2, 0)\n-\n-EUCKR_SM_MODEL = {'class_table': EUCKR_CLS,\n-                'class_factor': 4,\n-                'state_table': EUCKR_ST,\n-                'char_len_table': EUCKR_CHAR_LEN_TABLE,\n-                'name': 'EUC-KR'}\n-\n-# EUC-TW\n-\n-EUCTW_CLS = (\n-    2,2,2,2,2,2,2,2,  # 00 - 07\n-    2,2,2,2,2,2,0,0,  # 08 - 0f\n-    2,2,2,2,2,2,2,2,  # 10 - 17\n-    2,2,2,0,2,2,2,2,  # 18 - 1f\n-    2,2,2,2,2,2,2,2,  # 20 - 27\n-    2,2,2,2,2,2,2,2,  # 28 - 2f\n-    2,2,2,2,2,2,2,2,  # 30 - 37\n-    2,2,2,2,2,2,2,2,  # 38 - 3f\n-    2,2,2,2,2,2,2,2,  # 40 - 47\n-    2,2,2,2,2,2,2,2,  # 48 - 4f\n-    2,2,2,2,2,2,2,2,  # 50 - 57\n-    2,2,2,2,2,2,2,2,  # 58 - 5f\n-    2,2,2,2,2,2,2,2,  # 60 - 67\n-    2,2,2,2,2,2,2,2,  # 68 - 6f\n-    2,2,2,2,2,2,2,2,  # 70 - 77\n-    2,2,2,2,2,2,2,2,  # 78 - 7f\n-    0,0,0,0,0,0,0,0,  # 80 - 87\n-    0,0,0,0,0,0,6,0,  # 88 - 8f\n-    0,0,0,0,0,0,0,0,  # 90 - 97\n-    0,0,0,0,0,0,0,0,  # 98 - 9f\n-    0,3,4,4,4,4,4,4,  # a0 - a7\n-    5,5,1,1,1,1,1,1,  # a8 - af\n-    1,1,1,1,1,1,1,1,  # b0 - b7\n-    1,1,1,1,1,1,1,1,  # b8 - bf\n-    1,1,3,1,3,3,3,3,  # c0 - c7\n-    3,3,3,3,3,3,3,3,  # c8 - cf\n-    3,3,3,3,3,3,3,3,  # d0 - d7\n-    3,3,3,3,3,3,3,3,  # d8 - df\n-    3,3,3,3,3,3,3,3,  # e0 - e7\n-    3,3,3,3,3,3,3,3,  # e8 - ef\n-    3,3,3,3,3,3,3,3,  # f0 - f7\n-    3,3,3,3,3,3,3,0   # f8 - ff\n-)\n-\n-EUCTW_ST = (\n-    MachineState.ERROR,MachineState.ERROR,MachineState.START,     3,     3,     3,     4,MachineState.ERROR,#00-07\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,MachineState.ERROR,#10-17\n-    MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n-         5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.START,MachineState.START,#20-27\n-    MachineState.START,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START #28-2f\n-)\n-\n-EUCTW_CHAR_LEN_TABLE = (0, 0, 1, 2, 2, 2, 3)\n-\n-EUCTW_SM_MODEL = {'class_table': EUCTW_CLS,\n-                'class_factor': 7,\n-                'state_table': EUCTW_ST,\n-                'char_len_table': EUCTW_CHAR_LEN_TABLE,\n-                'name': 'x-euc-tw'}\n-\n-# GB2312\n-\n-GB2312_CLS = (\n-    1,1,1,1,1,1,1,1,  # 00 - 07\n-    1,1,1,1,1,1,0,0,  # 08 - 0f\n-    1,1,1,1,1,1,1,1,  # 10 - 17\n-    1,1,1,0,1,1,1,1,  # 18 - 1f\n-    1,1,1,1,1,1,1,1,  # 20 - 27\n-    1,1,1,1,1,1,1,1,  # 28 - 2f\n-    3,3,3,3,3,3,3,3,  # 30 - 37\n-    3,3,1,1,1,1,1,1,  # 38 - 3f\n-    2,2,2,2,2,2,2,2,  # 40 - 47\n-    2,2,2,2,2,2,2,2,  # 48 - 4f\n-    2,2,2,2,2,2,2,2,  # 50 - 57\n-    2,2,2,2,2,2,2,2,  # 58 - 5f\n-    2,2,2,2,2,2,2,2,  # 60 - 67\n-    2,2,2,2,2,2,2,2,  # 68 - 6f\n-    2,2,2,2,2,2,2,2,  # 70 - 77\n-    2,2,2,2,2,2,2,4,  # 78 - 7f\n-    5,6,6,6,6,6,6,6,  # 80 - 87\n-    6,6,6,6,6,6,6,6,  # 88 - 8f\n-    6,6,6,6,6,6,6,6,  # 90 - 97\n-    6,6,6,6,6,6,6,6,  # 98 - 9f\n-    6,6,6,6,6,6,6,6,  # a0 - a7\n-    6,6,6,6,6,6,6,6,  # a8 - af\n-    6,6,6,6,6,6,6,6,  # b0 - b7\n-    6,6,6,6,6,6,6,6,  # b8 - bf\n-    6,6,6,6,6,6,6,6,  # c0 - c7\n-    6,6,6,6,6,6,6,6,  # c8 - cf\n-    6,6,6,6,6,6,6,6,  # d0 - d7\n-    6,6,6,6,6,6,6,6,  # d8 - df\n-    6,6,6,6,6,6,6,6,  # e0 - e7\n-    6,6,6,6,6,6,6,6,  # e8 - ef\n-    6,6,6,6,6,6,6,6,  # f0 - f7\n-    6,6,6,6,6,6,6,0   # f8 - ff\n-)\n-\n-GB2312_ST = (\n-    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,     3,MachineState.ERROR,#00-07\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,#10-17\n-         4,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n-    MachineState.ERROR,MachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,#20-27\n-    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START #28-2f\n-)\n-\n-# To be accurate, the length of class 6 can be either 2 or 4.\n-# But it is not necessary to discriminate between the two since\n-# it is used for frequency analysis only, and we are validating\n-# each code range there as well. So it is safe to set it to be\n-# 2 here.\n-GB2312_CHAR_LEN_TABLE = (0, 1, 1, 1, 1, 1, 2)\n-\n-GB2312_SM_MODEL = {'class_table': GB2312_CLS,\n-                   'class_factor': 7,\n-                   'state_table': GB2312_ST,\n-                   'char_len_table': GB2312_CHAR_LEN_TABLE,\n-                   'name': 'GB2312'}\n-\n-# Shift_JIS\n-\n-SJIS_CLS = (\n-    1,1,1,1,1,1,1,1,  # 00 - 07\n-    1,1,1,1,1,1,0,0,  # 08 - 0f\n-    1,1,1,1,1,1,1,1,  # 10 - 17\n-    1,1,1,0,1,1,1,1,  # 18 - 1f\n-    1,1,1,1,1,1,1,1,  # 20 - 27\n-    1,1,1,1,1,1,1,1,  # 28 - 2f\n-    1,1,1,1,1,1,1,1,  # 30 - 37\n-    1,1,1,1,1,1,1,1,  # 38 - 3f\n-    2,2,2,2,2,2,2,2,  # 40 - 47\n-    2,2,2,2,2,2,2,2,  # 48 - 4f\n-    2,2,2,2,2,2,2,2,  # 50 - 57\n-    2,2,2,2,2,2,2,2,  # 58 - 5f\n-    2,2,2,2,2,2,2,2,  # 60 - 67\n-    2,2,2,2,2,2,2,2,  # 68 - 6f\n-    2,2,2,2,2,2,2,2,  # 70 - 77\n-    2,2,2,2,2,2,2,1,  # 78 - 7f\n-    3,3,3,3,3,2,2,3,  # 80 - 87\n-    3,3,3,3,3,3,3,3,  # 88 - 8f\n-    3,3,3,3,3,3,3,3,  # 90 - 97\n-    3,3,3,3,3,3,3,3,  # 98 - 9f\n-    #0xa0 is illegal in sjis encoding, but some pages does\n-    #contain such byte. We need to be more error forgiven.\n-    2,2,2,2,2,2,2,2,  # a0 - a7\n-    2,2,2,2,2,2,2,2,  # a8 - af\n-    2,2,2,2,2,2,2,2,  # b0 - b7\n-    2,2,2,2,2,2,2,2,  # b8 - bf\n-    2,2,2,2,2,2,2,2,  # c0 - c7\n-    2,2,2,2,2,2,2,2,  # c8 - cf\n-    2,2,2,2,2,2,2,2,  # d0 - d7\n-    2,2,2,2,2,2,2,2,  # d8 - df\n-    3,3,3,3,3,3,3,3,  # e0 - e7\n-    3,3,3,3,3,4,4,4,  # e8 - ef\n-    3,3,3,3,3,3,3,3,  # f0 - f7\n-    3,3,3,3,3,0,0,0)  # f8 - ff\n-\n-\n-SJIS_ST = (\n-    MachineState.ERROR,MachineState.START,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START #10-17\n-)\n-\n-SJIS_CHAR_LEN_TABLE = (0, 1, 1, 2, 0, 0)\n-\n-SJIS_SM_MODEL = {'class_table': SJIS_CLS,\n-               'class_factor': 6,\n-               'state_table': SJIS_ST,\n-               'char_len_table': SJIS_CHAR_LEN_TABLE,\n-               'name': 'Shift_JIS'}\n-\n-# UCS2-BE\n-\n-UCS2BE_CLS = (\n-    0,0,0,0,0,0,0,0,  # 00 - 07\n-    0,0,1,0,0,2,0,0,  # 08 - 0f\n-    0,0,0,0,0,0,0,0,  # 10 - 17\n-    0,0,0,3,0,0,0,0,  # 18 - 1f\n-    0,0,0,0,0,0,0,0,  # 20 - 27\n-    0,3,3,3,3,3,0,0,  # 28 - 2f\n-    0,0,0,0,0,0,0,0,  # 30 - 37\n-    0,0,0,0,0,0,0,0,  # 38 - 3f\n-    0,0,0,0,0,0,0,0,  # 40 - 47\n-    0,0,0,0,0,0,0,0,  # 48 - 4f\n-    0,0,0,0,0,0,0,0,  # 50 - 57\n-    0,0,0,0,0,0,0,0,  # 58 - 5f\n-    0,0,0,0,0,0,0,0,  # 60 - 67\n-    0,0,0,0,0,0,0,0,  # 68 - 6f\n-    0,0,0,0,0,0,0,0,  # 70 - 77\n-    0,0,0,0,0,0,0,0,  # 78 - 7f\n-    0,0,0,0,0,0,0,0,  # 80 - 87\n-    0,0,0,0,0,0,0,0,  # 88 - 8f\n-    0,0,0,0,0,0,0,0,  # 90 - 97\n-    0,0,0,0,0,0,0,0,  # 98 - 9f\n-    0,0,0,0,0,0,0,0,  # a0 - a7\n-    0,0,0,0,0,0,0,0,  # a8 - af\n-    0,0,0,0,0,0,0,0,  # b0 - b7\n-    0,0,0,0,0,0,0,0,  # b8 - bf\n-    0,0,0,0,0,0,0,0,  # c0 - c7\n-    0,0,0,0,0,0,0,0,  # c8 - cf\n-    0,0,0,0,0,0,0,0,  # d0 - d7\n-    0,0,0,0,0,0,0,0,  # d8 - df\n-    0,0,0,0,0,0,0,0,  # e0 - e7\n-    0,0,0,0,0,0,0,0,  # e8 - ef\n-    0,0,0,0,0,0,0,0,  # f0 - f7\n-    0,0,0,0,0,0,4,5   # f8 - ff\n-)\n-\n-UCS2BE_ST  = (\n-          5,     7,     7,MachineState.ERROR,     4,     3,MachineState.ERROR,MachineState.ERROR,#00-07\n-     MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-     MachineState.ITS_ME,MachineState.ITS_ME,     6,     6,     6,     6,MachineState.ERROR,MachineState.ERROR,#10-17\n-          6,     6,     6,     6,     6,MachineState.ITS_ME,     6,     6,#18-1f\n-          6,     6,     6,     6,     5,     7,     7,MachineState.ERROR,#20-27\n-          5,     8,     6,     6,MachineState.ERROR,     6,     6,     6,#28-2f\n-          6,     6,     6,     6,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START #30-37\n-)\n-\n-UCS2BE_CHAR_LEN_TABLE = (2, 2, 2, 0, 2, 2)\n-\n-UCS2BE_SM_MODEL = {'class_table': UCS2BE_CLS,\n-                   'class_factor': 6,\n-                   'state_table': UCS2BE_ST,\n-                   'char_len_table': UCS2BE_CHAR_LEN_TABLE,\n-                   'name': 'UTF-16BE'}\n-\n-# UCS2-LE\n-\n-UCS2LE_CLS = (\n-    0,0,0,0,0,0,0,0,  # 00 - 07\n-    0,0,1,0,0,2,0,0,  # 08 - 0f\n-    0,0,0,0,0,0,0,0,  # 10 - 17\n-    0,0,0,3,0,0,0,0,  # 18 - 1f\n-    0,0,0,0,0,0,0,0,  # 20 - 27\n-    0,3,3,3,3,3,0,0,  # 28 - 2f\n-    0,0,0,0,0,0,0,0,  # 30 - 37\n-    0,0,0,0,0,0,0,0,  # 38 - 3f\n-    0,0,0,0,0,0,0,0,  # 40 - 47\n-    0,0,0,0,0,0,0,0,  # 48 - 4f\n-    0,0,0,0,0,0,0,0,  # 50 - 57\n-    0,0,0,0,0,0,0,0,  # 58 - 5f\n-    0,0,0,0,0,0,0,0,  # 60 - 67\n-    0,0,0,0,0,0,0,0,  # 68 - 6f\n-    0,0,0,0,0,0,0,0,  # 70 - 77\n-    0,0,0,0,0,0,0,0,  # 78 - 7f\n-    0,0,0,0,0,0,0,0,  # 80 - 87\n-    0,0,0,0,0,0,0,0,  # 88 - 8f\n-    0,0,0,0,0,0,0,0,  # 90 - 97\n-    0,0,0,0,0,0,0,0,  # 98 - 9f\n-    0,0,0,0,0,0,0,0,  # a0 - a7\n-    0,0,0,0,0,0,0,0,  # a8 - af\n-    0,0,0,0,0,0,0,0,  # b0 - b7\n-    0,0,0,0,0,0,0,0,  # b8 - bf\n-    0,0,0,0,0,0,0,0,  # c0 - c7\n-    0,0,0,0,0,0,0,0,  # c8 - cf\n-    0,0,0,0,0,0,0,0,  # d0 - d7\n-    0,0,0,0,0,0,0,0,  # d8 - df\n-    0,0,0,0,0,0,0,0,  # e0 - e7\n-    0,0,0,0,0,0,0,0,  # e8 - ef\n-    0,0,0,0,0,0,0,0,  # f0 - f7\n-    0,0,0,0,0,0,4,5   # f8 - ff\n-)\n-\n-UCS2LE_ST = (\n-          6,     6,     7,     6,     4,     3,MachineState.ERROR,MachineState.ERROR,#00-07\n-     MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n-     MachineState.ITS_ME,MachineState.ITS_ME,     5,     5,     5,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,#10-17\n-          5,     5,     5,MachineState.ERROR,     5,MachineState.ERROR,     6,     6,#18-1f\n-          7,     6,     8,     8,     5,     5,     5,MachineState.ERROR,#20-27\n-          5,     5,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,     5,#28-2f\n-          5,     5,     5,MachineState.ERROR,     5,MachineState.ERROR,MachineState.START,MachineState.START #30-37\n-)\n-\n-UCS2LE_CHAR_LEN_TABLE = (2, 2, 2, 2, 2, 2)\n-\n-UCS2LE_SM_MODEL = {'class_table': UCS2LE_CLS,\n-                 'class_factor': 6,\n-                 'state_table': UCS2LE_ST,\n-                 'char_len_table': UCS2LE_CHAR_LEN_TABLE,\n-                 'name': 'UTF-16LE'}\n-\n-# UTF-8\n-\n-UTF8_CLS = (\n-    1,1,1,1,1,1,1,1,  # 00 - 07  #allow 0x00 as a legal value\n-    1,1,1,1,1,1,0,0,  # 08 - 0f\n-    1,1,1,1,1,1,1,1,  # 10 - 17\n-    1,1,1,0,1,1,1,1,  # 18 - 1f\n-    1,1,1,1,1,1,1,1,  # 20 - 27\n-    1,1,1,1,1,1,1,1,  # 28 - 2f\n-    1,1,1,1,1,1,1,1,  # 30 - 37\n-    1,1,1,1,1,1,1,1,  # 38 - 3f\n-    1,1,1,1,1,1,1,1,  # 40 - 47\n-    1,1,1,1,1,1,1,1,  # 48 - 4f\n-    1,1,1,1,1,1,1,1,  # 50 - 57\n-    1,1,1,1,1,1,1,1,  # 58 - 5f\n-    1,1,1,1,1,1,1,1,  # 60 - 67\n-    1,1,1,1,1,1,1,1,  # 68 - 6f\n-    1,1,1,1,1,1,1,1,  # 70 - 77\n-    1,1,1,1,1,1,1,1,  # 78 - 7f\n-    2,2,2,2,3,3,3,3,  # 80 - 87\n-    4,4,4,4,4,4,4,4,  # 88 - 8f\n-    4,4,4,4,4,4,4,4,  # 90 - 97\n-    4,4,4,4,4,4,4,4,  # 98 - 9f\n-    5,5,5,5,5,5,5,5,  # a0 - a7\n-    5,5,5,5,5,5,5,5,  # a8 - af\n-    5,5,5,5,5,5,5,5,  # b0 - b7\n-    5,5,5,5,5,5,5,5,  # b8 - bf\n-    0,0,6,6,6,6,6,6,  # c0 - c7\n-    6,6,6,6,6,6,6,6,  # c8 - cf\n-    6,6,6,6,6,6,6,6,  # d0 - d7\n-    6,6,6,6,6,6,6,6,  # d8 - df\n-    7,8,8,8,8,8,8,8,  # e0 - e7\n-    8,8,8,8,8,9,8,8,  # e8 - ef\n-    10,11,11,11,11,11,11,11,  # f0 - f7\n-    12,13,13,13,14,15,0,0    # f8 - ff\n-)\n-\n-UTF8_ST = (\n-    MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     12,   10,#00-07\n-         9,     11,     8,     7,     6,     5,     4,    3,#08-0f\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#10-17\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#20-27\n-    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#28-2f\n-    MachineState.ERROR,MachineState.ERROR,     5,     5,     5,     5,MachineState.ERROR,MachineState.ERROR,#30-37\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#38-3f\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,     5,     5,MachineState.ERROR,MachineState.ERROR,#40-47\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#48-4f\n-    MachineState.ERROR,MachineState.ERROR,     7,     7,     7,     7,MachineState.ERROR,MachineState.ERROR,#50-57\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#58-5f\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     7,     7,MachineState.ERROR,MachineState.ERROR,#60-67\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#68-6f\n-    MachineState.ERROR,MachineState.ERROR,     9,     9,     9,     9,MachineState.ERROR,MachineState.ERROR,#70-77\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#78-7f\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     9,MachineState.ERROR,MachineState.ERROR,#80-87\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#88-8f\n-    MachineState.ERROR,MachineState.ERROR,    12,    12,    12,    12,MachineState.ERROR,MachineState.ERROR,#90-97\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#98-9f\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,    12,MachineState.ERROR,MachineState.ERROR,#a0-a7\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#a8-af\n-    MachineState.ERROR,MachineState.ERROR,    12,    12,    12,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#b0-b7\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#b8-bf\n-    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,#c0-c7\n-    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR #c8-cf\n-)\n-\n-UTF8_CHAR_LEN_TABLE = (0, 1, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6)\n-\n-UTF8_SM_MODEL = {'class_table': UTF8_CLS,\n-                 'class_factor': 16,\n-                 'state_table': UTF8_ST,\n-                 'char_len_table': UTF8_CHAR_LEN_TABLE,\n-                 'name': 'UTF-8'}\n\n@@ -1,132 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .enums import CharacterCategory, ProbingState, SequenceLikelihood\n-\n-\n-class SingleByteCharSetProber(CharSetProber):\n-    SAMPLE_SIZE = 64\n-    SB_ENOUGH_REL_THRESHOLD = 1024  #  0.25 * SAMPLE_SIZE^2\n-    POSITIVE_SHORTCUT_THRESHOLD = 0.95\n-    NEGATIVE_SHORTCUT_THRESHOLD = 0.05\n-\n-    def __init__(self, model, reversed=False, name_prober=None):\n-        super(SingleByteCharSetProber, self).__init__()\n-        self._model = model\n-        # TRUE if we need to reverse every pair in the model lookup\n-        self._reversed = reversed\n-        # Optional auxiliary prober for name decision\n-        self._name_prober = name_prober\n-        self._last_order = None\n-        self._seq_counters = None\n-        self._total_seqs = None\n-        self._total_char = None\n-        self._freq_char = None\n-        self.reset()\n-\n-    def reset(self):\n-        super(SingleByteCharSetProber, self).reset()\n-        # char order of last character\n-        self._last_order = 255\n-        self._seq_counters = [0] * SequenceLikelihood.get_num_categories()\n-        self._total_seqs = 0\n-        self._total_char = 0\n-        # characters that fall in our sampling range\n-        self._freq_char = 0\n-\n-    @property\n-    def charset_name(self):\n-        if self._name_prober:\n-            return self._name_prober.charset_name\n-        else:\n-            return self._model['charset_name']\n-\n-    @property\n-    def language(self):\n-        if self._name_prober:\n-            return self._name_prober.language\n-        else:\n-            return self._model.get('language')\n-\n-    def feed(self, byte_str):\n-        if not self._model['keep_english_letter']:\n-            byte_str = self.filter_international_words(byte_str)\n-        if not byte_str:\n-            return self.state\n-        char_to_order_map = self._model['char_to_order_map']\n-        for i, c in enumerate(byte_str):\n-            # XXX: Order is in range 1-64, so one would think we want 0-63 here,\n-            #      but that leads to 27 more test failures than before.\n-            order = char_to_order_map[c]\n-            # XXX: This was SYMBOL_CAT_ORDER before, with a value of 250, but\n-            #      CharacterCategory.SYMBOL is actually 253, so we use CONTROL\n-            #      to make it closer to the original intent. The only difference\n-            #      is whether or not we count digits and control characters for\n-            #      _total_char purposes.\n-            if order < CharacterCategory.CONTROL:\n-                self._total_char += 1\n-            if order < self.SAMPLE_SIZE:\n-                self._freq_char += 1\n-                if self._last_order < self.SAMPLE_SIZE:\n-                    self._total_seqs += 1\n-                    if not self._reversed:\n-                        i = (self._last_order * self.SAMPLE_SIZE) + order\n-                        model = self._model['precedence_matrix'][i]\n-                    else:  # reverse the order of the letters in the lookup\n-                        i = (order * self.SAMPLE_SIZE) + self._last_order\n-                        model = self._model['precedence_matrix'][i]\n-                    self._seq_counters[model] += 1\n-            self._last_order = order\n-\n-        charset_name = self._model['charset_name']\n-        if self.state == ProbingState.DETECTING:\n-            if self._total_seqs > self.SB_ENOUGH_REL_THRESHOLD:\n-                confidence = self.get_confidence()\n-                if confidence > self.POSITIVE_SHORTCUT_THRESHOLD:\n-                    self.logger.debug('%s confidence = %s, we have a winner',\n-                                      charset_name, confidence)\n-                    self._state = ProbingState.FOUND_IT\n-                elif confidence < self.NEGATIVE_SHORTCUT_THRESHOLD:\n-                    self.logger.debug('%s confidence = %s, below negative '\n-                                      'shortcut threshhold %s', charset_name,\n-                                      confidence,\n-                                      self.NEGATIVE_SHORTCUT_THRESHOLD)\n-                    self._state = ProbingState.NOT_ME\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        r = 0.01\n-        if self._total_seqs > 0:\n-            r = ((1.0 * self._seq_counters[SequenceLikelihood.POSITIVE]) /\n-                 self._total_seqs / self._model['typical_positive_ratio'])\n-            r = r * self._freq_char / self._total_char\n-            if r >= 1.0:\n-                r = 0.99\n-        return r\n\n@@ -1,73 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetgroupprober import CharSetGroupProber\n-from .sbcharsetprober import SingleByteCharSetProber\n-from .langcyrillicmodel import (Win1251CyrillicModel, Koi8rModel,\n-                                Latin5CyrillicModel, MacCyrillicModel,\n-                                Ibm866Model, Ibm855Model)\n-from .langgreekmodel import Latin7GreekModel, Win1253GreekModel\n-from .langbulgarianmodel import Latin5BulgarianModel, Win1251BulgarianModel\n-# from .langhungarianmodel import Latin2HungarianModel, Win1250HungarianModel\n-from .langthaimodel import TIS620ThaiModel\n-from .langhebrewmodel import Win1255HebrewModel\n-from .hebrewprober import HebrewProber\n-from .langturkishmodel import Latin5TurkishModel\n-\n-\n-class SBCSGroupProber(CharSetGroupProber):\n-    def __init__(self):\n-        super(SBCSGroupProber, self).__init__()\n-        self.probers = [\n-            SingleByteCharSetProber(Win1251CyrillicModel),\n-            SingleByteCharSetProber(Koi8rModel),\n-            SingleByteCharSetProber(Latin5CyrillicModel),\n-            SingleByteCharSetProber(MacCyrillicModel),\n-            SingleByteCharSetProber(Ibm866Model),\n-            SingleByteCharSetProber(Ibm855Model),\n-            SingleByteCharSetProber(Latin7GreekModel),\n-            SingleByteCharSetProber(Win1253GreekModel),\n-            SingleByteCharSetProber(Latin5BulgarianModel),\n-            SingleByteCharSetProber(Win1251BulgarianModel),\n-            # TODO: Restore Hungarian encodings (iso-8859-2 and windows-1250)\n-            #       after we retrain model.\n-            # SingleByteCharSetProber(Latin2HungarianModel),\n-            # SingleByteCharSetProber(Win1250HungarianModel),\n-            SingleByteCharSetProber(TIS620ThaiModel),\n-            SingleByteCharSetProber(Latin5TurkishModel),\n-        ]\n-        hebrew_prober = HebrewProber()\n-        logical_hebrew_prober = SingleByteCharSetProber(Win1255HebrewModel,\n-                                                        False, hebrew_prober)\n-        visual_hebrew_prober = SingleByteCharSetProber(Win1255HebrewModel, True,\n-                                                       hebrew_prober)\n-        hebrew_prober.set_model_probers(logical_hebrew_prober, visual_hebrew_prober)\n-        self.probers.extend([hebrew_prober, logical_hebrew_prober,\n-                             visual_hebrew_prober])\n-\n-        self.reset()\n\n@@ -1,92 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .mbcharsetprober import MultiByteCharSetProber\n-from .codingstatemachine import CodingStateMachine\n-from .chardistribution import SJISDistributionAnalysis\n-from .jpcntx import SJISContextAnalysis\n-from .mbcssm import SJIS_SM_MODEL\n-from .enums import ProbingState, MachineState\n-\n-\n-class SJISProber(MultiByteCharSetProber):\n-    def __init__(self):\n-        super(SJISProber, self).__init__()\n-        self.coding_sm = CodingStateMachine(SJIS_SM_MODEL)\n-        self.distribution_analyzer = SJISDistributionAnalysis()\n-        self.context_analyzer = SJISContextAnalysis()\n-        self.reset()\n-\n-    def reset(self):\n-        super(SJISProber, self).reset()\n-        self.context_analyzer.reset()\n-\n-    @property\n-    def charset_name(self):\n-        return self.context_analyzer.charset_name\n-\n-    @property\n-    def language(self):\n-        return \"Japanese\"\n-\n-    def feed(self, byte_str):\n-        for i in range(len(byte_str)):\n-            coding_state = self.coding_sm.next_state(byte_str[i])\n-            if coding_state == MachineState.ERROR:\n-                self.logger.debug('%s %s prober hit error at byte %s',\n-                                  self.charset_name, self.language, i)\n-                self._state = ProbingState.NOT_ME\n-                break\n-            elif coding_state == MachineState.ITS_ME:\n-                self._state = ProbingState.FOUND_IT\n-                break\n-            elif coding_state == MachineState.START:\n-                char_len = self.coding_sm.get_current_charlen()\n-                if i == 0:\n-                    self._last_char[1] = byte_str[0]\n-                    self.context_analyzer.feed(self._last_char[2 - char_len:],\n-                                               char_len)\n-                    self.distribution_analyzer.feed(self._last_char, char_len)\n-                else:\n-                    self.context_analyzer.feed(byte_str[i + 1 - char_len:i + 3\n-                                                        - char_len], char_len)\n-                    self.distribution_analyzer.feed(byte_str[i - 1:i + 1],\n-                                                    char_len)\n-\n-        self._last_char[0] = byte_str[-1]\n-\n-        if self.state == ProbingState.DETECTING:\n-            if (self.context_analyzer.got_enough_data() and\n-               (self.get_confidence() > self.SHORTCUT_THRESHOLD)):\n-                self._state = ProbingState.FOUND_IT\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        context_conf = self.context_analyzer.get_confidence()\n-        distrib_conf = self.distribution_analyzer.get_confidence()\n-        return max(context_conf, distrib_conf)\n\n@@ -1,278 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is Mozilla Universal charset detector code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 2001\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#   Shy Shalom - original C code\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\"\"\"\n-Module containing the UniversalDetector detector class, which is the primary\n-class a user of ``chardet`` should use.\n-\n-:author: Mark Pilgrim (initial port to Python)\n-:author: Shy Shalom (original C code)\n-:author: Dan Blanchard (major refactoring for 3.0)\n-:author: Ian Cordasco\n-\"\"\"\n-\n-\n-import codecs\n-import logging\n-import re\n-\n-from .enums import InputState, LanguageFilter, ProbingState\n-from .escprober import EscCharSetProber\n-from .latin1prober import Latin1Prober\n-from .mbcsgroupprober import MBCSGroupProber\n-from .sbcsgroupprober import SBCSGroupProber\n-\n-\n-class UniversalDetector(object):\n-    \"\"\"\n-    The ``UniversalDetector`` class underlies the ``chardet.detect`` function\n-    and coordinates all of the different charset probers.\n-\n-    To get a ``dict`` containing an encoding and its confidence, you can simply\n-    run:\n-\n-    .. code::\n-\n-            u = UniversalDetector()\n-            u.feed(some_bytes)\n-            u.close()\n-            detected = u.result\n-\n-    \"\"\"\n-\n-    MINIMUM_THRESHOLD = 0.20\n-    HIGH_BYTE_DETECTOR = re.compile(b'[\\x80-\\xFF]')\n-    ESC_DETECTOR = re.compile(b'(\\033|~{)')\n-    WIN_BYTE_DETECTOR = re.compile(b'[\\x80-\\x9F]')\n-    ISO_WIN_MAP = {'iso-8859-1': 'Windows-1252',\n-                   'iso-8859-2': 'Windows-1250',\n-                   'iso-8859-5': 'Windows-1251',\n-                   'iso-8859-6': 'Windows-1256',\n-                   'iso-8859-7': 'Windows-1253',\n-                   'iso-8859-8': 'Windows-1255',\n-                   'iso-8859-9': 'Windows-1254',\n-                   'iso-8859-13': 'Windows-1257'}\n-\n-    def __init__(self, lang_filter=LanguageFilter.ALL):\n-        self._esc_charset_prober = None\n-        self._charset_probers = []\n-        self.result = None\n-        self.done = None\n-        self._got_data = None\n-        self._input_state = None\n-        self._last_char = None\n-        self.lang_filter = lang_filter\n-        self.logger = logging.getLogger(__name__)\n-        self._has_win_bytes = None\n-        self.reset()\n-\n-    def reset(self):\n-        \"\"\"\n-        Reset the UniversalDetector and all of its probers back to their\n-        initial states.  This is called by ``__init__``, so you only need to\n-        call this directly in between analyses of different documents.\n-        \"\"\"\n-        self.result = {'encoding': None, 'confidence': 0.0, 'language': None}\n-        self.done = False\n-        self._got_data = False\n-        self._has_win_bytes = False\n-        self._input_state = InputState.PURE_ASCII\n-        self._last_char = b''\n-        if self._esc_charset_prober:\n-            self._esc_charset_prober.reset()\n-        for prober in self._charset_probers:\n-            prober.reset()\n-\n-    def feed(self, byte_str):\n-        \"\"\"\n-        Takes a chunk of a document and feeds it through all of the relevant\n-        charset probers.\n-\n-        After calling ``feed``, you can check the value of the ``done``\n-        attribute to see if you need to continue feeding the\n-        ``UniversalDetector`` more data, or if it has made a prediction\n-        (in the ``result`` attribute).\n-\n-        .. note::\n-           You should always call ``close`` when you're done feeding in your\n-           document if ``done`` is not already ``True``.\n-        \"\"\"\n-        if self.done:\n-            return\n-\n-        if not len(byte_str):\n-            return\n-\n-        if not isinstance(byte_str, bytearray):\n-            byte_str = bytearray(byte_str)\n-\n-        # First check for known BOMs, since these are guaranteed to be correct\n-        if not self._got_data:\n-            # If the data starts with BOM, we know it is UTF\n-            if byte_str.startswith(codecs.BOM_UTF8):\n-                # EF BB BF  UTF-8 with BOM\n-                self.result = {'encoding': \"UTF-8-SIG\",\n-                               'confidence': 1.0,\n-                               'language': ''}\n-            elif byte_str.startswith((codecs.BOM_UTF32_LE,\n-                                      codecs.BOM_UTF32_BE)):\n-                # FF FE 00 00  UTF-32, little-endian BOM\n-                # 00 00 FE FF  UTF-32, big-endian BOM\n-                self.result = {'encoding': \"UTF-32\",\n-                               'confidence': 1.0,\n-                               'language': ''}\n-            elif byte_str.startswith(b'\\xFE\\xFF\\x00\\x00'):\n-                # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\n-                self.result = {'encoding': \"X-ISO-10646-UCS-4-3412\",\n-                               'confidence': 1.0,\n-                               'language': ''}\n-            elif byte_str.startswith(b'\\x00\\x00\\xFF\\xFE'):\n-                # 00 00 FF FE  UCS-4, unusual octet order BOM (2143)\n-                self.result = {'encoding': \"X-ISO-10646-UCS-4-2143\",\n-                               'confidence': 1.0,\n-                               'language': ''}\n-            elif byte_str.startswith((codecs.BOM_LE, codecs.BOM_BE)):\n-                # FF FE  UTF-16, little endian BOM\n-                # FE FF  UTF-16, big endian BOM\n-                self.result = {'encoding': \"UTF-16\",\n-                               'confidence': 1.0,\n-                               'language': ''}\n-\n-            self._got_data = True\n-            if self.result['encoding'] is not None:\n-                self.done = True\n-                return\n-\n-        # If none of those matched and we've only see ASCII so far, check\n-        # for high bytes and escape sequences\n-        if self._input_state == InputState.PURE_ASCII:\n-            if self.HIGH_BYTE_DETECTOR.search(byte_str):\n-                self._input_state = InputState.HIGH_BYTE\n-            elif self._input_state == InputState.PURE_ASCII and \\\n-                    self.ESC_DETECTOR.search(self._last_char + byte_str):\n-                self._input_state = InputState.ESC_ASCII\n-\n-        self._last_char = byte_str[-1:]\n-\n-        # If we've seen escape sequences, use the EscCharSetProber, which\n-        # uses a simple state machine to check for known escape sequences in\n-        # HZ and ISO-2022 encodings, since those are the only encodings that\n-        # use such sequences.\n-        if self._input_state == InputState.ESC_ASCII:\n-            if not self._esc_charset_prober:\n-                self._esc_charset_prober = EscCharSetProber(self.lang_filter)\n-            if self._esc_charset_prober.feed(byte_str) == ProbingState.FOUND_IT:\n-                self.result = {'encoding':\n-                               self._esc_charset_prober.charset_name,\n-                               'confidence':\n-                               self._esc_charset_prober.get_confidence(),\n-                               'language':\n-                               self._esc_charset_prober.language}\n-                self.done = True\n-        # If we've seen high bytes (i.e., those with values greater than 127),\n-        # we need to do more complicated checks using all our multi-byte and\n-        # single-byte probers that are left.  The single-byte probers\n-        # use character bigram distributions to determine the encoding, whereas\n-        # the multi-byte probers use a combination of character unigram and\n-        # bigram distributions.\n-        elif self._input_state == InputState.HIGH_BYTE:\n-            if not self._charset_probers:\n-                self._charset_probers = [MBCSGroupProber(self.lang_filter)]\n-                # If we're checking non-CJK encodings, use single-byte prober\n-                if self.lang_filter & LanguageFilter.NON_CJK:\n-                    self._charset_probers.append(SBCSGroupProber())\n-                self._charset_probers.append(Latin1Prober())\n-            for prober in self._charset_probers:\n-                if prober.feed(byte_str) == ProbingState.FOUND_IT:\n-                    self.result = {'encoding': prober.charset_name,\n-                                   'confidence': prober.get_confidence(),\n-                                   'language': prober.language}\n-                    self.done = True\n-                    break\n-            if self.WIN_BYTE_DETECTOR.search(byte_str):\n-                self._has_win_bytes = True\n-\n-    def close(self):\n-        \"\"\"\n-        Stop analyzing the current document and come up with a final\n-        prediction.\n-\n-        :returns:  The ``result`` attribute, a ``dict`` with the keys\n-                   `encoding`, `confidence`, and `language`.\n-        \"\"\"\n-        # Don't bother with checks if we're already done\n-        if self.done:\n-            return self.result\n-        self.done = True\n-\n-        if not self._got_data:\n-            self.logger.debug('no data received!')\n-\n-        # Default to ASCII if it is all we've seen so far\n-        elif self._input_state == InputState.PURE_ASCII:\n-            self.result = {'encoding': 'ascii',\n-                           'confidence': 1.0,\n-                           'language': ''}\n-\n-        # If we have seen non-ASCII, return the best that met MINIMUM_THRESHOLD\n-        elif self._input_state == InputState.HIGH_BYTE:\n-            prober_confidence = None\n-            max_prober_confidence = 0.0\n-            max_prober = None\n-            for prober in self._charset_probers:\n-                if not prober:\n-                    continue\n-                prober_confidence = prober.get_confidence()\n-                if prober_confidence > max_prober_confidence:\n-                    max_prober_confidence = prober_confidence\n-                    max_prober = prober\n-            if max_prober and (max_prober_confidence > self.MINIMUM_THRESHOLD):\n-                charset_name = max_prober.charset_name\n-                lower_charset_name = max_prober.charset_name.lower()\n-                confidence = max_prober.get_confidence()\n-                # Use Windows encoding name instead of ISO-8859 if we saw any\n-                # extra Windows-specific bytes\n-                if lower_charset_name.startswith('iso-8859'):\n-                    if self._has_win_bytes:\n-                        charset_name = self.ISO_WIN_MAP.get(lower_charset_name,\n-                                                            charset_name)\n-                self.result = {'encoding': charset_name,\n-                               'confidence': confidence,\n-                               'language': max_prober.language}\n-\n-        # Log all prober confidences if none met MINIMUM_THRESHOLD\n-        if self.logger.getEffectiveLevel() == logging.DEBUG:\n-            if self.result['encoding'] is None:\n-                self.logger.debug('no probers hit minimum threshold')\n-                for prober in self._charset_probers[0].probers:\n-                    if not prober:\n-                        continue\n-                    self.logger.debug('%s %s confidence = %s',\n-                                      prober.charset_name,\n-                                      prober.language,\n-                                      prober.get_confidence())\n-        return self.result\n\n@@ -1,82 +0,0 @@\n-######################## BEGIN LICENSE BLOCK ########################\n-# The Original Code is mozilla.org code.\n-#\n-# The Initial Developer of the Original Code is\n-# Netscape Communications Corporation.\n-# Portions created by the Initial Developer are Copyright (C) 1998\n-# the Initial Developer. All Rights Reserved.\n-#\n-# Contributor(s):\n-#   Mark Pilgrim - port to Python\n-#\n-# This library is free software; you can redistribute it and/or\n-# modify it under the terms of the GNU Lesser General Public\n-# License as published by the Free Software Foundation; either\n-# version 2.1 of the License, or (at your option) any later version.\n-#\n-# This library is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# Lesser General Public License for more details.\n-#\n-# You should have received a copy of the GNU Lesser General Public\n-# License along with this library; if not, write to the Free Software\n-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n-# 02110-1301  USA\n-######################### END LICENSE BLOCK #########################\n-\n-from .charsetprober import CharSetProber\n-from .enums import ProbingState, MachineState\n-from .codingstatemachine import CodingStateMachine\n-from .mbcssm import UTF8_SM_MODEL\n-\n-\n-\n-class UTF8Prober(CharSetProber):\n-    ONE_CHAR_PROB = 0.5\n-\n-    def __init__(self):\n-        super(UTF8Prober, self).__init__()\n-        self.coding_sm = CodingStateMachine(UTF8_SM_MODEL)\n-        self._num_mb_chars = None\n-        self.reset()\n-\n-    def reset(self):\n-        super(UTF8Prober, self).reset()\n-        self.coding_sm.reset()\n-        self._num_mb_chars = 0\n-\n-    @property\n-    def charset_name(self):\n-        return \"utf-8\"\n-\n-    @property\n-    def language(self):\n-        return \"\"\n-\n-    def feed(self, byte_str):\n-        for c in byte_str:\n-            coding_state = self.coding_sm.next_state(c)\n-            if coding_state == MachineState.ERROR:\n-                self._state = ProbingState.NOT_ME\n-                break\n-            elif coding_state == MachineState.ITS_ME:\n-                self._state = ProbingState.FOUND_IT\n-                break\n-            elif coding_state == MachineState.START:\n-                if self.coding_sm.get_current_charlen() >= 2:\n-                    self._num_mb_chars += 1\n-\n-        if self.state == ProbingState.DETECTING:\n-            if self.get_confidence() > self.SHORTCUT_THRESHOLD:\n-                self._state = ProbingState.FOUND_IT\n-\n-        return self.state\n-\n-    def get_confidence(self):\n-        unlike = 0.99\n-        if self._num_mb_chars < 6:\n-            unlike *= self.ONE_CHAR_PROB ** self._num_mb_chars\n-            return 1.0 - unlike\n-        else:\n-            return unlike\n\n@@ -1,9 +0,0 @@\n-\"\"\"\n-This module exists only to simplify retrieving the version number of chardet\n-from within setup.py and from chardet subpackages.\n-\n-:author: Dan Blanchard (dan.blanchard@gmail.com)\n-\"\"\"\n-\n-__version__ = \"3.0.2\"\n-VERSION = __version__.split('.')\n\n@@ -1 +0,0 @@\n-from .core import *\n\n@@ -1,118 +0,0 @@\n-from .core import encode, decode, alabel, ulabel, IDNAError\n-import codecs\n-import re\n-\n-_unicode_dots_re = re.compile(u'[\\u002e\\u3002\\uff0e\\uff61]')\n-\n-class Codec(codecs.Codec):\n-\n-    def encode(self, data, errors='strict'):\n-\n-        if errors != 'strict':\n-            raise IDNAError(\"Unsupported error handling \\\"{0}\\\"\".format(errors))\n-\n-        if not data:\n-            return \"\", 0\n-\n-        return encode(data), len(data)\n-\n-    def decode(self, data, errors='strict'):\n-\n-        if errors != 'strict':\n-            raise IDNAError(\"Unsupported error handling \\\"{0}\\\"\".format(errors))\n-\n-        if not data:\n-            return u\"\", 0\n-\n-        return decode(data), len(data)\n-\n-class IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n-    def _buffer_encode(self, data, errors, final):\n-        if errors != 'strict':\n-            raise IDNAError(\"Unsupported error handling \\\"{0}\\\"\".format(errors))\n-\n-        if not data:\n-            return (\"\", 0)\n-\n-        labels = _unicode_dots_re.split(data)\n-        trailing_dot = u''\n-        if labels:\n-            if not labels[-1]:\n-                trailing_dot = '.'\n-                del labels[-1]\n-            elif not final:\n-                # Keep potentially unfinished label until the next call\n-                del labels[-1]\n-                if labels:\n-                    trailing_dot = '.'\n-\n-        result = []\n-        size = 0\n-        for label in labels:\n-            result.append(alabel(label))\n-            if size:\n-                size += 1\n-            size += len(label)\n-\n-        # Join with U+002E\n-        result = \".\".join(result) + trailing_dot\n-        size += len(trailing_dot)\n-        return (result, size)\n-\n-class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n-    def _buffer_decode(self, data, errors, final):\n-        if errors != 'strict':\n-            raise IDNAError(\"Unsupported error handling \\\"{0}\\\"\".format(errors))\n-\n-        if not data:\n-            return (u\"\", 0)\n-\n-        # IDNA allows decoding to operate on Unicode strings, too.\n-        if isinstance(data, unicode):\n-            labels = _unicode_dots_re.split(data)\n-        else:\n-            # Must be ASCII string\n-            data = str(data)\n-            unicode(data, \"ascii\")\n-            labels = data.split(\".\")\n-\n-        trailing_dot = u''\n-        if labels:\n-            if not labels[-1]:\n-                trailing_dot = u'.'\n-                del labels[-1]\n-            elif not final:\n-                # Keep potentially unfinished label until the next call\n-                del labels[-1]\n-                if labels:\n-                    trailing_dot = u'.'\n-\n-        result = []\n-        size = 0\n-        for label in labels:\n-            result.append(ulabel(label))\n-            if size:\n-                size += 1\n-            size += len(label)\n-\n-        result = u\".\".join(result) + trailing_dot\n-        size += len(trailing_dot)\n-        return (result, size)\n-\n-\n-class StreamWriter(Codec, codecs.StreamWriter):\n-    pass\n-\n-class StreamReader(Codec, codecs.StreamReader):\n-    pass\n-\n-def getregentry():\n-    return codecs.CodecInfo(\n-        name='idna',\n-        encode=Codec().encode,\n-        decode=Codec().decode,\n-        incrementalencoder=IncrementalEncoder,\n-        incrementaldecoder=IncrementalDecoder,\n-        streamwriter=StreamWriter,\n-        streamreader=StreamReader,\n-    )\n\n@@ -1,12 +0,0 @@\n-from .core import *\n-from .codec import *\n-\n-def ToASCII(label):\n-    return encode(label)\n-\n-def ToUnicode(label):\n-    return decode(label)\n-\n-def nameprep(s):\n-    raise NotImplementedError(\"IDNA 2008 does not utilise nameprep protocol\")\n-\n\n@@ -1,387 +0,0 @@\n-from . import idnadata\n-import bisect\n-import unicodedata\n-import re\n-import sys\n-from .intranges import intranges_contain\n-\n-_virama_combining_class = 9\n-_alabel_prefix = b'xn--'\n-_unicode_dots_re = re.compile(u'[\\u002e\\u3002\\uff0e\\uff61]')\n-\n-if sys.version_info[0] == 3:\n-    unicode = str\n-    unichr = chr\n-\n-class IDNAError(UnicodeError):\n-    \"\"\" Base exception for all IDNA-encoding related problems \"\"\"\n-    pass\n-\n-\n-class IDNABidiError(IDNAError):\n-    \"\"\" Exception when bidirectional requirements are not satisfied \"\"\"\n-    pass\n-\n-\n-class InvalidCodepoint(IDNAError):\n-    \"\"\" Exception when a disallowed or unallocated codepoint is used \"\"\"\n-    pass\n-\n-\n-class InvalidCodepointContext(IDNAError):\n-    \"\"\" Exception when the codepoint is not valid in the context it is used \"\"\"\n-    pass\n-\n-\n-def _combining_class(cp):\n-    return unicodedata.combining(unichr(cp))\n-\n-def _is_script(cp, script):\n-    return intranges_contain(ord(cp), idnadata.scripts[script])\n-\n-def _punycode(s):\n-    return s.encode('punycode')\n-\n-def _unot(s):\n-    return 'U+{0:04X}'.format(s)\n-\n-\n-def valid_label_length(label):\n-\n-    if len(label) > 63:\n-        return False\n-    return True\n-\n-\n-def valid_string_length(label, trailing_dot):\n-\n-    if len(label) > (254 if trailing_dot else 253):\n-        return False\n-    return True\n-\n-\n-def check_bidi(label, check_ltr=False):\n-\n-    # Bidi rules should only be applied if string contains RTL characters\n-    bidi_label = False\n-    for (idx, cp) in enumerate(label, 1):\n-        direction = unicodedata.bidirectional(cp)\n-        if direction == '':\n-            # String likely comes from a newer version of Unicode\n-            raise IDNABidiError('Unknown directionality in label {0} at position {1}'.format(repr(label), idx))\n-        if direction in ['R', 'AL', 'AN']:\n-            bidi_label = True\n-            break\n-    if not bidi_label and not check_ltr:\n-        return True\n-\n-    # Bidi rule 1\n-    direction = unicodedata.bidirectional(label[0])\n-    if direction in ['R', 'AL']:\n-        rtl = True\n-    elif direction == 'L':\n-        rtl = False\n-    else:\n-        raise IDNABidiError('First codepoint in label {0} must be directionality L, R or AL'.format(repr(label)))\n-\n-    valid_ending = False\n-    number_type = False\n-    for (idx, cp) in enumerate(label, 1):\n-        direction = unicodedata.bidirectional(cp)\n-\n-        if rtl:\n-            # Bidi rule 2\n-            if not direction in ['R', 'AL', 'AN', 'EN', 'ES', 'CS', 'ET', 'ON', 'BN', 'NSM']:\n-                raise IDNABidiError('Invalid direction for codepoint at position {0} in a right-to-left label'.format(idx))\n-            # Bidi rule 3\n-            if direction in ['R', 'AL', 'EN', 'AN']:\n-                valid_ending = True\n-            elif direction != 'NSM':\n-                valid_ending = False\n-            # Bidi rule 4\n-            if direction in ['AN', 'EN']:\n-                if not number_type:\n-                    number_type = direction\n-                else:\n-                    if number_type != direction:\n-                        raise IDNABidiError('Can not mix numeral types in a right-to-left label')\n-        else:\n-            # Bidi rule 5\n-            if not direction in ['L', 'EN', 'ES', 'CS', 'ET', 'ON', 'BN', 'NSM']:\n-                raise IDNABidiError('Invalid direction for codepoint at position {0} in a left-to-right label'.format(idx))\n-            # Bidi rule 6\n-            if direction in ['L', 'EN']:\n-                valid_ending = True\n-            elif direction != 'NSM':\n-                valid_ending = False\n-\n-    if not valid_ending:\n-        raise IDNABidiError('Label ends with illegal codepoint directionality')\n-\n-    return True\n-\n-\n-def check_initial_combiner(label):\n-\n-    if unicodedata.category(label[0])[0] == 'M':\n-        raise IDNAError('Label begins with an illegal combining character')\n-    return True\n-\n-\n-def check_hyphen_ok(label):\n-\n-    if label[2:4] == '--':\n-        raise IDNAError('Label has disallowed hyphens in 3rd and 4th position')\n-    if label[0] == '-' or label[-1] == '-':\n-        raise IDNAError('Label must not start or end with a hyphen')\n-    return True\n-\n-\n-def check_nfc(label):\n-\n-    if unicodedata.normalize('NFC', label) != label:\n-        raise IDNAError('Label must be in Normalization Form C')\n-\n-\n-def valid_contextj(label, pos):\n-\n-    cp_value = ord(label[pos])\n-\n-    if cp_value == 0x200c:\n-\n-        if pos > 0:\n-            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n-                return True\n-\n-        ok = False\n-        for i in range(pos-1, -1, -1):\n-            joining_type = idnadata.joining_types.get(ord(label[i]))\n-            if joining_type == ord('T'):\n-                continue\n-            if joining_type in [ord('L'), ord('D')]:\n-                ok = True\n-                break\n-\n-        if not ok:\n-            return False\n-\n-        ok = False\n-        for i in range(pos+1, len(label)):\n-            joining_type = idnadata.joining_types.get(ord(label[i]))\n-            if joining_type == ord('T'):\n-                continue\n-            if joining_type in [ord('R'), ord('D')]:\n-                ok = True\n-                break\n-        return ok\n-\n-    if cp_value == 0x200d:\n-\n-        if pos > 0:\n-            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n-                return True\n-        return False\n-\n-    else:\n-\n-        return False\n-\n-\n-def valid_contexto(label, pos, exception=False):\n-\n-    cp_value = ord(label[pos])\n-\n-    if cp_value == 0x00b7:\n-        if 0 < pos < len(label)-1:\n-            if ord(label[pos - 1]) == 0x006c and ord(label[pos + 1]) == 0x006c:\n-                return True\n-        return False\n-\n-    elif cp_value == 0x0375:\n-        if pos < len(label)-1 and len(label) > 1:\n-            return _is_script(label[pos + 1], 'Greek')\n-        return False\n-\n-    elif cp_value == 0x05f3 or cp_value == 0x05f4:\n-        if pos > 0:\n-            return _is_script(label[pos - 1], 'Hebrew')\n-        return False\n-\n-    elif cp_value == 0x30fb:\n-        for cp in label:\n-            if cp == u'\\u30fb':\n-                continue\n-            if _is_script(cp, 'Hiragana') or _is_script(cp, 'Katakana') or _is_script(cp, 'Han'):\n-                return True\n-        return False\n-\n-    elif 0x660 <= cp_value <= 0x669:\n-        for cp in label:\n-            if 0x6f0 <= ord(cp) <= 0x06f9:\n-                return False\n-        return True\n-\n-    elif 0x6f0 <= cp_value <= 0x6f9:\n-        for cp in label:\n-            if 0x660 <= ord(cp) <= 0x0669:\n-                return False\n-        return True\n-\n-\n-def check_label(label):\n-\n-    if isinstance(label, (bytes, bytearray)):\n-        label = label.decode('utf-8')\n-    if len(label) == 0:\n-        raise IDNAError('Empty Label')\n-\n-    check_nfc(label)\n-    check_hyphen_ok(label)\n-    check_initial_combiner(label)\n-\n-    for (pos, cp) in enumerate(label):\n-        cp_value = ord(cp)\n-        if intranges_contain(cp_value, idnadata.codepoint_classes['PVALID']):\n-            continue\n-        elif intranges_contain(cp_value, idnadata.codepoint_classes['CONTEXTJ']):\n-            if not valid_contextj(label, pos):\n-                raise InvalidCodepointContext('Joiner {0} not allowed at position {1} in {2}'.format(_unot(cp_value), pos+1, repr(label)))\n-        elif intranges_contain(cp_value, idnadata.codepoint_classes['CONTEXTO']):\n-            if not valid_contexto(label, pos):\n-                raise InvalidCodepointContext('Codepoint {0} not allowed at position {1} in {2}'.format(_unot(cp_value), pos+1, repr(label)))\n-        else:\n-            raise InvalidCodepoint('Codepoint {0} at position {1} of {2} not allowed'.format(_unot(cp_value), pos+1, repr(label)))\n-\n-    check_bidi(label)\n-\n-\n-def alabel(label):\n-\n-    try:\n-        label = label.encode('ascii')\n-        try:\n-            ulabel(label)\n-        except IDNAError:\n-            raise IDNAError('The label {0} is not a valid A-label'.format(label))\n-        if not valid_label_length(label):\n-            raise IDNAError('Label too long')\n-        return label\n-    except UnicodeEncodeError:\n-        pass\n-\n-    if not label:\n-        raise IDNAError('No Input')\n-\n-    label = unicode(label)\n-    check_label(label)\n-    label = _punycode(label)\n-    label = _alabel_prefix + label\n-\n-    if not valid_label_length(label):\n-        raise IDNAError('Label too long')\n-\n-    return label\n-\n-\n-def ulabel(label):\n-\n-    if not isinstance(label, (bytes, bytearray)):\n-        try:\n-            label = label.encode('ascii')\n-        except UnicodeEncodeError:\n-            check_label(label)\n-            return label\n-\n-    label = label.lower()\n-    if label.startswith(_alabel_prefix):\n-        label = label[len(_alabel_prefix):]\n-    else:\n-        check_label(label)\n-        return label.decode('ascii')\n-\n-    label = label.decode('punycode')\n-    check_label(label)\n-    return label\n-\n-\n-def uts46_remap(domain, std3_rules=True, transitional=False):\n-    \"\"\"Re-map the characters in the string according to UTS46 processing.\"\"\"\n-    from .uts46data import uts46data\n-    output = u\"\"\n-    try:\n-        for pos, char in enumerate(domain):\n-            code_point = ord(char)\n-            uts46row = uts46data[code_point if code_point < 256 else\n-                bisect.bisect_left(uts46data, (code_point, \"Z\")) - 1]\n-            status = uts46row[1]\n-            replacement = uts46row[2] if len(uts46row) == 3 else None\n-            if (status == \"V\" or\n-                    (status == \"D\" and not transitional) or\n-                    (status == \"3\" and std3_rules and replacement is None)):\n-                output += char\n-            elif replacement is not None and (status == \"M\" or\n-                    (status == \"3\" and std3_rules) or\n-                    (status == \"D\" and transitional)):\n-                output += replacement\n-            elif status != \"I\":\n-                raise IndexError()\n-        return unicodedata.normalize(\"NFC\", output)\n-    except IndexError:\n-        raise InvalidCodepoint(\n-            \"Codepoint {0} not allowed at position {1} in {2}\".format(\n-            _unot(code_point), pos + 1, repr(domain)))\n-\n-\n-def encode(s, strict=False, uts46=False, std3_rules=False, transitional=False):\n-\n-    if isinstance(s, (bytes, bytearray)):\n-        s = s.decode(\"ascii\")\n-    if uts46:\n-        s = uts46_remap(s, std3_rules, transitional)\n-    trailing_dot = False\n-    result = []\n-    if strict:\n-        labels = s.split('.')\n-    else:\n-        labels = _unicode_dots_re.split(s)\n-    while labels and not labels[0]:\n-        del labels[0]\n-    if not labels:\n-        raise IDNAError('Empty domain')\n-    if labels[-1] == '':\n-        del labels[-1]\n-        trailing_dot = True\n-    for label in labels:\n-        result.append(alabel(label))\n-    if trailing_dot:\n-        result.append(b'')\n-    s = b'.'.join(result)\n-    if not valid_string_length(s, trailing_dot):\n-        raise IDNAError('Domain too long')\n-    return s\n-\n-\n-def decode(s, strict=False, uts46=False, std3_rules=False):\n-\n-    if isinstance(s, (bytes, bytearray)):\n-        s = s.decode(\"ascii\")\n-    if uts46:\n-        s = uts46_remap(s, std3_rules, False)\n-    trailing_dot = False\n-    result = []\n-    if not strict:\n-        labels = _unicode_dots_re.split(s)\n-    else:\n-        labels = s.split(u'.')\n-    while labels and not labels[0]:\n-        del labels[0]\n-    if not labels:\n-        raise IDNAError('Empty domain')\n-    if not labels[-1]:\n-        del labels[-1]\n-        trailing_dot = True\n-    for label in labels:\n-        result.append(ulabel(label))\n-    if trailing_dot:\n-        result.append(u'')\n-    return u'.'.join(result)\n\n@@ -1,1584 +0,0 @@\n-# This file is automatically generated by build-idnadata.py\n-\n-scripts = {\n-    'Greek': (\n-        0x37000000374,\n-        0x37500000378,\n-        0x37a0000037e,\n-        0x38400000385,\n-        0x38600000387,\n-        0x3880000038b,\n-        0x38c0000038d,\n-        0x38e000003a2,\n-        0x3a3000003e2,\n-        0x3f000000400,\n-        0x1d2600001d2b,\n-        0x1d5d00001d62,\n-        0x1d6600001d6b,\n-        0x1dbf00001dc0,\n-        0x1f0000001f16,\n-        0x1f1800001f1e,\n-        0x1f2000001f46,\n-        0x1f4800001f4e,\n-        0x1f5000001f58,\n-        0x1f5900001f5a,\n-        0x1f5b00001f5c,\n-        0x1f5d00001f5e,\n-        0x1f5f00001f7e,\n-        0x1f8000001fb5,\n-        0x1fb600001fc5,\n-        0x1fc600001fd4,\n-        0x1fd600001fdc,\n-        0x1fdd00001ff0,\n-        0x1ff200001ff5,\n-        0x1ff600001fff,\n-        0x212600002127,\n-        0x101400001018b,\n-        0x1d2000001d246,\n-    ),\n-    'Han': (\n-        0x2e8000002e9a,\n-        0x2e9b00002ef4,\n-        0x2f0000002fd6,\n-        0x300500003006,\n-        0x300700003008,\n-        0x30210000302a,\n-        0x30380000303c,\n-        0x340000004db6,\n-        0x4e0000009fcd,\n-        0xf9000000fa6e,\n-        0xfa700000fada,\n-        0x200000002a6d7,\n-        0x2a7000002b735,\n-        0x2b7400002b81e,\n-        0x2f8000002fa1e,\n-    ),\n-    'Hebrew': (\n-        0x591000005c8,\n-        0x5d0000005eb,\n-        0x5f0000005f5,\n-        0xfb1d0000fb37,\n-        0xfb380000fb3d,\n-        0xfb3e0000fb3f,\n-        0xfb400000fb42,\n-        0xfb430000fb45,\n-        0xfb460000fb50,\n-    ),\n-    'Hiragana': (\n-        0x304100003097,\n-        0x309d000030a0,\n-        0x1b0010001b002,\n-        0x1f2000001f201,\n-    ),\n-    'Katakana': (\n-        0x30a1000030fb,\n-        0x30fd00003100,\n-        0x31f000003200,\n-        0x32d0000032ff,\n-        0x330000003358,\n-        0xff660000ff70,\n-        0xff710000ff9e,\n-        0x1b0000001b001,\n-    ),\n-}\n-joining_types = {\n-    0x600: 85,\n-    0x601: 85,\n-    0x602: 85,\n-    0x603: 85,\n-    0x604: 85,\n-    0x608: 85,\n-    0x60b: 85,\n-    0x620: 68,\n-    0x621: 85,\n-    0x622: 82,\n-    0x623: 82,\n-    0x624: 82,\n-    0x625: 82,\n-    0x626: 68,\n-    0x627: 82,\n-    0x628: 68,\n-    0x629: 82,\n-    0x62a: 68,\n-    0x62b: 68,\n-    0x62c: 68,\n-    0x62d: 68,\n-    0x62e: 68,\n-    0x62f: 82,\n-    0x630: 82,\n-    0x631: 82,\n-    0x632: 82,\n-    0x633: 68,\n-    0x634: 68,\n-    0x635: 68,\n-    0x636: 68,\n-    0x637: 68,\n-    0x638: 68,\n-    0x639: 68,\n-    0x63a: 68,\n-    0x63b: 68,\n-    0x63c: 68,\n-    0x63d: 68,\n-    0x63e: 68,\n-    0x63f: 68,\n-    0x640: 67,\n-    0x641: 68,\n-    0x642: 68,\n-    0x643: 68,\n-    0x644: 68,\n-    0x645: 68,\n-    0x646: 68,\n-    0x647: 68,\n-    0x648: 82,\n-    0x649: 68,\n-    0x64a: 68,\n-    0x66e: 68,\n-    0x66f: 68,\n-    0x671: 82,\n-    0x672: 82,\n-    0x673: 82,\n-    0x674: 85,\n-    0x675: 82,\n-    0x676: 82,\n-    0x677: 82,\n-    0x678: 68,\n-    0x679: 68,\n-    0x67a: 68,\n-    0x67b: 68,\n-    0x67c: 68,\n-    0x67d: 68,\n-    0x67e: 68,\n-    0x67f: 68,\n-    0x680: 68,\n-    0x681: 68,\n-    0x682: 68,\n-    0x683: 68,\n-    0x684: 68,\n-    0x685: 68,\n-    0x686: 68,\n-    0x687: 68,\n-    0x688: 82,\n-    0x689: 82,\n-    0x68a: 82,\n-    0x68b: 82,\n-    0x68c: 82,\n-    0x68d: 82,\n-    0x68e: 82,\n-    0x68f: 82,\n-    0x690: 82,\n-    0x691: 82,\n-    0x692: 82,\n-    0x693: 82,\n-    0x694: 82,\n-    0x695: 82,\n-    0x696: 82,\n-    0x697: 82,\n-    0x698: 82,\n-    0x699: 82,\n-    0x69a: 68,\n-    0x69b: 68,\n-    0x69c: 68,\n-    0x69d: 68,\n-    0x69e: 68,\n-    0x69f: 68,\n-    0x6a0: 68,\n-    0x6a1: 68,\n-    0x6a2: 68,\n-    0x6a3: 68,\n-    0x6a4: 68,\n-    0x6a5: 68,\n-    0x6a6: 68,\n-    0x6a7: 68,\n-    0x6a8: 68,\n-    0x6a9: 68,\n-    0x6aa: 68,\n-    0x6ab: 68,\n-    0x6ac: 68,\n-    0x6ad: 68,\n-    0x6ae: 68,\n-    0x6af: 68,\n-    0x6b0: 68,\n-    0x6b1: 68,\n-    0x6b2: 68,\n-    0x6b3: 68,\n-    0x6b4: 68,\n-    0x6b5: 68,\n-    0x6b6: 68,\n-    0x6b7: 68,\n-    0x6b8: 68,\n-    0x6b9: 68,\n-    0x6ba: 68,\n-    0x6bb: 68,\n-    0x6bc: 68,\n-    0x6bd: 68,\n-    0x6be: 68,\n-    0x6bf: 68,\n-    0x6c0: 82,\n-    0x6c1: 68,\n-    0x6c2: 68,\n-    0x6c3: 82,\n-    0x6c4: 82,\n-    0x6c5: 82,\n-    0x6c6: 82,\n-    0x6c7: 82,\n-    0x6c8: 82,\n-    0x6c9: 82,\n-    0x6ca: 82,\n-    0x6cb: 82,\n-    0x6cc: 68,\n-    0x6cd: 82,\n-    0x6ce: 68,\n-    0x6cf: 82,\n-    0x6d0: 68,\n-    0x6d1: 68,\n-    0x6d2: 82,\n-    0x6d3: 82,\n-    0x6d5: 82,\n-    0x6dd: 85,\n-    0x6ee: 82,\n-    0x6ef: 82,\n-    0x6fa: 68,\n-    0x6fb: 68,\n-    0x6fc: 68,\n-    0x6ff: 68,\n-    0x710: 82,\n-    0x712: 68,\n-    0x713: 68,\n-    0x714: 68,\n-    0x715: 82,\n-    0x716: 82,\n-    0x717: 82,\n-    0x718: 82,\n-    0x719: 82,\n-    0x71a: 68,\n-    0x71b: 68,\n-    0x71c: 68,\n-    0x71d: 68,\n-    0x71e: 82,\n-    0x71f: 68,\n-    0x720: 68,\n-    0x721: 68,\n-    0x722: 68,\n-    0x723: 68,\n-    0x724: 68,\n-    0x725: 68,\n-    0x726: 68,\n-    0x727: 68,\n-    0x728: 82,\n-    0x729: 68,\n-    0x72a: 82,\n-    0x72b: 68,\n-    0x72c: 82,\n-    0x72d: 68,\n-    0x72e: 68,\n-    0x72f: 82,\n-    0x74d: 82,\n-    0x74e: 68,\n-    0x74f: 68,\n-    0x750: 68,\n-    0x751: 68,\n-    0x752: 68,\n-    0x753: 68,\n-    0x754: 68,\n-    0x755: 68,\n-    0x756: 68,\n-    0x757: 68,\n-    0x758: 68,\n-    0x759: 82,\n-    0x75a: 82,\n-    0x75b: 82,\n-    0x75c: 68,\n-    0x75d: 68,\n-    0x75e: 68,\n-    0x75f: 68,\n-    0x760: 68,\n-    0x761: 68,\n-    0x762: 68,\n-    0x763: 68,\n-    0x764: 68,\n-    0x765: 68,\n-    0x766: 68,\n-    0x767: 68,\n-    0x768: 68,\n-    0x769: 68,\n-    0x76a: 68,\n-    0x76b: 82,\n-    0x76c: 82,\n-    0x76d: 68,\n-    0x76e: 68,\n-    0x76f: 68,\n-    0x770: 68,\n-    0x771: 82,\n-    0x772: 68,\n-    0x773: 82,\n-    0x774: 82,\n-    0x775: 68,\n-    0x776: 68,\n-    0x777: 68,\n-    0x778: 82,\n-    0x779: 82,\n-    0x77a: 68,\n-    0x77b: 68,\n-    0x77c: 68,\n-    0x77d: 68,\n-    0x77e: 68,\n-    0x77f: 68,\n-    0x7ca: 68,\n-    0x7cb: 68,\n-    0x7cc: 68,\n-    0x7cd: 68,\n-    0x7ce: 68,\n-    0x7cf: 68,\n-    0x7d0: 68,\n-    0x7d1: 68,\n-    0x7d2: 68,\n-    0x7d3: 68,\n-    0x7d4: 68,\n-    0x7d5: 68,\n-    0x7d6: 68,\n-    0x7d7: 68,\n-    0x7d8: 68,\n-    0x7d9: 68,\n-    0x7da: 68,\n-    0x7db: 68,\n-    0x7dc: 68,\n-    0x7dd: 68,\n-    0x7de: 68,\n-    0x7df: 68,\n-    0x7e0: 68,\n-    0x7e1: 68,\n-    0x7e2: 68,\n-    0x7e3: 68,\n-    0x7e4: 68,\n-    0x7e5: 68,\n-    0x7e6: 68,\n-    0x7e7: 68,\n-    0x7e8: 68,\n-    0x7e9: 68,\n-    0x7ea: 68,\n-    0x7fa: 67,\n-    0x840: 82,\n-    0x841: 68,\n-    0x842: 68,\n-    0x843: 68,\n-    0x844: 68,\n-    0x845: 68,\n-    0x846: 82,\n-    0x847: 68,\n-    0x848: 68,\n-    0x849: 82,\n-    0x84a: 68,\n-    0x84b: 68,\n-    0x84c: 68,\n-    0x84d: 68,\n-    0x84e: 68,\n-    0x84f: 82,\n-    0x850: 68,\n-    0x851: 68,\n-    0x852: 68,\n-    0x853: 68,\n-    0x854: 82,\n-    0x855: 68,\n-    0x856: 85,\n-    0x857: 85,\n-    0x858: 85,\n-    0x8a0: 68,\n-    0x8a2: 68,\n-    0x8a3: 68,\n-    0x8a4: 68,\n-    0x8a5: 68,\n-    0x8a6: 68,\n-    0x8a7: 68,\n-    0x8a8: 68,\n-    0x8a9: 68,\n-    0x8aa: 82,\n-    0x8ab: 82,\n-    0x8ac: 82,\n-    0x1806: 85,\n-    0x1807: 68,\n-    0x180a: 67,\n-    0x180e: 85,\n-    0x1820: 68,\n-    0x1821: 68,\n-    0x1822: 68,\n-    0x1823: 68,\n-    0x1824: 68,\n-    0x1825: 68,\n-    0x1826: 68,\n-    0x1827: 68,\n-    0x1828: 68,\n-    0x1829: 68,\n-    0x182a: 68,\n-    0x182b: 68,\n-    0x182c: 68,\n-    0x182d: 68,\n-    0x182e: 68,\n-    0x182f: 68,\n-    0x1830: 68,\n-    0x1831: 68,\n-    0x1832: 68,\n-    0x1833: 68,\n-    0x1834: 68,\n-    0x1835: 68,\n-    0x1836: 68,\n-    0x1837: 68,\n-    0x1838: 68,\n-    0x1839: 68,\n-    0x183a: 68,\n-    0x183b: 68,\n-    0x183c: 68,\n-    0x183d: 68,\n-    0x183e: 68,\n-    0x183f: 68,\n-    0x1840: 68,\n-    0x1841: 68,\n-    0x1842: 68,\n-    0x1843: 68,\n-    0x1844: 68,\n-    0x1845: 68,\n-    0x1846: 68,\n-    0x1847: 68,\n-    0x1848: 68,\n-    0x1849: 68,\n-    0x184a: 68,\n-    0x184b: 68,\n-    0x184c: 68,\n-    0x184d: 68,\n-    0x184e: 68,\n-    0x184f: 68,\n-    0x1850: 68,\n-    0x1851: 68,\n-    0x1852: 68,\n-    0x1853: 68,\n-    0x1854: 68,\n-    0x1855: 68,\n-    0x1856: 68,\n-    0x1857: 68,\n-    0x1858: 68,\n-    0x1859: 68,\n-    0x185a: 68,\n-    0x185b: 68,\n-    0x185c: 68,\n-    0x185d: 68,\n-    0x185e: 68,\n-    0x185f: 68,\n-    0x1860: 68,\n-    0x1861: 68,\n-    0x1862: 68,\n-    0x1863: 68,\n-    0x1864: 68,\n-    0x1865: 68,\n-    0x1866: 68,\n-    0x1867: 68,\n-    0x1868: 68,\n-    0x1869: 68,\n-    0x186a: 68,\n-    0x186b: 68,\n-    0x186c: 68,\n-    0x186d: 68,\n-    0x186e: 68,\n-    0x186f: 68,\n-    0x1870: 68,\n-    0x1871: 68,\n-    0x1872: 68,\n-    0x1873: 68,\n-    0x1874: 68,\n-    0x1875: 68,\n-    0x1876: 68,\n-    0x1877: 68,\n-    0x1880: 85,\n-    0x1881: 85,\n-    0x1882: 85,\n-    0x1883: 85,\n-    0x1884: 85,\n-    0x1885: 85,\n-    0x1886: 85,\n-    0x1887: 68,\n-    0x1888: 68,\n-    0x1889: 68,\n-    0x188a: 68,\n-    0x188b: 68,\n-    0x188c: 68,\n-    0x188d: 68,\n-    0x188e: 68,\n-    0x188f: 68,\n-    0x1890: 68,\n-    0x1891: 68,\n-    0x1892: 68,\n-    0x1893: 68,\n-    0x1894: 68,\n-    0x1895: 68,\n-    0x1896: 68,\n-    0x1897: 68,\n-    0x1898: 68,\n-    0x1899: 68,\n-    0x189a: 68,\n-    0x189b: 68,\n-    0x189c: 68,\n-    0x189d: 68,\n-    0x189e: 68,\n-    0x189f: 68,\n-    0x18a0: 68,\n-    0x18a1: 68,\n-    0x18a2: 68,\n-    0x18a3: 68,\n-    0x18a4: 68,\n-    0x18a5: 68,\n-    0x18a6: 68,\n-    0x18a7: 68,\n-    0x18a8: 68,\n-    0x18aa: 68,\n-    0x200c: 85,\n-    0x200d: 67,\n-    0x2066: 85,\n-    0x2067: 85,\n-    0x2068: 85,\n-    0x2069: 85,\n-    0xa840: 68,\n-    0xa841: 68,\n-    0xa842: 68,\n-    0xa843: 68,\n-    0xa844: 68,\n-    0xa845: 68,\n-    0xa846: 68,\n-    0xa847: 68,\n-    0xa848: 68,\n-    0xa849: 68,\n-    0xa84a: 68,\n-    0xa84b: 68,\n-    0xa84c: 68,\n-    0xa84d: 68,\n-    0xa84e: 68,\n-    0xa84f: 68,\n-    0xa850: 68,\n-    0xa851: 68,\n-    0xa852: 68,\n-    0xa853: 68,\n-    0xa854: 68,\n-    0xa855: 68,\n-    0xa856: 68,\n-    0xa857: 68,\n-    0xa858: 68,\n-    0xa859: 68,\n-    0xa85a: 68,\n-    0xa85b: 68,\n-    0xa85c: 68,\n-    0xa85d: 68,\n-    0xa85e: 68,\n-    0xa85f: 68,\n-    0xa860: 68,\n-    0xa861: 68,\n-    0xa862: 68,\n-    0xa863: 68,\n-    0xa864: 68,\n-    0xa865: 68,\n-    0xa866: 68,\n-    0xa867: 68,\n-    0xa868: 68,\n-    0xa869: 68,\n-    0xa86a: 68,\n-    0xa86b: 68,\n-    0xa86c: 68,\n-    0xa86d: 68,\n-    0xa86e: 68,\n-    0xa86f: 68,\n-    0xa870: 68,\n-    0xa871: 68,\n-    0xa872: 76,\n-    0xa873: 85,\n-}\n-codepoint_classes = {\n-    'PVALID': (\n-        0x2d0000002e,\n-        0x300000003a,\n-        0x610000007b,\n-        0xdf000000f7,\n-        0xf800000100,\n-        0x10100000102,\n-        0x10300000104,\n-        0x10500000106,\n-        0x10700000108,\n-        0x1090000010a,\n-        0x10b0000010c,\n-        0x10d0000010e,\n-        0x10f00000110,\n-        0x11100000112,\n-        0x11300000114,\n-        0x11500000116,\n-        0x11700000118,\n-        0x1190000011a,\n-        0x11b0000011c,\n-        0x11d0000011e,\n-        0x11f00000120,\n-        0x12100000122,\n-        0x12300000124,\n-        0x12500000126,\n-        0x12700000128,\n-        0x1290000012a,\n-        0x12b0000012c,\n-        0x12d0000012e,\n-        0x12f00000130,\n-        0x13100000132,\n-        0x13500000136,\n-        0x13700000139,\n-        0x13a0000013b,\n-        0x13c0000013d,\n-        0x13e0000013f,\n-        0x14200000143,\n-        0x14400000145,\n-        0x14600000147,\n-        0x14800000149,\n-        0x14b0000014c,\n-        0x14d0000014e,\n-        0x14f00000150,\n-        0x15100000152,\n-        0x15300000154,\n-        0x15500000156,\n-        0x15700000158,\n-        0x1590000015a,\n-        0x15b0000015c,\n-        0x15d0000015e,\n-        0x15f00000160,\n-        0x16100000162,\n-        0x16300000164,\n-        0x16500000166,\n-        0x16700000168,\n-        0x1690000016a,\n-        0x16b0000016c,\n-        0x16d0000016e,\n-        0x16f00000170,\n-        0x17100000172,\n-        0x17300000174,\n-        0x17500000176,\n-        0x17700000178,\n-        0x17a0000017b,\n-        0x17c0000017d,\n-        0x17e0000017f,\n-        0x18000000181,\n-        0x18300000184,\n-        0x18500000186,\n-        0x18800000189,\n-        0x18c0000018e,\n-        0x19200000193,\n-        0x19500000196,\n-        0x1990000019c,\n-        0x19e0000019f,\n-        0x1a1000001a2,\n-        0x1a3000001a4,\n-        0x1a5000001a6,\n-        0x1a8000001a9,\n-        0x1aa000001ac,\n-        0x1ad000001ae,\n-        0x1b0000001b1,\n-        0x1b4000001b5,\n-        0x1b6000001b7,\n-        0x1b9000001bc,\n-        0x1bd000001c4,\n-        0x1ce000001cf,\n-        0x1d0000001d1,\n-        0x1d2000001d3,\n-        0x1d4000001d5,\n-        0x1d6000001d7,\n-        0x1d8000001d9,\n-        0x1da000001db,\n-        0x1dc000001de,\n-        0x1df000001e0,\n-        0x1e1000001e2,\n-        0x1e3000001e4,\n-        0x1e5000001e6,\n-        0x1e7000001e8,\n-        0x1e9000001ea,\n-        0x1eb000001ec,\n-        0x1ed000001ee,\n-        0x1ef000001f1,\n-        0x1f5000001f6,\n-        0x1f9000001fa,\n-        0x1fb000001fc,\n-        0x1fd000001fe,\n-        0x1ff00000200,\n-        0x20100000202,\n-        0x20300000204,\n-        0x20500000206,\n-        0x20700000208,\n-        0x2090000020a,\n-        0x20b0000020c,\n-        0x20d0000020e,\n-        0x20f00000210,\n-        0x21100000212,\n-        0x21300000214,\n-        0x21500000216,\n-        0x21700000218,\n-        0x2190000021a,\n-        0x21b0000021c,\n-        0x21d0000021e,\n-        0x21f00000220,\n-        0x22100000222,\n-        0x22300000224,\n-        0x22500000226,\n-        0x22700000228,\n-        0x2290000022a,\n-        0x22b0000022c,\n-        0x22d0000022e,\n-        0x22f00000230,\n-        0x23100000232,\n-        0x2330000023a,\n-        0x23c0000023d,\n-        0x23f00000241,\n-        0x24200000243,\n-        0x24700000248,\n-        0x2490000024a,\n-        0x24b0000024c,\n-        0x24d0000024e,\n-        0x24f000002b0,\n-        0x2b9000002c2,\n-        0x2c6000002d2,\n-        0x2ec000002ed,\n-        0x2ee000002ef,\n-        0x30000000340,\n-        0x34200000343,\n-        0x3460000034f,\n-        0x35000000370,\n-        0x37100000372,\n-        0x37300000374,\n-        0x37700000378,\n-        0x37b0000037e,\n-        0x39000000391,\n-        0x3ac000003cf,\n-        0x3d7000003d8,\n-        0x3d9000003da,\n-        0x3db000003dc,\n-        0x3dd000003de,\n-        0x3df000003e0,\n-        0x3e1000003e2,\n-        0x3e3000003e4,\n-        0x3e5000003e6,\n-        0x3e7000003e8,\n-        0x3e9000003ea,\n-        0x3eb000003ec,\n-        0x3ed000003ee,\n-        0x3ef000003f0,\n-        0x3f3000003f4,\n-        0x3f8000003f9,\n-        0x3fb000003fd,\n-        0x43000000460,\n-        0x46100000462,\n-        0x46300000464,\n-        0x46500000466,\n-        0x46700000468,\n-        0x4690000046a,\n-        0x46b0000046c,\n-        0x46d0000046e,\n-        0x46f00000470,\n-        0x47100000472,\n-        0x47300000474,\n-        0x47500000476,\n-        0x47700000478,\n-        0x4790000047a,\n-        0x47b0000047c,\n-        0x47d0000047e,\n-        0x47f00000480,\n-        0x48100000482,\n-        0x48300000488,\n-        0x48b0000048c,\n-        0x48d0000048e,\n-        0x48f00000490,\n-        0x49100000492,\n-        0x49300000494,\n-        0x49500000496,\n-        0x49700000498,\n-        0x4990000049a,\n-        0x49b0000049c,\n-        0x49d0000049e,\n-        0x49f000004a0,\n-        0x4a1000004a2,\n-        0x4a3000004a4,\n-        0x4a5000004a6,\n-        0x4a7000004a8,\n-        0x4a9000004aa,\n-        0x4ab000004ac,\n-        0x4ad000004ae,\n-        0x4af000004b0,\n-        0x4b1000004b2,\n-        0x4b3000004b4,\n-        0x4b5000004b6,\n-        0x4b7000004b8,\n-        0x4b9000004ba,\n-        0x4bb000004bc,\n-        0x4bd000004be,\n-        0x4bf000004c0,\n-        0x4c2000004c3,\n-        0x4c4000004c5,\n-        0x4c6000004c7,\n-        0x4c8000004c9,\n-        0x4ca000004cb,\n-        0x4cc000004cd,\n-        0x4ce000004d0,\n-        0x4d1000004d2,\n-        0x4d3000004d4,\n-        0x4d5000004d6,\n-        0x4d7000004d8,\n-        0x4d9000004da,\n-        0x4db000004dc,\n-        0x4dd000004de,\n-        0x4df000004e0,\n-        0x4e1000004e2,\n-        0x4e3000004e4,\n-        0x4e5000004e6,\n-        0x4e7000004e8,\n-        0x4e9000004ea,\n-        0x4eb000004ec,\n-        0x4ed000004ee,\n-        0x4ef000004f0,\n-        0x4f1000004f2,\n-        0x4f3000004f4,\n-        0x4f5000004f6,\n-        0x4f7000004f8,\n-        0x4f9000004fa,\n-        0x4fb000004fc,\n-        0x4fd000004fe,\n-        0x4ff00000500,\n-        0x50100000502,\n-        0x50300000504,\n-        0x50500000506,\n-        0x50700000508,\n-        0x5090000050a,\n-        0x50b0000050c,\n-        0x50d0000050e,\n-        0x50f00000510,\n-        0x51100000512,\n-        0x51300000514,\n-        0x51500000516,\n-        0x51700000518,\n-        0x5190000051a,\n-        0x51b0000051c,\n-        0x51d0000051e,\n-        0x51f00000520,\n-        0x52100000522,\n-        0x52300000524,\n-        0x52500000526,\n-        0x52700000528,\n-        0x5590000055a,\n-        0x56100000587,\n-        0x591000005be,\n-        0x5bf000005c0,\n-        0x5c1000005c3,\n-        0x5c4000005c6,\n-        0x5c7000005c8,\n-        0x5d0000005eb,\n-        0x5f0000005f3,\n-        0x6100000061b,\n-        0x62000000640,\n-        0x64100000660,\n-        0x66e00000675,\n-        0x679000006d4,\n-        0x6d5000006dd,\n-        0x6df000006e9,\n-        0x6ea000006f0,\n-        0x6fa00000700,\n-        0x7100000074b,\n-        0x74d000007b2,\n-        0x7c0000007f6,\n-        0x8000000082e,\n-        0x8400000085c,\n-        0x8a0000008a1,\n-        0x8a2000008ad,\n-        0x8e4000008ff,\n-        0x90000000958,\n-        0x96000000964,\n-        0x96600000970,\n-        0x97100000978,\n-        0x97900000980,\n-        0x98100000984,\n-        0x9850000098d,\n-        0x98f00000991,\n-        0x993000009a9,\n-        0x9aa000009b1,\n-        0x9b2000009b3,\n-        0x9b6000009ba,\n-        0x9bc000009c5,\n-        0x9c7000009c9,\n-        0x9cb000009cf,\n-        0x9d7000009d8,\n-        0x9e0000009e4,\n-        0x9e6000009f2,\n-        0xa0100000a04,\n-        0xa0500000a0b,\n-        0xa0f00000a11,\n-        0xa1300000a29,\n-        0xa2a00000a31,\n-        0xa3200000a33,\n-        0xa3500000a36,\n-        0xa3800000a3a,\n-        0xa3c00000a3d,\n-        0xa3e00000a43,\n-        0xa4700000a49,\n-        0xa4b00000a4e,\n-        0xa5100000a52,\n-        0xa5c00000a5d,\n-        0xa6600000a76,\n-        0xa8100000a84,\n-        0xa8500000a8e,\n-        0xa8f00000a92,\n-        0xa9300000aa9,\n-        0xaaa00000ab1,\n-        0xab200000ab4,\n-        0xab500000aba,\n-        0xabc00000ac6,\n-        0xac700000aca,\n-        0xacb00000ace,\n-        0xad000000ad1,\n-        0xae000000ae4,\n-        0xae600000af0,\n-        0xb0100000b04,\n-        0xb0500000b0d,\n-        0xb0f00000b11,\n-        0xb1300000b29,\n-        0xb2a00000b31,\n-        0xb3200000b34,\n-        0xb3500000b3a,\n-        0xb3c00000b45,\n-        0xb4700000b49,\n-        0xb4b00000b4e,\n-        0xb5600000b58,\n-        0xb5f00000b64,\n-        0xb6600000b70,\n-        0xb7100000b72,\n-        0xb8200000b84,\n-        0xb8500000b8b,\n-        0xb8e00000b91,\n-        0xb9200000b96,\n-        0xb9900000b9b,\n-        0xb9c00000b9d,\n-        0xb9e00000ba0,\n-        0xba300000ba5,\n-        0xba800000bab,\n-        0xbae00000bba,\n-        0xbbe00000bc3,\n-        0xbc600000bc9,\n-        0xbca00000bce,\n-        0xbd000000bd1,\n-        0xbd700000bd8,\n-        0xbe600000bf0,\n-        0xc0100000c04,\n-        0xc0500000c0d,\n-        0xc0e00000c11,\n-        0xc1200000c29,\n-        0xc2a00000c34,\n-        0xc3500000c3a,\n-        0xc3d00000c45,\n-        0xc4600000c49,\n-        0xc4a00000c4e,\n-        0xc5500000c57,\n-        0xc5800000c5a,\n-        0xc6000000c64,\n-        0xc6600000c70,\n-        0xc8200000c84,\n-        0xc8500000c8d,\n-        0xc8e00000c91,\n-        0xc9200000ca9,\n-        0xcaa00000cb4,\n-        0xcb500000cba,\n-        0xcbc00000cc5,\n-        0xcc600000cc9,\n-        0xcca00000cce,\n-        0xcd500000cd7,\n-        0xcde00000cdf,\n-        0xce000000ce4,\n-        0xce600000cf0,\n-        0xcf100000cf3,\n-        0xd0200000d04,\n-        0xd0500000d0d,\n-        0xd0e00000d11,\n-        0xd1200000d3b,\n-        0xd3d00000d45,\n-        0xd4600000d49,\n-        0xd4a00000d4f,\n-        0xd5700000d58,\n-        0xd6000000d64,\n-        0xd6600000d70,\n-        0xd7a00000d80,\n-        0xd8200000d84,\n-        0xd8500000d97,\n-        0xd9a00000db2,\n-        0xdb300000dbc,\n-        0xdbd00000dbe,\n-        0xdc000000dc7,\n-        0xdca00000dcb,\n-        0xdcf00000dd5,\n-        0xdd600000dd7,\n-        0xdd800000de0,\n-        0xdf200000df4,\n-        0xe0100000e33,\n-        0xe3400000e3b,\n-        0xe4000000e4f,\n-        0xe5000000e5a,\n-        0xe8100000e83,\n-        0xe8400000e85,\n-        0xe8700000e89,\n-        0xe8a00000e8b,\n-        0xe8d00000e8e,\n-        0xe9400000e98,\n-        0xe9900000ea0,\n-        0xea100000ea4,\n-        0xea500000ea6,\n-        0xea700000ea8,\n-        0xeaa00000eac,\n-        0xead00000eb3,\n-        0xeb400000eba,\n-        0xebb00000ebe,\n-        0xec000000ec5,\n-        0xec600000ec7,\n-        0xec800000ece,\n-        0xed000000eda,\n-        0xede00000ee0,\n-        0xf0000000f01,\n-        0xf0b00000f0c,\n-        0xf1800000f1a,\n-        0xf2000000f2a,\n-        0xf3500000f36,\n-        0xf3700000f38,\n-        0xf3900000f3a,\n-        0xf3e00000f43,\n-        0xf4400000f48,\n-        0xf4900000f4d,\n-        0xf4e00000f52,\n-        0xf5300000f57,\n-        0xf5800000f5c,\n-        0xf5d00000f69,\n-        0xf6a00000f6d,\n-        0xf7100000f73,\n-        0xf7400000f75,\n-        0xf7a00000f81,\n-        0xf8200000f85,\n-        0xf8600000f93,\n-        0xf9400000f98,\n-        0xf9900000f9d,\n-        0xf9e00000fa2,\n-        0xfa300000fa7,\n-        0xfa800000fac,\n-        0xfad00000fb9,\n-        0xfba00000fbd,\n-        0xfc600000fc7,\n-        0x10000000104a,\n-        0x10500000109e,\n-        0x10d0000010fb,\n-        0x10fd00001100,\n-        0x120000001249,\n-        0x124a0000124e,\n-        0x125000001257,\n-        0x125800001259,\n-        0x125a0000125e,\n-        0x126000001289,\n-        0x128a0000128e,\n-        0x1290000012b1,\n-        0x12b2000012b6,\n-        0x12b8000012bf,\n-        0x12c0000012c1,\n-        0x12c2000012c6,\n-        0x12c8000012d7,\n-        0x12d800001311,\n-        0x131200001316,\n-        0x13180000135b,\n-        0x135d00001360,\n-        0x138000001390,\n-        0x13a0000013f5,\n-        0x14010000166d,\n-        0x166f00001680,\n-        0x16810000169b,\n-        0x16a0000016eb,\n-        0x17000000170d,\n-        0x170e00001715,\n-        0x172000001735,\n-        0x174000001754,\n-        0x17600000176d,\n-        0x176e00001771,\n-        0x177200001774,\n-        0x1780000017b4,\n-        0x17b6000017d4,\n-        0x17d7000017d8,\n-        0x17dc000017de,\n-        0x17e0000017ea,\n-        0x18100000181a,\n-        0x182000001878,\n-        0x1880000018ab,\n-        0x18b0000018f6,\n-        0x19000000191d,\n-        0x19200000192c,\n-        0x19300000193c,\n-        0x19460000196e,\n-        0x197000001975,\n-        0x1980000019ac,\n-        0x19b0000019ca,\n-        0x19d0000019da,\n-        0x1a0000001a1c,\n-        0x1a2000001a5f,\n-        0x1a6000001a7d,\n-        0x1a7f00001a8a,\n-        0x1a9000001a9a,\n-        0x1aa700001aa8,\n-        0x1b0000001b4c,\n-        0x1b5000001b5a,\n-        0x1b6b00001b74,\n-        0x1b8000001bf4,\n-        0x1c0000001c38,\n-        0x1c4000001c4a,\n-        0x1c4d00001c7e,\n-        0x1cd000001cd3,\n-        0x1cd400001cf7,\n-        0x1d0000001d2c,\n-        0x1d2f00001d30,\n-        0x1d3b00001d3c,\n-        0x1d4e00001d4f,\n-        0x1d6b00001d78,\n-        0x1d7900001d9b,\n-        0x1dc000001de7,\n-        0x1dfc00001e00,\n-        0x1e0100001e02,\n-        0x1e0300001e04,\n-        0x1e0500001e06,\n-        0x1e0700001e08,\n-        0x1e0900001e0a,\n-        0x1e0b00001e0c,\n-        0x1e0d00001e0e,\n-        0x1e0f00001e10,\n-        0x1e1100001e12,\n-        0x1e1300001e14,\n-        0x1e1500001e16,\n-        0x1e1700001e18,\n-        0x1e1900001e1a,\n-        0x1e1b00001e1c,\n-        0x1e1d00001e1e,\n-        0x1e1f00001e20,\n-        0x1e2100001e22,\n-        0x1e2300001e24,\n-        0x1e2500001e26,\n-        0x1e2700001e28,\n-        0x1e2900001e2a,\n-        0x1e2b00001e2c,\n-        0x1e2d00001e2e,\n-        0x1e2f00001e30,\n-        0x1e3100001e32,\n-        0x1e3300001e34,\n-        0x1e3500001e36,\n-        0x1e3700001e38,\n-        0x1e3900001e3a,\n-        0x1e3b00001e3c,\n-        0x1e3d00001e3e,\n-        0x1e3f00001e40,\n-        0x1e4100001e42,\n-        0x1e4300001e44,\n-        0x1e4500001e46,\n-        0x1e4700001e48,\n-        0x1e4900001e4a,\n-        0x1e4b00001e4c,\n-        0x1e4d00001e4e,\n-        0x1e4f00001e50,\n-        0x1e5100001e52,\n-        0x1e5300001e54,\n-        0x1e5500001e56,\n-        0x1e5700001e58,\n-        0x1e5900001e5a,\n-        0x1e5b00001e5c,\n-        0x1e5d00001e5e,\n-        0x1e5f00001e60,\n-        0x1e6100001e62,\n-        0x1e6300001e64,\n-        0x1e6500001e66,\n-        0x1e6700001e68,\n-        0x1e6900001e6a,\n-        0x1e6b00001e6c,\n-        0x1e6d00001e6e,\n-        0x1e6f00001e70,\n-        0x1e7100001e72,\n-        0x1e7300001e74,\n-        0x1e7500001e76,\n-        0x1e7700001e78,\n-        0x1e7900001e7a,\n-        0x1e7b00001e7c,\n-        0x1e7d00001e7e,\n-        0x1e7f00001e80,\n-        0x1e8100001e82,\n-        0x1e8300001e84,\n-        0x1e8500001e86,\n-        0x1e8700001e88,\n-        0x1e8900001e8a,\n-        0x1e8b00001e8c,\n-        0x1e8d00001e8e,\n-        0x1e8f00001e90,\n-        0x1e9100001e92,\n-        0x1e9300001e94,\n-        0x1e9500001e9a,\n-        0x1e9c00001e9e,\n-        0x1e9f00001ea0,\n-        0x1ea100001ea2,\n-        0x1ea300001ea4,\n-        0x1ea500001ea6,\n-        0x1ea700001ea8,\n-        0x1ea900001eaa,\n-        0x1eab00001eac,\n-        0x1ead00001eae,\n-        0x1eaf00001eb0,\n-        0x1eb100001eb2,\n-        0x1eb300001eb4,\n-        0x1eb500001eb6,\n-        0x1eb700001eb8,\n-        0x1eb900001eba,\n-        0x1ebb00001ebc,\n-        0x1ebd00001ebe,\n-        0x1ebf00001ec0,\n-        0x1ec100001ec2,\n-        0x1ec300001ec4,\n-        0x1ec500001ec6,\n-        0x1ec700001ec8,\n-        0x1ec900001eca,\n-        0x1ecb00001ecc,\n-        0x1ecd00001ece,\n-        0x1ecf00001ed0,\n-        0x1ed100001ed2,\n-        0x1ed300001ed4,\n-        0x1ed500001ed6,\n-        0x1ed700001ed8,\n-        0x1ed900001eda,\n-        0x1edb00001edc,\n-        0x1edd00001ede,\n-        0x1edf00001ee0,\n-        0x1ee100001ee2,\n-        0x1ee300001ee4,\n-        0x1ee500001ee6,\n-        0x1ee700001ee8,\n-        0x1ee900001eea,\n-        0x1eeb00001eec,\n-        0x1eed00001eee,\n-        0x1eef00001ef0,\n-        0x1ef100001ef2,\n-        0x1ef300001ef4,\n-        0x1ef500001ef6,\n-        0x1ef700001ef8,\n-        0x1ef900001efa,\n-        0x1efb00001efc,\n-        0x1efd00001efe,\n-        0x1eff00001f08,\n-        0x1f1000001f16,\n-        0x1f2000001f28,\n-        0x1f3000001f38,\n-        0x1f4000001f46,\n-        0x1f5000001f58,\n-        0x1f6000001f68,\n-        0x1f7000001f71,\n-        0x1f7200001f73,\n-        0x1f7400001f75,\n-        0x1f7600001f77,\n-        0x1f7800001f79,\n-        0x1f7a00001f7b,\n-        0x1f7c00001f7d,\n-        0x1fb000001fb2,\n-        0x1fb600001fb7,\n-        0x1fc600001fc7,\n-        0x1fd000001fd3,\n-        0x1fd600001fd8,\n-        0x1fe000001fe3,\n-        0x1fe400001fe8,\n-        0x1ff600001ff7,\n-        0x214e0000214f,\n-        0x218400002185,\n-        0x2c3000002c5f,\n-        0x2c6100002c62,\n-        0x2c6500002c67,\n-        0x2c6800002c69,\n-        0x2c6a00002c6b,\n-        0x2c6c00002c6d,\n-        0x2c7100002c72,\n-        0x2c7300002c75,\n-        0x2c7600002c7c,\n-        0x2c8100002c82,\n-        0x2c8300002c84,\n-        0x2c8500002c86,\n-        0x2c8700002c88,\n-        0x2c8900002c8a,\n-        0x2c8b00002c8c,\n-        0x2c8d00002c8e,\n-        0x2c8f00002c90,\n-        0x2c9100002c92,\n-        0x2c9300002c94,\n-        0x2c9500002c96,\n-        0x2c9700002c98,\n-        0x2c9900002c9a,\n-        0x2c9b00002c9c,\n-        0x2c9d00002c9e,\n-        0x2c9f00002ca0,\n-        0x2ca100002ca2,\n-        0x2ca300002ca4,\n-        0x2ca500002ca6,\n-        0x2ca700002ca8,\n-        0x2ca900002caa,\n-        0x2cab00002cac,\n-        0x2cad00002cae,\n-        0x2caf00002cb0,\n-        0x2cb100002cb2,\n-        0x2cb300002cb4,\n-        0x2cb500002cb6,\n-        0x2cb700002cb8,\n-        0x2cb900002cba,\n-        0x2cbb00002cbc,\n-        0x2cbd00002cbe,\n-        0x2cbf00002cc0,\n-        0x2cc100002cc2,\n-        0x2cc300002cc4,\n-        0x2cc500002cc6,\n-        0x2cc700002cc8,\n-        0x2cc900002cca,\n-        0x2ccb00002ccc,\n-        0x2ccd00002cce,\n-        0x2ccf00002cd0,\n-        0x2cd100002cd2,\n-        0x2cd300002cd4,\n-        0x2cd500002cd6,\n-        0x2cd700002cd8,\n-        0x2cd900002cda,\n-        0x2cdb00002cdc,\n-        0x2cdd00002cde,\n-        0x2cdf00002ce0,\n-        0x2ce100002ce2,\n-        0x2ce300002ce5,\n-        0x2cec00002ced,\n-        0x2cee00002cf2,\n-        0x2cf300002cf4,\n-        0x2d0000002d26,\n-        0x2d2700002d28,\n-        0x2d2d00002d2e,\n-        0x2d3000002d68,\n-        0x2d7f00002d97,\n-        0x2da000002da7,\n-        0x2da800002daf,\n-        0x2db000002db7,\n-        0x2db800002dbf,\n-        0x2dc000002dc7,\n-        0x2dc800002dcf,\n-        0x2dd000002dd7,\n-        0x2dd800002ddf,\n-        0x2de000002e00,\n-        0x2e2f00002e30,\n-        0x300500003008,\n-        0x302a0000302e,\n-        0x303c0000303d,\n-        0x304100003097,\n-        0x30990000309b,\n-        0x309d0000309f,\n-        0x30a1000030fb,\n-        0x30fc000030ff,\n-        0x31050000312e,\n-        0x31a0000031bb,\n-        0x31f000003200,\n-        0x340000004db6,\n-        0x4e0000009fcd,\n-        0xa0000000a48d,\n-        0xa4d00000a4fe,\n-        0xa5000000a60d,\n-        0xa6100000a62c,\n-        0xa6410000a642,\n-        0xa6430000a644,\n-        0xa6450000a646,\n-        0xa6470000a648,\n-        0xa6490000a64a,\n-        0xa64b0000a64c,\n-        0xa64d0000a64e,\n-        0xa64f0000a650,\n-        0xa6510000a652,\n-        0xa6530000a654,\n-        0xa6550000a656,\n-        0xa6570000a658,\n-        0xa6590000a65a,\n-        0xa65b0000a65c,\n-        0xa65d0000a65e,\n-        0xa65f0000a660,\n-        0xa6610000a662,\n-        0xa6630000a664,\n-        0xa6650000a666,\n-        0xa6670000a668,\n-        0xa6690000a66a,\n-        0xa66b0000a66c,\n-        0xa66d0000a670,\n-        0xa6740000a67e,\n-        0xa67f0000a680,\n-        0xa6810000a682,\n-        0xa6830000a684,\n-        0xa6850000a686,\n-        0xa6870000a688,\n-        0xa6890000a68a,\n-        0xa68b0000a68c,\n-        0xa68d0000a68e,\n-        0xa68f0000a690,\n-        0xa6910000a692,\n-        0xa6930000a694,\n-        0xa6950000a696,\n-        0xa6970000a698,\n-        0xa69f0000a6e6,\n-        0xa6f00000a6f2,\n-        0xa7170000a720,\n-        0xa7230000a724,\n-        0xa7250000a726,\n-        0xa7270000a728,\n-        0xa7290000a72a,\n-        0xa72b0000a72c,\n-        0xa72d0000a72e,\n-        0xa72f0000a732,\n-        0xa7330000a734,\n-        0xa7350000a736,\n-        0xa7370000a738,\n-        0xa7390000a73a,\n-        0xa73b0000a73c,\n-        0xa73d0000a73e,\n-        0xa73f0000a740,\n-        0xa7410000a742,\n-        0xa7430000a744,\n-        0xa7450000a746,\n-        0xa7470000a748,\n-        0xa7490000a74a,\n-        0xa74b0000a74c,\n-        0xa74d0000a74e,\n-        0xa74f0000a750,\n-        0xa7510000a752,\n-        0xa7530000a754,\n-        0xa7550000a756,\n-        0xa7570000a758,\n-        0xa7590000a75a,\n-        0xa75b0000a75c,\n-        0xa75d0000a75e,\n-        0xa75f0000a760,\n-        0xa7610000a762,\n-        0xa7630000a764,\n-        0xa7650000a766,\n-        0xa7670000a768,\n-        0xa7690000a76a,\n-        0xa76b0000a76c,\n-        0xa76d0000a76e,\n-        0xa76f0000a770,\n-        0xa7710000a779,\n-        0xa77a0000a77b,\n-        0xa77c0000a77d,\n-        0xa77f0000a780,\n-        0xa7810000a782,\n-        0xa7830000a784,\n-        0xa7850000a786,\n-        0xa7870000a789,\n-        0xa78c0000a78d,\n-        0xa78e0000a78f,\n-        0xa7910000a792,\n-        0xa7930000a794,\n-        0xa7a10000a7a2,\n-        0xa7a30000a7a4,\n-        0xa7a50000a7a6,\n-        0xa7a70000a7a8,\n-        0xa7a90000a7aa,\n-        0xa7fa0000a828,\n-        0xa8400000a874,\n-        0xa8800000a8c5,\n-        0xa8d00000a8da,\n-        0xa8e00000a8f8,\n-        0xa8fb0000a8fc,\n-        0xa9000000a92e,\n-        0xa9300000a954,\n-        0xa9800000a9c1,\n-        0xa9cf0000a9da,\n-        0xaa000000aa37,\n-        0xaa400000aa4e,\n-        0xaa500000aa5a,\n-        0xaa600000aa77,\n-        0xaa7a0000aa7c,\n-        0xaa800000aac3,\n-        0xaadb0000aade,\n-        0xaae00000aaf0,\n-        0xaaf20000aaf7,\n-        0xab010000ab07,\n-        0xab090000ab0f,\n-        0xab110000ab17,\n-        0xab200000ab27,\n-        0xab280000ab2f,\n-        0xabc00000abeb,\n-        0xabec0000abee,\n-        0xabf00000abfa,\n-        0xac000000d7a4,\n-        0xfa0e0000fa10,\n-        0xfa110000fa12,\n-        0xfa130000fa15,\n-        0xfa1f0000fa20,\n-        0xfa210000fa22,\n-        0xfa230000fa25,\n-        0xfa270000fa2a,\n-        0xfb1e0000fb1f,\n-        0xfe200000fe27,\n-        0xfe730000fe74,\n-        0x100000001000c,\n-        0x1000d00010027,\n-        0x100280001003b,\n-        0x1003c0001003e,\n-        0x1003f0001004e,\n-        0x100500001005e,\n-        0x10080000100fb,\n-        0x101fd000101fe,\n-        0x102800001029d,\n-        0x102a0000102d1,\n-        0x103000001031f,\n-        0x1033000010341,\n-        0x103420001034a,\n-        0x103800001039e,\n-        0x103a0000103c4,\n-        0x103c8000103d0,\n-        0x104280001049e,\n-        0x104a0000104aa,\n-        0x1080000010806,\n-        0x1080800010809,\n-        0x1080a00010836,\n-        0x1083700010839,\n-        0x1083c0001083d,\n-        0x1083f00010856,\n-        0x1090000010916,\n-        0x109200001093a,\n-        0x10980000109b8,\n-        0x109be000109c0,\n-        0x10a0000010a04,\n-        0x10a0500010a07,\n-        0x10a0c00010a14,\n-        0x10a1500010a18,\n-        0x10a1900010a34,\n-        0x10a3800010a3b,\n-        0x10a3f00010a40,\n-        0x10a6000010a7d,\n-        0x10b0000010b36,\n-        0x10b4000010b56,\n-        0x10b6000010b73,\n-        0x10c0000010c49,\n-        0x1100000011047,\n-        0x1106600011070,\n-        0x11080000110bb,\n-        0x110d0000110e9,\n-        0x110f0000110fa,\n-        0x1110000011135,\n-        0x1113600011140,\n-        0x11180000111c5,\n-        0x111d0000111da,\n-        0x11680000116b8,\n-        0x116c0000116ca,\n-        0x120000001236f,\n-        0x130000001342f,\n-        0x1680000016a39,\n-        0x16f0000016f45,\n-        0x16f5000016f7f,\n-        0x16f8f00016fa0,\n-        0x1b0000001b002,\n-        0x200000002a6d7,\n-        0x2a7000002b735,\n-        0x2b7400002b81e,\n-    ),\n-    'CONTEXTJ': (\n-        0x200c0000200e,\n-    ),\n-    'CONTEXTO': (\n-        0xb7000000b8,\n-        0x37500000376,\n-        0x5f3000005f5,\n-        0x6600000066a,\n-        0x6f0000006fa,\n-        0x30fb000030fc,\n-    ),\n-}\n\n@@ -1,53 +0,0 @@\n-\"\"\"\n-Given a list of integers, made up of (hopefully) a small number of long runs\n-of consecutive integers, compute a representation of the form\n-((start1, end1), (start2, end2) ...). Then answer the question \"was x present\n-in the original list?\" in time O(log(# runs)).\n-\"\"\"\n-\n-import bisect\n-\n-def intranges_from_list(list_):\n-    \"\"\"Represent a list of integers as a sequence of ranges:\n-    ((start_0, end_0), (start_1, end_1), ...), such that the original\n-    integers are exactly those x such that start_i <= x < end_i for some i.\n-\n-    Ranges are encoded as single integers (start << 32 | end), not as tuples.\n-    \"\"\"\n-\n-    sorted_list = sorted(list_)\n-    ranges = []\n-    last_write = -1\n-    for i in range(len(sorted_list)):\n-        if i+1 < len(sorted_list):\n-            if sorted_list[i] == sorted_list[i+1]-1:\n-                continue\n-        current_range = sorted_list[last_write+1:i+1]\n-        ranges.append(_encode_range(current_range[0], current_range[-1] + 1))\n-        last_write = i\n-\n-    return tuple(ranges)\n-\n-def _encode_range(start, end):\n-    return (start << 32) | end\n-\n-def _decode_range(r):\n-    return (r >> 32), (r & ((1 << 32) - 1))\n-\n-\n-def intranges_contain(int_, ranges):\n-    \"\"\"Determine if `int_` falls into one of the ranges in `ranges`.\"\"\"\n-    tuple_ = _encode_range(int_, 0)\n-    pos = bisect.bisect_left(ranges, tuple_)\n-    # we could be immediately ahead of a tuple (start, end)\n-    # with start < int_ <= end\n-    if pos > 0:\n-        left, right = _decode_range(ranges[pos-1])\n-        if left <= int_ < right:\n-            return True\n-    # or we could be immediately behind a tuple (int_, end)\n-    if pos < len(ranges):\n-        left, _ = _decode_range(ranges[pos])\n-        if left == int_:\n-            return True\n-    return False\n\n@@ -1,7633 +0,0 @@\n-# This file is automatically generated by tools/build-uts46data.py\n-# vim: set fileencoding=utf-8 :\n-\n-\"\"\"IDNA Mapping Table from UTS46.\"\"\"\n-\n-\n-def _seg_0():\n-    return [\n-    (0x0, '3'),\n-    (0x1, '3'),\n-    (0x2, '3'),\n-    (0x3, '3'),\n-    (0x4, '3'),\n-    (0x5, '3'),\n-    (0x6, '3'),\n-    (0x7, '3'),\n-    (0x8, '3'),\n-    (0x9, '3'),\n-    (0xA, '3'),\n-    (0xB, '3'),\n-    (0xC, '3'),\n-    (0xD, '3'),\n-    (0xE, '3'),\n-    (0xF, '3'),\n-    (0x10, '3'),\n-    (0x11, '3'),\n-    (0x12, '3'),\n-    (0x13, '3'),\n-    (0x14, '3'),\n-    (0x15, '3'),\n-    (0x16, '3'),\n-    (0x17, '3'),\n-    (0x18, '3'),\n-    (0x19, '3'),\n-    (0x1A, '3'),\n-    (0x1B, '3'),\n-    (0x1C, '3'),\n-    (0x1D, '3'),\n-    (0x1E, '3'),\n-    (0x1F, '3'),\n-    (0x20, '3'),\n-    (0x21, '3'),\n-    (0x22, '3'),\n-    (0x23, '3'),\n-    (0x24, '3'),\n-    (0x25, '3'),\n-    (0x26, '3'),\n-    (0x27, '3'),\n-    (0x28, '3'),\n-    (0x29, '3'),\n-    (0x2A, '3'),\n-    (0x2B, '3'),\n-    (0x2C, '3'),\n-    (0x2D, 'V'),\n-    (0x2E, 'V'),\n-    (0x2F, '3'),\n-    (0x30, 'V'),\n-    (0x31, 'V'),\n-    (0x32, 'V'),\n-    (0x33, 'V'),\n-    (0x34, 'V'),\n-    (0x35, 'V'),\n-    (0x36, 'V'),\n-    (0x37, 'V'),\n-    (0x38, 'V'),\n-    (0x39, 'V'),\n-    (0x3A, '3'),\n-    (0x3B, '3'),\n-    (0x3C, '3'),\n-    (0x3D, '3'),\n-    (0x3E, '3'),\n-    (0x3F, '3'),\n-    (0x40, '3'),\n-    (0x41, 'M', u'a'),\n-    (0x42, 'M', u'b'),\n-    (0x43, 'M', u'c'),\n-    (0x44, 'M', u'd'),\n-    (0x45, 'M', u'e'),\n-    (0x46, 'M', u'f'),\n-    (0x47, 'M', u'g'),\n-    (0x48, 'M', u'h'),\n-    (0x49, 'M', u'i'),\n-    (0x4A, 'M', u'j'),\n-    (0x4B, 'M', u'k'),\n-    (0x4C, 'M', u'l'),\n-    (0x4D, 'M', u'm'),\n-    (0x4E, 'M', u'n'),\n-    (0x4F, 'M', u'o'),\n-    (0x50, 'M', u'p'),\n-    (0x51, 'M', u'q'),\n-    (0x52, 'M', u'r'),\n-    (0x53, 'M', u's'),\n-    (0x54, 'M', u't'),\n-    (0x55, 'M', u'u'),\n-    (0x56, 'M', u'v'),\n-    (0x57, 'M', u'w'),\n-    (0x58, 'M', u'x'),\n-    (0x59, 'M', u'y'),\n-    (0x5A, 'M', u'z'),\n-    (0x5B, '3'),\n-    (0x5C, '3'),\n-    (0x5D, '3'),\n-    (0x5E, '3'),\n-    (0x5F, '3'),\n-    (0x60, '3'),\n-    (0x61, 'V'),\n-    (0x62, 'V'),\n-    (0x63, 'V'),\n-    ]\n-\n-def _seg_1():\n-    return [\n-    (0x64, 'V'),\n-    (0x65, 'V'),\n-    (0x66, 'V'),\n-    (0x67, 'V'),\n-    (0x68, 'V'),\n-    (0x69, 'V'),\n-    (0x6A, 'V'),\n-    (0x6B, 'V'),\n-    (0x6C, 'V'),\n-    (0x6D, 'V'),\n-    (0x6E, 'V'),\n-    (0x6F, 'V'),\n-    (0x70, 'V'),\n-    (0x71, 'V'),\n-    (0x72, 'V'),\n-    (0x73, 'V'),\n-    (0x74, 'V'),\n-    (0x75, 'V'),\n-    (0x76, 'V'),\n-    (0x77, 'V'),\n-    (0x78, 'V'),\n-    (0x79, 'V'),\n-    (0x7A, 'V'),\n-    (0x7B, '3'),\n-    (0x7C, '3'),\n-    (0x7D, '3'),\n-    (0x7E, '3'),\n-    (0x7F, '3'),\n-    (0x80, 'X'),\n-    (0x81, 'X'),\n-    (0x82, 'X'),\n-    (0x83, 'X'),\n-    (0x84, 'X'),\n-    (0x85, 'X'),\n-    (0x86, 'X'),\n-    (0x87, 'X'),\n-    (0x88, 'X'),\n-    (0x89, 'X'),\n-    (0x8A, 'X'),\n-    (0x8B, 'X'),\n-    (0x8C, 'X'),\n-    (0x8D, 'X'),\n-    (0x8E, 'X'),\n-    (0x8F, 'X'),\n-    (0x90, 'X'),\n-    (0x91, 'X'),\n-    (0x92, 'X'),\n-    (0x93, 'X'),\n-    (0x94, 'X'),\n-    (0x95, 'X'),\n-    (0x96, 'X'),\n-    (0x97, 'X'),\n-    (0x98, 'X'),\n-    (0x99, 'X'),\n-    (0x9A, 'X'),\n-    (0x9B, 'X'),\n-    (0x9C, 'X'),\n-    (0x9D, 'X'),\n-    (0x9E, 'X'),\n-    (0x9F, 'X'),\n-    (0xA0, '3', u' '),\n-    (0xA1, 'V'),\n-    (0xA2, 'V'),\n-    (0xA3, 'V'),\n-    (0xA4, 'V'),\n-    (0xA5, 'V'),\n-    (0xA6, 'V'),\n-    (0xA7, 'V'),\n-    (0xA8, '3', u' ̈'),\n-    (0xA9, 'V'),\n-    (0xAA, 'M', u'a'),\n-    (0xAB, 'V'),\n-    (0xAC, 'V'),\n-    (0xAD, 'I'),\n-    (0xAE, 'V'),\n-    (0xAF, '3', u' ̄'),\n-    (0xB0, 'V'),\n-    (0xB1, 'V'),\n-    (0xB2, 'M', u'2'),\n-    (0xB3, 'M', u'3'),\n-    (0xB4, '3', u' ́'),\n-    (0xB5, 'M', u'μ'),\n-    (0xB6, 'V'),\n-    (0xB7, 'V'),\n-    (0xB8, '3', u' ̧'),\n-    (0xB9, 'M', u'1'),\n-    (0xBA, 'M', u'o'),\n-    (0xBB, 'V'),\n-    (0xBC, 'M', u'1⁄4'),\n-    (0xBD, 'M', u'1⁄2'),\n-    (0xBE, 'M', u'3⁄4'),\n-    (0xBF, 'V'),\n-    (0xC0, 'M', u'à'),\n-    (0xC1, 'M', u'á'),\n-    (0xC2, 'M', u'â'),\n-    (0xC3, 'M', u'ã'),\n-    (0xC4, 'M', u'ä'),\n-    (0xC5, 'M', u'å'),\n-    (0xC6, 'M', u'æ'),\n-    (0xC7, 'M', u'ç'),\n-    ]\n-\n-def _seg_2():\n-    return [\n-    (0xC8, 'M', u'è'),\n-    (0xC9, 'M', u'é'),\n-    (0xCA, 'M', u'ê'),\n-    (0xCB, 'M', u'ë'),\n-    (0xCC, 'M', u'ì'),\n-    (0xCD, 'M', u'í'),\n-    (0xCE, 'M', u'î'),\n-    (0xCF, 'M', u'ï'),\n-    (0xD0, 'M', u'ð'),\n-    (0xD1, 'M', u'ñ'),\n-    (0xD2, 'M', u'ò'),\n-    (0xD3, 'M', u'ó'),\n-    (0xD4, 'M', u'ô'),\n-    (0xD5, 'M', u'õ'),\n-    (0xD6, 'M', u'ö'),\n-    (0xD7, 'V'),\n-    (0xD8, 'M', u'ø'),\n-    (0xD9, 'M', u'ù'),\n-    (0xDA, 'M', u'ú'),\n-    (0xDB, 'M', u'û'),\n-    (0xDC, 'M', u'ü'),\n-    (0xDD, 'M', u'ý'),\n-    (0xDE, 'M', u'þ'),\n-    (0xDF, 'D', u'ss'),\n-    (0xE0, 'V'),\n-    (0xE1, 'V'),\n-    (0xE2, 'V'),\n-    (0xE3, 'V'),\n-    (0xE4, 'V'),\n-    (0xE5, 'V'),\n-    (0xE6, 'V'),\n-    (0xE7, 'V'),\n-    (0xE8, 'V'),\n-    (0xE9, 'V'),\n-    (0xEA, 'V'),\n-    (0xEB, 'V'),\n-    (0xEC, 'V'),\n-    (0xED, 'V'),\n-    (0xEE, 'V'),\n-    (0xEF, 'V'),\n-    (0xF0, 'V'),\n-    (0xF1, 'V'),\n-    (0xF2, 'V'),\n-    (0xF3, 'V'),\n-    (0xF4, 'V'),\n-    (0xF5, 'V'),\n-    (0xF6, 'V'),\n-    (0xF7, 'V'),\n-    (0xF8, 'V'),\n-    (0xF9, 'V'),\n-    (0xFA, 'V'),\n-    (0xFB, 'V'),\n-    (0xFC, 'V'),\n-    (0xFD, 'V'),\n-    (0xFE, 'V'),\n-    (0xFF, 'V'),\n-    (0x100, 'M', u'ā'),\n-    (0x101, 'V'),\n-    (0x102, 'M', u'ă'),\n-    (0x103, 'V'),\n-    (0x104, 'M', u'ą'),\n-    (0x105, 'V'),\n-    (0x106, 'M', u'ć'),\n-    (0x107, 'V'),\n-    (0x108, 'M', u'ĉ'),\n-    (0x109, 'V'),\n-    (0x10A, 'M', u'ċ'),\n-    (0x10B, 'V'),\n-    (0x10C, 'M', u'č'),\n-    (0x10D, 'V'),\n-    (0x10E, 'M', u'ď'),\n-    (0x10F, 'V'),\n-    (0x110, 'M', u'đ'),\n-    (0x111, 'V'),\n-    (0x112, 'M', u'ē'),\n-    (0x113, 'V'),\n-    (0x114, 'M', u'ĕ'),\n-    (0x115, 'V'),\n-    (0x116, 'M', u'ė'),\n-    (0x117, 'V'),\n-    (0x118, 'M', u'ę'),\n-    (0x119, 'V'),\n-    (0x11A, 'M', u'ě'),\n-    (0x11B, 'V'),\n-    (0x11C, 'M', u'ĝ'),\n-    (0x11D, 'V'),\n-    (0x11E, 'M', u'ğ'),\n-    (0x11F, 'V'),\n-    (0x120, 'M', u'ġ'),\n-    (0x121, 'V'),\n-    (0x122, 'M', u'ģ'),\n-    (0x123, 'V'),\n-    (0x124, 'M', u'ĥ'),\n-    (0x125, 'V'),\n-    (0x126, 'M', u'ħ'),\n-    (0x127, 'V'),\n-    (0x128, 'M', u'ĩ'),\n-    (0x129, 'V'),\n-    (0x12A, 'M', u'ī'),\n-    (0x12B, 'V'),\n-    ]\n-\n-def _seg_3():\n-    return [\n-    (0x12C, 'M', u'ĭ'),\n-    (0x12D, 'V'),\n-    (0x12E, 'M', u'į'),\n-    (0x12F, 'V'),\n-    (0x130, 'M', u'i̇'),\n-    (0x131, 'V'),\n-    (0x132, 'M', u'ij'),\n-    (0x134, 'M', u'ĵ'),\n-    (0x135, 'V'),\n-    (0x136, 'M', u'ķ'),\n-    (0x137, 'V'),\n-    (0x139, 'M', u'ĺ'),\n-    (0x13A, 'V'),\n-    (0x13B, 'M', u'ļ'),\n-    (0x13C, 'V'),\n-    (0x13D, 'M', u'ľ'),\n-    (0x13E, 'V'),\n-    (0x13F, 'M', u'l·'),\n-    (0x141, 'M', u'ł'),\n-    (0x142, 'V'),\n-    (0x143, 'M', u'ń'),\n-    (0x144, 'V'),\n-    (0x145, 'M', u'ņ'),\n-    (0x146, 'V'),\n-    (0x147, 'M', u'ň'),\n-    (0x148, 'V'),\n-    (0x149, 'M', u'ʼn'),\n-    (0x14A, 'M', u'ŋ'),\n-    (0x14B, 'V'),\n-    (0x14C, 'M', u'ō'),\n-    (0x14D, 'V'),\n-    (0x14E, 'M', u'ŏ'),\n-    (0x14F, 'V'),\n-    (0x150, 'M', u'ő'),\n-    (0x151, 'V'),\n-    (0x152, 'M', u'œ'),\n-    (0x153, 'V'),\n-    (0x154, 'M', u'ŕ'),\n-    (0x155, 'V'),\n-    (0x156, 'M', u'ŗ'),\n-    (0x157, 'V'),\n-    (0x158, 'M', u'ř'),\n-    (0x159, 'V'),\n-    (0x15A, 'M', u'ś'),\n-    (0x15B, 'V'),\n-    (0x15C, 'M', u'ŝ'),\n-    (0x15D, 'V'),\n-    (0x15E, 'M', u'ş'),\n-    (0x15F, 'V'),\n-    (0x160, 'M', u'š'),\n-    (0x161, 'V'),\n-    (0x162, 'M', u'ţ'),\n-    (0x163, 'V'),\n-    (0x164, 'M', u'ť'),\n-    (0x165, 'V'),\n-    (0x166, 'M', u'ŧ'),\n-    (0x167, 'V'),\n-    (0x168, 'M', u'ũ'),\n-    (0x169, 'V'),\n-    (0x16A, 'M', u'ū'),\n-    (0x16B, 'V'),\n-    (0x16C, 'M', u'ŭ'),\n-    (0x16D, 'V'),\n-    (0x16E, 'M', u'ů'),\n-    (0x16F, 'V'),\n-    (0x170, 'M', u'ű'),\n-    (0x171, 'V'),\n-    (0x172, 'M', u'ų'),\n-    (0x173, 'V'),\n-    (0x174, 'M', u'ŵ'),\n-    (0x175, 'V'),\n-    (0x176, 'M', u'ŷ'),\n-    (0x177, 'V'),\n-    (0x178, 'M', u'ÿ'),\n-    (0x179, 'M', u'ź'),\n-    (0x17A, 'V'),\n-    (0x17B, 'M', u'ż'),\n-    (0x17C, 'V'),\n-    (0x17D, 'M', u'ž'),\n-    (0x17E, 'V'),\n-    (0x17F, 'M', u's'),\n-    (0x180, 'V'),\n-    (0x181, 'M', u'ɓ'),\n-    (0x182, 'M', u'ƃ'),\n-    (0x183, 'V'),\n-    (0x184, 'M', u'ƅ'),\n-    (0x185, 'V'),\n-    (0x186, 'M', u'ɔ'),\n-    (0x187, 'M', u'ƈ'),\n-    (0x188, 'V'),\n-    (0x189, 'M', u'ɖ'),\n-    (0x18A, 'M', u'ɗ'),\n-    (0x18B, 'M', u'ƌ'),\n-    (0x18C, 'V'),\n-    (0x18E, 'M', u'ǝ'),\n-    (0x18F, 'M', u'ə'),\n-    (0x190, 'M', u'ɛ'),\n-    (0x191, 'M', u'ƒ'),\n-    (0x192, 'V'),\n-    (0x193, 'M', u'ɠ'),\n-    ]\n-\n-def _seg_4():\n-    return [\n-    (0x194, 'M', u'ɣ'),\n-    (0x195, 'V'),\n-    (0x196, 'M', u'ɩ'),\n-    (0x197, 'M', u'ɨ'),\n-    (0x198, 'M', u'ƙ'),\n-    (0x199, 'V'),\n-    (0x19C, 'M', u'ɯ'),\n-    (0x19D, 'M', u'ɲ'),\n-    (0x19E, 'V'),\n-    (0x19F, 'M', u'ɵ'),\n-    (0x1A0, 'M', u'ơ'),\n-    (0x1A1, 'V'),\n-    (0x1A2, 'M', u'ƣ'),\n-    (0x1A3, 'V'),\n-    (0x1A4, 'M', u'ƥ'),\n-    (0x1A5, 'V'),\n-    (0x1A6, 'M', u'ʀ'),\n-    (0x1A7, 'M', u'ƨ'),\n-    (0x1A8, 'V'),\n-    (0x1A9, 'M', u'ʃ'),\n-    (0x1AA, 'V'),\n-    (0x1AC, 'M', u'ƭ'),\n-    (0x1AD, 'V'),\n-    (0x1AE, 'M', u'ʈ'),\n-    (0x1AF, 'M', u'ư'),\n-    (0x1B0, 'V'),\n-    (0x1B1, 'M', u'ʊ'),\n-    (0x1B2, 'M', u'ʋ'),\n-    (0x1B3, 'M', u'ƴ'),\n-    (0x1B4, 'V'),\n-    (0x1B5, 'M', u'ƶ'),\n-    (0x1B6, 'V'),\n-    (0x1B7, 'M', u'ʒ'),\n-    (0x1B8, 'M', u'ƹ'),\n-    (0x1B9, 'V'),\n-    (0x1BC, 'M', u'ƽ'),\n-    (0x1BD, 'V'),\n-    (0x1C4, 'M', u'dž'),\n-    (0x1C7, 'M', u'lj'),\n-    (0x1CA, 'M', u'nj'),\n-    (0x1CD, 'M', u'ǎ'),\n-    (0x1CE, 'V'),\n-    (0x1CF, 'M', u'ǐ'),\n-    (0x1D0, 'V'),\n-    (0x1D1, 'M', u'ǒ'),\n-    (0x1D2, 'V'),\n-    (0x1D3, 'M', u'ǔ'),\n-    (0x1D4, 'V'),\n-    (0x1D5, 'M', u'ǖ'),\n-    (0x1D6, 'V'),\n-    (0x1D7, 'M', u'ǘ'),\n-    (0x1D8, 'V'),\n-    (0x1D9, 'M', u'ǚ'),\n-    (0x1DA, 'V'),\n-    (0x1DB, 'M', u'ǜ'),\n-    (0x1DC, 'V'),\n-    (0x1DE, 'M', u'ǟ'),\n-    (0x1DF, 'V'),\n-    (0x1E0, 'M', u'ǡ'),\n-    (0x1E1, 'V'),\n-    (0x1E2, 'M', u'ǣ'),\n-    (0x1E3, 'V'),\n-    (0x1E4, 'M', u'ǥ'),\n-    (0x1E5, 'V'),\n-    (0x1E6, 'M', u'ǧ'),\n-    (0x1E7, 'V'),\n-    (0x1E8, 'M', u'ǩ'),\n-    (0x1E9, 'V'),\n-    (0x1EA, 'M', u'ǫ'),\n-    (0x1EB, 'V'),\n-    (0x1EC, 'M', u'ǭ'),\n-    (0x1ED, 'V'),\n-    (0x1EE, 'M', u'ǯ'),\n-    (0x1EF, 'V'),\n-    (0x1F1, 'M', u'dz'),\n-    (0x1F4, 'M', u'ǵ'),\n-    (0x1F5, 'V'),\n-    (0x1F6, 'M', u'ƕ'),\n-    (0x1F7, 'M', u'ƿ'),\n-    (0x1F8, 'M', u'ǹ'),\n-    (0x1F9, 'V'),\n-    (0x1FA, 'M', u'ǻ'),\n-    (0x1FB, 'V'),\n-    (0x1FC, 'M', u'ǽ'),\n-    (0x1FD, 'V'),\n-    (0x1FE, 'M', u'ǿ'),\n-    (0x1FF, 'V'),\n-    (0x200, 'M', u'ȁ'),\n-    (0x201, 'V'),\n-    (0x202, 'M', u'ȃ'),\n-    (0x203, 'V'),\n-    (0x204, 'M', u'ȅ'),\n-    (0x205, 'V'),\n-    (0x206, 'M', u'ȇ'),\n-    (0x207, 'V'),\n-    (0x208, 'M', u'ȉ'),\n-    (0x209, 'V'),\n-    (0x20A, 'M', u'ȋ'),\n-    (0x20B, 'V'),\n-    (0x20C, 'M', u'ȍ'),\n-    ]\n-\n-def _seg_5():\n-    return [\n-    (0x20D, 'V'),\n-    (0x20E, 'M', u'ȏ'),\n-    (0x20F, 'V'),\n-    (0x210, 'M', u'ȑ'),\n-    (0x211, 'V'),\n-    (0x212, 'M', u'ȓ'),\n-    (0x213, 'V'),\n-    (0x214, 'M', u'ȕ'),\n-    (0x215, 'V'),\n-    (0x216, 'M', u'ȗ'),\n-    (0x217, 'V'),\n-    (0x218, 'M', u'ș'),\n-    (0x219, 'V'),\n-    (0x21A, 'M', u'ț'),\n-    (0x21B, 'V'),\n-    (0x21C, 'M', u'ȝ'),\n-    (0x21D, 'V'),\n-    (0x21E, 'M', u'ȟ'),\n-    (0x21F, 'V'),\n-    (0x220, 'M', u'ƞ'),\n-    (0x221, 'V'),\n-    (0x222, 'M', u'ȣ'),\n-    (0x223, 'V'),\n-    (0x224, 'M', u'ȥ'),\n-    (0x225, 'V'),\n-    (0x226, 'M', u'ȧ'),\n-    (0x227, 'V'),\n-    (0x228, 'M', u'ȩ'),\n-    (0x229, 'V'),\n-    (0x22A, 'M', u'ȫ'),\n-    (0x22B, 'V'),\n-    (0x22C, 'M', u'ȭ'),\n-    (0x22D, 'V'),\n-    (0x22E, 'M', u'ȯ'),\n-    (0x22F, 'V'),\n-    (0x230, 'M', u'ȱ'),\n-    (0x231, 'V'),\n-    (0x232, 'M', u'ȳ'),\n-    (0x233, 'V'),\n-    (0x23A, 'M', u'ⱥ'),\n-    (0x23B, 'M', u'ȼ'),\n-    (0x23C, 'V'),\n-    (0x23D, 'M', u'ƚ'),\n-    (0x23E, 'M', u'ⱦ'),\n-    (0x23F, 'V'),\n-    (0x241, 'M', u'ɂ'),\n-    (0x242, 'V'),\n-    (0x243, 'M', u'ƀ'),\n-    (0x244, 'M', u'ʉ'),\n-    (0x245, 'M', u'ʌ'),\n-    (0x246, 'M', u'ɇ'),\n-    (0x247, 'V'),\n-    (0x248, 'M', u'ɉ'),\n-    (0x249, 'V'),\n-    (0x24A, 'M', u'ɋ'),\n-    (0x24B, 'V'),\n-    (0x24C, 'M', u'ɍ'),\n-    (0x24D, 'V'),\n-    (0x24E, 'M', u'ɏ'),\n-    (0x24F, 'V'),\n-    (0x2B0, 'M', u'h'),\n-    (0x2B1, 'M', u'ɦ'),\n-    (0x2B2, 'M', u'j'),\n-    (0x2B3, 'M', u'r'),\n-    (0x2B4, 'M', u'ɹ'),\n-    (0x2B5, 'M', u'ɻ'),\n-    (0x2B6, 'M', u'ʁ'),\n-    (0x2B7, 'M', u'w'),\n-    (0x2B8, 'M', u'y'),\n-    (0x2B9, 'V'),\n-    (0x2D8, '3', u' ̆'),\n-    (0x2D9, '3', u' ̇'),\n-    (0x2DA, '3', u' ̊'),\n-    (0x2DB, '3', u' ̨'),\n-    (0x2DC, '3', u' ̃'),\n-    (0x2DD, '3', u' ̋'),\n-    (0x2DE, 'V'),\n-    (0x2E0, 'M', u'ɣ'),\n-    (0x2E1, 'M', u'l'),\n-    (0x2E2, 'M', u's'),\n-    (0x2E3, 'M', u'x'),\n-    (0x2E4, 'M', u'ʕ'),\n-    (0x2E5, 'V'),\n-    (0x340, 'M', u'̀'),\n-    (0x341, 'M', u'́'),\n-    (0x342, 'V'),\n-    (0x343, 'M', u'̓'),\n-    (0x344, 'M', u'̈́'),\n-    (0x345, 'M', u'ι'),\n-    (0x346, 'V'),\n-    (0x34F, 'I'),\n-    (0x350, 'V'),\n-    (0x370, 'M', u'ͱ'),\n-    (0x371, 'V'),\n-    (0x372, 'M', u'ͳ'),\n-    (0x373, 'V'),\n-    (0x374, 'M', u'ʹ'),\n-    (0x375, 'V'),\n-    (0x376, 'M', u'ͷ'),\n-    (0x377, 'V'),\n-    ]\n-\n-def _seg_6():\n-    return [\n-    (0x378, 'X'),\n-    (0x37A, '3', u' ι'),\n-    (0x37B, 'V'),\n-    (0x37E, '3', u';'),\n-    (0x37F, 'X'),\n-    (0x384, '3', u' ́'),\n-    (0x385, '3', u' ̈́'),\n-    (0x386, 'M', u'ά'),\n-    (0x387, 'M', u'·'),\n-    (0x388, 'M', u'έ'),\n-    (0x389, 'M', u'ή'),\n-    (0x38A, 'M', u'ί'),\n-    (0x38B, 'X'),\n-    (0x38C, 'M', u'ό'),\n-    (0x38D, 'X'),\n-    (0x38E, 'M', u'ύ'),\n-    (0x38F, 'M', u'ώ'),\n-    (0x390, 'V'),\n-    (0x391, 'M', u'α'),\n-    (0x392, 'M', u'β'),\n-    (0x393, 'M', u'γ'),\n-    (0x394, 'M', u'δ'),\n-    (0x395, 'M', u'ε'),\n-    (0x396, 'M', u'ζ'),\n-    (0x397, 'M', u'η'),\n-    (0x398, 'M', u'θ'),\n-    (0x399, 'M', u'ι'),\n-    (0x39A, 'M', u'κ'),\n-    (0x39B, 'M', u'λ'),\n-    (0x39C, 'M', u'μ'),\n-    (0x39D, 'M', u'ν'),\n-    (0x39E, 'M', u'ξ'),\n-    (0x39F, 'M', u'ο'),\n-    (0x3A0, 'M', u'π'),\n-    (0x3A1, 'M', u'ρ'),\n-    (0x3A2, 'X'),\n-    (0x3A3, 'M', u'σ'),\n-    (0x3A4, 'M', u'τ'),\n-    (0x3A5, 'M', u'υ'),\n-    (0x3A6, 'M', u'φ'),\n-    (0x3A7, 'M', u'χ'),\n-    (0x3A8, 'M', u'ψ'),\n-    (0x3A9, 'M', u'ω'),\n-    (0x3AA, 'M', u'ϊ'),\n-    (0x3AB, 'M', u'ϋ'),\n-    (0x3AC, 'V'),\n-    (0x3C2, 'D', u'σ'),\n-    (0x3C3, 'V'),\n-    (0x3CF, 'M', u'ϗ'),\n-    (0x3D0, 'M', u'β'),\n-    (0x3D1, 'M', u'θ'),\n-    (0x3D2, 'M', u'υ'),\n-    (0x3D3, 'M', u'ύ'),\n-    (0x3D4, 'M', u'ϋ'),\n-    (0x3D5, 'M', u'φ'),\n-    (0x3D6, 'M', u'π'),\n-    (0x3D7, 'V'),\n-    (0x3D8, 'M', u'ϙ'),\n-    (0x3D9, 'V'),\n-    (0x3DA, 'M', u'ϛ'),\n-    (0x3DB, 'V'),\n-    (0x3DC, 'M', u'ϝ'),\n-    (0x3DD, 'V'),\n-    (0x3DE, 'M', u'ϟ'),\n-    (0x3DF, 'V'),\n-    (0x3E0, 'M', u'ϡ'),\n-    (0x3E1, 'V'),\n-    (0x3E2, 'M', u'ϣ'),\n-    (0x3E3, 'V'),\n-    (0x3E4, 'M', u'ϥ'),\n-    (0x3E5, 'V'),\n-    (0x3E6, 'M', u'ϧ'),\n-    (0x3E7, 'V'),\n-    (0x3E8, 'M', u'ϩ'),\n-    (0x3E9, 'V'),\n-    (0x3EA, 'M', u'ϫ'),\n-    (0x3EB, 'V'),\n-    (0x3EC, 'M', u'ϭ'),\n-    (0x3ED, 'V'),\n-    (0x3EE, 'M', u'ϯ'),\n-    (0x3EF, 'V'),\n-    (0x3F0, 'M', u'κ'),\n-    (0x3F1, 'M', u'ρ'),\n-    (0x3F2, 'M', u'σ'),\n-    (0x3F3, 'V'),\n-    (0x3F4, 'M', u'θ'),\n-    (0x3F5, 'M', u'ε'),\n-    (0x3F6, 'V'),\n-    (0x3F7, 'M', u'ϸ'),\n-    (0x3F8, 'V'),\n-    (0x3F9, 'M', u'σ'),\n-    (0x3FA, 'M', u'ϻ'),\n-    (0x3FB, 'V'),\n-    (0x3FD, 'M', u'ͻ'),\n-    (0x3FE, 'M', u'ͼ'),\n-    (0x3FF, 'M', u'ͽ'),\n-    (0x400, 'M', u'ѐ'),\n-    (0x401, 'M', u'ё'),\n-    (0x402, 'M', u'ђ'),\n-    (0x403, 'M', u'ѓ'),\n-    ]\n-\n-def _seg_7():\n-    return [\n-    (0x404, 'M', u'є'),\n-    (0x405, 'M', u'ѕ'),\n-    (0x406, 'M', u'і'),\n-    (0x407, 'M', u'ї'),\n-    (0x408, 'M', u'ј'),\n-    (0x409, 'M', u'љ'),\n-    (0x40A, 'M', u'њ'),\n-    (0x40B, 'M', u'ћ'),\n-    (0x40C, 'M', u'ќ'),\n-    (0x40D, 'M', u'ѝ'),\n-    (0x40E, 'M', u'ў'),\n-    (0x40F, 'M', u'џ'),\n-    (0x410, 'M', u'а'),\n-    (0x411, 'M', u'б'),\n-    (0x412, 'M', u'в'),\n-    (0x413, 'M', u'г'),\n-    (0x414, 'M', u'д'),\n-    (0x415, 'M', u'е'),\n-    (0x416, 'M', u'ж'),\n-    (0x417, 'M', u'з'),\n-    (0x418, 'M', u'и'),\n-    (0x419, 'M', u'й'),\n-    (0x41A, 'M', u'к'),\n-    (0x41B, 'M', u'л'),\n-    (0x41C, 'M', u'м'),\n-    (0x41D, 'M', u'н'),\n-    (0x41E, 'M', u'о'),\n-    (0x41F, 'M', u'п'),\n-    (0x420, 'M', u'р'),\n-    (0x421, 'M', u'с'),\n-    (0x422, 'M', u'т'),\n-    (0x423, 'M', u'у'),\n-    (0x424, 'M', u'ф'),\n-    (0x425, 'M', u'х'),\n-    (0x426, 'M', u'ц'),\n-    (0x427, 'M', u'ч'),\n-    (0x428, 'M', u'ш'),\n-    (0x429, 'M', u'щ'),\n-    (0x42A, 'M', u'ъ'),\n-    (0x42B, 'M', u'ы'),\n-    (0x42C, 'M', u'ь'),\n-    (0x42D, 'M', u'э'),\n-    (0x42E, 'M', u'ю'),\n-    (0x42F, 'M', u'я'),\n-    (0x430, 'V'),\n-    (0x460, 'M', u'ѡ'),\n-    (0x461, 'V'),\n-    (0x462, 'M', u'ѣ'),\n-    (0x463, 'V'),\n-    (0x464, 'M', u'ѥ'),\n-    (0x465, 'V'),\n-    (0x466, 'M', u'ѧ'),\n-    (0x467, 'V'),\n-    (0x468, 'M', u'ѩ'),\n-    (0x469, 'V'),\n-    (0x46A, 'M', u'ѫ'),\n-    (0x46B, 'V'),\n-    (0x46C, 'M', u'ѭ'),\n-    (0x46D, 'V'),\n-    (0x46E, 'M', u'ѯ'),\n-    (0x46F, 'V'),\n-    (0x470, 'M', u'ѱ'),\n-    (0x471, 'V'),\n-    (0x472, 'M', u'ѳ'),\n-    (0x473, 'V'),\n-    (0x474, 'M', u'ѵ'),\n-    (0x475, 'V'),\n-    (0x476, 'M', u'ѷ'),\n-    (0x477, 'V'),\n-    (0x478, 'M', u'ѹ'),\n-    (0x479, 'V'),\n-    (0x47A, 'M', u'ѻ'),\n-    (0x47B, 'V'),\n-    (0x47C, 'M', u'ѽ'),\n-    (0x47D, 'V'),\n-    (0x47E, 'M', u'ѿ'),\n-    (0x47F, 'V'),\n-    (0x480, 'M', u'ҁ'),\n-    (0x481, 'V'),\n-    (0x48A, 'M', u'ҋ'),\n-    (0x48B, 'V'),\n-    (0x48C, 'M', u'ҍ'),\n-    (0x48D, 'V'),\n-    (0x48E, 'M', u'ҏ'),\n-    (0x48F, 'V'),\n-    (0x490, 'M', u'ґ'),\n-    (0x491, 'V'),\n-    (0x492, 'M', u'ғ'),\n-    (0x493, 'V'),\n-    (0x494, 'M', u'ҕ'),\n-    (0x495, 'V'),\n-    (0x496, 'M', u'җ'),\n-    (0x497, 'V'),\n-    (0x498, 'M', u'ҙ'),\n-    (0x499, 'V'),\n-    (0x49A, 'M', u'қ'),\n-    (0x49B, 'V'),\n-    (0x49C, 'M', u'ҝ'),\n-    (0x49D, 'V'),\n-    (0x49E, 'M', u'ҟ'),\n-    ]\n-\n-def _seg_8():\n-    return [\n-    (0x49F, 'V'),\n-    (0x4A0, 'M', u'ҡ'),\n-    (0x4A1, 'V'),\n-    (0x4A2, 'M', u'ң'),\n-    (0x4A3, 'V'),\n-    (0x4A4, 'M', u'ҥ'),\n-    (0x4A5, 'V'),\n-    (0x4A6, 'M', u'ҧ'),\n-    (0x4A7, 'V'),\n-    (0x4A8, 'M', u'ҩ'),\n-    (0x4A9, 'V'),\n-    (0x4AA, 'M', u'ҫ'),\n-    (0x4AB, 'V'),\n-    (0x4AC, 'M', u'ҭ'),\n-    (0x4AD, 'V'),\n-    (0x4AE, 'M', u'ү'),\n-    (0x4AF, 'V'),\n-    (0x4B0, 'M', u'ұ'),\n-    (0x4B1, 'V'),\n-    (0x4B2, 'M', u'ҳ'),\n-    (0x4B3, 'V'),\n-    (0x4B4, 'M', u'ҵ'),\n-    (0x4B5, 'V'),\n-    (0x4B6, 'M', u'ҷ'),\n-    (0x4B7, 'V'),\n-    (0x4B8, 'M', u'ҹ'),\n-    (0x4B9, 'V'),\n-    (0x4BA, 'M', u'һ'),\n-    (0x4BB, 'V'),\n-    (0x4BC, 'M', u'ҽ'),\n-    (0x4BD, 'V'),\n-    (0x4BE, 'M', u'ҿ'),\n-    (0x4BF, 'V'),\n-    (0x4C0, 'X'),\n-    (0x4C1, 'M', u'ӂ'),\n-    (0x4C2, 'V'),\n-    (0x4C3, 'M', u'ӄ'),\n-    (0x4C4, 'V'),\n-    (0x4C5, 'M', u'ӆ'),\n-    (0x4C6, 'V'),\n-    (0x4C7, 'M', u'ӈ'),\n-    (0x4C8, 'V'),\n-    (0x4C9, 'M', u'ӊ'),\n-    (0x4CA, 'V'),\n-    (0x4CB, 'M', u'ӌ'),\n-    (0x4CC, 'V'),\n-    (0x4CD, 'M', u'ӎ'),\n-    (0x4CE, 'V'),\n-    (0x4D0, 'M', u'ӑ'),\n-    (0x4D1, 'V'),\n-    (0x4D2, 'M', u'ӓ'),\n-    (0x4D3, 'V'),\n-    (0x4D4, 'M', u'ӕ'),\n-    (0x4D5, 'V'),\n-    (0x4D6, 'M', u'ӗ'),\n-    (0x4D7, 'V'),\n-    (0x4D8, 'M', u'ә'),\n-    (0x4D9, 'V'),\n-    (0x4DA, 'M', u'ӛ'),\n-    (0x4DB, 'V'),\n-    (0x4DC, 'M', u'ӝ'),\n-    (0x4DD, 'V'),\n-    (0x4DE, 'M', u'ӟ'),\n-    (0x4DF, 'V'),\n-    (0x4E0, 'M', u'ӡ'),\n-    (0x4E1, 'V'),\n-    (0x4E2, 'M', u'ӣ'),\n-    (0x4E3, 'V'),\n-    (0x4E4, 'M', u'ӥ'),\n-    (0x4E5, 'V'),\n-    (0x4E6, 'M', u'ӧ'),\n-    (0x4E7, 'V'),\n-    (0x4E8, 'M', u'ө'),\n-    (0x4E9, 'V'),\n-    (0x4EA, 'M', u'ӫ'),\n-    (0x4EB, 'V'),\n-    (0x4EC, 'M', u'ӭ'),\n-    (0x4ED, 'V'),\n-    (0x4EE, 'M', u'ӯ'),\n-    (0x4EF, 'V'),\n-    (0x4F0, 'M', u'ӱ'),\n-    (0x4F1, 'V'),\n-    (0x4F2, 'M', u'ӳ'),\n-    (0x4F3, 'V'),\n-    (0x4F4, 'M', u'ӵ'),\n-    (0x4F5, 'V'),\n-    (0x4F6, 'M', u'ӷ'),\n-    (0x4F7, 'V'),\n-    (0x4F8, 'M', u'ӹ'),\n-    (0x4F9, 'V'),\n-    (0x4FA, 'M', u'ӻ'),\n-    (0x4FB, 'V'),\n-    (0x4FC, 'M', u'ӽ'),\n-    (0x4FD, 'V'),\n-    (0x4FE, 'M', u'ӿ'),\n-    (0x4FF, 'V'),\n-    (0x500, 'M', u'ԁ'),\n-    (0x501, 'V'),\n-    (0x502, 'M', u'ԃ'),\n-    (0x503, 'V'),\n-    ]\n-\n-def _seg_9():\n-    return [\n-    (0x504, 'M', u'ԅ'),\n-    (0x505, 'V'),\n-    (0x506, 'M', u'ԇ'),\n-    (0x507, 'V'),\n-    (0x508, 'M', u'ԉ'),\n-    (0x509, 'V'),\n-    (0x50A, 'M', u'ԋ'),\n-    (0x50B, 'V'),\n-    (0x50C, 'M', u'ԍ'),\n-    (0x50D, 'V'),\n-    (0x50E, 'M', u'ԏ'),\n-    (0x50F, 'V'),\n-    (0x510, 'M', u'ԑ'),\n-    (0x511, 'V'),\n-    (0x512, 'M', u'ԓ'),\n-    (0x513, 'V'),\n-    (0x514, 'M', u'ԕ'),\n-    (0x515, 'V'),\n-    (0x516, 'M', u'ԗ'),\n-    (0x517, 'V'),\n-    (0x518, 'M', u'ԙ'),\n-    (0x519, 'V'),\n-    (0x51A, 'M', u'ԛ'),\n-    (0x51B, 'V'),\n-    (0x51C, 'M', u'ԝ'),\n-    (0x51D, 'V'),\n-    (0x51E, 'M', u'ԟ'),\n-    (0x51F, 'V'),\n-    (0x520, 'M', u'ԡ'),\n-    (0x521, 'V'),\n-    (0x522, 'M', u'ԣ'),\n-    (0x523, 'V'),\n-    (0x524, 'M', u'ԥ'),\n-    (0x525, 'V'),\n-    (0x526, 'M', u'ԧ'),\n-    (0x527, 'V'),\n-    (0x528, 'X'),\n-    (0x531, 'M', u'ա'),\n-    (0x532, 'M', u'բ'),\n-    (0x533, 'M', u'գ'),\n-    (0x534, 'M', u'դ'),\n-    (0x535, 'M', u'ե'),\n-    (0x536, 'M', u'զ'),\n-    (0x537, 'M', u'է'),\n-    (0x538, 'M', u'ը'),\n-    (0x539, 'M', u'թ'),\n-    (0x53A, 'M', u'ժ'),\n-    (0x53B, 'M', u'ի'),\n-    (0x53C, 'M', u'լ'),\n-    (0x53D, 'M', u'խ'),\n-    (0x53E, 'M', u'ծ'),\n-    (0x53F, 'M', u'կ'),\n-    (0x540, 'M', u'հ'),\n-    (0x541, 'M', u'ձ'),\n-    (0x542, 'M', u'ղ'),\n-    (0x543, 'M', u'ճ'),\n-    (0x544, 'M', u'մ'),\n-    (0x545, 'M', u'յ'),\n-    (0x546, 'M', u'ն'),\n-    (0x547, 'M', u'շ'),\n-    (0x548, 'M', u'ո'),\n-    (0x549, 'M', u'չ'),\n-    (0x54A, 'M', u'պ'),\n-    (0x54B, 'M', u'ջ'),\n-    (0x54C, 'M', u'ռ'),\n-    (0x54D, 'M', u'ս'),\n-    (0x54E, 'M', u'վ'),\n-    (0x54F, 'M', u'տ'),\n-    (0x550, 'M', u'ր'),\n-    (0x551, 'M', u'ց'),\n-    (0x552, 'M', u'ւ'),\n-    (0x553, 'M', u'փ'),\n-    (0x554, 'M', u'ք'),\n-    (0x555, 'M', u'օ'),\n-    (0x556, 'M', u'ֆ'),\n-    (0x557, 'X'),\n-    (0x559, 'V'),\n-    (0x560, 'X'),\n-    (0x561, 'V'),\n-    (0x587, 'M', u'եւ'),\n-    (0x588, 'X'),\n-    (0x589, 'V'),\n-    (0x58B, 'X'),\n-    (0x58F, 'V'),\n-    (0x590, 'X'),\n-    (0x591, 'V'),\n-    (0x5C8, 'X'),\n-    (0x5D0, 'V'),\n-    (0x5EB, 'X'),\n-    (0x5F0, 'V'),\n-    (0x5F5, 'X'),\n-    (0x606, 'V'),\n-    (0x61C, 'X'),\n-    (0x61E, 'V'),\n-    (0x675, 'M', u'اٴ'),\n-    (0x676, 'M', u'وٴ'),\n-    (0x677, 'M', u'ۇٴ'),\n-    (0x678, 'M', u'يٴ'),\n-    (0x679, 'V'),\n-    (0x6DD, 'X'),\n-    ]\n-\n-def _seg_10():\n-    return [\n-    (0x6DE, 'V'),\n-    (0x70E, 'X'),\n-    (0x710, 'V'),\n-    (0x74B, 'X'),\n-    (0x74D, 'V'),\n-    (0x7B2, 'X'),\n-    (0x7C0, 'V'),\n-    (0x7FB, 'X'),\n-    (0x800, 'V'),\n-    (0x82E, 'X'),\n-    (0x830, 'V'),\n-    (0x83F, 'X'),\n-    (0x840, 'V'),\n-    (0x85C, 'X'),\n-    (0x85E, 'V'),\n-    (0x85F, 'X'),\n-    (0x8A0, 'V'),\n-    (0x8A1, 'X'),\n-    (0x8A2, 'V'),\n-    (0x8AD, 'X'),\n-    (0x8E4, 'V'),\n-    (0x8FF, 'X'),\n-    (0x900, 'V'),\n-    (0x958, 'M', u'क़'),\n-    (0x959, 'M', u'ख़'),\n-    (0x95A, 'M', u'ग़'),\n-    (0x95B, 'M', u'ज़'),\n-    (0x95C, 'M', u'ड़'),\n-    (0x95D, 'M', u'ढ़'),\n-    (0x95E, 'M', u'फ़'),\n-    (0x95F, 'M', u'य़'),\n-    (0x960, 'V'),\n-    (0x978, 'X'),\n-    (0x979, 'V'),\n-    (0x980, 'X'),\n-    (0x981, 'V'),\n-    (0x984, 'X'),\n-    (0x985, 'V'),\n-    (0x98D, 'X'),\n-    (0x98F, 'V'),\n-    (0x991, 'X'),\n-    (0x993, 'V'),\n-    (0x9A9, 'X'),\n-    (0x9AA, 'V'),\n-    (0x9B1, 'X'),\n-    (0x9B2, 'V'),\n-    (0x9B3, 'X'),\n-    (0x9B6, 'V'),\n-    (0x9BA, 'X'),\n-    (0x9BC, 'V'),\n-    (0x9C5, 'X'),\n-    (0x9C7, 'V'),\n-    (0x9C9, 'X'),\n-    (0x9CB, 'V'),\n-    (0x9CF, 'X'),\n-    (0x9D7, 'V'),\n-    (0x9D8, 'X'),\n-    (0x9DC, 'M', u'ড়'),\n-    (0x9DD, 'M', u'ঢ়'),\n-    (0x9DE, 'X'),\n-    (0x9DF, 'M', u'য়'),\n-    (0x9E0, 'V'),\n-    (0x9E4, 'X'),\n-    (0x9E6, 'V'),\n-    (0x9FC, 'X'),\n-    (0xA01, 'V'),\n-    (0xA04, 'X'),\n-    (0xA05, 'V'),\n-    (0xA0B, 'X'),\n-    (0xA0F, 'V'),\n-    (0xA11, 'X'),\n-    (0xA13, 'V'),\n-    (0xA29, 'X'),\n-    (0xA2A, 'V'),\n-    (0xA31, 'X'),\n-    (0xA32, 'V'),\n-    (0xA33, 'M', u'ਲ਼'),\n-    (0xA34, 'X'),\n-    (0xA35, 'V'),\n-    (0xA36, 'M', u'ਸ਼'),\n-    (0xA37, 'X'),\n-    (0xA38, 'V'),\n-    (0xA3A, 'X'),\n-    (0xA3C, 'V'),\n-    (0xA3D, 'X'),\n-    (0xA3E, 'V'),\n-    (0xA43, 'X'),\n-    (0xA47, 'V'),\n-    (0xA49, 'X'),\n-    (0xA4B, 'V'),\n-    (0xA4E, 'X'),\n-    (0xA51, 'V'),\n-    (0xA52, 'X'),\n-    (0xA59, 'M', u'ਖ਼'),\n-    (0xA5A, 'M', u'ਗ਼'),\n-    (0xA5B, 'M', u'ਜ਼'),\n-    (0xA5C, 'V'),\n-    (0xA5D, 'X'),\n-    (0xA5E, 'M', u'ਫ਼'),\n-    (0xA5F, 'X'),\n-    ]\n-\n-def _seg_11():\n-    return [\n-    (0xA66, 'V'),\n-    (0xA76, 'X'),\n-    (0xA81, 'V'),\n-    (0xA84, 'X'),\n-    (0xA85, 'V'),\n-    (0xA8E, 'X'),\n-    (0xA8F, 'V'),\n-    (0xA92, 'X'),\n-    (0xA93, 'V'),\n-    (0xAA9, 'X'),\n-    (0xAAA, 'V'),\n-    (0xAB1, 'X'),\n-    (0xAB2, 'V'),\n-    (0xAB4, 'X'),\n-    (0xAB5, 'V'),\n-    (0xABA, 'X'),\n-    (0xABC, 'V'),\n-    (0xAC6, 'X'),\n-    (0xAC7, 'V'),\n-    (0xACA, 'X'),\n-    (0xACB, 'V'),\n-    (0xACE, 'X'),\n-    (0xAD0, 'V'),\n-    (0xAD1, 'X'),\n-    (0xAE0, 'V'),\n-    (0xAE4, 'X'),\n-    (0xAE6, 'V'),\n-    (0xAF2, 'X'),\n-    (0xB01, 'V'),\n-    (0xB04, 'X'),\n-    (0xB05, 'V'),\n-    (0xB0D, 'X'),\n-    (0xB0F, 'V'),\n-    (0xB11, 'X'),\n-    (0xB13, 'V'),\n-    (0xB29, 'X'),\n-    (0xB2A, 'V'),\n-    (0xB31, 'X'),\n-    (0xB32, 'V'),\n-    (0xB34, 'X'),\n-    (0xB35, 'V'),\n-    (0xB3A, 'X'),\n-    (0xB3C, 'V'),\n-    (0xB45, 'X'),\n-    (0xB47, 'V'),\n-    (0xB49, 'X'),\n-    (0xB4B, 'V'),\n-    (0xB4E, 'X'),\n-    (0xB56, 'V'),\n-    (0xB58, 'X'),\n-    (0xB5C, 'M', u'ଡ଼'),\n-    (0xB5D, 'M', u'ଢ଼'),\n-    (0xB5E, 'X'),\n-    (0xB5F, 'V'),\n-    (0xB64, 'X'),\n-    (0xB66, 'V'),\n-    (0xB78, 'X'),\n-    (0xB82, 'V'),\n-    (0xB84, 'X'),\n-    (0xB85, 'V'),\n-    (0xB8B, 'X'),\n-    (0xB8E, 'V'),\n-    (0xB91, 'X'),\n-    (0xB92, 'V'),\n-    (0xB96, 'X'),\n-    (0xB99, 'V'),\n-    (0xB9B, 'X'),\n-    (0xB9C, 'V'),\n-    (0xB9D, 'X'),\n-    (0xB9E, 'V'),\n-    (0xBA0, 'X'),\n-    (0xBA3, 'V'),\n-    (0xBA5, 'X'),\n-    (0xBA8, 'V'),\n-    (0xBAB, 'X'),\n-    (0xBAE, 'V'),\n-    (0xBBA, 'X'),\n-    (0xBBE, 'V'),\n-    (0xBC3, 'X'),\n-    (0xBC6, 'V'),\n-    (0xBC9, 'X'),\n-    (0xBCA, 'V'),\n-    (0xBCE, 'X'),\n-    (0xBD0, 'V'),\n-    (0xBD1, 'X'),\n-    (0xBD7, 'V'),\n-    (0xBD8, 'X'),\n-    (0xBE6, 'V'),\n-    (0xBFB, 'X'),\n-    (0xC01, 'V'),\n-    (0xC04, 'X'),\n-    (0xC05, 'V'),\n-    (0xC0D, 'X'),\n-    (0xC0E, 'V'),\n-    (0xC11, 'X'),\n-    (0xC12, 'V'),\n-    (0xC29, 'X'),\n-    (0xC2A, 'V'),\n-    (0xC34, 'X'),\n-    (0xC35, 'V'),\n-    ]\n-\n-def _seg_12():\n-    return [\n-    (0xC3A, 'X'),\n-    (0xC3D, 'V'),\n-    (0xC45, 'X'),\n-    (0xC46, 'V'),\n-    (0xC49, 'X'),\n-    (0xC4A, 'V'),\n-    (0xC4E, 'X'),\n-    (0xC55, 'V'),\n-    (0xC57, 'X'),\n-    (0xC58, 'V'),\n-    (0xC5A, 'X'),\n-    (0xC60, 'V'),\n-    (0xC64, 'X'),\n-    (0xC66, 'V'),\n-    (0xC70, 'X'),\n-    (0xC78, 'V'),\n-    (0xC80, 'X'),\n-    (0xC82, 'V'),\n-    (0xC84, 'X'),\n-    (0xC85, 'V'),\n-    (0xC8D, 'X'),\n-    (0xC8E, 'V'),\n-    (0xC91, 'X'),\n-    (0xC92, 'V'),\n-    (0xCA9, 'X'),\n-    (0xCAA, 'V'),\n-    (0xCB4, 'X'),\n-    (0xCB5, 'V'),\n-    (0xCBA, 'X'),\n-    (0xCBC, 'V'),\n-    (0xCC5, 'X'),\n-    (0xCC6, 'V'),\n-    (0xCC9, 'X'),\n-    (0xCCA, 'V'),\n-    (0xCCE, 'X'),\n-    (0xCD5, 'V'),\n-    (0xCD7, 'X'),\n-    (0xCDE, 'V'),\n-    (0xCDF, 'X'),\n-    (0xCE0, 'V'),\n-    (0xCE4, 'X'),\n-    (0xCE6, 'V'),\n-    (0xCF0, 'X'),\n-    (0xCF1, 'V'),\n-    (0xCF3, 'X'),\n-    (0xD02, 'V'),\n-    (0xD04, 'X'),\n-    (0xD05, 'V'),\n-    (0xD0D, 'X'),\n-    (0xD0E, 'V'),\n-    (0xD11, 'X'),\n-    (0xD12, 'V'),\n-    (0xD3B, 'X'),\n-    (0xD3D, 'V'),\n-    (0xD45, 'X'),\n-    (0xD46, 'V'),\n-    (0xD49, 'X'),\n-    (0xD4A, 'V'),\n-    (0xD4F, 'X'),\n-    (0xD57, 'V'),\n-    (0xD58, 'X'),\n-    (0xD60, 'V'),\n-    (0xD64, 'X'),\n-    (0xD66, 'V'),\n-    (0xD76, 'X'),\n-    (0xD79, 'V'),\n-    (0xD80, 'X'),\n-    (0xD82, 'V'),\n-    (0xD84, 'X'),\n-    (0xD85, 'V'),\n-    (0xD97, 'X'),\n-    (0xD9A, 'V'),\n-    (0xDB2, 'X'),\n-    (0xDB3, 'V'),\n-    (0xDBC, 'X'),\n-    (0xDBD, 'V'),\n-    (0xDBE, 'X'),\n-    (0xDC0, 'V'),\n-    (0xDC7, 'X'),\n-    (0xDCA, 'V'),\n-    (0xDCB, 'X'),\n-    (0xDCF, 'V'),\n-    (0xDD5, 'X'),\n-    (0xDD6, 'V'),\n-    (0xDD7, 'X'),\n-    (0xDD8, 'V'),\n-    (0xDE0, 'X'),\n-    (0xDF2, 'V'),\n-    (0xDF5, 'X'),\n-    (0xE01, 'V'),\n-    (0xE33, 'M', u'ํา'),\n-    (0xE34, 'V'),\n-    (0xE3B, 'X'),\n-    (0xE3F, 'V'),\n-    (0xE5C, 'X'),\n-    (0xE81, 'V'),\n-    (0xE83, 'X'),\n-    (0xE84, 'V'),\n-    (0xE85, 'X'),\n-    (0xE87, 'V'),\n-    ]\n-\n-def _seg_13():\n-    return [\n-    (0xE89, 'X'),\n-    (0xE8A, 'V'),\n-    (0xE8B, 'X'),\n-    (0xE8D, 'V'),\n-    (0xE8E, 'X'),\n-    (0xE94, 'V'),\n-    (0xE98, 'X'),\n-    (0xE99, 'V'),\n-    (0xEA0, 'X'),\n-    (0xEA1, 'V'),\n-    (0xEA4, 'X'),\n-    (0xEA5, 'V'),\n-    (0xEA6, 'X'),\n-    (0xEA7, 'V'),\n-    (0xEA8, 'X'),\n-    (0xEAA, 'V'),\n-    (0xEAC, 'X'),\n-    (0xEAD, 'V'),\n-    (0xEB3, 'M', u'ໍາ'),\n-    (0xEB4, 'V'),\n-    (0xEBA, 'X'),\n-    (0xEBB, 'V'),\n-    (0xEBE, 'X'),\n-    (0xEC0, 'V'),\n-    (0xEC5, 'X'),\n-    (0xEC6, 'V'),\n-    (0xEC7, 'X'),\n-    (0xEC8, 'V'),\n-    (0xECE, 'X'),\n-    (0xED0, 'V'),\n-    (0xEDA, 'X'),\n-    (0xEDC, 'M', u'ຫນ'),\n-    (0xEDD, 'M', u'ຫມ'),\n-    (0xEDE, 'V'),\n-    (0xEE0, 'X'),\n-    (0xF00, 'V'),\n-    (0xF0C, 'M', u'་'),\n-    (0xF0D, 'V'),\n-    (0xF43, 'M', u'གྷ'),\n-    (0xF44, 'V'),\n-    (0xF48, 'X'),\n-    (0xF49, 'V'),\n-    (0xF4D, 'M', u'ཌྷ'),\n-    (0xF4E, 'V'),\n-    (0xF52, 'M', u'དྷ'),\n-    (0xF53, 'V'),\n-    (0xF57, 'M', u'བྷ'),\n-    (0xF58, 'V'),\n-    (0xF5C, 'M', u'ཛྷ'),\n-    (0xF5D, 'V'),\n-    (0xF69, 'M', u'ཀྵ'),\n-    (0xF6A, 'V'),\n-    (0xF6D, 'X'),\n-    (0xF71, 'V'),\n-    (0xF73, 'M', u'ཱི'),\n-    (0xF74, 'V'),\n-    (0xF75, 'M', u'ཱུ'),\n-    (0xF76, 'M', u'ྲྀ'),\n-    (0xF77, 'M', u'ྲཱྀ'),\n-    (0xF78, 'M', u'ླྀ'),\n-    (0xF79, 'M', u'ླཱྀ'),\n-    (0xF7A, 'V'),\n-    (0xF81, 'M', u'ཱྀ'),\n-    (0xF82, 'V'),\n-    (0xF93, 'M', u'ྒྷ'),\n-    (0xF94, 'V'),\n-    (0xF98, 'X'),\n-    (0xF99, 'V'),\n-    (0xF9D, 'M', u'ྜྷ'),\n-    (0xF9E, 'V'),\n-    (0xFA2, 'M', u'ྡྷ'),\n-    (0xFA3, 'V'),\n-    (0xFA7, 'M', u'ྦྷ'),\n-    (0xFA8, 'V'),\n-    (0xFAC, 'M', u'ྫྷ'),\n-    (0xFAD, 'V'),\n-    (0xFB9, 'M', u'ྐྵ'),\n-    (0xFBA, 'V'),\n-    (0xFBD, 'X'),\n-    (0xFBE, 'V'),\n-    (0xFCD, 'X'),\n-    (0xFCE, 'V'),\n-    (0xFDB, 'X'),\n-    (0x1000, 'V'),\n-    (0x10A0, 'X'),\n-    (0x10C7, 'M', u'ⴧ'),\n-    (0x10C8, 'X'),\n-    (0x10CD, 'M', u'ⴭ'),\n-    (0x10CE, 'X'),\n-    (0x10D0, 'V'),\n-    (0x10FC, 'M', u'ნ'),\n-    (0x10FD, 'V'),\n-    (0x115F, 'X'),\n-    (0x1161, 'V'),\n-    (0x1249, 'X'),\n-    (0x124A, 'V'),\n-    (0x124E, 'X'),\n-    (0x1250, 'V'),\n-    (0x1257, 'X'),\n-    (0x1258, 'V'),\n-    ]\n-\n-def _seg_14():\n-    return [\n-    (0x1259, 'X'),\n-    (0x125A, 'V'),\n-    (0x125E, 'X'),\n-    (0x1260, 'V'),\n-    (0x1289, 'X'),\n-    (0x128A, 'V'),\n-    (0x128E, 'X'),\n-    (0x1290, 'V'),\n-    (0x12B1, 'X'),\n-    (0x12B2, 'V'),\n-    (0x12B6, 'X'),\n-    (0x12B8, 'V'),\n-    (0x12BF, 'X'),\n-    (0x12C0, 'V'),\n-    (0x12C1, 'X'),\n-    (0x12C2, 'V'),\n-    (0x12C6, 'X'),\n-    (0x12C8, 'V'),\n-    (0x12D7, 'X'),\n-    (0x12D8, 'V'),\n-    (0x1311, 'X'),\n-    (0x1312, 'V'),\n-    (0x1316, 'X'),\n-    (0x1318, 'V'),\n-    (0x135B, 'X'),\n-    (0x135D, 'V'),\n-    (0x137D, 'X'),\n-    (0x1380, 'V'),\n-    (0x139A, 'X'),\n-    (0x13A0, 'V'),\n-    (0x13F5, 'X'),\n-    (0x1400, 'V'),\n-    (0x1680, 'X'),\n-    (0x1681, 'V'),\n-    (0x169D, 'X'),\n-    (0x16A0, 'V'),\n-    (0x16F1, 'X'),\n-    (0x1700, 'V'),\n-    (0x170D, 'X'),\n-    (0x170E, 'V'),\n-    (0x1715, 'X'),\n-    (0x1720, 'V'),\n-    (0x1737, 'X'),\n-    (0x1740, 'V'),\n-    (0x1754, 'X'),\n-    (0x1760, 'V'),\n-    (0x176D, 'X'),\n-    (0x176E, 'V'),\n-    (0x1771, 'X'),\n-    (0x1772, 'V'),\n-    (0x1774, 'X'),\n-    (0x1780, 'V'),\n-    (0x17B4, 'X'),\n-    (0x17B6, 'V'),\n-    (0x17DE, 'X'),\n-    (0x17E0, 'V'),\n-    (0x17EA, 'X'),\n-    (0x17F0, 'V'),\n-    (0x17FA, 'X'),\n-    (0x1800, 'V'),\n-    (0x1806, 'X'),\n-    (0x1807, 'V'),\n-    (0x180B, 'I'),\n-    (0x180E, 'X'),\n-    (0x1810, 'V'),\n-    (0x181A, 'X'),\n-    (0x1820, 'V'),\n-    (0x1878, 'X'),\n-    (0x1880, 'V'),\n-    (0x18AB, 'X'),\n-    (0x18B0, 'V'),\n-    (0x18F6, 'X'),\n-    (0x1900, 'V'),\n-    (0x191D, 'X'),\n-    (0x1920, 'V'),\n-    (0x192C, 'X'),\n-    (0x1930, 'V'),\n-    (0x193C, 'X'),\n-    (0x1940, 'V'),\n-    (0x1941, 'X'),\n-    (0x1944, 'V'),\n-    (0x196E, 'X'),\n-    (0x1970, 'V'),\n-    (0x1975, 'X'),\n-    (0x1980, 'V'),\n-    (0x19AC, 'X'),\n-    (0x19B0, 'V'),\n-    (0x19CA, 'X'),\n-    (0x19D0, 'V'),\n-    (0x19DB, 'X'),\n-    (0x19DE, 'V'),\n-    (0x1A1C, 'X'),\n-    (0x1A1E, 'V'),\n-    (0x1A5F, 'X'),\n-    (0x1A60, 'V'),\n-    (0x1A7D, 'X'),\n-    (0x1A7F, 'V'),\n-    (0x1A8A, 'X'),\n-    (0x1A90, 'V'),\n-    (0x1A9A, 'X'),\n-    ]\n-\n-def _seg_15():\n-    return [\n-    (0x1AA0, 'V'),\n-    (0x1AAE, 'X'),\n-    (0x1B00, 'V'),\n-    (0x1B4C, 'X'),\n-    (0x1B50, 'V'),\n-    (0x1B7D, 'X'),\n-    (0x1B80, 'V'),\n-    (0x1BF4, 'X'),\n-    (0x1BFC, 'V'),\n-    (0x1C38, 'X'),\n-    (0x1C3B, 'V'),\n-    (0x1C4A, 'X'),\n-    (0x1C4D, 'V'),\n-    (0x1C80, 'X'),\n-    (0x1CC0, 'V'),\n-    (0x1CC8, 'X'),\n-    (0x1CD0, 'V'),\n-    (0x1CF7, 'X'),\n-    (0x1D00, 'V'),\n-    (0x1D2C, 'M', u'a'),\n-    (0x1D2D, 'M', u'æ'),\n-    (0x1D2E, 'M', u'b'),\n-    (0x1D2F, 'V'),\n-    (0x1D30, 'M', u'd'),\n-    (0x1D31, 'M', u'e'),\n-    (0x1D32, 'M', u'ǝ'),\n-    (0x1D33, 'M', u'g'),\n-    (0x1D34, 'M', u'h'),\n-    (0x1D35, 'M', u'i'),\n-    (0x1D36, 'M', u'j'),\n-    (0x1D37, 'M', u'k'),\n-    (0x1D38, 'M', u'l'),\n-    (0x1D39, 'M', u'm'),\n-    (0x1D3A, 'M', u'n'),\n-    (0x1D3B, 'V'),\n-    (0x1D3C, 'M', u'o'),\n-    (0x1D3D, 'M', u'ȣ'),\n-    (0x1D3E, 'M', u'p'),\n-    (0x1D3F, 'M', u'r'),\n-    (0x1D40, 'M', u't'),\n-    (0x1D41, 'M', u'u'),\n-    (0x1D42, 'M', u'w'),\n-    (0x1D43, 'M', u'a'),\n-    (0x1D44, 'M', u'ɐ'),\n-    (0x1D45, 'M', u'ɑ'),\n-    (0x1D46, 'M', u'ᴂ'),\n-    (0x1D47, 'M', u'b'),\n-    (0x1D48, 'M', u'd'),\n-    (0x1D49, 'M', u'e'),\n-    (0x1D4A, 'M', u'ə'),\n-    (0x1D4B, 'M', u'ɛ'),\n-    (0x1D4C, 'M', u'ɜ'),\n-    (0x1D4D, 'M', u'g'),\n-    (0x1D4E, 'V'),\n-    (0x1D4F, 'M', u'k'),\n-    (0x1D50, 'M', u'm'),\n-    (0x1D51, 'M', u'ŋ'),\n-    (0x1D52, 'M', u'o'),\n-    (0x1D53, 'M', u'ɔ'),\n-    (0x1D54, 'M', u'ᴖ'),\n-    (0x1D55, 'M', u'ᴗ'),\n-    (0x1D56, 'M', u'p'),\n-    (0x1D57, 'M', u't'),\n-    (0x1D58, 'M', u'u'),\n-    (0x1D59, 'M', u'ᴝ'),\n-    (0x1D5A, 'M', u'ɯ'),\n-    (0x1D5B, 'M', u'v'),\n-    (0x1D5C, 'M', u'ᴥ'),\n-    (0x1D5D, 'M', u'β'),\n-    (0x1D5E, 'M', u'γ'),\n-    (0x1D5F, 'M', u'δ'),\n-    (0x1D60, 'M', u'φ'),\n-    (0x1D61, 'M', u'χ'),\n-    (0x1D62, 'M', u'i'),\n-    (0x1D63, 'M', u'r'),\n-    (0x1D64, 'M', u'u'),\n-    (0x1D65, 'M', u'v'),\n-    (0x1D66, 'M', u'β'),\n-    (0x1D67, 'M', u'γ'),\n-    (0x1D68, 'M', u'ρ'),\n-    (0x1D69, 'M', u'φ'),\n-    (0x1D6A, 'M', u'χ'),\n-    (0x1D6B, 'V'),\n-    (0x1D78, 'M', u'н'),\n-    (0x1D79, 'V'),\n-    (0x1D9B, 'M', u'ɒ'),\n-    (0x1D9C, 'M', u'c'),\n-    (0x1D9D, 'M', u'ɕ'),\n-    (0x1D9E, 'M', u'ð'),\n-    (0x1D9F, 'M', u'ɜ'),\n-    (0x1DA0, 'M', u'f'),\n-    (0x1DA1, 'M', u'ɟ'),\n-    (0x1DA2, 'M', u'ɡ'),\n-    (0x1DA3, 'M', u'ɥ'),\n-    (0x1DA4, 'M', u'ɨ'),\n-    (0x1DA5, 'M', u'ɩ'),\n-    (0x1DA6, 'M', u'ɪ'),\n-    (0x1DA7, 'M', u'ᵻ'),\n-    (0x1DA8, 'M', u'ʝ'),\n-    (0x1DA9, 'M', u'ɭ'),\n-    ]\n-\n-def _seg_16():\n-    return [\n-    (0x1DAA, 'M', u'ᶅ'),\n-    (0x1DAB, 'M', u'ʟ'),\n-    (0x1DAC, 'M', u'ɱ'),\n-    (0x1DAD, 'M', u'ɰ'),\n-    (0x1DAE, 'M', u'ɲ'),\n-    (0x1DAF, 'M', u'ɳ'),\n-    (0x1DB0, 'M', u'ɴ'),\n-    (0x1DB1, 'M', u'ɵ'),\n-    (0x1DB2, 'M', u'ɸ'),\n-    (0x1DB3, 'M', u'ʂ'),\n-    (0x1DB4, 'M', u'ʃ'),\n-    (0x1DB5, 'M', u'ƫ'),\n-    (0x1DB6, 'M', u'ʉ'),\n-    (0x1DB7, 'M', u'ʊ'),\n-    (0x1DB8, 'M', u'ᴜ'),\n-    (0x1DB9, 'M', u'ʋ'),\n-    (0x1DBA, 'M', u'ʌ'),\n-    (0x1DBB, 'M', u'z'),\n-    (0x1DBC, 'M', u'ʐ'),\n-    (0x1DBD, 'M', u'ʑ'),\n-    (0x1DBE, 'M', u'ʒ'),\n-    (0x1DBF, 'M', u'θ'),\n-    (0x1DC0, 'V'),\n-    (0x1DE7, 'X'),\n-    (0x1DFC, 'V'),\n-    (0x1E00, 'M', u'ḁ'),\n-    (0x1E01, 'V'),\n-    (0x1E02, 'M', u'ḃ'),\n-    (0x1E03, 'V'),\n-    (0x1E04, 'M', u'ḅ'),\n-    (0x1E05, 'V'),\n-    (0x1E06, 'M', u'ḇ'),\n-    (0x1E07, 'V'),\n-    (0x1E08, 'M', u'ḉ'),\n-    (0x1E09, 'V'),\n-    (0x1E0A, 'M', u'ḋ'),\n-    (0x1E0B, 'V'),\n-    (0x1E0C, 'M', u'ḍ'),\n-    (0x1E0D, 'V'),\n-    (0x1E0E, 'M', u'ḏ'),\n-    (0x1E0F, 'V'),\n-    (0x1E10, 'M', u'ḑ'),\n-    (0x1E11, 'V'),\n-    (0x1E12, 'M', u'ḓ'),\n-    (0x1E13, 'V'),\n-    (0x1E14, 'M', u'ḕ'),\n-    (0x1E15, 'V'),\n-    (0x1E16, 'M', u'ḗ'),\n-    (0x1E17, 'V'),\n-    (0x1E18, 'M', u'ḙ'),\n-    (0x1E19, 'V'),\n-    (0x1E1A, 'M', u'ḛ'),\n-    (0x1E1B, 'V'),\n-    (0x1E1C, 'M', u'ḝ'),\n-    (0x1E1D, 'V'),\n-    (0x1E1E, 'M', u'ḟ'),\n-    (0x1E1F, 'V'),\n-    (0x1E20, 'M', u'ḡ'),\n-    (0x1E21, 'V'),\n-    (0x1E22, 'M', u'ḣ'),\n-    (0x1E23, 'V'),\n-    (0x1E24, 'M', u'ḥ'),\n-    (0x1E25, 'V'),\n-    (0x1E26, 'M', u'ḧ'),\n-    (0x1E27, 'V'),\n-    (0x1E28, 'M', u'ḩ'),\n-    (0x1E29, 'V'),\n-    (0x1E2A, 'M', u'ḫ'),\n-    (0x1E2B, 'V'),\n-    (0x1E2C, 'M', u'ḭ'),\n-    (0x1E2D, 'V'),\n-    (0x1E2E, 'M', u'ḯ'),\n-    (0x1E2F, 'V'),\n-    (0x1E30, 'M', u'ḱ'),\n-    (0x1E31, 'V'),\n-    (0x1E32, 'M', u'ḳ'),\n-    (0x1E33, 'V'),\n-    (0x1E34, 'M', u'ḵ'),\n-    (0x1E35, 'V'),\n-    (0x1E36, 'M', u'ḷ'),\n-    (0x1E37, 'V'),\n-    (0x1E38, 'M', u'ḹ'),\n-    (0x1E39, 'V'),\n-    (0x1E3A, 'M', u'ḻ'),\n-    (0x1E3B, 'V'),\n-    (0x1E3C, 'M', u'ḽ'),\n-    (0x1E3D, 'V'),\n-    (0x1E3E, 'M', u'ḿ'),\n-    (0x1E3F, 'V'),\n-    (0x1E40, 'M', u'ṁ'),\n-    (0x1E41, 'V'),\n-    (0x1E42, 'M', u'ṃ'),\n-    (0x1E43, 'V'),\n-    (0x1E44, 'M', u'ṅ'),\n-    (0x1E45, 'V'),\n-    (0x1E46, 'M', u'ṇ'),\n-    (0x1E47, 'V'),\n-    (0x1E48, 'M', u'ṉ'),\n-    (0x1E49, 'V'),\n-    (0x1E4A, 'M', u'ṋ'),\n-    ]\n-\n-def _seg_17():\n-    return [\n-    (0x1E4B, 'V'),\n-    (0x1E4C, 'M', u'ṍ'),\n-    (0x1E4D, 'V'),\n-    (0x1E4E, 'M', u'ṏ'),\n-    (0x1E4F, 'V'),\n-    (0x1E50, 'M', u'ṑ'),\n-    (0x1E51, 'V'),\n-    (0x1E52, 'M', u'ṓ'),\n-    (0x1E53, 'V'),\n-    (0x1E54, 'M', u'ṕ'),\n-    (0x1E55, 'V'),\n-    (0x1E56, 'M', u'ṗ'),\n-    (0x1E57, 'V'),\n-    (0x1E58, 'M', u'ṙ'),\n-    (0x1E59, 'V'),\n-    (0x1E5A, 'M', u'ṛ'),\n-    (0x1E5B, 'V'),\n-    (0x1E5C, 'M', u'ṝ'),\n-    (0x1E5D, 'V'),\n-    (0x1E5E, 'M', u'ṟ'),\n-    (0x1E5F, 'V'),\n-    (0x1E60, 'M', u'ṡ'),\n-    (0x1E61, 'V'),\n-    (0x1E62, 'M', u'ṣ'),\n-    (0x1E63, 'V'),\n-    (0x1E64, 'M', u'ṥ'),\n-    (0x1E65, 'V'),\n-    (0x1E66, 'M', u'ṧ'),\n-    (0x1E67, 'V'),\n-    (0x1E68, 'M', u'ṩ'),\n-    (0x1E69, 'V'),\n-    (0x1E6A, 'M', u'ṫ'),\n-    (0x1E6B, 'V'),\n-    (0x1E6C, 'M', u'ṭ'),\n-    (0x1E6D, 'V'),\n-    (0x1E6E, 'M', u'ṯ'),\n-    (0x1E6F, 'V'),\n-    (0x1E70, 'M', u'ṱ'),\n-    (0x1E71, 'V'),\n-    (0x1E72, 'M', u'ṳ'),\n-    (0x1E73, 'V'),\n-    (0x1E74, 'M', u'ṵ'),\n-    (0x1E75, 'V'),\n-    (0x1E76, 'M', u'ṷ'),\n-    (0x1E77, 'V'),\n-    (0x1E78, 'M', u'ṹ'),\n-    (0x1E79, 'V'),\n-    (0x1E7A, 'M', u'ṻ'),\n-    (0x1E7B, 'V'),\n-    (0x1E7C, 'M', u'ṽ'),\n-    (0x1E7D, 'V'),\n-    (0x1E7E, 'M', u'ṿ'),\n-    (0x1E7F, 'V'),\n-    (0x1E80, 'M', u'ẁ'),\n-    (0x1E81, 'V'),\n-    (0x1E82, 'M', u'ẃ'),\n-    (0x1E83, 'V'),\n-    (0x1E84, 'M', u'ẅ'),\n-    (0x1E85, 'V'),\n-    (0x1E86, 'M', u'ẇ'),\n-    (0x1E87, 'V'),\n-    (0x1E88, 'M', u'ẉ'),\n-    (0x1E89, 'V'),\n-    (0x1E8A, 'M', u'ẋ'),\n-    (0x1E8B, 'V'),\n-    (0x1E8C, 'M', u'ẍ'),\n-    (0x1E8D, 'V'),\n-    (0x1E8E, 'M', u'ẏ'),\n-    (0x1E8F, 'V'),\n-    (0x1E90, 'M', u'ẑ'),\n-    (0x1E91, 'V'),\n-    (0x1E92, 'M', u'ẓ'),\n-    (0x1E93, 'V'),\n-    (0x1E94, 'M', u'ẕ'),\n-    (0x1E95, 'V'),\n-    (0x1E9A, 'M', u'aʾ'),\n-    (0x1E9B, 'M', u'ṡ'),\n-    (0x1E9C, 'V'),\n-    (0x1E9E, 'M', u'ss'),\n-    (0x1E9F, 'V'),\n-    (0x1EA0, 'M', u'ạ'),\n-    (0x1EA1, 'V'),\n-    (0x1EA2, 'M', u'ả'),\n-    (0x1EA3, 'V'),\n-    (0x1EA4, 'M', u'ấ'),\n-    (0x1EA5, 'V'),\n-    (0x1EA6, 'M', u'ầ'),\n-    (0x1EA7, 'V'),\n-    (0x1EA8, 'M', u'ẩ'),\n-    (0x1EA9, 'V'),\n-    (0x1EAA, 'M', u'ẫ'),\n-    (0x1EAB, 'V'),\n-    (0x1EAC, 'M', u'ậ'),\n-    (0x1EAD, 'V'),\n-    (0x1EAE, 'M', u'ắ'),\n-    (0x1EAF, 'V'),\n-    (0x1EB0, 'M', u'ằ'),\n-    (0x1EB1, 'V'),\n-    (0x1EB2, 'M', u'ẳ'),\n-    (0x1EB3, 'V'),\n-    ]\n-\n-def _seg_18():\n-    return [\n-    (0x1EB4, 'M', u'ẵ'),\n-    (0x1EB5, 'V'),\n-    (0x1EB6, 'M', u'ặ'),\n-    (0x1EB7, 'V'),\n-    (0x1EB8, 'M', u'ẹ'),\n-    (0x1EB9, 'V'),\n-    (0x1EBA, 'M', u'ẻ'),\n-    (0x1EBB, 'V'),\n-    (0x1EBC, 'M', u'ẽ'),\n-    (0x1EBD, 'V'),\n-    (0x1EBE, 'M', u'ế'),\n-    (0x1EBF, 'V'),\n-    (0x1EC0, 'M', u'ề'),\n-    (0x1EC1, 'V'),\n-    (0x1EC2, 'M', u'ể'),\n-    (0x1EC3, 'V'),\n-    (0x1EC4, 'M', u'ễ'),\n-    (0x1EC5, 'V'),\n-    (0x1EC6, 'M', u'ệ'),\n-    (0x1EC7, 'V'),\n-    (0x1EC8, 'M', u'ỉ'),\n-    (0x1EC9, 'V'),\n-    (0x1ECA, 'M', u'ị'),\n-    (0x1ECB, 'V'),\n-    (0x1ECC, 'M', u'ọ'),\n-    (0x1ECD, 'V'),\n-    (0x1ECE, 'M', u'ỏ'),\n-    (0x1ECF, 'V'),\n-    (0x1ED0, 'M', u'ố'),\n-    (0x1ED1, 'V'),\n-    (0x1ED2, 'M', u'ồ'),\n-    (0x1ED3, 'V'),\n-    (0x1ED4, 'M', u'ổ'),\n-    (0x1ED5, 'V'),\n-    (0x1ED6, 'M', u'ỗ'),\n-    (0x1ED7, 'V'),\n-    (0x1ED8, 'M', u'ộ'),\n-    (0x1ED9, 'V'),\n-    (0x1EDA, 'M', u'ớ'),\n-    (0x1EDB, 'V'),\n-    (0x1EDC, 'M', u'ờ'),\n-    (0x1EDD, 'V'),\n-    (0x1EDE, 'M', u'ở'),\n-    (0x1EDF, 'V'),\n-    (0x1EE0, 'M', u'ỡ'),\n-    (0x1EE1, 'V'),\n-    (0x1EE2, 'M', u'ợ'),\n-    (0x1EE3, 'V'),\n-    (0x1EE4, 'M', u'ụ'),\n-    (0x1EE5, 'V'),\n-    (0x1EE6, 'M', u'ủ'),\n-    (0x1EE7, 'V'),\n-    (0x1EE8, 'M', u'ứ'),\n-    (0x1EE9, 'V'),\n-    (0x1EEA, 'M', u'ừ'),\n-    (0x1EEB, 'V'),\n-    (0x1EEC, 'M', u'ử'),\n-    (0x1EED, 'V'),\n-    (0x1EEE, 'M', u'ữ'),\n-    (0x1EEF, 'V'),\n-    (0x1EF0, 'M', u'ự'),\n-    (0x1EF1, 'V'),\n-    (0x1EF2, 'M', u'ỳ'),\n-    (0x1EF3, 'V'),\n-    (0x1EF4, 'M', u'ỵ'),\n-    (0x1EF5, 'V'),\n-    (0x1EF6, 'M', u'ỷ'),\n-    (0x1EF7, 'V'),\n-    (0x1EF8, 'M', u'ỹ'),\n-    (0x1EF9, 'V'),\n-    (0x1EFA, 'M', u'ỻ'),\n-    (0x1EFB, 'V'),\n-    (0x1EFC, 'M', u'ỽ'),\n-    (0x1EFD, 'V'),\n-    (0x1EFE, 'M', u'ỿ'),\n-    (0x1EFF, 'V'),\n-    (0x1F08, 'M', u'ἀ'),\n-    (0x1F09, 'M', u'ἁ'),\n-    (0x1F0A, 'M', u'ἂ'),\n-    (0x1F0B, 'M', u'ἃ'),\n-    (0x1F0C, 'M', u'ἄ'),\n-    (0x1F0D, 'M', u'ἅ'),\n-    (0x1F0E, 'M', u'ἆ'),\n-    (0x1F0F, 'M', u'ἇ'),\n-    (0x1F10, 'V'),\n-    (0x1F16, 'X'),\n-    (0x1F18, 'M', u'ἐ'),\n-    (0x1F19, 'M', u'ἑ'),\n-    (0x1F1A, 'M', u'ἒ'),\n-    (0x1F1B, 'M', u'ἓ'),\n-    (0x1F1C, 'M', u'ἔ'),\n-    (0x1F1D, 'M', u'ἕ'),\n-    (0x1F1E, 'X'),\n-    (0x1F20, 'V'),\n-    (0x1F28, 'M', u'ἠ'),\n-    (0x1F29, 'M', u'ἡ'),\n-    (0x1F2A, 'M', u'ἢ'),\n-    (0x1F2B, 'M', u'ἣ'),\n-    (0x1F2C, 'M', u'ἤ'),\n-    (0x1F2D, 'M', u'ἥ'),\n-    ]\n-\n-def _seg_19():\n-    return [\n-    (0x1F2E, 'M', u'ἦ'),\n-    (0x1F2F, 'M', u'ἧ'),\n-    (0x1F30, 'V'),\n-    (0x1F38, 'M', u'ἰ'),\n-    (0x1F39, 'M', u'ἱ'),\n-    (0x1F3A, 'M', u'ἲ'),\n-    (0x1F3B, 'M', u'ἳ'),\n-    (0x1F3C, 'M', u'ἴ'),\n-    (0x1F3D, 'M', u'ἵ'),\n-    (0x1F3E, 'M', u'ἶ'),\n-    (0x1F3F, 'M', u'ἷ'),\n-    (0x1F40, 'V'),\n-    (0x1F46, 'X'),\n-    (0x1F48, 'M', u'ὀ'),\n-    (0x1F49, 'M', u'ὁ'),\n-    (0x1F4A, 'M', u'ὂ'),\n-    (0x1F4B, 'M', u'ὃ'),\n-    (0x1F4C, 'M', u'ὄ'),\n-    (0x1F4D, 'M', u'ὅ'),\n-    (0x1F4E, 'X'),\n-    (0x1F50, 'V'),\n-    (0x1F58, 'X'),\n-    (0x1F59, 'M', u'ὑ'),\n-    (0x1F5A, 'X'),\n-    (0x1F5B, 'M', u'ὓ'),\n-    (0x1F5C, 'X'),\n-    (0x1F5D, 'M', u'ὕ'),\n-    (0x1F5E, 'X'),\n-    (0x1F5F, 'M', u'ὗ'),\n-    (0x1F60, 'V'),\n-    (0x1F68, 'M', u'ὠ'),\n-    (0x1F69, 'M', u'ὡ'),\n-    (0x1F6A, 'M', u'ὢ'),\n-    (0x1F6B, 'M', u'ὣ'),\n-    (0x1F6C, 'M', u'ὤ'),\n-    (0x1F6D, 'M', u'ὥ'),\n-    (0x1F6E, 'M', u'ὦ'),\n-    (0x1F6F, 'M', u'ὧ'),\n-    (0x1F70, 'V'),\n-    (0x1F71, 'M', u'ά'),\n-    (0x1F72, 'V'),\n-    (0x1F73, 'M', u'έ'),\n-    (0x1F74, 'V'),\n-    (0x1F75, 'M', u'ή'),\n-    (0x1F76, 'V'),\n-    (0x1F77, 'M', u'ί'),\n-    (0x1F78, 'V'),\n-    (0x1F79, 'M', u'ό'),\n-    (0x1F7A, 'V'),\n-    (0x1F7B, 'M', u'ύ'),\n-    (0x1F7C, 'V'),\n-    (0x1F7D, 'M', u'ώ'),\n-    (0x1F7E, 'X'),\n-    (0x1F80, 'M', u'ἀι'),\n-    (0x1F81, 'M', u'ἁι'),\n-    (0x1F82, 'M', u'ἂι'),\n-    (0x1F83, 'M', u'ἃι'),\n-    (0x1F84, 'M', u'ἄι'),\n-    (0x1F85, 'M', u'ἅι'),\n-    (0x1F86, 'M', u'ἆι'),\n-    (0x1F87, 'M', u'ἇι'),\n-    (0x1F88, 'M', u'ἀι'),\n-    (0x1F89, 'M', u'ἁι'),\n-    (0x1F8A, 'M', u'ἂι'),\n-    (0x1F8B, 'M', u'ἃι'),\n-    (0x1F8C, 'M', u'ἄι'),\n-    (0x1F8D, 'M', u'ἅι'),\n-    (0x1F8E, 'M', u'ἆι'),\n-    (0x1F8F, 'M', u'ἇι'),\n-    (0x1F90, 'M', u'ἠι'),\n-    (0x1F91, 'M', u'ἡι'),\n-    (0x1F92, 'M', u'ἢι'),\n-    (0x1F93, 'M', u'ἣι'),\n-    (0x1F94, 'M', u'ἤι'),\n-    (0x1F95, 'M', u'ἥι'),\n-    (0x1F96, 'M', u'ἦι'),\n-    (0x1F97, 'M', u'ἧι'),\n-    (0x1F98, 'M', u'ἠι'),\n-    (0x1F99, 'M', u'ἡι'),\n-    (0x1F9A, 'M', u'ἢι'),\n-    (0x1F9B, 'M', u'ἣι'),\n-    (0x1F9C, 'M', u'ἤι'),\n-    (0x1F9D, 'M', u'ἥι'),\n-    (0x1F9E, 'M', u'ἦι'),\n-    (0x1F9F, 'M', u'ἧι'),\n-    (0x1FA0, 'M', u'ὠι'),\n-    (0x1FA1, 'M', u'ὡι'),\n-    (0x1FA2, 'M', u'ὢι'),\n-    (0x1FA3, 'M', u'ὣι'),\n-    (0x1FA4, 'M', u'ὤι'),\n-    (0x1FA5, 'M', u'ὥι'),\n-    (0x1FA6, 'M', u'ὦι'),\n-    (0x1FA7, 'M', u'ὧι'),\n-    (0x1FA8, 'M', u'ὠι'),\n-    (0x1FA9, 'M', u'ὡι'),\n-    (0x1FAA, 'M', u'ὢι'),\n-    (0x1FAB, 'M', u'ὣι'),\n-    (0x1FAC, 'M', u'ὤι'),\n-    (0x1FAD, 'M', u'ὥι'),\n-    (0x1FAE, 'M', u'ὦι'),\n-    ]\n-\n-def _seg_20():\n-    return [\n-    (0x1FAF, 'M', u'ὧι'),\n-    (0x1FB0, 'V'),\n-    (0x1FB2, 'M', u'ὰι'),\n-    (0x1FB3, 'M', u'αι'),\n-    (0x1FB4, 'M', u'άι'),\n-    (0x1FB5, 'X'),\n-    (0x1FB6, 'V'),\n-    (0x1FB7, 'M', u'ᾶι'),\n-    (0x1FB8, 'M', u'ᾰ'),\n-    (0x1FB9, 'M', u'ᾱ'),\n-    (0x1FBA, 'M', u'ὰ'),\n-    (0x1FBB, 'M', u'ά'),\n-    (0x1FBC, 'M', u'αι'),\n-    (0x1FBD, '3', u' ̓'),\n-    (0x1FBE, 'M', u'ι'),\n-    (0x1FBF, '3', u' ̓'),\n-    (0x1FC0, '3', u' ͂'),\n-    (0x1FC1, '3', u' ̈͂'),\n-    (0x1FC2, 'M', u'ὴι'),\n-    (0x1FC3, 'M', u'ηι'),\n-    (0x1FC4, 'M', u'ήι'),\n-    (0x1FC5, 'X'),\n-    (0x1FC6, 'V'),\n-    (0x1FC7, 'M', u'ῆι'),\n-    (0x1FC8, 'M', u'ὲ'),\n-    (0x1FC9, 'M', u'έ'),\n-    (0x1FCA, 'M', u'ὴ'),\n-    (0x1FCB, 'M', u'ή'),\n-    (0x1FCC, 'M', u'ηι'),\n-    (0x1FCD, '3', u' ̓̀'),\n-    (0x1FCE, '3', u' ̓́'),\n-    (0x1FCF, '3', u' ̓͂'),\n-    (0x1FD0, 'V'),\n-    (0x1FD3, 'M', u'ΐ'),\n-    (0x1FD4, 'X'),\n-    (0x1FD6, 'V'),\n-    (0x1FD8, 'M', u'ῐ'),\n-    (0x1FD9, 'M', u'ῑ'),\n-    (0x1FDA, 'M', u'ὶ'),\n-    (0x1FDB, 'M', u'ί'),\n-    (0x1FDC, 'X'),\n-    (0x1FDD, '3', u' ̔̀'),\n-    (0x1FDE, '3', u' ̔́'),\n-    (0x1FDF, '3', u' ̔͂'),\n-    (0x1FE0, 'V'),\n-    (0x1FE3, 'M', u'ΰ'),\n-    (0x1FE4, 'V'),\n-    (0x1FE8, 'M', u'ῠ'),\n-    (0x1FE9, 'M', u'ῡ'),\n-    (0x1FEA, 'M', u'ὺ'),\n-    (0x1FEB, 'M', u'ύ'),\n-    (0x1FEC, 'M', u'ῥ'),\n-    (0x1FED, '3', u' ̈̀'),\n-    (0x1FEE, '3', u' ̈́'),\n-    (0x1FEF, '3', u'`'),\n-    (0x1FF0, 'X'),\n-    (0x1FF2, 'M', u'ὼι'),\n-    (0x1FF3, 'M', u'ωι'),\n-    (0x1FF4, 'M', u'ώι'),\n-    (0x1FF5, 'X'),\n-    (0x1FF6, 'V'),\n-    (0x1FF7, 'M', u'ῶι'),\n-    (0x1FF8, 'M', u'ὸ'),\n-    (0x1FF9, 'M', u'ό'),\n-    (0x1FFA, 'M', u'ὼ'),\n-    (0x1FFB, 'M', u'ώ'),\n-    (0x1FFC, 'M', u'ωι'),\n-    (0x1FFD, '3', u' ́'),\n-    (0x1FFE, '3', u' ̔'),\n-    (0x1FFF, 'X'),\n-    (0x2000, '3', u' '),\n-    (0x200B, 'I'),\n-    (0x200C, 'D', u''),\n-    (0x200E, 'X'),\n-    (0x2010, 'V'),\n-    (0x2011, 'M', u'‐'),\n-    (0x2012, 'V'),\n-    (0x2017, '3', u' ̳'),\n-    (0x2018, 'V'),\n-    (0x2024, 'X'),\n-    (0x2027, 'V'),\n-    (0x2028, 'X'),\n-    (0x202F, '3', u' '),\n-    (0x2030, 'V'),\n-    (0x2033, 'M', u'′′'),\n-    (0x2034, 'M', u'′′′'),\n-    (0x2035, 'V'),\n-    (0x2036, 'M', u'‵‵'),\n-    (0x2037, 'M', u'‵‵‵'),\n-    (0x2038, 'V'),\n-    (0x203C, '3', u'!!'),\n-    (0x203D, 'V'),\n-    (0x203E, '3', u' ̅'),\n-    (0x203F, 'V'),\n-    (0x2047, '3', u'??'),\n-    (0x2048, '3', u'?!'),\n-    (0x2049, '3', u'!?'),\n-    (0x204A, 'V'),\n-    (0x2057, 'M', u'′′′′'),\n-    (0x2058, 'V'),\n-    ]\n-\n-def _seg_21():\n-    return [\n-    (0x205F, '3', u' '),\n-    (0x2060, 'I'),\n-    (0x2061, 'X'),\n-    (0x2064, 'I'),\n-    (0x2065, 'X'),\n-    (0x2070, 'M', u'0'),\n-    (0x2071, 'M', u'i'),\n-    (0x2072, 'X'),\n-    (0x2074, 'M', u'4'),\n-    (0x2075, 'M', u'5'),\n-    (0x2076, 'M', u'6'),\n-    (0x2077, 'M', u'7'),\n-    (0x2078, 'M', u'8'),\n-    (0x2079, 'M', u'9'),\n-    (0x207A, '3', u'+'),\n-    (0x207B, 'M', u'−'),\n-    (0x207C, '3', u'='),\n-    (0x207D, '3', u'('),\n-    (0x207E, '3', u')'),\n-    (0x207F, 'M', u'n'),\n-    (0x2080, 'M', u'0'),\n-    (0x2081, 'M', u'1'),\n-    (0x2082, 'M', u'2'),\n-    (0x2083, 'M', u'3'),\n-    (0x2084, 'M', u'4'),\n-    (0x2085, 'M', u'5'),\n-    (0x2086, 'M', u'6'),\n-    (0x2087, 'M', u'7'),\n-    (0x2088, 'M', u'8'),\n-    (0x2089, 'M', u'9'),\n-    (0x208A, '3', u'+'),\n-    (0x208B, 'M', u'−'),\n-    (0x208C, '3', u'='),\n-    (0x208D, '3', u'('),\n-    (0x208E, '3', u')'),\n-    (0x208F, 'X'),\n-    (0x2090, 'M', u'a'),\n-    (0x2091, 'M', u'e'),\n-    (0x2092, 'M', u'o'),\n-    (0x2093, 'M', u'x'),\n-    (0x2094, 'M', u'ə'),\n-    (0x2095, 'M', u'h'),\n-    (0x2096, 'M', u'k'),\n-    (0x2097, 'M', u'l'),\n-    (0x2098, 'M', u'm'),\n-    (0x2099, 'M', u'n'),\n-    (0x209A, 'M', u'p'),\n-    (0x209B, 'M', u's'),\n-    (0x209C, 'M', u't'),\n-    (0x209D, 'X'),\n-    (0x20A0, 'V'),\n-    (0x20A8, 'M', u'rs'),\n-    (0x20A9, 'V'),\n-    (0x20BB, 'X'),\n-    (0x20D0, 'V'),\n-    (0x20F1, 'X'),\n-    (0x2100, '3', u'a/c'),\n-    (0x2101, '3', u'a/s'),\n-    (0x2102, 'M', u'c'),\n-    (0x2103, 'M', u'°c'),\n-    (0x2104, 'V'),\n-    (0x2105, '3', u'c/o'),\n-    (0x2106, '3', u'c/u'),\n-    (0x2107, 'M', u'ɛ'),\n-    (0x2108, 'V'),\n-    (0x2109, 'M', u'°f'),\n-    (0x210A, 'M', u'g'),\n-    (0x210B, 'M', u'h'),\n-    (0x210F, 'M', u'ħ'),\n-    (0x2110, 'M', u'i'),\n-    (0x2112, 'M', u'l'),\n-    (0x2114, 'V'),\n-    (0x2115, 'M', u'n'),\n-    (0x2116, 'M', u'no'),\n-    (0x2117, 'V'),\n-    (0x2119, 'M', u'p'),\n-    (0x211A, 'M', u'q'),\n-    (0x211B, 'M', u'r'),\n-    (0x211E, 'V'),\n-    (0x2120, 'M', u'sm'),\n-    (0x2121, 'M', u'tel'),\n-    (0x2122, 'M', u'tm'),\n-    (0x2123, 'V'),\n-    (0x2124, 'M', u'z'),\n-    (0x2125, 'V'),\n-    (0x2126, 'M', u'ω'),\n-    (0x2127, 'V'),\n-    (0x2128, 'M', u'z'),\n-    (0x2129, 'V'),\n-    (0x212A, 'M', u'k'),\n-    (0x212B, 'M', u'å'),\n-    (0x212C, 'M', u'b'),\n-    (0x212D, 'M', u'c'),\n-    (0x212E, 'V'),\n-    (0x212F, 'M', u'e'),\n-    (0x2131, 'M', u'f'),\n-    (0x2132, 'X'),\n-    (0x2133, 'M', u'm'),\n-    (0x2134, 'M', u'o'),\n-    (0x2135, 'M', u'א'),\n-    ]\n-\n-def _seg_22():\n-    return [\n-    (0x2136, 'M', u'ב'),\n-    (0x2137, 'M', u'ג'),\n-    (0x2138, 'M', u'ד'),\n-    (0x2139, 'M', u'i'),\n-    (0x213A, 'V'),\n-    (0x213B, 'M', u'fax'),\n-    (0x213C, 'M', u'π'),\n-    (0x213D, 'M', u'γ'),\n-    (0x213F, 'M', u'π'),\n-    (0x2140, 'M', u'∑'),\n-    (0x2141, 'V'),\n-    (0x2145, 'M', u'd'),\n-    (0x2147, 'M', u'e'),\n-    (0x2148, 'M', u'i'),\n-    (0x2149, 'M', u'j'),\n-    (0x214A, 'V'),\n-    (0x2150, 'M', u'1⁄7'),\n-    (0x2151, 'M', u'1⁄9'),\n-    (0x2152, 'M', u'1⁄10'),\n-    (0x2153, 'M', u'1⁄3'),\n-    (0x2154, 'M', u'2⁄3'),\n-    (0x2155, 'M', u'1⁄5'),\n-    (0x2156, 'M', u'2⁄5'),\n-    (0x2157, 'M', u'3⁄5'),\n-    (0x2158, 'M', u'4⁄5'),\n-    (0x2159, 'M', u'1⁄6'),\n-    (0x215A, 'M', u'5⁄6'),\n-    (0x215B, 'M', u'1⁄8'),\n-    (0x215C, 'M', u'3⁄8'),\n-    (0x215D, 'M', u'5⁄8'),\n-    (0x215E, 'M', u'7⁄8'),\n-    (0x215F, 'M', u'1⁄'),\n-    (0x2160, 'M', u'i'),\n-    (0x2161, 'M', u'ii'),\n-    (0x2162, 'M', u'iii'),\n-    (0x2163, 'M', u'iv'),\n-    (0x2164, 'M', u'v'),\n-    (0x2165, 'M', u'vi'),\n-    (0x2166, 'M', u'vii'),\n-    (0x2167, 'M', u'viii'),\n-    (0x2168, 'M', u'ix'),\n-    (0x2169, 'M', u'x'),\n-    (0x216A, 'M', u'xi'),\n-    (0x216B, 'M', u'xii'),\n-    (0x216C, 'M', u'l'),\n-    (0x216D, 'M', u'c'),\n-    (0x216E, 'M', u'd'),\n-    (0x216F, 'M', u'm'),\n-    (0x2170, 'M', u'i'),\n-    (0x2171, 'M', u'ii'),\n-    (0x2172, 'M', u'iii'),\n-    (0x2173, 'M', u'iv'),\n-    (0x2174, 'M', u'v'),\n-    (0x2175, 'M', u'vi'),\n-    (0x2176, 'M', u'vii'),\n-    (0x2177, 'M', u'viii'),\n-    (0x2178, 'M', u'ix'),\n-    (0x2179, 'M', u'x'),\n-    (0x217A, 'M', u'xi'),\n-    (0x217B, 'M', u'xii'),\n-    (0x217C, 'M', u'l'),\n-    (0x217D, 'M', u'c'),\n-    (0x217E, 'M', u'd'),\n-    (0x217F, 'M', u'm'),\n-    (0x2180, 'V'),\n-    (0x2183, 'X'),\n-    (0x2184, 'V'),\n-    (0x2189, 'M', u'0⁄3'),\n-    (0x218A, 'X'),\n-    (0x2190, 'V'),\n-    (0x222C, 'M', u'∫∫'),\n-    (0x222D, 'M', u'∫∫∫'),\n-    (0x222E, 'V'),\n-    (0x222F, 'M', u'∮∮'),\n-    (0x2230, 'M', u'∮∮∮'),\n-    (0x2231, 'V'),\n-    (0x2260, '3'),\n-    (0x2261, 'V'),\n-    (0x226E, '3'),\n-    (0x2270, 'V'),\n-    (0x2329, 'M', u'〈'),\n-    (0x232A, 'M', u'〉'),\n-    (0x232B, 'V'),\n-    (0x23F4, 'X'),\n-    (0x2400, 'V'),\n-    (0x2427, 'X'),\n-    (0x2440, 'V'),\n-    (0x244B, 'X'),\n-    (0x2460, 'M', u'1'),\n-    (0x2461, 'M', u'2'),\n-    (0x2462, 'M', u'3'),\n-    (0x2463, 'M', u'4'),\n-    (0x2464, 'M', u'5'),\n-    (0x2465, 'M', u'6'),\n-    (0x2466, 'M', u'7'),\n-    (0x2467, 'M', u'8'),\n-    (0x2468, 'M', u'9'),\n-    (0x2469, 'M', u'10'),\n-    (0x246A, 'M', u'11'),\n-    (0x246B, 'M', u'12'),\n-    ]\n-\n-def _seg_23():\n-    return [\n-    (0x246C, 'M', u'13'),\n-    (0x246D, 'M', u'14'),\n-    (0x246E, 'M', u'15'),\n-    (0x246F, 'M', u'16'),\n-    (0x2470, 'M', u'17'),\n-    (0x2471, 'M', u'18'),\n-    (0x2472, 'M', u'19'),\n-    (0x2473, 'M', u'20'),\n-    (0x2474, '3', u'(1)'),\n-    (0x2475, '3', u'(2)'),\n-    (0x2476, '3', u'(3)'),\n-    (0x2477, '3', u'(4)'),\n-    (0x2478, '3', u'(5)'),\n-    (0x2479, '3', u'(6)'),\n-    (0x247A, '3', u'(7)'),\n-    (0x247B, '3', u'(8)'),\n-    (0x247C, '3', u'(9)'),\n-    (0x247D, '3', u'(10)'),\n-    (0x247E, '3', u'(11)'),\n-    (0x247F, '3', u'(12)'),\n-    (0x2480, '3', u'(13)'),\n-    (0x2481, '3', u'(14)'),\n-    (0x2482, '3', u'(15)'),\n-    (0x2483, '3', u'(16)'),\n-    (0x2484, '3', u'(17)'),\n-    (0x2485, '3', u'(18)'),\n-    (0x2486, '3', u'(19)'),\n-    (0x2487, '3', u'(20)'),\n-    (0x2488, 'X'),\n-    (0x249C, '3', u'(a)'),\n-    (0x249D, '3', u'(b)'),\n-    (0x249E, '3', u'(c)'),\n-    (0x249F, '3', u'(d)'),\n-    (0x24A0, '3', u'(e)'),\n-    (0x24A1, '3', u'(f)'),\n-    (0x24A2, '3', u'(g)'),\n-    (0x24A3, '3', u'(h)'),\n-    (0x24A4, '3', u'(i)'),\n-    (0x24A5, '3', u'(j)'),\n-    (0x24A6, '3', u'(k)'),\n-    (0x24A7, '3', u'(l)'),\n-    (0x24A8, '3', u'(m)'),\n-    (0x24A9, '3', u'(n)'),\n-    (0x24AA, '3', u'(o)'),\n-    (0x24AB, '3', u'(p)'),\n-    (0x24AC, '3', u'(q)'),\n-    (0x24AD, '3', u'(r)'),\n-    (0x24AE, '3', u'(s)'),\n-    (0x24AF, '3', u'(t)'),\n-    (0x24B0, '3', u'(u)'),\n-    (0x24B1, '3', u'(v)'),\n-    (0x24B2, '3', u'(w)'),\n-    (0x24B3, '3', u'(x)'),\n-    (0x24B4, '3', u'(y)'),\n-    (0x24B5, '3', u'(z)'),\n-    (0x24B6, 'M', u'a'),\n-    (0x24B7, 'M', u'b'),\n-    (0x24B8, 'M', u'c'),\n-    (0x24B9, 'M', u'd'),\n-    (0x24BA, 'M', u'e'),\n-    (0x24BB, 'M', u'f'),\n-    (0x24BC, 'M', u'g'),\n-    (0x24BD, 'M', u'h'),\n-    (0x24BE, 'M', u'i'),\n-    (0x24BF, 'M', u'j'),\n-    (0x24C0, 'M', u'k'),\n-    (0x24C1, 'M', u'l'),\n-    (0x24C2, 'M', u'm'),\n-    (0x24C3, 'M', u'n'),\n-    (0x24C4, 'M', u'o'),\n-    (0x24C5, 'M', u'p'),\n-    (0x24C6, 'M', u'q'),\n-    (0x24C7, 'M', u'r'),\n-    (0x24C8, 'M', u's'),\n-    (0x24C9, 'M', u't'),\n-    (0x24CA, 'M', u'u'),\n-    (0x24CB, 'M', u'v'),\n-    (0x24CC, 'M', u'w'),\n-    (0x24CD, 'M', u'x'),\n-    (0x24CE, 'M', u'y'),\n-    (0x24CF, 'M', u'z'),\n-    (0x24D0, 'M', u'a'),\n-    (0x24D1, 'M', u'b'),\n-    (0x24D2, 'M', u'c'),\n-    (0x24D3, 'M', u'd'),\n-    (0x24D4, 'M', u'e'),\n-    (0x24D5, 'M', u'f'),\n-    (0x24D6, 'M', u'g'),\n-    (0x24D7, 'M', u'h'),\n-    (0x24D8, 'M', u'i'),\n-    (0x24D9, 'M', u'j'),\n-    (0x24DA, 'M', u'k'),\n-    (0x24DB, 'M', u'l'),\n-    (0x24DC, 'M', u'm'),\n-    (0x24DD, 'M', u'n'),\n-    (0x24DE, 'M', u'o'),\n-    (0x24DF, 'M', u'p'),\n-    (0x24E0, 'M', u'q'),\n-    (0x24E1, 'M', u'r'),\n-    (0x24E2, 'M', u's'),\n-    ]\n-\n-def _seg_24():\n-    return [\n-    (0x24E3, 'M', u't'),\n-    (0x24E4, 'M', u'u'),\n-    (0x24E5, 'M', u'v'),\n-    (0x24E6, 'M', u'w'),\n-    (0x24E7, 'M', u'x'),\n-    (0x24E8, 'M', u'y'),\n-    (0x24E9, 'M', u'z'),\n-    (0x24EA, 'M', u'0'),\n-    (0x24EB, 'V'),\n-    (0x2700, 'X'),\n-    (0x2701, 'V'),\n-    (0x2A0C, 'M', u'∫∫∫∫'),\n-    (0x2A0D, 'V'),\n-    (0x2A74, '3', u'::='),\n-    (0x2A75, '3', u'=='),\n-    (0x2A76, '3', u'==='),\n-    (0x2A77, 'V'),\n-    (0x2ADC, 'M', u'⫝̸'),\n-    (0x2ADD, 'V'),\n-    (0x2B4D, 'X'),\n-    (0x2B50, 'V'),\n-    (0x2B5A, 'X'),\n-    (0x2C00, 'M', u'ⰰ'),\n-    (0x2C01, 'M', u'ⰱ'),\n-    (0x2C02, 'M', u'ⰲ'),\n-    (0x2C03, 'M', u'ⰳ'),\n-    (0x2C04, 'M', u'ⰴ'),\n-    (0x2C05, 'M', u'ⰵ'),\n-    (0x2C06, 'M', u'ⰶ'),\n-    (0x2C07, 'M', u'ⰷ'),\n-    (0x2C08, 'M', u'ⰸ'),\n-    (0x2C09, 'M', u'ⰹ'),\n-    (0x2C0A, 'M', u'ⰺ'),\n-    (0x2C0B, 'M', u'ⰻ'),\n-    (0x2C0C, 'M', u'ⰼ'),\n-    (0x2C0D, 'M', u'ⰽ'),\n-    (0x2C0E, 'M', u'ⰾ'),\n-    (0x2C0F, 'M', u'ⰿ'),\n-    (0x2C10, 'M', u'ⱀ'),\n-    (0x2C11, 'M', u'ⱁ'),\n-    (0x2C12, 'M', u'ⱂ'),\n-    (0x2C13, 'M', u'ⱃ'),\n-    (0x2C14, 'M', u'ⱄ'),\n-    (0x2C15, 'M', u'ⱅ'),\n-    (0x2C16, 'M', u'ⱆ'),\n-    (0x2C17, 'M', u'ⱇ'),\n-    (0x2C18, 'M', u'ⱈ'),\n-    (0x2C19, 'M', u'ⱉ'),\n-    (0x2C1A, 'M', u'ⱊ'),\n-    (0x2C1B, 'M', u'ⱋ'),\n-    (0x2C1C, 'M', u'ⱌ'),\n-    (0x2C1D, 'M', u'ⱍ'),\n-    (0x2C1E, 'M', u'ⱎ'),\n-    (0x2C1F, 'M', u'ⱏ'),\n-    (0x2C20, 'M', u'ⱐ'),\n-    (0x2C21, 'M', u'ⱑ'),\n-    (0x2C22, 'M', u'ⱒ'),\n-    (0x2C23, 'M', u'ⱓ'),\n-    (0x2C24, 'M', u'ⱔ'),\n-    (0x2C25, 'M', u'ⱕ'),\n-    (0x2C26, 'M', u'ⱖ'),\n-    (0x2C27, 'M', u'ⱗ'),\n-    (0x2C28, 'M', u'ⱘ'),\n-    (0x2C29, 'M', u'ⱙ'),\n-    (0x2C2A, 'M', u'ⱚ'),\n-    (0x2C2B, 'M', u'ⱛ'),\n-    (0x2C2C, 'M', u'ⱜ'),\n-    (0x2C2D, 'M', u'ⱝ'),\n-    (0x2C2E, 'M', u'ⱞ'),\n-    (0x2C2F, 'X'),\n-    (0x2C30, 'V'),\n-    (0x2C5F, 'X'),\n-    (0x2C60, 'M', u'ⱡ'),\n-    (0x2C61, 'V'),\n-    (0x2C62, 'M', u'ɫ'),\n-    (0x2C63, 'M', u'ᵽ'),\n-    (0x2C64, 'M', u'ɽ'),\n-    (0x2C65, 'V'),\n-    (0x2C67, 'M', u'ⱨ'),\n-    (0x2C68, 'V'),\n-    (0x2C69, 'M', u'ⱪ'),\n-    (0x2C6A, 'V'),\n-    (0x2C6B, 'M', u'ⱬ'),\n-    (0x2C6C, 'V'),\n-    (0x2C6D, 'M', u'ɑ'),\n-    (0x2C6E, 'M', u'ɱ'),\n-    (0x2C6F, 'M', u'ɐ'),\n-    (0x2C70, 'M', u'ɒ'),\n-    (0x2C71, 'V'),\n-    (0x2C72, 'M', u'ⱳ'),\n-    (0x2C73, 'V'),\n-    (0x2C75, 'M', u'ⱶ'),\n-    (0x2C76, 'V'),\n-    (0x2C7C, 'M', u'j'),\n-    (0x2C7D, 'M', u'v'),\n-    (0x2C7E, 'M', u'ȿ'),\n-    (0x2C7F, 'M', u'ɀ'),\n-    (0x2C80, 'M', u'ⲁ'),\n-    (0x2C81, 'V'),\n-    (0x2C82, 'M', u'ⲃ'),\n-    ]\n-\n-def _seg_25():\n-    return [\n-    (0x2C83, 'V'),\n-    (0x2C84, 'M', u'ⲅ'),\n-    (0x2C85, 'V'),\n-    (0x2C86, 'M', u'ⲇ'),\n-    (0x2C87, 'V'),\n-    (0x2C88, 'M', u'ⲉ'),\n-    (0x2C89, 'V'),\n-    (0x2C8A, 'M', u'ⲋ'),\n-    (0x2C8B, 'V'),\n-    (0x2C8C, 'M', u'ⲍ'),\n-    (0x2C8D, 'V'),\n-    (0x2C8E, 'M', u'ⲏ'),\n-    (0x2C8F, 'V'),\n-    (0x2C90, 'M', u'ⲑ'),\n-    (0x2C91, 'V'),\n-    (0x2C92, 'M', u'ⲓ'),\n-    (0x2C93, 'V'),\n-    (0x2C94, 'M', u'ⲕ'),\n-    (0x2C95, 'V'),\n-    (0x2C96, 'M', u'ⲗ'),\n-    (0x2C97, 'V'),\n-    (0x2C98, 'M', u'ⲙ'),\n-    (0x2C99, 'V'),\n-    (0x2C9A, 'M', u'ⲛ'),\n-    (0x2C9B, 'V'),\n-    (0x2C9C, 'M', u'ⲝ'),\n-    (0x2C9D, 'V'),\n-    (0x2C9E, 'M', u'ⲟ'),\n-    (0x2C9F, 'V'),\n-    (0x2CA0, 'M', u'ⲡ'),\n-    (0x2CA1, 'V'),\n-    (0x2CA2, 'M', u'ⲣ'),\n-    (0x2CA3, 'V'),\n-    (0x2CA4, 'M', u'ⲥ'),\n-    (0x2CA5, 'V'),\n-    (0x2CA6, 'M', u'ⲧ'),\n-    (0x2CA7, 'V'),\n-    (0x2CA8, 'M', u'ⲩ'),\n-    (0x2CA9, 'V'),\n-    (0x2CAA, 'M', u'ⲫ'),\n-    (0x2CAB, 'V'),\n-    (0x2CAC, 'M', u'ⲭ'),\n-    (0x2CAD, 'V'),\n-    (0x2CAE, 'M', u'ⲯ'),\n-    (0x2CAF, 'V'),\n-    (0x2CB0, 'M', u'ⲱ'),\n-    (0x2CB1, 'V'),\n-    (0x2CB2, 'M', u'ⲳ'),\n-    (0x2CB3, 'V'),\n-    (0x2CB4, 'M', u'ⲵ'),\n-    (0x2CB5, 'V'),\n-    (0x2CB6, 'M', u'ⲷ'),\n-    (0x2CB7, 'V'),\n-    (0x2CB8, 'M', u'ⲹ'),\n-    (0x2CB9, 'V'),\n-    (0x2CBA, 'M', u'ⲻ'),\n-    (0x2CBB, 'V'),\n-    (0x2CBC, 'M', u'ⲽ'),\n-    (0x2CBD, 'V'),\n-    (0x2CBE, 'M', u'ⲿ'),\n-    (0x2CBF, 'V'),\n-    (0x2CC0, 'M', u'ⳁ'),\n-    (0x2CC1, 'V'),\n-    (0x2CC2, 'M', u'ⳃ'),\n-    (0x2CC3, 'V'),\n-    (0x2CC4, 'M', u'ⳅ'),\n-    (0x2CC5, 'V'),\n-    (0x2CC6, 'M', u'ⳇ'),\n-    (0x2CC7, 'V'),\n-    (0x2CC8, 'M', u'ⳉ'),\n-    (0x2CC9, 'V'),\n-    (0x2CCA, 'M', u'ⳋ'),\n-    (0x2CCB, 'V'),\n-    (0x2CCC, 'M', u'ⳍ'),\n-    (0x2CCD, 'V'),\n-    (0x2CCE, 'M', u'ⳏ'),\n-    (0x2CCF, 'V'),\n-    (0x2CD0, 'M', u'ⳑ'),\n-    (0x2CD1, 'V'),\n-    (0x2CD2, 'M', u'ⳓ'),\n-    (0x2CD3, 'V'),\n-    (0x2CD4, 'M', u'ⳕ'),\n-    (0x2CD5, 'V'),\n-    (0x2CD6, 'M', u'ⳗ'),\n-    (0x2CD7, 'V'),\n-    (0x2CD8, 'M', u'ⳙ'),\n-    (0x2CD9, 'V'),\n-    (0x2CDA, 'M', u'ⳛ'),\n-    (0x2CDB, 'V'),\n-    (0x2CDC, 'M', u'ⳝ'),\n-    (0x2CDD, 'V'),\n-    (0x2CDE, 'M', u'ⳟ'),\n-    (0x2CDF, 'V'),\n-    (0x2CE0, 'M', u'ⳡ'),\n-    (0x2CE1, 'V'),\n-    (0x2CE2, 'M', u'ⳣ'),\n-    (0x2CE3, 'V'),\n-    (0x2CEB, 'M', u'ⳬ'),\n-    (0x2CEC, 'V'),\n-    (0x2CED, 'M', u'ⳮ'),\n-    ]\n-\n-def _seg_26():\n-    return [\n-    (0x2CEE, 'V'),\n-    (0x2CF2, 'M', u'ⳳ'),\n-    (0x2CF3, 'V'),\n-    (0x2CF4, 'X'),\n-    (0x2CF9, 'V'),\n-    (0x2D26, 'X'),\n-    (0x2D27, 'V'),\n-    (0x2D28, 'X'),\n-    (0x2D2D, 'V'),\n-    (0x2D2E, 'X'),\n-    (0x2D30, 'V'),\n-    (0x2D68, 'X'),\n-    (0x2D6F, 'M', u'ⵡ'),\n-    (0x2D70, 'V'),\n-    (0x2D71, 'X'),\n-    (0x2D7F, 'V'),\n-    (0x2D97, 'X'),\n-    (0x2DA0, 'V'),\n-    (0x2DA7, 'X'),\n-    (0x2DA8, 'V'),\n-    (0x2DAF, 'X'),\n-    (0x2DB0, 'V'),\n-    (0x2DB7, 'X'),\n-    (0x2DB8, 'V'),\n-    (0x2DBF, 'X'),\n-    (0x2DC0, 'V'),\n-    (0x2DC7, 'X'),\n-    (0x2DC8, 'V'),\n-    (0x2DCF, 'X'),\n-    (0x2DD0, 'V'),\n-    (0x2DD7, 'X'),\n-    (0x2DD8, 'V'),\n-    (0x2DDF, 'X'),\n-    (0x2DE0, 'V'),\n-    (0x2E3C, 'X'),\n-    (0x2E80, 'V'),\n-    (0x2E9A, 'X'),\n-    (0x2E9B, 'V'),\n-    (0x2E9F, 'M', u'母'),\n-    (0x2EA0, 'V'),\n-    (0x2EF3, 'M', u'龟'),\n-    (0x2EF4, 'X'),\n-    (0x2F00, 'M', u'一'),\n-    (0x2F01, 'M', u'丨'),\n-    (0x2F02, 'M', u'丶'),\n-    (0x2F03, 'M', u'丿'),\n-    (0x2F04, 'M', u'乙'),\n-    (0x2F05, 'M', u'亅'),\n-    (0x2F06, 'M', u'二'),\n-    (0x2F07, 'M', u'亠'),\n-    (0x2F08, 'M', u'人'),\n-    (0x2F09, 'M', u'儿'),\n-    (0x2F0A, 'M', u'入'),\n-    (0x2F0B, 'M', u'八'),\n-    (0x2F0C, 'M', u'冂'),\n-    (0x2F0D, 'M', u'冖'),\n-    (0x2F0E, 'M', u'冫'),\n-    (0x2F0F, 'M', u'几'),\n-    (0x2F10, 'M', u'凵'),\n-    (0x2F11, 'M', u'刀'),\n-    (0x2F12, 'M', u'力'),\n-    (0x2F13, 'M', u'勹'),\n-    (0x2F14, 'M', u'匕'),\n-    (0x2F15, 'M', u'匚'),\n-    (0x2F16, 'M', u'匸'),\n-    (0x2F17, 'M', u'十'),\n-    (0x2F18, 'M', u'卜'),\n-    (0x2F19, 'M', u'卩'),\n-    (0x2F1A, 'M', u'厂'),\n-    (0x2F1B, 'M', u'厶'),\n-    (0x2F1C, 'M', u'又'),\n-    (0x2F1D, 'M', u'口'),\n-    (0x2F1E, 'M', u'囗'),\n-    (0x2F1F, 'M', u'土'),\n-    (0x2F20, 'M', u'士'),\n-    (0x2F21, 'M', u'夂'),\n-    (0x2F22, 'M', u'夊'),\n-    (0x2F23, 'M', u'夕'),\n-    (0x2F24, 'M', u'大'),\n-    (0x2F25, 'M', u'女'),\n-    (0x2F26, 'M', u'子'),\n-    (0x2F27, 'M', u'宀'),\n-    (0x2F28, 'M', u'寸'),\n-    (0x2F29, 'M', u'小'),\n-    (0x2F2A, 'M', u'尢'),\n-    (0x2F2B, 'M', u'尸'),\n-    (0x2F2C, 'M', u'屮'),\n-    (0x2F2D, 'M', u'山'),\n-    (0x2F2E, 'M', u'巛'),\n-    (0x2F2F, 'M', u'工'),\n-    (0x2F30, 'M', u'己'),\n-    (0x2F31, 'M', u'巾'),\n-    (0x2F32, 'M', u'干'),\n-    (0x2F33, 'M', u'幺'),\n-    (0x2F34, 'M', u'广'),\n-    (0x2F35, 'M', u'廴'),\n-    (0x2F36, 'M', u'廾'),\n-    (0x2F37, 'M', u'弋'),\n-    (0x2F38, 'M', u'弓'),\n-    (0x2F39, 'M', u'彐'),\n-    ]\n-\n-def _seg_27():\n-    return [\n-    (0x2F3A, 'M', u'彡'),\n-    (0x2F3B, 'M', u'彳'),\n-    (0x2F3C, 'M', u'心'),\n-    (0x2F3D, 'M', u'戈'),\n-    (0x2F3E, 'M', u'戶'),\n-    (0x2F3F, 'M', u'手'),\n-    (0x2F40, 'M', u'支'),\n-    (0x2F41, 'M', u'攴'),\n-    (0x2F42, 'M', u'文'),\n-    (0x2F43, 'M', u'斗'),\n-    (0x2F44, 'M', u'斤'),\n-    (0x2F45, 'M', u'方'),\n-    (0x2F46, 'M', u'无'),\n-    (0x2F47, 'M', u'日'),\n-    (0x2F48, 'M', u'曰'),\n-    (0x2F49, 'M', u'月'),\n-    (0x2F4A, 'M', u'木'),\n-    (0x2F4B, 'M', u'欠'),\n-    (0x2F4C, 'M', u'止'),\n-    (0x2F4D, 'M', u'歹'),\n-    (0x2F4E, 'M', u'殳'),\n-    (0x2F4F, 'M', u'毋'),\n-    (0x2F50, 'M', u'比'),\n-    (0x2F51, 'M', u'毛'),\n-    (0x2F52, 'M', u'氏'),\n-    (0x2F53, 'M', u'气'),\n-    (0x2F54, 'M', u'水'),\n-    (0x2F55, 'M', u'火'),\n-    (0x2F56, 'M', u'爪'),\n-    (0x2F57, 'M', u'父'),\n-    (0x2F58, 'M', u'爻'),\n-    (0x2F59, 'M', u'爿'),\n-    (0x2F5A, 'M', u'片'),\n-    (0x2F5B, 'M', u'牙'),\n-    (0x2F5C, 'M', u'牛'),\n-    (0x2F5D, 'M', u'犬'),\n-    (0x2F5E, 'M', u'玄'),\n-    (0x2F5F, 'M', u'玉'),\n-    (0x2F60, 'M', u'瓜'),\n-    (0x2F61, 'M', u'瓦'),\n-    (0x2F62, 'M', u'甘'),\n-    (0x2F63, 'M', u'生'),\n-    (0x2F64, 'M', u'用'),\n-    (0x2F65, 'M', u'田'),\n-    (0x2F66, 'M', u'疋'),\n-    (0x2F67, 'M', u'疒'),\n-    (0x2F68, 'M', u'癶'),\n-    (0x2F69, 'M', u'白'),\n-    (0x2F6A, 'M', u'皮'),\n-    (0x2F6B, 'M', u'皿'),\n-    (0x2F6C, 'M', u'目'),\n-    (0x2F6D, 'M', u'矛'),\n-    (0x2F6E, 'M', u'矢'),\n-    (0x2F6F, 'M', u'石'),\n-    (0x2F70, 'M', u'示'),\n-    (0x2F71, 'M', u'禸'),\n-    (0x2F72, 'M', u'禾'),\n-    (0x2F73, 'M', u'穴'),\n-    (0x2F74, 'M', u'立'),\n-    (0x2F75, 'M', u'竹'),\n-    (0x2F76, 'M', u'米'),\n-    (0x2F77, 'M', u'糸'),\n-    (0x2F78, 'M', u'缶'),\n-    (0x2F79, 'M', u'网'),\n-    (0x2F7A, 'M', u'羊'),\n-    (0x2F7B, 'M', u'羽'),\n-    (0x2F7C, 'M', u'老'),\n-    (0x2F7D, 'M', u'而'),\n-    (0x2F7E, 'M', u'耒'),\n-    (0x2F7F, 'M', u'耳'),\n-    (0x2F80, 'M', u'聿'),\n-    (0x2F81, 'M', u'肉'),\n-    (0x2F82, 'M', u'臣'),\n-    (0x2F83, 'M', u'自'),\n-    (0x2F84, 'M', u'至'),\n-    (0x2F85, 'M', u'臼'),\n-    (0x2F86, 'M', u'舌'),\n-    (0x2F87, 'M', u'舛'),\n-    (0x2F88, 'M', u'舟'),\n-    (0x2F89, 'M', u'艮'),\n-    (0x2F8A, 'M', u'色'),\n-    (0x2F8B, 'M', u'艸'),\n-    (0x2F8C, 'M', u'虍'),\n-    (0x2F8D, 'M', u'虫'),\n-    (0x2F8E, 'M', u'血'),\n-    (0x2F8F, 'M', u'行'),\n-    (0x2F90, 'M', u'衣'),\n-    (0x2F91, 'M', u'襾'),\n-    (0x2F92, 'M', u'見'),\n-    (0x2F93, 'M', u'角'),\n-    (0x2F94, 'M', u'言'),\n-    (0x2F95, 'M', u'谷'),\n-    (0x2F96, 'M', u'豆'),\n-    (0x2F97, 'M', u'豕'),\n-    (0x2F98, 'M', u'豸'),\n-    (0x2F99, 'M', u'貝'),\n-    (0x2F9A, 'M', u'赤'),\n-    (0x2F9B, 'M', u'走'),\n-    (0x2F9C, 'M', u'足'),\n-    (0x2F9D, 'M', u'身'),\n-    ]\n-\n-def _seg_28():\n-    return [\n-    (0x2F9E, 'M', u'車'),\n-    (0x2F9F, 'M', u'辛'),\n-    (0x2FA0, 'M', u'辰'),\n-    (0x2FA1, 'M', u'辵'),\n-    (0x2FA2, 'M', u'邑'),\n-    (0x2FA3, 'M', u'酉'),\n-    (0x2FA4, 'M', u'釆'),\n-    (0x2FA5, 'M', u'里'),\n-    (0x2FA6, 'M', u'金'),\n-    (0x2FA7, 'M', u'長'),\n-    (0x2FA8, 'M', u'門'),\n-    (0x2FA9, 'M', u'阜'),\n-    (0x2FAA, 'M', u'隶'),\n-    (0x2FAB, 'M', u'隹'),\n-    (0x2FAC, 'M', u'雨'),\n-    (0x2FAD, 'M', u'靑'),\n-    (0x2FAE, 'M', u'非'),\n-    (0x2FAF, 'M', u'面'),\n-    (0x2FB0, 'M', u'革'),\n-    (0x2FB1, 'M', u'韋'),\n-    (0x2FB2, 'M', u'韭'),\n-    (0x2FB3, 'M', u'音'),\n-    (0x2FB4, 'M', u'頁'),\n-    (0x2FB5, 'M', u'風'),\n-    (0x2FB6, 'M', u'飛'),\n-    (0x2FB7, 'M', u'食'),\n-    (0x2FB8, 'M', u'首'),\n-    (0x2FB9, 'M', u'香'),\n-    (0x2FBA, 'M', u'馬'),\n-    (0x2FBB, 'M', u'骨'),\n-    (0x2FBC, 'M', u'高'),\n-    (0x2FBD, 'M', u'髟'),\n-    (0x2FBE, 'M', u'鬥'),\n-    (0x2FBF, 'M', u'鬯'),\n-    (0x2FC0, 'M', u'鬲'),\n-    (0x2FC1, 'M', u'鬼'),\n-    (0x2FC2, 'M', u'魚'),\n-    (0x2FC3, 'M', u'鳥'),\n-    (0x2FC4, 'M', u'鹵'),\n-    (0x2FC5, 'M', u'鹿'),\n-    (0x2FC6, 'M', u'麥'),\n-    (0x2FC7, 'M', u'麻'),\n-    (0x2FC8, 'M', u'黃'),\n-    (0x2FC9, 'M', u'黍'),\n-    (0x2FCA, 'M', u'黑'),\n-    (0x2FCB, 'M', u'黹'),\n-    (0x2FCC, 'M', u'黽'),\n-    (0x2FCD, 'M', u'鼎'),\n-    (0x2FCE, 'M', u'鼓'),\n-    (0x2FCF, 'M', u'鼠'),\n-    (0x2FD0, 'M', u'鼻'),\n-    (0x2FD1, 'M', u'齊'),\n-    (0x2FD2, 'M', u'齒'),\n-    (0x2FD3, 'M', u'龍'),\n-    (0x2FD4, 'M', u'龜'),\n-    (0x2FD5, 'M', u'龠'),\n-    (0x2FD6, 'X'),\n-    (0x3000, '3', u' '),\n-    (0x3001, 'V'),\n-    (0x3002, 'M', u'.'),\n-    (0x3003, 'V'),\n-    (0x3036, 'M', u'〒'),\n-    (0x3037, 'V'),\n-    (0x3038, 'M', u'十'),\n-    (0x3039, 'M', u'卄'),\n-    (0x303A, 'M', u'卅'),\n-    (0x303B, 'V'),\n-    (0x3040, 'X'),\n-    (0x3041, 'V'),\n-    (0x3097, 'X'),\n-    (0x3099, 'V'),\n-    (0x309B, '3', u' ゙'),\n-    (0x309C, '3', u' ゚'),\n-    (0x309D, 'V'),\n-    (0x309F, 'M', u'より'),\n-    (0x30A0, 'V'),\n-    (0x30FF, 'M', u'コト'),\n-    (0x3100, 'X'),\n-    (0x3105, 'V'),\n@@ -1,97 +0,0 @@\n-\"\"\"\n-urllib3 - Thread-safe connection pooling and re-using.\n-\"\"\"\n-\n-from __future__ import absolute_import\n-import warnings\n-\n-from .connectionpool import (\n-    HTTPConnectionPool,\n-    HTTPSConnectionPool,\n-    connection_from_url\n-)\n-\n-from . import exceptions\n-from .filepost import encode_multipart_formdata\n-from .poolmanager import PoolManager, ProxyManager, proxy_from_url\n-from .response import HTTPResponse\n-from .util.request import make_headers\n-from .util.url import get_host\n-from .util.timeout import Timeout\n-from .util.retry import Retry\n-\n-\n-# Set default logging handler to avoid \"No handler found\" warnings.\n-import logging\n-try:  # Python 2.7+\n-    from logging import NullHandler\n-except ImportError:\n-    class NullHandler(logging.Handler):\n-        def emit(self, record):\n-            pass\n-\n-__author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n-__license__ = 'MIT'\n-__version__ = '1.21.1'\n-\n-__all__ = (\n-    'HTTPConnectionPool',\n-    'HTTPSConnectionPool',\n-    'PoolManager',\n-    'ProxyManager',\n-    'HTTPResponse',\n-    'Retry',\n-    'Timeout',\n-    'add_stderr_logger',\n-    'connection_from_url',\n-    'disable_warnings',\n-    'encode_multipart_formdata',\n-    'get_host',\n-    'make_headers',\n-    'proxy_from_url',\n-)\n-\n-logging.getLogger(__name__).addHandler(NullHandler())\n-\n-\n-def add_stderr_logger(level=logging.DEBUG):\n-    \"\"\"\n-    Helper for quickly adding a StreamHandler to the logger. Useful for\n-    debugging.\n-\n-    Returns the handler after adding it.\n-    \"\"\"\n-    # This method needs to be in this __init__.py to get the __name__ correct\n-    # even if urllib3 is vendored within another package.\n-    logger = logging.getLogger(__name__)\n-    handler = logging.StreamHandler()\n-    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))\n-    logger.addHandler(handler)\n-    logger.setLevel(level)\n-    logger.debug('Added a stderr logging handler to logger: %s', __name__)\n-    return handler\n-\n-\n-# ... Clean up.\n-del NullHandler\n-\n-\n-# All warning filters *must* be appended unless you're really certain that they\n-# shouldn't be: otherwise, it's very hard for users to use most Python\n-# mechanisms to silence them.\n-# SecurityWarning's always go off by default.\n-warnings.simplefilter('always', exceptions.SecurityWarning, append=True)\n-# SubjectAltNameWarning's should go off once per host\n-warnings.simplefilter('default', exceptions.SubjectAltNameWarning, append=True)\n-# InsecurePlatformWarning's don't vary between requests, so we keep it default.\n-warnings.simplefilter('default', exceptions.InsecurePlatformWarning,\n-                      append=True)\n-# SNIMissingWarnings should go off only once.\n-warnings.simplefilter('default', exceptions.SNIMissingWarning, append=True)\n-\n-\n-def disable_warnings(category=exceptions.HTTPWarning):\n-    \"\"\"\n-    Helper for quickly disabling all urllib3 warnings.\n-    \"\"\"\n-    warnings.simplefilter('ignore', category)\n\n@@ -1,314 +0,0 @@\n-from __future__ import absolute_import\n-from collections import Mapping, MutableMapping\n-try:\n-    from threading import RLock\n-except ImportError:  # Platform-specific: No threads available\n-    class RLock:\n-        def __enter__(self):\n-            pass\n-\n-        def __exit__(self, exc_type, exc_value, traceback):\n-            pass\n-\n-\n-try:  # Python 2.7+\n-    from collections import OrderedDict\n-except ImportError:\n-    from .packages.ordered_dict import OrderedDict\n-from .packages.six import iterkeys, itervalues, PY3\n-\n-\n-__all__ = ['RecentlyUsedContainer', 'HTTPHeaderDict']\n-\n-\n-_Null = object()\n-\n-\n-class RecentlyUsedContainer(MutableMapping):\n-    \"\"\"\n-    Provides a thread-safe dict-like container which maintains up to\n-    ``maxsize`` keys while throwing away the least-recently-used keys beyond\n-    ``maxsize``.\n-\n-    :param maxsize:\n-        Maximum number of recent elements to retain.\n-\n-    :param dispose_func:\n-        Every time an item is evicted from the container,\n-        ``dispose_func(value)`` is called.  Callback which will get called\n-    \"\"\"\n-\n-    ContainerCls = OrderedDict\n-\n-    def __init__(self, maxsize=10, dispose_func=None):\n-        self._maxsize = maxsize\n-        self.dispose_func = dispose_func\n-\n-        self._container = self.ContainerCls()\n-        self.lock = RLock()\n-\n-    def __getitem__(self, key):\n-        # Re-insert the item, moving it to the end of the eviction line.\n-        with self.lock:\n-            item = self._container.pop(key)\n-            self._container[key] = item\n-            return item\n-\n-    def __setitem__(self, key, value):\n-        evicted_value = _Null\n-        with self.lock:\n-            # Possibly evict the existing value of 'key'\n-            evicted_value = self._container.get(key, _Null)\n-            self._container[key] = value\n-\n-            # If we didn't evict an existing value, we might have to evict the\n-            # least recently used item from the beginning of the container.\n-            if len(self._container) > self._maxsize:\n-                _key, evicted_value = self._container.popitem(last=False)\n-\n-        if self.dispose_func and evicted_value is not _Null:\n-            self.dispose_func(evicted_value)\n-\n-    def __delitem__(self, key):\n-        with self.lock:\n-            value = self._container.pop(key)\n-\n-        if self.dispose_func:\n-            self.dispose_func(value)\n-\n-    def __len__(self):\n-        with self.lock:\n-            return len(self._container)\n-\n-    def __iter__(self):\n-        raise NotImplementedError('Iteration over this class is unlikely to be threadsafe.')\n-\n-    def clear(self):\n-        with self.lock:\n-            # Copy pointers to all values, then wipe the mapping\n-            values = list(itervalues(self._container))\n-            self._container.clear()\n-\n-        if self.dispose_func:\n-            for value in values:\n-                self.dispose_func(value)\n-\n-    def keys(self):\n-        with self.lock:\n-            return list(iterkeys(self._container))\n-\n-\n-class HTTPHeaderDict(MutableMapping):\n-    \"\"\"\n-    :param headers:\n-        An iterable of field-value pairs. Must not contain multiple field names\n-        when compared case-insensitively.\n-\n-    :param kwargs:\n-        Additional field-value pairs to pass in to ``dict.update``.\n-\n-    A ``dict`` like container for storing HTTP Headers.\n-\n-    Field names are stored and compared case-insensitively in compliance with\n-    RFC 7230. Iteration provides the first case-sensitive key seen for each\n-    case-insensitive pair.\n-\n-    Using ``__setitem__`` syntax overwrites fields that compare equal\n-    case-insensitively in order to maintain ``dict``'s api. For fields that\n-    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``\n-    in a loop.\n-\n-    If multiple fields that are equal case-insensitively are passed to the\n-    constructor or ``.update``, the behavior is undefined and some will be\n-    lost.\n-\n-    >>> headers = HTTPHeaderDict()\n-    >>> headers.add('Set-Cookie', 'foo=bar')\n-    >>> headers.add('set-cookie', 'baz=quxx')\n-    >>> headers['content-length'] = '7'\n-    >>> headers['SET-cookie']\n-    'foo=bar, baz=quxx'\n-    >>> headers['Content-Length']\n-    '7'\n-    \"\"\"\n-\n-    def __init__(self, headers=None, **kwargs):\n-        super(HTTPHeaderDict, self).__init__()\n-        self._container = OrderedDict()\n-        if headers is not None:\n-            if isinstance(headers, HTTPHeaderDict):\n-                self._copy_from(headers)\n-            else:\n-                self.extend(headers)\n-        if kwargs:\n-            self.extend(kwargs)\n-\n-    def __setitem__(self, key, val):\n-        self._container[key.lower()] = [key, val]\n-        return self._container[key.lower()]\n-\n-    def __getitem__(self, key):\n-        val = self._container[key.lower()]\n-        return ', '.join(val[1:])\n-\n-    def __delitem__(self, key):\n-        del self._container[key.lower()]\n-\n-    def __contains__(self, key):\n-        return key.lower() in self._container\n-\n-    def __eq__(self, other):\n-        if not isinstance(other, Mapping) and not hasattr(other, 'keys'):\n-            return False\n-        if not isinstance(other, type(self)):\n-            other = type(self)(other)\n-        return (dict((k.lower(), v) for k, v in self.itermerged()) ==\n-                dict((k.lower(), v) for k, v in other.itermerged()))\n-\n-    def __ne__(self, other):\n-        return not self.__eq__(other)\n-\n-    if not PY3:  # Python 2\n-        iterkeys = MutableMapping.iterkeys\n-        itervalues = MutableMapping.itervalues\n-\n-    __marker = object()\n-\n-    def __len__(self):\n-        return len(self._container)\n-\n-    def __iter__(self):\n-        # Only provide the originally cased names\n-        for vals in self._container.values():\n-            yield vals[0]\n-\n-    def pop(self, key, default=__marker):\n-        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n-          If key is not found, d is returned if given, otherwise KeyError is raised.\n-        '''\n-        # Using the MutableMapping function directly fails due to the private marker.\n-        # Using ordinary dict.pop would expose the internal structures.\n-        # So let's reinvent the wheel.\n-        try:\n-            value = self[key]\n-        except KeyError:\n-            if default is self.__marker:\n-                raise\n-            return default\n-        else:\n-            del self[key]\n-            return value\n-\n-    def discard(self, key):\n-        try:\n-            del self[key]\n-        except KeyError:\n-            pass\n-\n-    def add(self, key, val):\n-        \"\"\"Adds a (name, value) pair, doesn't overwrite the value if it already\n-        exists.\n-\n-        >>> headers = HTTPHeaderDict(foo='bar')\n-        >>> headers.add('Foo', 'baz')\n-        >>> headers['foo']\n-        'bar, baz'\n-        \"\"\"\n-        key_lower = key.lower()\n-        new_vals = [key, val]\n-        # Keep the common case aka no item present as fast as possible\n-        vals = self._container.setdefault(key_lower, new_vals)\n-        if new_vals is not vals:\n-            vals.append(val)\n-\n-    def extend(self, *args, **kwargs):\n-        \"\"\"Generic import function for any type of header-like object.\n-        Adapted version of MutableMapping.update in order to insert items\n-        with self.add instead of self.__setitem__\n-        \"\"\"\n-        if len(args) > 1:\n-            raise TypeError(\"extend() takes at most 1 positional \"\n-                            \"arguments ({0} given)\".format(len(args)))\n-        other = args[0] if len(args) >= 1 else ()\n-\n-        if isinstance(other, HTTPHeaderDict):\n-            for key, val in other.iteritems():\n-                self.add(key, val)\n-        elif isinstance(other, Mapping):\n-            for key in other:\n-                self.add(key, other[key])\n-        elif hasattr(other, \"keys\"):\n-            for key in other.keys():\n-                self.add(key, other[key])\n-        else:\n-            for key, value in other:\n-                self.add(key, value)\n-\n-        for key, value in kwargs.items():\n-            self.add(key, value)\n-\n-    def getlist(self, key):\n-        \"\"\"Returns a list of all the values for the named field. Returns an\n-        empty list if the key doesn't exist.\"\"\"\n-        try:\n-            vals = self._container[key.lower()]\n-        except KeyError:\n-            return []\n-        else:\n-            return vals[1:]\n-\n-    # Backwards compatibility for httplib\n-    getheaders = getlist\n-    getallmatchingheaders = getlist\n-    iget = getlist\n-\n-    def __repr__(self):\n-        return \"%s(%s)\" % (type(self).__name__, dict(self.itermerged()))\n-\n-    def _copy_from(self, other):\n-        for key in other:\n-            val = other.getlist(key)\n-            if isinstance(val, list):\n-                # Don't need to convert tuples\n-                val = list(val)\n-            self._container[key.lower()] = [key] + val\n-\n-    def copy(self):\n-        clone = type(self)()\n-        clone._copy_from(self)\n-        return clone\n-\n-    def iteritems(self):\n-        \"\"\"Iterate over all header lines, including duplicate ones.\"\"\"\n-        for key in self:\n-            vals = self._container[key.lower()]\n-            for val in vals[1:]:\n-                yield vals[0], val\n-\n-    def itermerged(self):\n-        \"\"\"Iterate over all headers, merging duplicate ones together.\"\"\"\n-        for key in self:\n-            val = self._container[key.lower()]\n-            yield val[0], ', '.join(val[1:])\n-\n-    def items(self):\n-        return list(self.iteritems())\n-\n-    @classmethod\n-    def from_httplib(cls, message):  # Python 2\n-        \"\"\"Read headers from a Python 2 httplib message object.\"\"\"\n-        # python2.7 does not expose a proper API for exporting multiheaders\n-        # efficiently. This function re-reads raw lines from the message\n-        # object and extracts the multiheaders properly.\n-        headers = []\n-\n-        for line in message.headers:\n-            if line.startswith((' ', '\\t')):\n-                key, value = headers[-1]\n-                headers[-1] = (key, value + '\\r\\n' + line.rstrip())\n-                continue\n-\n-            key, value = line.split(':', 1)\n-            headers.append((key, value.strip()))\n-\n-        return cls(headers)\n\n@@ -1,373 +0,0 @@\n-from __future__ import absolute_import\n-import datetime\n-import logging\n-import os\n-import sys\n-import socket\n-from socket import error as SocketError, timeout as SocketTimeout\n-import warnings\n-from .packages import six\n-from .packages.six.moves.http_client import HTTPConnection as _HTTPConnection\n-from .packages.six.moves.http_client import HTTPException  # noqa: F401\n-\n-try:  # Compiled with SSL?\n-    import ssl\n-    BaseSSLError = ssl.SSLError\n-except (ImportError, AttributeError):  # Platform-specific: No SSL.\n-    ssl = None\n-\n-    class BaseSSLError(BaseException):\n-        pass\n-\n-\n-try:  # Python 3:\n-    # Not a no-op, we're adding this to the namespace so it can be imported.\n-    ConnectionError = ConnectionError\n-except NameError:  # Python 2:\n-    class ConnectionError(Exception):\n-        pass\n-\n-\n-from .exceptions import (\n-    NewConnectionError,\n-    ConnectTimeoutError,\n-    SubjectAltNameWarning,\n-    SystemTimeWarning,\n-)\n-from .packages.ssl_match_hostname import match_hostname, CertificateError\n-\n-from .util.ssl_ import (\n-    resolve_cert_reqs,\n-    resolve_ssl_version,\n-    assert_fingerprint,\n-    create_urllib3_context,\n-    ssl_wrap_socket\n-)\n-\n-\n-from .util import connection\n-\n-from ._collections import HTTPHeaderDict\n-\n-log = logging.getLogger(__name__)\n-\n-port_by_scheme = {\n-    'http': 80,\n-    'https': 443,\n-}\n-\n-# When updating RECENT_DATE, move it to\n-# within two years of the current date, and no\n-# earlier than 6 months ago.\n-RECENT_DATE = datetime.date(2016, 1, 1)\n-\n-\n-class DummyConnection(object):\n-    \"\"\"Used to detect a failed ConnectionCls import.\"\"\"\n-    pass\n-\n-\n-class HTTPConnection(_HTTPConnection, object):\n-    \"\"\"\n-    Based on httplib.HTTPConnection but provides an extra constructor\n-    backwards-compatibility layer between older and newer Pythons.\n-\n-    Additional keyword parameters are used to configure attributes of the connection.\n-    Accepted parameters include:\n-\n-      - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`\n-      - ``source_address``: Set the source address for the current connection.\n-\n-        .. note:: This is ignored for Python 2.6. It is only applied for 2.7 and 3.x\n-\n-      - ``socket_options``: Set specific options on the underlying socket. If not specified, then\n-        defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling\n-        Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.\n-\n-        For example, if you wish to enable TCP Keep Alive in addition to the defaults,\n-        you might pass::\n-\n-            HTTPConnection.default_socket_options + [\n-                (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),\n-            ]\n-\n-        Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).\n-    \"\"\"\n-\n-    default_port = port_by_scheme['http']\n-\n-    #: Disable Nagle's algorithm by default.\n-    #: ``[(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]``\n-    default_socket_options = [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]\n-\n-    #: Whether this connection verifies the host's certificate.\n-    is_verified = False\n-\n-    def __init__(self, *args, **kw):\n-        if six.PY3:  # Python 3\n-            kw.pop('strict', None)\n-\n-        # Pre-set source_address in case we have an older Python like 2.6.\n-        self.source_address = kw.get('source_address')\n-\n-        if sys.version_info < (2, 7):  # Python 2.6\n-            # _HTTPConnection on Python 2.6 will balk at this keyword arg, but\n-            # not newer versions. We can still use it when creating a\n-            # connection though, so we pop it *after* we have saved it as\n-            # self.source_address.\n-            kw.pop('source_address', None)\n-\n-        #: The socket options provided by the user. If no options are\n-        #: provided, we use the default options.\n-        self.socket_options = kw.pop('socket_options', self.default_socket_options)\n-\n-        # Superclass also sets self.source_address in Python 2.7+.\n-        _HTTPConnection.__init__(self, *args, **kw)\n-\n-    def _new_conn(self):\n-        \"\"\" Establish a socket connection and set nodelay settings on it.\n-\n-        :return: New socket connection.\n-        \"\"\"\n-        extra_kw = {}\n-        if self.source_address:\n-            extra_kw['source_address'] = self.source_address\n-\n-        if self.socket_options:\n-            extra_kw['socket_options'] = self.socket_options\n-\n-        try:\n-            conn = connection.create_connection(\n-                (self.host, self.port), self.timeout, **extra_kw)\n-\n-        except SocketTimeout as e:\n-            raise ConnectTimeoutError(\n-                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n-                (self.host, self.timeout))\n-\n-        except SocketError as e:\n-            raise NewConnectionError(\n-                self, \"Failed to establish a new connection: %s\" % e)\n-\n-        return conn\n-\n-    def _prepare_conn(self, conn):\n-        self.sock = conn\n-        # the _tunnel_host attribute was added in python 2.6.3 (via\n-        # http://hg.python.org/cpython/rev/0f57b30a152f) so pythons 2.6(0-2) do\n-        # not have them.\n-        if getattr(self, '_tunnel_host', None):\n-            # TODO: Fix tunnel so it doesn't depend on self.sock state.\n-            self._tunnel()\n-            # Mark this connection as not reusable\n-            self.auto_open = 0\n-\n-    def connect(self):\n-        conn = self._new_conn()\n-        self._prepare_conn(conn)\n-\n-    def request_chunked(self, method, url, body=None, headers=None):\n-        \"\"\"\n-        Alternative to the common request method, which sends the\n-        body with chunked encoding and not as one block\n-        \"\"\"\n-        headers = HTTPHeaderDict(headers if headers is not None else {})\n-        skip_accept_encoding = 'accept-encoding' in headers\n-        skip_host = 'host' in headers\n-        self.putrequest(\n-            method,\n-            url,\n-            skip_accept_encoding=skip_accept_encoding,\n-            skip_host=skip_host\n-        )\n-        for header, value in headers.items():\n-            self.putheader(header, value)\n-        if 'transfer-encoding' not in headers:\n-            self.putheader('Transfer-Encoding', 'chunked')\n-        self.endheaders()\n-\n-        if body is not None:\n-            stringish_types = six.string_types + (six.binary_type,)\n-            if isinstance(body, stringish_types):\n-                body = (body,)\n-            for chunk in body:\n-                if not chunk:\n-                    continue\n-                if not isinstance(chunk, six.binary_type):\n-                    chunk = chunk.encode('utf8')\n-                len_str = hex(len(chunk))[2:]\n-                self.send(len_str.encode('utf-8'))\n-                self.send(b'\\r\\n')\n-                self.send(chunk)\n-                self.send(b'\\r\\n')\n-\n-        # After the if clause, to always have a closed body\n-        self.send(b'0\\r\\n\\r\\n')\n-\n-\n-class HTTPSConnection(HTTPConnection):\n-    default_port = port_by_scheme['https']\n-\n-    ssl_version = None\n-\n-    def __init__(self, host, port=None, key_file=None, cert_file=None,\n-                 strict=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n-                 ssl_context=None, **kw):\n-\n-        HTTPConnection.__init__(self, host, port, strict=strict,\n-                                timeout=timeout, **kw)\n-\n-        self.key_file = key_file\n-        self.cert_file = cert_file\n-        self.ssl_context = ssl_context\n-\n-        # Required property for Google AppEngine 1.9.0 which otherwise causes\n-        # HTTPS requests to go out as HTTP. (See Issue #356)\n-        self._protocol = 'https'\n-\n-    def connect(self):\n-        conn = self._new_conn()\n-        self._prepare_conn(conn)\n-\n-        if self.ssl_context is None:\n-            self.ssl_context = create_urllib3_context(\n-                ssl_version=resolve_ssl_version(None),\n-                cert_reqs=resolve_cert_reqs(None),\n-            )\n-\n-        self.sock = ssl_wrap_socket(\n-            sock=conn,\n-            keyfile=self.key_file,\n-            certfile=self.cert_file,\n-            ssl_context=self.ssl_context,\n-        )\n-\n-\n-class VerifiedHTTPSConnection(HTTPSConnection):\n-    \"\"\"\n-    Based on httplib.HTTPSConnection but wraps the socket with\n-    SSL certification.\n-    \"\"\"\n-    cert_reqs = None\n-    ca_certs = None\n-    ca_cert_dir = None\n-    ssl_version = None\n-    assert_fingerprint = None\n-\n-    def set_cert(self, key_file=None, cert_file=None,\n-                 cert_reqs=None, ca_certs=None,\n-                 assert_hostname=None, assert_fingerprint=None,\n-                 ca_cert_dir=None):\n-        \"\"\"\n-        This method should only be called once, before the connection is used.\n-        \"\"\"\n-        # If cert_reqs is not provided, we can try to guess. If the user gave\n-        # us a cert database, we assume they want to use it: otherwise, if\n-        # they gave us an SSL Context object we should use whatever is set for\n-        # it.\n-        if cert_reqs is None:\n-            if ca_certs or ca_cert_dir:\n-                cert_reqs = 'CERT_REQUIRED'\n-            elif self.ssl_context is not None:\n-                cert_reqs = self.ssl_context.verify_mode\n-\n-        self.key_file = key_file\n-        self.cert_file = cert_file\n-        self.cert_reqs = cert_reqs\n-        self.assert_hostname = assert_hostname\n-        self.assert_fingerprint = assert_fingerprint\n-        self.ca_certs = ca_certs and os.path.expanduser(ca_certs)\n-        self.ca_cert_dir = ca_cert_dir and os.path.expanduser(ca_cert_dir)\n-\n-    def connect(self):\n-        # Add certificate verification\n-        conn = self._new_conn()\n-\n-        hostname = self.host\n-        if getattr(self, '_tunnel_host', None):\n-            # _tunnel_host was added in Python 2.6.3\n-            # (See: http://hg.python.org/cpython/rev/0f57b30a152f)\n-\n-            self.sock = conn\n-            # Calls self._set_hostport(), so self.host is\n-            # self._tunnel_host below.\n-            self._tunnel()\n-            # Mark this connection as not reusable\n-            self.auto_open = 0\n-\n-            # Override the host with the one we're requesting data from.\n-            hostname = self._tunnel_host\n-\n-        is_time_off = datetime.date.today() < RECENT_DATE\n-        if is_time_off:\n-            warnings.warn((\n-                'System time is way off (before {0}). This will probably '\n-                'lead to SSL verification errors').format(RECENT_DATE),\n-                SystemTimeWarning\n-            )\n-\n-        # Wrap socket using verification with the root certs in\n-        # trusted_root_certs\n-        if self.ssl_context is None:\n-            self.ssl_context = create_urllib3_context(\n-                ssl_version=resolve_ssl_version(self.ssl_version),\n-                cert_reqs=resolve_cert_reqs(self.cert_reqs),\n-            )\n-\n-        context = self.ssl_context\n-        context.verify_mode = resolve_cert_reqs(self.cert_reqs)\n-        self.sock = ssl_wrap_socket(\n-            sock=conn,\n-            keyfile=self.key_file,\n-            certfile=self.cert_file,\n-            ca_certs=self.ca_certs,\n-            ca_cert_dir=self.ca_cert_dir,\n-            server_hostname=hostname,\n-            ssl_context=context)\n-\n-        if self.assert_fingerprint:\n-            assert_fingerprint(self.sock.getpeercert(binary_form=True),\n-                               self.assert_fingerprint)\n-        elif context.verify_mode != ssl.CERT_NONE \\\n-                and not getattr(context, 'check_hostname', False) \\\n-                and self.assert_hostname is not False:\n-            # While urllib3 attempts to always turn off hostname matching from\n-            # the TLS library, this cannot always be done. So we check whether\n-            # the TLS Library still thinks it's matching hostnames.\n-            cert = self.sock.getpeercert()\n-            if not cert.get('subjectAltName', ()):\n-                warnings.warn((\n-                    'Certificate for {0} has no `subjectAltName`, falling back to check for a '\n-                    '`commonName` for now. This feature is being removed by major browsers and '\n-                    'deprecated by RFC 2818. (See https://github.com/shazow/urllib3/issues/497 '\n-                    'for details.)'.format(hostname)),\n-                    SubjectAltNameWarning\n-                )\n-            _match_hostname(cert, self.assert_hostname or hostname)\n-\n-        self.is_verified = (\n-            context.verify_mode == ssl.CERT_REQUIRED or\n-            self.assert_fingerprint is not None\n-        )\n-\n-\n-def _match_hostname(cert, asserted_hostname):\n-    try:\n-        match_hostname(cert, asserted_hostname)\n-    except CertificateError as e:\n-        log.error(\n-            'Certificate did not match expected hostname: %s. '\n-            'Certificate: %s', asserted_hostname, cert\n-        )\n-        # Add cert to exception and reraise so client code can inspect\n-        # the cert when catching the exception, if they want to\n-        e._peer_cert = cert\n-        raise\n-\n-\n-if ssl:\n-    # Make a copy for testing.\n-    UnverifiedHTTPSConnection = HTTPSConnection\n-    HTTPSConnection = VerifiedHTTPSConnection\n-else:\n-    HTTPSConnection = DummyConnection\n\n@@ -1,899 +0,0 @@\n-from __future__ import absolute_import\n-import errno\n-import logging\n-import sys\n-import warnings\n-\n-from socket import error as SocketError, timeout as SocketTimeout\n-import socket\n-\n-\n-from .exceptions import (\n-    ClosedPoolError,\n-    ProtocolError,\n-    EmptyPoolError,\n-    HeaderParsingError,\n-    HostChangedError,\n-    LocationValueError,\n-    MaxRetryError,\n-    ProxyError,\n-    ReadTimeoutError,\n-    SSLError,\n-    TimeoutError,\n-    InsecureRequestWarning,\n-    NewConnectionError,\n-)\n-from .packages.ssl_match_hostname import CertificateError\n-from .packages import six\n-from .packages.six.moves import queue\n-from .connection import (\n-    port_by_scheme,\n-    DummyConnection,\n-    HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection,\n-    HTTPException, BaseSSLError,\n-)\n-from .request import RequestMethods\n-from .response import HTTPResponse\n-\n-from .util.connection import is_connection_dropped\n-from .util.request import set_file_position\n-from .util.response import assert_header_parsing\n-from .util.retry import Retry\n-from .util.timeout import Timeout\n-from .util.url import get_host, Url\n-\n-\n-if six.PY2:\n-    # Queue is imported for side effects on MS Windows\n-    import Queue as _unused_module_Queue  # noqa: F401\n-\n-xrange = six.moves.xrange\n-\n-log = logging.getLogger(__name__)\n-\n-_Default = object()\n-\n-\n-# Pool objects\n-class ConnectionPool(object):\n-    \"\"\"\n-    Base class for all connection pools, such as\n-    :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.\n-    \"\"\"\n-\n-    scheme = None\n-    QueueCls = queue.LifoQueue\n-\n-    def __init__(self, host, port=None):\n-        if not host:\n-            raise LocationValueError(\"No host specified.\")\n-\n-        self.host = _ipv6_host(host).lower()\n-        self.port = port\n-\n-    def __str__(self):\n-        return '%s(host=%r, port=%r)' % (type(self).__name__,\n-                                         self.host, self.port)\n-\n-    def __enter__(self):\n-        return self\n-\n-    def __exit__(self, exc_type, exc_val, exc_tb):\n-        self.close()\n-        # Return False to re-raise any potential exceptions\n-        return False\n-\n-    def close(self):\n-        \"\"\"\n-        Close all pooled connections and disable the pool.\n-        \"\"\"\n-        pass\n-\n-\n-# This is taken from http://hg.python.org/cpython/file/7aaba721ebc0/Lib/socket.py#l252\n-_blocking_errnos = set([errno.EAGAIN, errno.EWOULDBLOCK])\n-\n-\n-class HTTPConnectionPool(ConnectionPool, RequestMethods):\n-    \"\"\"\n-    Thread-safe connection pool for one host.\n-\n-    :param host:\n-        Host used for this HTTP Connection (e.g. \"localhost\"), passed into\n-        :class:`httplib.HTTPConnection`.\n-\n-    :param port:\n-        Port used for this HTTP Connection (None is equivalent to 80), passed\n-        into :class:`httplib.HTTPConnection`.\n-\n-    :param strict:\n-        Causes BadStatusLine to be raised if the status line can't be parsed\n-        as a valid HTTP/1.0 or 1.1 status line, passed into\n-        :class:`httplib.HTTPConnection`.\n-\n-        .. note::\n-           Only works in Python 2. This parameter is ignored in Python 3.\n-\n-    :param timeout:\n-        Socket timeout in seconds for each individual connection. This can\n-        be a float or integer, which sets the timeout for the HTTP request,\n-        or an instance of :class:`urllib3.util.Timeout` which gives you more\n-        fine-grained control over request timeouts. After the constructor has\n-        been parsed, this is always a `urllib3.util.Timeout` object.\n-\n-    :param maxsize:\n-        Number of connections to save that can be reused. More than 1 is useful\n-        in multithreaded situations. If ``block`` is set to False, more\n-        connections will be created but they will not be saved once they've\n-        been used.\n-\n-    :param block:\n-        If set to True, no more than ``maxsize`` connections will be used at\n-        a time. When no free connections are available, the call will block\n-        until a connection has been released. This is a useful side effect for\n-        particular multithreaded situations where one does not want to use more\n-        than maxsize connections per host to prevent flooding.\n-\n-    :param headers:\n-        Headers to include with all requests, unless other headers are given\n-        explicitly.\n-\n-    :param retries:\n-        Retry configuration to use by default with requests in this pool.\n-\n-    :param _proxy:\n-        Parsed proxy URL, should not be used directly, instead, see\n-        :class:`urllib3.connectionpool.ProxyManager`\"\n-\n-    :param _proxy_headers:\n-        A dictionary with proxy headers, should not be used directly,\n-        instead, see :class:`urllib3.connectionpool.ProxyManager`\"\n-\n-    :param \\\\**conn_kw:\n-        Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,\n-        :class:`urllib3.connection.HTTPSConnection` instances.\n-    \"\"\"\n-\n-    scheme = 'http'\n-    ConnectionCls = HTTPConnection\n-    ResponseCls = HTTPResponse\n-\n-    def __init__(self, host, port=None, strict=False,\n-                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n-                 headers=None, retries=None,\n-                 _proxy=None, _proxy_headers=None,\n-                 **conn_kw):\n-        ConnectionPool.__init__(self, host, port)\n-        RequestMethods.__init__(self, headers)\n-\n-        self.strict = strict\n-\n-        if not isinstance(timeout, Timeout):\n-            timeout = Timeout.from_float(timeout)\n-\n-        if retries is None:\n-            retries = Retry.DEFAULT\n-\n-        self.timeout = timeout\n-        self.retries = retries\n-\n-        self.pool = self.QueueCls(maxsize)\n-        self.block = block\n-\n-        self.proxy = _proxy\n-        self.proxy_headers = _proxy_headers or {}\n-\n-        # Fill the queue up so that doing get() on it will block properly\n-        for _ in xrange(maxsize):\n-            self.pool.put(None)\n-\n-        # These are mostly for testing and debugging purposes.\n-        self.num_connections = 0\n-        self.num_requests = 0\n-        self.conn_kw = conn_kw\n-\n-        if self.proxy:\n-            # Enable Nagle's algorithm for proxies, to avoid packet fragmentation.\n-            # We cannot know if the user has added default socket options, so we cannot replace the\n-            # list.\n-            self.conn_kw.setdefault('socket_options', [])\n-\n-    def _new_conn(self):\n-        \"\"\"\n-        Return a fresh :class:`HTTPConnection`.\n-        \"\"\"\n-        self.num_connections += 1\n-        log.debug(\"Starting new HTTP connection (%d): %s\",\n-                  self.num_connections, self.host)\n-\n-        conn = self.ConnectionCls(host=self.host, port=self.port,\n-                                  timeout=self.timeout.connect_timeout,\n-                                  strict=self.strict, **self.conn_kw)\n-        return conn\n-\n-    def _get_conn(self, timeout=None):\n-        \"\"\"\n-        Get a connection. Will return a pooled connection if one is available.\n-\n-        If no connections are available and :prop:`.block` is ``False``, then a\n-        fresh connection is returned.\n-\n-        :param timeout:\n-            Seconds to wait before giving up and raising\n-            :class:`urllib3.exceptions.EmptyPoolError` if the pool is empty and\n-            :prop:`.block` is ``True``.\n-        \"\"\"\n-        conn = None\n-        try:\n-            conn = self.pool.get(block=self.block, timeout=timeout)\n-\n-        except AttributeError:  # self.pool is None\n-            raise ClosedPoolError(self, \"Pool is closed.\")\n-\n-        except queue.Empty:\n-            if self.block:\n-                raise EmptyPoolError(self,\n-                                     \"Pool reached maximum size and no more \"\n-                                     \"connections are allowed.\")\n-            pass  # Oh well, we'll create a new connection then\n-\n-        # If this is a persistent connection, check if it got disconnected\n-        if conn and is_connection_dropped(conn):\n-            log.debug(\"Resetting dropped connection: %s\", self.host)\n-            conn.close()\n-            if getattr(conn, 'auto_open', 1) == 0:\n-                # This is a proxied connection that has been mutated by\n-                # httplib._tunnel() and cannot be reused (since it would\n-                # attempt to bypass the proxy)\n-                conn = None\n-\n-        return conn or self._new_conn()\n-\n-    def _put_conn(self, conn):\n-        \"\"\"\n-        Put a connection back into the pool.\n-\n-        :param conn:\n-            Connection object for the current host and port as returned by\n-            :meth:`._new_conn` or :meth:`._get_conn`.\n-\n-        If the pool is already full, the connection is closed and discarded\n-        because we exceeded maxsize. If connections are discarded frequently,\n-        then maxsize should be increased.\n-\n-        If the pool is closed, then the connection will be closed and discarded.\n-        \"\"\"\n-        try:\n-            self.pool.put(conn, block=False)\n-            return  # Everything is dandy, done.\n-        except AttributeError:\n-            # self.pool is None.\n-            pass\n-        except queue.Full:\n-            # This should never happen if self.block == True\n-            log.warning(\n-                \"Connection pool is full, discarding connection: %s\",\n-                self.host)\n-\n-        # Connection never got put back into the pool, close it.\n-        if conn:\n-            conn.close()\n-\n-    def _validate_conn(self, conn):\n-        \"\"\"\n-        Called right before a request is made, after the socket is created.\n-        \"\"\"\n-        pass\n-\n-    def _prepare_proxy(self, conn):\n-        # Nothing to do for HTTP connections.\n-        pass\n-\n-    def _get_timeout(self, timeout):\n-        \"\"\" Helper that always returns a :class:`urllib3.util.Timeout` \"\"\"\n-        if timeout is _Default:\n-            return self.timeout.clone()\n-\n-        if isinstance(timeout, Timeout):\n-            return timeout.clone()\n-        else:\n-            # User passed us an int/float. This is for backwards compatibility,\n-            # can be removed later\n-            return Timeout.from_float(timeout)\n-\n-    def _raise_timeout(self, err, url, timeout_value):\n-        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n-\n-        if isinstance(err, SocketTimeout):\n-            raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\n-\n-        # See the above comment about EAGAIN in Python 3. In Python 2 we have\n-        # to specifically catch it and throw the timeout error\n-        if hasattr(err, 'errno') and err.errno in _blocking_errnos:\n-            raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\n-\n-        # Catch possible read timeouts thrown as SSL errors. If not the\n-        # case, rethrow the original. We need to do this because of:\n-        # http://bugs.python.org/issue10272\n-        if 'timed out' in str(err) or 'did not complete (read)' in str(err):  # Python 2.6\n-            raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\n-\n-    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,\n-                      **httplib_request_kw):\n-        \"\"\"\n-        Perform a request on a given urllib connection object taken from our\n-        pool.\n-\n-        :param conn:\n-            a connection from one of our connection pools\n-\n-        :param timeout:\n-            Socket timeout in seconds for the request. This can be a\n-            float or integer, which will set the same timeout value for\n-            the socket connect and the socket read, or an instance of\n-            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n-            control over your timeouts.\n-        \"\"\"\n-        self.num_requests += 1\n-\n-        timeout_obj = self._get_timeout(timeout)\n-        timeout_obj.start_connect()\n-        conn.timeout = timeout_obj.connect_timeout\n-\n-        # Trigger any extra validation we need to do.\n-        try:\n-            self._validate_conn(conn)\n-        except (SocketTimeout, BaseSSLError) as e:\n-            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n-            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n-            raise\n-\n-        # conn.request() calls httplib.*.request, not the method in\n-        # urllib3.request. It also calls makefile (recv) on the socket.\n-        if chunked:\n-            conn.request_chunked(method, url, **httplib_request_kw)\n-        else:\n-            conn.request(method, url, **httplib_request_kw)\n-\n-        # Reset the timeout for the recv() on the socket\n-        read_timeout = timeout_obj.read_timeout\n-\n-        # App Engine doesn't have a sock attr\n-        if getattr(conn, 'sock', None):\n-            # In Python 3 socket.py will catch EAGAIN and return None when you\n-            # try and read into the file pointer created by http.client, which\n-            # instead raises a BadStatusLine exception. Instead of catching\n-            # the exception and assuming all BadStatusLine exceptions are read\n-            # timeouts, check for a zero timeout before making the request.\n-            if read_timeout == 0:\n-                raise ReadTimeoutError(\n-                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout)\n-            if read_timeout is Timeout.DEFAULT_TIMEOUT:\n-                conn.sock.settimeout(socket.getdefaulttimeout())\n-            else:  # None or a value\n-                conn.sock.settimeout(read_timeout)\n-\n-        # Receive the response from the server\n-        try:\n-            try:  # Python 2.7, use buffering of HTTP responses\n-                httplib_response = conn.getresponse(buffering=True)\n-            except TypeError:  # Python 2.6 and older, Python 3\n-                try:\n-                    httplib_response = conn.getresponse()\n-                except Exception as e:\n-                    # Remove the TypeError from the exception chain in Python 3;\n-                    # otherwise it looks like a programming error was the cause.\n-                    six.raise_from(e, None)\n-        except (SocketTimeout, BaseSSLError, SocketError) as e:\n-            self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n-            raise\n-\n-        # AppEngine doesn't have a version attr.\n-        http_version = getattr(conn, '_http_vsn_str', 'HTTP/?')\n-        log.debug(\"%s://%s:%s \\\"%s %s %s\\\" %s %s\", self.scheme, self.host, self.port,\n-                  method, url, http_version, httplib_response.status,\n-                  httplib_response.length)\n-\n-        try:\n-            assert_header_parsing(httplib_response.msg)\n-        except HeaderParsingError as hpe:  # Platform-specific: Python 3\n-            log.warning(\n-                'Failed to parse headers (url=%s): %s',\n-                self._absolute_url(url), hpe, exc_info=True)\n-\n-        return httplib_response\n-\n-    def _absolute_url(self, path):\n-        return Url(scheme=self.scheme, host=self.host, port=self.port, path=path).url\n-\n-    def close(self):\n-        \"\"\"\n-        Close all pooled connections and disable the pool.\n-        \"\"\"\n-        # Disable access to the pool\n-        old_pool, self.pool = self.pool, None\n-\n-        try:\n-            while True:\n-                conn = old_pool.get(block=False)\n-                if conn:\n-                    conn.close()\n-\n-        except queue.Empty:\n-            pass  # Done.\n-\n-    def is_same_host(self, url):\n-        \"\"\"\n-        Check if the given ``url`` is a member of the same host as this\n-        connection pool.\n-        \"\"\"\n-        if url.startswith('/'):\n-            return True\n-\n-        # TODO: Add optional support for socket.gethostbyname checking.\n-        scheme, host, port = get_host(url)\n-\n-        host = _ipv6_host(host).lower()\n-\n-        # Use explicit default port for comparison when none is given\n-        if self.port and not port:\n-            port = port_by_scheme.get(scheme)\n-        elif not self.port and port == port_by_scheme.get(scheme):\n-            port = None\n-\n-        return (scheme, host, port) == (self.scheme, self.host, self.port)\n-\n-    def urlopen(self, method, url, body=None, headers=None, retries=None,\n-                redirect=True, assert_same_host=True, timeout=_Default,\n-                pool_timeout=None, release_conn=None, chunked=False,\n-                body_pos=None, **response_kw):\n-        \"\"\"\n-        Get a connection from the pool and perform an HTTP request. This is the\n-        lowest level call for making a request, so you'll need to specify all\n-        the raw details.\n-\n-        .. note::\n-\n-           More commonly, it's appropriate to use a convenience method provided\n-           by :class:`.RequestMethods`, such as :meth:`request`.\n-\n-        .. note::\n-\n-           `release_conn` will only behave as expected if\n-           `preload_content=False` because we want to make\n-           `preload_content=False` the default behaviour someday soon without\n-           breaking backwards compatibility.\n-\n-        :param method:\n-            HTTP request method (such as GET, POST, PUT, etc.)\n-\n-        :param body:\n-            Data to send in the request body (useful for creating\n-            POST requests, see HTTPConnectionPool.post_url for\n-            more convenience).\n-\n-        :param headers:\n-            Dictionary of custom headers to send, such as User-Agent,\n-            If-None-Match, etc. If None, pool headers are used. If provided,\n-            these headers completely replace any pool-specific headers.\n-\n-        :param retries:\n-            Configure the number of retries to allow before raising a\n-            :class:`~urllib3.exceptions.MaxRetryError` exception.\n-\n-            Pass ``None`` to retry until you receive a response. Pass a\n-            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n-            over different types of retries.\n-            Pass an integer number to retry connection errors that many times,\n-            but no other types of errors. Pass zero to never retry.\n-\n-            If ``False``, then retries are disabled and any exception is raised\n-            immediately. Also, instead of raising a MaxRetryError on redirects,\n-            the redirect response will be returned.\n-\n-        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n-\n-        :param redirect:\n-            If True, automatically handle redirects (status codes 301, 302,\n-            303, 307, 308). Each redirect counts as a retry. Disabling retries\n-            will disable redirect, too.\n-\n-        :param assert_same_host:\n-            If ``True``, will make sure that the host of the pool requests is\n-            consistent else will raise HostChangedError. When False, you can\n-            use the pool on an HTTP proxy and request foreign hosts.\n-\n-        :param timeout:\n-            If specified, overrides the default timeout for this one\n-            request. It may be a float (in seconds) or an instance of\n-            :class:`urllib3.util.Timeout`.\n-\n-        :param pool_timeout:\n-            If set and the pool is set to block=True, then this method will\n-            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n-            connection is available within the time period.\n-\n-        :param release_conn:\n-            If False, then the urlopen call will not release the connection\n-            back into the pool once a response is received (but will release if\n-            you read the entire contents of the response such as when\n-            `preload_content=True`). This is useful if you're not preloading\n-            the response's content immediately. You will need to call\n-            ``r.release_conn()`` on the response ``r`` to return the connection\n-            back into the pool. If None, it takes the value of\n-            ``response_kw.get('preload_content', True)``.\n-\n-        :param chunked:\n-            If True, urllib3 will send the body using chunked transfer\n-            encoding. Otherwise, urllib3 will send the body using the standard\n-            content-length form. Defaults to False.\n-\n-        :param int body_pos:\n-            Position to seek to in file-like body in the event of a retry or\n-            redirect. Typically this won't need to be set because urllib3 will\n-            auto-populate the value when needed.\n-\n-        :param \\\\**response_kw:\n-            Additional parameters are passed to\n-            :meth:`urllib3.response.HTTPResponse.from_httplib`\n-        \"\"\"\n-        if headers is None:\n-            headers = self.headers\n-\n-        if not isinstance(retries, Retry):\n-            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n-\n-        if release_conn is None:\n-            release_conn = response_kw.get('preload_content', True)\n-\n-        # Check host\n-        if assert_same_host and not self.is_same_host(url):\n-            raise HostChangedError(self, url, retries)\n-\n-        conn = None\n-\n-        # Track whether `conn` needs to be released before\n-        # returning/raising/recursing. Update this variable if necessary, and\n-        # leave `release_conn` constant throughout the function. That way, if\n-        # the function recurses, the original value of `release_conn` will be\n-        # passed down into the recursive call, and its value will be respected.\n-        #\n-        # See issue #651 [1] for details.\n-        #\n-        # [1] <https://github.com/shazow/urllib3/issues/651>\n-        release_this_conn = release_conn\n-\n-        # Merge the proxy headers. Only do this in HTTP. We have to copy the\n-        # headers dict so we can safely change it without those changes being\n-        # reflected in anyone else's copy.\n-        if self.scheme == 'http':\n-            headers = headers.copy()\n-            headers.update(self.proxy_headers)\n-\n-        # Must keep the exception bound to a separate variable or else Python 3\n-        # complains about UnboundLocalError.\n-        err = None\n-\n-        # Keep track of whether we cleanly exited the except block. This\n-        # ensures we do proper cleanup in finally.\n-        clean_exit = False\n-\n-        # Rewind body position, if needed. Record current position\n-        # for future rewinds in the event of a redirect/retry.\n-        body_pos = set_file_position(body, body_pos)\n-\n-        try:\n-            # Request a connection from the queue.\n-            timeout_obj = self._get_timeout(timeout)\n-            conn = self._get_conn(timeout=pool_timeout)\n-\n-            conn.timeout = timeout_obj.connect_timeout\n-\n-            is_new_proxy_conn = self.proxy is not None and not getattr(conn, 'sock', None)\n-            if is_new_proxy_conn:\n-                self._prepare_proxy(conn)\n-\n-            # Make the request on the httplib connection object.\n-            httplib_response = self._make_request(conn, method, url,\n-                                                  timeout=timeout_obj,\n-                                                  body=body, headers=headers,\n-                                                  chunked=chunked)\n-\n-            # If we're going to release the connection in ``finally:``, then\n-            # the response doesn't need to know about the connection. Otherwise\n-            # it will also try to release it and we'll have a double-release\n-            # mess.\n-            response_conn = conn if not release_conn else None\n-\n-            # Pass method to Response for length checking\n-            response_kw['request_method'] = method\n-\n-            # Import httplib's response into our own wrapper object\n-            response = self.ResponseCls.from_httplib(httplib_response,\n-                                                     pool=self,\n-                                                     connection=response_conn,\n-                                                     retries=retries,\n-                                                     **response_kw)\n-\n-            # Everything went great!\n-            clean_exit = True\n-\n-        except queue.Empty:\n-            # Timed out by queue.\n-            raise EmptyPoolError(self, \"No pool connections are available.\")\n-\n-        except (BaseSSLError, CertificateError) as e:\n-            # Close the connection. If a connection is reused on which there\n-            # was a Certificate error, the next request will certainly raise\n-            # another Certificate error.\n-            clean_exit = False\n-            raise SSLError(e)\n-\n-        except SSLError:\n-            # Treat SSLError separately from BaseSSLError to preserve\n-            # traceback.\n-            clean_exit = False\n-            raise\n-\n-        except (TimeoutError, HTTPException, SocketError, ProtocolError) as e:\n-            # Discard the connection for these exceptions. It will be\n-            # be replaced during the next _get_conn() call.\n-            clean_exit = False\n-\n-            if isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n-                e = ProxyError('Cannot connect to proxy.', e)\n-            elif isinstance(e, (SocketError, HTTPException)):\n-                e = ProtocolError('Connection aborted.', e)\n-\n-            retries = retries.increment(method, url, error=e, _pool=self,\n-                                        _stacktrace=sys.exc_info()[2])\n-            retries.sleep()\n-\n-            # Keep track of the error for the retry warning.\n-            err = e\n-\n-        finally:\n-            if not clean_exit:\n-                # We hit some kind of exception, handled or otherwise. We need\n-                # to throw the connection away unless explicitly told not to.\n-                # Close the connection, set the variable to None, and make sure\n-                # we put the None back in the pool to avoid leaking it.\n-                conn = conn and conn.close()\n-                release_this_conn = True\n-\n-            if release_this_conn:\n-                # Put the connection back to be reused. If the connection is\n-                # expired then it will be None, which will get replaced with a\n-                # fresh connection during _get_conn.\n-                self._put_conn(conn)\n-\n-        if not conn:\n-            # Try again\n-            log.warning(\"Retrying (%r) after connection \"\n-                        \"broken by '%r': %s\", retries, err, url)\n-            return self.urlopen(method, url, body, headers, retries,\n-                                redirect, assert_same_host,\n-                                timeout=timeout, pool_timeout=pool_timeout,\n-                                release_conn=release_conn, body_pos=body_pos,\n-                                **response_kw)\n-\n-        # Handle redirect?\n-        redirect_location = redirect and response.get_redirect_location()\n-        if redirect_location:\n-            if response.status == 303:\n-                method = 'GET'\n-\n-            try:\n-                retries = retries.increment(method, url, response=response, _pool=self)\n-            except MaxRetryError:\n-                if retries.raise_on_redirect:\n-                    # Release the connection for this response, since we're not\n-                    # returning it to be released manually.\n-                    response.release_conn()\n-                    raise\n-                return response\n-\n-            retries.sleep_for_retry(response)\n-            log.debug(\"Redirecting %s -> %s\", url, redirect_location)\n-            return self.urlopen(\n-                method, redirect_location, body, headers,\n-                retries=retries, redirect=redirect,\n-                assert_same_host=assert_same_host,\n-                timeout=timeout, pool_timeout=pool_timeout,\n-                release_conn=release_conn, body_pos=body_pos,\n-                **response_kw)\n-\n-        # Check if we should retry the HTTP response.\n-        has_retry_after = bool(response.getheader('Retry-After'))\n-        if retries.is_retry(method, response.status, has_retry_after):\n-            try:\n-                retries = retries.increment(method, url, response=response, _pool=self)\n-            except MaxRetryError:\n-                if retries.raise_on_status:\n-                    # Release the connection for this response, since we're not\n-                    # returning it to be released manually.\n-                    response.release_conn()\n-                    raise\n-                return response\n-            retries.sleep(response)\n-            log.debug(\"Retry: %s\", url)\n-            return self.urlopen(\n-                method, url, body, headers,\n-                retries=retries, redirect=redirect,\n-                assert_same_host=assert_same_host,\n-                timeout=timeout, pool_timeout=pool_timeout,\n-                release_conn=release_conn,\n-                body_pos=body_pos, **response_kw)\n-\n-        return response\n-\n-\n-class HTTPSConnectionPool(HTTPConnectionPool):\n-    \"\"\"\n-    Same as :class:`.HTTPConnectionPool`, but HTTPS.\n-\n-    When Python is compiled with the :mod:`ssl` module, then\n-    :class:`.VerifiedHTTPSConnection` is used, which *can* verify certificates,\n-    instead of :class:`.HTTPSConnection`.\n-\n-    :class:`.VerifiedHTTPSConnection` uses one of ``assert_fingerprint``,\n-    ``assert_hostname`` and ``host`` in this order to verify connections.\n-    If ``assert_hostname`` is False, no verification is done.\n-\n-    The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,\n-    ``ca_cert_dir``, and ``ssl_version`` are only used if :mod:`ssl` is\n-    available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade\n-    the connection socket into an SSL socket.\n-    \"\"\"\n-\n-    scheme = 'https'\n-    ConnectionCls = HTTPSConnection\n-\n-    def __init__(self, host, port=None,\n-                 strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1,\n-                 block=False, headers=None, retries=None,\n-                 _proxy=None, _proxy_headers=None,\n-                 key_file=None, cert_file=None, cert_reqs=None,\n-                 ca_certs=None, ssl_version=None,\n-                 assert_hostname=None, assert_fingerprint=None,\n-                 ca_cert_dir=None, **conn_kw):\n-\n-        HTTPConnectionPool.__init__(self, host, port, strict, timeout, maxsize,\n-                                    block, headers, retries, _proxy, _proxy_headers,\n-                                    **conn_kw)\n-\n-        if ca_certs and cert_reqs is None:\n-            cert_reqs = 'CERT_REQUIRED'\n-\n-        self.key_file = key_file\n-        self.cert_file = cert_file\n-        self.cert_reqs = cert_reqs\n-        self.ca_certs = ca_certs\n-        self.ca_cert_dir = ca_cert_dir\n-        self.ssl_version = ssl_version\n-        self.assert_hostname = assert_hostname\n-        self.assert_fingerprint = assert_fingerprint\n-\n-    def _prepare_conn(self, conn):\n-        \"\"\"\n-        Prepare the ``connection`` for :meth:`urllib3.util.ssl_wrap_socket`\n-        and establish the tunnel if proxy is used.\n-        \"\"\"\n-\n-        if isinstance(conn, VerifiedHTTPSConnection):\n-            conn.set_cert(key_file=self.key_file,\n-                          cert_file=self.cert_file,\n-                          cert_reqs=self.cert_reqs,\n-                          ca_certs=self.ca_certs,\n-                          ca_cert_dir=self.ca_cert_dir,\n-                          assert_hostname=self.assert_hostname,\n-                          assert_fingerprint=self.assert_fingerprint)\n-            conn.ssl_version = self.ssl_version\n-        return conn\n-\n-    def _prepare_proxy(self, conn):\n-        \"\"\"\n-        Establish tunnel connection early, because otherwise httplib\n-        would improperly set Host: header to proxy's IP:port.\n-        \"\"\"\n-        # Python 2.7+\n-        try:\n-            set_tunnel = conn.set_tunnel\n-        except AttributeError:  # Platform-specific: Python 2.6\n-            set_tunnel = conn._set_tunnel\n-\n-        if sys.version_info <= (2, 6, 4) and not self.proxy_headers:  # Python 2.6.4 and older\n-            set_tunnel(self.host, self.port)\n-        else:\n-            set_tunnel(self.host, self.port, self.proxy_headers)\n-\n-        conn.connect()\n-\n-    def _new_conn(self):\n-        \"\"\"\n-        Return a fresh :class:`httplib.HTTPSConnection`.\n-        \"\"\"\n-        self.num_connections += 1\n-        log.debug(\"Starting new HTTPS connection (%d): %s\",\n-                  self.num_connections, self.host)\n-\n-        if not self.ConnectionCls or self.ConnectionCls is DummyConnection:\n-            raise SSLError(\"Can't connect to HTTPS URL because the SSL \"\n-                           \"module is not available.\")\n-\n-        actual_host = self.host\n-        actual_port = self.port\n-        if self.proxy is not None:\n-            actual_host = self.proxy.host\n-            actual_port = self.proxy.port\n-\n-        conn = self.ConnectionCls(host=actual_host, port=actual_port,\n-                                  timeout=self.timeout.connect_timeout,\n-                                  strict=self.strict, **self.conn_kw)\n-\n-        return self._prepare_conn(conn)\n-\n-    def _validate_conn(self, conn):\n-        \"\"\"\n-        Called right before a request is made, after the socket is created.\n-        \"\"\"\n-        super(HTTPSConnectionPool, self)._validate_conn(conn)\n-\n-        # Force connect early to allow us to validate the connection.\n-        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n-            conn.connect()\n-\n-        if not conn.is_verified:\n-            warnings.warn((\n-                'Unverified HTTPS request is being made. '\n-                'Adding certificate verification is strongly advised. See: '\n-                'https://urllib3.readthedocs.io/en/latest/advanced-usage.html'\n-                '#ssl-warnings'),\n-                InsecureRequestWarning)\n-\n-\n-def connection_from_url(url, **kw):\n-    \"\"\"\n-    Given a url, return an :class:`.ConnectionPool` instance of its host.\n-\n-    This is a shortcut for not having to parse out the scheme, host, and port\n-    of the url before creating an :class:`.ConnectionPool` instance.\n-\n-    :param url:\n-        Absolute URL string that must include the scheme. Port is optional.\n-\n-    :param \\\\**kw:\n-        Passes additional parameters to the constructor of the appropriate\n-        :class:`.ConnectionPool`. Useful for specifying things like\n-        timeout, maxsize, headers, etc.\n-\n-    Example::\n-\n-        >>> conn = connection_from_url('http://google.com/')\n-        >>> r = conn.request('GET', '/')\n-    \"\"\"\n-    scheme, host, port = get_host(url)\n-    port = port or port_by_scheme.get(scheme, 80)\n-    if scheme == 'https':\n-        return HTTPSConnectionPool(host, port=port, **kw)\n-    else:\n-        return HTTPConnectionPool(host, port=port, **kw)\n-\n-\n-def _ipv6_host(host):\n-    \"\"\"\n-    Process IPv6 address literals\n-    \"\"\"\n-\n-    # httplib doesn't like it when we include brackets in IPv6 addresses\n-    # Specifically, if we include brackets but also pass the port then\n-    # httplib crazily doubles up the square brackets on the Host header.\n-    # Instead, we need to make sure we never pass ``None`` as the port.\n-    # However, for backward compatibility reasons we can't actually\n-    # *assert* that.  See http://bugs.python.org/issue28539\n-    #\n-    # Also if an IPv6 address literal has a zone identifier, the\n-    # percent sign might be URIencoded, convert it back into ASCII\n-    if host.startswith('[') and host.endswith(']'):\n-        host = host.replace('%25', '%').strip('[]')\n-    return host\n\n\n\n@@ -1,590 +0,0 @@\n-\"\"\"\n-This module uses ctypes to bind a whole bunch of functions and constants from\n-SecureTransport. The goal here is to provide the low-level API to\n-SecureTransport. These are essentially the C-level functions and constants, and\n-they're pretty gross to work with.\n-\n-This code is a bastardised version of the code found in Will Bond's oscrypto\n-library. An enormous debt is owed to him for blazing this trail for us. For\n-that reason, this code should be considered to be covered both by urllib3's\n-license and by oscrypto's:\n-\n-    Copyright (c) 2015-2016 Will Bond <will@wbond.net>\n-\n-    Permission is hereby granted, free of charge, to any person obtaining a\n-    copy of this software and associated documentation files (the \"Software\"),\n-    to deal in the Software without restriction, including without limitation\n-    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n-    and/or sell copies of the Software, and to permit persons to whom the\n-    Software is furnished to do so, subject to the following conditions:\n-\n-    The above copyright notice and this permission notice shall be included in\n-    all copies or substantial portions of the Software.\n-\n-    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n-    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n-    DEALINGS IN THE SOFTWARE.\n-\"\"\"\n-from __future__ import absolute_import\n-\n-import platform\n-from ctypes.util import find_library\n-from ctypes import (\n-    c_void_p, c_int32, c_char_p, c_size_t, c_byte, c_uint32, c_ulong, c_long,\n-    c_bool\n-)\n-from ctypes import CDLL, POINTER, CFUNCTYPE\n-\n-\n-security_path = find_library('Security')\n-if not security_path:\n-    raise ImportError('The library Security could not be found')\n-\n-\n-core_foundation_path = find_library('CoreFoundation')\n-if not core_foundation_path:\n-    raise ImportError('The library CoreFoundation could not be found')\n-\n-\n-version = platform.mac_ver()[0]\n-version_info = tuple(map(int, version.split('.')))\n-if version_info < (10, 8):\n-    raise OSError(\n-        'Only OS X 10.8 and newer are supported, not %s.%s' % (\n-            version_info[0], version_info[1]\n-        )\n-    )\n-\n-Security = CDLL(security_path, use_errno=True)\n-CoreFoundation = CDLL(core_foundation_path, use_errno=True)\n-\n-Boolean = c_bool\n-CFIndex = c_long\n-CFStringEncoding = c_uint32\n-CFData = c_void_p\n-CFString = c_void_p\n-CFArray = c_void_p\n-CFMutableArray = c_void_p\n-CFDictionary = c_void_p\n-CFError = c_void_p\n-CFType = c_void_p\n-CFTypeID = c_ulong\n-\n-CFTypeRef = POINTER(CFType)\n-CFAllocatorRef = c_void_p\n-\n-OSStatus = c_int32\n-\n-CFDataRef = POINTER(CFData)\n-CFStringRef = POINTER(CFString)\n-CFArrayRef = POINTER(CFArray)\n-CFMutableArrayRef = POINTER(CFMutableArray)\n-CFDictionaryRef = POINTER(CFDictionary)\n-CFArrayCallBacks = c_void_p\n-CFDictionaryKeyCallBacks = c_void_p\n-CFDictionaryValueCallBacks = c_void_p\n-\n-SecCertificateRef = POINTER(c_void_p)\n-SecExternalFormat = c_uint32\n-SecExternalItemType = c_uint32\n-SecIdentityRef = POINTER(c_void_p)\n-SecItemImportExportFlags = c_uint32\n-SecItemImportExportKeyParameters = c_void_p\n-SecKeychainRef = POINTER(c_void_p)\n-SSLProtocol = c_uint32\n-SSLCipherSuite = c_uint32\n-SSLContextRef = POINTER(c_void_p)\n-SecTrustRef = POINTER(c_void_p)\n-SSLConnectionRef = c_uint32\n-SecTrustResultType = c_uint32\n-SecTrustOptionFlags = c_uint32\n-SSLProtocolSide = c_uint32\n-SSLConnectionType = c_uint32\n-SSLSessionOption = c_uint32\n-\n-\n-try:\n-    Security.SecItemImport.argtypes = [\n-        CFDataRef,\n-        CFStringRef,\n-        POINTER(SecExternalFormat),\n-        POINTER(SecExternalItemType),\n-        SecItemImportExportFlags,\n-        POINTER(SecItemImportExportKeyParameters),\n-        SecKeychainRef,\n-        POINTER(CFArrayRef),\n-    ]\n-    Security.SecItemImport.restype = OSStatus\n-\n-    Security.SecCertificateGetTypeID.argtypes = []\n-    Security.SecCertificateGetTypeID.restype = CFTypeID\n-\n-    Security.SecIdentityGetTypeID.argtypes = []\n-    Security.SecIdentityGetTypeID.restype = CFTypeID\n-\n-    Security.SecKeyGetTypeID.argtypes = []\n-    Security.SecKeyGetTypeID.restype = CFTypeID\n-\n-    Security.SecCertificateCreateWithData.argtypes = [\n-        CFAllocatorRef,\n-        CFDataRef\n-    ]\n-    Security.SecCertificateCreateWithData.restype = SecCertificateRef\n-\n-    Security.SecCertificateCopyData.argtypes = [\n-        SecCertificateRef\n-    ]\n-    Security.SecCertificateCopyData.restype = CFDataRef\n-\n-    Security.SecCopyErrorMessageString.argtypes = [\n-        OSStatus,\n-        c_void_p\n-    ]\n-    Security.SecCopyErrorMessageString.restype = CFStringRef\n-\n-    Security.SecIdentityCreateWithCertificate.argtypes = [\n-        CFTypeRef,\n-        SecCertificateRef,\n-        POINTER(SecIdentityRef)\n-    ]\n-    Security.SecIdentityCreateWithCertificate.restype = OSStatus\n-\n-    Security.SecKeychainCreate.argtypes = [\n-        c_char_p,\n-        c_uint32,\n-        c_void_p,\n-        Boolean,\n-        c_void_p,\n-        POINTER(SecKeychainRef)\n-    ]\n-    Security.SecKeychainCreate.restype = OSStatus\n-\n-    Security.SecKeychainDelete.argtypes = [\n-        SecKeychainRef\n-    ]\n-    Security.SecKeychainDelete.restype = OSStatus\n-\n-    Security.SecPKCS12Import.argtypes = [\n-        CFDataRef,\n-        CFDictionaryRef,\n-        POINTER(CFArrayRef)\n-    ]\n-    Security.SecPKCS12Import.restype = OSStatus\n-\n-    SSLReadFunc = CFUNCTYPE(OSStatus, SSLConnectionRef, c_void_p, POINTER(c_size_t))\n-    SSLWriteFunc = CFUNCTYPE(OSStatus, SSLConnectionRef, POINTER(c_byte), POINTER(c_size_t))\n-\n-    Security.SSLSetIOFuncs.argtypes = [\n-        SSLContextRef,\n-        SSLReadFunc,\n-        SSLWriteFunc\n-    ]\n-    Security.SSLSetIOFuncs.restype = OSStatus\n-\n-    Security.SSLSetPeerID.argtypes = [\n-        SSLContextRef,\n-        c_char_p,\n-        c_size_t\n-    ]\n-    Security.SSLSetPeerID.restype = OSStatus\n-\n-    Security.SSLSetCertificate.argtypes = [\n-        SSLContextRef,\n-        CFArrayRef\n-    ]\n-    Security.SSLSetCertificate.restype = OSStatus\n-\n-    Security.SSLSetCertificateAuthorities.argtypes = [\n-        SSLContextRef,\n-        CFTypeRef,\n-        Boolean\n-    ]\n-    Security.SSLSetCertificateAuthorities.restype = OSStatus\n-\n-    Security.SSLSetConnection.argtypes = [\n-        SSLContextRef,\n-        SSLConnectionRef\n-    ]\n-    Security.SSLSetConnection.restype = OSStatus\n-\n-    Security.SSLSetPeerDomainName.argtypes = [\n-        SSLContextRef,\n-        c_char_p,\n-        c_size_t\n-    ]\n-    Security.SSLSetPeerDomainName.restype = OSStatus\n-\n-    Security.SSLHandshake.argtypes = [\n-        SSLContextRef\n-    ]\n-    Security.SSLHandshake.restype = OSStatus\n-\n-    Security.SSLRead.argtypes = [\n-        SSLContextRef,\n-        c_char_p,\n-        c_size_t,\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLRead.restype = OSStatus\n-\n-    Security.SSLWrite.argtypes = [\n-        SSLContextRef,\n-        c_char_p,\n-        c_size_t,\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLWrite.restype = OSStatus\n-\n-    Security.SSLClose.argtypes = [\n-        SSLContextRef\n-    ]\n-    Security.SSLClose.restype = OSStatus\n-\n-    Security.SSLGetNumberSupportedCiphers.argtypes = [\n-        SSLContextRef,\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLGetNumberSupportedCiphers.restype = OSStatus\n-\n-    Security.SSLGetSupportedCiphers.argtypes = [\n-        SSLContextRef,\n-        POINTER(SSLCipherSuite),\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLGetSupportedCiphers.restype = OSStatus\n-\n-    Security.SSLSetEnabledCiphers.argtypes = [\n-        SSLContextRef,\n-        POINTER(SSLCipherSuite),\n-        c_size_t\n-    ]\n-    Security.SSLSetEnabledCiphers.restype = OSStatus\n-\n-    Security.SSLGetNumberEnabledCiphers.argtype = [\n-        SSLContextRef,\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLGetNumberEnabledCiphers.restype = OSStatus\n-\n-    Security.SSLGetEnabledCiphers.argtypes = [\n-        SSLContextRef,\n-        POINTER(SSLCipherSuite),\n-        POINTER(c_size_t)\n-    ]\n-    Security.SSLGetEnabledCiphers.restype = OSStatus\n-\n-    Security.SSLGetNegotiatedCipher.argtypes = [\n-        SSLContextRef,\n-        POINTER(SSLCipherSuite)\n-    ]\n-    Security.SSLGetNegotiatedCipher.restype = OSStatus\n-\n-    Security.SSLGetNegotiatedProtocolVersion.argtypes = [\n-        SSLContextRef,\n-        POINTER(SSLProtocol)\n-    ]\n-    Security.SSLGetNegotiatedProtocolVersion.restype = OSStatus\n-\n-    Security.SSLCopyPeerTrust.argtypes = [\n-        SSLContextRef,\n-        POINTER(SecTrustRef)\n-    ]\n-    Security.SSLCopyPeerTrust.restype = OSStatus\n-\n-    Security.SecTrustSetAnchorCertificates.argtypes = [\n-        SecTrustRef,\n-        CFArrayRef\n-    ]\n-    Security.SecTrustSetAnchorCertificates.restype = OSStatus\n-\n-    Security.SecTrustSetAnchorCertificatesOnly.argstypes = [\n-        SecTrustRef,\n-        Boolean\n-    ]\n-    Security.SecTrustSetAnchorCertificatesOnly.restype = OSStatus\n-\n-    Security.SecTrustEvaluate.argtypes = [\n-        SecTrustRef,\n-        POINTER(SecTrustResultType)\n-    ]\n-    Security.SecTrustEvaluate.restype = OSStatus\n-\n-    Security.SecTrustGetCertificateCount.argtypes = [\n-        SecTrustRef\n-    ]\n-    Security.SecTrustGetCertificateCount.restype = CFIndex\n-\n-    Security.SecTrustGetCertificateAtIndex.argtypes = [\n-        SecTrustRef,\n-        CFIndex\n-    ]\n-    Security.SecTrustGetCertificateAtIndex.restype = SecCertificateRef\n-\n-    Security.SSLCreateContext.argtypes = [\n-        CFAllocatorRef,\n-        SSLProtocolSide,\n-        SSLConnectionType\n-    ]\n-    Security.SSLCreateContext.restype = SSLContextRef\n-\n-    Security.SSLSetSessionOption.argtypes = [\n-        SSLContextRef,\n-        SSLSessionOption,\n-        Boolean\n-    ]\n-    Security.SSLSetSessionOption.restype = OSStatus\n-\n-    Security.SSLSetProtocolVersionMin.argtypes = [\n-        SSLContextRef,\n-        SSLProtocol\n-    ]\n-    Security.SSLSetProtocolVersionMin.restype = OSStatus\n-\n-    Security.SSLSetProtocolVersionMax.argtypes = [\n-        SSLContextRef,\n-        SSLProtocol\n-    ]\n-    Security.SSLSetProtocolVersionMax.restype = OSStatus\n-\n-    Security.SecCopyErrorMessageString.argtypes = [\n-        OSStatus,\n-        c_void_p\n-    ]\n-    Security.SecCopyErrorMessageString.restype = CFStringRef\n-\n-    Security.SSLReadFunc = SSLReadFunc\n-    Security.SSLWriteFunc = SSLWriteFunc\n-    Security.SSLContextRef = SSLContextRef\n-    Security.SSLProtocol = SSLProtocol\n-    Security.SSLCipherSuite = SSLCipherSuite\n-    Security.SecIdentityRef = SecIdentityRef\n-    Security.SecKeychainRef = SecKeychainRef\n-    Security.SecTrustRef = SecTrustRef\n-    Security.SecTrustResultType = SecTrustResultType\n-    Security.SecExternalFormat = SecExternalFormat\n-    Security.OSStatus = OSStatus\n-\n-    Security.kSecImportExportPassphrase = CFStringRef.in_dll(\n-        Security, 'kSecImportExportPassphrase'\n-    )\n-    Security.kSecImportItemIdentity = CFStringRef.in_dll(\n-        Security, 'kSecImportItemIdentity'\n-    )\n-\n-    # CoreFoundation time!\n-    CoreFoundation.CFRetain.argtypes = [\n-        CFTypeRef\n-    ]\n-    CoreFoundation.CFRetain.restype = CFTypeRef\n-\n-    CoreFoundation.CFRelease.argtypes = [\n-        CFTypeRef\n-    ]\n-    CoreFoundation.CFRelease.restype = None\n-\n-    CoreFoundation.CFGetTypeID.argtypes = [\n-        CFTypeRef\n-    ]\n-    CoreFoundation.CFGetTypeID.restype = CFTypeID\n-\n-    CoreFoundation.CFStringCreateWithCString.argtypes = [\n-        CFAllocatorRef,\n-        c_char_p,\n-        CFStringEncoding\n-    ]\n-    CoreFoundation.CFStringCreateWithCString.restype = CFStringRef\n-\n-    CoreFoundation.CFStringGetCStringPtr.argtypes = [\n-        CFStringRef,\n-        CFStringEncoding\n-    ]\n-    CoreFoundation.CFStringGetCStringPtr.restype = c_char_p\n-\n-    CoreFoundation.CFStringGetCString.argtypes = [\n-        CFStringRef,\n-        c_char_p,\n-        CFIndex,\n-        CFStringEncoding\n-    ]\n-    CoreFoundation.CFStringGetCString.restype = c_bool\n-\n-    CoreFoundation.CFDataCreate.argtypes = [\n-        CFAllocatorRef,\n-        c_char_p,\n-        CFIndex\n-    ]\n-    CoreFoundation.CFDataCreate.restype = CFDataRef\n-\n-    CoreFoundation.CFDataGetLength.argtypes = [\n-        CFDataRef\n-    ]\n-    CoreFoundation.CFDataGetLength.restype = CFIndex\n-\n-    CoreFoundation.CFDataGetBytePtr.argtypes = [\n-        CFDataRef\n-    ]\n-    CoreFoundation.CFDataGetBytePtr.restype = c_void_p\n-\n-    CoreFoundation.CFDictionaryCreate.argtypes = [\n-        CFAllocatorRef,\n-        POINTER(CFTypeRef),\n-        POINTER(CFTypeRef),\n-        CFIndex,\n-        CFDictionaryKeyCallBacks,\n-        CFDictionaryValueCallBacks\n-    ]\n-    CoreFoundation.CFDictionaryCreate.restype = CFDictionaryRef\n-\n-    CoreFoundation.CFDictionaryGetValue.argtypes = [\n-        CFDictionaryRef,\n-        CFTypeRef\n-    ]\n-    CoreFoundation.CFDictionaryGetValue.restype = CFTypeRef\n-\n-    CoreFoundation.CFArrayCreate.argtypes = [\n-        CFAllocatorRef,\n-        POINTER(CFTypeRef),\n-        CFIndex,\n-        CFArrayCallBacks,\n-    ]\n-    CoreFoundation.CFArrayCreate.restype = CFArrayRef\n-\n-    CoreFoundation.CFArrayCreateMutable.argtypes = [\n-        CFAllocatorRef,\n-        CFIndex,\n-        CFArrayCallBacks\n-    ]\n-    CoreFoundation.CFArrayCreateMutable.restype = CFMutableArrayRef\n-\n-    CoreFoundation.CFArrayAppendValue.argtypes = [\n-        CFMutableArrayRef,\n-        c_void_p\n-    ]\n-    CoreFoundation.CFArrayAppendValue.restype = None\n-\n-    CoreFoundation.CFArrayGetCount.argtypes = [\n-        CFArrayRef\n-    ]\n-    CoreFoundation.CFArrayGetCount.restype = CFIndex\n-\n-    CoreFoundation.CFArrayGetValueAtIndex.argtypes = [\n-        CFArrayRef,\n-        CFIndex\n-    ]\n-    CoreFoundation.CFArrayGetValueAtIndex.restype = c_void_p\n-\n-    CoreFoundation.kCFAllocatorDefault = CFAllocatorRef.in_dll(\n-        CoreFoundation, 'kCFAllocatorDefault'\n-    )\n-    CoreFoundation.kCFTypeArrayCallBacks = c_void_p.in_dll(CoreFoundation, 'kCFTypeArrayCallBacks')\n-    CoreFoundation.kCFTypeDictionaryKeyCallBacks = c_void_p.in_dll(\n-        CoreFoundation, 'kCFTypeDictionaryKeyCallBacks'\n-    )\n-    CoreFoundation.kCFTypeDictionaryValueCallBacks = c_void_p.in_dll(\n-        CoreFoundation, 'kCFTypeDictionaryValueCallBacks'\n-    )\n-\n-    CoreFoundation.CFTypeRef = CFTypeRef\n-    CoreFoundation.CFArrayRef = CFArrayRef\n-    CoreFoundation.CFStringRef = CFStringRef\n-    CoreFoundation.CFDictionaryRef = CFDictionaryRef\n-\n-except (AttributeError):\n-    raise ImportError('Error initializing ctypes')\n-\n-\n-class CFConst(object):\n-    \"\"\"\n-    A class object that acts as essentially a namespace for CoreFoundation\n-    constants.\n-    \"\"\"\n-    kCFStringEncodingUTF8 = CFStringEncoding(0x08000100)\n-\n-\n-class SecurityConst(object):\n-    \"\"\"\n-    A class object that acts as essentially a namespace for Security constants.\n-    \"\"\"\n-    kSSLSessionOptionBreakOnServerAuth = 0\n-\n-    kSSLProtocol2 = 1\n-    kSSLProtocol3 = 2\n-    kTLSProtocol1 = 4\n-    kTLSProtocol11 = 7\n-    kTLSProtocol12 = 8\n-\n-    kSSLClientSide = 1\n-    kSSLStreamType = 0\n-\n-    kSecFormatPEMSequence = 10\n-\n-    kSecTrustResultInvalid = 0\n-    kSecTrustResultProceed = 1\n-    # This gap is present on purpose: this was kSecTrustResultConfirm, which\n-    # is deprecated.\n-    kSecTrustResultDeny = 3\n-    kSecTrustResultUnspecified = 4\n-    kSecTrustResultRecoverableTrustFailure = 5\n-    kSecTrustResultFatalTrustFailure = 6\n-    kSecTrustResultOtherError = 7\n-\n-    errSSLProtocol = -9800\n-    errSSLWouldBlock = -9803\n-    errSSLClosedGraceful = -9805\n-    errSSLClosedNoNotify = -9816\n-    errSSLClosedAbort = -9806\n-\n-    errSSLXCertChainInvalid = -9807\n-    errSSLCrypto = -9809\n-    errSSLInternal = -9810\n-    errSSLCertExpired = -9814\n-    errSSLCertNotYetValid = -9815\n-    errSSLUnknownRootCert = -9812\n-    errSSLNoRootCert = -9813\n-    errSSLHostNameMismatch = -9843\n-    errSSLPeerHandshakeFail = -9824\n-    errSSLPeerUserCancelled = -9839\n-    errSSLWeakPeerEphemeralDHKey = -9850\n-    errSSLServerAuthCompleted = -9841\n-    errSSLRecordOverflow = -9847\n-\n-    errSecVerifyFailed = -67808\n-    errSecNoTrustSettings = -25263\n-    errSecItemNotFound = -25300\n-    errSecInvalidTrustSettings = -25262\n-\n-    # Cipher suites. We only pick the ones our default cipher string allows.\n-    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xC02C\n-    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xC030\n-    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02B\n-    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xC02F\n-    TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x00A3\n-    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x009F\n-    TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x00A2\n-    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x009E\n-    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC024\n-    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xC028\n-    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xC00A\n-    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xC014\n-    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x006B\n-    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 0x006A\n-    TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039\n-    TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 0x0038\n-    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC023\n-    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xC027\n-    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xC009\n-    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xC013\n-    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x0067\n-    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 0x0040\n-    TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033\n-    TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 0x0032\n-    TLS_RSA_WITH_AES_256_GCM_SHA384 = 0x009D\n-    TLS_RSA_WITH_AES_128_GCM_SHA256 = 0x009C\n-    TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x003D\n-    TLS_RSA_WITH_AES_128_CBC_SHA256 = 0x003C\n-    TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035\n-    TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F\n\n@@ -1,343 +0,0 @@\n-\"\"\"\n-Low-level helpers for the SecureTransport bindings.\n-\n-These are Python functions that are not directly related to the high-level APIs\n-but are necessary to get them to work. They include a whole bunch of low-level\n-CoreFoundation messing about and memory management. The concerns in this module\n-are almost entirely about trying to avoid memory leaks and providing\n-appropriate and useful assistance to the higher-level code.\n-\"\"\"\n-import base64\n-import ctypes\n-import itertools\n-import re\n-import os\n-import ssl\n-import tempfile\n-\n-from .bindings import Security, CoreFoundation, CFConst\n-\n-\n-# This regular expression is used to grab PEM data out of a PEM bundle.\n-_PEM_CERTS_RE = re.compile(\n-    b\"-----BEGIN CERTIFICATE-----\\n(.*?)\\n-----END CERTIFICATE-----\", re.DOTALL\n-)\n-\n-\n-def _cf_data_from_bytes(bytestring):\n-    \"\"\"\n-    Given a bytestring, create a CFData object from it. This CFData object must\n-    be CFReleased by the caller.\n-    \"\"\"\n-    return CoreFoundation.CFDataCreate(\n-        CoreFoundation.kCFAllocatorDefault, bytestring, len(bytestring)\n-    )\n-\n-\n-def _cf_dictionary_from_tuples(tuples):\n-    \"\"\"\n-    Given a list of Python tuples, create an associated CFDictionary.\n-    \"\"\"\n-    dictionary_size = len(tuples)\n-\n-    # We need to get the dictionary keys and values out in the same order.\n-    keys = (t[0] for t in tuples)\n-    values = (t[1] for t in tuples)\n-    cf_keys = (CoreFoundation.CFTypeRef * dictionary_size)(*keys)\n-    cf_values = (CoreFoundation.CFTypeRef * dictionary_size)(*values)\n-\n-    return CoreFoundation.CFDictionaryCreate(\n-        CoreFoundation.kCFAllocatorDefault,\n-        cf_keys,\n-        cf_values,\n-        dictionary_size,\n-        CoreFoundation.kCFTypeDictionaryKeyCallBacks,\n-        CoreFoundation.kCFTypeDictionaryValueCallBacks,\n-    )\n-\n-\n-def _cf_string_to_unicode(value):\n-    \"\"\"\n-    Creates a Unicode string from a CFString object. Used entirely for error\n-    reporting.\n-\n-    Yes, it annoys me quite a lot that this function is this complex.\n-    \"\"\"\n-    value_as_void_p = ctypes.cast(value, ctypes.POINTER(ctypes.c_void_p))\n-\n-    string = CoreFoundation.CFStringGetCStringPtr(\n-        value_as_void_p,\n-        CFConst.kCFStringEncodingUTF8\n-    )\n-    if string is None:\n-        buffer = ctypes.create_string_buffer(1024)\n-        result = CoreFoundation.CFStringGetCString(\n-            value_as_void_p,\n-            buffer,\n-            1024,\n-            CFConst.kCFStringEncodingUTF8\n-        )\n-        if not result:\n-            raise OSError('Error copying C string from CFStringRef')\n-        string = buffer.value\n-    if string is not None:\n-        string = string.decode('utf-8')\n-    return string\n-\n-\n-def _assert_no_error(error, exception_class=None):\n-    \"\"\"\n-    Checks the return code and throws an exception if there is an error to\n-    report\n-    \"\"\"\n-    if error == 0:\n-        return\n-\n-    cf_error_string = Security.SecCopyErrorMessageString(error, None)\n-    output = _cf_string_to_unicode(cf_error_string)\n-    CoreFoundation.CFRelease(cf_error_string)\n-\n-    if output is None or output == u'':\n-        output = u'OSStatus %s' % error\n-\n-    if exception_class is None:\n-        exception_class = ssl.SSLError\n-\n-    raise exception_class(output)\n-\n-\n-def _cert_array_from_pem(pem_bundle):\n-    \"\"\"\n-    Given a bundle of certs in PEM format, turns them into a CFArray of certs\n-    that can be used to validate a cert chain.\n-    \"\"\"\n-    der_certs = [\n-        base64.b64decode(match.group(1))\n-        for match in _PEM_CERTS_RE.finditer(pem_bundle)\n-    ]\n-    if not der_certs:\n-        raise ssl.SSLError(\"No root certificates specified\")\n-\n-    cert_array = CoreFoundation.CFArrayCreateMutable(\n-        CoreFoundation.kCFAllocatorDefault,\n-        0,\n-        ctypes.byref(CoreFoundation.kCFTypeArrayCallBacks)\n-    )\n-    if not cert_array:\n-        raise ssl.SSLError(\"Unable to allocate memory!\")\n-\n-    try:\n-        for der_bytes in der_certs:\n-            certdata = _cf_data_from_bytes(der_bytes)\n-            if not certdata:\n-                raise ssl.SSLError(\"Unable to allocate memory!\")\n-            cert = Security.SecCertificateCreateWithData(\n-                CoreFoundation.kCFAllocatorDefault, certdata\n-            )\n-            CoreFoundation.CFRelease(certdata)\n-            if not cert:\n-                raise ssl.SSLError(\"Unable to build cert object!\")\n-\n-            CoreFoundation.CFArrayAppendValue(cert_array, cert)\n-            CoreFoundation.CFRelease(cert)\n-    except Exception:\n-        # We need to free the array before the exception bubbles further.\n-        # We only want to do that if an error occurs: otherwise, the caller\n-        # should free.\n-        CoreFoundation.CFRelease(cert_array)\n-\n-    return cert_array\n-\n-\n-def _is_cert(item):\n-    \"\"\"\n-    Returns True if a given CFTypeRef is a certificate.\n-    \"\"\"\n-    expected = Security.SecCertificateGetTypeID()\n-    return CoreFoundation.CFGetTypeID(item) == expected\n-\n-\n-def _is_identity(item):\n-    \"\"\"\n-    Returns True if a given CFTypeRef is an identity.\n-    \"\"\"\n-    expected = Security.SecIdentityGetTypeID()\n-    return CoreFoundation.CFGetTypeID(item) == expected\n-\n-\n-def _temporary_keychain():\n-    \"\"\"\n-    This function creates a temporary Mac keychain that we can use to work with\n-    credentials. This keychain uses a one-time password and a temporary file to\n-    store the data. We expect to have one keychain per socket. The returned\n-    SecKeychainRef must be freed by the caller, including calling\n-    SecKeychainDelete.\n-\n-    Returns a tuple of the SecKeychainRef and the path to the temporary\n-    directory that contains it.\n-    \"\"\"\n-    # Unfortunately, SecKeychainCreate requires a path to a keychain. This\n-    # means we cannot use mkstemp to use a generic temporary file. Instead,\n-    # we're going to create a temporary directory and a filename to use there.\n-    # This filename will be 8 random bytes expanded into base64. We also need\n-    # some random bytes to password-protect the keychain we're creating, so we\n-    # ask for 40 random bytes.\n-    random_bytes = os.urandom(40)\n-    filename = base64.b64encode(random_bytes[:8]).decode('utf-8')\n-    password = base64.b64encode(random_bytes[8:])  # Must be valid UTF-8\n-    tempdirectory = tempfile.mkdtemp()\n-\n-    keychain_path = os.path.join(tempdirectory, filename).encode('utf-8')\n-\n-    # We now want to create the keychain itself.\n-    keychain = Security.SecKeychainRef()\n-    status = Security.SecKeychainCreate(\n-        keychain_path,\n-        len(password),\n-        password,\n-        False,\n-        None,\n-        ctypes.byref(keychain)\n-    )\n-    _assert_no_error(status)\n-\n-    # Having created the keychain, we want to pass it off to the caller.\n-    return keychain, tempdirectory\n-\n-\n-def _load_items_from_file(keychain, path):\n-    \"\"\"\n-    Given a single file, loads all the trust objects from it into arrays and\n-    the keychain.\n-    Returns a tuple of lists: the first list is a list of identities, the\n-    second a list of certs.\n-    \"\"\"\n-    certificates = []\n-    identities = []\n-    result_array = None\n-\n-    with open(path, 'rb') as f:\n-        raw_filedata = f.read()\n-\n-    try:\n-        filedata = CoreFoundation.CFDataCreate(\n-            CoreFoundation.kCFAllocatorDefault,\n-            raw_filedata,\n-            len(raw_filedata)\n-        )\n-        result_array = CoreFoundation.CFArrayRef()\n-        result = Security.SecItemImport(\n-            filedata,  # cert data\n-            None,  # Filename, leaving it out for now\n-            None,  # What the type of the file is, we don't care\n-            None,  # what's in the file, we don't care\n-            0,  # import flags\n-            None,  # key params, can include passphrase in the future\n-            keychain,  # The keychain to insert into\n-            ctypes.byref(result_array)  # Results\n-        )\n-        _assert_no_error(result)\n-\n-        # A CFArray is not very useful to us as an intermediary\n-        # representation, so we are going to extract the objects we want\n-        # and then free the array. We don't need to keep hold of keys: the\n-        # keychain already has them!\n-        result_count = CoreFoundation.CFArrayGetCount(result_array)\n-        for index in range(result_count):\n-            item = CoreFoundation.CFArrayGetValueAtIndex(\n-                result_array, index\n-            )\n-            item = ctypes.cast(item, CoreFoundation.CFTypeRef)\n-\n-            if _is_cert(item):\n-                CoreFoundation.CFRetain(item)\n-                certificates.append(item)\n-            elif _is_identity(item):\n-                CoreFoundation.CFRetain(item)\n-                identities.append(item)\n-    finally:\n-        if result_array:\n-            CoreFoundation.CFRelease(result_array)\n-\n-        CoreFoundation.CFRelease(filedata)\n-\n-    return (identities, certificates)\n-\n-\n-def _load_client_cert_chain(keychain, *paths):\n-    \"\"\"\n-    Load certificates and maybe keys from a number of files. Has the end goal\n-    of returning a CFArray containing one SecIdentityRef, and then zero or more\n-    SecCertificateRef objects, suitable for use as a client certificate trust\n-    chain.\n-    \"\"\"\n-    # Ok, the strategy.\n-    #\n-    # This relies on knowing that macOS will not give you a SecIdentityRef\n-    # unless you have imported a key into a keychain. This is a somewhat\n-    # artificial limitation of macOS (for example, it doesn't necessarily\n-    # affect iOS), but there is nothing inside Security.framework that lets you\n-    # get a SecIdentityRef without having a key in a keychain.\n-    #\n-    # So the policy here is we take all the files and iterate them in order.\n-    # Each one will use SecItemImport to have one or more objects loaded from\n-    # it. We will also point at a keychain that macOS can use to work with the\n-    # private key.\n-    #\n-    # Once we have all the objects, we'll check what we actually have. If we\n-    # already have a SecIdentityRef in hand, fab: we'll use that. Otherwise,\n-    # we'll take the first certificate (which we assume to be our leaf) and\n-    # ask the keychain to give us a SecIdentityRef with that cert's associated\n-    # key.\n-    #\n-    # We'll then return a CFArray containing the trust chain: one\n-    # SecIdentityRef and then zero-or-more SecCertificateRef objects. The\n-    # responsibility for freeing this CFArray will be with the caller. This\n-    # CFArray must remain alive for the entire connection, so in practice it\n-    # will be stored with a single SSLSocket, along with the reference to the\n-    # keychain.\n-    certificates = []\n-    identities = []\n-\n-    # Filter out bad paths.\n-    paths = (path for path in paths if path)\n-\n-    try:\n-        for file_path in paths:\n-            new_identities, new_certs = _load_items_from_file(\n-                keychain, file_path\n-            )\n-            identities.extend(new_identities)\n-            certificates.extend(new_certs)\n-\n-        # Ok, we have everything. The question is: do we have an identity? If\n-        # not, we want to grab one from the first cert we have.\n-        if not identities:\n-            new_identity = Security.SecIdentityRef()\n-            status = Security.SecIdentityCreateWithCertificate(\n-                keychain,\n-                certificates[0],\n-                ctypes.byref(new_identity)\n-            )\n-            _assert_no_error(status)\n-            identities.append(new_identity)\n-\n-            # We now want to release the original certificate, as we no longer\n-            # need it.\n-            CoreFoundation.CFRelease(certificates.pop(0))\n-\n-        # We now need to build a new CFArray that holds the trust chain.\n-        trust_chain = CoreFoundation.CFArrayCreateMutable(\n-            CoreFoundation.kCFAllocatorDefault,\n-            0,\n-            ctypes.byref(CoreFoundation.kCFTypeArrayCallBacks),\n-        )\n-        for item in itertools.chain(identities, certificates):\n-            # ArrayAppendValue does a CFRetain on the item. That's fine,\n-            # because the finally block will release our other refs to them.\n-            CoreFoundation.CFArrayAppendValue(trust_chain, item)\n-\n-        return trust_chain\n-    finally:\n-        for obj in itertools.chain(identities, certificates):\n-            CoreFoundation.CFRelease(obj)\n\n@@ -1,296 +0,0 @@\n-\"\"\"\n-This module provides a pool manager that uses Google App Engine's\n-`URLFetch Service <https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n-\n-Example usage::\n-\n-    from urllib3 import PoolManager\n-    from urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox\n-\n-    if is_appengine_sandbox():\n-        # AppEngineManager uses AppEngine's URLFetch API behind the scenes\n-        http = AppEngineManager()\n-    else:\n-        # PoolManager uses a socket-level API behind the scenes\n-        http = PoolManager()\n-\n-    r = http.request('GET', 'https://google.com/')\n-\n-There are `limitations <https://cloud.google.com/appengine/docs/python/\\\n-urlfetch/#Python_Quotas_and_limits>`_ to the URLFetch service and it may not be\n-the best choice for your application. There are three options for using\n-urllib3 on Google App Engine:\n-\n-1. You can use :class:`AppEngineManager` with URLFetch. URLFetch is\n-   cost-effective in many circumstances as long as your usage is within the\n-   limitations.\n-2. You can use a normal :class:`~urllib3.PoolManager` by enabling sockets.\n-   Sockets also have `limitations and restrictions\n-   <https://cloud.google.com/appengine/docs/python/sockets/\\\n-   #limitations-and-restrictions>`_ and have a lower free quota than URLFetch.\n-   To use sockets, be sure to specify the following in your ``app.yaml``::\n-\n-        env_variables:\n-            GAE_USE_SOCKETS_HTTPLIB : 'true'\n-\n-3. If you are using `App Engine Flexible\n-<https://cloud.google.com/appengine/docs/flexible/>`_, you can use the standard\n-:class:`PoolManager` without any configuration or special environment variables.\n-\"\"\"\n-\n-from __future__ import absolute_import\n-import logging\n-import os\n-import warnings\n-from ..packages.six.moves.urllib.parse import urljoin\n-\n-from ..exceptions import (\n-    HTTPError,\n-    HTTPWarning,\n-    MaxRetryError,\n-    ProtocolError,\n-    TimeoutError,\n-    SSLError\n-)\n-\n-from ..packages.six import BytesIO\n-from ..request import RequestMethods\n-from ..response import HTTPResponse\n-from ..util.timeout import Timeout\n-from ..util.retry import Retry\n-\n-try:\n-    from google.appengine.api import urlfetch\n-except ImportError:\n-    urlfetch = None\n-\n-\n-log = logging.getLogger(__name__)\n-\n-\n-class AppEnginePlatformWarning(HTTPWarning):\n-    pass\n-\n-\n-class AppEnginePlatformError(HTTPError):\n-    pass\n-\n-\n-class AppEngineManager(RequestMethods):\n-    \"\"\"\n-    Connection manager for Google App Engine sandbox applications.\n-\n-    This manager uses the URLFetch service directly instead of using the\n-    emulated httplib, and is subject to URLFetch limitations as described in\n-    the App Engine documentation `here\n-    <https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n-\n-    Notably it will raise an :class:`AppEnginePlatformError` if:\n-        * URLFetch is not available.\n-        * If you attempt to use this on App Engine Flexible, as full socket\n-          support is available.\n-        * If a request size is more than 10 megabytes.\n-        * If a response size is more than 32 megabtyes.\n-        * If you use an unsupported request method such as OPTIONS.\n-\n-    Beyond those cases, it will raise normal urllib3 errors.\n-    \"\"\"\n-\n-    def __init__(self, headers=None, retries=None, validate_certificate=True,\n-                 urlfetch_retries=True):\n-        if not urlfetch:\n-            raise AppEnginePlatformError(\n-                \"URLFetch is not available in this environment.\")\n-\n-        if is_prod_appengine_mvms():\n-            raise AppEnginePlatformError(\n-                \"Use normal urllib3.PoolManager instead of AppEngineManager\"\n-                \"on Managed VMs, as using URLFetch is not necessary in \"\n-                \"this environment.\")\n-\n-        warnings.warn(\n-            \"urllib3 is using URLFetch on Google App Engine sandbox instead \"\n-            \"of sockets. To use sockets directly instead of URLFetch see \"\n-            \"https://urllib3.readthedocs.io/en/latest/reference/urllib3.contrib.html.\",\n-            AppEnginePlatformWarning)\n-\n-        RequestMethods.__init__(self, headers)\n-        self.validate_certificate = validate_certificate\n-        self.urlfetch_retries = urlfetch_retries\n-\n-        self.retries = retries or Retry.DEFAULT\n-\n-    def __enter__(self):\n-        return self\n-\n-    def __exit__(self, exc_type, exc_val, exc_tb):\n-        # Return False to re-raise any potential exceptions\n-        return False\n-\n-    def urlopen(self, method, url, body=None, headers=None,\n-                retries=None, redirect=True, timeout=Timeout.DEFAULT_TIMEOUT,\n-                **response_kw):\n-\n-        retries = self._get_retries(retries, redirect)\n-\n-        try:\n-            follow_redirects = (\n-                    redirect and\n-                    retries.redirect != 0 and\n-                    retries.total)\n-            response = urlfetch.fetch(\n-                url,\n-                payload=body,\n-                method=method,\n-                headers=headers or {},\n-                allow_truncated=False,\n-                follow_redirects=self.urlfetch_retries and follow_redirects,\n-                deadline=self._get_absolute_timeout(timeout),\n-                validate_certificate=self.validate_certificate,\n-            )\n-        except urlfetch.DeadlineExceededError as e:\n-            raise TimeoutError(self, e)\n-\n-        except urlfetch.InvalidURLError as e:\n-            if 'too large' in str(e):\n-                raise AppEnginePlatformError(\n-                    \"URLFetch request too large, URLFetch only \"\n-                    \"supports requests up to 10mb in size.\", e)\n-            raise ProtocolError(e)\n-\n-        except urlfetch.DownloadError as e:\n-            if 'Too many redirects' in str(e):\n-                raise MaxRetryError(self, url, reason=e)\n-            raise ProtocolError(e)\n-\n-        except urlfetch.ResponseTooLargeError as e:\n-            raise AppEnginePlatformError(\n-                \"URLFetch response too large, URLFetch only supports\"\n-                \"responses up to 32mb in size.\", e)\n-\n-        except urlfetch.SSLCertificateError as e:\n-            raise SSLError(e)\n-\n-        except urlfetch.InvalidMethodError as e:\n-            raise AppEnginePlatformError(\n-                \"URLFetch does not support method: %s\" % method, e)\n-\n-        http_response = self._urlfetch_response_to_http_response(\n-            response, retries=retries, **response_kw)\n-\n-        # Handle redirect?\n-        redirect_location = redirect and http_response.get_redirect_location()\n-        if redirect_location:\n-            # Check for redirect response\n-            if (self.urlfetch_retries and retries.raise_on_redirect):\n-                raise MaxRetryError(self, url, \"too many redirects\")\n-            else:\n-                if http_response.status == 303:\n-                    method = 'GET'\n-\n-                try:\n-                    retries = retries.increment(method, url, response=http_response, _pool=self)\n-                except MaxRetryError:\n-                    if retries.raise_on_redirect:\n-                        raise MaxRetryError(self, url, \"too many redirects\")\n-                    return http_response\n-\n-                retries.sleep_for_retry(http_response)\n-                log.debug(\"Redirecting %s -> %s\", url, redirect_location)\n-                redirect_url = urljoin(url, redirect_location)\n-                return self.urlopen(\n-                    method, redirect_url, body, headers,\n-                    retries=retries, redirect=redirect,\n-                    timeout=timeout, **response_kw)\n-\n-        # Check if we should retry the HTTP response.\n-        has_retry_after = bool(http_response.getheader('Retry-After'))\n-        if retries.is_retry(method, http_response.status, has_retry_after):\n-            retries = retries.increment(\n-                method, url, response=http_response, _pool=self)\n-            log.debug(\"Retry: %s\", url)\n-            retries.sleep(http_response)\n-            return self.urlopen(\n-                method, url,\n-                body=body, headers=headers,\n-                retries=retries, redirect=redirect,\n-                timeout=timeout, **response_kw)\n-\n-        return http_response\n-\n-    def _urlfetch_response_to_http_response(self, urlfetch_resp, **response_kw):\n-\n-        if is_prod_appengine():\n-            # Production GAE handles deflate encoding automatically, but does\n-            # not remove the encoding header.\n-            content_encoding = urlfetch_resp.headers.get('content-encoding')\n-\n-            if content_encoding == 'deflate':\n-                del urlfetch_resp.headers['content-encoding']\n-\n-        transfer_encoding = urlfetch_resp.headers.get('transfer-encoding')\n-        # We have a full response's content,\n-        # so let's make sure we don't report ourselves as chunked data.\n-        if transfer_encoding == 'chunked':\n-            encodings = transfer_encoding.split(\",\")\n-            encodings.remove('chunked')\n-            urlfetch_resp.headers['transfer-encoding'] = ','.join(encodings)\n-\n-        return HTTPResponse(\n-            # In order for decoding to work, we must present the content as\n-            # a file-like object.\n-            body=BytesIO(urlfetch_resp.content),\n-            headers=urlfetch_resp.headers,\n-            status=urlfetch_resp.status_code,\n-            **response_kw\n-        )\n-\n-    def _get_absolute_timeout(self, timeout):\n-        if timeout is Timeout.DEFAULT_TIMEOUT:\n-            return None  # Defer to URLFetch's default.\n-        if isinstance(timeout, Timeout):\n-            if timeout._read is not None or timeout._connect is not None:\n-                warnings.warn(\n-                    \"URLFetch does not support granular timeout settings, \"\n-                    \"reverting to total or default URLFetch timeout.\",\n-                    AppEnginePlatformWarning)\n-            return timeout.total\n-        return timeout\n-\n-    def _get_retries(self, retries, redirect):\n-        if not isinstance(retries, Retry):\n-            retries = Retry.from_int(\n-                retries, redirect=redirect, default=self.retries)\n-\n-        if retries.connect or retries.read or retries.redirect:\n-            warnings.warn(\n-                \"URLFetch only supports total retries and does not \"\n-                \"recognize connect, read, or redirect retry parameters.\",\n-                AppEnginePlatformWarning)\n-\n-        return retries\n-\n-\n-def is_appengine():\n-    return (is_local_appengine() or\n-            is_prod_appengine() or\n-            is_prod_appengine_mvms())\n-\n-\n-def is_appengine_sandbox():\n-    return is_appengine() and not is_prod_appengine_mvms()\n-\n-\n-def is_local_appengine():\n-    return ('APPENGINE_RUNTIME' in os.environ and\n-            'Development/' in os.environ['SERVER_SOFTWARE'])\n-\n-\n-def is_prod_appengine():\n-    return ('APPENGINE_RUNTIME' in os.environ and\n-            'Google App Engine/' in os.environ['SERVER_SOFTWARE'] and\n-            not is_prod_appengine_mvms())\n-\n-\n-def is_prod_appengine_mvms():\n-    return os.environ.get('GAE_VM', False) == 'true'\n\n@@ -1,112 +0,0 @@\n-\"\"\"\n-NTLM authenticating pool, contributed by erikcederstran\n-\n-Issue #10, see: http://code.google.com/p/urllib3/issues/detail?id=10\n-\"\"\"\n-from __future__ import absolute_import\n-\n-from logging import getLogger\n-from ntlm import ntlm\n-\n-from .. import HTTPSConnectionPool\n-from ..packages.six.moves.http_client import HTTPSConnection\n-\n-\n-log = getLogger(__name__)\n-\n-\n-class NTLMConnectionPool(HTTPSConnectionPool):\n-    \"\"\"\n-    Implements an NTLM authentication version of an urllib3 connection pool\n-    \"\"\"\n-\n-    scheme = 'https'\n-\n-    def __init__(self, user, pw, authurl, *args, **kwargs):\n-        \"\"\"\n-        authurl is a random URL on the server that is protected by NTLM.\n-        user is the Windows user, probably in the DOMAIN\\\\username format.\n-        pw is the password for the user.\n-        \"\"\"\n-        super(NTLMConnectionPool, self).__init__(*args, **kwargs)\n-        self.authurl = authurl\n-        self.rawuser = user\n-        user_parts = user.split('\\\\', 1)\n-        self.domain = user_parts[0].upper()\n-        self.user = user_parts[1]\n-        self.pw = pw\n-\n-    def _new_conn(self):\n-        # Performs the NTLM handshake that secures the connection. The socket\n-        # must be kept open while requests are performed.\n-        self.num_connections += 1\n-        log.debug('Starting NTLM HTTPS connection no. %d: https://%s%s',\n-                  self.num_connections, self.host, self.authurl)\n-\n-        headers = {}\n-        headers['Connection'] = 'Keep-Alive'\n-        req_header = 'Authorization'\n-        resp_header = 'www-authenticate'\n-\n-        conn = HTTPSConnection(host=self.host, port=self.port)\n-\n-        # Send negotiation message\n-        headers[req_header] = (\n-            'NTLM %s' % ntlm.create_NTLM_NEGOTIATE_MESSAGE(self.rawuser))\n-        log.debug('Request headers: %s', headers)\n-        conn.request('GET', self.authurl, None, headers)\n-        res = conn.getresponse()\n-        reshdr = dict(res.getheaders())\n-        log.debug('Response status: %s %s', res.status, res.reason)\n-        log.debug('Response headers: %s', reshdr)\n-        log.debug('Response data: %s [...]', res.read(100))\n-\n-        # Remove the reference to the socket, so that it can not be closed by\n-        # the response object (we want to keep the socket open)\n-        res.fp = None\n-\n-        # Server should respond with a challenge message\n-        auth_header_values = reshdr[resp_header].split(', ')\n-        auth_header_value = None\n-        for s in auth_header_values:\n-            if s[:5] == 'NTLM ':\n-                auth_header_value = s[5:]\n-        if auth_header_value is None:\n-            raise Exception('Unexpected %s response header: %s' %\n-                            (resp_header, reshdr[resp_header]))\n-\n-        # Send authentication message\n-        ServerChallenge, NegotiateFlags = \\\n-            ntlm.parse_NTLM_CHALLENGE_MESSAGE(auth_header_value)\n-        auth_msg = ntlm.create_NTLM_AUTHENTICATE_MESSAGE(ServerChallenge,\n-                                                         self.user,\n-                                                         self.domain,\n-                                                         self.pw,\n-                                                         NegotiateFlags)\n-        headers[req_header] = 'NTLM %s' % auth_msg\n-        log.debug('Request headers: %s', headers)\n-        conn.request('GET', self.authurl, None, headers)\n-        res = conn.getresponse()\n-        log.debug('Response status: %s %s', res.status, res.reason)\n-        log.debug('Response headers: %s', dict(res.getheaders()))\n-        log.debug('Response data: %s [...]', res.read()[:100])\n-        if res.status != 200:\n-            if res.status == 401:\n-                raise Exception('Server rejected request: wrong '\n-                                'username or password')\n-            raise Exception('Wrong server response: %s %s' %\n-                            (res.status, res.reason))\n-\n-        res.fp = None\n-        log.debug('Connection established')\n-        return conn\n-\n-    def urlopen(self, method, url, body=None, headers=None, retries=3,\n-                redirect=True, assert_same_host=True):\n-        if headers is None:\n-            headers = {}\n-        headers['Connection'] = 'Keep-Alive'\n-        return super(NTLMConnectionPool, self).urlopen(method, url, body,\n-                                                       headers, retries,\n-                                                       redirect,\n-                                                       assert_same_host)\n\n@@ -1,452 +0,0 @@\n-\"\"\"\n-SSL with SNI_-support for Python 2. Follow these instructions if you would\n-like to verify SSL certificates in Python 2. Note, the default libraries do\n-*not* do certificate checking; you need to do additional work to validate\n-certificates yourself.\n-\n-This needs the following packages installed:\n-\n-* pyOpenSSL (tested with 16.0.0)\n-* cryptography (minimum 1.3.4, from pyopenssl)\n-* idna (minimum 2.0, from cryptography)\n-\n-However, pyopenssl depends on cryptography, which depends on idna, so while we\n-use all three directly here we end up having relatively few packages required.\n-\n-You can install them with the following command:\n-\n-    pip install pyopenssl cryptography idna\n-\n-To activate certificate checking, call\n-:func:`~urllib3.contrib.pyopenssl.inject_into_urllib3` from your Python code\n-before you begin making HTTP requests. This can be done in a ``sitecustomize``\n-module, or at any other time before your application begins using ``urllib3``,\n-like this::\n-\n-    try:\n-        import urllib3.contrib.pyopenssl\n-        urllib3.contrib.pyopenssl.inject_into_urllib3()\n-    except ImportError:\n-        pass\n-\n-Now you can use :mod:`urllib3` as you normally would, and it will support SNI\n-when the required modules are installed.\n-\n-Activating this module also has the positive side effect of disabling SSL/TLS\n-compression in Python 2 (see `CRIME attack`_).\n-\n-If you want to configure the default list of supported cipher suites, you can\n-set the ``urllib3.contrib.pyopenssl.DEFAULT_SSL_CIPHER_LIST`` variable.\n-\n-.. _sni: https://en.wikipedia.org/wiki/Server_Name_Indication\n-.. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)\n-\"\"\"\n-from __future__ import absolute_import\n-\n-import OpenSSL.SSL\n-from cryptography import x509\n-from cryptography.hazmat.backends.openssl import backend as openssl_backend\n-from cryptography.hazmat.backends.openssl.x509 import _Certificate\n-\n-from socket import timeout, error as SocketError\n-from io import BytesIO\n-\n-try:  # Platform-specific: Python 2\n-    from socket import _fileobject\n-except ImportError:  # Platform-specific: Python 3\n-    _fileobject = None\n-    from ..packages.backports.makefile import backport_makefile\n-\n-import logging\n-import ssl\n-import six\n-import sys\n-\n-from .. import util\n-\n-__all__ = ['inject_into_urllib3', 'extract_from_urllib3']\n-\n-# SNI always works.\n-HAS_SNI = True\n-\n-# Map from urllib3 to PyOpenSSL compatible parameter-values.\n-_openssl_versions = {\n-    ssl.PROTOCOL_SSLv23: OpenSSL.SSL.SSLv23_METHOD,\n-    ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,\n-}\n-\n-if hasattr(ssl, 'PROTOCOL_TLSv1_1') and hasattr(OpenSSL.SSL, 'TLSv1_1_METHOD'):\n-    _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD\n-\n-if hasattr(ssl, 'PROTOCOL_TLSv1_2') and hasattr(OpenSSL.SSL, 'TLSv1_2_METHOD'):\n-    _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD\n-\n-try:\n-    _openssl_versions.update({ssl.PROTOCOL_SSLv3: OpenSSL.SSL.SSLv3_METHOD})\n-except AttributeError:\n-    pass\n-\n-_stdlib_to_openssl_verify = {\n-    ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,\n-    ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,\n-    ssl.CERT_REQUIRED:\n-        OpenSSL.SSL.VERIFY_PEER + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,\n-}\n-_openssl_to_stdlib_verify = dict(\n-    (v, k) for k, v in _stdlib_to_openssl_verify.items()\n-)\n-\n-# OpenSSL will only write 16K at a time\n-SSL_WRITE_BLOCKSIZE = 16384\n-\n-orig_util_HAS_SNI = util.HAS_SNI\n-orig_util_SSLContext = util.ssl_.SSLContext\n-\n-\n-log = logging.getLogger(__name__)\n-\n-\n-def inject_into_urllib3():\n-    'Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.'\n-\n-    _validate_dependencies_met()\n-\n-    util.ssl_.SSLContext = PyOpenSSLContext\n-    util.HAS_SNI = HAS_SNI\n-    util.ssl_.HAS_SNI = HAS_SNI\n-    util.IS_PYOPENSSL = True\n-    util.ssl_.IS_PYOPENSSL = True\n-\n-\n-def extract_from_urllib3():\n-    'Undo monkey-patching by :func:`inject_into_urllib3`.'\n-\n-    util.ssl_.SSLContext = orig_util_SSLContext\n-    util.HAS_SNI = orig_util_HAS_SNI\n-    util.ssl_.HAS_SNI = orig_util_HAS_SNI\n-    util.IS_PYOPENSSL = False\n-    util.ssl_.IS_PYOPENSSL = False\n-\n-\n-def _validate_dependencies_met():\n-    \"\"\"\n-    Verifies that PyOpenSSL's package-level dependencies have been met.\n-    Throws `ImportError` if they are not met.\n-    \"\"\"\n-    # Method added in `cryptography==1.1`; not available in older versions\n-    from cryptography.x509.extensions import Extensions\n-    if getattr(Extensions, \"get_extension_for_class\", None) is None:\n-        raise ImportError(\"'cryptography' module missing required functionality.  \"\n-                          \"Try upgrading to v1.3.4 or newer.\")\n-\n-    # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509\n-    # attribute is only present on those versions.\n-    from OpenSSL.crypto import X509\n-    x509 = X509()\n-    if getattr(x509, \"_x509\", None) is None:\n-        raise ImportError(\"'pyOpenSSL' module missing required functionality. \"\n-                          \"Try upgrading to v0.14 or newer.\")\n-\n-\n-def _dnsname_to_stdlib(name):\n-    \"\"\"\n-    Converts a dNSName SubjectAlternativeName field to the form used by the\n-    standard library on the given Python version.\n-\n-    Cryptography produces a dNSName as a unicode string that was idna-decoded\n-    from ASCII bytes. We need to idna-encode that string to get it back, and\n-    then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib\n-    uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).\n-    \"\"\"\n-    def idna_encode(name):\n-        \"\"\"\n-        Borrowed wholesale from the Python Cryptography Project. It turns out\n-        that we can't just safely call `idna.encode`: it can explode for\n-        wildcard names. This avoids that problem.\n-        \"\"\"\n-        import idna\n-\n-        for prefix in [u'*.', u'.']:\n-            if name.startswith(prefix):\n-                name = name[len(prefix):]\n-                return prefix.encode('ascii') + idna.encode(name)\n-        return idna.encode(name)\n-\n-    name = idna_encode(name)\n-    if sys.version_info >= (3, 0):\n-        name = name.decode('utf-8')\n-    return name\n-\n-\n-def get_subj_alt_name(peer_cert):\n-    \"\"\"\n-    Given an PyOpenSSL certificate, provides all the subject alternative names.\n-    \"\"\"\n-    # Pass the cert to cryptography, which has much better APIs for this.\n-    # This is technically using private APIs, but should work across all\n-    # relevant versions until PyOpenSSL gets something proper for this.\n-    cert = _Certificate(openssl_backend, peer_cert._x509)\n-\n-    # We want to find the SAN extension. Ask Cryptography to locate it (it's\n-    # faster than looping in Python)\n-    try:\n-        ext = cert.extensions.get_extension_for_class(\n-            x509.SubjectAlternativeName\n-        ).value\n-    except x509.ExtensionNotFound:\n-        # No such extension, return the empty list.\n-        return []\n-    except (x509.DuplicateExtension, x509.UnsupportedExtension,\n-            x509.UnsupportedGeneralNameType, UnicodeError) as e:\n-        # A problem has been found with the quality of the certificate. Assume\n-        # no SAN field is present.\n-        log.warning(\n-            \"A problem was encountered with the certificate that prevented \"\n-            \"urllib3 from finding the SubjectAlternativeName field. This can \"\n-            \"affect certificate validation. The error was %s\",\n-            e,\n-        )\n-        return []\n-\n-    # We want to return dNSName and iPAddress fields. We need to cast the IPs\n-    # back to strings because the match_hostname function wants them as\n-    # strings.\n-    # Sadly the DNS names need to be idna encoded and then, on Python 3, UTF-8\n-    # decoded. This is pretty frustrating, but that's what the standard library\n-    # does with certificates, and so we need to attempt to do the same.\n-    names = [\n-        ('DNS', _dnsname_to_stdlib(name))\n-        for name in ext.get_values_for_type(x509.DNSName)\n-    ]\n-    names.extend(\n-        ('IP Address', str(name))\n-        for name in ext.get_values_for_type(x509.IPAddress)\n-    )\n-\n-    return names\n-\n-\n-class WrappedSocket(object):\n-    '''API-compatibility wrapper for Python OpenSSL's Connection-class.\n-\n-    Note: _makefile_refs, _drop() and _reuse() are needed for the garbage\n-    collector of pypy.\n-    '''\n-\n-    def __init__(self, connection, socket, suppress_ragged_eofs=True):\n-        self.connection = connection\n-        self.socket = socket\n-        self.suppress_ragged_eofs = suppress_ragged_eofs\n-        self._makefile_refs = 0\n-        self._closed = False\n-\n-    def fileno(self):\n-        return self.socket.fileno()\n-\n-    # Copy-pasted from Python 3.5 source code\n-    def _decref_socketios(self):\n-        if self._makefile_refs > 0:\n-            self._makefile_refs -= 1\n-        if self._closed:\n-            self.close()\n-\n-    def recv(self, *args, **kwargs):\n-        try:\n-            data = self.connection.recv(*args, **kwargs)\n-        except OpenSSL.SSL.SysCallError as e:\n-            if self.suppress_ragged_eofs and e.args == (-1, 'Unexpected EOF'):\n-                return b''\n-            else:\n-                raise SocketError(str(e))\n-        except OpenSSL.SSL.ZeroReturnError as e:\n-            if self.connection.get_shutdown() == OpenSSL.SSL.RECEIVED_SHUTDOWN:\n-                return b''\n-            else:\n-                raise\n-        except OpenSSL.SSL.WantReadError:\n-            rd = util.wait_for_read(self.socket, self.socket.gettimeout())\n-            if not rd:\n-                raise timeout('The read operation timed out')\n-            else:\n-                return self.recv(*args, **kwargs)\n-        else:\n-            return data\n-\n-    def recv_into(self, *args, **kwargs):\n-        try:\n-            return self.connection.recv_into(*args, **kwargs)\n-        except OpenSSL.SSL.SysCallError as e:\n-            if self.suppress_ragged_eofs and e.args == (-1, 'Unexpected EOF'):\n-                return 0\n-            else:\n-                raise SocketError(str(e))\n-        except OpenSSL.SSL.ZeroReturnError as e:\n-            if self.connection.get_shutdown() == OpenSSL.SSL.RECEIVED_SHUTDOWN:\n-                return 0\n-            else:\n-                raise\n-        except OpenSSL.SSL.WantReadError:\n-            rd = util.wait_for_read(self.socket, self.socket.gettimeout())\n-            if not rd:\n-                raise timeout('The read operation timed out')\n-            else:\n-                return self.recv_into(*args, **kwargs)\n-\n-    def settimeout(self, timeout):\n-        return self.socket.settimeout(timeout)\n-\n-    def _send_until_done(self, data):\n-        while True:\n-            try:\n-                return self.connection.send(data)\n-            except OpenSSL.SSL.WantWriteError:\n-                wr = util.wait_for_write(self.socket, self.socket.gettimeout())\n-                if not wr:\n-                    raise timeout()\n-                continue\n-            except OpenSSL.SSL.SysCallError as e:\n-                raise SocketError(str(e))\n-\n-    def sendall(self, data):\n-        total_sent = 0\n-        while total_sent < len(data):\n-            sent = self._send_until_done(data[total_sent:total_sent + SSL_WRITE_BLOCKSIZE])\n-            total_sent += sent\n-\n-    def shutdown(self):\n-        # FIXME rethrow compatible exceptions should we ever use this\n-        self.connection.shutdown()\n-\n-    def close(self):\n-        if self._makefile_refs < 1:\n-            try:\n-                self._closed = True\n-                return self.connection.close()\n-            except OpenSSL.SSL.Error:\n-                return\n-        else:\n-            self._makefile_refs -= 1\n-\n-    def getpeercert(self, binary_form=False):\n-        x509 = self.connection.get_peer_certificate()\n-\n-        if not x509:\n-            return x509\n-\n-        if binary_form:\n-            return OpenSSL.crypto.dump_certificate(\n-                OpenSSL.crypto.FILETYPE_ASN1,\n-                x509)\n-\n-        return {\n-            'subject': (\n-                (('commonName', x509.get_subject().CN),),\n-            ),\n-            'subjectAltName': get_subj_alt_name(x509)\n-        }\n-\n-    def _reuse(self):\n-        self._makefile_refs += 1\n-\n-    def _drop(self):\n-        if self._makefile_refs < 1:\n-            self.close()\n-        else:\n-            self._makefile_refs -= 1\n-\n-\n-if _fileobject:  # Platform-specific: Python 2\n-    def makefile(self, mode, bufsize=-1):\n-        self._makefile_refs += 1\n-        return _fileobject(self, mode, bufsize, close=True)\n-else:  # Platform-specific: Python 3\n-    makefile = backport_makefile\n-\n-WrappedSocket.makefile = makefile\n-\n-\n-class PyOpenSSLContext(object):\n-    \"\"\"\n-    I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible\n-    for translating the interface of the standard library ``SSLContext`` object\n-    to calls into PyOpenSSL.\n-    \"\"\"\n-    def __init__(self, protocol):\n-        self.protocol = _openssl_versions[protocol]\n-        self._ctx = OpenSSL.SSL.Context(self.protocol)\n-        self._options = 0\n-        self.check_hostname = False\n-\n-    @property\n-    def options(self):\n-        return self._options\n-\n-    @options.setter\n-    def options(self, value):\n-        self._options = value\n-        self._ctx.set_options(value)\n-\n-    @property\n-    def verify_mode(self):\n-        return _openssl_to_stdlib_verify[self._ctx.get_verify_mode()]\n-\n-    @verify_mode.setter\n-    def verify_mode(self, value):\n-        self._ctx.set_verify(\n-            _stdlib_to_openssl_verify[value],\n-            _verify_callback\n-        )\n-\n-    def set_default_verify_paths(self):\n-        self._ctx.set_default_verify_paths()\n-\n-    def set_ciphers(self, ciphers):\n-        if isinstance(ciphers, six.text_type):\n-            ciphers = ciphers.encode('utf-8')\n-        self._ctx.set_cipher_list(ciphers)\n-\n-    def load_verify_locations(self, cafile=None, capath=None, cadata=None):\n-        if cafile is not None:\n-            cafile = cafile.encode('utf-8')\n-        if capath is not None:\n-            capath = capath.encode('utf-8')\n-        self._ctx.load_verify_locations(cafile, capath)\n-        if cadata is not None:\n-            self._ctx.load_verify_locations(BytesIO(cadata))\n-\n-    def load_cert_chain(self, certfile, keyfile=None, password=None):\n-        self._ctx.use_certificate_file(certfile)\n-        if password is not None:\n-            self._ctx.set_passwd_cb(lambda max_length, prompt_twice, userdata: password)\n-        self._ctx.use_privatekey_file(keyfile or certfile)\n-\n-    def wrap_socket(self, sock, server_side=False,\n-                    do_handshake_on_connect=True, suppress_ragged_eofs=True,\n-                    server_hostname=None):\n-        cnx = OpenSSL.SSL.Connection(self._ctx, sock)\n-\n-        if isinstance(server_hostname, six.text_type):  # Platform-specific: Python 3\n-            server_hostname = server_hostname.encode('utf-8')\n-\n-        if server_hostname is not None:\n-            cnx.set_tlsext_host_name(server_hostname)\n-\n-        cnx.set_connect_state()\n-\n-        while True:\n-            try:\n-                cnx.do_handshake()\n-            except OpenSSL.SSL.WantReadError:\n-                rd = util.wait_for_read(sock, sock.gettimeout())\n-                if not rd:\n-                    raise timeout('select timed out')\n-                continue\n-            except OpenSSL.SSL.Error as e:\n-                raise ssl.SSLError('bad handshake: %r' % e)\n-            break\n-\n-        return WrappedSocket(cnx, sock)\n-\n-\n-def _verify_callback(cnx, x509, err_no, err_depth, return_code):\n-    return err_no == 0\n\n@@ -1,807 +0,0 @@\n-\"\"\"\n-SecureTranport support for urllib3 via ctypes.\n-\n-This makes platform-native TLS available to urllib3 users on macOS without the\n-use of a compiler. This is an important feature because the Python Package\n-Index is moving to become a TLSv1.2-or-higher server, and the default OpenSSL\n-that ships with macOS is not capable of doing TLSv1.2. The only way to resolve\n-this is to give macOS users an alternative solution to the problem, and that\n-solution is to use SecureTransport.\n-\n-We use ctypes here because this solution must not require a compiler. That's\n-because pip is not allowed to require a compiler either.\n-\n-This is not intended to be a seriously long-term solution to this problem.\n-The hope is that PEP 543 will eventually solve this issue for us, at which\n-point we can retire this contrib module. But in the short term, we need to\n-solve the impending tire fire that is Python on Mac without this kind of\n-contrib module. So...here we are.\n-\n-To use this module, simply import and inject it::\n-\n-    import urllib3.contrib.securetransport\n-    urllib3.contrib.securetransport.inject_into_urllib3()\n-\n-Happy TLSing!\n-\"\"\"\n-from __future__ import absolute_import\n-\n-import contextlib\n-import ctypes\n-import errno\n-import os.path\n-import shutil\n-import socket\n-import ssl\n-import threading\n-import weakref\n-\n-from .. import util\n-from ._securetransport.bindings import (\n-    Security, SecurityConst, CoreFoundation\n-)\n-from ._securetransport.low_level import (\n-    _assert_no_error, _cert_array_from_pem, _temporary_keychain,\n-    _load_client_cert_chain\n-)\n-\n-try:  # Platform-specific: Python 2\n-    from socket import _fileobject\n-except ImportError:  # Platform-specific: Python 3\n-    _fileobject = None\n-    from ..packages.backports.makefile import backport_makefile\n-\n-try:\n-    memoryview(b'')\n-except NameError:\n-    raise ImportError(\"SecureTransport only works on Pythons with memoryview\")\n-\n-__all__ = ['inject_into_urllib3', 'extract_from_urllib3']\n-\n-# SNI always works\n-HAS_SNI = True\n-\n-orig_util_HAS_SNI = util.HAS_SNI\n-orig_util_SSLContext = util.ssl_.SSLContext\n-\n-# This dictionary is used by the read callback to obtain a handle to the\n-# calling wrapped socket. This is a pretty silly approach, but for now it'll\n-# do. I feel like I should be able to smuggle a handle to the wrapped socket\n-# directly in the SSLConnectionRef, but for now this approach will work I\n-# guess.\n-#\n-# We need to lock around this structure for inserts, but we don't do it for\n-# reads/writes in the callbacks. The reasoning here goes as follows:\n-#\n-#    1. It is not possible to call into the callbacks before the dictionary is\n-#       populated, so once in the callback the id must be in the dictionary.\n-#    2. The callbacks don't mutate the dictionary, they only read from it, and\n-#       so cannot conflict with any of the insertions.\n-#\n-# This is good: if we had to lock in the callbacks we'd drastically slow down\n-# the performance of this code.\n-_connection_refs = weakref.WeakValueDictionary()\n-_connection_ref_lock = threading.Lock()\n-\n-# Limit writes to 16kB. This is OpenSSL's limit, but we'll cargo-cult it over\n-# for no better reason than we need *a* limit, and this one is right there.\n-SSL_WRITE_BLOCKSIZE = 16384\n-\n-# This is our equivalent of util.ssl_.DEFAULT_CIPHERS, but expanded out to\n-# individual cipher suites. We need to do this becuase this is how\n-# SecureTransport wants them.\n-CIPHER_SUITES = [\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_256_CBC_SHA,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_256_CBC_SHA,\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,\n-    SecurityConst.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\n-    SecurityConst.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,\n-    SecurityConst.TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n-    SecurityConst.TLS_DHE_DSS_WITH_AES_128_CBC_SHA,\n-    SecurityConst.TLS_RSA_WITH_AES_256_GCM_SHA384,\n-    SecurityConst.TLS_RSA_WITH_AES_128_GCM_SHA256,\n-    SecurityConst.TLS_RSA_WITH_AES_256_CBC_SHA256,\n-    SecurityConst.TLS_RSA_WITH_AES_128_CBC_SHA256,\n-    SecurityConst.TLS_RSA_WITH_AES_256_CBC_SHA,\n-    SecurityConst.TLS_RSA_WITH_AES_128_CBC_SHA,\n-]\n-\n-# Basically this is simple: for PROTOCOL_SSLv23 we turn it into a low of\n-# TLSv1 and a high of TLSv1.2. For everything else, we pin to that version.\n-_protocol_to_min_max = {\n-    ssl.PROTOCOL_SSLv23: (SecurityConst.kTLSProtocol1, SecurityConst.kTLSProtocol12),\n-}\n-\n-if hasattr(ssl, \"PROTOCOL_SSLv2\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_SSLv2] = (\n-        SecurityConst.kSSLProtocol2, SecurityConst.kSSLProtocol2\n-    )\n-if hasattr(ssl, \"PROTOCOL_SSLv3\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_SSLv3] = (\n-        SecurityConst.kSSLProtocol3, SecurityConst.kSSLProtocol3\n-    )\n-if hasattr(ssl, \"PROTOCOL_TLSv1\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_TLSv1] = (\n-        SecurityConst.kTLSProtocol1, SecurityConst.kTLSProtocol1\n-    )\n-if hasattr(ssl, \"PROTOCOL_TLSv1_1\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_TLSv1_1] = (\n-        SecurityConst.kTLSProtocol11, SecurityConst.kTLSProtocol11\n-    )\n-if hasattr(ssl, \"PROTOCOL_TLSv1_2\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_TLSv1_2] = (\n-        SecurityConst.kTLSProtocol12, SecurityConst.kTLSProtocol12\n-    )\n-if hasattr(ssl, \"PROTOCOL_TLS\"):\n-    _protocol_to_min_max[ssl.PROTOCOL_TLS] = _protocol_to_min_max[ssl.PROTOCOL_SSLv23]\n-\n-\n-def inject_into_urllib3():\n-    \"\"\"\n-    Monkey-patch urllib3 with SecureTransport-backed SSL-support.\n-    \"\"\"\n-    util.ssl_.SSLContext = SecureTransportContext\n-    util.HAS_SNI = HAS_SNI\n-    util.ssl_.HAS_SNI = HAS_SNI\n-    util.IS_SECURETRANSPORT = True\n-    util.ssl_.IS_SECURETRANSPORT = True\n-\n-\n-def extract_from_urllib3():\n-    \"\"\"\n-    Undo monkey-patching by :func:`inject_into_urllib3`.\n-    \"\"\"\n-    util.ssl_.SSLContext = orig_util_SSLContext\n-    util.HAS_SNI = orig_util_HAS_SNI\n-    util.ssl_.HAS_SNI = orig_util_HAS_SNI\n-    util.IS_SECURETRANSPORT = False\n-    util.ssl_.IS_SECURETRANSPORT = False\n-\n-\n-def _read_callback(connection_id, data_buffer, data_length_pointer):\n-    \"\"\"\n-    SecureTransport read callback. This is called by ST to request that data\n-    be returned from the socket.\n-    \"\"\"\n-    wrapped_socket = None\n-    try:\n-        wrapped_socket = _connection_refs.get(connection_id)\n-        if wrapped_socket is None:\n-            return SecurityConst.errSSLInternal\n-        base_socket = wrapped_socket.socket\n-\n-        requested_length = data_length_pointer[0]\n-\n-        timeout = wrapped_socket.gettimeout()\n-        error = None\n-        read_count = 0\n-        buffer = (ctypes.c_char * requested_length).from_address(data_buffer)\n-        buffer_view = memoryview(buffer)\n-\n-        try:\n-            while read_count < requested_length:\n-                if timeout is None or timeout >= 0:\n-                    readables = util.wait_for_read([base_socket], timeout)\n-                    if not readables:\n-                        raise socket.error(errno.EAGAIN, 'timed out')\n-\n-                # We need to tell ctypes that we have a buffer that can be\n-                # written to. Upsettingly, we do that like this:\n-                chunk_size = base_socket.recv_into(\n-                    buffer_view[read_count:requested_length]\n-                )\n-                read_count += chunk_size\n-                if not chunk_size:\n-                    if not read_count:\n-                        return SecurityConst.errSSLClosedGraceful\n-                    break\n-        except (socket.error) as e:\n-            error = e.errno\n-\n-            if error is not None and error != errno.EAGAIN:\n-                if error == errno.ECONNRESET:\n-                    return SecurityConst.errSSLClosedAbort\n-                raise\n-\n-        data_length_pointer[0] = read_count\n-\n-        if read_count != requested_length:\n-            return SecurityConst.errSSLWouldBlock\n-\n-        return 0\n-    except Exception as e:\n-        if wrapped_socket is not None:\n-            wrapped_socket._exception = e\n-        return SecurityConst.errSSLInternal\n-\n-\n-def _write_callback(connection_id, data_buffer, data_length_pointer):\n-    \"\"\"\n-    SecureTransport write callback. This is called by ST to request that data\n-    actually be sent on the network.\n-    \"\"\"\n-    wrapped_socket = None\n-    try:\n-        wrapped_socket = _connection_refs.get(connection_id)\n-        if wrapped_socket is None:\n-            return SecurityConst.errSSLInternal\n-        base_socket = wrapped_socket.socket\n-\n-        bytes_to_write = data_length_pointer[0]\n-        data = ctypes.string_at(data_buffer, bytes_to_write)\n-\n-        timeout = wrapped_socket.gettimeout()\n-        error = None\n-        sent = 0\n-\n-        try:\n-            while sent < bytes_to_write:\n-                if timeout is None or timeout >= 0:\n-                    writables = util.wait_for_write([base_socket], timeout)\n-                    if not writables:\n-                        raise socket.error(errno.EAGAIN, 'timed out')\n-                chunk_sent = base_socket.send(data)\n-                sent += chunk_sent\n-\n-                # This has some needless copying here, but I'm not sure there's\n-                # much value in optimising this data path.\n-                data = data[chunk_sent:]\n-        except (socket.error) as e:\n-            error = e.errno\n-\n-            if error is not None and error != errno.EAGAIN:\n-                if error == errno.ECONNRESET:\n-                    return SecurityConst.errSSLClosedAbort\n-                raise\n-\n-        data_length_pointer[0] = sent\n-        if sent != bytes_to_write:\n-            return SecurityConst.errSSLWouldBlock\n-\n-        return 0\n-    except Exception as e:\n-        if wrapped_socket is not None:\n-            wrapped_socket._exception = e\n-        return SecurityConst.errSSLInternal\n-\n-\n-# We need to keep these two objects references alive: if they get GC'd while\n-# in use then SecureTransport could attempt to call a function that is in freed\n-# memory. That would be...uh...bad. Yeah, that's the word. Bad.\n-_read_callback_pointer = Security.SSLReadFunc(_read_callback)\n-_write_callback_pointer = Security.SSLWriteFunc(_write_callback)\n-\n-\n-class WrappedSocket(object):\n-    \"\"\"\n-    API-compatibility wrapper for Python's OpenSSL wrapped socket object.\n-\n-    Note: _makefile_refs, _drop(), and _reuse() are needed for the garbage\n-    collector of PyPy.\n-    \"\"\"\n-    def __init__(self, socket):\n-        self.socket = socket\n-        self.context = None\n-        self._makefile_refs = 0\n-        self._closed = False\n-        self._exception = None\n-        self._keychain = None\n-        self._keychain_dir = None\n-        self._client_cert_chain = None\n-\n-        # We save off the previously-configured timeout and then set it to\n-        # zero. This is done because we use select and friends to handle the\n-        # timeouts, but if we leave the timeout set on the lower socket then\n-        # Python will \"kindly\" call select on that socket again for us. Avoid\n-        # that by forcing the timeout to zero.\n-        self._timeout = self.socket.gettimeout()\n-        self.socket.settimeout(0)\n-\n-    @contextlib.contextmanager\n-    def _raise_on_error(self):\n-        \"\"\"\n-        A context manager that can be used to wrap calls that do I/O from\n-        SecureTransport. If any of the I/O callbacks hit an exception, this\n-        context manager will correctly propagate the exception after the fact.\n-        This avoids silently swallowing those exceptions.\n-\n-        It also correctly forces the socket closed.\n-        \"\"\"\n-        self._exception = None\n-\n-        # We explicitly don't catch around this yield because in the unlikely\n-        # event that an exception was hit in the block we don't want to swallow\n-        # it.\n-        yield\n-        if self._exception is not None:\n-            exception, self._exception = self._exception, None\n-            self.close()\n-            raise exception\n-\n-    def _set_ciphers(self):\n-        \"\"\"\n-        Sets up the allowed ciphers. By default this matches the set in\n-        util.ssl_.DEFAULT_CIPHERS, at least as supported by macOS. This is done\n-        custom and doesn't allow changing at this time, mostly because parsing\n-        OpenSSL cipher strings is going to be a freaking nightmare.\n-        \"\"\"\n-        ciphers = (Security.SSLCipherSuite * len(CIPHER_SUITES))(*CIPHER_SUITES)\n-        result = Security.SSLSetEnabledCiphers(\n-            self.context, ciphers, len(CIPHER_SUITES)\n-        )\n-        _assert_no_error(result)\n-\n-    def _custom_validate(self, verify, trust_bundle):\n-        \"\"\"\n-        Called when we have set custom validation. We do this in two cases:\n-        first, when cert validation is entirely disabled; and second, when\n-        using a custom trust DB.\n-        \"\"\"\n-        # If we disabled cert validation, just say: cool.\n-        if not verify:\n-            return\n-\n-        # We want data in memory, so load it up.\n-        if os.path.isfile(trust_bundle):\n-            with open(trust_bundle, 'rb') as f:\n-                trust_bundle = f.read()\n-\n-        cert_array = None\n-        trust = Security.SecTrustRef()\n-\n-        try:\n-            # Get a CFArray that contains the certs we want.\n-            cert_array = _cert_array_from_pem(trust_bundle)\n-\n-            # Ok, now the hard part. We want to get the SecTrustRef that ST has\n-            # created for this connection, shove our CAs into it, tell ST to\n-            # ignore everything else it knows, and then ask if it can build a\n-            # chain. This is a buuuunch of code.\n-            result = Security.SSLCopyPeerTrust(\n-                self.context, ctypes.byref(trust)\n-            )\n-            _assert_no_error(result)\n-            if not trust:\n-                raise ssl.SSLError(\"Failed to copy trust reference\")\n-\n-            result = Security.SecTrustSetAnchorCertificates(trust, cert_array)\n-            _assert_no_error(result)\n-\n-            result = Security.SecTrustSetAnchorCertificatesOnly(trust, True)\n-            _assert_no_error(result)\n-\n-            trust_result = Security.SecTrustResultType()\n-            result = Security.SecTrustEvaluate(\n-                trust, ctypes.byref(trust_result)\n-            )\n-            _assert_no_error(result)\n-        finally:\n-            if trust:\n-                CoreFoundation.CFRelease(trust)\n-\n-            if cert_array is None:\n-                CoreFoundation.CFRelease(cert_array)\n-\n-        # Ok, now we can look at what the result was.\n-        successes = (\n-            SecurityConst.kSecTrustResultUnspecified,\n-            SecurityConst.kSecTrustResultProceed\n-        )\n-        if trust_result.value not in successes:\n-            raise ssl.SSLError(\n-                \"certificate verify failed, error code: %d\" %\n-                trust_result.value\n-            )\n-\n-    def handshake(self,\n-                  server_hostname,\n-                  verify,\n-                  trust_bundle,\n-                  min_version,\n-                  max_version,\n-                  client_cert,\n-                  client_key,\n-                  client_key_passphrase):\n-        \"\"\"\n-        Actually performs the TLS handshake. This is run automatically by\n-        wrapped socket, and shouldn't be needed in user code.\n-        \"\"\"\n-        # First, we do the initial bits of connection setup. We need to create\n-        # a context, set its I/O funcs, and set the connection reference.\n-        self.context = Security.SSLCreateContext(\n-            None, SecurityConst.kSSLClientSide, SecurityConst.kSSLStreamType\n-        )\n-        result = Security.SSLSetIOFuncs(\n-            self.context, _read_callback_pointer, _write_callback_pointer\n-        )\n-        _assert_no_error(result)\n-\n-        # Here we need to compute the handle to use. We do this by taking the\n-        # id of self modulo 2**31 - 1. If this is already in the dictionary, we\n-        # just keep incrementing by one until we find a free space.\n-        with _connection_ref_lock:\n-            handle = id(self) % 2147483647\n-            while handle in _connection_refs:\n-                handle = (handle + 1) % 2147483647\n-            _connection_refs[handle] = self\n-\n-        result = Security.SSLSetConnection(self.context, handle)\n-        _assert_no_error(result)\n-\n-        # If we have a server hostname, we should set that too.\n-        if server_hostname:\n-            if not isinstance(server_hostname, bytes):\n-                server_hostname = server_hostname.encode('utf-8')\n-\n-            result = Security.SSLSetPeerDomainName(\n-                self.context, server_hostname, len(server_hostname)\n-            )\n-            _assert_no_error(result)\n-\n-        # Setup the ciphers.\n-        self._set_ciphers()\n-\n-        # Set the minimum and maximum TLS versions.\n-        result = Security.SSLSetProtocolVersionMin(self.context, min_version)\n-        _assert_no_error(result)\n-        result = Security.SSLSetProtocolVersionMax(self.context, max_version)\n-        _assert_no_error(result)\n-\n-        # If there's a trust DB, we need to use it. We do that by telling\n-        # SecureTransport to break on server auth. We also do that if we don't\n-        # want to validate the certs at all: we just won't actually do any\n-        # authing in that case.\n-        if not verify or trust_bundle is not None:\n-            result = Security.SSLSetSessionOption(\n-                self.context,\n-                SecurityConst.kSSLSessionOptionBreakOnServerAuth,\n-                True\n-            )\n-            _assert_no_error(result)\n-\n-        # If there's a client cert, we need to use it.\n-        if client_cert:\n-            self._keychain, self._keychain_dir = _temporary_keychain()\n-            self._client_cert_chain = _load_client_cert_chain(\n-                self._keychain, client_cert, client_key\n-            )\n-            result = Security.SSLSetCertificate(\n-                self.context, self._client_cert_chain\n-            )\n-            _assert_no_error(result)\n-\n-        while True:\n-            with self._raise_on_error():\n-                result = Security.SSLHandshake(self.context)\n-\n-                if result == SecurityConst.errSSLWouldBlock:\n-                    raise socket.timeout(\"handshake timed out\")\n-                elif result == SecurityConst.errSSLServerAuthCompleted:\n-                    self._custom_validate(verify, trust_bundle)\n-                    continue\n-                else:\n-                    _assert_no_error(result)\n-                    break\n-\n-    def fileno(self):\n-        return self.socket.fileno()\n-\n-    # Copy-pasted from Python 3.5 source code\n-    def _decref_socketios(self):\n-        if self._makefile_refs > 0:\n-            self._makefile_refs -= 1\n-        if self._closed:\n-            self.close()\n-\n-    def recv(self, bufsiz):\n-        buffer = ctypes.create_string_buffer(bufsiz)\n-        bytes_read = self.recv_into(buffer, bufsiz)\n-        data = buffer[:bytes_read]\n-        return data\n-\n-    def recv_into(self, buffer, nbytes=None):\n-        # Read short on EOF.\n-        if self._closed:\n-            return 0\n-\n-        if nbytes is None:\n-            nbytes = len(buffer)\n-\n-        buffer = (ctypes.c_char * nbytes).from_buffer(buffer)\n-        processed_bytes = ctypes.c_size_t(0)\n-\n-        with self._raise_on_error():\n-            result = Security.SSLRead(\n-                self.context, buffer, nbytes, ctypes.byref(processed_bytes)\n-            )\n-\n-        # There are some result codes that we want to treat as \"not always\n-        # errors\". Specifically, those are errSSLWouldBlock,\n-        # errSSLClosedGraceful, and errSSLClosedNoNotify.\n-        if (result == SecurityConst.errSSLWouldBlock):\n-            # If we didn't process any bytes, then this was just a time out.\n-            # However, we can get errSSLWouldBlock in situations when we *did*\n-            # read some data, and in those cases we should just read \"short\"\n-            # and return.\n-            if processed_bytes.value == 0:\n-                # Timed out, no data read.\n-                raise socket.timeout(\"recv timed out\")\n-        elif result in (SecurityConst.errSSLClosedGraceful, SecurityConst.errSSLClosedNoNotify):\n-            # The remote peer has closed this connection. We should do so as\n-            # well. Note that we don't actually return here because in\n-            # principle this could actually be fired along with return data.\n-            # It's unlikely though.\n-            self.close()\n-        else:\n-            _assert_no_error(result)\n-\n-        # Ok, we read and probably succeeded. We should return whatever data\n-        # was actually read.\n-        return processed_bytes.value\n-\n-    def settimeout(self, timeout):\n-        self._timeout = timeout\n-\n-    def gettimeout(self):\n-        return self._timeout\n-\n-    def send(self, data):\n-        processed_bytes = ctypes.c_size_t(0)\n-\n-        with self._raise_on_error():\n-            result = Security.SSLWrite(\n-                self.context, data, len(data), ctypes.byref(processed_bytes)\n-            )\n-\n-        if result == SecurityConst.errSSLWouldBlock and processed_bytes.value == 0:\n-            # Timed out\n-            raise socket.timeout(\"send timed out\")\n-        else:\n-            _assert_no_error(result)\n-\n-        # We sent, and probably succeeded. Tell them how much we sent.\n-        return processed_bytes.value\n-\n-    def sendall(self, data):\n-        total_sent = 0\n-        while total_sent < len(data):\n-            sent = self.send(data[total_sent:total_sent + SSL_WRITE_BLOCKSIZE])\n-            total_sent += sent\n-\n-    def shutdown(self):\n-        with self._raise_on_error():\n-            Security.SSLClose(self.context)\n-\n-    def close(self):\n-        # TODO: should I do clean shutdown here? Do I have to?\n-        if self._makefile_refs < 1:\n-            self._closed = True\n-            if self.context:\n-                CoreFoundation.CFRelease(self.context)\n-                self.context = None\n-            if self._client_cert_chain:\n-                CoreFoundation.CFRelease(self._client_cert_chain)\n-                self._client_cert_chain = None\n-            if self._keychain:\n-                Security.SecKeychainDelete(self._keychain)\n-                CoreFoundation.CFRelease(self._keychain)\n-                shutil.rmtree(self._keychain_dir)\n-                self._keychain = self._keychain_dir = None\n-            return self.socket.close()\n-        else:\n-            self._makefile_refs -= 1\n-\n-    def getpeercert(self, binary_form=False):\n-        # Urgh, annoying.\n-        #\n-        # Here's how we do this:\n-        #\n-        # 1. Call SSLCopyPeerTrust to get hold of the trust object for this\n-        #    connection.\n-        # 2. Call SecTrustGetCertificateAtIndex for index 0 to get the leaf.\n-        # 3. To get the CN, call SecCertificateCopyCommonName and process that\n-        #    string so that it's of the appropriate type.\n-        # 4. To get the SAN, we need to do something a bit more complex:\n-        #    a. Call SecCertificateCopyValues to get the data, requesting\n-        #       kSecOIDSubjectAltName.\n-        #    b. Mess about with this dictionary to try to get the SANs out.\n-        #\n-        # This is gross. Really gross. It's going to be a few hundred LoC extra\n-        # just to repeat something that SecureTransport can *already do*. So my\n-        # operating assumption at this time is that what we want to do is\n-        # instead to just flag to urllib3 that it shouldn't do its own hostname\n-        # validation when using SecureTransport.\n-        if not binary_form:\n-            raise ValueError(\n-                \"SecureTransport only supports dumping binary certs\"\n-            )\n-        trust = Security.SecTrustRef()\n-        certdata = None\n-        der_bytes = None\n-\n-        try:\n-            # Grab the trust store.\n-            result = Security.SSLCopyPeerTrust(\n-                self.context, ctypes.byref(trust)\n-            )\n-            _assert_no_error(result)\n-            if not trust:\n-                # Probably we haven't done the handshake yet. No biggie.\n-                return None\n-\n-            cert_count = Security.SecTrustGetCertificateCount(trust)\n-            if not cert_count:\n-                # Also a case that might happen if we haven't handshaked.\n-                # Handshook? Handshaken?\n-                return None\n-\n-            leaf = Security.SecTrustGetCertificateAtIndex(trust, 0)\n-            assert leaf\n-\n-            # Ok, now we want the DER bytes.\n-            certdata = Security.SecCertificateCopyData(leaf)\n-            assert certdata\n-\n-            data_length = CoreFoundation.CFDataGetLength(certdata)\n-            data_buffer = CoreFoundation.CFDataGetBytePtr(certdata)\n-            der_bytes = ctypes.string_at(data_buffer, data_length)\n-        finally:\n-            if certdata:\n-                CoreFoundation.CFRelease(certdata)\n-            if trust:\n-                CoreFoundation.CFRelease(trust)\n-\n-        return der_bytes\n-\n-    def _reuse(self):\n-        self._makefile_refs += 1\n-\n-    def _drop(self):\n-        if self._makefile_refs < 1:\n-            self.close()\n-        else:\n-            self._makefile_refs -= 1\n-\n-\n-if _fileobject:  # Platform-specific: Python 2\n-    def makefile(self, mode, bufsize=-1):\n-        self._makefile_refs += 1\n-        return _fileobject(self, mode, bufsize, close=True)\n-else:  # Platform-specific: Python 3\n-    def makefile(self, mode=\"r\", buffering=None, *args, **kwargs):\n-        # We disable buffering with SecureTransport because it conflicts with\n-        # the buffering that ST does internally (see issue #1153 for more).\n-        buffering = 0\n-        return backport_makefile(self, mode, buffering, *args, **kwargs)\n-\n-WrappedSocket.makefile = makefile\n-\n-\n-class SecureTransportContext(object):\n-    \"\"\"\n-    I am a wrapper class for the SecureTransport library, to translate the\n-    interface of the standard library ``SSLContext`` object to calls into\n-    SecureTransport.\n-    \"\"\"\n-    def __init__(self, protocol):\n-        self._min_version, self._max_version = _protocol_to_min_max[protocol]\n-        self._options = 0\n-        self._verify = False\n-        self._trust_bundle = None\n-        self._client_cert = None\n-        self._client_key = None\n-        self._client_key_passphrase = None\n-\n-    @property\n-    def check_hostname(self):\n-        \"\"\"\n-        SecureTransport cannot have its hostname checking disabled. For more,\n-        see the comment on getpeercert() in this file.\n-        \"\"\"\n-        return True\n-\n-    @check_hostname.setter\n-    def check_hostname(self, value):\n-        \"\"\"\n-        SecureTransport cannot have its hostname checking disabled. For more,\n-        see the comment on getpeercert() in this file.\n-        \"\"\"\n-        pass\n-\n-    @property\n-    def options(self):\n-        # TODO: Well, crap.\n-        #\n-        # So this is the bit of the code that is the most likely to cause us\n-        # trouble. Essentially we need to enumerate all of the SSL options that\n-        # users might want to use and try to see if we can sensibly translate\n-        # them, or whether we should just ignore them.\n-        return self._options\n-\n-    @options.setter\n-    def options(self, value):\n-        # TODO: Update in line with above.\n-        self._options = value\n-\n-    @property\n-    def verify_mode(self):\n-        return ssl.CERT_REQUIRED if self._verify else ssl.CERT_NONE\n-\n-    @verify_mode.setter\n-    def verify_mode(self, value):\n-        self._verify = True if value == ssl.CERT_REQUIRED else False\n-\n-    def set_default_verify_paths(self):\n-        # So, this has to do something a bit weird. Specifically, what it does\n-        # is nothing.\n-        #\n-        # This means that, if we had previously had load_verify_locations\n-        # called, this does not undo that. We need to do that because it turns\n-        # out that the rest of the urllib3 code will attempt to load the\n-        # default verify paths if it hasn't been told about any paths, even if\n-        # the context itself was sometime earlier. We resolve that by just\n-        # ignoring it.\n-        pass\n-\n-    def load_default_certs(self):\n-        return self.set_default_verify_paths()\n-\n-    def set_ciphers(self, ciphers):\n-        # For now, we just require the default cipher string.\n-        if ciphers != util.ssl_.DEFAULT_CIPHERS:\n-            raise ValueError(\n-                \"SecureTransport doesn't support custom cipher strings\"\n-            )\n-\n-    def load_verify_locations(self, cafile=None, capath=None, cadata=None):\n-        # OK, we only really support cadata and cafile.\n-        if capath is not None:\n-            raise ValueError(\n-                \"SecureTransport does not support cert directories\"\n-            )\n-\n-        self._trust_bundle = cafile or cadata\n-\n-    def load_cert_chain(self, certfile, keyfile=None, password=None):\n-        self._client_cert = certfile\n-        self._client_key = keyfile\n-        self._client_cert_passphrase = password\n-\n-    def wrap_socket(self, sock, server_side=False,\n-                    do_handshake_on_connect=True, suppress_ragged_eofs=True,\n-                    server_hostname=None):\n-        # So, what do we do here? Firstly, we assert some properties. This is a\n-        # stripped down shim, so there is some functionality we don't support.\n-        # See PEP 543 for the real deal.\n-        assert not server_side\n-        assert do_handshake_on_connect\n-        assert suppress_ragged_eofs\n-\n-        # Ok, we're good to go. Now we want to create the wrapped socket object\n-        # and store it in the appropriate place.\n-        wrapped_socket = WrappedSocket(sock)\n-\n-        # Now we can handshake\n-        wrapped_socket.handshake(\n-            server_hostname, self._verify, self._trust_bundle,\n-            self._min_version, self._max_version, self._client_cert,\n-            self._client_key, self._client_key_passphrase\n-        )\n-        return wrapped_socket\n\n@@ -1,188 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-This module contains provisional support for SOCKS proxies from within\n-urllib3. This module supports SOCKS4 (specifically the SOCKS4A variant) and\n-SOCKS5. To enable its functionality, either install PySocks or install this\n-module with the ``socks`` extra.\n-\n-The SOCKS implementation supports the full range of urllib3 features. It also\n-supports the following SOCKS features:\n-\n-- SOCKS4\n-- SOCKS4a\n-- SOCKS5\n-- Usernames and passwords for the SOCKS proxy\n-\n-Known Limitations:\n-\n-- Currently PySocks does not support contacting remote websites via literal\n-  IPv6 addresses. Any such connection attempt will fail. You must use a domain\n-  name.\n-- Currently PySocks does not support IPv6 connections to the SOCKS proxy. Any\n-  such connection attempt will fail.\n-\"\"\"\n-from __future__ import absolute_import\n-\n-try:\n-    import socks\n-except ImportError:\n-    import warnings\n-    from ..exceptions import DependencyWarning\n-\n-    warnings.warn((\n-        'SOCKS support in urllib3 requires the installation of optional '\n-        'dependencies: specifically, PySocks.  For more information, see '\n-        'https://urllib3.readthedocs.io/en/latest/contrib.html#socks-proxies'\n-        ),\n-        DependencyWarning\n-    )\n-    raise\n-\n-from socket import error as SocketError, timeout as SocketTimeout\n-\n-from ..connection import (\n-    HTTPConnection, HTTPSConnection\n-)\n-from ..connectionpool import (\n-    HTTPConnectionPool, HTTPSConnectionPool\n-)\n-from ..exceptions import ConnectTimeoutError, NewConnectionError\n-from ..poolmanager import PoolManager\n-from ..util.url import parse_url\n-\n-try:\n-    import ssl\n-except ImportError:\n-    ssl = None\n-\n-\n-class SOCKSConnection(HTTPConnection):\n-    \"\"\"\n-    A plain-text HTTP connection that connects via a SOCKS proxy.\n-    \"\"\"\n-    def __init__(self, *args, **kwargs):\n-        self._socks_options = kwargs.pop('_socks_options')\n-        super(SOCKSConnection, self).__init__(*args, **kwargs)\n-\n-    def _new_conn(self):\n-        \"\"\"\n-        Establish a new connection via the SOCKS proxy.\n-        \"\"\"\n-        extra_kw = {}\n-        if self.source_address:\n-            extra_kw['source_address'] = self.source_address\n-\n-        if self.socket_options:\n-            extra_kw['socket_options'] = self.socket_options\n-\n-        try:\n-            conn = socks.create_connection(\n-                (self.host, self.port),\n-                proxy_type=self._socks_options['socks_version'],\n-                proxy_addr=self._socks_options['proxy_host'],\n-                proxy_port=self._socks_options['proxy_port'],\n-                proxy_username=self._socks_options['username'],\n-                proxy_password=self._socks_options['password'],\n-                proxy_rdns=self._socks_options['rdns'],\n-                timeout=self.timeout,\n-                **extra_kw\n-            )\n-\n-        except SocketTimeout as e:\n-            raise ConnectTimeoutError(\n-                self, \"Connection to %s timed out. (connect timeout=%s)\" %\n-                (self.host, self.timeout))\n-\n-        except socks.ProxyError as e:\n-            # This is fragile as hell, but it seems to be the only way to raise\n-            # useful errors here.\n-            if e.socket_err:\n-                error = e.socket_err\n-                if isinstance(error, SocketTimeout):\n-                    raise ConnectTimeoutError(\n-                        self,\n-                        \"Connection to %s timed out. (connect timeout=%s)\" %\n-                        (self.host, self.timeout)\n-                    )\n-                else:\n-                    raise NewConnectionError(\n-                        self,\n-                        \"Failed to establish a new connection: %s\" % error\n-                    )\n-            else:\n-                raise NewConnectionError(\n-                    self,\n-                    \"Failed to establish a new connection: %s\" % e\n-                )\n-\n-        except SocketError as e:  # Defensive: PySocks should catch all these.\n-            raise NewConnectionError(\n-                self, \"Failed to establish a new connection: %s\" % e)\n-\n-        return conn\n-\n-\n-# We don't need to duplicate the Verified/Unverified distinction from\n-# urllib3/connection.py here because the HTTPSConnection will already have been\n-# correctly set to either the Verified or Unverified form by that module. This\n-# means the SOCKSHTTPSConnection will automatically be the correct type.\n-class SOCKSHTTPSConnection(SOCKSConnection, HTTPSConnection):\n-    pass\n-\n-\n-class SOCKSHTTPConnectionPool(HTTPConnectionPool):\n-    ConnectionCls = SOCKSConnection\n-\n-\n-class SOCKSHTTPSConnectionPool(HTTPSConnectionPool):\n-    ConnectionCls = SOCKSHTTPSConnection\n-\n-\n-class SOCKSProxyManager(PoolManager):\n-    \"\"\"\n-    A version of the urllib3 ProxyManager that routes connections via the\n-    defined SOCKS proxy.\n-    \"\"\"\n-    pool_classes_by_scheme = {\n-        'http': SOCKSHTTPConnectionPool,\n-        'https': SOCKSHTTPSConnectionPool,\n-    }\n-\n-    def __init__(self, proxy_url, username=None, password=None,\n-                 num_pools=10, headers=None, **connection_pool_kw):\n-        parsed = parse_url(proxy_url)\n-\n-        if parsed.scheme == 'socks5':\n-            socks_version = socks.PROXY_TYPE_SOCKS5\n-            rdns = False\n-        elif parsed.scheme == 'socks5h':\n-            socks_version = socks.PROXY_TYPE_SOCKS5\n-            rdns = True\n-        elif parsed.scheme == 'socks4':\n-            socks_version = socks.PROXY_TYPE_SOCKS4\n-            rdns = False\n-        elif parsed.scheme == 'socks4a':\n-            socks_version = socks.PROXY_TYPE_SOCKS4\n-            rdns = True\n-        else:\n-            raise ValueError(\n-                \"Unable to determine SOCKS version from %s\" % proxy_url\n-            )\n-\n-        self.proxy_url = proxy_url\n-\n-        socks_options = {\n-            'socks_version': socks_version,\n-            'proxy_host': parsed.host,\n-            'proxy_port': parsed.port,\n-            'username': username,\n-            'password': password,\n-            'rdns': rdns\n-        }\n-        connection_pool_kw['_socks_options'] = socks_options\n-\n-        super(SOCKSProxyManager, self).__init__(\n-            num_pools, headers, **connection_pool_kw\n-        )\n-\n-        self.pool_classes_by_scheme = SOCKSProxyManager.pool_classes_by_scheme\n\n@@ -1,246 +0,0 @@\n-from __future__ import absolute_import\n-from .packages.six.moves.http_client import (\n-    IncompleteRead as httplib_IncompleteRead\n-)\n-# Base Exceptions\n-\n-\n-class HTTPError(Exception):\n-    \"Base exception used by this module.\"\n-    pass\n-\n-\n-class HTTPWarning(Warning):\n-    \"Base warning used by this module.\"\n-    pass\n-\n-\n-class PoolError(HTTPError):\n-    \"Base exception for errors caused within a pool.\"\n-    def __init__(self, pool, message):\n-        self.pool = pool\n-        HTTPError.__init__(self, \"%s: %s\" % (pool, message))\n-\n-    def __reduce__(self):\n-        # For pickling purposes.\n-        return self.__class__, (None, None)\n-\n-\n-class RequestError(PoolError):\n-    \"Base exception for PoolErrors that have associated URLs.\"\n-    def __init__(self, pool, url, message):\n-        self.url = url\n-        PoolError.__init__(self, pool, message)\n-\n-    def __reduce__(self):\n-        # For pickling purposes.\n-        return self.__class__, (None, self.url, None)\n-\n-\n-class SSLError(HTTPError):\n-    \"Raised when SSL certificate fails in an HTTPS connection.\"\n-    pass\n-\n-\n-class ProxyError(HTTPError):\n-    \"Raised when the connection to a proxy fails.\"\n-    pass\n-\n-\n-class DecodeError(HTTPError):\n-    \"Raised when automatic decoding based on Content-Type fails.\"\n-    pass\n-\n-\n-class ProtocolError(HTTPError):\n-    \"Raised when something unexpected happens mid-request/response.\"\n-    pass\n-\n-\n-#: Renamed to ProtocolError but aliased for backwards compatibility.\n-ConnectionError = ProtocolError\n-\n-\n-# Leaf Exceptions\n-\n-class MaxRetryError(RequestError):\n-    \"\"\"Raised when the maximum number of retries is exceeded.\n-\n-    :param pool: The connection pool\n-    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`\n-    :param string url: The requested Url\n-    :param exceptions.Exception reason: The underlying error\n-\n-    \"\"\"\n-\n-    def __init__(self, pool, url, reason=None):\n-        self.reason = reason\n-\n-        message = \"Max retries exceeded with url: %s (Caused by %r)\" % (\n-            url, reason)\n-\n-        RequestError.__init__(self, pool, url, message)\n-\n-\n-class HostChangedError(RequestError):\n-    \"Raised when an existing pool gets a request for a foreign host.\"\n-\n-    def __init__(self, pool, url, retries=3):\n-        message = \"Tried to open a foreign host with url: %s\" % url\n-        RequestError.__init__(self, pool, url, message)\n-        self.retries = retries\n-\n-\n-class TimeoutStateError(HTTPError):\n-    \"\"\" Raised when passing an invalid state to a timeout \"\"\"\n-    pass\n-\n-\n-class TimeoutError(HTTPError):\n-    \"\"\" Raised when a socket timeout error occurs.\n-\n-    Catching this error will catch both :exc:`ReadTimeoutErrors\n-    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.\n-    \"\"\"\n-    pass\n-\n-\n-class ReadTimeoutError(TimeoutError, RequestError):\n-    \"Raised when a socket timeout occurs while receiving data from a server\"\n-    pass\n-\n-\n-# This timeout error does not have a URL attached and needs to inherit from the\n-# base HTTPError\n-class ConnectTimeoutError(TimeoutError):\n-    \"Raised when a socket timeout occurs while connecting to a server\"\n-    pass\n-\n-\n-class NewConnectionError(ConnectTimeoutError, PoolError):\n-    \"Raised when we fail to establish a new connection. Usually ECONNREFUSED.\"\n-    pass\n-\n-\n-class EmptyPoolError(PoolError):\n-    \"Raised when a pool runs out of connections and no more are allowed.\"\n-    pass\n-\n-\n-class ClosedPoolError(PoolError):\n-    \"Raised when a request enters a pool after the pool has been closed.\"\n-    pass\n-\n-\n-class LocationValueError(ValueError, HTTPError):\n-    \"Raised when there is something wrong with a given URL input.\"\n-    pass\n-\n-\n-class LocationParseError(LocationValueError):\n-    \"Raised when get_host or similar fails to parse the URL input.\"\n-\n-    def __init__(self, location):\n-        message = \"Failed to parse: %s\" % location\n-        HTTPError.__init__(self, message)\n-\n-        self.location = location\n-\n-\n-class ResponseError(HTTPError):\n-    \"Used as a container for an error reason supplied in a MaxRetryError.\"\n-    GENERIC_ERROR = 'too many error responses'\n-    SPECIFIC_ERROR = 'too many {status_code} error responses'\n-\n-\n-class SecurityWarning(HTTPWarning):\n-    \"Warned when perfoming security reducing actions\"\n-    pass\n-\n-\n-class SubjectAltNameWarning(SecurityWarning):\n-    \"Warned when connecting to a host with a certificate missing a SAN.\"\n-    pass\n-\n-\n-class InsecureRequestWarning(SecurityWarning):\n-    \"Warned when making an unverified HTTPS request.\"\n-    pass\n-\n-\n-class SystemTimeWarning(SecurityWarning):\n-    \"Warned when system time is suspected to be wrong\"\n-    pass\n-\n-\n-class InsecurePlatformWarning(SecurityWarning):\n-    \"Warned when certain SSL configuration is not available on a platform.\"\n-    pass\n-\n-\n-class SNIMissingWarning(HTTPWarning):\n-    \"Warned when making a HTTPS request without SNI available.\"\n-    pass\n-\n-\n-class DependencyWarning(HTTPWarning):\n-    \"\"\"\n-    Warned when an attempt is made to import a module with missing optional\n-    dependencies.\n-    \"\"\"\n-    pass\n-\n-\n-class ResponseNotChunked(ProtocolError, ValueError):\n-    \"Response needs to be chunked in order to read it as chunks.\"\n-    pass\n-\n-\n-class BodyNotHttplibCompatible(HTTPError):\n-    \"\"\"\n-    Body should be httplib.HTTPResponse like (have an fp attribute which\n-    returns raw chunks) for read_chunked().\n-    \"\"\"\n-    pass\n-\n-\n-class IncompleteRead(HTTPError, httplib_IncompleteRead):\n-    \"\"\"\n-    Response length doesn't match expected Content-Length\n-\n-    Subclass of http_client.IncompleteRead to allow int value\n-    for `partial` to avoid creating large objects on streamed\n-    reads.\n-    \"\"\"\n-    def __init__(self, partial, expected):\n-        super(IncompleteRead, self).__init__(partial, expected)\n-\n-    def __repr__(self):\n-        return ('IncompleteRead(%i bytes read, '\n-                '%i more expected)' % (self.partial, self.expected))\n-\n-\n-class InvalidHeader(HTTPError):\n-    \"The header provided was somehow invalid.\"\n-    pass\n-\n-\n-class ProxySchemeUnknown(AssertionError, ValueError):\n-    \"ProxyManager does not support the supplied scheme\"\n-    # TODO(t-8ch): Stop inheriting from AssertionError in v2.0.\n-\n-    def __init__(self, scheme):\n-        message = \"Not supported proxy scheme %s\" % scheme\n-        super(ProxySchemeUnknown, self).__init__(message)\n-\n-\n-class HeaderParsingError(HTTPError):\n-    \"Raised by assert_header_parsing, but we convert it to a log.warning statement.\"\n-    def __init__(self, defects, unparsed_data):\n-        message = '%s, unparsed data: %r' % (defects or 'Unknown', unparsed_data)\n-        super(HeaderParsingError, self).__init__(message)\n-\n-\n-class UnrewindableBodyError(HTTPError):\n-    \"urllib3 encountered an error when trying to rewind a body\"\n-    pass\n\n@@ -1,178 +0,0 @@\n-from __future__ import absolute_import\n-import email.utils\n-import mimetypes\n-\n-from .packages import six\n-\n-\n-def guess_content_type(filename, default='application/octet-stream'):\n-    \"\"\"\n-    Guess the \"Content-Type\" of a file.\n-\n-    :param filename:\n-        The filename to guess the \"Content-Type\" of using :mod:`mimetypes`.\n-    :param default:\n-        If no \"Content-Type\" can be guessed, default to `default`.\n-    \"\"\"\n-    if filename:\n-        return mimetypes.guess_type(filename)[0] or default\n-    return default\n-\n-\n-def format_header_param(name, value):\n-    \"\"\"\n-    Helper function to format and quote a single header parameter.\n-\n-    Particularly useful for header parameters which might contain\n-    non-ASCII values, like file names. This follows RFC 2231, as\n-    suggested by RFC 2388 Section 4.4.\n-\n-    :param name:\n-        The name of the parameter, a string expected to be ASCII only.\n-    :param value:\n-        The value of the parameter, provided as a unicode string.\n-    \"\"\"\n-    if not any(ch in value for ch in '\"\\\\\\r\\n'):\n-        result = '%s=\"%s\"' % (name, value)\n-        try:\n-            result.encode('ascii')\n-        except (UnicodeEncodeError, UnicodeDecodeError):\n-            pass\n-        else:\n-            return result\n-    if not six.PY3 and isinstance(value, six.text_type):  # Python 2:\n-        value = value.encode('utf-8')\n-    value = email.utils.encode_rfc2231(value, 'utf-8')\n-    value = '%s*=%s' % (name, value)\n-    return value\n-\n-\n-class RequestField(object):\n-    \"\"\"\n-    A data container for request body parameters.\n-\n-    :param name:\n-        The name of this request field.\n-    :param data:\n-        The data/value body.\n-    :param filename:\n-        An optional filename of the request field.\n-    :param headers:\n-        An optional dict-like object of headers to initially use for the field.\n-    \"\"\"\n-    def __init__(self, name, data, filename=None, headers=None):\n-        self._name = name\n-        self._filename = filename\n-        self.data = data\n-        self.headers = {}\n-        if headers:\n-            self.headers = dict(headers)\n-\n-    @classmethod\n-    def from_tuples(cls, fieldname, value):\n-        \"\"\"\n-        A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.\n-\n-        Supports constructing :class:`~urllib3.fields.RequestField` from\n-        parameter of key/value strings AND key/filetuple. A filetuple is a\n-        (filename, data, MIME type) tuple where the MIME type is optional.\n-        For example::\n-\n-            'foo': 'bar',\n-            'fakefile': ('foofile.txt', 'contents of foofile'),\n-            'realfile': ('barfile.txt', open('realfile').read()),\n-            'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),\n-            'nonamefile': 'contents of nonamefile field',\n-\n-        Field names and filenames must be unicode.\n-        \"\"\"\n-        if isinstance(value, tuple):\n-            if len(value) == 3:\n-                filename, data, content_type = value\n-            else:\n-                filename, data = value\n-                content_type = guess_content_type(filename)\n-        else:\n-            filename = None\n-            content_type = None\n-            data = value\n-\n-        request_param = cls(fieldname, data, filename=filename)\n-        request_param.make_multipart(content_type=content_type)\n-\n-        return request_param\n-\n-    def _render_part(self, name, value):\n-        \"\"\"\n-        Overridable helper function to format a single header parameter.\n-\n-        :param name:\n-            The name of the parameter, a string expected to be ASCII only.\n-        :param value:\n-            The value of the parameter, provided as a unicode string.\n-        \"\"\"\n-        return format_header_param(name, value)\n-\n-    def _render_parts(self, header_parts):\n-        \"\"\"\n-        Helper function to format and quote a single header.\n-\n-        Useful for single headers that are composed of multiple items. E.g.,\n-        'Content-Disposition' fields.\n-\n-        :param header_parts:\n-            A sequence of (k, v) typles or a :class:`dict` of (k, v) to format\n-            as `k1=\"v1\"; k2=\"v2\"; ...`.\n-        \"\"\"\n-        parts = []\n-        iterable = header_parts\n-        if isinstance(header_parts, dict):\n-            iterable = header_parts.items()\n-\n-        for name, value in iterable:\n-            if value is not None:\n-                parts.append(self._render_part(name, value))\n-\n-        return '; '.join(parts)\n-\n-    def render_headers(self):\n-        \"\"\"\n-        Renders the headers for this request field.\n-        \"\"\"\n-        lines = []\n-\n-        sort_keys = ['Content-Disposition', 'Content-Type', 'Content-Location']\n-        for sort_key in sort_keys:\n-            if self.headers.get(sort_key, False):\n-                lines.append('%s: %s' % (sort_key, self.headers[sort_key]))\n-\n-        for header_name, header_value in self.headers.items():\n-            if header_name not in sort_keys:\n-                if header_value:\n-                    lines.append('%s: %s' % (header_name, header_value))\n-\n-        lines.append('\\r\\n')\n-        return '\\r\\n'.join(lines)\n-\n-    def make_multipart(self, content_disposition=None, content_type=None,\n-                       content_location=None):\n-        \"\"\"\n-        Makes this request field into a multipart request field.\n-\n-        This method overrides \"Content-Disposition\", \"Content-Type\" and\n-        \"Content-Location\" headers to the request parameter.\n-\n-        :param content_type:\n-            The 'Content-Type' of the request body.\n-        :param content_location:\n-            The 'Content-Location' of the request body.\n-\n-        \"\"\"\n-        self.headers['Content-Disposition'] = content_disposition or 'form-data'\n-        self.headers['Content-Disposition'] += '; '.join([\n-            '', self._render_parts(\n-                (('name', self._name), ('filename', self._filename))\n-            )\n-        ])\n-        self.headers['Content-Type'] = content_type\n-        self.headers['Content-Location'] = content_location\n\n@@ -1,94 +0,0 @@\n-from __future__ import absolute_import\n-import codecs\n-\n-from uuid import uuid4\n-from io import BytesIO\n-\n-from .packages import six\n-from .packages.six import b\n-from .fields import RequestField\n-\n-writer = codecs.lookup('utf-8')[3]\n-\n-\n-def choose_boundary():\n-    \"\"\"\n-    Our embarrassingly-simple replacement for mimetools.choose_boundary.\n-    \"\"\"\n-    return uuid4().hex\n-\n-\n-def iter_field_objects(fields):\n-    \"\"\"\n-    Iterate over fields.\n-\n-    Supports list of (k, v) tuples and dicts, and lists of\n-    :class:`~urllib3.fields.RequestField`.\n-\n-    \"\"\"\n-    if isinstance(fields, dict):\n-        i = six.iteritems(fields)\n-    else:\n-        i = iter(fields)\n-\n-    for field in i:\n-        if isinstance(field, RequestField):\n-            yield field\n-        else:\n-            yield RequestField.from_tuples(*field)\n-\n-\n-def iter_fields(fields):\n-    \"\"\"\n-    .. deprecated:: 1.6\n-\n-    Iterate over fields.\n-\n-    The addition of :class:`~urllib3.fields.RequestField` makes this function\n-    obsolete. Instead, use :func:`iter_field_objects`, which returns\n-    :class:`~urllib3.fields.RequestField` objects.\n-\n-    Supports list of (k, v) tuples and dicts.\n-    \"\"\"\n-    if isinstance(fields, dict):\n-        return ((k, v) for k, v in six.iteritems(fields))\n-\n-    return ((k, v) for k, v in fields)\n-\n-\n-def encode_multipart_formdata(fields, boundary=None):\n-    \"\"\"\n-    Encode a dictionary of ``fields`` using the multipart/form-data MIME format.\n-\n-    :param fields:\n-        Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).\n-\n-    :param boundary:\n-        If not specified, then a random boundary will be generated using\n-        :func:`mimetools.choose_boundary`.\n-    \"\"\"\n-    body = BytesIO()\n-    if boundary is None:\n-        boundary = choose_boundary()\n-\n-    for field in iter_field_objects(fields):\n-        body.write(b('--%s\\r\\n' % (boundary)))\n-\n-        writer(body).write(field.render_headers())\n-        data = field.data\n-\n-        if isinstance(data, int):\n-            data = str(data)  # Backwards compatibility\n-\n-        if isinstance(data, six.text_type):\n-            writer(body).write(data)\n-        else:\n-            body.write(data)\n-\n-        body.write(b'\\r\\n')\n-\n-    body.write(b('--%s--\\r\\n' % (boundary)))\n-\n-    content_type = str('multipart/form-data; boundary=%s' % boundary)\n-\n-    return body.getvalue(), content_type\n\n@@ -1,5 +0,0 @@\n-from __future__ import absolute_import\n-\n-from . import ssl_match_hostname\n-\n-__all__ = ('ssl_match_hostname', )\n\n\n@@ -1,53 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-backports.makefile\n-~~~~~~~~~~~~~~~~~~\n-\n-Backports the Python 3 ``socket.makefile`` method for use with anything that\n-wants to create a \"fake\" socket object.\n-\"\"\"\n-import io\n-\n-from socket import SocketIO\n-\n-\n-def backport_makefile(self, mode=\"r\", buffering=None, encoding=None,\n-                      errors=None, newline=None):\n-    \"\"\"\n-    Backport of ``socket.makefile`` from Python 3.5.\n-    \"\"\"\n-    if not set(mode) <= set([\"r\", \"w\", \"b\"]):\n-        raise ValueError(\n-            \"invalid mode %r (only r, w, b allowed)\" % (mode,)\n-        )\n-    writing = \"w\" in mode\n-    reading = \"r\" in mode or not writing\n-    assert reading or writing\n-    binary = \"b\" in mode\n-    rawmode = \"\"\n-    if reading:\n-        rawmode += \"r\"\n-    if writing:\n-        rawmode += \"w\"\n-    raw = SocketIO(self, rawmode)\n-    self._makefile_refs += 1\n-    if buffering is None:\n-        buffering = -1\n-    if buffering < 0:\n-        buffering = io.DEFAULT_BUFFER_SIZE\n-    if buffering == 0:\n-        if not binary:\n-            raise ValueError(\"unbuffered streams must be binary\")\n-        return raw\n-    if reading and writing:\n-        buffer = io.BufferedRWPair(raw, raw, buffering)\n-    elif reading:\n-        buffer = io.BufferedReader(raw, buffering)\n-    else:\n-        assert writing\n-        buffer = io.BufferedWriter(raw, buffering)\n-    if binary:\n-        return buffer\n-    text = io.TextIOWrapper(buffer, encoding, errors, newline)\n-    text.mode = mode\n-    return text\n\n@@ -1,259 +0,0 @@\n-# Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.\n-# Passes Python2.7's test suite and incorporates all the latest updates.\n-# Copyright 2009 Raymond Hettinger, released under the MIT License.\n-# http://code.activestate.com/recipes/576693/\n-try:\n-    from thread import get_ident as _get_ident\n-except ImportError:\n-    from dummy_thread import get_ident as _get_ident\n-\n-try:\n-    from _abcoll import KeysView, ValuesView, ItemsView\n-except ImportError:\n-    pass\n-\n-\n-class OrderedDict(dict):\n-    'Dictionary that remembers insertion order'\n-    # An inherited dict maps keys to values.\n-    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n-    # The remaining methods are order-aware.\n-    # Big-O running times for all methods are the same as for regular dictionaries.\n-\n-    # The internal self.__map dictionary maps keys to links in a doubly linked list.\n-    # The circular doubly linked list starts and ends with a sentinel element.\n-    # The sentinel element never gets deleted (this simplifies the algorithm).\n-    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].\n-\n-    def __init__(self, *args, **kwds):\n-        '''Initialize an ordered dictionary.  Signature is the same as for\n-        regular dictionaries, but keyword arguments are not recommended\n-        because their insertion order is arbitrary.\n-\n-        '''\n-        if len(args) > 1:\n-            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n-        try:\n-            self.__root\n-        except AttributeError:\n-            self.__root = root = []                     # sentinel node\n-            root[:] = [root, root, None]\n-            self.__map = {}\n-        self.__update(*args, **kwds)\n-\n-    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):\n-        'od.__setitem__(i, y) <==> od[i]=y'\n-        # Setting a new item creates a new link which goes at the end of the linked\n-        # list, and the inherited dictionary is updated with the new key/value pair.\n-        if key not in self:\n-            root = self.__root\n-            last = root[0]\n-            last[1] = root[0] = self.__map[key] = [last, root, key]\n-        dict_setitem(self, key, value)\n-\n-    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n-        'od.__delitem__(y) <==> del od[y]'\n-        # Deleting an existing item uses self.__map to find the link which is\n-        # then removed by updating the links in the predecessor and successor nodes.\n-        dict_delitem(self, key)\n-        link_prev, link_next, key = self.__map.pop(key)\n-        link_prev[1] = link_next\n-        link_next[0] = link_prev\n-\n-    def __iter__(self):\n-        'od.__iter__() <==> iter(od)'\n-        root = self.__root\n-        curr = root[1]\n-        while curr is not root:\n-            yield curr[2]\n-            curr = curr[1]\n-\n-    def __reversed__(self):\n-        'od.__reversed__() <==> reversed(od)'\n-        root = self.__root\n-        curr = root[0]\n-        while curr is not root:\n-            yield curr[2]\n-            curr = curr[0]\n-\n-    def clear(self):\n-        'od.clear() -> None.  Remove all items from od.'\n-        try:\n-            for node in self.__map.itervalues():\n-                del node[:]\n-            root = self.__root\n-            root[:] = [root, root, None]\n-            self.__map.clear()\n-        except AttributeError:\n-            pass\n-        dict.clear(self)\n-\n-    def popitem(self, last=True):\n-        '''od.popitem() -> (k, v), return and remove a (key, value) pair.\n-        Pairs are returned in LIFO order if last is true or FIFO order if false.\n-\n-        '''\n-        if not self:\n-            raise KeyError('dictionary is empty')\n-        root = self.__root\n-        if last:\n-            link = root[0]\n-            link_prev = link[0]\n-            link_prev[1] = root\n-            root[0] = link_prev\n-        else:\n-            link = root[1]\n-            link_next = link[1]\n-            root[1] = link_next\n-            link_next[0] = root\n-        key = link[2]\n-        del self.__map[key]\n-        value = dict.pop(self, key)\n-        return key, value\n-\n-    # -- the following methods do not depend on the internal structure --\n-\n-    def keys(self):\n-        'od.keys() -> list of keys in od'\n-        return list(self)\n-\n-    def values(self):\n-        'od.values() -> list of values in od'\n-        return [self[key] for key in self]\n-\n-    def items(self):\n-        'od.items() -> list of (key, value) pairs in od'\n-        return [(key, self[key]) for key in self]\n-\n-    def iterkeys(self):\n-        'od.iterkeys() -> an iterator over the keys in od'\n-        return iter(self)\n-\n-    def itervalues(self):\n-        'od.itervalues -> an iterator over the values in od'\n-        for k in self:\n-            yield self[k]\n-\n-    def iteritems(self):\n-        'od.iteritems -> an iterator over the (key, value) items in od'\n-        for k in self:\n-            yield (k, self[k])\n-\n-    def update(*args, **kwds):\n-        '''od.update(E, **F) -> None.  Update od from dict/iterable E and F.\n-\n-        If E is a dict instance, does:           for k in E: od[k] = E[k]\n-        If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]\n-        Or if E is an iterable of items, does:   for k, v in E: od[k] = v\n-        In either case, this is followed by:     for k, v in F.items(): od[k] = v\n-\n-        '''\n-        if len(args) > 2:\n-            raise TypeError('update() takes at most 2 positional '\n-                            'arguments (%d given)' % (len(args),))\n-        elif not args:\n-            raise TypeError('update() takes at least 1 argument (0 given)')\n-        self = args[0]\n-        # Make progressively weaker assumptions about \"other\"\n-        other = ()\n-        if len(args) == 2:\n-            other = args[1]\n-        if isinstance(other, dict):\n-            for key in other:\n-                self[key] = other[key]\n-        elif hasattr(other, 'keys'):\n-            for key in other.keys():\n-                self[key] = other[key]\n-        else:\n-            for key, value in other:\n-                self[key] = value\n-        for key, value in kwds.items():\n-            self[key] = value\n-\n-    __update = update  # let subclasses override update without breaking __init__\n-\n-    __marker = object()\n-\n-    def pop(self, key, default=__marker):\n-        '''od.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n-        If key is not found, d is returned if given, otherwise KeyError is raised.\n-\n-        '''\n-        if key in self:\n-            result = self[key]\n-            del self[key]\n-            return result\n-        if default is self.__marker:\n-            raise KeyError(key)\n-        return default\n-\n-    def setdefault(self, key, default=None):\n-        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'\n-        if key in self:\n-            return self[key]\n-        self[key] = default\n-        return default\n-\n-    def __repr__(self, _repr_running={}):\n-        'od.__repr__() <==> repr(od)'\n-        call_key = id(self), _get_ident()\n-        if call_key in _repr_running:\n-            return '...'\n-        _repr_running[call_key] = 1\n-        try:\n-            if not self:\n-                return '%s()' % (self.__class__.__name__,)\n-            return '%s(%r)' % (self.__class__.__name__, self.items())\n-        finally:\n-            del _repr_running[call_key]\n-\n-    def __reduce__(self):\n-        'Return state information for pickling'\n-        items = [[k, self[k]] for k in self]\n-        inst_dict = vars(self).copy()\n-        for k in vars(OrderedDict()):\n-            inst_dict.pop(k, None)\n-        if inst_dict:\n-            return (self.__class__, (items,), inst_dict)\n-        return self.__class__, (items,)\n-\n-    def copy(self):\n-        'od.copy() -> a shallow copy of od'\n-        return self.__class__(self)\n-\n-    @classmethod\n-    def fromkeys(cls, iterable, value=None):\n-        '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n-        and values equal to v (which defaults to None).\n-\n-        '''\n-        d = cls()\n-        for key in iterable:\n-            d[key] = value\n-        return d\n-\n-    def __eq__(self, other):\n-        '''od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n-        while comparison to a regular mapping is order-insensitive.\n-\n-        '''\n-        if isinstance(other, OrderedDict):\n-            return len(self)==len(other) and self.items() == other.items()\n-        return dict.__eq__(self, other)\n-\n-    def __ne__(self, other):\n-        return not self == other\n-\n-    # -- the following methods are only used in Python 2.7 --\n-\n-    def viewkeys(self):\n-        \"od.viewkeys() -> a set-like object providing a view on od's keys\"\n-        return KeysView(self)\n-\n-    def viewvalues(self):\n-        \"od.viewvalues() -> an object providing a view on od's values\"\n-        return ValuesView(self)\n-\n-    def viewitems(self):\n-        \"od.viewitems() -> a set-like object providing a view on od's items\"\n-        return ItemsView(self)\n\n@@ -1,868 +0,0 @@\n-\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"\n-\n-# Copyright (c) 2010-2015 Benjamin Peterson\n-#\n-# Permission is hereby granted, free of charge, to any person obtaining a copy\n-# of this software and associated documentation files (the \"Software\"), to deal\n-# in the Software without restriction, including without limitation the rights\n-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n-# copies of the Software, and to permit persons to whom the Software is\n-# furnished to do so, subject to the following conditions:\n-#\n-# The above copyright notice and this permission notice shall be included in all\n-# copies or substantial portions of the Software.\n-#\n-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n-# SOFTWARE.\n-\n-from __future__ import absolute_import\n-\n-import functools\n-import itertools\n-import operator\n-import sys\n-import types\n-\n-__author__ = \"Benjamin Peterson <benjamin@python.org>\"\n-__version__ = \"1.10.0\"\n-\n-\n-# Useful for very coarse version differentiation.\n-PY2 = sys.version_info[0] == 2\n-PY3 = sys.version_info[0] == 3\n-PY34 = sys.version_info[0:2] >= (3, 4)\n-\n-if PY3:\n-    string_types = str,\n-    integer_types = int,\n-    class_types = type,\n-    text_type = str\n-    binary_type = bytes\n-\n-    MAXSIZE = sys.maxsize\n-else:\n-    string_types = basestring,\n-    integer_types = (int, long)\n-    class_types = (type, types.ClassType)\n-    text_type = unicode\n-    binary_type = str\n-\n-    if sys.platform.startswith(\"java\"):\n-        # Jython always uses 32 bits.\n-        MAXSIZE = int((1 << 31) - 1)\n-    else:\n-        # It's possible to have sizeof(long) != sizeof(Py_ssize_t).\n-        class X(object):\n-\n-            def __len__(self):\n-                return 1 << 31\n-        try:\n-            len(X())\n-        except OverflowError:\n-            # 32-bit\n-            MAXSIZE = int((1 << 31) - 1)\n-        else:\n-            # 64-bit\n-            MAXSIZE = int((1 << 63) - 1)\n-        del X\n-\n-\n-def _add_doc(func, doc):\n-    \"\"\"Add documentation to a function.\"\"\"\n-    func.__doc__ = doc\n-\n-\n-def _import_module(name):\n-    \"\"\"Import module, returning the module after the last dot.\"\"\"\n-    __import__(name)\n-    return sys.modules[name]\n-\n-\n-class _LazyDescr(object):\n-\n-    def __init__(self, name):\n-        self.name = name\n-\n-    def __get__(self, obj, tp):\n-        result = self._resolve()\n-        setattr(obj, self.name, result)  # Invokes __set__.\n-        try:\n-            # This is a bit ugly, but it avoids running this again by\n-            # removing this descriptor.\n-            delattr(obj.__class__, self.name)\n-        except AttributeError:\n-            pass\n-        return result\n-\n-\n-class MovedModule(_LazyDescr):\n-\n-    def __init__(self, name, old, new=None):\n-        super(MovedModule, self).__init__(name)\n-        if PY3:\n-            if new is None:\n-                new = name\n-            self.mod = new\n-        else:\n-            self.mod = old\n-\n-    def _resolve(self):\n-        return _import_module(self.mod)\n-\n-    def __getattr__(self, attr):\n-        _module = self._resolve()\n-        value = getattr(_module, attr)\n-        setattr(self, attr, value)\n-        return value\n-\n-\n-class _LazyModule(types.ModuleType):\n-\n-    def __init__(self, name):\n-        super(_LazyModule, self).__init__(name)\n-        self.__doc__ = self.__class__.__doc__\n-\n-    def __dir__(self):\n-        attrs = [\"__doc__\", \"__name__\"]\n-        attrs += [attr.name for attr in self._moved_attributes]\n-        return attrs\n-\n-    # Subclasses should override this\n-    _moved_attributes = []\n-\n-\n-class MovedAttribute(_LazyDescr):\n-\n-    def __init__(self, name, old_mod, new_mod, old_attr=None, new_attr=None):\n-        super(MovedAttribute, self).__init__(name)\n-        if PY3:\n-            if new_mod is None:\n-                new_mod = name\n-            self.mod = new_mod\n-            if new_attr is None:\n-                if old_attr is None:\n-                    new_attr = name\n-                else:\n-                    new_attr = old_attr\n-            self.attr = new_attr\n-        else:\n-            self.mod = old_mod\n-            if old_attr is None:\n-                old_attr = name\n-            self.attr = old_attr\n-\n-    def _resolve(self):\n-        module = _import_module(self.mod)\n-        return getattr(module, self.attr)\n-\n-\n-class _SixMetaPathImporter(object):\n-\n-    \"\"\"\n-    A meta path importer to import six.moves and its submodules.\n-\n-    This class implements a PEP302 finder and loader. It should be compatible\n-    with Python 2.5 and all existing versions of Python3\n-    \"\"\"\n-\n-    def __init__(self, six_module_name):\n-        self.name = six_module_name\n-        self.known_modules = {}\n-\n-    def _add_module(self, mod, *fullnames):\n-        for fullname in fullnames:\n-            self.known_modules[self.name + \".\" + fullname] = mod\n-\n-    def _get_module(self, fullname):\n-        return self.known_modules[self.name + \".\" + fullname]\n-\n-    def find_module(self, fullname, path=None):\n-        if fullname in self.known_modules:\n-            return self\n-        return None\n-\n-    def __get_module(self, fullname):\n-        try:\n-            return self.known_modules[fullname]\n-        except KeyError:\n-            raise ImportError(\"This loader does not know module \" + fullname)\n-\n-    def load_module(self, fullname):\n-        try:\n-            # in case of a reload\n-            return sys.modules[fullname]\n-        except KeyError:\n-            pass\n-        mod = self.__get_module(fullname)\n-        if isinstance(mod, MovedModule):\n-            mod = mod._resolve()\n-        else:\n-            mod.__loader__ = self\n-        sys.modules[fullname] = mod\n-        return mod\n-\n-    def is_package(self, fullname):\n-        \"\"\"\n-        Return true, if the named module is a package.\n-\n-        We need this method to get correct spec objects with\n-        Python 3.4 (see PEP451)\n-        \"\"\"\n-        return hasattr(self.__get_module(fullname), \"__path__\")\n-\n-    def get_code(self, fullname):\n-        \"\"\"Return None\n-\n-        Required, if is_package is implemented\"\"\"\n-        self.__get_module(fullname)  # eventually raises ImportError\n-        return None\n-    get_source = get_code  # same as get_code\n-\n-_importer = _SixMetaPathImporter(__name__)\n-\n-\n-class _MovedItems(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects\"\"\"\n-    __path__ = []  # mark as package\n-\n-\n-_moved_attributes = [\n-    MovedAttribute(\"cStringIO\", \"cStringIO\", \"io\", \"StringIO\"),\n-    MovedAttribute(\"filter\", \"itertools\", \"builtins\", \"ifilter\", \"filter\"),\n-    MovedAttribute(\"filterfalse\", \"itertools\", \"itertools\", \"ifilterfalse\", \"filterfalse\"),\n-    MovedAttribute(\"input\", \"__builtin__\", \"builtins\", \"raw_input\", \"input\"),\n-    MovedAttribute(\"intern\", \"__builtin__\", \"sys\"),\n-    MovedAttribute(\"map\", \"itertools\", \"builtins\", \"imap\", \"map\"),\n-    MovedAttribute(\"getcwd\", \"os\", \"os\", \"getcwdu\", \"getcwd\"),\n-    MovedAttribute(\"getcwdb\", \"os\", \"os\", \"getcwd\", \"getcwdb\"),\n-    MovedAttribute(\"range\", \"__builtin__\", \"builtins\", \"xrange\", \"range\"),\n-    MovedAttribute(\"reload_module\", \"__builtin__\", \"importlib\" if PY34 else \"imp\", \"reload\"),\n-    MovedAttribute(\"reduce\", \"__builtin__\", \"functools\"),\n-    MovedAttribute(\"shlex_quote\", \"pipes\", \"shlex\", \"quote\"),\n-    MovedAttribute(\"StringIO\", \"StringIO\", \"io\"),\n-    MovedAttribute(\"UserDict\", \"UserDict\", \"collections\"),\n-    MovedAttribute(\"UserList\", \"UserList\", \"collections\"),\n-    MovedAttribute(\"UserString\", \"UserString\", \"collections\"),\n-    MovedAttribute(\"xrange\", \"__builtin__\", \"builtins\", \"xrange\", \"range\"),\n-    MovedAttribute(\"zip\", \"itertools\", \"builtins\", \"izip\", \"zip\"),\n-    MovedAttribute(\"zip_longest\", \"itertools\", \"itertools\", \"izip_longest\", \"zip_longest\"),\n-    MovedModule(\"builtins\", \"__builtin__\"),\n-    MovedModule(\"configparser\", \"ConfigParser\"),\n-    MovedModule(\"copyreg\", \"copy_reg\"),\n-    MovedModule(\"dbm_gnu\", \"gdbm\", \"dbm.gnu\"),\n-    MovedModule(\"_dummy_thread\", \"dummy_thread\", \"_dummy_thread\"),\n-    MovedModule(\"http_cookiejar\", \"cookielib\", \"http.cookiejar\"),\n-    MovedModule(\"http_cookies\", \"Cookie\", \"http.cookies\"),\n-    MovedModule(\"html_entities\", \"htmlentitydefs\", \"html.entities\"),\n-    MovedModule(\"html_parser\", \"HTMLParser\", \"html.parser\"),\n-    MovedModule(\"http_client\", \"httplib\", \"http.client\"),\n-    MovedModule(\"email_mime_multipart\", \"email.MIMEMultipart\", \"email.mime.multipart\"),\n-    MovedModule(\"email_mime_nonmultipart\", \"email.MIMENonMultipart\", \"email.mime.nonmultipart\"),\n-    MovedModule(\"email_mime_text\", \"email.MIMEText\", \"email.mime.text\"),\n-    MovedModule(\"email_mime_base\", \"email.MIMEBase\", \"email.mime.base\"),\n-    MovedModule(\"BaseHTTPServer\", \"BaseHTTPServer\", \"http.server\"),\n-    MovedModule(\"CGIHTTPServer\", \"CGIHTTPServer\", \"http.server\"),\n-    MovedModule(\"SimpleHTTPServer\", \"SimpleHTTPServer\", \"http.server\"),\n-    MovedModule(\"cPickle\", \"cPickle\", \"pickle\"),\n-    MovedModule(\"queue\", \"Queue\"),\n-    MovedModule(\"reprlib\", \"repr\"),\n-    MovedModule(\"socketserver\", \"SocketServer\"),\n-    MovedModule(\"_thread\", \"thread\", \"_thread\"),\n-    MovedModule(\"tkinter\", \"Tkinter\"),\n-    MovedModule(\"tkinter_dialog\", \"Dialog\", \"tkinter.dialog\"),\n-    MovedModule(\"tkinter_filedialog\", \"FileDialog\", \"tkinter.filedialog\"),\n-    MovedModule(\"tkinter_scrolledtext\", \"ScrolledText\", \"tkinter.scrolledtext\"),\n-    MovedModule(\"tkinter_simpledialog\", \"SimpleDialog\", \"tkinter.simpledialog\"),\n-    MovedModule(\"tkinter_tix\", \"Tix\", \"tkinter.tix\"),\n-    MovedModule(\"tkinter_ttk\", \"ttk\", \"tkinter.ttk\"),\n-    MovedModule(\"tkinter_constants\", \"Tkconstants\", \"tkinter.constants\"),\n-    MovedModule(\"tkinter_dnd\", \"Tkdnd\", \"tkinter.dnd\"),\n-    MovedModule(\"tkinter_colorchooser\", \"tkColorChooser\",\n-                \"tkinter.colorchooser\"),\n-    MovedModule(\"tkinter_commondialog\", \"tkCommonDialog\",\n-                \"tkinter.commondialog\"),\n-    MovedModule(\"tkinter_tkfiledialog\", \"tkFileDialog\", \"tkinter.filedialog\"),\n-    MovedModule(\"tkinter_font\", \"tkFont\", \"tkinter.font\"),\n-    MovedModule(\"tkinter_messagebox\", \"tkMessageBox\", \"tkinter.messagebox\"),\n-    MovedModule(\"tkinter_tksimpledialog\", \"tkSimpleDialog\",\n-                \"tkinter.simpledialog\"),\n-    MovedModule(\"urllib_parse\", __name__ + \".moves.urllib_parse\", \"urllib.parse\"),\n-    MovedModule(\"urllib_error\", __name__ + \".moves.urllib_error\", \"urllib.error\"),\n-    MovedModule(\"urllib\", __name__ + \".moves.urllib\", __name__ + \".moves.urllib\"),\n-    MovedModule(\"urllib_robotparser\", \"robotparser\", \"urllib.robotparser\"),\n-    MovedModule(\"xmlrpc_client\", \"xmlrpclib\", \"xmlrpc.client\"),\n-    MovedModule(\"xmlrpc_server\", \"SimpleXMLRPCServer\", \"xmlrpc.server\"),\n-]\n-# Add windows specific modules.\n-if sys.platform == \"win32\":\n-    _moved_attributes += [\n-        MovedModule(\"winreg\", \"_winreg\"),\n-    ]\n-\n-for attr in _moved_attributes:\n-    setattr(_MovedItems, attr.name, attr)\n-    if isinstance(attr, MovedModule):\n-        _importer._add_module(attr, \"moves.\" + attr.name)\n-del attr\n-\n-_MovedItems._moved_attributes = _moved_attributes\n-\n-moves = _MovedItems(__name__ + \".moves\")\n-_importer._add_module(moves, \"moves\")\n-\n-\n-class Module_six_moves_urllib_parse(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects in six.moves.urllib_parse\"\"\"\n-\n-\n-_urllib_parse_moved_attributes = [\n-    MovedAttribute(\"ParseResult\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"SplitResult\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"parse_qs\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"parse_qsl\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urldefrag\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urljoin\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urlparse\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urlsplit\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urlunparse\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"urlunsplit\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"quote\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"quote_plus\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"unquote\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"unquote_plus\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"urlencode\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"splitquery\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"splittag\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"splituser\", \"urllib\", \"urllib.parse\"),\n-    MovedAttribute(\"uses_fragment\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"uses_netloc\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"uses_params\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"uses_query\", \"urlparse\", \"urllib.parse\"),\n-    MovedAttribute(\"uses_relative\", \"urlparse\", \"urllib.parse\"),\n-]\n-for attr in _urllib_parse_moved_attributes:\n-    setattr(Module_six_moves_urllib_parse, attr.name, attr)\n-del attr\n-\n-Module_six_moves_urllib_parse._moved_attributes = _urllib_parse_moved_attributes\n-\n-_importer._add_module(Module_six_moves_urllib_parse(__name__ + \".moves.urllib_parse\"),\n-                      \"moves.urllib_parse\", \"moves.urllib.parse\")\n-\n-\n-class Module_six_moves_urllib_error(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects in six.moves.urllib_error\"\"\"\n-\n-\n-_urllib_error_moved_attributes = [\n-    MovedAttribute(\"URLError\", \"urllib2\", \"urllib.error\"),\n-    MovedAttribute(\"HTTPError\", \"urllib2\", \"urllib.error\"),\n-    MovedAttribute(\"ContentTooShortError\", \"urllib\", \"urllib.error\"),\n-]\n-for attr in _urllib_error_moved_attributes:\n-    setattr(Module_six_moves_urllib_error, attr.name, attr)\n-del attr\n-\n-Module_six_moves_urllib_error._moved_attributes = _urllib_error_moved_attributes\n-\n-_importer._add_module(Module_six_moves_urllib_error(__name__ + \".moves.urllib.error\"),\n-                      \"moves.urllib_error\", \"moves.urllib.error\")\n-\n-\n-class Module_six_moves_urllib_request(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects in six.moves.urllib_request\"\"\"\n-\n-\n-_urllib_request_moved_attributes = [\n-    MovedAttribute(\"urlopen\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"install_opener\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"build_opener\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"pathname2url\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"url2pathname\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"getproxies\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"Request\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"OpenerDirector\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPDefaultErrorHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPRedirectHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPCookieProcessor\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"ProxyHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"BaseHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPPasswordMgr\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPPasswordMgrWithDefaultRealm\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"AbstractBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"ProxyBasicAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"AbstractDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"ProxyDigestAuthHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPSHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"FileHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"FTPHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"CacheFTPHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"UnknownHandler\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"HTTPErrorProcessor\", \"urllib2\", \"urllib.request\"),\n-    MovedAttribute(\"urlretrieve\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"urlcleanup\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"URLopener\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"FancyURLopener\", \"urllib\", \"urllib.request\"),\n-    MovedAttribute(\"proxy_bypass\", \"urllib\", \"urllib.request\"),\n-]\n-for attr in _urllib_request_moved_attributes:\n-    setattr(Module_six_moves_urllib_request, attr.name, attr)\n-del attr\n-\n-Module_six_moves_urllib_request._moved_attributes = _urllib_request_moved_attributes\n-\n-_importer._add_module(Module_six_moves_urllib_request(__name__ + \".moves.urllib.request\"),\n-                      \"moves.urllib_request\", \"moves.urllib.request\")\n-\n-\n-class Module_six_moves_urllib_response(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects in six.moves.urllib_response\"\"\"\n-\n-\n-_urllib_response_moved_attributes = [\n-    MovedAttribute(\"addbase\", \"urllib\", \"urllib.response\"),\n-    MovedAttribute(\"addclosehook\", \"urllib\", \"urllib.response\"),\n-    MovedAttribute(\"addinfo\", \"urllib\", \"urllib.response\"),\n-    MovedAttribute(\"addinfourl\", \"urllib\", \"urllib.response\"),\n-]\n-for attr in _urllib_response_moved_attributes:\n-    setattr(Module_six_moves_urllib_response, attr.name, attr)\n-del attr\n-\n-Module_six_moves_urllib_response._moved_attributes = _urllib_response_moved_attributes\n-\n-_importer._add_module(Module_six_moves_urllib_response(__name__ + \".moves.urllib.response\"),\n-                      \"moves.urllib_response\", \"moves.urllib.response\")\n-\n-\n-class Module_six_moves_urllib_robotparser(_LazyModule):\n-\n-    \"\"\"Lazy loading of moved objects in six.moves.urllib_robotparser\"\"\"\n-\n-\n-_urllib_robotparser_moved_attributes = [\n-    MovedAttribute(\"RobotFileParser\", \"robotparser\", \"urllib.robotparser\"),\n-]\n-for attr in _urllib_robotparser_moved_attributes:\n-    setattr(Module_six_moves_urllib_robotparser, attr.name, attr)\n-del attr\n-\n-Module_six_moves_urllib_robotparser._moved_attributes = _urllib_robotparser_moved_attributes\n-\n-_importer._add_module(Module_six_moves_urllib_robotparser(__name__ + \".moves.urllib.robotparser\"),\n-                      \"moves.urllib_robotparser\", \"moves.urllib.robotparser\")\n-\n-\n-class Module_six_moves_urllib(types.ModuleType):\n-\n-    \"\"\"Create a six.moves.urllib namespace that resembles the Python 3 namespace\"\"\"\n-    __path__ = []  # mark as package\n-    parse = _importer._get_module(\"moves.urllib_parse\")\n-    error = _importer._get_module(\"moves.urllib_error\")\n-    request = _importer._get_module(\"moves.urllib_request\")\n-    response = _importer._get_module(\"moves.urllib_response\")\n-    robotparser = _importer._get_module(\"moves.urllib_robotparser\")\n-\n-    def __dir__(self):\n-        return ['parse', 'error', 'request', 'response', 'robotparser']\n-\n-_importer._add_module(Module_six_moves_urllib(__name__ + \".moves.urllib\"),\n-                      \"moves.urllib\")\n-\n-\n-def add_move(move):\n-    \"\"\"Add an item to six.moves.\"\"\"\n-    setattr(_MovedItems, move.name, move)\n-\n-\n-def remove_move(name):\n-    \"\"\"Remove item from six.moves.\"\"\"\n-    try:\n-        delattr(_MovedItems, name)\n-    except AttributeError:\n-        try:\n-            del moves.__dict__[name]\n-        except KeyError:\n-            raise AttributeError(\"no such move, %r\" % (name,))\n-\n-\n-if PY3:\n-    _meth_func = \"__func__\"\n-    _meth_self = \"__self__\"\n-\n-    _func_closure = \"__closure__\"\n-    _func_code = \"__code__\"\n-    _func_defaults = \"__defaults__\"\n-    _func_globals = \"__globals__\"\n-else:\n-    _meth_func = \"im_func\"\n-    _meth_self = \"im_self\"\n-\n-    _func_closure = \"func_closure\"\n-    _func_code = \"func_code\"\n-    _func_defaults = \"func_defaults\"\n-    _func_globals = \"func_globals\"\n-\n-\n-try:\n-    advance_iterator = next\n-except NameError:\n-    def advance_iterator(it):\n-        return it.next()\n-next = advance_iterator\n-\n-\n-try:\n-    callable = callable\n-except NameError:\n-    def callable(obj):\n-        return any(\"__call__\" in klass.__dict__ for klass in type(obj).__mro__)\n-\n-\n-if PY3:\n-    def get_unbound_function(unbound):\n-        return unbound\n-\n-    create_bound_method = types.MethodType\n-\n-    def create_unbound_method(func, cls):\n-        return func\n-\n-    Iterator = object\n-else:\n-    def get_unbound_function(unbound):\n-        return unbound.im_func\n-\n-    def create_bound_method(func, obj):\n-        return types.MethodType(func, obj, obj.__class__)\n-\n-    def create_unbound_method(func, cls):\n-        return types.MethodType(func, None, cls)\n-\n-    class Iterator(object):\n-\n-        def next(self):\n-            return type(self).__next__(self)\n-\n-    callable = callable\n-_add_doc(get_unbound_function,\n-         \"\"\"Get the function out of a possibly unbound function\"\"\")\n-\n-\n-get_method_function = operator.attrgetter(_meth_func)\n-get_method_self = operator.attrgetter(_meth_self)\n-get_function_closure = operator.attrgetter(_func_closure)\n-get_function_code = operator.attrgetter(_func_code)\n-get_function_defaults = operator.attrgetter(_func_defaults)\n-get_function_globals = operator.attrgetter(_func_globals)\n-\n-\n-if PY3:\n-    def iterkeys(d, **kw):\n-        return iter(d.keys(**kw))\n-\n-    def itervalues(d, **kw):\n-        return iter(d.values(**kw))\n-\n-    def iteritems(d, **kw):\n-        return iter(d.items(**kw))\n-\n-    def iterlists(d, **kw):\n-        return iter(d.lists(**kw))\n-\n-    viewkeys = operator.methodcaller(\"keys\")\n-\n-    viewvalues = operator.methodcaller(\"values\")\n-\n-    viewitems = operator.methodcaller(\"items\")\n-else:\n-    def iterkeys(d, **kw):\n-        return d.iterkeys(**kw)\n-\n-    def itervalues(d, **kw):\n-        return d.itervalues(**kw)\n-\n-    def iteritems(d, **kw):\n-        return d.iteritems(**kw)\n-\n-    def iterlists(d, **kw):\n-        return d.iterlists(**kw)\n-\n-    viewkeys = operator.methodcaller(\"viewkeys\")\n-\n-    viewvalues = operator.methodcaller(\"viewvalues\")\n-\n-    viewitems = operator.methodcaller(\"viewitems\")\n-\n-_add_doc(iterkeys, \"Return an iterator over the keys of a dictionary.\")\n-_add_doc(itervalues, \"Return an iterator over the values of a dictionary.\")\n-_add_doc(iteritems,\n-         \"Return an iterator over the (key, value) pairs of a dictionary.\")\n-_add_doc(iterlists,\n-         \"Return an iterator over the (key, [values]) pairs of a dictionary.\")\n-\n-\n-if PY3:\n-    def b(s):\n-        return s.encode(\"latin-1\")\n-\n-    def u(s):\n-        return s\n-    unichr = chr\n-    import struct\n-    int2byte = struct.Struct(\">B\").pack\n-    del struct\n-    byte2int = operator.itemgetter(0)\n-    indexbytes = operator.getitem\n-    iterbytes = iter\n-    import io\n-    StringIO = io.StringIO\n-    BytesIO = io.BytesIO\n-    _assertCountEqual = \"assertCountEqual\"\n-    if sys.version_info[1] <= 1:\n-        _assertRaisesRegex = \"assertRaisesRegexp\"\n-        _assertRegex = \"assertRegexpMatches\"\n-    else:\n-        _assertRaisesRegex = \"assertRaisesRegex\"\n-        _assertRegex = \"assertRegex\"\n-else:\n-    def b(s):\n-        return s\n-    # Workaround for standalone backslash\n-\n-    def u(s):\n-        return unicode(s.replace(r'\\\\', r'\\\\\\\\'), \"unicode_escape\")\n-    unichr = unichr\n-    int2byte = chr\n-\n-    def byte2int(bs):\n-        return ord(bs[0])\n-\n-    def indexbytes(buf, i):\n-        return ord(buf[i])\n-    iterbytes = functools.partial(itertools.imap, ord)\n-    import StringIO\n-    StringIO = BytesIO = StringIO.StringIO\n-    _assertCountEqual = \"assertItemsEqual\"\n-    _assertRaisesRegex = \"assertRaisesRegexp\"\n-    _assertRegex = \"assertRegexpMatches\"\n-_add_doc(b, \"\"\"Byte literal\"\"\")\n-_add_doc(u, \"\"\"Text literal\"\"\")\n-\n-\n-def assertCountEqual(self, *args, **kwargs):\n-    return getattr(self, _assertCountEqual)(*args, **kwargs)\n-\n-\n-def assertRaisesRegex(self, *args, **kwargs):\n-    return getattr(self, _assertRaisesRegex)(*args, **kwargs)\n-\n-\n-def assertRegex(self, *args, **kwargs):\n-    return getattr(self, _assertRegex)(*args, **kwargs)\n-\n-\n-if PY3:\n-    exec_ = getattr(moves.builtins, \"exec\")\n-\n-    def reraise(tp, value, tb=None):\n-        if value is None:\n-            value = tp()\n-        if value.__traceback__ is not tb:\n-            raise value.with_traceback(tb)\n-        raise value\n-\n-else:\n-    def exec_(_code_, _globs_=None, _locs_=None):\n-        \"\"\"Execute code in a namespace.\"\"\"\n-        if _globs_ is None:\n-            frame = sys._getframe(1)\n-            _globs_ = frame.f_globals\n-            if _locs_ is None:\n-                _locs_ = frame.f_locals\n-            del frame\n-        elif _locs_ is None:\n-            _locs_ = _globs_\n-        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n-\n-    exec_(\"\"\"def reraise(tp, value, tb=None):\n-    raise tp, value, tb\n-\"\"\")\n-\n-\n-if sys.version_info[:2] == (3, 2):\n-    exec_(\"\"\"def raise_from(value, from_value):\n-    if from_value is None:\n-        raise value\n-    raise value from from_value\n-\"\"\")\n-elif sys.version_info[:2] > (3, 2):\n-    exec_(\"\"\"def raise_from(value, from_value):\n-    raise value from from_value\n-\"\"\")\n-else:\n-    def raise_from(value, from_value):\n-        raise value\n-\n-\n-print_ = getattr(moves.builtins, \"print\", None)\n-if print_ is None:\n-    def print_(*args, **kwargs):\n-        \"\"\"The new-style print function for Python 2.4 and 2.5.\"\"\"\n-        fp = kwargs.pop(\"file\", sys.stdout)\n-        if fp is None:\n-            return\n-\n-        def write(data):\n-            if not isinstance(data, basestring):\n-                data = str(data)\n-            # If the file has an encoding, encode unicode with it.\n-            if (isinstance(fp, file) and\n-                    isinstance(data, unicode) and\n-                    fp.encoding is not None):\n-                errors = getattr(fp, \"errors\", None)\n-                if errors is None:\n-                    errors = \"strict\"\n-                data = data.encode(fp.encoding, errors)\n-            fp.write(data)\n-        want_unicode = False\n-        sep = kwargs.pop(\"sep\", None)\n-        if sep is not None:\n-            if isinstance(sep, unicode):\n-                want_unicode = True\n-            elif not isinstance(sep, str):\n-                raise TypeError(\"sep must be None or a string\")\n-        end = kwargs.pop(\"end\", None)\n-        if end is not None:\n-            if isinstance(end, unicode):\n-                want_unicode = True\n-            elif not isinstance(end, str):\n-                raise TypeError(\"end must be None or a string\")\n-        if kwargs:\n-            raise TypeError(\"invalid keyword arguments to print()\")\n-        if not want_unicode:\n-            for arg in args:\n-                if isinstance(arg, unicode):\n-                    want_unicode = True\n-                    break\n-        if want_unicode:\n-            newline = unicode(\"\\n\")\n-            space = unicode(\" \")\n-        else:\n-            newline = \"\\n\"\n-            space = \" \"\n-        if sep is None:\n-            sep = space\n-        if end is None:\n-            end = newline\n-        for i, arg in enumerate(args):\n-            if i:\n-                write(sep)\n-            write(arg)\n-        write(end)\n-if sys.version_info[:2] < (3, 3):\n-    _print = print_\n-\n-    def print_(*args, **kwargs):\n-        fp = kwargs.get(\"file\", sys.stdout)\n-        flush = kwargs.pop(\"flush\", False)\n-        _print(*args, **kwargs)\n-        if flush and fp is not None:\n-            fp.flush()\n-\n-_add_doc(reraise, \"\"\"Reraise an exception.\"\"\")\n-\n-if sys.version_info[0:2] < (3, 4):\n-    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,\n-              updated=functools.WRAPPER_UPDATES):\n-        def wrapper(f):\n-            f = functools.wraps(wrapped, assigned, updated)(f)\n-            f.__wrapped__ = wrapped\n-            return f\n-        return wrapper\n-else:\n-    wraps = functools.wraps\n-\n-\n-def with_metaclass(meta, *bases):\n-    \"\"\"Create a base class with a metaclass.\"\"\"\n-    # This requires a bit of explanation: the basic idea is to make a dummy\n-    # metaclass for one level of class instantiation that replaces itself with\n-    # the actual metaclass.\n-    class metaclass(meta):\n-\n-        def __new__(cls, name, this_bases, d):\n-            return meta(name, bases, d)\n-    return type.__new__(metaclass, 'temporary_class', (), {})\n-\n-\n-def add_metaclass(metaclass):\n-    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n-    def wrapper(cls):\n-        orig_vars = cls.__dict__.copy()\n-        slots = orig_vars.get('__slots__')\n-        if slots is not None:\n-            if isinstance(slots, str):\n-                slots = [slots]\n-            for slots_var in slots:\n-                orig_vars.pop(slots_var)\n-        orig_vars.pop('__dict__', None)\n-        orig_vars.pop('__weakref__', None)\n-        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n-    return wrapper\n-\n-\n-def python_2_unicode_compatible(klass):\n-    \"\"\"\n-    A decorator that defines __unicode__ and __str__ methods under Python 2.\n-    Under Python 3 it does nothing.\n-\n-    To support Python 2 and 3 with a single code base, define a __str__ method\n-    returning text and apply this decorator to the class.\n-    \"\"\"\n-    if PY2:\n-        if '__str__' not in klass.__dict__:\n-            raise ValueError(\"@python_2_unicode_compatible cannot be applied \"\n-                             \"to %s because it doesn't define __str__().\" %\n-                             klass.__name__)\n-        klass.__unicode__ = klass.__str__\n-        klass.__str__ = lambda self: self.__unicode__().encode('utf-8')\n-    return klass\n-\n-\n-# Complete the moves implementation.\n-# This code is at the end of this module to speed up module loading.\n-# Turn this module into a package.\n-__path__ = []  # required for PEP 302 and PEP 451\n-__package__ = __name__  # see PEP 366 @ReservedAssignment\n-if globals().get(\"__spec__\") is not None:\n-    __spec__.submodule_search_locations = []  # PEP 451 @UndefinedVariable\n-# Remove other six meta path importers, since they cause problems. This can\n-# happen if six is removed from sys.modules and then reloaded. (Setuptools does\n-# this for some reason.)\n-if sys.meta_path:\n-    for i, importer in enumerate(sys.meta_path):\n-        # Here's some real nastiness: Another \"instance\" of the six module might\n-        # be floating around. Therefore, we can't use isinstance() to check for\n-        # the six meta path importer, since the other six instance will have\n-        # inserted an importer with different class.\n-        if (type(importer).__name__ == \"_SixMetaPathImporter\" and\n-                importer.name == __name__):\n-            del sys.meta_path[i]\n-            break\n-    del i, importer\n-# Finally, add the importer to the meta path import hook.\n-sys.meta_path.append(_importer)\n\n@@ -1,19 +0,0 @@\n-import sys\n-\n-try:\n-    # Our match_hostname function is the same as 3.5's, so we only want to\n-    # import the match_hostname function if it's at least that good.\n-    if sys.version_info < (3, 5):\n-        raise ImportError(\"Fallback to vendored code\")\n-\n-    from ssl import CertificateError, match_hostname\n-except ImportError:\n-    try:\n-        # Backport of the function from a pypi module\n-        from backports.ssl_match_hostname import CertificateError, match_hostname\n-    except ImportError:\n-        # Our vendored copy\n-        from ._implementation import CertificateError, match_hostname\n-\n-# Not needed, but documenting what we provide.\n-__all__ = ('CertificateError', 'match_hostname')\n\n@@ -1,157 +0,0 @@\n-\"\"\"The match_hostname() function from Python 3.3.3, essential when using SSL.\"\"\"\n-\n-# Note: This file is under the PSF license as the code comes from the python\n-# stdlib.   http://docs.python.org/3/license.html\n-\n-import re\n-import sys\n-\n-# ipaddress has been backported to 2.6+ in pypi.  If it is installed on the\n-# system, use it to handle IPAddress ServerAltnames (this was added in\n-# python-3.5) otherwise only do DNS matching.  This allows\n-# backports.ssl_match_hostname to continue to be used all the way back to\n-# python-2.4.\n-try:\n-    import ipaddress\n-except ImportError:\n-    ipaddress = None\n-\n-__version__ = '3.5.0.1'\n-\n-\n-class CertificateError(ValueError):\n-    pass\n-\n-\n-def _dnsname_match(dn, hostname, max_wildcards=1):\n-    \"\"\"Matching according to RFC 6125, section 6.4.3\n-\n-    http://tools.ietf.org/html/rfc6125#section-6.4.3\n-    \"\"\"\n-    pats = []\n-    if not dn:\n-        return False\n-\n-    # Ported from python3-syntax:\n-    # leftmost, *remainder = dn.split(r'.')\n-    parts = dn.split(r'.')\n-    leftmost = parts[0]\n-    remainder = parts[1:]\n-\n-    wildcards = leftmost.count('*')\n-    if wildcards > max_wildcards:\n-        # Issue #17980: avoid denials of service by refusing more\n-        # than one wildcard per fragment.  A survey of established\n-        # policy among SSL implementations showed it to be a\n-        # reasonable choice.\n-        raise CertificateError(\n-            \"too many wildcards in certificate DNS name: \" + repr(dn))\n-\n-    # speed up common case w/o wildcards\n-    if not wildcards:\n-        return dn.lower() == hostname.lower()\n-\n-    # RFC 6125, section 6.4.3, subitem 1.\n-    # The client SHOULD NOT attempt to match a presented identifier in which\n-    # the wildcard character comprises a label other than the left-most label.\n-    if leftmost == '*':\n-        # When '*' is a fragment by itself, it matches a non-empty dotless\n-        # fragment.\n-        pats.append('[^.]+')\n-    elif leftmost.startswith('xn--') or hostname.startswith('xn--'):\n-        # RFC 6125, section 6.4.3, subitem 3.\n-        # The client SHOULD NOT attempt to match a presented identifier\n-        # where the wildcard character is embedded within an A-label or\n-        # U-label of an internationalized domain name.\n-        pats.append(re.escape(leftmost))\n-    else:\n-        # Otherwise, '*' matches any dotless string, e.g. www*\n-        pats.append(re.escape(leftmost).replace(r'\\*', '[^.]*'))\n-\n-    # add the remaining fragments, ignore any wildcards\n-    for frag in remainder:\n-        pats.append(re.escape(frag))\n-\n-    pat = re.compile(r'\\A' + r'\\.'.join(pats) + r'\\Z', re.IGNORECASE)\n-    return pat.match(hostname)\n-\n-\n-def _to_unicode(obj):\n-    if isinstance(obj, str) and sys.version_info < (3,):\n-        obj = unicode(obj, encoding='ascii', errors='strict')\n-    return obj\n-\n-def _ipaddress_match(ipname, host_ip):\n-    \"\"\"Exact matching of IP addresses.\n-\n-    RFC 6125 explicitly doesn't define an algorithm for this\n-    (section 1.7.2 - \"Out of Scope\").\n-    \"\"\"\n-    # OpenSSL may add a trailing newline to a subjectAltName's IP address\n-    # Divergence from upstream: ipaddress can't handle byte str\n-    ip = ipaddress.ip_address(_to_unicode(ipname).rstrip())\n-    return ip == host_ip\n-\n-\n-def match_hostname(cert, hostname):\n-    \"\"\"Verify that *cert* (in decoded format as returned by\n-    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125\n-    rules are followed, but IP addresses are not accepted for *hostname*.\n-\n-    CertificateError is raised on failure. On success, the function\n-    returns nothing.\n-    \"\"\"\n-    if not cert:\n-        raise ValueError(\"empty or no certificate, match_hostname needs a \"\n-                         \"SSL socket or SSL context with either \"\n-                         \"CERT_OPTIONAL or CERT_REQUIRED\")\n-    try:\n-        # Divergence from upstream: ipaddress can't handle byte str\n-        host_ip = ipaddress.ip_address(_to_unicode(hostname))\n-    except ValueError:\n-        # Not an IP address (common case)\n-        host_ip = None\n-    except UnicodeError:\n-        # Divergence from upstream: Have to deal with ipaddress not taking\n-        # byte strings.  addresses should be all ascii, so we consider it not\n-        # an ipaddress in this case\n-        host_ip = None\n-    except AttributeError:\n-        # Divergence from upstream: Make ipaddress library optional\n-        if ipaddress is None:\n-            host_ip = None\n-        else:\n-            raise\n-    dnsnames = []\n-    san = cert.get('subjectAltName', ())\n-    for key, value in san:\n-        if key == 'DNS':\n-            if host_ip is None and _dnsname_match(value, hostname):\n-                return\n-            dnsnames.append(value)\n-        elif key == 'IP Address':\n-            if host_ip is not None and _ipaddress_match(value, host_ip):\n-                return\n-            dnsnames.append(value)\n-    if not dnsnames:\n-        # The subject is only checked when there is no dNSName entry\n-        # in subjectAltName\n-        for sub in cert.get('subject', ()):\n-            for key, value in sub:\n-                # XXX according to RFC 2818, the most specific Common Name\n-                # must be used.\n-                if key == 'commonName':\n-                    if _dnsname_match(value, hostname):\n-                        return\n-                    dnsnames.append(value)\n-    if len(dnsnames) > 1:\n-        raise CertificateError(\"hostname %r \"\n-            \"doesn't match either of %s\"\n-            % (hostname, ', '.join(map(repr, dnsnames))))\n-    elif len(dnsnames) == 1:\n-        raise CertificateError(\"hostname %r \"\n-            \"doesn't match %r\"\n-            % (hostname, dnsnames[0]))\n-    else:\n-        raise CertificateError(\"no appropriate commonName or \"\n-            \"subjectAltName fields were found\")\n\n@@ -1,440 +0,0 @@\n-from __future__ import absolute_import\n-import collections\n-import functools\n-import logging\n-\n-from ._collections import RecentlyUsedContainer\n-from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool\n-from .connectionpool import port_by_scheme\n-from .exceptions import LocationValueError, MaxRetryError, ProxySchemeUnknown\n-from .packages.six.moves.urllib.parse import urljoin\n-from .request import RequestMethods\n-from .util.url import parse_url\n-from .util.retry import Retry\n-\n-\n-__all__ = ['PoolManager', 'ProxyManager', 'proxy_from_url']\n-\n-\n-log = logging.getLogger(__name__)\n-\n-SSL_KEYWORDS = ('key_file', 'cert_file', 'cert_reqs', 'ca_certs',\n-                'ssl_version', 'ca_cert_dir', 'ssl_context')\n-\n-# All known keyword arguments that could be provided to the pool manager, its\n-# pools, or the underlying connections. This is used to construct a pool key.\n-_key_fields = (\n-    'key_scheme',  # str\n-    'key_host',  # str\n-    'key_port',  # int\n-    'key_timeout',  # int or float or Timeout\n-    'key_retries',  # int or Retry\n-    'key_strict',  # bool\n-    'key_block',  # bool\n-    'key_source_address',  # str\n-    'key_key_file',  # str\n-    'key_cert_file',  # str\n-    'key_cert_reqs',  # str\n-    'key_ca_certs',  # str\n-    'key_ssl_version',  # str\n-    'key_ca_cert_dir',  # str\n-    'key_ssl_context',  # instance of ssl.SSLContext or urllib3.util.ssl_.SSLContext\n-    'key_maxsize',  # int\n-    'key_headers',  # dict\n-    'key__proxy',  # parsed proxy url\n-    'key__proxy_headers',  # dict\n-    'key_socket_options',  # list of (level (int), optname (int), value (int or str)) tuples\n-    'key__socks_options',  # dict\n-    'key_assert_hostname',  # bool or string\n-    'key_assert_fingerprint',  # str\n-)\n-\n-#: The namedtuple class used to construct keys for the connection pool.\n-#: All custom key schemes should include the fields in this key at a minimum.\n-PoolKey = collections.namedtuple('PoolKey', _key_fields)\n-\n-\n-def _default_key_normalizer(key_class, request_context):\n-    \"\"\"\n-    Create a pool key out of a request context dictionary.\n-\n-    According to RFC 3986, both the scheme and host are case-insensitive.\n-    Therefore, this function normalizes both before constructing the pool\n-    key for an HTTPS request. If you wish to change this behaviour, provide\n-    alternate callables to ``key_fn_by_scheme``.\n-\n-    :param key_class:\n-        The class to use when constructing the key. This should be a namedtuple\n-        with the ``scheme`` and ``host`` keys at a minimum.\n-    :type  key_class: namedtuple\n-    :param request_context:\n-        A dictionary-like object that contain the context for a request.\n-    :type  request_context: dict\n-\n-    :return: A namedtuple that can be used as a connection pool key.\n-    :rtype:  PoolKey\n-    \"\"\"\n-    # Since we mutate the dictionary, make a copy first\n-    context = request_context.copy()\n-    context['scheme'] = context['scheme'].lower()\n-    context['host'] = context['host'].lower()\n-\n-    # These are both dictionaries and need to be transformed into frozensets\n-    for key in ('headers', '_proxy_headers', '_socks_options'):\n-        if key in context and context[key] is not None:\n-            context[key] = frozenset(context[key].items())\n-\n-    # The socket_options key may be a list and needs to be transformed into a\n-    # tuple.\n-    socket_opts = context.get('socket_options')\n-    if socket_opts is not None:\n-        context['socket_options'] = tuple(socket_opts)\n-\n-    # Map the kwargs to the names in the namedtuple - this is necessary since\n-    # namedtuples can't have fields starting with '_'.\n-    for key in list(context.keys()):\n-        context['key_' + key] = context.pop(key)\n-\n-    # Default to ``None`` for keys missing from the context\n-    for field in key_class._fields:\n-        if field not in context:\n-            context[field] = None\n-\n-    return key_class(**context)\n-\n-\n-#: A dictionary that maps a scheme to a callable that creates a pool key.\n-#: This can be used to alter the way pool keys are constructed, if desired.\n-#: Each PoolManager makes a copy of this dictionary so they can be configured\n-#: globally here, or individually on the instance.\n-key_fn_by_scheme = {\n-    'http': functools.partial(_default_key_normalizer, PoolKey),\n-    'https': functools.partial(_default_key_normalizer, PoolKey),\n-}\n-\n-pool_classes_by_scheme = {\n-    'http': HTTPConnectionPool,\n-    'https': HTTPSConnectionPool,\n-}\n-\n-\n-class PoolManager(RequestMethods):\n-    \"\"\"\n-    Allows for arbitrary requests while transparently keeping track of\n-    necessary connection pools for you.\n-\n-    :param num_pools:\n-        Number of connection pools to cache before discarding the least\n-        recently used pool.\n-\n-    :param headers:\n-        Headers to include with all requests, unless other headers are given\n-        explicitly.\n-\n-    :param \\\\**connection_pool_kw:\n-        Additional parameters are used to create fresh\n-        :class:`urllib3.connectionpool.ConnectionPool` instances.\n-\n-    Example::\n-\n-        >>> manager = PoolManager(num_pools=2)\n-        >>> r = manager.request('GET', 'http://google.com/')\n-        >>> r = manager.request('GET', 'http://google.com/mail')\n-        >>> r = manager.request('GET', 'http://yahoo.com/')\n-        >>> len(manager.pools)\n-        2\n-\n-    \"\"\"\n-\n-    proxy = None\n-\n-    def __init__(self, num_pools=10, headers=None, **connection_pool_kw):\n-        RequestMethods.__init__(self, headers)\n-        self.connection_pool_kw = connection_pool_kw\n-        self.pools = RecentlyUsedContainer(num_pools,\n-                                           dispose_func=lambda p: p.close())\n-\n-        # Locally set the pool classes and keys so other PoolManagers can\n-        # override them.\n-        self.pool_classes_by_scheme = pool_classes_by_scheme\n-        self.key_fn_by_scheme = key_fn_by_scheme.copy()\n-\n-    def __enter__(self):\n-        return self\n-\n-    def __exit__(self, exc_type, exc_val, exc_tb):\n-        self.clear()\n-        # Return False to re-raise any potential exceptions\n-        return False\n-\n-    def _new_pool(self, scheme, host, port, request_context=None):\n-        \"\"\"\n-        Create a new :class:`ConnectionPool` based on host, port, scheme, and\n-        any additional pool keyword arguments.\n-\n-        If ``request_context`` is provided, it is provided as keyword arguments\n-        to the pool class used. This method is used to actually create the\n-        connection pools handed out by :meth:`connection_from_url` and\n-        companion methods. It is intended to be overridden for customization.\n-        \"\"\"\n-        pool_cls = self.pool_classes_by_scheme[scheme]\n-        if request_context is None:\n-            request_context = self.connection_pool_kw.copy()\n-\n-        # Although the context has everything necessary to create the pool,\n-        # this function has historically only used the scheme, host, and port\n-        # in the positional args. When an API change is acceptable these can\n-        # be removed.\n-        for key in ('scheme', 'host', 'port'):\n-            request_context.pop(key, None)\n-\n-        if scheme == 'http':\n-            for kw in SSL_KEYWORDS:\n-                request_context.pop(kw, None)\n-\n-        return pool_cls(host, port, **request_context)\n-\n-    def clear(self):\n-        \"\"\"\n-        Empty our store of pools and direct them all to close.\n-\n-        This will not affect in-flight connections, but they will not be\n-        re-used after completion.\n-        \"\"\"\n-        self.pools.clear()\n-\n-    def connection_from_host(self, host, port=None, scheme='http', pool_kwargs=None):\n-        \"\"\"\n-        Get a :class:`ConnectionPool` based on the host, port, and scheme.\n-\n-        If ``port`` isn't given, it will be derived from the ``scheme`` using\n-        ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is\n-        provided, it is merged with the instance's ``connection_pool_kw``\n-        variable and used to create the new connection pool, if one is\n-        needed.\n-        \"\"\"\n-\n-        if not host:\n-            raise LocationValueError(\"No host specified.\")\n-\n-        request_context = self._merge_pool_kwargs(pool_kwargs)\n-        request_context['scheme'] = scheme or 'http'\n-        if not port:\n-            port = port_by_scheme.get(request_context['scheme'].lower(), 80)\n-        request_context['port'] = port\n-        request_context['host'] = host\n-\n-        return self.connection_from_context(request_context)\n-\n-    def connection_from_context(self, request_context):\n-        \"\"\"\n-        Get a :class:`ConnectionPool` based on the request context.\n-\n-        ``request_context`` must at least contain the ``scheme`` key and its\n-        value must be a key in ``key_fn_by_scheme`` instance variable.\n-        \"\"\"\n-        scheme = request_context['scheme'].lower()\n-        pool_key_constructor = self.key_fn_by_scheme[scheme]\n-        pool_key = pool_key_constructor(request_context)\n-\n-        return self.connection_from_pool_key(pool_key, request_context=request_context)\n-\n-    def connection_from_pool_key(self, pool_key, request_context=None):\n-        \"\"\"\n-        Get a :class:`ConnectionPool` based on the provided pool key.\n-\n-        ``pool_key`` should be a namedtuple that only contains immutable\n-        objects. At a minimum it must have the ``scheme``, ``host``, and\n-        ``port`` fields.\n-        \"\"\"\n-        with self.pools.lock:\n-            # If the scheme, host, or port doesn't match existing open\n-            # connections, open a new ConnectionPool.\n-            pool = self.pools.get(pool_key)\n-            if pool:\n-                return pool\n-\n-            # Make a fresh ConnectionPool of the desired type\n-            scheme = request_context['scheme']\n-            host = request_context['host']\n-            port = request_context['port']\n-            pool = self._new_pool(scheme, host, port, request_context=request_context)\n-            self.pools[pool_key] = pool\n-\n-        return pool\n-\n-    def connection_from_url(self, url, pool_kwargs=None):\n-        \"\"\"\n-        Similar to :func:`urllib3.connectionpool.connection_from_url`.\n-\n-        If ``pool_kwargs`` is not provided and a new pool needs to be\n-        constructed, ``self.connection_pool_kw`` is used to initialize\n-        the :class:`urllib3.connectionpool.ConnectionPool`. If ``pool_kwargs``\n-        is provided, it is used instead. Note that if a new pool does not\n-        need to be created for the request, the provided ``pool_kwargs`` are\n-        not used.\n-        \"\"\"\n-        u = parse_url(url)\n-        return self.connection_from_host(u.host, port=u.port, scheme=u.scheme,\n-                                         pool_kwargs=pool_kwargs)\n-\n-    def _merge_pool_kwargs(self, override):\n-        \"\"\"\n-        Merge a dictionary of override values for self.connection_pool_kw.\n-\n-        This does not modify self.connection_pool_kw and returns a new dict.\n-        Any keys in the override dictionary with a value of ``None`` are\n-        removed from the merged dictionary.\n-        \"\"\"\n-        base_pool_kwargs = self.connection_pool_kw.copy()\n-        if override:\n-            for key, value in override.items():\n-                if value is None:\n-                    try:\n-                        del base_pool_kwargs[key]\n-                    except KeyError:\n-                        pass\n-                else:\n-                    base_pool_kwargs[key] = value\n-        return base_pool_kwargs\n-\n-    def urlopen(self, method, url, redirect=True, **kw):\n-        \"\"\"\n-        Same as :meth:`urllib3.connectionpool.HTTPConnectionPool.urlopen`\n-        with custom cross-host redirect logic and only sends the request-uri\n-        portion of the ``url``.\n-\n-        The given ``url`` parameter must be absolute, such that an appropriate\n-        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.\n-        \"\"\"\n-        u = parse_url(url)\n-        conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n-\n-        kw['assert_same_host'] = False\n-        kw['redirect'] = False\n-        if 'headers' not in kw:\n-            kw['headers'] = self.headers\n-\n-        if self.proxy is not None and u.scheme == \"http\":\n-            response = conn.urlopen(method, url, **kw)\n-        else:\n-            response = conn.urlopen(method, u.request_uri, **kw)\n-\n-        redirect_location = redirect and response.get_redirect_location()\n-        if not redirect_location:\n-            return response\n-\n-        # Support relative URLs for redirecting.\n-        redirect_location = urljoin(url, redirect_location)\n-\n-        # RFC 7231, Section 6.4.4\n-        if response.status == 303:\n-            method = 'GET'\n-\n-        retries = kw.get('retries')\n-        if not isinstance(retries, Retry):\n-            retries = Retry.from_int(retries, redirect=redirect)\n-\n-        try:\n-            retries = retries.increment(method, url, response=response, _pool=conn)\n-        except MaxRetryError:\n-            if retries.raise_on_redirect:\n-                raise\n-            return response\n-\n-        kw['retries'] = retries\n-        kw['redirect'] = redirect\n-\n-        log.info(\"Redirecting %s -> %s\", url, redirect_location)\n-        return self.urlopen(method, redirect_location, **kw)\n-\n-\n-class ProxyManager(PoolManager):\n-    \"\"\"\n-    Behaves just like :class:`PoolManager`, but sends all requests through\n-    the defined proxy, using the CONNECT method for HTTPS URLs.\n-\n-    :param proxy_url:\n-        The URL of the proxy to be used.\n-\n-    :param proxy_headers:\n-        A dictionary contaning headers that will be sent to the proxy. In case\n-        of HTTP they are being sent with each request, while in the\n-        HTTPS/CONNECT case they are sent only once. Could be used for proxy\n-        authentication.\n-\n-    Example:\n-        >>> proxy = urllib3.ProxyManager('http://localhost:3128/')\n-        >>> r1 = proxy.request('GET', 'http://google.com/')\n-        >>> r2 = proxy.request('GET', 'http://httpbin.org/')\n-        >>> len(proxy.pools)\n-        1\n-        >>> r3 = proxy.request('GET', 'https://httpbin.org/')\n-        >>> r4 = proxy.request('GET', 'https://twitter.com/')\n-        >>> len(proxy.pools)\n-        3\n-\n-    \"\"\"\n-\n-    def __init__(self, proxy_url, num_pools=10, headers=None,\n-                 proxy_headers=None, **connection_pool_kw):\n-\n-        if isinstance(proxy_url, HTTPConnectionPool):\n-            proxy_url = '%s://%s:%i' % (proxy_url.scheme, proxy_url.host,\n-                                        proxy_url.port)\n-        proxy = parse_url(proxy_url)\n-        if not proxy.port:\n-            port = port_by_scheme.get(proxy.scheme, 80)\n-            proxy = proxy._replace(port=port)\n-\n-        if proxy.scheme not in (\"http\", \"https\"):\n-            raise ProxySchemeUnknown(proxy.scheme)\n-\n-        self.proxy = proxy\n-        self.proxy_headers = proxy_headers or {}\n-\n-        connection_pool_kw['_proxy'] = self.proxy\n-        connection_pool_kw['_proxy_headers'] = self.proxy_headers\n-\n-        super(ProxyManager, self).__init__(\n-            num_pools, headers, **connection_pool_kw)\n-\n-    def connection_from_host(self, host, port=None, scheme='http', pool_kwargs=None):\n-        if scheme == \"https\":\n-            return super(ProxyManager, self).connection_from_host(\n-                host, port, scheme, pool_kwargs=pool_kwargs)\n-\n-        return super(ProxyManager, self).connection_from_host(\n-            self.proxy.host, self.proxy.port, self.proxy.scheme, pool_kwargs=pool_kwargs)\n-\n-    def _set_proxy_headers(self, url, headers=None):\n-        \"\"\"\n-        Sets headers needed by proxies: specifically, the Accept and Host\n-        headers. Only sets headers not provided by the user.\n-        \"\"\"\n-        headers_ = {'Accept': '*/*'}\n-\n-        netloc = parse_url(url).netloc\n-        if netloc:\n-            headers_['Host'] = netloc\n-\n-        if headers:\n-            headers_.update(headers)\n-        return headers_\n-\n-    def urlopen(self, method, url, redirect=True, **kw):\n-        \"Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.\"\n-        u = parse_url(url)\n-\n-        if u.scheme == \"http\":\n-            # For proxied HTTPS requests, httplib sets the necessary headers\n-            # on the CONNECT to the proxy. For HTTP, we'll definitely\n-            # need to set 'Host' at the very least.\n-            headers = kw.get('headers', self.headers)\n-            kw['headers'] = self._set_proxy_headers(url, headers)\n-\n-        return super(ProxyManager, self).urlopen(method, url, redirect=redirect, **kw)\n-\n-\n-def proxy_from_url(url, **kw):\n-    return ProxyManager(proxy_url=url, **kw)\n\n@@ -1,148 +0,0 @@\n-from __future__ import absolute_import\n-\n-from .filepost import encode_multipart_formdata\n-from .packages.six.moves.urllib.parse import urlencode\n-\n-\n-__all__ = ['RequestMethods']\n-\n-\n-class RequestMethods(object):\n-    \"\"\"\n-    Convenience mixin for classes who implement a :meth:`urlopen` method, such\n-    as :class:`~urllib3.connectionpool.HTTPConnectionPool` and\n-    :class:`~urllib3.poolmanager.PoolManager`.\n-\n-    Provides behavior for making common types of HTTP request methods and\n-    decides which type of request field encoding to use.\n-\n-    Specifically,\n-\n-    :meth:`.request_encode_url` is for sending requests whose fields are\n-    encoded in the URL (such as GET, HEAD, DELETE).\n-\n-    :meth:`.request_encode_body` is for sending requests whose fields are\n-    encoded in the *body* of the request using multipart or www-form-urlencoded\n-    (such as for POST, PUT, PATCH).\n-\n-    :meth:`.request` is for making any kind of request, it will look up the\n-    appropriate encoding format and use one of the above two methods to make\n-    the request.\n-\n-    Initializer parameters:\n-\n-    :param headers:\n-        Headers to include with all requests, unless other headers are given\n-        explicitly.\n-    \"\"\"\n-\n-    _encode_url_methods = set(['DELETE', 'GET', 'HEAD', 'OPTIONS'])\n-\n-    def __init__(self, headers=None):\n-        self.headers = headers or {}\n-\n-    def urlopen(self, method, url, body=None, headers=None,\n-                encode_multipart=True, multipart_boundary=None,\n-                **kw):  # Abstract\n-        raise NotImplemented(\"Classes extending RequestMethods must implement \"\n-                             \"their own ``urlopen`` method.\")\n-\n-    def request(self, method, url, fields=None, headers=None, **urlopen_kw):\n-        \"\"\"\n-        Make a request using :meth:`urlopen` with the appropriate encoding of\n-        ``fields`` based on the ``method`` used.\n-\n-        This is a convenience method that requires the least amount of manual\n-        effort. It can be used in most situations, while still having the\n-        option to drop down to more specific methods when necessary, such as\n-        :meth:`request_encode_url`, :meth:`request_encode_body`,\n-        or even the lowest level :meth:`urlopen`.\n-        \"\"\"\n-        method = method.upper()\n-\n-        if method in self._encode_url_methods:\n-            return self.request_encode_url(method, url, fields=fields,\n-                                           headers=headers,\n-                                           **urlopen_kw)\n-        else:\n-            return self.request_encode_body(method, url, fields=fields,\n-                                            headers=headers,\n-                                            **urlopen_kw)\n-\n-    def request_encode_url(self, method, url, fields=None, headers=None,\n-                           **urlopen_kw):\n-        \"\"\"\n-        Make a request using :meth:`urlopen` with the ``fields`` encoded in\n-        the url. This is useful for request methods like GET, HEAD, DELETE, etc.\n-        \"\"\"\n-        if headers is None:\n-            headers = self.headers\n-\n-        extra_kw = {'headers': headers}\n-        extra_kw.update(urlopen_kw)\n-\n-        if fields:\n-            url += '?' + urlencode(fields)\n-\n-        return self.urlopen(method, url, **extra_kw)\n-\n-    def request_encode_body(self, method, url, fields=None, headers=None,\n-                            encode_multipart=True, multipart_boundary=None,\n-                            **urlopen_kw):\n-        \"\"\"\n-        Make a request using :meth:`urlopen` with the ``fields`` encoded in\n-        the body. This is useful for request methods like POST, PUT, PATCH, etc.\n-\n-        When ``encode_multipart=True`` (default), then\n-        :meth:`urllib3.filepost.encode_multipart_formdata` is used to encode\n-        the payload with the appropriate content type. Otherwise\n-        :meth:`urllib.urlencode` is used with the\n-        'application/x-www-form-urlencoded' content type.\n-\n-        Multipart encoding must be used when posting files, and it's reasonably\n-        safe to use it in other times too. However, it may break request\n-        signing, such as with OAuth.\n-\n-        Supports an optional ``fields`` parameter of key/value strings AND\n-        key/filetuple. A filetuple is a (filename, data, MIME type) tuple where\n-        the MIME type is optional. For example::\n-\n-            fields = {\n-                'foo': 'bar',\n-                'fakefile': ('foofile.txt', 'contents of foofile'),\n-                'realfile': ('barfile.txt', open('realfile').read()),\n-                'typedfile': ('bazfile.bin', open('bazfile').read(),\n-                              'image/jpeg'),\n-                'nonamefile': 'contents of nonamefile field',\n-            }\n-\n-        When uploading a file, providing a filename (the first parameter of the\n-        tuple) is optional but recommended to best mimick behavior of browsers.\n-\n-        Note that if ``headers`` are supplied, the 'Content-Type' header will\n-        be overwritten because it depends on the dynamic random boundary string\n-        which is used to compose the body of the request. The random boundary\n-        string can be explicitly set with the ``multipart_boundary`` parameter.\n-        \"\"\"\n-        if headers is None:\n-            headers = self.headers\n-\n-        extra_kw = {'headers': {}}\n-\n-        if fields:\n-            if 'body' in urlopen_kw:\n-                raise TypeError(\n-                    \"request got values for both 'fields' and 'body', can only specify one.\")\n-\n-            if encode_multipart:\n-                body, content_type = encode_multipart_formdata(fields, boundary=multipart_boundary)\n-            else:\n-                body, content_type = urlencode(fields), 'application/x-www-form-urlencoded'\n-\n-            extra_kw['body'] = body\n-            extra_kw['headers'] = {'Content-Type': content_type}\n-\n-        extra_kw['headers'].update(headers)\n-        extra_kw.update(urlopen_kw)\n-\n-        return self.urlopen(method, url, **extra_kw)\n\n@@ -1,622 +0,0 @@\n-from __future__ import absolute_import\n-from contextlib import contextmanager\n-import zlib\n-import io\n-import logging\n-from socket import timeout as SocketTimeout\n-from socket import error as SocketError\n-\n-from ._collections import HTTPHeaderDict\n-from .exceptions import (\n-    BodyNotHttplibCompatible, ProtocolError, DecodeError, ReadTimeoutError,\n-    ResponseNotChunked, IncompleteRead, InvalidHeader\n-)\n-from .packages.six import string_types as basestring, binary_type, PY3\n-from .packages.six.moves import http_client as httplib\n-from .connection import HTTPException, BaseSSLError\n-from .util.response import is_fp_closed, is_response_to_head\n-\n-log = logging.getLogger(__name__)\n-\n-\n-class DeflateDecoder(object):\n-\n-    def __init__(self):\n-        self._first_try = True\n-        self._data = binary_type()\n-        self._obj = zlib.decompressobj()\n-\n-    def __getattr__(self, name):\n-        return getattr(self._obj, name)\n-\n-    def decompress(self, data):\n-        if not data:\n-            return data\n-\n-        if not self._first_try:\n-            return self._obj.decompress(data)\n-\n-        self._data += data\n-        try:\n-            decompressed = self._obj.decompress(data)\n-            if decompressed:\n-                self._first_try = False\n-                self._data = None\n-            return decompressed\n-        except zlib.error:\n-            self._first_try = False\n-            self._obj = zlib.decompressobj(-zlib.MAX_WBITS)\n-            try:\n-                return self.decompress(self._data)\n-            finally:\n-                self._data = None\n-\n-\n-class GzipDecoder(object):\n-\n-    def __init__(self):\n-        self._obj = zlib.decompressobj(16 + zlib.MAX_WBITS)\n-\n-    def __getattr__(self, name):\n-        return getattr(self._obj, name)\n-\n-    def decompress(self, data):\n-        if not data:\n-            return data\n-        return self._obj.decompress(data)\n-\n-\n-def _get_decoder(mode):\n-    if mode == 'gzip':\n-        return GzipDecoder()\n-\n-    return DeflateDecoder()\n-\n-\n-class HTTPResponse(io.IOBase):\n-    \"\"\"\n-    HTTP Response container.\n-\n-    Backwards-compatible to httplib's HTTPResponse but the response ``body`` is\n-    loaded and decoded on-demand when the ``data`` property is accessed.  This\n-    class is also compatible with the Python standard library's :mod:`io`\n-    module, and can hence be treated as a readable object in the context of that\n-    framework.\n-\n-    Extra parameters for behaviour not present in httplib.HTTPResponse:\n-\n-    :param preload_content:\n-        If True, the response's body will be preloaded during construction.\n-\n-    :param decode_content:\n-        If True, attempts to decode specific content-encoding's based on headers\n-        (like 'gzip' and 'deflate') will be skipped and raw data will be used\n-        instead.\n-\n-    :param original_response:\n-        When this HTTPResponse wrapper is generated from an httplib.HTTPResponse\n-        object, it's convenient to include the original for debug purposes. It's\n-        otherwise unused.\n-\n-    :param retries:\n-        The retries contains the last :class:`~urllib3.util.retry.Retry` that\n-        was used during the request.\n-\n-    :param enforce_content_length:\n-        Enforce content length checking. Body returned by server must match\n-        value of Content-Length header, if present. Otherwise, raise error.\n-    \"\"\"\n-\n-    CONTENT_DECODERS = ['gzip', 'deflate']\n-    REDIRECT_STATUSES = [301, 302, 303, 307, 308]\n-\n-    def __init__(self, body='', headers=None, status=0, version=0, reason=None,\n-                 strict=0, preload_content=True, decode_content=True,\n-                 original_response=None, pool=None, connection=None,\n-                 retries=None, enforce_content_length=False, request_method=None):\n-\n-        if isinstance(headers, HTTPHeaderDict):\n-            self.headers = headers\n-        else:\n-            self.headers = HTTPHeaderDict(headers)\n-        self.status = status\n-        self.version = version\n-        self.reason = reason\n-        self.strict = strict\n-        self.decode_content = decode_content\n-        self.retries = retries\n-        self.enforce_content_length = enforce_content_length\n-\n-        self._decoder = None\n-        self._body = None\n-        self._fp = None\n-        self._original_response = original_response\n-        self._fp_bytes_read = 0\n-\n-        if body and isinstance(body, (basestring, binary_type)):\n-            self._body = body\n-\n-        self._pool = pool\n-        self._connection = connection\n-\n-        if hasattr(body, 'read'):\n-            self._fp = body\n-\n-        # Are we using the chunked-style of transfer encoding?\n-        self.chunked = False\n-        self.chunk_left = None\n-        tr_enc = self.headers.get('transfer-encoding', '').lower()\n-        # Don't incur the penalty of creating a list and then discarding it\n-        encodings = (enc.strip() for enc in tr_enc.split(\",\"))\n-        if \"chunked\" in encodings:\n-            self.chunked = True\n-\n-        # Determine length of response\n-        self.length_remaining = self._init_length(request_method)\n-\n-        # If requested, preload the body.\n-        if preload_content and not self._body:\n-            self._body = self.read(decode_content=decode_content)\n-\n-    def get_redirect_location(self):\n-        \"\"\"\n-        Should we redirect and where to?\n-\n-        :returns: Truthy redirect location string if we got a redirect status\n-            code and valid location. ``None`` if redirect status and no\n-            location. ``False`` if not a redirect status code.\n-        \"\"\"\n-        if self.status in self.REDIRECT_STATUSES:\n-            return self.headers.get('location')\n-\n-        return False\n-\n-    def release_conn(self):\n-        if not self._pool or not self._connection:\n-            return\n-\n-        self._pool._put_conn(self._connection)\n-        self._connection = None\n-\n-    @property\n-    def data(self):\n-        # For backwords-compat with earlier urllib3 0.4 and earlier.\n-        if self._body:\n-            return self._body\n-\n-        if self._fp:\n-            return self.read(cache_content=True)\n-\n-    @property\n-    def connection(self):\n-        return self._connection\n-\n-    def tell(self):\n-        \"\"\"\n-        Obtain the number of bytes pulled over the wire so far. May differ from\n-        the amount of content returned by :meth:``HTTPResponse.read`` if bytes\n-        are encoded on the wire (e.g, compressed).\n-        \"\"\"\n-        return self._fp_bytes_read\n-\n-    def _init_length(self, request_method):\n-        \"\"\"\n-        Set initial length value for Response content if available.\n-        \"\"\"\n-        length = self.headers.get('content-length')\n-\n-        if length is not None and self.chunked:\n-            # This Response will fail with an IncompleteRead if it can't be\n-            # received as chunked. This method falls back to attempt reading\n-            # the response before raising an exception.\n-            log.warning(\"Received response with both Content-Length and \"\n-                        \"Transfer-Encoding set. This is expressly forbidden \"\n-                        \"by RFC 7230 sec 3.3.2. Ignoring Content-Length and \"\n-                        \"attempting to process response as Transfer-Encoding: \"\n-                        \"chunked.\")\n-            return None\n-\n-        elif length is not None:\n-            try:\n-                # RFC 7230 section 3.3.2 specifies multiple content lengths can\n-                # be sent in a single Content-Length header\n-                # (e.g. Content-Length: 42, 42). This line ensures the values\n-                # are all valid ints and that as long as the `set` length is 1,\n-                # all values are the same. Otherwise, the header is invalid.\n-                lengths = set([int(val) for val in length.split(',')])\n-                if len(lengths) > 1:\n-                    raise InvalidHeader(\"Content-Length contained multiple \"\n-                                        \"unmatching values (%s)\" % length)\n-                length = lengths.pop()\n-            except ValueError:\n-                length = None\n-            else:\n-                if length < 0:\n-                    length = None\n-\n-        # Convert status to int for comparison\n-        # In some cases, httplib returns a status of \"_UNKNOWN\"\n-        try:\n-            status = int(self.status)\n-        except ValueError:\n-            status = 0\n-\n-        # Check for responses that shouldn't include a body\n-        if status in (204, 304) or 100 <= status < 200 or request_method == 'HEAD':\n-            length = 0\n-\n-        return length\n-\n-    def _init_decoder(self):\n-        \"\"\"\n-        Set-up the _decoder attribute if necessary.\n-        \"\"\"\n-        # Note: content-encoding value should be case-insensitive, per RFC 7230\n-        # Section 3.2\n-        content_encoding = self.headers.get('content-encoding', '').lower()\n-        if self._decoder is None and content_encoding in self.CONTENT_DECODERS:\n-            self._decoder = _get_decoder(content_encoding)\n-\n-    def _decode(self, data, decode_content, flush_decoder):\n-        \"\"\"\n-        Decode the data passed in and potentially flush the decoder.\n-        \"\"\"\n-        try:\n-            if decode_content and self._decoder:\n-                data = self._decoder.decompress(data)\n-        except (IOError, zlib.error) as e:\n-            content_encoding = self.headers.get('content-encoding', '').lower()\n-            raise DecodeError(\n-                \"Received response with content-encoding: %s, but \"\n-                \"failed to decode it.\" % content_encoding, e)\n-\n-        if flush_decoder and decode_content:\n-            data += self._flush_decoder()\n-\n-        return data\n-\n-    def _flush_decoder(self):\n-        \"\"\"\n-        Flushes the decoder. Should only be called if the decoder is actually\n-        being used.\n-        \"\"\"\n-        if self._decoder:\n-            buf = self._decoder.decompress(b'')\n-            return buf + self._decoder.flush()\n-\n-        return b''\n-\n-    @contextmanager\n-    def _error_catcher(self):\n-        \"\"\"\n-        Catch low-level python exceptions, instead re-raising urllib3\n-        variants, so that low-level exceptions are not leaked in the\n-        high-level api.\n-\n-        On exit, release the connection back to the pool.\n-        \"\"\"\n-        clean_exit = False\n-\n-        try:\n-            try:\n-                yield\n-\n-            except SocketTimeout:\n-                # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n-                # there is yet no clean way to get at it from this context.\n-                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n-\n-            except BaseSSLError as e:\n-                # FIXME: Is there a better way to differentiate between SSLErrors?\n-                if 'read operation timed out' not in str(e):  # Defensive:\n-                    # This shouldn't happen but just in case we're missing an edge\n-                    # case, let's avoid swallowing SSL errors.\n-                    raise\n-\n-                raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n-\n-            except (HTTPException, SocketError) as e:\n-                # This includes IncompleteRead.\n-                raise ProtocolError('Connection broken: %r' % e, e)\n-\n-            # If no exception is thrown, we should avoid cleaning up\n-            # unnecessarily.\n-            clean_exit = True\n-        finally:\n-            # If we didn't terminate cleanly, we need to throw away our\n-            # connection.\n-            if not clean_exit:\n-                # The response may not be closed but we're not going to use it\n-                # anymore so close it now to ensure that the connection is\n-                # released back to the pool.\n-                if self._original_response:\n-                    self._original_response.close()\n-\n-                # Closing the response may not actually be sufficient to close\n-                # everything, so if we have a hold of the connection close that\n-                # too.\n-                if self._connection:\n-                    self._connection.close()\n-\n-            # If we hold the original response but it's closed now, we should\n-            # return the connection back to the pool.\n-            if self._original_response and self._original_response.isclosed():\n-                self.release_conn()\n-\n-    def read(self, amt=None, decode_content=None, cache_content=False):\n-        \"\"\"\n-        Similar to :meth:`httplib.HTTPResponse.read`, but with two additional\n-        parameters: ``decode_content`` and ``cache_content``.\n-\n-        :param amt:\n-            How much of the content to read. If specified, caching is skipped\n-            because it doesn't make sense to cache partial content as the full\n-            response.\n-\n-        :param decode_content:\n-            If True, will attempt to decode the body based on the\n-            'content-encoding' header.\n-\n-        :param cache_content:\n-            If True, will save the returned data such that the same result is\n-            returned despite of the state of the underlying file object. This\n-            is useful if you want the ``.data`` property to continue working\n-            after having ``.read()`` the file object. (Overridden if ``amt`` is\n-            set.)\n-        \"\"\"\n-        self._init_decoder()\n-        if decode_content is None:\n-            decode_content = self.decode_content\n-\n-        if self._fp is None:\n-            return\n-\n-        flush_decoder = False\n-        data = None\n-\n-        with self._error_catcher():\n-            if amt is None:\n-                # cStringIO doesn't like amt=None\n-                data = self._fp.read()\n-                flush_decoder = True\n-            else:\n-                cache_content = False\n-                data = self._fp.read(amt)\n-                if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.\n-                    # Close the connection when no data is returned\n-                    #\n-                    # This is redundant to what httplib/http.client _should_\n-                    # already do.  However, versions of python released before\n-                    # December 15, 2012 (http://bugs.python.org/issue16298) do\n-                    # not properly close the connection in all cases. There is\n-                    # no harm in redundantly calling close.\n-                    self._fp.close()\n-                    flush_decoder = True\n-                    if self.enforce_content_length and self.length_remaining not in (0, None):\n-                        # This is an edge case that httplib failed to cover due\n-                        # to concerns of backward compatibility. We're\n-                        # addressing it here to make sure IncompleteRead is\n-                        # raised during streaming, so all calls with incorrect\n-                        # Content-Length are caught.\n-                        raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n-\n-        if data:\n-            self._fp_bytes_read += len(data)\n-            if self.length_remaining is not None:\n-                self.length_remaining -= len(data)\n-\n-            data = self._decode(data, decode_content, flush_decoder)\n-\n-            if cache_content:\n-                self._body = data\n-\n-        return data\n-\n-    def stream(self, amt=2**16, decode_content=None):\n-        \"\"\"\n-        A generator wrapper for the read() method. A call will block until\n-        ``amt`` bytes have been read from the connection or until the\n-        connection is closed.\n-\n-        :param amt:\n-            How much of the content to read. The generator will return up to\n-            much data per iteration, but may return less. This is particularly\n-            likely when using compressed data. However, the empty string will\n-            never be returned.\n-\n-        :param decode_content:\n-            If True, will attempt to decode the body based on the\n-            'content-encoding' header.\n-        \"\"\"\n-        if self.chunked and self.supports_chunked_reads():\n-            for line in self.read_chunked(amt, decode_content=decode_content):\n-                yield line\n-        else:\n-            while not is_fp_closed(self._fp):\n-                data = self.read(amt=amt, decode_content=decode_content)\n-\n-                if data:\n-                    yield data\n-\n-    @classmethod\n-    def from_httplib(ResponseCls, r, **response_kw):\n-        \"\"\"\n-        Given an :class:`httplib.HTTPResponse` instance ``r``, return a\n-        corresponding :class:`urllib3.response.HTTPResponse` object.\n-\n-        Remaining parameters are passed to the HTTPResponse constructor, along\n-        with ``original_response=r``.\n-        \"\"\"\n-        headers = r.msg\n-\n-        if not isinstance(headers, HTTPHeaderDict):\n-            if PY3:  # Python 3\n-                headers = HTTPHeaderDict(headers.items())\n-            else:  # Python 2\n-                headers = HTTPHeaderDict.from_httplib(headers)\n-\n-        # HTTPResponse objects in Python 3 don't have a .strict attribute\n-        strict = getattr(r, 'strict', 0)\n-        resp = ResponseCls(body=r,\n-                           headers=headers,\n-                           status=r.status,\n-                           version=r.version,\n-                           reason=r.reason,\n-                           strict=strict,\n-                           original_response=r,\n-                           **response_kw)\n-        return resp\n-\n-    # Backwards-compatibility methods for httplib.HTTPResponse\n-    def getheaders(self):\n-        return self.headers\n-\n-    def getheader(self, name, default=None):\n-        return self.headers.get(name, default)\n-\n-    # Overrides from io.IOBase\n-    def close(self):\n-        if not self.closed:\n-            self._fp.close()\n-\n-        if self._connection:\n-            self._connection.close()\n-\n-    @property\n-    def closed(self):\n-        if self._fp is None:\n-            return True\n-        elif hasattr(self._fp, 'isclosed'):\n-            return self._fp.isclosed()\n-        elif hasattr(self._fp, 'closed'):\n-            return self._fp.closed\n-        else:\n-            return True\n-\n-    def fileno(self):\n-        if self._fp is None:\n-            raise IOError(\"HTTPResponse has no file to get a fileno from\")\n-        elif hasattr(self._fp, \"fileno\"):\n-            return self._fp.fileno()\n-        else:\n-            raise IOError(\"The file-like object this HTTPResponse is wrapped \"\n-                          \"around has no file descriptor\")\n-\n-    def flush(self):\n-        if self._fp is not None and hasattr(self._fp, 'flush'):\n-            return self._fp.flush()\n-\n-    def readable(self):\n-        # This method is required for `io` module compatibility.\n-        return True\n-\n-    def readinto(self, b):\n-        # This method is required for `io` module compatibility.\n-        temp = self.read(len(b))\n-        if len(temp) == 0:\n-            return 0\n-        else:\n-            b[:len(temp)] = temp\n-            return len(temp)\n-\n-    def supports_chunked_reads(self):\n-        \"\"\"\n-        Checks if the underlying file-like object looks like a\n-        httplib.HTTPResponse object. We do this by testing for the fp\n-        attribute. If it is present we assume it returns raw chunks as\n-        processed by read_chunked().\n-        \"\"\"\n-        return hasattr(self._fp, 'fp')\n-\n-    def _update_chunk_length(self):\n-        # First, we'll figure out length of a chunk and then\n-        # we'll try to read it from socket.\n-        if self.chunk_left is not None:\n-            return\n-        line = self._fp.fp.readline()\n-        line = line.split(b';', 1)[0]\n-        try:\n-            self.chunk_left = int(line, 16)\n-        except ValueError:\n-            # Invalid chunked protocol response, abort.\n-            self.close()\n-            raise httplib.IncompleteRead(line)\n-\n-    def _handle_chunk(self, amt):\n-        returned_chunk = None\n-        if amt is None:\n-            chunk = self._fp._safe_read(self.chunk_left)\n-            returned_chunk = chunk\n-            self._fp._safe_read(2)  # Toss the CRLF at the end of the chunk.\n-            self.chunk_left = None\n-        elif amt < self.chunk_left:\n-            value = self._fp._safe_read(amt)\n-            self.chunk_left = self.chunk_left - amt\n-            returned_chunk = value\n-        elif amt == self.chunk_left:\n-            value = self._fp._safe_read(amt)\n-            self._fp._safe_read(2)  # Toss the CRLF at the end of the chunk.\n-            self.chunk_left = None\n-            returned_chunk = value\n-        else:  # amt > self.chunk_left\n-            returned_chunk = self._fp._safe_read(self.chunk_left)\n-            self._fp._safe_read(2)  # Toss the CRLF at the end of the chunk.\n-            self.chunk_left = None\n-        return returned_chunk\n-\n-    def read_chunked(self, amt=None, decode_content=None):\n-        \"\"\"\n-        Similar to :meth:`HTTPResponse.read`, but with an additional\n-        parameter: ``decode_content``.\n-\n-        :param decode_content:\n-            If True, will attempt to decode the body based on the\n-            'content-encoding' header.\n-        \"\"\"\n-        self._init_decoder()\n-        # FIXME: Rewrite this method and make it a class with a better structured logic.\n-        if not self.chunked:\n-            raise ResponseNotChunked(\n-                \"Response is not chunked. \"\n-                \"Header 'transfer-encoding: chunked' is missing.\")\n-        if not self.supports_chunked_reads():\n-            raise BodyNotHttplibCompatible(\n-                \"Body should be httplib.HTTPResponse like. \"\n-                \"It should have have an fp attribute which returns raw chunks.\")\n-\n-        # Don't bother reading the body of a HEAD request.\n-        if self._original_response and is_response_to_head(self._original_response):\n-            self._original_response.close()\n-            return\n-\n-        with self._error_catcher():\n-            while True:\n-                self._update_chunk_length()\n-                if self.chunk_left == 0:\n-                    break\n-                chunk = self._handle_chunk(amt)\n-                decoded = self._decode(chunk, decode_content=decode_content,\n-                                       flush_decoder=False)\n-                if decoded:\n-                    yield decoded\n-\n-            if decode_content:\n-                # On CPython and PyPy, we should never need to flush the\n-                # decoder. However, on Jython we *might* need to, so\n-                # lets defensively do it anyway.\n-                decoded = self._flush_decoder()\n-                if decoded:  # Platform-specific: Jython.\n-                    yield decoded\n-\n-            # Chunk content ends with \\r\\n: discard it.\n-            while True:\n-                line = self._fp.fp.readline()\n-                if not line:\n-                    # Some sites may not end with '\\r\\n'.\n-                    break\n-                if line == b'\\r\\n':\n-                    break\n-\n-            # We read everything; close the \"file\".\n-            if self._original_response:\n-                self._original_response.close()\n\n@@ -1,54 +0,0 @@\n-from __future__ import absolute_import\n-# For backwards compatibility, provide imports that used to be here.\n-from .connection import is_connection_dropped\n-from .request import make_headers\n-from .response import is_fp_closed\n-from .ssl_ import (\n-    SSLContext,\n-    HAS_SNI,\n-    IS_PYOPENSSL,\n-    IS_SECURETRANSPORT,\n-    assert_fingerprint,\n-    resolve_cert_reqs,\n-    resolve_ssl_version,\n-    ssl_wrap_socket,\n-)\n-from .timeout import (\n-    current_time,\n-    Timeout,\n-)\n-\n-from .retry import Retry\n-from .url import (\n-    get_host,\n-    parse_url,\n-    split_first,\n-    Url,\n-)\n-from .wait import (\n-    wait_for_read,\n-    wait_for_write\n-)\n-\n-__all__ = (\n-    'HAS_SNI',\n-    'IS_PYOPENSSL',\n-    'IS_SECURETRANSPORT',\n-    'SSLContext',\n-    'Retry',\n-    'Timeout',\n-    'Url',\n-    'assert_fingerprint',\n-    'current_time',\n-    'is_connection_dropped',\n-    'is_fp_closed',\n-    'get_host',\n-    'parse_url',\n-    'make_headers',\n-    'resolve_cert_reqs',\n-    'resolve_ssl_version',\n-    'split_first',\n-    'ssl_wrap_socket',\n-    'wait_for_read',\n-    'wait_for_write'\n-)\n\n@@ -1,130 +0,0 @@\n-from __future__ import absolute_import\n-import socket\n-from .wait import wait_for_read\n-from .selectors import HAS_SELECT, SelectorError\n-\n-\n-def is_connection_dropped(conn):  # Platform-specific\n-    \"\"\"\n-    Returns True if the connection is dropped and should be closed.\n-\n-    :param conn:\n-        :class:`httplib.HTTPConnection` object.\n-\n-    Note: For platforms like AppEngine, this will always return ``False`` to\n-    let the platform handle connection recycling transparently for us.\n-    \"\"\"\n-    sock = getattr(conn, 'sock', False)\n-    if sock is False:  # Platform-specific: AppEngine\n-        return False\n-    if sock is None:  # Connection already closed (such as by httplib).\n-        return True\n-\n-    if not HAS_SELECT:\n-        return False\n-\n-    try:\n-        return bool(wait_for_read(sock, timeout=0.0))\n-    except SelectorError:\n-        return True\n-\n-\n-# This function is copied from socket.py in the Python 2.7 standard\n-# library test suite. Added to its signature is only `socket_options`.\n-# One additional modification is that we avoid binding to IPv6 servers\n-# discovered in DNS if the system doesn't have IPv6 functionality.\n-def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n-                      source_address=None, socket_options=None):\n-    \"\"\"Connect to *address* and return the socket object.\n-\n-    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n-    port)``) and return the socket object.  Passing the optional\n-    *timeout* parameter will set the timeout on the socket instance\n-    before attempting to connect.  If no *timeout* is supplied, the\n-    global default timeout setting returned by :func:`getdefaulttimeout`\n-    is used.  If *source_address* is set it must be a tuple of (host, port)\n-    for the socket to bind as a source address before making the connection.\n-    An host of '' or port 0 tells the OS to use the default.\n-    \"\"\"\n-\n-    host, port = address\n-    if host.startswith('['):\n-        host = host.strip('[]')\n-    err = None\n-\n-    # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n-    # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n-    # The original create_connection function always returns all records.\n-    family = allowed_gai_family()\n-\n-    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n-        af, socktype, proto, canonname, sa = res\n-        sock = None\n-        try:\n-            sock = socket.socket(af, socktype, proto)\n-\n-            # If provided, set socket level options before connecting.\n-            _set_socket_options(sock, socket_options)\n-\n-            if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n-                sock.settimeout(timeout)\n-            if source_address:\n-                sock.bind(source_address)\n-            sock.connect(sa)\n-            return sock\n-\n-        except socket.error as e:\n-            err = e\n-            if sock is not None:\n-                sock.close()\n-                sock = None\n-\n-    if err is not None:\n-        raise err\n-\n-    raise socket.error(\"getaddrinfo returns an empty list\")\n-\n-\n-def _set_socket_options(sock, options):\n-    if options is None:\n-        return\n-\n-    for opt in options:\n-        sock.setsockopt(*opt)\n-\n-\n-def allowed_gai_family():\n-    \"\"\"This function is designed to work in the context of\n-    getaddrinfo, where family=socket.AF_UNSPEC is the default and\n-    will perform a DNS search for both IPv6 and IPv4 records.\"\"\"\n-\n-    family = socket.AF_INET\n-    if HAS_IPV6:\n-        family = socket.AF_UNSPEC\n-    return family\n-\n-\n-def _has_ipv6(host):\n-    \"\"\" Returns True if the system can bind an IPv6 address. \"\"\"\n-    sock = None\n-    has_ipv6 = False\n-\n-    if socket.has_ipv6:\n-        # has_ipv6 returns true if cPython was compiled with IPv6 support.\n-        # It does not tell us if the system has IPv6 support enabled. To\n-        # determine that we must bind to an IPv6 address.\n-        # https://github.com/shazow/urllib3/pull/611\n-        # https://bugs.python.org/issue658327\n-        try:\n-            sock = socket.socket(socket.AF_INET6)\n-            sock.bind((host, 0))\n-            has_ipv6 = True\n-        except Exception:\n-            pass\n-\n-    if sock:\n-        sock.close()\n-    return has_ipv6\n-\n-\n-HAS_IPV6 = _has_ipv6('::1')\n\n@@ -1,118 +0,0 @@\n-from __future__ import absolute_import\n-from base64 import b64encode\n-\n-from ..packages.six import b, integer_types\n-from ..exceptions import UnrewindableBodyError\n-\n-ACCEPT_ENCODING = 'gzip,deflate'\n-_FAILEDTELL = object()\n-\n-\n-def make_headers(keep_alive=None, accept_encoding=None, user_agent=None,\n-                 basic_auth=None, proxy_basic_auth=None, disable_cache=None):\n-    \"\"\"\n-    Shortcuts for generating request headers.\n-\n-    :param keep_alive:\n-        If ``True``, adds 'connection: keep-alive' header.\n-\n-    :param accept_encoding:\n-        Can be a boolean, list, or string.\n-        ``True`` translates to 'gzip,deflate'.\n-        List will get joined by comma.\n-        String will be used as provided.\n-\n-    :param user_agent:\n-        String representing the user-agent you want, such as\n-        \"python-urllib3/0.6\"\n-\n-    :param basic_auth:\n-        Colon-separated username:password string for 'authorization: basic ...'\n-        auth header.\n-\n-    :param proxy_basic_auth:\n-        Colon-separated username:password string for 'proxy-authorization: basic ...'\n-        auth header.\n-\n-    :param disable_cache:\n-        If ``True``, adds 'cache-control: no-cache' header.\n-\n-    Example::\n-\n-        >>> make_headers(keep_alive=True, user_agent=\"Batman/1.0\")\n-        {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}\n-        >>> make_headers(accept_encoding=True)\n-        {'accept-encoding': 'gzip,deflate'}\n-    \"\"\"\n-    headers = {}\n-    if accept_encoding:\n-        if isinstance(accept_encoding, str):\n-            pass\n-        elif isinstance(accept_encoding, list):\n-            accept_encoding = ','.join(accept_encoding)\n-        else:\n-            accept_encoding = ACCEPT_ENCODING\n-        headers['accept-encoding'] = accept_encoding\n-\n-    if user_agent:\n-        headers['user-agent'] = user_agent\n-\n-    if keep_alive:\n-        headers['connection'] = 'keep-alive'\n-\n-    if basic_auth:\n-        headers['authorization'] = 'Basic ' + \\\n-            b64encode(b(basic_auth)).decode('utf-8')\n-\n-    if proxy_basic_auth:\n-        headers['proxy-authorization'] = 'Basic ' + \\\n-            b64encode(b(proxy_basic_auth)).decode('utf-8')\n-\n-    if disable_cache:\n-        headers['cache-control'] = 'no-cache'\n-\n-    return headers\n-\n-\n-def set_file_position(body, pos):\n-    \"\"\"\n-    If a position is provided, move file to that point.\n-    Otherwise, we'll attempt to record a position for future use.\n-    \"\"\"\n-    if pos is not None:\n-        rewind_body(body, pos)\n-    elif getattr(body, 'tell', None) is not None:\n-        try:\n-            pos = body.tell()\n-        except (IOError, OSError):\n-            # This differentiates from None, allowing us to catch\n-            # a failed `tell()` later when trying to rewind the body.\n-            pos = _FAILEDTELL\n-\n-    return pos\n-\n-\n-def rewind_body(body, body_pos):\n-    \"\"\"\n-    Attempt to rewind body to a certain position.\n-    Primarily used for request redirects and retries.\n-\n-    :param body:\n-        File-like object that supports seek.\n-\n-    :param int pos:\n-        Position to seek to in file.\n-    \"\"\"\n-    body_seek = getattr(body, 'seek', None)\n-    if body_seek is not None and isinstance(body_pos, integer_types):\n-        try:\n-            body_seek(body_pos)\n-        except (IOError, OSError):\n-            raise UnrewindableBodyError(\"An error occurred when rewinding request \"\n-                                        \"body for redirect/retry.\")\n-    elif body_pos is _FAILEDTELL:\n-        raise UnrewindableBodyError(\"Unable to record file position for rewinding \"\n-                                    \"request body during a redirect/retry.\")\n-    else:\n-        raise ValueError(\"body_pos must be of type integer, \"\n-                         \"instead it was %s.\" % type(body_pos))\n\n@@ -1,81 +0,0 @@\n-from __future__ import absolute_import\n-from ..packages.six.moves import http_client as httplib\n-\n-from ..exceptions import HeaderParsingError\n-\n-\n-def is_fp_closed(obj):\n-    \"\"\"\n-    Checks whether a given file-like object is closed.\n-\n-    :param obj:\n-        The file-like object to check.\n-    \"\"\"\n-\n-    try:\n-        # Check `isclosed()` first, in case Python3 doesn't set `closed`.\n-        # GH Issue #928\n-        return obj.isclosed()\n-    except AttributeError:\n-        pass\n-\n-    try:\n-        # Check via the official file-like-object way.\n-        return obj.closed\n-    except AttributeError:\n-        pass\n-\n-    try:\n-        # Check if the object is a container for another file-like object that\n-        # gets released on exhaustion (e.g. HTTPResponse).\n-        return obj.fp is None\n-    except AttributeError:\n-        pass\n-\n-    raise ValueError(\"Unable to determine whether fp is closed.\")\n-\n-\n-def assert_header_parsing(headers):\n-    \"\"\"\n-    Asserts whether all headers have been successfully parsed.\n-    Extracts encountered errors from the result of parsing headers.\n-\n-    Only works on Python 3.\n-\n-    :param headers: Headers to verify.\n-    :type headers: `httplib.HTTPMessage`.\n-\n-    :raises urllib3.exceptions.HeaderParsingError:\n-        If parsing errors are found.\n-    \"\"\"\n-\n-    # This will fail silently if we pass in the wrong kind of parameter.\n-    # To make debugging easier add an explicit check.\n-    if not isinstance(headers, httplib.HTTPMessage):\n-        raise TypeError('expected httplib.Message, got {0}.'.format(\n-            type(headers)))\n-\n-    defects = getattr(headers, 'defects', None)\n-    get_payload = getattr(headers, 'get_payload', None)\n-\n-    unparsed_data = None\n-    if get_payload:  # Platform-specific: Python 3.\n-        unparsed_data = get_payload()\n-\n-    if defects or unparsed_data:\n-        raise HeaderParsingError(defects=defects, unparsed_data=unparsed_data)\n-\n-\n-def is_response_to_head(response):\n-    \"\"\"\n-    Checks whether the request of a response has been a HEAD-request.\n-    Handles the quirks of AppEngine.\n-\n-    :param conn:\n-    :type conn: :class:`httplib.HTTPResponse`\n-    \"\"\"\n-    # FIXME: Can we do this somehow without accessing private httplib _method?\n-    method = response._method\n-    if isinstance(method, int):  # Platform-specific: Appengine\n-        return method == 3\n-    return method.upper() == 'HEAD'\n\n@@ -1,401 +0,0 @@\n-from __future__ import absolute_import\n-import time\n-import logging\n-from collections import namedtuple\n-from itertools import takewhile\n-import email\n-import re\n-\n-from ..exceptions import (\n-    ConnectTimeoutError,\n-    MaxRetryError,\n-    ProtocolError,\n-    ReadTimeoutError,\n-    ResponseError,\n-    InvalidHeader,\n-)\n-from ..packages import six\n-\n-\n-log = logging.getLogger(__name__)\n-\n-# Data structure for representing the metadata of requests that result in a retry.\n-RequestHistory = namedtuple('RequestHistory', [\"method\", \"url\", \"error\",\n-                                               \"status\", \"redirect_location\"])\n-\n-\n-class Retry(object):\n-    \"\"\" Retry configuration.\n-\n-    Each retry attempt will create a new Retry object with updated values, so\n-    they can be safely reused.\n-\n-    Retries can be defined as a default for a pool::\n-\n-        retries = Retry(connect=5, read=2, redirect=5)\n-        http = PoolManager(retries=retries)\n-        response = http.request('GET', 'http://example.com/')\n-\n-    Or per-request (which overrides the default for the pool)::\n-\n-        response = http.request('GET', 'http://example.com/', retries=Retry(10))\n-\n-    Retries can be disabled by passing ``False``::\n-\n-        response = http.request('GET', 'http://example.com/', retries=False)\n-\n-    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless\n-    retries are disabled, in which case the causing exception will be raised.\n-\n-    :param int total:\n-        Total number of retries to allow. Takes precedence over other counts.\n-\n-        Set to ``None`` to remove this constraint and fall back on other\n-        counts. It's a good idea to set this to some sensibly-high value to\n-        account for unexpected edge cases and avoid infinite retry loops.\n-\n-        Set to ``0`` to fail on the first retry.\n-\n-        Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n-\n-    :param int connect:\n-        How many connection-related errors to retry on.\n-\n-        These are errors raised before the request is sent to the remote server,\n-        which we assume has not triggered the server to process the request.\n-\n-        Set to ``0`` to fail on the first retry of this type.\n-\n-    :param int read:\n-        How many times to retry on read errors.\n-\n-        These errors are raised after the request was sent to the server, so the\n-        request may have side-effects.\n-\n-        Set to ``0`` to fail on the first retry of this type.\n-\n-    :param int redirect:\n-        How many redirects to perform. Limit this to avoid infinite redirect\n-        loops.\n-\n-        A redirect is a HTTP response with a status code 301, 302, 303, 307 or\n-        308.\n-\n-        Set to ``0`` to fail on the first retry of this type.\n-\n-        Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n-\n-    :param int status:\n-        How many times to retry on bad status codes.\n-\n-        These are retries made on responses, where status code matches\n-        ``status_forcelist``.\n-\n-        Set to ``0`` to fail on the first retry of this type.\n-\n-    :param iterable method_whitelist:\n-        Set of uppercased HTTP method verbs that we should retry on.\n-\n-        By default, we only retry on methods which are considered to be\n-        idempotent (multiple requests with the same parameters end with the\n-        same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.\n-\n-        Set to a ``False`` value to retry on any verb.\n-\n-    :param iterable status_forcelist:\n-        A set of integer HTTP status codes that we should force a retry on.\n-        A retry is initiated if the request method is in ``method_whitelist``\n-        and the response status code is in ``status_forcelist``.\n-\n-        By default, this is disabled with ``None``.\n-\n-    :param float backoff_factor:\n-        A backoff factor to apply between attempts after the second try\n-        (most errors are resolved immediately by a second try without a\n-        delay). urllib3 will sleep for::\n-\n-            {backoff factor} * (2 ^ ({number of total retries} - 1))\n-\n-        seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep\n-        for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer\n-        than :attr:`Retry.BACKOFF_MAX`.\n-\n-        By default, backoff is disabled (set to 0).\n-\n-    :param bool raise_on_redirect: Whether, if the number of redirects is\n-        exhausted, to raise a MaxRetryError, or to return a response with a\n-        response code in the 3xx range.\n-\n-    :param bool raise_on_status: Similar meaning to ``raise_on_redirect``:\n-        whether we should raise an exception, or return a response,\n-        if status falls in ``status_forcelist`` range and retries have\n-        been exhausted.\n-\n-    :param tuple history: The history of the request encountered during\n-        each call to :meth:`~Retry.increment`. The list is in the order\n-        the requests occurred. Each list item is of class :class:`RequestHistory`.\n-\n-    :param bool respect_retry_after_header:\n-        Whether to respect Retry-After header on status codes defined as\n-        :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.\n-\n-    \"\"\"\n-\n-    DEFAULT_METHOD_WHITELIST = frozenset([\n-        'HEAD', 'GET', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'])\n-\n-    RETRY_AFTER_STATUS_CODES = frozenset([413, 429, 503])\n-\n-    #: Maximum backoff time.\n-    BACKOFF_MAX = 120\n-\n-    def __init__(self, total=10, connect=None, read=None, redirect=None, status=None,\n-                 method_whitelist=DEFAULT_METHOD_WHITELIST, status_forcelist=None,\n-                 backoff_factor=0, raise_on_redirect=True, raise_on_status=True,\n-                 history=None, respect_retry_after_header=True):\n-\n-        self.total = total\n-        self.connect = connect\n-        self.read = read\n-        self.status = status\n-\n-        if redirect is False or total is False:\n-            redirect = 0\n-            raise_on_redirect = False\n-\n-        self.redirect = redirect\n-        self.status_forcelist = status_forcelist or set()\n-        self.method_whitelist = method_whitelist\n-        self.backoff_factor = backoff_factor\n-        self.raise_on_redirect = raise_on_redirect\n-        self.raise_on_status = raise_on_status\n-        self.history = history or tuple()\n-        self.respect_retry_after_header = respect_retry_after_header\n-\n-    def new(self, **kw):\n-        params = dict(\n-            total=self.total,\n-            connect=self.connect, read=self.read, redirect=self.redirect, status=self.status,\n-            method_whitelist=self.method_whitelist,\n-            status_forcelist=self.status_forcelist,\n-            backoff_factor=self.backoff_factor,\n-            raise_on_redirect=self.raise_on_redirect,\n-            raise_on_status=self.raise_on_status,\n-            history=self.history,\n-        )\n-        params.update(kw)\n-        return type(self)(**params)\n-\n-    @classmethod\n-    def from_int(cls, retries, redirect=True, default=None):\n-        \"\"\" Backwards-compatibility for the old retries format.\"\"\"\n-        if retries is None:\n-            retries = default if default is not None else cls.DEFAULT\n-\n-        if isinstance(retries, Retry):\n-            return retries\n-\n-        redirect = bool(redirect) and None\n-        new_retries = cls(retries, redirect=redirect)\n-        log.debug(\"Converted retries value: %r -> %r\", retries, new_retries)\n-        return new_retries\n-\n-    def get_backoff_time(self):\n-        \"\"\" Formula for computing the current backoff\n-\n-        :rtype: float\n-        \"\"\"\n-        # We want to consider only the last consecutive errors sequence (Ignore redirects).\n-        consecutive_errors_len = len(list(takewhile(lambda x: x.redirect_location is None,\n-                                                    reversed(self.history))))\n-        if consecutive_errors_len <= 1:\n-            return 0\n-\n-        backoff_value = self.backoff_factor * (2 ** (consecutive_errors_len - 1))\n-        return min(self.BACKOFF_MAX, backoff_value)\n-\n-    def parse_retry_after(self, retry_after):\n-        # Whitespace: https://tools.ietf.org/html/rfc7230#section-3.2.4\n-        if re.match(r\"^\\s*[0-9]+\\s*$\", retry_after):\n-            seconds = int(retry_after)\n-        else:\n-            retry_date_tuple = email.utils.parsedate(retry_after)\n-            if retry_date_tuple is None:\n-                raise InvalidHeader(\"Invalid Retry-After header: %s\" % retry_after)\n-            retry_date = time.mktime(retry_date_tuple)\n-            seconds = retry_date - time.time()\n-\n-        if seconds < 0:\n-            seconds = 0\n-\n-        return seconds\n-\n-    def get_retry_after(self, response):\n-        \"\"\" Get the value of Retry-After in seconds. \"\"\"\n-\n-        retry_after = response.getheader(\"Retry-After\")\n-\n-        if retry_after is None:\n-            return None\n-\n-        return self.parse_retry_after(retry_after)\n-\n-    def sleep_for_retry(self, response=None):\n-        retry_after = self.get_retry_after(response)\n-        if retry_after:\n-            time.sleep(retry_after)\n-            return True\n-\n-        return False\n-\n-    def _sleep_backoff(self):\n-        backoff = self.get_backoff_time()\n-        if backoff <= 0:\n-            return\n-        time.sleep(backoff)\n-\n-    def sleep(self, response=None):\n-        \"\"\" Sleep between retry attempts.\n-\n-        This method will respect a server's ``Retry-After`` response header\n-        and sleep the duration of the time requested. If that is not present, it\n-        will use an exponential backoff. By default, the backoff factor is 0 and\n-        this method will return immediately.\n-        \"\"\"\n-\n-        if response:\n-            slept = self.sleep_for_retry(response)\n-            if slept:\n-                return\n-\n-        self._sleep_backoff()\n-\n-    def _is_connection_error(self, err):\n-        \"\"\" Errors when we're fairly sure that the server did not receive the\n-        request, so it should be safe to retry.\n-        \"\"\"\n-        return isinstance(err, ConnectTimeoutError)\n-\n-    def _is_read_error(self, err):\n-        \"\"\" Errors that occur after the request has been started, so we should\n-        assume that the server began processing it.\n-        \"\"\"\n-        return isinstance(err, (ReadTimeoutError, ProtocolError))\n-\n-    def _is_method_retryable(self, method):\n-        \"\"\" Checks if a given HTTP method should be retried upon, depending if\n-        it is included on the method whitelist.\n-        \"\"\"\n-        if self.method_whitelist and method.upper() not in self.method_whitelist:\n-            return False\n-\n-        return True\n-\n-    def is_retry(self, method, status_code, has_retry_after=False):\n-        \"\"\" Is this method/status code retryable? (Based on whitelists and control\n-        variables such as the number of total retries to allow, whether to\n-        respect the Retry-After header, whether this header is present, and\n-        whether the returned status code is on the list of status codes to\n-        be retried upon on the presence of the aforementioned header)\n-        \"\"\"\n-        if not self._is_method_retryable(method):\n-            return False\n-\n-        if self.status_forcelist and status_code in self.status_forcelist:\n-            return True\n-\n-        return (self.total and self.respect_retry_after_header and\n-                has_retry_after and (status_code in self.RETRY_AFTER_STATUS_CODES))\n-\n-    def is_exhausted(self):\n-        \"\"\" Are we out of retries? \"\"\"\n-        retry_counts = (self.total, self.connect, self.read, self.redirect, self.status)\n-        retry_counts = list(filter(None, retry_counts))\n-        if not retry_counts:\n-            return False\n-\n-        return min(retry_counts) < 0\n-\n-    def increment(self, method=None, url=None, response=None, error=None,\n-                  _pool=None, _stacktrace=None):\n-        \"\"\" Return a new Retry object with incremented retry counters.\n-\n-        :param response: A response object, or None, if the server did not\n-            return a response.\n-        :type response: :class:`~urllib3.response.HTTPResponse`\n-        :param Exception error: An error encountered during the request, or\n-            None if the response was received successfully.\n-\n-        :return: A new ``Retry`` object.\n-        \"\"\"\n-        if self.total is False and error:\n-            # Disabled, indicate to re-raise the error.\n-            raise six.reraise(type(error), error, _stacktrace)\n-\n-        total = self.total\n-        if total is not None:\n-            total -= 1\n-\n-        connect = self.connect\n-        read = self.read\n-        redirect = self.redirect\n-        status_count = self.status\n-        cause = 'unknown'\n-        status = None\n-        redirect_location = None\n-\n-        if error and self._is_connection_error(error):\n-            # Connect retry?\n-            if connect is False:\n-                raise six.reraise(type(error), error, _stacktrace)\n-            elif connect is not None:\n-                connect -= 1\n-\n-        elif error and self._is_read_error(error):\n-            # Read retry?\n-            if read is False or not self._is_method_retryable(method):\n-                raise six.reraise(type(error), error, _stacktrace)\n-            elif read is not None:\n-                read -= 1\n-\n-        elif response and response.get_redirect_location():\n-            # Redirect retry?\n-            if redirect is not None:\n-                redirect -= 1\n-            cause = 'too many redirects'\n-            redirect_location = response.get_redirect_location()\n-            status = response.status\n-\n-        else:\n-            # Incrementing because of a server error like a 500 in\n-            # status_forcelist and a the given method is in the whitelist\n-            cause = ResponseError.GENERIC_ERROR\n-            if response and response.status:\n-                if status_count is not None:\n-                    status_count -= 1\n-                cause = ResponseError.SPECIFIC_ERROR.format(\n-                    status_code=response.status)\n-                status = response.status\n-\n-        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)\n-\n-        new_retry = self.new(\n-            total=total,\n-            connect=connect, read=read, redirect=redirect, status=status_count,\n-            history=history)\n-\n-        if new_retry.is_exhausted():\n-            raise MaxRetryError(_pool, url, error or ResponseError(cause))\n-\n-        log.debug(\"Incremented Retry for (url='%s'): %r\", url, new_retry)\n-\n-        return new_retry\n-\n-    def __repr__(self):\n-        return ('{cls.__name__}(total={self.total}, connect={self.connect}, '\n-                'read={self.read}, redirect={self.redirect}, status={self.status})').format(\n-                    cls=type(self), self=self)\n-\n-\n-# For backwards compatibility (equivalent to pre-v1.9):\n-Retry.DEFAULT = Retry(3)\n\n@@ -1,581 +0,0 @@\n-# Backport of selectors.py from Python 3.5+ to support Python < 3.4\n-# Also has the behavior specified in PEP 475 which is to retry syscalls\n-# in the case of an EINTR error. This module is required because selectors34\n-# does not follow this behavior and instead returns that no dile descriptor\n-# events have occurred rather than retry the syscall. The decision to drop\n-# support for select.devpoll is made to maintain 100% test coverage.\n-\n-import errno\n-import math\n-import select\n-import socket\n-import sys\n-import time\n-from collections import namedtuple, Mapping\n-\n-try:\n-    monotonic = time.monotonic\n-except (AttributeError, ImportError):  # Python 3.3<\n-    monotonic = time.time\n-\n-EVENT_READ = (1 << 0)\n-EVENT_WRITE = (1 << 1)\n-\n-HAS_SELECT = True  # Variable that shows whether the platform has a selector.\n-_SYSCALL_SENTINEL = object()  # Sentinel in case a system call returns None.\n-_DEFAULT_SELECTOR = None\n-\n-\n-class SelectorError(Exception):\n-    def __init__(self, errcode):\n-        super(SelectorError, self).__init__()\n-        self.errno = errcode\n-\n-    def __repr__(self):\n-        return \"<SelectorError errno={0}>\".format(self.errno)\n-\n-    def __str__(self):\n-        return self.__repr__()\n-\n-\n-def _fileobj_to_fd(fileobj):\n-    \"\"\" Return a file descriptor from a file object. If\n-    given an integer will simply return that integer back. \"\"\"\n-    if isinstance(fileobj, int):\n-        fd = fileobj\n-    else:\n-        try:\n-            fd = int(fileobj.fileno())\n-        except (AttributeError, TypeError, ValueError):\n-            raise ValueError(\"Invalid file object: {0!r}\".format(fileobj))\n-    if fd < 0:\n-        raise ValueError(\"Invalid file descriptor: {0}\".format(fd))\n-    return fd\n-\n-\n-# Determine which function to use to wrap system calls because Python 3.5+\n-# already handles the case when system calls are interrupted.\n-if sys.version_info >= (3, 5):\n-    def _syscall_wrapper(func, _, *args, **kwargs):\n-        \"\"\" This is the short-circuit version of the below logic\n-        because in Python 3.5+ all system calls automatically restart\n-        and recalculate their timeouts. \"\"\"\n-        try:\n-            return func(*args, **kwargs)\n-        except (OSError, IOError, select.error) as e:\n-            errcode = None\n-            if hasattr(e, \"errno\"):\n-                errcode = e.errno\n-            raise SelectorError(errcode)\n-else:\n-    def _syscall_wrapper(func, recalc_timeout, *args, **kwargs):\n-        \"\"\" Wrapper function for syscalls that could fail due to EINTR.\n-        All functions should be retried if there is time left in the timeout\n-        in accordance with PEP 475. \"\"\"\n-        timeout = kwargs.get(\"timeout\", None)\n-        if timeout is None:\n-            expires = None\n-            recalc_timeout = False\n-        else:\n-            timeout = float(timeout)\n-            if timeout < 0.0:  # Timeout less than 0 treated as no timeout.\n-                expires = None\n-            else:\n-                expires = monotonic() + timeout\n-\n-        args = list(args)\n-        if recalc_timeout and \"timeout\" not in kwargs:\n-            raise ValueError(\n-                \"Timeout must be in args or kwargs to be recalculated\")\n-\n-        result = _SYSCALL_SENTINEL\n-        while result is _SYSCALL_SENTINEL:\n-            try:\n-                result = func(*args, **kwargs)\n-            # OSError is thrown by select.select\n-            # IOError is thrown by select.epoll.poll\n-            # select.error is thrown by select.poll.poll\n-            # Aren't we thankful for Python 3.x rework for exceptions?\n-            except (OSError, IOError, select.error) as e:\n-                # select.error wasn't a subclass of OSError in the past.\n-                errcode = None\n-                if hasattr(e, \"errno\"):\n-                    errcode = e.errno\n-                elif hasattr(e, \"args\"):\n-                    errcode = e.args[0]\n-\n-                # Also test for the Windows equivalent of EINTR.\n-                is_interrupt = (errcode == errno.EINTR or (hasattr(errno, \"WSAEINTR\") and\n-                                                           errcode == errno.WSAEINTR))\n-\n-                if is_interrupt:\n-                    if expires is not None:\n-                        current_time = monotonic()\n-                        if current_time > expires:\n-                            raise OSError(errno=errno.ETIMEDOUT)\n-                        if recalc_timeout:\n-                            if \"timeout\" in kwargs:\n-                                kwargs[\"timeout\"] = expires - current_time\n-                    continue\n-                if errcode:\n-                    raise SelectorError(errcode)\n-                else:\n-                    raise\n-        return result\n-\n-\n-SelectorKey = namedtuple('SelectorKey', ['fileobj', 'fd', 'events', 'data'])\n-\n-\n-class _SelectorMapping(Mapping):\n-    \"\"\" Mapping of file objects to selector keys \"\"\"\n-\n-    def __init__(self, selector):\n-        self._selector = selector\n-\n-    def __len__(self):\n-        return len(self._selector._fd_to_key)\n-\n-    def __getitem__(self, fileobj):\n-        try:\n-            fd = self._selector._fileobj_lookup(fileobj)\n-            return self._selector._fd_to_key[fd]\n-        except KeyError:\n-            raise KeyError(\"{0!r} is not registered.\".format(fileobj))\n-\n-    def __iter__(self):\n-        return iter(self._selector._fd_to_key)\n-\n-\n-class BaseSelector(object):\n-    \"\"\" Abstract Selector class\n-\n-    A selector supports registering file objects to be monitored\n-    for specific I/O events.\n-\n-    A file object is a file descriptor or any object with a\n-    `fileno()` method. An arbitrary object can be attached to the\n-    file object which can be used for example to store context info,\n-    a callback, etc.\n-\n-    A selector can use various implementations (select(), poll(), epoll(),\n-    and kqueue()) depending on the platform. The 'DefaultSelector' class uses\n-    the most efficient implementation for the current platform.\n-    \"\"\"\n-    def __init__(self):\n-        # Maps file descriptors to keys.\n-        self._fd_to_key = {}\n-\n-        # Read-only mapping returned by get_map()\n-        self._map = _SelectorMapping(self)\n-\n-    def _fileobj_lookup(self, fileobj):\n-        \"\"\" Return a file descriptor from a file object.\n-        This wraps _fileobj_to_fd() to do an exhaustive\n-        search in case the object is invalid but we still\n-        have it in our map. Used by unregister() so we can\n-        unregister an object that was previously registered\n-        even if it is closed. It is also used by _SelectorMapping\n-        \"\"\"\n-        try:\n-            return _fileobj_to_fd(fileobj)\n-        except ValueError:\n-\n-            # Search through all our mapped keys.\n-            for key in self._fd_to_key.values():\n-                if key.fileobj is fileobj:\n-                    return key.fd\n-\n-            # Raise ValueError after all.\n-            raise\n-\n-    def register(self, fileobj, events, data=None):\n-        \"\"\" Register a file object for a set of events to monitor. \"\"\"\n-        if (not events) or (events & ~(EVENT_READ | EVENT_WRITE)):\n-            raise ValueError(\"Invalid events: {0!r}\".format(events))\n-\n-        key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data)\n-\n-        if key.fd in self._fd_to_key:\n-            raise KeyError(\"{0!r} (FD {1}) is already registered\"\n-                           .format(fileobj, key.fd))\n-\n-        self._fd_to_key[key.fd] = key\n-        return key\n-\n-    def unregister(self, fileobj):\n-        \"\"\" Unregister a file object from being monitored. \"\"\"\n-        try:\n-            key = self._fd_to_key.pop(self._fileobj_lookup(fileobj))\n-        except KeyError:\n-            raise KeyError(\"{0!r} is not registered\".format(fileobj))\n-\n-        # Getting the fileno of a closed socket on Windows errors with EBADF.\n-        except socket.error as e:  # Platform-specific: Windows.\n-            if e.errno != errno.EBADF:\n-                raise\n-            else:\n-                for key in self._fd_to_key.values():\n-                    if key.fileobj is fileobj:\n-                        self._fd_to_key.pop(key.fd)\n-                        break\n-                else:\n-                    raise KeyError(\"{0!r} is not registered\".format(fileobj))\n-        return key\n-\n-    def modify(self, fileobj, events, data=None):\n-        \"\"\" Change a registered file object monitored events and data. \"\"\"\n-        # NOTE: Some subclasses optimize this operation even further.\n-        try:\n-            key = self._fd_to_key[self._fileobj_lookup(fileobj)]\n-        except KeyError:\n-            raise KeyError(\"{0!r} is not registered\".format(fileobj))\n-\n-        if events != key.events:\n-            self.unregister(fileobj)\n-            key = self.register(fileobj, events, data)\n-\n-        elif data != key.data:\n-            # Use a shortcut to update the data.\n-            key = key._replace(data=data)\n-            self._fd_to_key[key.fd] = key\n-\n-        return key\n-\n-    def select(self, timeout=None):\n-        \"\"\" Perform the actual selection until some monitored file objects\n-        are ready or the timeout expires. \"\"\"\n-        raise NotImplementedError()\n-\n-    def close(self):\n-        \"\"\" Close the selector. This must be called to ensure that all\n-        underlying resources are freed. \"\"\"\n-        self._fd_to_key.clear()\n-        self._map = None\n-\n-    def get_key(self, fileobj):\n-        \"\"\" Return the key associated with a registered file object. \"\"\"\n-        mapping = self.get_map()\n-        if mapping is None:\n-            raise RuntimeError(\"Selector is closed\")\n-        try:\n-            return mapping[fileobj]\n-        except KeyError:\n-            raise KeyError(\"{0!r} is not registered\".format(fileobj))\n-\n-    def get_map(self):\n-        \"\"\" Return a mapping of file objects to selector keys \"\"\"\n-        return self._map\n-\n-    def _key_from_fd(self, fd):\n-        \"\"\" Return the key associated to a given file descriptor\n-         Return None if it is not found. \"\"\"\n-        try:\n-            return self._fd_to_key[fd]\n-        except KeyError:\n-            return None\n-\n-    def __enter__(self):\n-        return self\n-\n-    def __exit__(self, *args):\n-        self.close()\n-\n-\n-# Almost all platforms have select.select()\n-if hasattr(select, \"select\"):\n-    class SelectSelector(BaseSelector):\n-        \"\"\" Select-based selector. \"\"\"\n-        def __init__(self):\n-            super(SelectSelector, self).__init__()\n-            self._readers = set()\n-            self._writers = set()\n-\n-        def register(self, fileobj, events, data=None):\n-            key = super(SelectSelector, self).register(fileobj, events, data)\n-            if events & EVENT_READ:\n-                self._readers.add(key.fd)\n-            if events & EVENT_WRITE:\n-                self._writers.add(key.fd)\n-            return key\n-\n-        def unregister(self, fileobj):\n-            key = super(SelectSelector, self).unregister(fileobj)\n-            self._readers.discard(key.fd)\n-            self._writers.discard(key.fd)\n-            return key\n-\n-        def _select(self, r, w, timeout=None):\n-            \"\"\" Wrapper for select.select because timeout is a positional arg \"\"\"\n-            return select.select(r, w, [], timeout)\n-\n-        def select(self, timeout=None):\n-            # Selecting on empty lists on Windows errors out.\n-            if not len(self._readers) and not len(self._writers):\n-                return []\n-\n-            timeout = None if timeout is None else max(timeout, 0.0)\n-            ready = []\n-            r, w, _ = _syscall_wrapper(self._select, True, self._readers,\n-                                       self._writers, timeout)\n-            r = set(r)\n-            w = set(w)\n-            for fd in r | w:\n-                events = 0\n-                if fd in r:\n-                    events |= EVENT_READ\n-                if fd in w:\n-                    events |= EVENT_WRITE\n-\n-                key = self._key_from_fd(fd)\n-                if key:\n-                    ready.append((key, events & key.events))\n-            return ready\n-\n-\n-if hasattr(select, \"poll\"):\n-    class PollSelector(BaseSelector):\n-        \"\"\" Poll-based selector \"\"\"\n-        def __init__(self):\n-            super(PollSelector, self).__init__()\n-            self._poll = select.poll()\n-\n-        def register(self, fileobj, events, data=None):\n-            key = super(PollSelector, self).register(fileobj, events, data)\n-            event_mask = 0\n-            if events & EVENT_READ:\n-                event_mask |= select.POLLIN\n-            if events & EVENT_WRITE:\n-                event_mask |= select.POLLOUT\n-            self._poll.register(key.fd, event_mask)\n-            return key\n-\n-        def unregister(self, fileobj):\n-            key = super(PollSelector, self).unregister(fileobj)\n-            self._poll.unregister(key.fd)\n-            return key\n-\n-        def _wrap_poll(self, timeout=None):\n-            \"\"\" Wrapper function for select.poll.poll() so that\n-            _syscall_wrapper can work with only seconds. \"\"\"\n-            if timeout is not None:\n-                if timeout <= 0:\n-                    timeout = 0\n-                else:\n-                    # select.poll.poll() has a resolution of 1 millisecond,\n-                    # round away from zero to wait *at least* timeout seconds.\n-                    timeout = math.ceil(timeout * 1e3)\n-\n-            result = self._poll.poll(timeout)\n-            return result\n-\n-        def select(self, timeout=None):\n-            ready = []\n-            fd_events = _syscall_wrapper(self._wrap_poll, True, timeout=timeout)\n-            for fd, event_mask in fd_events:\n-                events = 0\n-                if event_mask & ~select.POLLIN:\n-                    events |= EVENT_WRITE\n-                if event_mask & ~select.POLLOUT:\n-                    events |= EVENT_READ\n-\n-                key = self._key_from_fd(fd)\n-                if key:\n-                    ready.append((key, events & key.events))\n-\n-            return ready\n-\n-\n-if hasattr(select, \"epoll\"):\n-    class EpollSelector(BaseSelector):\n-        \"\"\" Epoll-based selector \"\"\"\n-        def __init__(self):\n-            super(EpollSelector, self).__init__()\n-            self._epoll = select.epoll()\n-\n-        def fileno(self):\n-            return self._epoll.fileno()\n-\n-        def register(self, fileobj, events, data=None):\n-            key = super(EpollSelector, self).register(fileobj, events, data)\n-            events_mask = 0\n-            if events & EVENT_READ:\n-                events_mask |= select.EPOLLIN\n-            if events & EVENT_WRITE:\n-                events_mask |= select.EPOLLOUT\n-            _syscall_wrapper(self._epoll.register, False, key.fd, events_mask)\n-            return key\n-\n-        def unregister(self, fileobj):\n-            key = super(EpollSelector, self).unregister(fileobj)\n-            try:\n-                _syscall_wrapper(self._epoll.unregister, False, key.fd)\n-            except SelectorError:\n-                # This can occur when the fd was closed since registry.\n-                pass\n-            return key\n-\n-        def select(self, timeout=None):\n-            if timeout is not None:\n-                if timeout <= 0:\n-                    timeout = 0.0\n-                else:\n-                    # select.epoll.poll() has a resolution of 1 millisecond\n-                    # but luckily takes seconds so we don't need a wrapper\n-                    # like PollSelector. Just for better rounding.\n-                    timeout = math.ceil(timeout * 1e3) * 1e-3\n-                timeout = float(timeout)\n-            else:\n-                timeout = -1.0  # epoll.poll() must have a float.\n-\n-            # We always want at least 1 to ensure that select can be called\n-            # with no file descriptors registered. Otherwise will fail.\n-            max_events = max(len(self._fd_to_key), 1)\n-\n-            ready = []\n-            fd_events = _syscall_wrapper(self._epoll.poll, True,\n-                                         timeout=timeout,\n-                                         maxevents=max_events)\n-            for fd, event_mask in fd_events:\n-                events = 0\n-                if event_mask & ~select.EPOLLIN:\n-                    events |= EVENT_WRITE\n-                if event_mask & ~select.EPOLLOUT:\n-                    events |= EVENT_READ\n-\n-                key = self._key_from_fd(fd)\n-                if key:\n-                    ready.append((key, events & key.events))\n-            return ready\n-\n-        def close(self):\n-            self._epoll.close()\n-            super(EpollSelector, self).close()\n-\n-\n-if hasattr(select, \"kqueue\"):\n-    class KqueueSelector(BaseSelector):\n-        \"\"\" Kqueue / Kevent-based selector \"\"\"\n-        def __init__(self):\n-            super(KqueueSelector, self).__init__()\n-            self._kqueue = select.kqueue()\n-\n-        def fileno(self):\n-            return self._kqueue.fileno()\n-\n-        def register(self, fileobj, events, data=None):\n-            key = super(KqueueSelector, self).register(fileobj, events, data)\n-            if events & EVENT_READ:\n-                kevent = select.kevent(key.fd,\n-                                       select.KQ_FILTER_READ,\n-                                       select.KQ_EV_ADD)\n-\n-                _syscall_wrapper(self._kqueue.control, False, [kevent], 0, 0)\n-\n-            if events & EVENT_WRITE:\n-                kevent = select.kevent(key.fd,\n-                                       select.KQ_FILTER_WRITE,\n-                                       select.KQ_EV_ADD)\n-\n-                _syscall_wrapper(self._kqueue.control, False, [kevent], 0, 0)\n-\n-            return key\n-\n-        def unregister(self, fileobj):\n-            key = super(KqueueSelector, self).unregister(fileobj)\n-            if key.events & EVENT_READ:\n-                kevent = select.kevent(key.fd,\n-                                       select.KQ_FILTER_READ,\n-                                       select.KQ_EV_DELETE)\n-                try:\n-                    _syscall_wrapper(self._kqueue.control, False, [kevent], 0, 0)\n-                except SelectorError:\n-                    pass\n-            if key.events & EVENT_WRITE:\n-                kevent = select.kevent(key.fd,\n-                                       select.KQ_FILTER_WRITE,\n-                                       select.KQ_EV_DELETE)\n-                try:\n-                    _syscall_wrapper(self._kqueue.control, False, [kevent], 0, 0)\n-                except SelectorError:\n-                    pass\n-\n-            return key\n-\n-        def select(self, timeout=None):\n-            if timeout is not None:\n-                timeout = max(timeout, 0)\n-\n-            max_events = len(self._fd_to_key) * 2\n-            ready_fds = {}\n-\n-            kevent_list = _syscall_wrapper(self._kqueue.control, True,\n-                                           None, max_events, timeout)\n-\n-            for kevent in kevent_list:\n-                fd = kevent.ident\n-                event_mask = kevent.filter\n-                events = 0\n-                if event_mask == select.KQ_FILTER_READ:\n-                    events |= EVENT_READ\n-                if event_mask == select.KQ_FILTER_WRITE:\n-                    events |= EVENT_WRITE\n-\n-                key = self._key_from_fd(fd)\n-                if key:\n-                    if key.fd not in ready_fds:\n-                        ready_fds[key.fd] = (key, events & key.events)\n-                    else:\n-                        old_events = ready_fds[key.fd][1]\n-                        ready_fds[key.fd] = (key, (events | old_events) & key.events)\n-\n-            return list(ready_fds.values())\n-\n-        def close(self):\n-            self._kqueue.close()\n-            super(KqueueSelector, self).close()\n-\n-\n-if not hasattr(select, 'select'):  # Platform-specific: AppEngine\n-    HAS_SELECT = False\n-\n-\n-def _can_allocate(struct):\n-    \"\"\" Checks that select structs can be allocated by the underlying\n-    operating system, not just advertised by the select module. We don't\n-    check select() because we'll be hopeful that most platforms that\n-    don't have it available will not advertise it. (ie: GAE) \"\"\"\n-    try:\n-        # select.poll() objects won't fail until used.\n-        if struct == 'poll':\n-            p = select.poll()\n-            p.poll(0)\n-\n-        # All others will fail on allocation.\n-        else:\n-            getattr(select, struct)().close()\n-        return True\n-    except (OSError, AttributeError) as e:\n-        return False\n-\n-\n-# Choose the best implementation, roughly:\n-# kqueue == epoll > poll > select. Devpoll not supported. (See above)\n-# select() also can't accept a FD > FD_SETSIZE (usually around 1024)\n-def DefaultSelector():\n-    \"\"\" This function serves as a first call for DefaultSelector to\n-    detect if the select module is being monkey-patched incorrectly\n-    by eventlet, greenlet, and preserve proper behavior. \"\"\"\n-    global _DEFAULT_SELECTOR\n-    if _DEFAULT_SELECTOR is None:\n-        if _can_allocate('kqueue'):\n-            _DEFAULT_SELECTOR = KqueueSelector\n-        elif _can_allocate('epoll'):\n-            _DEFAULT_SELECTOR = EpollSelector\n-        elif _can_allocate('poll'):\n-            _DEFAULT_SELECTOR = PollSelector\n-        elif hasattr(select, 'select'):\n-            _DEFAULT_SELECTOR = SelectSelector\n-        else:  # Platform-specific: AppEngine\n-            raise ValueError('Platform does not have a selector')\n-    return _DEFAULT_SELECTOR()\n\n@@ -1,337 +0,0 @@\n-from __future__ import absolute_import\n-import errno\n-import warnings\n-import hmac\n-\n-from binascii import hexlify, unhexlify\n-from hashlib import md5, sha1, sha256\n-\n-from ..exceptions import SSLError, InsecurePlatformWarning, SNIMissingWarning\n-\n-\n-SSLContext = None\n-HAS_SNI = False\n-IS_PYOPENSSL = False\n-IS_SECURETRANSPORT = False\n-\n-# Maps the length of a digest to a possible hash function producing this digest\n-HASHFUNC_MAP = {\n-    32: md5,\n-    40: sha1,\n-    64: sha256,\n-}\n-\n-\n-def _const_compare_digest_backport(a, b):\n-    \"\"\"\n-    Compare two digests of equal length in constant time.\n-\n-    The digests must be of type str/bytes.\n-    Returns True if the digests match, and False otherwise.\n-    \"\"\"\n-    result = abs(len(a) - len(b))\n-    for l, r in zip(bytearray(a), bytearray(b)):\n-        result |= l ^ r\n-    return result == 0\n-\n-\n-_const_compare_digest = getattr(hmac, 'compare_digest',\n-                                _const_compare_digest_backport)\n-\n-\n-try:  # Test for SSL features\n-    import ssl\n-    from ssl import wrap_socket, CERT_NONE, PROTOCOL_SSLv23\n-    from ssl import HAS_SNI  # Has SNI?\n-except ImportError:\n-    pass\n-\n-\n-try:\n-    from ssl import OP_NO_SSLv2, OP_NO_SSLv3, OP_NO_COMPRESSION\n-except ImportError:\n-    OP_NO_SSLv2, OP_NO_SSLv3 = 0x1000000, 0x2000000\n-    OP_NO_COMPRESSION = 0x20000\n-\n-# A secure default.\n-# Sources for more information on TLS ciphers:\n-#\n-# - https://wiki.mozilla.org/Security/Server_Side_TLS\n-# - https://www.ssllabs.com/projects/best-practices/index.html\n-# - https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/\n-#\n-# The general intent is:\n-# - Prefer cipher suites that offer perfect forward secrecy (DHE/ECDHE),\n-# - prefer ECDHE over DHE for better performance,\n-# - prefer any AES-GCM and ChaCha20 over any AES-CBC for better performance and\n-#   security,\n-# - prefer AES-GCM over ChaCha20 because hardware-accelerated AES is common,\n-# - disable NULL authentication, MD5 MACs and DSS for security reasons.\n-DEFAULT_CIPHERS = ':'.join([\n-    'ECDH+AESGCM',\n-    'ECDH+CHACHA20',\n-    'DH+AESGCM',\n-    'DH+CHACHA20',\n-    'ECDH+AES256',\n-    'DH+AES256',\n-    'ECDH+AES128',\n-    'DH+AES',\n-    'RSA+AESGCM',\n-    'RSA+AES',\n-    '!aNULL',\n-    '!eNULL',\n-    '!MD5',\n-])\n-\n-try:\n-    from ssl import SSLContext  # Modern SSL?\n-except ImportError:\n-    import sys\n-\n-    class SSLContext(object):  # Platform-specific: Python 2 & 3.1\n-        supports_set_ciphers = ((2, 7) <= sys.version_info < (3,) or\n-                                (3, 2) <= sys.version_info)\n-\n-        def __init__(self, protocol_version):\n-            self.protocol = protocol_version\n-            # Use default values from a real SSLContext\n-            self.check_hostname = False\n-            self.verify_mode = ssl.CERT_NONE\n-            self.ca_certs = None\n-            self.options = 0\n-            self.certfile = None\n-            self.keyfile = None\n-            self.ciphers = None\n-\n-        def load_cert_chain(self, certfile, keyfile):\n-            self.certfile = certfile\n-            self.keyfile = keyfile\n-\n-        def load_verify_locations(self, cafile=None, capath=None):\n-            self.ca_certs = cafile\n-\n-            if capath is not None:\n-                raise SSLError(\"CA directories not supported in older Pythons\")\n-\n-        def set_ciphers(self, cipher_suite):\n-            if not self.supports_set_ciphers:\n-                raise TypeError(\n-                    'Your version of Python does not support setting '\n-                    'a custom cipher suite. Please upgrade to Python '\n-                    '2.7, 3.2, or later if you need this functionality.'\n-                )\n-            self.ciphers = cipher_suite\n-\n-        def wrap_socket(self, socket, server_hostname=None, server_side=False):\n-            warnings.warn(\n-                'A true SSLContext object is not available. This prevents '\n-                'urllib3 from configuring SSL appropriately and may cause '\n-                'certain SSL connections to fail. You can upgrade to a newer '\n-                'version of Python to solve this. For more information, see '\n-                'https://urllib3.readthedocs.io/en/latest/advanced-usage.html'\n-                '#ssl-warnings',\n-                InsecurePlatformWarning\n-            )\n-            kwargs = {\n-                'keyfile': self.keyfile,\n-                'certfile': self.certfile,\n-                'ca_certs': self.ca_certs,\n-                'cert_reqs': self.verify_mode,\n-                'ssl_version': self.protocol,\n-                'server_side': server_side,\n-            }\n-            if self.supports_set_ciphers:  # Platform-specific: Python 2.7+\n-                return wrap_socket(socket, ciphers=self.ciphers, **kwargs)\n-            else:  # Platform-specific: Python 2.6\n-                return wrap_socket(socket, **kwargs)\n-\n-\n-def assert_fingerprint(cert, fingerprint):\n-    \"\"\"\n-    Checks if given fingerprint matches the supplied certificate.\n-\n-    :param cert:\n-        Certificate as bytes object.\n-    :param fingerprint:\n-        Fingerprint as string of hexdigits, can be interspersed by colons.\n-    \"\"\"\n-\n-    fingerprint = fingerprint.replace(':', '').lower()\n-    digest_length = len(fingerprint)\n-    hashfunc = HASHFUNC_MAP.get(digest_length)\n-    if not hashfunc:\n-        raise SSLError(\n-            'Fingerprint of invalid length: {0}'.format(fingerprint))\n-\n-    # We need encode() here for py32; works on py2 and p33.\n-    fingerprint_bytes = unhexlify(fingerprint.encode())\n-\n-    cert_digest = hashfunc(cert).digest()\n-\n-    if not _const_compare_digest(cert_digest, fingerprint_bytes):\n-        raise SSLError('Fingerprints did not match. Expected \"{0}\", got \"{1}\".'\n-                       .format(fingerprint, hexlify(cert_digest)))\n-\n-\n-def resolve_cert_reqs(candidate):\n-    \"\"\"\n-    Resolves the argument to a numeric constant, which can be passed to\n-    the wrap_socket function/method from the ssl module.\n-    Defaults to :data:`ssl.CERT_NONE`.\n-    If given a string it is assumed to be the name of the constant in the\n-    :mod:`ssl` module or its abbrevation.\n-    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.\n-    If it's neither `None` nor a string we assume it is already the numeric\n-    constant which can directly be passed to wrap_socket.\n-    \"\"\"\n-    if candidate is None:\n-        return CERT_NONE\n-\n-    if isinstance(candidate, str):\n-        res = getattr(ssl, candidate, None)\n-        if res is None:\n-            res = getattr(ssl, 'CERT_' + candidate)\n-        return res\n-\n-    return candidate\n-\n-\n-def resolve_ssl_version(candidate):\n-    \"\"\"\n-    like resolve_cert_reqs\n-    \"\"\"\n-    if candidate is None:\n-        return PROTOCOL_SSLv23\n-\n-    if isinstance(candidate, str):\n-        res = getattr(ssl, candidate, None)\n-        if res is None:\n-            res = getattr(ssl, 'PROTOCOL_' + candidate)\n-        return res\n-\n-    return candidate\n-\n-\n-def create_urllib3_context(ssl_version=None, cert_reqs=None,\n-                           options=None, ciphers=None):\n-    \"\"\"All arguments have the same meaning as ``ssl_wrap_socket``.\n-\n-    By default, this function does a lot of the same work that\n-    ``ssl.create_default_context`` does on Python 3.4+. It:\n-\n-    - Disables SSLv2, SSLv3, and compression\n-    - Sets a restricted set of server ciphers\n-\n-    If you wish to enable SSLv3, you can do::\n-\n-        from urllib3.util import ssl_\n-        context = ssl_.create_urllib3_context()\n-        context.options &= ~ssl_.OP_NO_SSLv3\n-\n-    You can do the same to enable compression (substituting ``COMPRESSION``\n-    for ``SSLv3`` in the last line above).\n-\n-    :param ssl_version:\n-        The desired protocol version to use. This will default to\n-        PROTOCOL_SSLv23 which will negotiate the highest protocol that both\n-        the server and your installation of OpenSSL support.\n-    :param cert_reqs:\n-        Whether to require the certificate verification. This defaults to\n-        ``ssl.CERT_REQUIRED``.\n-    :param options:\n-        Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,\n-        ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``.\n-    :param ciphers:\n-        Which cipher suites to allow the server to select.\n-    :returns:\n-        Constructed SSLContext object with specified options\n-    :rtype: SSLContext\n-    \"\"\"\n-    context = SSLContext(ssl_version or ssl.PROTOCOL_SSLv23)\n-\n-    # Setting the default here, as we may have no ssl module on import\n-    cert_reqs = ssl.CERT_REQUIRED if cert_reqs is None else cert_reqs\n-\n-    if options is None:\n-        options = 0\n-        # SSLv2 is easily broken and is considered harmful and dangerous\n-        options |= OP_NO_SSLv2\n-        # SSLv3 has several problems and is now dangerous\n-        options |= OP_NO_SSLv3\n-        # Disable compression to prevent CRIME attacks for OpenSSL 1.0+\n-        # (issue #309)\n-        options |= OP_NO_COMPRESSION\n-\n-    context.options |= options\n-\n-    if getattr(context, 'supports_set_ciphers', True):  # Platform-specific: Python 2.6\n-        context.set_ciphers(ciphers or DEFAULT_CIPHERS)\n-\n-    context.verify_mode = cert_reqs\n-    if getattr(context, 'check_hostname', None) is not None:  # Platform-specific: Python 3.2\n-        # We do our own verification, including fingerprints and alternative\n-        # hostnames. So disable it here\n-        context.check_hostname = False\n-    return context\n-\n-\n-def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n-                    ca_certs=None, server_hostname=None,\n-                    ssl_version=None, ciphers=None, ssl_context=None,\n-                    ca_cert_dir=None):\n-    \"\"\"\n-    All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n-    the same meaning as they do when using :func:`ssl.wrap_socket`.\n-\n-    :param server_hostname:\n-        When SNI is supported, the expected hostname of the certificate\n-    :param ssl_context:\n-        A pre-made :class:`SSLContext` object. If none is provided, one will\n-        be created using :func:`create_urllib3_context`.\n-    :param ciphers:\n-        A string of ciphers we wish the client to support. This is not\n-        supported on Python 2.6 as the ssl module does not support it.\n-    :param ca_cert_dir:\n-        A directory containing CA certificates in multiple separate files, as\n-        supported by OpenSSL's -CApath flag or the capath argument to\n-        SSLContext.load_verify_locations().\n-    \"\"\"\n-    context = ssl_context\n-    if context is None:\n-        # Note: This branch of code and all the variables in it are no longer\n-        # used by urllib3 itself. We should consider deprecating and removing\n-        # this code.\n-        context = create_urllib3_context(ssl_version, cert_reqs,\n-                                         ciphers=ciphers)\n-\n-    if ca_certs or ca_cert_dir:\n-        try:\n-            context.load_verify_locations(ca_certs, ca_cert_dir)\n-        except IOError as e:  # Platform-specific: Python 2.6, 2.7, 3.2\n-            raise SSLError(e)\n-        # Py33 raises FileNotFoundError which subclasses OSError\n-        # These are not equivalent unless we check the errno attribute\n-        except OSError as e:  # Platform-specific: Python 3.3 and beyond\n-            if e.errno == errno.ENOENT:\n-                raise SSLError(e)\n-            raise\n-    elif getattr(context, 'load_default_certs', None) is not None:\n-        # try to load OS default certs; works well on Windows (require Python3.4+)\n-        context.load_default_certs()\n-\n-    if certfile:\n-        context.load_cert_chain(certfile, keyfile)\n-    if HAS_SNI:  # Platform-specific: OpenSSL with enabled SNI\n-        return context.wrap_socket(sock, server_hostname=server_hostname)\n-\n-    warnings.warn(\n-        'An HTTPS request has been made, but the SNI (Subject Name '\n-        'Indication) extension to TLS is not available on this platform. '\n-        'This may cause the server to present an incorrect TLS '\n-        'certificate, which can cause validation failures. You can upgrade to '\n-        'a newer version of Python to solve this. For more information, see '\n-        'https://urllib3.readthedocs.io/en/latest/advanced-usage.html'\n-        '#ssl-warnings',\n-        SNIMissingWarning\n-    )\n-    return context.wrap_socket(sock)\n\n@@ -1,242 +0,0 @@\n-from __future__ import absolute_import\n-# The default socket timeout, used by httplib to indicate that no timeout was\n-# specified by the user\n-from socket import _GLOBAL_DEFAULT_TIMEOUT\n-import time\n-\n-from ..exceptions import TimeoutStateError\n-\n-# A sentinel value to indicate that no timeout was specified by the user in\n-# urllib3\n-_Default = object()\n-\n-\n-# Use time.monotonic if available.\n-current_time = getattr(time, \"monotonic\", time.time)\n-\n-\n-class Timeout(object):\n-    \"\"\" Timeout configuration.\n-\n-    Timeouts can be defined as a default for a pool::\n-\n-        timeout = Timeout(connect=2.0, read=7.0)\n-        http = PoolManager(timeout=timeout)\n-        response = http.request('GET', 'http://example.com/')\n-\n-    Or per-request (which overrides the default for the pool)::\n-\n-        response = http.request('GET', 'http://example.com/', timeout=Timeout(10))\n-\n-    Timeouts can be disabled by setting all the parameters to ``None``::\n-\n-        no_timeout = Timeout(connect=None, read=None)\n-        response = http.request('GET', 'http://example.com/, timeout=no_timeout)\n-\n-\n-    :param total:\n-        This combines the connect and read timeouts into one; the read timeout\n-        will be set to the time leftover from the connect attempt. In the\n-        event that both a connect timeout and a total are specified, or a read\n-        timeout and a total are specified, the shorter timeout will be applied.\n-\n-        Defaults to None.\n-\n-    :type total: integer, float, or None\n-\n-    :param connect:\n-        The maximum amount of time to wait for a connection attempt to a server\n-        to succeed. Omitting the parameter will default the connect timeout to\n-        the system default, probably `the global default timeout in socket.py\n-        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n-        None will set an infinite timeout for connection attempts.\n-\n-    :type connect: integer, float, or None\n-\n-    :param read:\n-        The maximum amount of time to wait between consecutive\n-        read operations for a response from the server. Omitting\n-        the parameter will default the read timeout to the system\n-        default, probably `the global default timeout in socket.py\n-        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.\n-        None will set an infinite timeout.\n-\n-    :type read: integer, float, or None\n-\n-    .. note::\n-\n-        Many factors can affect the total amount of time for urllib3 to return\n-        an HTTP response.\n-\n-        For example, Python's DNS resolver does not obey the timeout specified\n-        on the socket. Other factors that can affect total request time include\n-        high CPU load, high swap, the program running at a low priority level,\n-        or other behaviors.\n-\n-        In addition, the read and total timeouts only measure the time between\n-        read operations on the socket connecting the client and the server,\n-        not the total amount of time for the request to return a complete\n-        response. For most requests, the timeout is raised because the server\n-        has not sent the first byte in the specified time. This is not always\n-        the case; if a server streams one byte every fifteen seconds, a timeout\n-        of 20 seconds will not trigger, even though the request will take\n-        several minutes to complete.\n-\n-        If your goal is to cut off any request after a set amount of wall clock\n-        time, consider having a second \"watcher\" thread to cut off a slow\n-        request.\n-    \"\"\"\n-\n-    #: A sentinel object representing the default timeout value\n-    DEFAULT_TIMEOUT = _GLOBAL_DEFAULT_TIMEOUT\n-\n-    def __init__(self, total=None, connect=_Default, read=_Default):\n-        self._connect = self._validate_timeout(connect, 'connect')\n-        self._read = self._validate_timeout(read, 'read')\n-        self.total = self._validate_timeout(total, 'total')\n-        self._start_connect = None\n-\n-    def __str__(self):\n-        return '%s(connect=%r, read=%r, total=%r)' % (\n-            type(self).__name__, self._connect, self._read, self.total)\n-\n-    @classmethod\n-    def _validate_timeout(cls, value, name):\n-        \"\"\" Check that a timeout attribute is valid.\n-\n-        :param value: The timeout value to validate\n-        :param name: The name of the timeout attribute to validate. This is\n-            used to specify in error messages.\n-        :return: The validated and casted version of the given value.\n-        :raises ValueError: If it is a numeric value less than or equal to\n-            zero, or the type is not an integer, float, or None.\n-        \"\"\"\n-        if value is _Default:\n-            return cls.DEFAULT_TIMEOUT\n-\n-        if value is None or value is cls.DEFAULT_TIMEOUT:\n-            return value\n-\n-        if isinstance(value, bool):\n-            raise ValueError(\"Timeout cannot be a boolean value. It must \"\n-                             \"be an int, float or None.\")\n-        try:\n-            float(value)\n-        except (TypeError, ValueError):\n-            raise ValueError(\"Timeout value %s was %s, but it must be an \"\n-                             \"int, float or None.\" % (name, value))\n-\n-        try:\n-            if value <= 0:\n-                raise ValueError(\"Attempted to set %s timeout to %s, but the \"\n-                                 \"timeout cannot be set to a value less \"\n-                                 \"than or equal to 0.\" % (name, value))\n-        except TypeError:  # Python 3\n-            raise ValueError(\"Timeout value %s was %s, but it must be an \"\n-                             \"int, float or None.\" % (name, value))\n-\n-        return value\n-\n-    @classmethod\n-    def from_float(cls, timeout):\n-        \"\"\" Create a new Timeout from a legacy timeout value.\n-\n-        The timeout value used by httplib.py sets the same timeout on the\n-        connect(), and recv() socket requests. This creates a :class:`Timeout`\n-        object that sets the individual timeouts to the ``timeout`` value\n-        passed to this function.\n-\n-        :param timeout: The legacy timeout value.\n-        :type timeout: integer, float, sentinel default object, or None\n-        :return: Timeout object\n-        :rtype: :class:`Timeout`\n-        \"\"\"\n-        return Timeout(read=timeout, connect=timeout)\n-\n-    def clone(self):\n-        \"\"\" Create a copy of the timeout object\n-\n-        Timeout properties are stored per-pool but each request needs a fresh\n-        Timeout object to ensure each one has its own start/stop configured.\n-\n-        :return: a copy of the timeout object\n-        :rtype: :class:`Timeout`\n-        \"\"\"\n-        # We can't use copy.deepcopy because that will also create a new object\n-        # for _GLOBAL_DEFAULT_TIMEOUT, which socket.py uses as a sentinel to\n-        # detect the user default.\n-        return Timeout(connect=self._connect, read=self._read,\n-                       total=self.total)\n-\n-    def start_connect(self):\n-        \"\"\" Start the timeout clock, used during a connect() attempt\n-\n-        :raises urllib3.exceptions.TimeoutStateError: if you attempt\n-            to start a timer that has been started already.\n-        \"\"\"\n-        if self._start_connect is not None:\n-            raise TimeoutStateError(\"Timeout timer has already been started.\")\n-        self._start_connect = current_time()\n-        return self._start_connect\n-\n-    def get_connect_duration(self):\n-        \"\"\" Gets the time elapsed since the call to :meth:`start_connect`.\n-\n-        :return: Elapsed time.\n-        :rtype: float\n-        :raises urllib3.exceptions.TimeoutStateError: if you attempt\n-            to get duration for a timer that hasn't been started.\n-        \"\"\"\n-        if self._start_connect is None:\n-            raise TimeoutStateError(\"Can't get connect duration for timer \"\n-                                    \"that has not started.\")\n-        return current_time() - self._start_connect\n-\n-    @property\n-    def connect_timeout(self):\n-        \"\"\" Get the value to use when setting a connection timeout.\n-\n-        This will be a positive float or integer, the value None\n-        (never timeout), or the default system timeout.\n-\n-        :return: Connect timeout.\n-        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n-        \"\"\"\n-        if self.total is None:\n-            return self._connect\n-\n-        if self._connect is None or self._connect is self.DEFAULT_TIMEOUT:\n-            return self.total\n-\n-        return min(self._connect, self.total)\n-\n-    @property\n-    def read_timeout(self):\n-        \"\"\" Get the value for the read timeout.\n-\n-        This assumes some time has elapsed in the connection timeout and\n-        computes the read timeout appropriately.\n-\n-        If self.total is set, the read timeout is dependent on the amount of\n-        time taken by the connect timeout. If the connection time has not been\n-        established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be\n-        raised.\n-\n-        :return: Value to use for the read timeout.\n-        :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None\n-        :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`\n-            has not yet been called on this object.\n-        \"\"\"\n-        if (self.total is not None and\n-                self.total is not self.DEFAULT_TIMEOUT and\n-                self._read is not None and\n-                self._read is not self.DEFAULT_TIMEOUT):\n-            # In case the connect timeout has not yet been established.\n-            if self._start_connect is None:\n-                return self._read\n-            return max(0, min(self.total - self.get_connect_duration(),\n-                              self._read))\n-        elif self.total is not None and self.total is not self.DEFAULT_TIMEOUT:\n-            return max(0, self.total - self.get_connect_duration())\n-        else:\n-            return self._read\n\n@@ -1,230 +0,0 @@\n-from __future__ import absolute_import\n-from collections import namedtuple\n-\n-from ..exceptions import LocationParseError\n-\n-\n-url_attrs = ['scheme', 'auth', 'host', 'port', 'path', 'query', 'fragment']\n-\n-# We only want to normalize urls with an HTTP(S) scheme.\n-# urllib3 infers URLs without a scheme (None) to be http.\n-NORMALIZABLE_SCHEMES = ('http', 'https', None)\n-\n-\n-class Url(namedtuple('Url', url_attrs)):\n-    \"\"\"\n-    Datastructure for representing an HTTP URL. Used as a return value for\n-    :func:`parse_url`. Both the scheme and host are normalized as they are\n-    both case-insensitive according to RFC 3986.\n-    \"\"\"\n-    __slots__ = ()\n-\n-    def __new__(cls, scheme=None, auth=None, host=None, port=None, path=None,\n-                query=None, fragment=None):\n-        if path and not path.startswith('/'):\n-            path = '/' + path\n-        if scheme:\n-            scheme = scheme.lower()\n-        if host and scheme in NORMALIZABLE_SCHEMES:\n-            host = host.lower()\n-        return super(Url, cls).__new__(cls, scheme, auth, host, port, path,\n-                                       query, fragment)\n-\n-    @property\n-    def hostname(self):\n-        \"\"\"For backwards-compatibility with urlparse. We're nice like that.\"\"\"\n-        return self.host\n-\n-    @property\n-    def request_uri(self):\n-        \"\"\"Absolute path including the query string.\"\"\"\n-        uri = self.path or '/'\n-\n-        if self.query is not None:\n-            uri += '?' + self.query\n-\n-        return uri\n-\n-    @property\n-    def netloc(self):\n-        \"\"\"Network location including host and port\"\"\"\n-        if self.port:\n-            return '%s:%d' % (self.host, self.port)\n-        return self.host\n-\n-    @property\n-    def url(self):\n-        \"\"\"\n-        Convert self into a url\n-\n-        This function should more or less round-trip with :func:`.parse_url`. The\n-        returned url may not be exactly the same as the url inputted to\n-        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls\n-        with a blank port will have : removed).\n-\n-        Example: ::\n-\n-            >>> U = parse_url('http://google.com/mail/')\n-            >>> U.url\n-            'http://google.com/mail/'\n-            >>> Url('http', 'username:password', 'host.com', 80,\n-            ... '/path', 'query', 'fragment').url\n-            'http://username:password@host.com:80/path?query#fragment'\n-        \"\"\"\n-        scheme, auth, host, port, path, query, fragment = self\n-        url = ''\n-\n-        # We use \"is not None\" we want things to happen with empty strings (or 0 port)\n-        if scheme is not None:\n-            url += scheme + '://'\n-        if auth is not None:\n-            url += auth + '@'\n-        if host is not None:\n-            url += host\n-        if port is not None:\n-            url += ':' + str(port)\n-        if path is not None:\n-            url += path\n-        if query is not None:\n-            url += '?' + query\n-        if fragment is not None:\n-            url += '#' + fragment\n-\n-        return url\n-\n-    def __str__(self):\n-        return self.url\n-\n-\n-def split_first(s, delims):\n-    \"\"\"\n-    Given a string and an iterable of delimiters, split on the first found\n-    delimiter. Return two split parts and the matched delimiter.\n-\n-    If not found, then the first part is the full input string.\n-\n-    Example::\n-\n-        >>> split_first('foo/bar?baz', '?/=')\n-        ('foo', 'bar?baz', '/')\n-        >>> split_first('foo/bar?baz', '123')\n-        ('foo/bar?baz', '', None)\n-\n-    Scales linearly with number of delims. Not ideal for large number of delims.\n-    \"\"\"\n-    min_idx = None\n-    min_delim = None\n-    for d in delims:\n-        idx = s.find(d)\n-        if idx < 0:\n-            continue\n-\n-        if min_idx is None or idx < min_idx:\n-            min_idx = idx\n-            min_delim = d\n-\n-    if min_idx is None or min_idx < 0:\n-        return s, '', None\n-\n-    return s[:min_idx], s[min_idx + 1:], min_delim\n-\n-\n-def parse_url(url):\n-    \"\"\"\n-    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n-    performed to parse incomplete urls. Fields not provided will be None.\n-\n-    Partly backwards-compatible with :mod:`urlparse`.\n-\n-    Example::\n-\n-        >>> parse_url('http://google.com/mail/')\n-        Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n-        >>> parse_url('google.com:80')\n-        Url(scheme=None, host='google.com', port=80, path=None, ...)\n-        >>> parse_url('/foo?bar')\n-        Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n-    \"\"\"\n-\n-    # While this code has overlap with stdlib's urlparse, it is much\n-    # simplified for our needs and less annoying.\n-    # Additionally, this implementations does silly things to be optimal\n-    # on CPython.\n-\n-    if not url:\n-        # Empty\n-        return Url()\n-\n-    scheme = None\n-    auth = None\n-    host = None\n-    port = None\n-    path = None\n-    fragment = None\n-    query = None\n-\n-    # Scheme\n-    if '://' in url:\n-        scheme, url = url.split('://', 1)\n-\n-    # Find the earliest Authority Terminator\n-    # (http://tools.ietf.org/html/rfc3986#section-3.2)\n-    url, path_, delim = split_first(url, ['/', '?', '#'])\n-\n-    if delim:\n-        # Reassemble the path\n-        path = delim + path_\n-\n-    # Auth\n-    if '@' in url:\n-        # Last '@' denotes end of auth part\n-        auth, url = url.rsplit('@', 1)\n-\n-    # IPv6\n-    if url and url[0] == '[':\n-        host, url = url.split(']', 1)\n-        host += ']'\n-\n-    # Port\n-    if ':' in url:\n-        _host, port = url.split(':', 1)\n-\n-        if not host:\n-            host = _host\n-\n-        if port:\n-            # If given, ports must be integers. No whitespace, no plus or\n-            # minus prefixes, no non-integer digits such as ^2 (superscript).\n-            if not port.isdigit():\n-                raise LocationParseError(url)\n-            try:\n-                port = int(port)\n-            except ValueError:\n-                raise LocationParseError(url)\n-        else:\n-            # Blank ports are cool, too. (rfc3986#section-3.2.3)\n-            port = None\n-\n-    elif not host and url:\n-        host = url\n-\n-    if not path:\n-        return Url(scheme, auth, host, port, path, query, fragment)\n-\n-    # Fragment\n-    if '#' in path:\n-        path, fragment = path.split('#', 1)\n-\n-    # Query\n-    if '?' in path:\n-        path, query = path.split('?', 1)\n-\n-    return Url(scheme, auth, host, port, path, query, fragment)\n-\n-\n-def get_host(url):\n-    \"\"\"\n-    Deprecated. Use :func:`parse_url` instead.\n-    \"\"\"\n-    p = parse_url(url)\n-    return p.scheme or 'http', p.hostname, p.port\n\n@@ -1,40 +0,0 @@\n-from .selectors import (\n-    HAS_SELECT,\n-    DefaultSelector,\n-    EVENT_READ,\n-    EVENT_WRITE\n-)\n-\n-\n-def _wait_for_io_events(socks, events, timeout=None):\n-    \"\"\" Waits for IO events to be available from a list of sockets\n-    or optionally a single socket if passed in. Returns a list of\n-    sockets that can be interacted with immediately. \"\"\"\n-    if not HAS_SELECT:\n-        raise ValueError('Platform does not have a selector')\n-    if not isinstance(socks, list):\n-        # Probably just a single socket.\n-        if hasattr(socks, \"fileno\"):\n-            socks = [socks]\n-        # Otherwise it might be a non-list iterable.\n-        else:\n-            socks = list(socks)\n-    with DefaultSelector() as selector:\n-        for sock in socks:\n-            selector.register(sock, events)\n-        return [key[0].fileobj for key in\n-                selector.select(timeout) if key[1] & events]\n-\n-\n-def wait_for_read(socks, timeout=None):\n-    \"\"\" Waits for reading to be available from a list of sockets\n-    or optionally a single socket if passed in. Returns a list of\n-    sockets that can be read from immediately. \"\"\"\n-    return _wait_for_io_events(socks, EVENT_READ, timeout)\n-\n-\n-def wait_for_write(socks, timeout=None):\n-    \"\"\" Waits for writing to be available from a list of sockets\n-    or optionally a single socket if passed in. Returns a list of\n-    sockets that can be written to immediately. \"\"\"\n-    return _wait_for_io_events(socks, EVENT_WRITE, timeout)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
