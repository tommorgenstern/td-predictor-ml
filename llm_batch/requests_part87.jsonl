{"custom_id": "requests#086e19d8e175cccb630ee3589affdd2f38075ecd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 9396 | Contributors (this commit): 151 | Commits (past 90d): 4 | Contributors (cumulative): 151 | DMM Complexity: 0.0\n\nDIFF:\n@@ -616,11 +616,8 @@ class Response(object):\n \n     @property\n     def ok(self):\n-        try:\n-            self.raise_for_status()\n-        except HTTPError:\n-            return False\n-        return True\n+        \"\"\"True if the status code does *not* indicate an error, i.e. status code < 400.\"\"\"\n+        return self.status_code < 400\n \n     @property\n     def is_redirect(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a89d5c003a8708e9555968f810311f3e019281c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 9403 | Contributors (this commit): 151 | Commits (past 90d): 5 | Contributors (cumulative): 151 | DMM Complexity: 1.0\n\nDIFF:\n@@ -616,8 +616,11 @@ class Response(object):\n \n     @property\n     def ok(self):\n-        \"\"\"True if the status code does *not* indicate an error, i.e. status code < 400.\"\"\"\n-        return self.status_code < 400\n+        try:\n+            self.raise_for_status()\n+        except HTTPError:\n+            return False\n+        return True\n \n     @property\n     def is_redirect(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2a635ba87d7c7c3ef75e7f2013a2cd1a207a0e1a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 28 | Churn Cumulative: 2290 | Contributors (this commit): 57 | Commits (past 90d): 5 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -552,33 +552,7 @@ def select_proxy(url, proxies):\n \n def default_user_agent(name=\"python-requests\"):\n     \"\"\"Return a string representing the default user agent.\"\"\"\n-    _implementation = platform.python_implementation()\n-\n-    if _implementation == 'CPython':\n-        _implementation_version = platform.python_version()\n-    elif _implementation == 'PyPy':\n-        _implementation_version = '%s.%s.%s' % (sys.pypy_version_info.major,\n-                                                sys.pypy_version_info.minor,\n-                                                sys.pypy_version_info.micro)\n-        if sys.pypy_version_info.releaselevel != 'final':\n-            _implementation_version = ''.join([_implementation_version, sys.pypy_version_info.releaselevel])\n-    elif _implementation == 'Jython':\n-        _implementation_version = platform.python_version()  # Complete Guess\n-    elif _implementation == 'IronPython':\n-        _implementation_version = platform.python_version()  # Complete Guess\n-    else:\n-        _implementation_version = 'Unknown'\n-\n-    try:\n-        p_system = platform.system()\n-        p_release = platform.release()\n-    except IOError:\n-        p_system = 'Unknown'\n-        p_release = 'Unknown'\n-\n-    return \" \".join(['%s/%s' % (name, __version__),\n-                     '%s/%s' % (_implementation, _implementation_version),\n-                     '%s/%s' % (p_system, p_release)])\n+    return '%s/%s' % (name, __version__)\n \n \n def default_headers():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#09bd3232dd1572f1b6c435fdcca4275687fcb937", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 59 | Files Changed: 10 | Hunks: 52 | Methods Changed: 28 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 137 | Churn Cumulative: 7937 | Contributors (this commit): 21 | Commits (past 90d): 19 | Contributors (cumulative): 81 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -4,7 +4,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = 'dev'\n+__version__ = '1.12'\n \n \n from .connectionpool import (\n\n@@ -97,14 +97,7 @@ class RecentlyUsedContainer(MutableMapping):\n             return list(iterkeys(self._container))\n \n \n-_dict_setitem = dict.__setitem__\n-_dict_getitem = dict.__getitem__\n-_dict_delitem = dict.__delitem__\n-_dict_contains = dict.__contains__\n-_dict_setdefault = dict.setdefault\n-\n-\n-class HTTPHeaderDict(dict):\n+class HTTPHeaderDict(MutableMapping):\n     \"\"\"\n     :param headers:\n         An iterable of field-value pairs. Must not contain multiple field names\n@@ -139,7 +132,8 @@ class HTTPHeaderDict(dict):\n     \"\"\"\n \n     def __init__(self, headers=None, **kwargs):\n-        dict.__init__(self)\n+        super(HTTPHeaderDict, self).__init__()\n+        self._container = {}\n         if headers is not None:\n             if isinstance(headers, HTTPHeaderDict):\n                 self._copy_from(headers)\n@@ -149,38 +143,44 @@ class HTTPHeaderDict(dict):\n             self.extend(kwargs)\n \n     def __setitem__(self, key, val):\n-        return _dict_setitem(self, key.lower(), (key, val))\n+        self._container[key.lower()] = (key, val)\n+        return self._container[key.lower()]\n \n     def __getitem__(self, key):\n-        val = _dict_getitem(self, key.lower())\n+        val = self._container[key.lower()]\n         return ', '.join(val[1:])\n \n     def __delitem__(self, key):\n-        return _dict_delitem(self, key.lower())\n+        del self._container[key.lower()]\n \n     def __contains__(self, key):\n-        return _dict_contains(self, key.lower())\n+        return key.lower() in self._container\n \n     def __eq__(self, other):\n         if not isinstance(other, Mapping) and not hasattr(other, 'keys'):\n             return False\n         if not isinstance(other, type(self)):\n             other = type(self)(other)\n-        return dict((k1, self[k1]) for k1 in self) == dict((k2, other[k2]) for k2 in other)\n+        return (dict((k.lower(), v) for k, v in self.itermerged()) ==\n+                dict((k.lower(), v) for k, v in other.itermerged()))\n \n     def __ne__(self, other):\n         return not self.__eq__(other)\n \n-    values = MutableMapping.values\n-    get = MutableMapping.get\n-    update = MutableMapping.update\n-    \n     if not PY3: # Python 2\n         iterkeys = MutableMapping.iterkeys\n         itervalues = MutableMapping.itervalues\n \n     __marker = object()\n \n+    def __len__(self):\n+        return len(self._container)\n+\n+    def __iter__(self):\n+        # Only provide the originally cased names\n+        for vals in self._container.values():\n+            yield vals[0]\n+\n     def pop(self, key, default=__marker):\n         '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n           If key is not found, d is returned if given, otherwise KeyError is raised.\n@@ -216,7 +216,7 @@ class HTTPHeaderDict(dict):\n         key_lower = key.lower()\n         new_vals = key, val\n         # Keep the common case aka no item present as fast as possible\n-        vals = _dict_setdefault(self, key_lower, new_vals)\n+        vals = self._container.setdefault(key_lower, new_vals)\n         if new_vals is not vals:\n             # new_vals was not inserted, as there was a previous one\n             if isinstance(vals, list):\n@@ -225,7 +225,7 @@ class HTTPHeaderDict(dict):\n             else:\n                 # vals should be a tuple then, i.e. only one item so far\n                 # Need to convert the tuple to list for further extension\n-                _dict_setitem(self, key_lower, [vals[0], vals[1], val])\n+                self._container[key_lower] = [vals[0], vals[1], val]\n \n     def extend(self, *args, **kwargs):\n         \"\"\"Generic import function for any type of header-like object.\n@@ -257,7 +257,7 @@ class HTTPHeaderDict(dict):\n         \"\"\"Returns a list of all the values for the named field. Returns an\n         empty list if the key doesn't exist.\"\"\"\n         try:\n-            vals = _dict_getitem(self, key.lower())\n+            vals = self._container[key.lower()]\n         except KeyError:\n             return []\n         else:\n@@ -276,11 +276,11 @@ class HTTPHeaderDict(dict):\n \n     def _copy_from(self, other):\n         for key in other:\n-            val = _dict_getitem(other, key)\n+            val = other.getlist(key)\n             if isinstance(val, list):\n                 # Don't need to convert tuples\n                 val = list(val)\n-            _dict_setitem(self, key, val)\n+            self._container[key.lower()] = [key] + val\n \n     def copy(self):\n         clone = type(self)()\n@@ -290,14 +290,14 @@ class HTTPHeaderDict(dict):\n     def iteritems(self):\n         \"\"\"Iterate over all header lines, including duplicate ones.\"\"\"\n         for key in self:\n-            vals = _dict_getitem(self, key)\n+            vals = self._container[key.lower()]\n             for val in vals[1:]:\n                 yield vals[0], val\n \n     def itermerged(self):\n         \"\"\"Iterate over all headers, merging duplicate ones together.\"\"\"\n         for key in self:\n-            val = _dict_getitem(self, key)\n+            val = self._container[key.lower()]\n             yield val[0], ', '.join(val[1:])\n \n     def items(self):\n\n@@ -1,7 +1,7 @@\n import datetime\n import sys\n import socket\n-from socket import timeout as SocketTimeout\n+from socket import error as SocketError, timeout as SocketTimeout\n import warnings\n from .packages import six\n \n@@ -36,9 +36,10 @@ except NameError:  # Python 2:\n \n \n from .exceptions import (\n+    NewConnectionError,\n     ConnectTimeoutError,\n-    SystemTimeWarning,\n     SubjectAltNameWarning,\n+    SystemTimeWarning,\n )\n from .packages.ssl_match_hostname import match_hostname\n \n@@ -133,11 +134,15 @@ class HTTPConnection(_HTTPConnection, object):\n             conn = connection.create_connection(\n                 (self.host, self.port), self.timeout, **extra_kw)\n \n-        except SocketTimeout:\n+        except SocketTimeout as e:\n             raise ConnectTimeoutError(\n                 self, \"Connection to %s timed out. (connect timeout=%s)\" %\n                 (self.host, self.timeout))\n \n+        except SocketError as e:\n+            raise NewConnectionError(\n+                self, \"Failed to establish a new connection: %s\" % e)\n+\n         return conn\n \n     def _prepare_conn(self, conn):\n@@ -185,20 +190,23 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n     \"\"\"\n     cert_reqs = None\n     ca_certs = None\n+    ca_cert_dir = None\n     ssl_version = None\n     assert_fingerprint = None\n \n     def set_cert(self, key_file=None, cert_file=None,\n                  cert_reqs=None, ca_certs=None,\n-                 assert_hostname=None, assert_fingerprint=None):\n+                 assert_hostname=None, assert_fingerprint=None,\n+                 ca_cert_dir=None):\n \n-        if ca_certs and cert_reqs is None:\n+        if (ca_certs or ca_cert_dir) and cert_reqs is None:\n             cert_reqs = 'CERT_REQUIRED'\n \n         self.key_file = key_file\n         self.cert_file = cert_file\n         self.cert_reqs = cert_reqs\n         self.ca_certs = ca_certs\n+        self.ca_cert_dir = ca_cert_dir\n         self.assert_hostname = assert_hostname\n         self.assert_fingerprint = assert_fingerprint\n \n@@ -237,6 +245,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n         self.sock = ssl_wrap_socket(conn, self.key_file, self.cert_file,\n                                     cert_reqs=resolved_cert_reqs,\n                                     ca_certs=self.ca_certs,\n+                                    ca_cert_dir=self.ca_cert_dir,\n                                     server_hostname=hostname,\n                                     ssl_version=resolved_ssl_version)\n \n\n@@ -22,10 +22,12 @@ from .exceptions import (\n     LocationValueError,\n     MaxRetryError,\n     ProxyError,\n+    ConnectTimeoutError,\n     ReadTimeoutError,\n     SSLError,\n     TimeoutError,\n     InsecureRequestWarning,\n+    NewConnectionError,\n )\n from .packages.ssl_match_hostname import CertificateError\n from .packages import six\n@@ -592,13 +594,13 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             release_conn = True\n             raise\n \n-        except (TimeoutError, HTTPException, SocketError, ConnectionError) as e:\n+        except (TimeoutError, HTTPException, SocketError, ProtocolError) as e:\n             # Discard the connection for these exceptions. It will be\n             # be replaced during the next _get_conn() call.\n             conn = conn and conn.close()\n             release_conn = True\n \n-            if isinstance(e, SocketError) and self.proxy:\n+            if isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                 e = ProxyError('Cannot connect to proxy.', e)\n             elif isinstance(e, (SocketError, HTTPException)):\n                 e = ProtocolError('Connection aborted.', e)\n@@ -675,10 +677,10 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n     ``assert_hostname`` and ``host`` in this order to verify connections.\n     If ``assert_hostname`` is False, no verification is done.\n \n-    The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs`` and\n-    ``ssl_version`` are only used if :mod:`ssl` is available and are fed into\n-    :meth:`urllib3.util.ssl_wrap_socket` to upgrade the connection socket\n-    into an SSL socket.\n+    The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,\n+    ``ca_cert_dir``, and ``ssl_version`` are only used if :mod:`ssl` is\n+    available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade\n+    the connection socket into an SSL socket.\n     \"\"\"\n \n     scheme = 'https'\n@@ -691,7 +693,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n                  key_file=None, cert_file=None, cert_reqs=None,\n                  ca_certs=None, ssl_version=None,\n                  assert_hostname=None, assert_fingerprint=None,\n-                 **conn_kw):\n+                 ca_cert_dir=None, **conn_kw):\n \n         HTTPConnectionPool.__init__(self, host, port, strict, timeout, maxsize,\n                                     block, headers, retries, _proxy, _proxy_headers,\n@@ -704,6 +706,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         self.cert_file = cert_file\n         self.cert_reqs = cert_reqs\n         self.ca_certs = ca_certs\n+        self.ca_cert_dir = ca_cert_dir\n         self.ssl_version = ssl_version\n         self.assert_hostname = assert_hostname\n         self.assert_fingerprint = assert_fingerprint\n@@ -719,6 +722,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n                           cert_file=self.cert_file,\n                           cert_reqs=self.cert_reqs,\n                           ca_certs=self.ca_certs,\n+                          ca_cert_dir=self.ca_cert_dir,\n                           assert_hostname=self.assert_hostname,\n                           assert_fingerprint=self.assert_fingerprint)\n             conn.ssl_version = self.ssl_version\n\n@@ -267,7 +267,7 @@ def _verify_callback(cnx, x509, err_no, err_depth, return_code):\n \n def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                     ca_certs=None, server_hostname=None,\n-                    ssl_version=None):\n+                    ssl_version=None, ca_cert_dir=None):\n     ctx = OpenSSL.SSL.Context(_openssl_versions[ssl_version])\n     if certfile:\n         keyfile = keyfile or certfile  # Match behaviour of the normal python ssl library\n@@ -276,9 +276,9 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n         ctx.use_privatekey_file(keyfile)\n     if cert_reqs != ssl.CERT_NONE:\n         ctx.set_verify(_openssl_verify[cert_reqs], _verify_callback)\n-    if ca_certs:\n+    if ca_certs or ca_cert_dir:\n         try:\n-            ctx.load_verify_locations(ca_certs, None)\n+            ctx.load_verify_locations(ca_certs, ca_cert_dir)\n         except OpenSSL.SSL.Error as e:\n             raise ssl.SSLError('bad ca_certs: %r' % ca_certs, e)\n     else:\n\n@@ -112,6 +112,9 @@ class ConnectTimeoutError(TimeoutError):\n     \"Raised when a socket timeout occurs while connecting to a server\"\n     pass\n \n+class NewConnectionError(ConnectTimeoutError, PoolError):\n+    \"Raised when we fail to establish a new connection. Usually ECONNREFUSED.\"\n+    pass\n \n class EmptyPoolError(PoolError):\n     \"Raised when a pool runs out of connections and no more are allowed.\"\n\n@@ -1,7 +1,3 @@\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n from contextlib import contextmanager\n import zlib\n import io\n@@ -12,6 +8,7 @@ from .exceptions import (\n     ProtocolError, DecodeError, ReadTimeoutError, ResponseNotChunked\n )\n from .packages.six import string_types as basestring, binary_type, PY3\n+from .packages.six.moves import http_client as httplib\n from .connection import HTTPException, BaseSSLError\n from .util.response import is_fp_closed, is_response_to_head\n \n\n@@ -80,15 +80,15 @@ def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n             sock.connect(sa)\n             return sock\n \n-        except socket.error as _:\n-            err = _\n+        except socket.error as e:\n+            err = e\n             if sock is not None:\n                 sock.close()\n                 sock = None\n \n     if err is not None:\n         raise err\n-    else:\n+\n     raise socket.error(\"getaddrinfo returns an empty list\")\n \n \n\n@@ -1,7 +1,4 @@\n-try:\n-    import http.client as httplib\n-except ImportError:\n-    import httplib\n+from ..packages.six.moves import http_client as httplib\n \n from ..exceptions import HeaderParsingError\n \n\n@@ -75,8 +75,11 @@ except ImportError:\n             self.certfile = certfile\n             self.keyfile = keyfile\n \n-        def load_verify_locations(self, location):\n-            self.ca_certs = location\n+        def load_verify_locations(self, cafile=None, capath=None):\n+            self.ca_certs = cafile\n+\n+            if capath is not None:\n+                raise SSLError(\"CA directories not supported in older Pythons\")\n \n         def set_ciphers(self, cipher_suite):\n             if not self.supports_set_ciphers:\n@@ -240,10 +243,11 @@ def create_urllib3_context(ssl_version=None, cert_reqs=None,\n \n def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                     ca_certs=None, server_hostname=None,\n-                    ssl_version=None, ciphers=None, ssl_context=None):\n+                    ssl_version=None, ciphers=None, ssl_context=None,\n+                    ca_cert_dir=None):\n     \"\"\"\n-    All arguments except for server_hostname and ssl_context have the same\n-    meaning as they do when using :func:`ssl.wrap_socket`.\n+    All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n+    the same meaning as they do when using :func:`ssl.wrap_socket`.\n \n     :param server_hostname:\n         When SNI is supported, the expected hostname of the certificate\n@@ -253,15 +257,19 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n     :param ciphers:\n         A string of ciphers we wish the client to support. This is not\n         supported on Python 2.6 as the ssl module does not support it.\n+    :param ca_cert_dir:\n+        A directory containing CA certificates in multiple separate files, as\n+        supported by OpenSSL's -CApath flag or the capath argument to\n+        SSLContext.load_verify_locations().\n     \"\"\"\n     context = ssl_context\n     if context is None:\n         context = create_urllib3_context(ssl_version, cert_reqs,\n                                          ciphers=ciphers)\n \n-    if ca_certs:\n+    if ca_certs or ca_cert_dir:\n         try:\n-            context.load_verify_locations(ca_certs)\n+            context.load_verify_locations(ca_certs, ca_cert_dir)\n         except IOError as e:  # Platform-specific: Python 2.6, 2.7, 3.2\n             raise SSLError(e)\n         # Py33 raises FileNotFoundError which subclasses OSError\n@@ -270,6 +278,7 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n             if e.errno == errno.ENOENT:\n                 raise SSLError(e)\n             raise\n+\n     if certfile:\n         context.load_cert_chain(certfile, keyfile)\n     if HAS_SNI:  # Platform-specific: OpenSSL with enabled SNI\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#397f10bac76b74e3e6efcb5c4be2fe735382d7bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 603 | Contributors (this commit): 13 | Commits (past 90d): 1 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.7.0'\n-__build__ = 0x020700\n+__version__ = '2.8.0'\n+__build__ = 0x020800\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3948a9562db886e7ead6a48dbcbada34fbeb0838", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9405 | Contributors (this commit): 151 | Commits (past 90d): 6 | Contributors (cumulative): 151 | DMM Complexity: None\n\nDIFF:\n@@ -414,7 +414,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         content_type = None\n         length = None\n \n-        if data == {} and json is not None:\n+        if not data and json is not None:\n             content_type = 'application/json'\n             body = complexjson.dumps(json)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b071c4955682275a699ad7b3ac3e8dd945fd6761", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 11 | Churn Cumulative: 5133 | Contributors (this commit): 98 | Commits (past 90d): 10 | Contributors (cumulative): 98 | DMM Complexity: 1.0\n\nDIFF:\n@@ -568,6 +568,17 @@ class RequestsTestCase(unittest.TestCase):\n             method=u('POST'), url=httpbin('post'), files=files)\n         assert r.status_code == 200\n \n+    def test_unicode_method_name_with_request_object(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        s = requests.Session()\n+        req = requests.Request(u(\"POST\"), httpbin('post'), files=files)\n+        prep = s.prepare_request(req)\n+        assert isinstance(prep.method, builtin_str)\n+        assert prep.method == \"POST\"\n+\n+        resp = s.send(prep)\n+        assert resp.status_code == 200\n+\n     def test_custom_content_type(self):\n         r = requests.post(\n             httpbin('post'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2df3c7c75dd4e3c825421da3aaa4b08bd91d4afb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 12465 | Contributors (this commit): 189 | Commits (past 90d): 15 | Contributors (cumulative): 217 | DMM Complexity: 0.0\n\nDIFF:\n@@ -319,7 +319,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n         if self.method is not None:\n-            self.method = self.method.upper()\n+            self.method = to_native_string(self.method.upper())\n \n     def prepare_url(self, url, params):\n         \"\"\"Prepares the given HTTP URL.\"\"\"\n\n@@ -438,9 +438,6 @@ class Session(SessionRedirectMixin):\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n-\n-        method = to_native_string(method)\n-\n         # Create the Request.\n         req = Request(\n             method = method.upper(),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18a6b601100db978f3a6e191816456e75bc47e0f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 607 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.8.0'\n-__build__ = 0x020800\n+__version__ = '2.8.1'\n+__build__ = 0x020801\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8f28f4bca40715a3b2929ae639868f235bcaa38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3062 | Contributors (this commit): 67 | Commits (past 90d): 9 | Contributors (cumulative): 67 | DMM Complexity: None\n\nDIFF:\n@@ -273,13 +273,13 @@ class Session(SessionRedirectMixin):\n       >>> import requests\n       >>> s = requests.Session()\n       >>> s.get('http://httpbin.org/get')\n-      200\n+      <Response [200]>\n \n     Or as a context manager::\n \n       >>> with requests.Session() as s:\n       >>>     s.get('http://httpbin.org/get')\n-      200\n+      <Response [200]>\n     \"\"\"\n \n     __attrs__ = [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8f591682e6a901baf0cc8a0393b5930252f0318a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 977 | Contributors (this commit): 31 | Commits (past 90d): 11 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -394,7 +394,15 @@ class HTTPAdapter(BaseAdapter):\n                         low_conn.send(b'\\r\\n')\n                     low_conn.send(b'0\\r\\n\\r\\n')\n \n-                    r = low_conn.getresponse()\n+                    # Receive the response from the server\n+                    try:\n+                        # For Python 2.7+ versions, use buffering of HTTP\n+                        # responses\n+                        r = conn.getresponse(buffering=True)\n+                    except TypeError:\n+                        # For compatibility with Python 2.6 versions and back\n+                        r = conn.getresponse()\n+\n                     resp = HTTPResponse.from_httplib(\n                         r,\n                         pool=conn,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#edc68a0ac899785cd89a726e3da258e880d641dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 14547 | Contributors (this commit): 192 | Commits (past 90d): 16 | Contributors (cumulative): 251 | DMM Complexity: 1.0\n\nDIFF:\n@@ -81,7 +81,7 @@ class RequestEncodingMixin(object):\n         \"\"\"\n \n         if isinstance(data, (str, bytes)):\n-            return data\n+            return to_native_string(data)\n         elif hasattr(data, 'read'):\n             return data\n         elif hasattr(data, '__iter__'):\n\n@@ -139,6 +139,11 @@ class RequestsTestCase(unittest.TestCase):\n         prep = session.prepare_request(request)\n         assert prep.url == 'http://example.com/?z=1&a=1&k=1&d=1'\n \n+    def test_params_bytes_are_encoded(self):\n+        request = requests.Request('GET', 'http://example.com',\n+                                   params=b'test=foo').prepare()\n+        assert request.url == 'http://example.com/?test=foo'\n+\n     def test_mixed_case_scheme_acceptable(self):\n         s = requests.Session()\n         s.proxies = getproxies()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f1fd11e54faef9045833432c8505b6681d7526bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 42 | Churn Cumulative: 3114 | Contributors (this commit): 72 | Commits (past 90d): 10 | Contributors (cumulative): 86 | DMM Complexity: 0.0\n\nDIFF:\n@@ -62,7 +62,8 @@ from .sessions import session, Session\n from .status_codes import codes\n from .exceptions import (\n     RequestException, Timeout, URLRequired,\n-    TooManyRedirects, HTTPError, ConnectionError\n+    TooManyRedirects, HTTPError, ConnectionError,\n+    FileModeWarning,\n )\n \n # Set default logging handler to avoid \"No handler found\" warnings.\n@@ -75,3 +76,8 @@ except ImportError:\n             pass\n \n logging.getLogger(__name__).addHandler(NullHandler())\n+\n+import warnings\n+\n+# FileModeWarnings go off per the default.\n+warnings.simplefilter('default', FileModeWarning, append=True)\n\n@@ -97,3 +97,18 @@ class StreamConsumedError(RequestException, TypeError):\n \n class RetryError(RequestException):\n     \"\"\"Custom retries logic failed\"\"\"\n+\n+\n+# Warnings\n+\n+\n+class RequestsWarning(Warning):\n+    \"\"\"Base warning for Requests.\"\"\"\n+    pass\n+\n+\n+class FileModeWarning(RequestsWarning, DeprecationWarning):\n+    \"\"\"\n+    A file was opened in text mode, but Requests determined its binary length.\n+    \"\"\"\n+    pass\n\n@@ -29,7 +29,7 @@ from .compat import (quote, urlparse, bytes, str, OrderedDict, unquote, is_py2,\n                      basestring)\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n-from .exceptions import InvalidURL\n+from .exceptions import InvalidURL, FileModeWarning\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -60,7 +60,22 @@ def super_len(o):\n         except io.UnsupportedOperation:\n             pass\n         else:\n-            return os.fstat(fileno).st_size\n+            filesize = os.fstat(fileno).st_size\n+\n+            # Having used fstat to determine the file length, we need to\n+            # confirm that this file was opened up in binary mode.\n+            if 'b' not in o.mode:\n+                warnings.warn((\n+                    \"Requests has determined the content-length for this \"\n+                    \"request using the binary size of the file: however, the \"\n+                    \"file has been opened in text mode (i.e. without the 'b' \"\n+                    \"flag in the mode). This may lead to an incorrect \"\n+                    \"content-length. In Requests 3.0, support will be removed \"\n+                    \"for files in text mode.\"),\n+                    FileModeWarning\n+                )\n+\n+            return filesize\n \n     if hasattr(o, 'getvalue'):\n         # e.g. BytesIO, cStringIO.StringIO\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7dd94941c84d28c329db1d7739ea32f8d41a131e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 126 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -78,6 +78,7 @@ _codes = {\n     507: ('insufficient_storage',),\n     509: ('bandwidth_limit_exceeded', 'bandwidth'),\n     510: ('not_extended',),\n+    511: ('network_authentication_required', 'network_auth', 'network_authentication'),\n }\n \n codes = LookupDict(name='status_codes')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4dffe5efaa73c1ae4a082442e201f413b5e5bea7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 447 | Contributors (this commit): 17 | Commits (past 90d): 1 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -62,11 +62,11 @@ setup(\n         'Natural Language :: English',\n         'License :: OSI Approved :: Apache Software License',\n         'Programming Language :: Python',\n-        'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n         'Programming Language :: Python :: 3.3',\n-        'Programming Language :: Python :: 3.4'\n+        'Programming Language :: Python :: 3.4',\n+        'Programming Language :: Python :: 3.5',\n     ),\n     extras_require={\n         'security': ['pyOpenSSL', 'ndg-httpsclient', 'pyasn1'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0352ec0bd3aabb131b0cbb649f2062d59fc8f4a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 983 | Contributors (this commit): 31 | Commits (past 90d): 12 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,6 +8,7 @@ This module contains the transport adapters that Requests uses to define\n and maintain connections.\n \"\"\"\n \n+import os.path\n import socket\n \n from .models import Response\n@@ -185,10 +186,15 @@ class HTTPAdapter(BaseAdapter):\n                 raise Exception(\"Could not find a suitable SSL CA certificate bundle.\")\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n+\n+            if not os.path.isdir(cert_loc):\n                 conn.ca_certs = cert_loc\n+            else:\n+                conn.ca_cert_dir = cert_loc\n         else:\n             conn.cert_reqs = 'CERT_NONE'\n             conn.ca_certs = None\n+            conn.ca_cert_dir = None\n \n         if cert:\n             if not isinstance(cert, basestring):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e5053cd32269ce9122ab7643e112e21518005b63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 31 | Churn Cumulative: 5169 | Contributors (this commit): 99 | Commits (past 90d): 9 | Contributors (cumulative): 99 | DMM Complexity: 1.0\n\nDIFF:\n@@ -48,18 +48,31 @@ else:\n         return s.decode('unicode-escape')\n \n \n+@pytest.fixture\n+def httpbin(httpbin):\n+    # Issue #1483: Make sure the URL always has a trailing slash\n+    httpbin_url = httpbin.url.rstrip('/') + '/'\n+\n+    def inner(*suffix):\n+        return urljoin(httpbin_url, '/'.join(suffix))\n+\n+    return inner\n+\n+\n+@pytest.fixture\n+def httpsbin_url(httpbin_secure):\n+    # Issue #1483: Make sure the URL always has a trailing slash\n+    httpbin_url = httpbin_secure.url.rstrip('/') + '/'\n+\n+    def inner(*suffix):\n+        return urljoin(httpbin_url, '/'.join(suffix))\n+\n+    return inner\n+\n+\n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n TARPIT = \"http://10.255.255.1\"\n-HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n-# Issue #1483: Make sure the URL always has a trailing slash\n-HTTPBIN = HTTPBIN.rstrip('/') + '/'\n-\n-\n-def httpbin(*suffix):\n-    \"\"\"Returns url for HTTPBIN resource.\"\"\"\n-    return urljoin(HTTPBIN, '/'.join(suffix))\n-\n \n class RequestsTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a56db9ecc4456c992372f13d979e526bca251183", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5171 | Contributors (this commit): 99 | Commits (past 90d): 10 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -74,7 +74,7 @@ def httpsbin_url(httpbin_secure):\n # listening on that port)\n TARPIT = \"http://10.255.255.1\"\n \n-class RequestsTestCase(unittest.TestCase):\n+class TestRequests(object):\n \n     _multiprocess_can_split_ = True\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f52287d9992f0cff892ab5b55ed12803791a78a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 5174 | Contributors (this commit): 99 | Commits (past 90d): 11 | Contributors (cumulative): 99 | DMM Complexity: 0.0\n\nDIFF:\n@@ -161,8 +161,7 @@ class TestRequests(object):\n         s = requests.Session()\n         s.proxies = getproxies()\n         parts = urlparse(httpbin('get'))\n-        schemes = ['http://', 'HTTP://', 'hTTp://', 'HttP://',\n-                   'https://', 'HTTPS://', 'hTTps://', 'HttPs://']\n+        schemes = ['http://', 'HTTP://', 'hTTp://', 'HttP://']\n         for scheme in schemes:\n             url = scheme + parts.netloc + parts.path\n             r = requests.Request('GET', url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9b63f9cd37d19f2d4bbce42caec112ad0606d8dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 5179 | Contributors (this commit): 99 | Commits (past 90d): 12 | Contributors (cumulative): 99 | DMM Complexity: 1.0\n\nDIFF:\n@@ -353,6 +353,9 @@ class TestRequests(object):\n         wrong_auth = ('wronguser', 'wrongpass')\n         url = httpbin('basic-auth', 'user', 'pass')\n \n+        old_auth = requests.sessions.get_netrc_auth\n+\n+        try:\n             def get_netrc_auth_mock(url):\n                 return auth\n             requests.sessions.get_netrc_auth = get_netrc_auth_mock\n@@ -375,6 +378,8 @@ class TestRequests(object):\n             s.auth = wrong_auth\n             r = s.get(url)\n             assert r.status_code == 401\n+        finally:\n+            requests.sessions.get_netrc_auth = old_auth\n \n     def test_DIGEST_HTTP_200_OK_GET(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3bc189b0afba0d6ea8c65f0e99a78196a4a6d8b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 90 | Lines Deleted: 90 | Files Changed: 1 | Hunks: 87 | Methods Changed: 166 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 180 | Churn Cumulative: 5359 | Contributors (this commit): 99 | Commits (past 90d): 13 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -118,13 +118,13 @@ class TestRequests(object):\n         assert pr.url == req.url\n         assert pr.body == 'life=42'\n \n-    def test_no_content_length(self):\n+    def test_no_content_length(self, httpbin):\n         get_req = requests.Request('GET', httpbin('get')).prepare()\n         assert 'Content-Length' not in get_req.headers\n         head_req = requests.Request('HEAD', httpbin('head')).prepare()\n         assert 'Content-Length' not in head_req.headers\n \n-    def test_override_content_length(self):\n+    def test_override_content_length(self, httpbin):\n         headers = {\n             'Content-Length': 'not zero'\n         }\n@@ -157,7 +157,7 @@ class TestRequests(object):\n                                    params=b'test=foo').prepare()\n         assert request.url == 'http://example.com/?test=foo'\n \n-    def test_mixed_case_scheme_acceptable(self):\n+    def test_mixed_case_scheme_acceptable(self, httpbin):\n         s = requests.Session()\n         s.proxies = getproxies()\n         parts = urlparse(httpbin('get'))\n@@ -168,7 +168,7 @@ class TestRequests(object):\n             r = s.send(r.prepare())\n             assert r.status_code == 200, 'failed for scheme {0}'.format(scheme)\n \n-    def test_HTTP_200_OK_GET_ALTERNATIVE(self):\n+    def test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin):\n         r = requests.Request('GET', httpbin('get'))\n         s = requests.Session()\n         s.proxies = getproxies()\n@@ -177,7 +177,7 @@ class TestRequests(object):\n \n         assert r.status_code == 200\n \n-    def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n+    def test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin):\n         r = requests.get(httpbin('redirect', '1'))\n         assert r.status_code == 200\n         assert r.history[0].status_code == 302\n@@ -187,7 +187,7 @@ class TestRequests(object):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n     #     self.assertEqual(r.status_code, 200)\n \n-    def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n+    def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n         r = requests.get(httpbin('user-agent'), headers=heads)\n@@ -195,25 +195,25 @@ class TestRequests(object):\n         assert heads['User-agent'] in r.text\n         assert r.status_code == 200\n \n-    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n+    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n         r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n         assert r.status_code == 200\n \n-    def test_set_cookie_on_301(self):\n+    def test_set_cookie_on_301(self, httpbin):\n         s = requests.session()\n         url = httpbin('cookies/set?foo=bar')\n         s.get(url)\n         assert s.cookies['foo'] == 'bar'\n \n-    def test_cookie_sent_on_redirect(self):\n+    def test_cookie_sent_on_redirect(self, httpbin):\n         s = requests.session()\n         s.get(httpbin('cookies/set?foo=bar'))\n         r = s.get(httpbin('redirect/1'))  # redirects to httpbin('get')\n         assert 'Cookie' in r.json()['headers']\n \n-    def test_cookie_removed_on_expire(self):\n+    def test_cookie_removed_on_expire(self, httpbin):\n         s = requests.session()\n         s.get(httpbin('cookies/set?foo=bar'))\n         assert s.cookies['foo'] == 'bar'\n@@ -226,18 +226,18 @@ class TestRequests(object):\n         )\n         assert 'foo' not in s.cookies\n \n-    def test_cookie_quote_wrapped(self):\n+    def test_cookie_quote_wrapped(self, httpbin):\n         s = requests.session()\n         s.get(httpbin('cookies/set?foo=\"bar:baz\"'))\n         assert s.cookies['foo'] == '\"bar:baz\"'\n \n-    def test_cookie_persists_via_api(self):\n+    def test_cookie_persists_via_api(self, httpbin):\n         s = requests.session()\n         r = s.get(httpbin('redirect/1'), cookies={'foo': 'bar'})\n         assert 'foo' in r.request.headers['Cookie']\n         assert 'foo' in r.history[0].request.headers['Cookie']\n \n-    def test_request_cookie_overrides_session_cookie(self):\n+    def test_request_cookie_overrides_session_cookie(self, httpbin):\n         s = requests.session()\n         s.cookies['foo'] = 'bar'\n         r = s.get(httpbin('cookies'), cookies={'foo': 'baz'})\n@@ -245,13 +245,13 @@ class TestRequests(object):\n         # Session cookie should not be modified\n         assert s.cookies['foo'] == 'bar'\n \n-    def test_request_cookies_not_persisted(self):\n+    def test_request_cookies_not_persisted(self, httpbin):\n         s = requests.session()\n         s.get(httpbin('cookies'), cookies={'foo': 'baz'})\n         # Sending a request with cookies should not add cookies to the session\n         assert not s.cookies\n \n-    def test_generic_cookiejar_works(self):\n+    def test_generic_cookiejar_works(self, httpbin):\n         cj = cookielib.CookieJar()\n         cookiejar_from_dict({'foo': 'bar'}, cj)\n         s = requests.session()\n@@ -262,7 +262,7 @@ class TestRequests(object):\n         # Make sure the session cj is still the custom one\n         assert s.cookies is cj\n \n-    def test_param_cookiejar_works(self):\n+    def test_param_cookiejar_works(self, httpbin):\n         cj = cookielib.CookieJar()\n         cookiejar_from_dict({'foo': 'bar'}, cj)\n         s = requests.session()\n@@ -270,13 +270,13 @@ class TestRequests(object):\n         # Make sure the cookie was sent\n         assert r.json()['cookies']['foo'] == 'bar'\n \n-    def test_requests_in_history_are_not_overridden(self):\n+    def test_requests_in_history_are_not_overridden(self, httpbin):\n         resp = requests.get(httpbin('redirect/3'))\n         urls = [r.url for r in resp.history]\n         req_urls = [r.request.url for r in resp.history]\n         assert urls == req_urls\n \n-    def test_history_is_always_a_list(self):\n+    def test_history_is_always_a_list(self, httpbin):\n         \"\"\"\n         Show that even with redirects, Response.history is always a list.\n         \"\"\"\n@@ -286,7 +286,7 @@ class TestRequests(object):\n         assert isinstance(resp.history, list)\n         assert not isinstance(resp.history, tuple)\n \n-    def test_headers_on_session_with_None_are_not_sent(self):\n+    def test_headers_on_session_with_None_are_not_sent(self, httpbin):\n         \"\"\"Do not send headers in Session.headers with None values.\"\"\"\n         ses = requests.Session()\n         ses.headers['Accept-Encoding'] = None\n@@ -294,7 +294,7 @@ class TestRequests(object):\n         prep = ses.prepare_request(req)\n         assert 'Accept-Encoding' not in prep.headers\n \n-    def test_user_agent_transfers(self):\n+    def test_user_agent_transfers(self, httpbin):\n \n         heads = {\n             'User-agent': 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n@@ -310,15 +310,15 @@ class TestRequests(object):\n         r = requests.get(httpbin('user-agent'), headers=heads)\n         assert heads['user-agent'] in r.text\n \n-    def test_HTTP_200_OK_HEAD(self):\n+    def test_HTTP_200_OK_HEAD(self, httpbin):\n         r = requests.head(httpbin('get'))\n         assert r.status_code == 200\n \n-    def test_HTTP_200_OK_PUT(self):\n+    def test_HTTP_200_OK_PUT(self, httpbin):\n         r = requests.put(httpbin('put'))\n         assert r.status_code == 200\n \n-    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):\n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):\n         auth = ('user', 'pass')\n         url = httpbin('basic-auth', 'user', 'pass')\n \n@@ -348,7 +348,7 @@ class TestRequests(object):\n         with pytest.raises(InvalidURL):\n             requests.get(\"http://fe80::5054:ff:fe5a:fc0\")\n \n-    def test_basicauth_with_netrc(self):\n+    def test_basicauth_with_netrc(self, httpbin):\n         auth = ('user', 'pass')\n         wrong_auth = ('wronguser', 'wrongpass')\n         url = httpbin('basic-auth', 'user', 'pass')\n@@ -381,7 +381,7 @@ class TestRequests(object):\n         finally:\n             requests.sessions.get_netrc_auth = old_auth\n \n-    def test_DIGEST_HTTP_200_OK_GET(self):\n+    def test_DIGEST_HTTP_200_OK_GET(self, httpbin):\n \n         auth = HTTPDigestAuth('user', 'pass')\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n@@ -397,7 +397,7 @@ class TestRequests(object):\n         r = s.get(url)\n         assert r.status_code == 200\n \n-    def test_DIGEST_AUTH_RETURNS_COOKIE(self):\n+    def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n         auth = HTTPDigestAuth('user', 'pass')\n         r = requests.get(url)\n@@ -406,14 +406,14 @@ class TestRequests(object):\n         r = requests.get(url, auth=auth)\n         assert r.status_code == 200\n \n-    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self):\n+    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin):\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n         auth = HTTPDigestAuth('user', 'pass')\n         s = requests.Session()\n         s.get(url, auth=auth)\n         assert s.cookies['fake'] == 'fake_value'\n \n-    def test_DIGEST_STREAM(self):\n+    def test_DIGEST_STREAM(self, httpbin):\n \n         auth = HTTPDigestAuth('user', 'pass')\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n@@ -424,7 +424,7 @@ class TestRequests(object):\n         r = requests.get(url, auth=auth, stream=False)\n         assert r.raw.read() == b''\n \n-    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n+    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin):\n \n         auth = HTTPDigestAuth('user', 'wrongpass')\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n@@ -440,7 +440,7 @@ class TestRequests(object):\n         r = s.get(url)\n         assert r.status_code == 401\n \n-    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self):\n+    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin):\n \n         auth = HTTPDigestAuth('user', 'pass')\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n@@ -448,7 +448,7 @@ class TestRequests(object):\n         r = requests.get(url, auth=auth)\n         assert '\"auth\"' in r.request.headers['Authorization']\n \n-    def test_DIGESTAUTH_THREADED(self):\n+    def test_DIGESTAUTH_THREADED(self, httpbin):\n \n         auth = HTTPDigestAuth('user', 'pass')\n         url = httpbin('digest-auth', 'auth', 'user', 'pass')\n@@ -463,7 +463,7 @@ class TestRequests(object):\n             pool = ThreadPool(processes=50)\n             pool.map(do_request, range(100))\n \n-    def test_POSTBIN_GET_POST_FILES(self):\n+    def test_POSTBIN_GET_POST_FILES(self, httpbin):\n \n         url = httpbin('post')\n         post1 = requests.post(url).raise_for_status()\n@@ -481,7 +481,7 @@ class TestRequests(object):\n         with pytest.raises(ValueError):\n             requests.post(url, files=['bad file data'])\n \n-    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self):\n+    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin):\n \n         url = httpbin('post')\n         post1 = requests.post(url).raise_for_status()\n@@ -500,17 +500,17 @@ class TestRequests(object):\n         with pytest.raises(ValueError):\n             requests.post(url, files=['bad file data'])\n \n-    def test_conflicting_post_params(self):\n+    def test_conflicting_post_params(self, httpbin):\n         url = httpbin('post')\n         with open('requirements.txt') as f:\n             pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n             pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n \n-    def test_request_ok_set(self):\n+    def test_request_ok_set(self, httpbin):\n         r = requests.get(httpbin('status', '404'))\n         assert not r.ok\n \n-    def test_status_raising(self):\n+    def test_status_raising(self, httpbin):\n         r = requests.get(httpbin('status', '404'))\n         with pytest.raises(requests.exceptions.HTTPError):\n             r.raise_for_status()\n@@ -518,11 +518,11 @@ class TestRequests(object):\n         r = requests.get(httpbin('status', '500'))\n         assert not r.ok\n \n-    def test_decompress_gzip(self):\n+    def test_decompress_gzip(self, httpbin):\n         r = requests.get(httpbin('gzip'))\n         r.content.decode('ascii')\n \n-    def test_unicode_get(self):\n+    def test_unicode_get(self, httpbin):\n         url = httpbin('/get')\n         requests.get(url, params={'foo': 'føø'})\n         requests.get(url, params={'føø': 'føø'})\n@@ -530,29 +530,29 @@ class TestRequests(object):\n         requests.get(url, params={'foo': 'foo'})\n         requests.get(httpbin('ø'), params={'foo': 'foo'})\n \n-    def test_unicode_header_name(self):\n+    def test_unicode_header_name(self, httpbin):\n         requests.put(\n             httpbin('put'),\n             headers={str('Content-Type'): 'application/octet-stream'},\n             data='\\xff')  # compat.str is unicode.\n \n-    def test_pyopenssl_redirect(self):\n-        requests.get('https://httpbin.org/status/301')\n+    def test_pyopenssl_redirect(self, httpsbin_url, httpbin_ca_bundle):\n+        requests.get(httpsbin_url('status', '301'), verify=httpbin_ca_bundle)\n \n-    def test_urlencoded_get_query_multivalued_param(self):\n+    def test_urlencoded_get_query_multivalued_param(self, httpbin):\n \n         r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n         assert r.status_code == 200\n         assert r.url == httpbin('get?test=foo&test=baz')\n \n-    def test_different_encodings_dont_break_post(self):\n+    def test_different_encodings_dont_break_post(self, httpbin):\n         r = requests.post(httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n             params={'blah': 'asdf1234'},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-    def test_unicode_multipart_post(self):\n+    def test_unicode_multipart_post(self, httpbin):\n         r = requests.post(httpbin('post'),\n             data={'stuff': u('ëlïxr')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n@@ -573,7 +573,7 @@ class TestRequests(object):\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-    def test_unicode_multipart_post_fieldnames(self):\n+    def test_unicode_multipart_post_fieldnames(self, httpbin):\n         filename = os.path.splitext(__file__)[0] + '.py'\n         r = requests.Request(method='POST',\n                              url=httpbin('post'),\n@@ -584,13 +584,13 @@ class TestRequests(object):\n         assert b'name=\"stuff\"' in prep.body\n         assert b'name=\"b\\'stuff\\'\"' not in prep.body\n \n-    def test_unicode_method_name(self):\n+    def test_unicode_method_name(self, httpbin):\n         files = {'file': open('test_requests.py', 'rb')}\n         r = requests.request(\n             method=u('POST'), url=httpbin('post'), files=files)\n         assert r.status_code == 200\n \n-    def test_unicode_method_name_with_request_object(self):\n+    def test_unicode_method_name_with_request_object(self, httpbin):\n         files = {'file': open('test_requests.py', 'rb')}\n         s = requests.Session()\n         req = requests.Request(u(\"POST\"), httpbin('post'), files=files)\n@@ -601,7 +601,7 @@ class TestRequests(object):\n         resp = s.send(prep)\n         assert resp.status_code == 200\n \n-    def test_custom_content_type(self):\n+    def test_custom_content_type(self, httpbin):\n         r = requests.post(\n             httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n@@ -611,38 +611,38 @@ class TestRequests(object):\n         assert r.status_code == 200\n         assert b\"text/py-content-type\" in r.request.body\n \n-    def test_hook_receives_request_arguments(self):\n+    def test_hook_receives_request_arguments(self, httpbin):\n         def hook(resp, **kwargs):\n             assert resp is not None\n             assert kwargs != {}\n \n-        requests.Request('GET', HTTPBIN, hooks={'response': hook})\n+        requests.Request('GET', httpbin(), hooks={'response': hook})\n \n-    def test_session_hooks_are_used_with_no_request_hooks(self):\n+    def test_session_hooks_are_used_with_no_request_hooks(self, httpbin):\n         hook = lambda x, *args, **kwargs: x\n         s = requests.Session()\n         s.hooks['response'].append(hook)\n-        r = requests.Request('GET', HTTPBIN)\n+        r = requests.Request('GET', httpbin())\n         prep = s.prepare_request(r)\n         assert prep.hooks['response'] != []\n         assert prep.hooks['response'] == [hook]\n \n-    def test_session_hooks_are_overriden_by_request_hooks(self):\n+    def test_session_hooks_are_overriden_by_request_hooks(self, httpbin):\n         hook1 = lambda x, *args, **kwargs: x\n         hook2 = lambda x, *args, **kwargs: x\n         assert hook1 is not hook2\n         s = requests.Session()\n         s.hooks['response'].append(hook2)\n-        r = requests.Request('GET', HTTPBIN, hooks={'response': [hook1]})\n+        r = requests.Request('GET', httpbin(), hooks={'response': [hook1]})\n         prep = s.prepare_request(r)\n         assert prep.hooks['response'] == [hook1]\n \n-    def test_prepared_request_hook(self):\n+    def test_prepared_request_hook(self, httpbin):\n         def hook(resp, **kwargs):\n             resp.hook_working = True\n             return resp\n \n-        req = requests.Request('GET', HTTPBIN, hooks={'response': hook})\n+        req = requests.Request('GET', httpbin(), hooks={'response': hook})\n         prep = req.prepare()\n \n         s = requests.Session()\n@@ -651,7 +651,7 @@ class TestRequests(object):\n \n         assert hasattr(resp, 'hook_working')\n \n-    def test_prepared_from_session(self):\n+    def test_prepared_from_session(self, httpbin):\n         class DummyAuth(requests.auth.AuthBase):\n             def __call__(self, r):\n                 r.headers['Dummy-Auth-Test'] = 'dummy-auth-test-ok'\n@@ -804,7 +804,7 @@ class TestRequests(object):\n         # make sure one can use items multiple times\n         assert list(items) == list(items)\n \n-    def test_time_elapsed_blank(self):\n+    def test_time_elapsed_blank(self, httpbin):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n         total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\n@@ -843,7 +843,7 @@ class TestRequests(object):\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_request_and_response_are_pickleable(self):\n+    def test_request_and_response_are_pickleable(self, httpbin):\n         r = requests.get(httpbin('get'))\n \n         # verify we can pickle the original request\n@@ -875,8 +875,8 @@ class TestRequests(object):\n         url = 'http://user:pass%23pass@complex.url.com/path?query=yes'\n         assert ('user', 'pass#pass') == requests.utils.get_auth_from_url(url)\n \n-    def test_cannot_send_unprepared_requests(self):\n-        r = requests.Request(url=HTTPBIN)\n+    def test_cannot_send_unprepared_requests(self, httpbin):\n+        r = requests.Request(url=httpbin())\n         with pytest.raises(ValueError):\n             requests.Session().send(r)\n \n@@ -890,7 +890,7 @@ class TestRequests(object):\n         assert str(error) == 'message'\n         assert error.response == response\n \n-    def test_session_pickling(self):\n+    def test_session_pickling(self, httpbin):\n         r = requests.Request('GET', httpbin('get'))\n         s = requests.Session()\n \n@@ -900,7 +900,7 @@ class TestRequests(object):\n         r = s.send(r.prepare())\n         assert r.status_code == 200\n \n-    def test_fixes_1329(self):\n+    def test_fixes_1329(self, httpbin):\n         \"\"\"\n         Ensure that header updates are done case-insensitively.\n         \"\"\"\n@@ -913,7 +913,7 @@ class TestRequests(object):\n         assert headers['Accept'] == 'application/json'\n         assert headers['ACCEPT'] == 'application/json'\n \n-    def test_uppercase_scheme_redirect(self):\n+    def test_uppercase_scheme_redirect(self, httpbin):\n         parts = urlparse(httpbin('html'))\n         url = \"HTTP://\" + parts.netloc + parts.path\n         r = requests.get(httpbin('redirect-to'), params={'url': url})\n@@ -958,14 +958,14 @@ class TestRequests(object):\n         assert 'http://' in s2.adapters\n         assert 'https://' in s2.adapters\n \n-    def test_header_remove_is_case_insensitive(self):\n+    def test_header_remove_is_case_insensitive(self, httpbin):\n         # From issue #1321\n         s = requests.Session()\n         s.headers['foo'] = 'bar'\n         r = s.get(httpbin('get'), headers={'FOO': None})\n         assert 'foo' not in r.request.headers\n \n-    def test_params_are_merged_case_sensitive(self):\n+    def test_params_are_merged_case_sensitive(self, httpbin):\n         s = requests.Session()\n         s.params['foo'] = 'bar'\n         r = s.get(httpbin('get'), params={'FOO': 'bar'})\n@@ -980,7 +980,7 @@ class TestRequests(object):\n         r = requests.Request('GET', url).prepare()\n         assert r.url == url\n \n-    def test_header_keys_are_native(self):\n+    def test_header_keys_are_native(self, httpbin):\n         headers = {u('unicode'): 'blah', 'byte'.encode('ascii'): 'blah'}\n         r = requests.Request('GET', httpbin('get'), headers=headers)\n         p = r.prepare()\n@@ -990,7 +990,7 @@ class TestRequests(object):\n         assert 'unicode' in p.headers.keys()\n         assert 'byte' in p.headers.keys()\n \n-    def test_can_send_nonstring_objects_with_files(self):\n+    def test_can_send_nonstring_objects_with_files(self, httpbin):\n         data = {'a': 0.0}\n         files = {'b': 'foo'}\n         r = requests.Request('POST', httpbin('post'), data=data, files=files)\n@@ -998,7 +998,7 @@ class TestRequests(object):\n \n         assert 'multipart/form-data' in p.headers['Content-Type']\n \n-    def test_can_send_bytes_bytearray_objects_with_files(self):\n+    def test_can_send_bytes_bytearray_objects_with_files(self, httpbin):\n         # Test bytes:\n         data = {'a': 'this is a string'}\n         files = {'b': b'foo'}\n@@ -1011,7 +1011,7 @@ class TestRequests(object):\n         p = r.prepare()\n         assert 'multipart/form-data' in p.headers['Content-Type']\n \n-    def test_can_send_file_object_with_non_string_filename(self):\n+    def test_can_send_file_object_with_non_string_filename(self, httpbin):\n         f = io.BytesIO()\n         f.name = 2\n         r = requests.Request('POST', httpbin('post'), files={'f': f})\n@@ -1019,7 +1019,7 @@ class TestRequests(object):\n \n         assert 'multipart/form-data' in p.headers['Content-Type']\n \n-    def test_autoset_header_values_are_native(self):\n+    def test_autoset_header_values_are_native(self, httpbin):\n         data = 'this is a string'\n         length = '16'\n         req = requests.Request('POST', httpbin('post'), data=data)\n@@ -1038,7 +1038,7 @@ class TestRequests(object):\n             preq = req.prepare()\n             assert test_url == preq.url\n \n-    def test_auth_is_stripped_on_redirect_off_host(self):\n+    def test_auth_is_stripped_on_redirect_off_host(self, httpbin):\n         r = requests.get(\n             httpbin('redirect-to'),\n             params={'url': 'http://www.google.co.uk'},\n@@ -1047,14 +1047,14 @@ class TestRequests(object):\n         assert r.history[0].request.headers['Authorization']\n         assert not r.request.headers.get('Authorization', '')\n \n-    def test_auth_is_retained_for_redirect_on_host(self):\n+    def test_auth_is_retained_for_redirect_on_host(self, httpbin):\n         r = requests.get(httpbin('redirect/1'), auth=('user', 'pass'))\n         h1 = r.history[0].request.headers['Authorization']\n         h2 = r.request.headers['Authorization']\n \n         assert h1 == h2\n \n-    def test_manual_redirect_with_partial_body_read(self):\n+    def test_manual_redirect_with_partial_body_read(self, httpbin):\n         s = requests.Session()\n         r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)\n         assert r1.is_redirect\n@@ -1087,7 +1087,7 @@ class TestRequests(object):\n \n         adapter.build_response = build_response\n \n-    def test_redirect_with_wrong_gzipped_header(self):\n+    def test_redirect_with_wrong_gzipped_header(self, httpbin):\n         s = requests.Session()\n         url = httpbin('redirect/1')\n         self._patch_adapter_gzipped_redirect(s, url)\n@@ -1098,7 +1098,7 @@ class TestRequests(object):\n         assert isinstance(s, builtin_str)\n         assert s == \"Basic dGVzdDp0ZXN0\"\n \n-    def test_requests_history_is_saved(self):\n+    def test_requests_history_is_saved(self, httpbin):\n         r = requests.get(httpbin('redirect/5'))\n         total = r.history[-1].history\n         i = 0\n@@ -1106,7 +1106,7 @@ class TestRequests(object):\n             assert item.history == total[0:i]\n             i = i + 1\n \n-    def test_json_param_post_content_type_works(self):\n+    def test_json_param_post_content_type_works(self, httpbin):\n         r = requests.post(\n             httpbin('post'),\n             json={'life': 42}\n@@ -1115,14 +1115,14 @@ class TestRequests(object):\n         assert 'application/json' in r.request.headers['Content-Type']\n         assert {'life': 42} == r.json()['json']\n \n-    def test_json_param_post_should_not_override_data_param(self):\n-        r = requests.Request(method='POST', url='http://httpbin.org/post',\n+    def test_json_param_post_should_not_override_data_param(self, httpbin):\n+        r = requests.Request(method='POST', url=httpbin('post'),\n                              data={'stuff': 'elixr'},\n                              json={'music': 'flute'})\n         prep = r.prepare()\n         assert 'stuff=elixr' == prep.body\n \n-    def test_response_iter_lines(self):\n+    def test_response_iter_lines(self, httpbin):\n         r = requests.get(httpbin('stream/4'), stream=True)\n         assert r.status_code == 200\n \n@@ -1130,7 +1130,7 @@ class TestRequests(object):\n         next(it)\n         assert len(list(it)) == 3\n \n-    def test_unconsumed_session_response_closes_connection(self):\n+    def test_unconsumed_session_response_closes_connection(self, httpbin):\n         s = requests.session()\n \n         with contextlib.closing(s.get(httpbin('stream/4'), stream=True)) as response:\n@@ -1140,7 +1140,7 @@ class TestRequests(object):\n         self.assertTrue(response.raw.closed)\n \n     @pytest.mark.xfail\n-    def test_response_iter_lines_reentrant(self):\n+    def test_response_iter_lines_reentrant(self, httpbin):\n         \"\"\"Response.iter_lines() is not reentrant safe\"\"\"\n         r = requests.get(httpbin('stream/4'), stream=True)\n         assert r.status_code == 200\n@@ -1534,13 +1534,13 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n \n \n class TestTimeout:\n-    def test_stream_timeout(self):\n+    def test_stream_timeout(self, httpbin):\n         try:\n             requests.get(httpbin('delay/10'), timeout=2.0)\n         except requests.exceptions.Timeout as e:\n             assert 'Read timed out' in e.args[0].args[0]\n \n-    def test_invalid_timeout(self):\n+    def test_invalid_timeout(self, httpbin):\n         with pytest.raises(ValueError) as e:\n             requests.get(httpbin('get'), timeout=(3, 4, 5))\n         assert '(connect, read)' in str(e)\n@@ -1549,7 +1549,7 @@ class TestTimeout:\n             requests.get(httpbin('get'), timeout=\"foo\")\n         assert 'must be an int or float' in str(e)\n \n-    def test_none_timeout(self):\n+    def test_none_timeout(self, httpbin):\n         \"\"\" Check that you can set None as a valid timeout value.\n \n         To actually test this behavior, we'd want to check that setting the\n@@ -1561,7 +1561,7 @@ class TestTimeout:\n         r = requests.get(httpbin('get'), timeout=None)\n         assert r.status_code == 200\n \n-    def test_read_timeout(self):\n+    def test_read_timeout(self, httpbin):\n         try:\n             requests.get(httpbin('delay/10'), timeout=(None, 0.1))\n             assert False, \"The recv() request should time out.\"\n@@ -1583,7 +1583,7 @@ class TestTimeout:\n         except ConnectTimeout:\n             pass\n \n-    def test_encoded_methods(self):\n+    def test_encoded_methods(self, httpbin):\n         \"\"\"See: https://github.com/kennethreitz/requests/issues/2316\"\"\"\n         r = requests.request(b'GET', httpbin('get'))\n         assert r.ok\n@@ -1634,7 +1634,7 @@ class TestRedirects:\n         'proxies': {},\n     }\n \n-    def test_requests_are_updated_each_time(self):\n+    def test_requests_are_updated_each_time(self, httpbin):\n         session = RedirectSession([303, 307])\n         prep = requests.Request('POST', httpbin('post')).prepare()\n         r0 = session.send(prep)\n@@ -1716,7 +1716,7 @@ def test_prepare_unicode_url():\n     assert_copy(p, p.copy())\n \n \n-def test_urllib3_retries():\n+def test_urllib3_retries(httpbin):\n     from requests.packages.urllib3.util import Retry\n     s = requests.Session()\n     s.mount('http://', HTTPAdapter(max_retries=Retry(\n@@ -1727,7 +1727,7 @@ def test_urllib3_retries():\n         s.get(httpbin('status/500'))\n \n \n-def test_urllib3_pool_connection_closed():\n+def test_urllib3_pool_connection_closed(httpbin):\n     s = requests.Session()\n     s.mount('http://', HTTPAdapter(pool_connections=0, pool_maxsize=0))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
