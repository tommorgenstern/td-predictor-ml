{"custom_id": "fastapi#d5ecbaceae3a4e19191bf3771a1dbfd33aa1e8f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 30 | Files Changed: 6 | Hunks: 27 | Methods Changed: 15 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 87 | Churn Cumulative: 4673 | Contributors (this commit): 23 | Commits (past 90d): 8 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -63,7 +63,7 @@ class OAuth2PasswordRequestForm:\n         *,\n         grant_type: Annotated[\n             Union[str, None],\n-            Form(pattern=\"password\"),\n+            Form(pattern=\"^password$\"),\n             Doc(\n                 \"\"\"\n                 The OAuth2 spec says it is required and MUST be the fixed string\n@@ -217,7 +217,7 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n         self,\n         grant_type: Annotated[\n             str,\n-            Form(pattern=\"password\"),\n+            Form(pattern=\"^password$\"),\n             Doc(\n                 \"\"\"\n                 The OAuth2 spec says it is required and MUST be the fixed string\n\n@@ -1,3 +1,4 @@\n+import pytest\n from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n@@ -137,10 +138,18 @@ def test_strict_login_no_grant_type():\n     )\n \n \n-def test_strict_login_incorrect_grant_type():\n+@pytest.mark.parametrize(\n+    argnames=[\"grant_type\"],\n+    argvalues=[\n+        pytest.param(\"incorrect\", id=\"incorrect value\"),\n+        pytest.param(\"passwordblah\", id=\"password with suffix\"),\n+        pytest.param(\"blahpassword\", id=\"password with prefix\"),\n+    ],\n+)\n+def test_strict_login_incorrect_grant_type(grant_type: str):\n     response = client.post(\n         \"/login\",\n-        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n     )\n     assert response.status_code == 422\n     assert response.json() == IsDict(\n@@ -149,9 +158,9 @@ def test_strict_login_incorrect_grant_type():\n                 {\n                     \"type\": \"string_pattern_mismatch\",\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": \"String should match pattern 'password'\",\n-                    \"input\": \"incorrect\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"msg\": \"String should match pattern '^password$'\",\n+                    \"input\": grant_type,\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -161,9 +170,9 @@ def test_strict_login_incorrect_grant_type():\n             \"detail\": [\n                 {\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": 'string does not match regex \"password\"',\n+                    \"msg\": 'string does not match regex \"^password$\"',\n                     \"type\": \"value_error.str.regex\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -248,7 +257,7 @@ def test_openapi_schema():\n                     \"properties\": {\n                         \"grant_type\": {\n                             \"title\": \"Grant Type\",\n-                            \"pattern\": \"password\",\n+                            \"pattern\": \"^password$\",\n                             \"type\": \"string\",\n                         },\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n\n@@ -1,5 +1,6 @@\n from typing import Optional\n \n+import pytest\n from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n@@ -141,10 +142,18 @@ def test_strict_login_no_grant_type():\n     )\n \n \n-def test_strict_login_incorrect_grant_type():\n+@pytest.mark.parametrize(\n+    argnames=[\"grant_type\"],\n+    argvalues=[\n+        pytest.param(\"incorrect\", id=\"incorrect value\"),\n+        pytest.param(\"passwordblah\", id=\"password with suffix\"),\n+        pytest.param(\"blahpassword\", id=\"password with prefix\"),\n+    ],\n+)\n+def test_strict_login_incorrect_grant_type(grant_type: str):\n     response = client.post(\n         \"/login\",\n-        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n     )\n     assert response.status_code == 422\n     assert response.json() == IsDict(\n@@ -153,9 +162,9 @@ def test_strict_login_incorrect_grant_type():\n                 {\n                     \"type\": \"string_pattern_mismatch\",\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": \"String should match pattern 'password'\",\n-                    \"input\": \"incorrect\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"msg\": \"String should match pattern '^password$'\",\n+                    \"input\": grant_type,\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -165,9 +174,9 @@ def test_strict_login_incorrect_grant_type():\n             \"detail\": [\n                 {\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": 'string does not match regex \"password\"',\n+                    \"msg\": 'string does not match regex \"^password$\"',\n                     \"type\": \"value_error.str.regex\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -252,7 +261,7 @@ def test_openapi_schema():\n                     \"properties\": {\n                         \"grant_type\": {\n                             \"title\": \"Grant Type\",\n-                            \"pattern\": \"password\",\n+                            \"pattern\": \"^password$\",\n                             \"type\": \"string\",\n                         },\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n\n@@ -1,5 +1,6 @@\n from typing import Optional\n \n+import pytest\n from dirty_equals import IsDict\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n@@ -142,10 +143,18 @@ def test_strict_login_no_grant_type():\n     )\n \n \n-def test_strict_login_incorrect_grant_type():\n+@pytest.mark.parametrize(\n+    argnames=[\"grant_type\"],\n+    argvalues=[\n+        pytest.param(\"incorrect\", id=\"incorrect value\"),\n+        pytest.param(\"passwordblah\", id=\"password with suffix\"),\n+        pytest.param(\"blahpassword\", id=\"password with prefix\"),\n+    ],\n+)\n+def test_strict_login_incorrect_grant_type(grant_type: str):\n     response = client.post(\n         \"/login\",\n-        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+        data={\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": grant_type},\n     )\n     assert response.status_code == 422\n     assert response.json() == IsDict(\n@@ -154,9 +163,9 @@ def test_strict_login_incorrect_grant_type():\n                 {\n                     \"type\": \"string_pattern_mismatch\",\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": \"String should match pattern 'password'\",\n-                    \"input\": \"incorrect\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"msg\": \"String should match pattern '^password$'\",\n+                    \"input\": grant_type,\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -166,9 +175,9 @@ def test_strict_login_incorrect_grant_type():\n             \"detail\": [\n                 {\n                     \"loc\": [\"body\", \"grant_type\"],\n-                    \"msg\": 'string does not match regex \"password\"',\n+                    \"msg\": 'string does not match regex \"^password$\"',\n                     \"type\": \"value_error.str.regex\",\n-                    \"ctx\": {\"pattern\": \"password\"},\n+                    \"ctx\": {\"pattern\": \"^password$\"},\n                 }\n             ]\n         }\n@@ -253,7 +262,7 @@ def test_openapi_schema():\n                     \"properties\": {\n                         \"grant_type\": {\n                             \"title\": \"Grant Type\",\n-                            \"pattern\": \"password\",\n+                            \"pattern\": \"^password$\",\n                             \"type\": \"string\",\n                         },\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n\n@@ -149,7 +149,7 @@ def test_openapi_schema(client: TestClient):\n                             {\n                                 \"title\": \"Grant Type\",\n                                 \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n+                                    {\"pattern\": \"^password$\", \"type\": \"string\"},\n                                     {\"type\": \"null\"},\n                                 ],\n                             }\n@@ -158,7 +158,7 @@ def test_openapi_schema(client: TestClient):\n                             # TODO: remove when deprecating Pydantic v1\n                             {\n                                 \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n+                                \"pattern\": \"^password$\",\n                                 \"type\": \"string\",\n                             }\n                         ),\n\n@@ -363,7 +363,7 @@ def test_openapi_schema(mod: ModuleType):\n                             {\n                                 \"title\": \"Grant Type\",\n                                 \"anyOf\": [\n-                                    {\"pattern\": \"password\", \"type\": \"string\"},\n+                                    {\"pattern\": \"^password$\", \"type\": \"string\"},\n                                     {\"type\": \"null\"},\n                                 ],\n                             }\n@@ -372,7 +372,7 @@ def test_openapi_schema(mod: ModuleType):\n                             # TODO: remove when deprecating Pydantic v1\n                             {\n                                 \"title\": \"Grant Type\",\n-                                \"pattern\": \"password\",\n+                                \"pattern\": \"^password$\",\n                                 \"type\": \"string\",\n                             }\n                         ),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#30b270be9ac9cf931b0efaac549ba0ad8112f547", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 25 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 37 | Churn Cumulative: 512 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,7 +9,15 @@ from typing_extensions import Annotated, Doc\n \n \n class APIKeyBase(SecurityBase):\n-    pass\n+    @staticmethod\n+    def check_api_key(api_key: Optional[str], auto_error: bool) -> Optional[str]:\n+        if not api_key:\n+            if auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+                )\n+            return None\n+        return api_key\n \n \n class APIKeyQuery(APIKeyBase):\n@@ -101,14 +109,7 @@ class APIKeyQuery(APIKeyBase):\n \n     async def __call__(self, request: Request) -> Optional[str]:\n         api_key = request.query_params.get(self.model.name)\n-        if not api_key:\n-            if self.auto_error:\n-                raise HTTPException(\n-                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n-                )\n-            else:\n-                return None\n-        return api_key\n+        return self.check_api_key(api_key, self.auto_error)\n \n \n class APIKeyHeader(APIKeyBase):\n@@ -196,14 +197,7 @@ class APIKeyHeader(APIKeyBase):\n \n     async def __call__(self, request: Request) -> Optional[str]:\n         api_key = request.headers.get(self.model.name)\n-        if not api_key:\n-            if self.auto_error:\n-                raise HTTPException(\n-                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n-                )\n-            else:\n-                return None\n-        return api_key\n+        return self.check_api_key(api_key, self.auto_error)\n \n \n class APIKeyCookie(APIKeyBase):\n@@ -291,11 +285,4 @@ class APIKeyCookie(APIKeyBase):\n \n     async def __call__(self, request: Request) -> Optional[str]:\n         api_key = request.cookies.get(self.model.name)\n-        if not api_key:\n-            if self.auto_error:\n-                raise HTTPException(\n-                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n-                )\n-            else:\n-                return None\n-        return api_key\n+        return self.check_api_key(api_key, self.auto_error)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9667ce87a908eecc2be2a215adcb55c7e1b38040", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 37 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ app = FastAPI()\n @app.post(\"/items/\")\n async def create_item(item: Item):\n     item_dict = item.dict()\n-    if item.tax:\n+    if item.tax is not None:\n         price_with_tax = item.price + item.tax\n         item_dict.update({\"price_with_tax\": price_with_tax})\n     return item_dict\n\n@@ -15,7 +15,7 @@ app = FastAPI()\n @app.post(\"/items/\")\n async def create_item(item: Item):\n     item_dict = item.dict()\n-    if item.tax:\n+    if item.tax is not None:\n         price_with_tax = item.price + item.tax\n         item_dict.update({\"price_with_tax\": price_with_tax})\n     return item_dict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7128971f1d61e2e1e6f220a5f66baa925b635278", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 515 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.7\"\n+__version__ = \"0.115.8\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1e6d95ce6d9ab5bc13796d2d068540e9c765e4c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 294 | Files Changed: 5 | Hunks: 13 | Methods Changed: 43 | Complexity Δ (Sum/Max): -27/1 | Churn Δ: 334 | Churn Cumulative: 681 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,25 +1,48 @@\n-from docs_src.dependency_testing.tutorial001 import (\n-    app,\n-    client,\n-    test_override_in_items,\n-    test_override_in_items_with_params,\n-    test_override_in_items_with_q,\n+import importlib\n+from types import ModuleType\n+\n+import pytest\n+\n+from ...utils import needs_py39, needs_py310\n+\n+\n+@pytest.fixture(\n+    name=\"test_module\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n )\n+def get_test_module(request: pytest.FixtureRequest) -> ModuleType:\n+    mod: ModuleType = importlib.import_module(\n+        f\"docs_src.dependency_testing.{request.param}\"\n+    )\n+    return mod\n \n \n-def test_override_in_items_run():\n+def test_override_in_items_run(test_module: ModuleType):\n+    test_override_in_items = test_module.test_override_in_items\n+\n     test_override_in_items()\n \n \n-def test_override_in_items_with_q_run():\n+def test_override_in_items_with_q_run(test_module: ModuleType):\n+    test_override_in_items_with_q = test_module.test_override_in_items_with_q\n+\n     test_override_in_items_with_q()\n \n \n-def test_override_in_items_with_params_run():\n+def test_override_in_items_with_params_run(test_module: ModuleType):\n+    test_override_in_items_with_params = test_module.test_override_in_items_with_params\n+\n     test_override_in_items_with_params()\n \n \n-def test_override_in_users():\n+def test_override_in_users(test_module: ModuleType):\n+    client = test_module.client\n     response = client.get(\"/users/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -28,7 +51,8 @@ def test_override_in_users():\n     }\n \n \n-def test_override_in_users_with_q():\n+def test_override_in_users_with_q(test_module: ModuleType):\n+    client = test_module.client\n     response = client.get(\"/users/?q=foo\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -37,7 +61,8 @@ def test_override_in_users_with_q():\n     }\n \n \n-def test_override_in_users_with_params():\n+def test_override_in_users_with_params(test_module: ModuleType):\n+    client = test_module.client\n     response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -46,7 +71,9 @@ def test_override_in_users_with_params():\n     }\n \n \n-def test_normal_app():\n+def test_normal_app(test_module: ModuleType):\n+    app = test_module.app\n+    client = test_module.client\n     app.dependency_overrides = None\n     response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n     assert response.status_code == 200, response.text\n\n@@ -1,56 +0,0 @@\n-from docs_src.dependency_testing.tutorial001_an import (\n-    app,\n-    client,\n-    test_override_in_items,\n-    test_override_in_items_with_params,\n-    test_override_in_items_with_q,\n-)\n-\n-\n-def test_override_in_items_run():\n-    test_override_in_items()\n-\n-\n-def test_override_in_items_with_q_run():\n-    test_override_in_items_with_q()\n-\n-\n-def test_override_in_items_with_params_run():\n-    test_override_in_items_with_params()\n-\n-\n-def test_override_in_users():\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-def test_override_in_users_with_q():\n-    response = client.get(\"/users/?q=foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-def test_override_in_users_with_params():\n-    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-def test_normal_app():\n-    app.dependency_overrides = None\n-    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Items!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n-    }\n\n@@ -1,75 +0,0 @@\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test_override_in_items_run():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import test_override_in_items\n-\n-    test_override_in_items()\n-\n-\n-@needs_py310\n-def test_override_in_items_with_q_run():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import (\n-        test_override_in_items_with_q,\n-    )\n-\n-    test_override_in_items_with_q()\n-\n-\n-@needs_py310\n-def test_override_in_items_with_params_run():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import (\n-        test_override_in_items_with_params,\n-    )\n-\n-    test_override_in_items_with_params()\n-\n-\n-@needs_py310\n-def test_override_in_users():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import client\n-\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_override_in_users_with_q():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import client\n-\n-    response = client.get(\"/users/?q=foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_override_in_users_with_params():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import client\n-\n-    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_normal_app():\n-    from docs_src.dependency_testing.tutorial001_an_py310 import app, client\n-\n-    app.dependency_overrides = None\n-    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Items!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n-    }\n\n@@ -1,75 +0,0 @@\n-from ...utils import needs_py39\n-\n-\n-@needs_py39\n-def test_override_in_items_run():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import test_override_in_items\n-\n-    test_override_in_items()\n-\n-\n-@needs_py39\n-def test_override_in_items_with_q_run():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import (\n-        test_override_in_items_with_q,\n-    )\n-\n-    test_override_in_items_with_q()\n-\n-\n-@needs_py39\n-def test_override_in_items_with_params_run():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import (\n-        test_override_in_items_with_params,\n-    )\n-\n-    test_override_in_items_with_params()\n-\n-\n-@needs_py39\n-def test_override_in_users():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import client\n-\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py39\n-def test_override_in_users_with_q():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import client\n-\n-    response = client.get(\"/users/?q=foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py39\n-def test_override_in_users_with_params():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import client\n-\n-    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py39\n-def test_normal_app():\n-    from docs_src.dependency_testing.tutorial001_an_py39 import app, client\n-\n-    app.dependency_overrides = None\n-    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Items!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n-    }\n\n@@ -1,75 +0,0 @@\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test_override_in_items_run():\n-    from docs_src.dependency_testing.tutorial001_py310 import test_override_in_items\n-\n-    test_override_in_items()\n-\n-\n-@needs_py310\n-def test_override_in_items_with_q_run():\n-    from docs_src.dependency_testing.tutorial001_py310 import (\n-        test_override_in_items_with_q,\n-    )\n-\n-    test_override_in_items_with_q()\n-\n-\n-@needs_py310\n-def test_override_in_items_with_params_run():\n-    from docs_src.dependency_testing.tutorial001_py310 import (\n-        test_override_in_items_with_params,\n-    )\n-\n-    test_override_in_items_with_params()\n-\n-\n-@needs_py310\n-def test_override_in_users():\n-    from docs_src.dependency_testing.tutorial001_py310 import client\n-\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_override_in_users_with_q():\n-    from docs_src.dependency_testing.tutorial001_py310 import client\n-\n-    response = client.get(\"/users/?q=foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_override_in_users_with_params():\n-    from docs_src.dependency_testing.tutorial001_py310 import client\n-\n-    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Users!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n-    }\n-\n-\n-@needs_py310\n-def test_normal_app():\n-    from docs_src.dependency_testing.tutorial001_py310 import app, client\n-\n-    app.dependency_overrides = None\n-    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"message\": \"Hello Items!\",\n-        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f6872dd29849a07a8cfd475c7c56dfa3f3ea5808", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 51 | Files Changed: 5 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): -3/1 | Churn Δ: 74 | Churn Cumulative: 157 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 16 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,7 +1,28 @@\n-from docs_src.app_testing.app_b import test_main\n+import importlib\n+from types import ModuleType\n+\n+import pytest\n+\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_app():\n+@pytest.fixture(\n+    name=\"test_module\",\n+    params=[\n+        \"app_b.test_main\",\n+        pytest.param(\"app_b_py310.test_main\", marks=needs_py310),\n+        \"app_b_an.test_main\",\n+        pytest.param(\"app_b_an_py39.test_main\", marks=needs_py39),\n+        pytest.param(\"app_b_an_py310.test_main\", marks=needs_py310),\n+    ],\n+)\n+def get_test_module(request: pytest.FixtureRequest) -> ModuleType:\n+    mod: ModuleType = importlib.import_module(f\"docs_src.app_testing.{request.param}\")\n+    return mod\n+\n+\n+def test_app(test_module: ModuleType):\n+    test_main = test_module\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n\n@@ -1,10 +0,0 @@\n-from docs_src.app_testing.app_b_an import test_main\n-\n-\n-def test_app():\n-    test_main.test_create_existing_item()\n-    test_main.test_create_item()\n-    test_main.test_create_item_bad_token()\n-    test_main.test_read_nonexistent_item()\n-    test_main.test_read_item()\n-    test_main.test_read_item_bad_token()\n\n@@ -1,13 +0,0 @@\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test_app():\n-    from docs_src.app_testing.app_b_an_py310 import test_main\n-\n-    test_main.test_create_existing_item()\n-    test_main.test_create_item()\n-    test_main.test_create_item_bad_token()\n-    test_main.test_read_nonexistent_item()\n-    test_main.test_read_item()\n-    test_main.test_read_item_bad_token()\n\n@@ -1,13 +0,0 @@\n-from ...utils import needs_py39\n-\n-\n-@needs_py39\n-def test_app():\n-    from docs_src.app_testing.app_b_an_py39 import test_main\n-\n-    test_main.test_create_existing_item()\n-    test_main.test_create_item()\n-    test_main.test_create_item_bad_token()\n-    test_main.test_read_nonexistent_item()\n-    test_main.test_read_item()\n-    test_main.test_read_item_bad_token()\n\n@@ -1,13 +0,0 @@\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test_app():\n-    from docs_src.app_testing.app_b_py310 import test_main\n-\n-    test_main.test_create_existing_item()\n-    test_main.test_create_item()\n-    test_main.test_create_item_bad_token()\n-    test_main.test_read_nonexistent_item()\n-    test_main.test_read_item()\n-    test_main.test_read_item_bad_token()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9ec452a154e15e4af0f57f51a4fe1fee58879c4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 77 | Files Changed: 11 | Hunks: 11 | Methods Changed: 14 | Complexity Δ (Sum/Max): -12/0 | Churn Δ: 82 | Churn Cumulative: 230 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,11 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: str = Query(default=..., min_length=3)):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,12 +0,0 @@\n-from fastapi import FastAPI, Query\n-from typing_extensions import Annotated\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from typing import Annotated\n-\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Union[str, None] = Query(default=..., min_length=3)):\n+async def read_items(q: Union[str, None] = Query(min_length=3)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n+async def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Annotated[str | None, Query(min_length=3)] = ...):\n+async def read_items(q: Annotated[str | None, Query(min_length=3)]):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n+async def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str | None = Query(default=..., min_length=3)):\n+async def read_items(q: str | None = Query(min_length=3)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,11 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: str = Query(default=..., min_length=3)):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,12 +0,0 @@\n-from fastapi import FastAPI, Query\n-from typing_extensions import Annotated\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from typing import Annotated\n-\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#08b817a84294a7e606f8437d11ee75fd3ef207a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 10 | Files Changed: 8 | Hunks: 10 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 1352 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -95,7 +95,7 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n\n@@ -96,7 +96,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n\n@@ -95,7 +95,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n\n@@ -95,7 +95,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n\n@@ -94,7 +94,7 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_data = TokenData(username=username)\n\n@@ -117,7 +117,7 @@ async def get_current_user(\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n\n@@ -116,7 +116,7 @@ async def get_current_user(\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, timedelta, timezone\n-from typing import Annotated, List, Union\n+from typing import Annotated, Union\n \n import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -44,7 +44,7 @@ class Token(BaseModel):\n \n class TokenData(BaseModel):\n     username: Union[str, None] = None\n-    scopes: List[str] = []\n+    scopes: list[str] = []\n \n \n class User(BaseModel):\n@@ -116,7 +116,7 @@ async def get_current_user(\n     )\n     try:\n         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n-        username: str = payload.get(\"sub\")\n+        username = payload.get(\"sub\")\n         if username is None:\n             raise credentials_exception\n         token_scopes = payload.get(\"scopes\", [])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5451d05bc84fc8888dfc9cd8a9f3b2c3987c751e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 121 | Lines Deleted: 2165 | Files Changed: 23 | Hunks: 42 | Methods Changed: 106 | Complexity Δ (Sum/Max): -76/1 | Churn Δ: 2286 | Churn Cumulative: 6628 | Contributors (this commit): 8 | Commits (past 90d): 28 | Contributors (cumulative): 63 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,14 +1,29 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39, needs_py310\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial010\",\n+        pytest.param(\"tutorial010_py310\", marks=needs_py310),\n+        \"tutorial010_an\",\n+        pytest.param(\"tutorial010_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial010_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,168 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_query_params_str_validations_no_query(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-def test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n-        \"q\": \"fixedquery\",\n-    }\n-\n-\n-def test_query_params_str_validations_q_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-def test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"string_pattern_mismatch\",\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": \"String should match pattern '^fixedquery$'\",\n-                    \"input\": \"nonregexquery\",\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n-                    \"type\": \"value_error.str.regex\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"description\": \"Query string for the items to search in the database that have a good match\",\n-                            \"required\": False,\n-                            \"deprecated\": True,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\n-                                            \"type\": \"string\",\n-                                            \"minLength\": 3,\n-                                            \"maxLength\": 50,\n-                                            \"pattern\": \"^fixedquery$\",\n-                                        },\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Query string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n-                                    **(\n-                                        {\"deprecated\": True}\n-                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n-                                        else {}\n-                                    ),\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Query string\",\n-                                    \"maxLength\": 50,\n-                                    \"minLength\": 3,\n-                                    \"pattern\": \"^fixedquery$\",\n-                                    \"type\": \"string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                }\n-                            ),\n-                            \"name\": \"item-query\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,175 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_no_query(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n-        \"q\": \"fixedquery\",\n-    }\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_q_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"string_pattern_mismatch\",\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": \"String should match pattern '^fixedquery$'\",\n-                    \"input\": \"nonregexquery\",\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n-                    \"type\": \"value_error.str.regex\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"description\": \"Query string for the items to search in the database that have a good match\",\n-                            \"required\": False,\n-                            \"deprecated\": True,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\n-                                            \"type\": \"string\",\n-                                            \"minLength\": 3,\n-                                            \"maxLength\": 50,\n-                                            \"pattern\": \"^fixedquery$\",\n-                                        },\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Query string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n-                                    **(\n-                                        {\"deprecated\": True}\n-                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n-                                        else {}\n-                                    ),\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Query string\",\n-                                    \"maxLength\": 50,\n-                                    \"minLength\": 3,\n-                                    \"pattern\": \"^fixedquery$\",\n-                                    \"type\": \"string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                }\n-                            ),\n-                            \"name\": \"item-query\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,175 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_query_params_str_validations_no_query(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py39\n-def test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n-        \"q\": \"fixedquery\",\n-    }\n-\n-\n-@needs_py39\n-def test_query_params_str_validations_q_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py39\n-def test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"string_pattern_mismatch\",\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": \"String should match pattern '^fixedquery$'\",\n-                    \"input\": \"nonregexquery\",\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n-                    \"type\": \"value_error.str.regex\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"description\": \"Query string for the items to search in the database that have a good match\",\n-                            \"required\": False,\n-                            \"deprecated\": True,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\n-                                            \"type\": \"string\",\n-                                            \"minLength\": 3,\n-                                            \"maxLength\": 50,\n-                                            \"pattern\": \"^fixedquery$\",\n-                                        },\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Query string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n-                                    **(\n-                                        {\"deprecated\": True}\n-                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n-                                        else {}\n-                                    ),\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Query string\",\n-                                    \"maxLength\": 50,\n-                                    \"minLength\": 3,\n-                                    \"pattern\": \"^fixedquery$\",\n-                                    \"type\": \"string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                }\n-                            ),\n-                            \"name\": \"item-query\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,175 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_no_query(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_item_query_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}],\n-        \"q\": \"fixedquery\",\n-    }\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_q_fixedquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"q\": \"fixedquery\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-\n-\n-@needs_py310\n-def test_query_params_str_validations_item_query_nonregexquery(client: TestClient):\n-    response = client.get(\"/items/\", params={\"item-query\": \"nonregexquery\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"string_pattern_mismatch\",\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": \"String should match pattern '^fixedquery$'\",\n-                    \"input\": \"nonregexquery\",\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-                    \"loc\": [\"query\", \"item-query\"],\n-                    \"msg\": 'string does not match regex \"^fixedquery$\"',\n-                    \"type\": \"value_error.str.regex\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"description\": \"Query string for the items to search in the database that have a good match\",\n-                            \"required\": False,\n-                            \"deprecated\": True,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\n-                                            \"type\": \"string\",\n-                                            \"minLength\": 3,\n-                                            \"maxLength\": 50,\n-                                            \"pattern\": \"^fixedquery$\",\n-                                        },\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Query string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n-                                    **(\n-                                        {\"deprecated\": True}\n-                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n-                                        else {}\n-                                    ),\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Query string\",\n-                                    \"maxLength\": 50,\n-                                    \"minLength\": 3,\n-                                    \"pattern\": \"^fixedquery$\",\n-                                    \"type\": \"string\",\n-                                    \"description\": \"Query string for the items to search in the database that have a good match\",\n-                                }\n-                            ),\n-                            \"name\": \"item-query\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,26 +1,47 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.query_params_str_validations.tutorial011 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_multi_query_values():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial011\",\n+        pytest.param(\"tutorial011_py39\", marks=needs_py310),\n+        pytest.param(\"tutorial011_py310\", marks=needs_py310),\n+        \"tutorial011_an\",\n+        pytest.param(\"tutorial011_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial011_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_multi_query_values(client: TestClient):\n     url = \"/items/?q=foo&q=bar\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n-def test_query_no_values():\n+def test_query_no_values(client: TestClient):\n     url = \"/items/\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": None}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,108 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.query_params_str_validations.tutorial011_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Q\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py310\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Q\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Q\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py310\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Q\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"Q\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,25 +1,44 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.query_params_str_validations.tutorial012 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_default_query_values():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial012\",\n+        pytest.param(\"tutorial012_py39\", marks=needs_py39),\n+        \"tutorial012_an\",\n+        pytest.param(\"tutorial012_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_default_query_values(client: TestClient):\n     url = \"/items/\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n-def test_multi_query_values():\n+def test_multi_query_values(client: TestClient):\n     url = \"/items/?q=baz&q=foobar\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,96 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.query_params_str_validations.tutorial012_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_default_query_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Q\",\n-                                \"type\": \"array\",\n-                                \"items\": {\"type\": \"string\"},\n-                                \"default\": [\"foo\", \"bar\"],\n-                            },\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,106 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial012_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_default_query_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Q\",\n-                                \"type\": \"array\",\n-                                \"items\": {\"type\": \"string\"},\n-                                \"default\": [\"foo\", \"bar\"],\n-                            },\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,106 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial012_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_default_query_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Q\",\n-                                \"type\": \"array\",\n-                                \"items\": {\"type\": \"string\"},\n-                                \"default\": [\"foo\", \"bar\"],\n-                            },\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,25 +1,43 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.query_params_str_validations.tutorial013 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_multi_query_values():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial013\",\n+        \"tutorial013_an\",\n+        pytest.param(\"tutorial013_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_multi_query_values(client: TestClient):\n     url = \"/items/?q=foo&q=bar\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n-def test_query_no_values():\n+def test_query_no_values(client: TestClient):\n     url = \"/items/\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": []}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,96 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.query_params_str_validations.tutorial013_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": []}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Q\",\n-                                \"type\": \"array\",\n-                                \"items\": {},\n-                                \"default\": [],\n-                            },\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,106 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial013_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": []}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Q\",\n-                                \"type\": \"array\",\n-                                \"items\": {},\n-                                \"default\": [],\n-                            },\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,23 +1,43 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.query_params_str_validations.tutorial014 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_hidden_query():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial014\",\n+        pytest.param(\"tutorial014_py310\", marks=needs_py310),\n+        \"tutorial014_an\",\n+        pytest.param(\"tutorial014_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial014_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_hidden_query(client: TestClient):\n     response = client.get(\"/items?hidden_query=somevalue\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"hidden_query\": \"somevalue\"}\n \n \n-def test_no_hidden_query():\n+def test_no_hidden_query(client: TestClient):\n     response = client.get(\"/items\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"hidden_query\": \"Not found\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,81 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.query_params_str_validations.tutorial014_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_hidden_query():\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-def test_no_hidden_query():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,91 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,91 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,91 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
