{"custom_id": "fastapi#d666ccb62216e45ca78643b52c235ba0d2c53986", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 411 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.94.1\"\n+__version__ = \"0.95.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fdf66c825ed70da423724180e91b02345aa36326", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 48 | Churn Cumulative: 2591 | Contributors (this commit): 31 | Commits (past 90d): 5 | Contributors (cumulative): 33 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,7 @@\n import dataclasses\n import inspect\n from contextlib import contextmanager\n-from copy import deepcopy\n+from copy import copy, deepcopy\n from typing import (\n     Any,\n     Callable,\n@@ -383,7 +383,8 @@ def analyze_param(\n         ), f\"Cannot specify multiple `Annotated` FastAPI arguments for {param_name!r}\"\n         fastapi_annotation = next(iter(fastapi_annotations), None)\n         if isinstance(fastapi_annotation, FieldInfo):\n-            field_info = fastapi_annotation\n+            # Copy `field_info` because we mutate `field_info.default` below.\n+            field_info = copy(fastapi_annotation)\n             assert field_info.default is Undefined or field_info.default is Required, (\n                 f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n                 f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n\n@@ -1,5 +1,5 @@\n import pytest\n-from fastapi import FastAPI, Query\n+from fastapi import APIRouter, FastAPI, Query\n from fastapi.testclient import TestClient\n from typing_extensions import Annotated\n \n@@ -224,3 +224,44 @@ def test_get(path, expected_status, expected_response):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_multiple_path():\n+    @app.get(\"/test1\")\n+    @app.get(\"/test2\")\n+    async def test(var: Annotated[str, Query()] = \"bar\"):\n+        return {\"foo\": var}\n+\n+    response = client.get(\"/test1\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+    response = client.get(\"/test1\", params={\"var\": \"baz\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"baz\"}\n+\n+    response = client.get(\"/test2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+    response = client.get(\"/test2\", params={\"var\": \"baz\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"baz\"}\n+\n+\n+def test_nested_router():\n+    app = FastAPI()\n+\n+    router = APIRouter(prefix=\"/nested\")\n+\n+    @router.get(\"/test\")\n+    async def test(var: Annotated[str, Query()] = \"bar\"):\n+        return {\"foo\": var}\n+\n+    app.include_router(router)\n+\n+    client = TestClient(app)\n+\n+    response = client.get(\"/nested/test\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c81e136d75f5ac4252df740b35551cf2afb4c7f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 413 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.95.0\"\n+__version__ = \"0.95.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#50c1a928fbb7aea45e05baadb879c582052b4cf7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13787 | Lines Deleted: 12859 | Files Changed: 280 | Hunks: 1113 | Methods Changed: 956 | Complexity Δ (Sum/Max): 35/5 | Churn Δ: 26646 | Churn Cumulative: 77267 | Contributors (this commit): 62 | Commits (past 90d): 363 | Contributors (cumulative): 700 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,16 @@ def foo(items: Items):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_additional_properties_post():\n+    response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": 1, \"bar\": 2}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -76,7 +85,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -96,15 +107,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_additional_properties_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_additional_properties_post():\n-    response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"foo\": 1, \"bar\": 2}\n\n@@ -17,8 +17,19 @@ router.include_router(sub_router, prefix=\"/items\")\n \n app.include_router(router)\n \n+client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operation():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"foo\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,17 +47,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operation():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"id\": \"foo\"}\n\n@@ -25,7 +25,13 @@ def main_route(callback_url: HttpUrl):\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -82,7 +88,9 @@ openapi_schema = {\n                                         },\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                     },\n                                 }\n@@ -119,7 +127,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -128,11 +138,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n\n@@ -30,7 +30,13 @@ async def a(id):\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -41,7 +47,9 @@ openapi_schema = {\n                             \"description\": \"Error\",\n                             \"content\": {\n                                 \"application/vnd.api+json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -89,12 +97,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n\n@@ -9,7 +9,13 @@ async def a(id):\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +60,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,12 +82,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n\n@@ -35,7 +35,13 @@ async def b():\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -46,7 +52,9 @@ openapi_schema = {\n                             \"description\": \"Error\",\n                             \"content\": {\n                                 \"application/vnd.api+json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -106,12 +114,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n\n@@ -53,7 +53,38 @@ async def d():\n \n app.include_router(router)\n \n-openapi_schema = {\n+\n+client = TestClient(app)\n+\n+\n+def test_a():\n+    response = client.get(\"/a\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"a\"\n+\n+\n+def test_b():\n+    response = client.get(\"/b\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"b\"\n+\n+\n+def test_c():\n+    response = client.get(\"/c\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"c\"\n+\n+\n+def test_d():\n+    response = client.get(\"/d\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"d\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -107,7 +138,9 @@ openapi_schema = {\n                             \"description\": \"Server Error\",\n                             \"content\": {\n                                 \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ResponseModel\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -119,7 +152,9 @@ openapi_schema = {\n                             \"description\": \"Default Response\",\n                             \"content\": {\n                                 \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ResponseModel\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/ResponseModel\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -140,35 +175,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_a():\n-    response = client.get(\"/a\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"a\"\n-\n-\n-def test_b():\n-    response = client.get(\"/b\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"b\"\n-\n-\n-def test_c():\n-    response = client.get(\"/c\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"c\"\n-\n-\n-def test_d():\n-    response = client.get(\"/d\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"d\"\n\n@@ -28,7 +28,96 @@ async def unrelated(foo: Annotated[str, object()]):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+foo_is_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+foo_is_short = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 1},\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"ensure this value has at least 1 characters\",\n+            \"type\": \"value_error.any_str.min_length\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/default\", 200, {\"foo\": \"foo\"}),\n+        (\"/default?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required\", 422, foo_is_missing),\n+        (\"/required?foo=\", 422, foo_is_short),\n+        (\"/multiple?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/multiple\", 422, foo_is_missing),\n+        (\"/multiple?foo=\", 422, foo_is_short),\n+        (\"/unrelated?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/unrelated\", 422, foo_is_missing),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_multiple_path():\n+    app = FastAPI()\n+\n+    @app.get(\"/test1\")\n+    @app.get(\"/test2\")\n+    async def test(var: Annotated[str, Query()] = \"bar\"):\n+        return {\"foo\": var}\n+\n+    client = TestClient(app)\n+    response = client.get(\"/test1\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+    response = client.get(\"/test1\", params={\"var\": \"baz\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"baz\"}\n+\n+    response = client.get(\"/test2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+    response = client.get(\"/test2\", params={\"var\": \"baz\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"baz\"}\n+\n+\n+def test_nested_router():\n+    app = FastAPI()\n+\n+    router = APIRouter(prefix=\"/nested\")\n+\n+    @router.get(\"/test\")\n+    async def test(var: Annotated[str, Query()] = \"bar\"):\n+        return {\"foo\": var}\n+\n+    app.include_router(router)\n+\n+    client = TestClient(app)\n+\n+    response = client.get(\"/nested/test\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -39,7 +128,11 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Foo\", \"type\": \"string\", \"default\": \"foo\"},\n+                            \"schema\": {\n+                                \"title\": \"Foo\",\n+                                \"type\": \"string\",\n+                                \"default\": \"foo\",\n+                            },\n                             \"name\": \"foo\",\n                             \"in\": \"query\",\n                         }\n@@ -69,7 +162,11 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": True,\n-                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                            \"schema\": {\n+                                \"title\": \"Foo\",\n+                                \"minLength\": 1,\n+                                \"type\": \"string\",\n+                            },\n                             \"name\": \"foo\",\n                             \"in\": \"query\",\n                         }\n@@ -99,7 +196,11 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": True,\n-                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                            \"schema\": {\n+                                \"title\": \"Foo\",\n+                                \"minLength\": 1,\n+                                \"type\": \"string\",\n+                            },\n                             \"name\": \"foo\",\n                             \"in\": \"query\",\n                         }\n@@ -174,7 +275,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -183,85 +286,3 @@ openapi_schema = {\n             }\n         },\n     }\n-foo_is_missing = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"foo\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-foo_is_short = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 1},\n-            \"loc\": [\"query\", \"foo\"],\n-            \"msg\": \"ensure this value has at least 1 characters\",\n-            \"type\": \"value_error.any_str.min_length\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/default\", 200, {\"foo\": \"foo\"}),\n-        (\"/default?foo=bar\", 200, {\"foo\": \"bar\"}),\n-        (\"/required?foo=bar\", 200, {\"foo\": \"bar\"}),\n-        (\"/required\", 422, foo_is_missing),\n-        (\"/required?foo=\", 422, foo_is_short),\n-        (\"/multiple?foo=bar\", 200, {\"foo\": \"bar\"}),\n-        (\"/multiple\", 422, foo_is_missing),\n-        (\"/multiple?foo=\", 422, foo_is_short),\n-        (\"/unrelated?foo=bar\", 200, {\"foo\": \"bar\"}),\n-        (\"/unrelated\", 422, foo_is_missing),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_multiple_path():\n-    @app.get(\"/test1\")\n-    @app.get(\"/test2\")\n-    async def test(var: Annotated[str, Query()] = \"bar\"):\n-        return {\"foo\": var}\n-\n-    response = client.get(\"/test1\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"foo\": \"bar\"}\n-\n-    response = client.get(\"/test1\", params={\"var\": \"baz\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"foo\": \"baz\"}\n-\n-    response = client.get(\"/test2\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"foo\": \"bar\"}\n-\n-    response = client.get(\"/test2\", params={\"var\": \"baz\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"foo\": \"baz\"}\n-\n-\n-def test_nested_router():\n-    app = FastAPI()\n-\n-    router = APIRouter(prefix=\"/nested\")\n-\n-    @router.get(\"/test\")\n-    async def test(var: Annotated[str, Query()] = \"bar\"):\n-        return {\"foo\": var}\n-\n-    app.include_router(router)\n-\n-    client = TestClient(app)\n-\n-    response = client.get(\"/nested/test\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"foo\": \"bar\"}\n\n@@ -5,7 +5,56 @@ from .main import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/api_route\", 200, {\"message\": \"Hello World\"}),\n+        (\"/non_decorated_route\", 200, {\"message\": \"Hello World\"}),\n+        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_swagger_ui():\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n+    assert \"swagger-ui-dist\" in response.text\n+    assert (\n+        \"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n+        in response.text\n+    )\n+\n+\n+def test_swagger_ui_oauth2_redirect():\n+    response = client.get(\"/docs/oauth2-redirect\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n+    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n+\n+\n+def test_redoc():\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n+    assert \"redoc@next\" in response.text\n+\n+\n+def test_enum_status_code_response():\n+    response = client.get(\"/enum-status-code\")\n+    assert response.status_code == 201, response.text\n+    assert response.json() == \"foo bar\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -951,7 +1000,11 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Query\", \"type\": \"integer\", \"default\": 10},\n+                            \"schema\": {\n+                                \"title\": \"Query\",\n+                                \"type\": \"integer\",\n+                                \"default\": 10,\n+                            },\n                             \"name\": \"query\",\n                             \"in\": \"query\",\n                         }\n@@ -1106,7 +1159,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -1126,49 +1181,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/api_route\", 200, {\"message\": \"Hello World\"}),\n-        (\"/non_decorated_route\", 200, {\"message\": \"Hello World\"}),\n-        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get_path(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_swagger_ui():\n-    response = client.get(\"/docs\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n-    assert \"swagger-ui-dist\" in response.text\n-    assert (\n-        \"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n-        in response.text\n-    )\n-\n-\n-def test_swagger_ui_oauth2_redirect():\n-    response = client.get(\"/docs/oauth2-redirect\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n-    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n-\n-\n-def test_redoc():\n-    response = client.get(\"/redoc\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n-    assert \"redoc@next\" in response.text\n-\n-\n-def test_enum_status_code_response():\n-    response = client.get(\"/enum-status-code\")\n-    assert response.status_code == 201, response.text\n-    assert response.json() == \"foo bar\"\n\n@@ -46,7 +46,35 @@ app.include_router(router=router_a, prefix=\"/a\")\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/a\", 200, {\"msg\": \"A\"}),\n+        (\"/a/b\", 200, {\"msg\": \"B\"}),\n+        (\"/a/b/c\", 200, {\"msg\": \"C\"}),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_route_classes():\n+    routes = {}\n+    for r in app.router.routes:\n+        assert isinstance(r, Route)\n+        routes[r.path] = r\n+    assert getattr(routes[\"/a/\"], \"x_type\") == \"A\"  # noqa: B009\n+    assert getattr(routes[\"/a/b/\"], \"x_type\") == \"B\"  # noqa: B009\n+    assert getattr(routes[\"/a/b/c/\"], \"x_type\") == \"C\"  # noqa: B009\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -88,28 +116,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/a\", 200, {\"msg\": \"A\"}),\n-        (\"/a/b\", 200, {\"msg\": \"B\"}),\n-        (\"/a/b/c\", 200, {\"msg\": \"C\"}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get_path(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_route_classes():\n-    routes = {}\n-    for r in app.router.routes:\n-        assert isinstance(r, Route)\n-        routes[r.path] = r\n-    assert getattr(routes[\"/a/\"], \"x_type\") == \"A\"  # noqa: B009\n-    assert getattr(routes[\"/a/b/\"], \"x_type\") == \"B\"  # noqa: B009\n-    assert getattr(routes[\"/a/b/c/\"], \"x_type\") == \"C\"  # noqa: B009\n\n@@ -44,7 +44,48 @@ async def no_duplicates_sub(\n     return [item, sub_items]\n \n \n-openapi_schema = {\n+def test_no_duplicates_invalid():\n+    response = client.post(\"/no-duplicates\", json={\"item\": {\"data\": \"myitem\"}})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"item2\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_no_duplicates():\n+    response = client.post(\n+        \"/no-duplicates\",\n+        json={\"item\": {\"data\": \"myitem\"}, \"item2\": {\"data\": \"myitem2\"}},\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem2\"}]\n+\n+\n+def test_duplicates():\n+    response = client.post(\"/with-duplicates\", json={\"data\": \"myitem\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}]\n+\n+\n+def test_sub_duplicates():\n+    response = client.post(\"/with-duplicates-sub\", json={\"data\": \"myitem\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"data\": \"myitem\"},\n+        [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}],\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -177,7 +218,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -186,47 +229,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_duplicates_invalid():\n-    response = client.post(\"/no-duplicates\", json={\"item\": {\"data\": \"myitem\"}})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"body\", \"item2\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            }\n-        ]\n-    }\n-\n-\n-def test_no_duplicates():\n-    response = client.post(\n-        \"/no-duplicates\",\n-        json={\"item\": {\"data\": \"myitem\"}, \"item2\": {\"data\": \"myitem2\"}},\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem2\"}]\n-\n-\n-def test_duplicates():\n-    response = client.post(\"/with-duplicates\", json={\"data\": \"myitem\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}]\n-\n-\n-def test_sub_duplicates():\n-    response = client.post(\"/with-duplicates-sub\", json={\"data\": \"myitem\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"data\": \"myitem\"},\n-        [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}],\n-    ]\n\n@@ -11,7 +11,17 @@ def read_main(request: Request):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -30,15 +40,3 @@ openapi_schema = {\n         },\n         \"servers\": [{\"url\": \"/api/v1\"}],\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    response = client.get(\"/app\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n@@ -23,7 +23,19 @@ def f():\n     return {\"c\": {}, \"d\": {\"a\": {}}}\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_get_api_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"c\": {}, \"d\": {\"a\": {}}}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -65,18 +77,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_api_route():\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"c\": {}, \"d\": {\"a\": {}}}\n\n@@ -52,7 +52,53 @@ def trace_item(item_id: str):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_api_route():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_get_api_route_not_decorated():\n+    response = client.get(\"/items-not-decorated/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_delete():\n+    response = client.request(\"DELETE\", \"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_head():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_options():\n+    response = client.options(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_patch():\n+    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_trace():\n+    response = client.request(\"trace\", \"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"content-type\"] == \"message/http\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -292,7 +338,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -312,51 +360,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_api_route():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\"}\n-\n-\n-def test_get_api_route_not_decorated():\n-    response = client.get(\"/items-not-decorated/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\"}\n-\n-\n-def test_delete():\n-    response = client.request(\"DELETE\", \"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_head():\n-    response = client.head(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_options():\n-    response = client.options(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_patch():\n-    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_trace():\n-    response = client.request(\"trace\", \"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"content-type\"] == \"message/http\"\n\n@@ -40,7 +40,32 @@ async def get_model_a(name: str, model_c=Depends(get_model_c)):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_filter_sub_model():\n+    response = client.get(\"/model/modelA\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"modelA\",\n+        \"description\": \"model-a-desc\",\n+        \"model_b\": {\"username\": \"test-user\"},\n+    }\n+\n+\n+def test_validator_is_cloned():\n+    with pytest.raises(ValidationError) as err:\n+        client.get(\"/model/modelX\")\n+    assert err.value.errors() == [\n+        {\n+            \"loc\": (\"response\", \"name\"),\n+            \"msg\": \"name must end in A\",\n+            \"type\": \"value_error\",\n+        }\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -116,7 +141,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -125,31 +152,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_filter_sub_model():\n-    response = client.get(\"/model/modelA\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"modelA\",\n-        \"description\": \"model-a-desc\",\n-        \"model_b\": {\"username\": \"test-user\"},\n-    }\n-\n-\n-def test_validator_is_cloned():\n-    with pytest.raises(ValidationError) as err:\n-        client.get(\"/model/modelX\")\n-    assert err.value.errors() == [\n-        {\n-            \"loc\": (\"response\", \"name\"),\n-            \"msg\": \"name must end in A\",\n-            \"type\": \"value_error\",\n-        }\n-    ]\n\n@@ -19,7 +19,16 @@ async def create_item(product: Product):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_get_with_body():\n+    body = {\"name\": \"Foo\", \"description\": \"Some description\", \"price\": 5.5}\n+    response = client.request(\"GET\", \"/product\", json=body)\n+    assert response.json() == body\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -85,7 +94,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -94,15 +105,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_with_body():\n-    body = {\"name\": \"Foo\", \"description\": \"Some description\", \"price\": 5.5}\n-    response = client.request(\"GET\", \"/product\", json=body)\n-    assert response.json() == body\n\n@@ -343,16 +343,6 @@ app.include_router(router2_default)\n client = TestClient(app)\n \n \n-def test_openapi():\n-    client = TestClient(app)\n-    with warnings.catch_warnings(record=True) as w:\n-        warnings.simplefilter(\"always\")\n-        response = client.get(\"/openapi.json\")\n-        assert issubclass(w[-1].category, UserWarning)\n-        assert \"Duplicate Operation ID\" in str(w[-1].message)\n-    assert response.json() == openapi_schema\n-\n-\n def test_level1_override():\n     response = client.get(\"/override1?level1=foo\")\n     assert response.json() == \"foo\"\n@@ -445,7 +435,14 @@ def test_paths_level5(override1, override2, override3, override4, override5):\n     assert not override5 or \"x-level5\" in response.headers\n \n \n-openapi_schema = {\n+def test_openapi():\n+    client = TestClient(app)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        response = client.get(\"/openapi.json\")\n+        assert issubclass(w[-1].category, UserWarning)\n+        assert \"Duplicate Operation ID\" in str(w[-1].message)\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -493,13 +490,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -525,13 +527,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -592,13 +599,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -672,13 +684,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -704,13 +721,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -736,13 +758,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -768,13 +795,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -840,13 +872,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -872,13 +909,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -904,13 +946,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -993,13 +1040,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1025,13 +1077,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1057,13 +1114,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1089,13 +1151,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1121,13 +1188,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1153,13 +1225,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1238,13 +1315,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1270,13 +1352,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1302,13 +1389,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1334,13 +1426,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1366,13 +1463,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1451,13 +1553,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1483,13 +1590,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1515,13 +1627,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1547,13 +1664,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1579,13 +1701,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1660,13 +1787,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1692,13 +1824,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1724,13 +1861,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1756,13 +1898,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1841,13 +1988,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1873,13 +2025,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1905,13 +2062,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1937,13 +2099,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -1969,13 +2136,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2050,13 +2222,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2082,13 +2259,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2114,13 +2296,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2146,13 +2333,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2227,13 +2419,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2259,13 +2456,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2291,13 +2493,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2323,13 +2530,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2395,13 +2607,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2427,13 +2644,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2459,13 +2681,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2531,13 +2758,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2563,13 +2795,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2595,13 +2832,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2665,13 +2907,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2697,13 +2944,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2781,13 +3033,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2813,13 +3070,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2845,13 +3107,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2877,13 +3144,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2909,13 +3181,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -2990,13 +3267,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3022,13 +3304,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3054,13 +3341,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3086,13 +3378,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3167,13 +3464,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3199,13 +3501,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3231,13 +3538,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3263,13 +3575,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3335,13 +3652,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3367,13 +3689,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3399,13 +3726,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3479,13 +3811,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3511,13 +3848,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3543,13 +3885,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3575,13 +3922,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3647,13 +3999,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3679,13 +4036,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3711,13 +4073,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3783,13 +4150,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3815,13 +4187,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3847,13 +4224,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3917,13 +4299,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -3949,13 +4336,18 @@ openapi_schema = {\n                                             \"name\": \"level1\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level1\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level1\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4020,13 +4412,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4052,13 +4449,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4084,13 +4486,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4154,13 +4561,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4186,13 +4598,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4271,13 +4688,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4303,13 +4725,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4335,13 +4762,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4367,13 +4799,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4399,13 +4836,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4480,13 +4922,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4512,13 +4959,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4544,13 +4996,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4576,13 +5033,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4657,13 +5119,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4689,13 +5156,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4721,13 +5193,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4753,13 +5230,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4825,13 +5307,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4857,13 +5344,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4889,13 +5381,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -4970,13 +5467,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5002,13 +5504,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5034,13 +5541,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5066,13 +5578,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5138,13 +5655,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5170,13 +5692,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5202,13 +5729,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5274,13 +5806,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5306,13 +5843,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5338,13 +5880,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5408,13 +5955,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5440,13 +5992,18 @@ openapi_schema = {\n                                             \"name\": \"level2\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level2\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level2\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5510,13 +6067,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5542,13 +6104,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5609,13 +6176,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5689,13 +6261,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5721,13 +6298,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5753,13 +6335,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5785,13 +6372,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5857,13 +6449,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5889,13 +6486,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5921,13 +6523,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -5993,13 +6600,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6025,13 +6637,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6057,13 +6674,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6127,13 +6749,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6159,13 +6786,18 @@ openapi_schema = {\n                                             \"name\": \"level3\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level3\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level3\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6230,13 +6862,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6262,13 +6899,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6294,13 +6936,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6364,13 +7011,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6396,13 +7048,18 @@ openapi_schema = {\n                                             \"name\": \"level4\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level4\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level4\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6466,13 +7123,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6498,13 +7160,18 @@ openapi_schema = {\n                                             \"name\": \"level5\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level5\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level5\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6565,13 +7232,18 @@ openapi_schema = {\n                                             \"name\": \"level0\",\n                                             \"in\": \"query\",\n                                             \"required\": True,\n-                                        \"schema\": {\"title\": \"Level0\", \"type\": \"string\"},\n+                                            \"schema\": {\n+                                                \"title\": \"Level0\",\n+                                                \"type\": \"string\",\n+                                            },\n                                         }\n                                     ],\n                                     \"responses\": {\n                                         \"200\": {\n                                             \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                            \"content\": {\n+                                                \"application/json\": {\"schema\": {}}\n+                                            },\n                                         },\n                                         \"422\": {\n                                             \"description\": \"Validation Error\",\n@@ -6612,7 +7284,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n\n@@ -4,7 +4,37 @@ from .app.main import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_a():\n+    data = {\"a\": 2, \"b\": \"foo\"}\n+    response = client.post(\"/a/compute\", json=data)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+\n+\n+def test_post_a_invalid():\n+    data = {\"a\": \"bar\", \"b\": \"foo\"}\n+    response = client.post(\"/a/compute\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_post_b():\n+    data = {\"a\": 2, \"b\": \"foo\"}\n+    response = client.post(\"/b/compute/\", json=data)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+\n+\n+def test_post_b_invalid():\n+    data = {\"a\": \"bar\", \"b\": \"foo\"}\n+    response = client.post(\"/b/compute/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -101,7 +131,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -121,35 +153,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_a():\n-    data = {\"a\": 2, \"b\": \"foo\"}\n-    response = client.post(\"/a/compute\", json=data)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-\n-\n-def test_post_a_invalid():\n-    data = {\"a\": \"bar\", \"b\": \"foo\"}\n-    response = client.post(\"/a/compute\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-\n-def test_post_b():\n-    data = {\"a\": 2, \"b\": \"foo\"}\n-    response = client.post(\"/b/compute/\", json=data)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-\n-\n-def test_post_b_invalid():\n-    data = {\"a\": \"bar\", \"b\": \"foo\"}\n-    response = client.post(\"/b/compute/\", json=data)\n-    assert response.status_code == 422, response.text\n\n@@ -21,7 +21,65 @@ def save_item_no_body(item: List[Item]):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+single_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0.0},\n+            \"loc\": [\"body\", 0, \"age\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+multiple_errors = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", 0, \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", 0, \"age\"],\n+            \"msg\": \"value is not a valid decimal\",\n+            \"type\": \"type_error.decimal\",\n+        },\n+        {\n+            \"loc\": [\"body\", 1, \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", 1, \"age\"],\n+            \"msg\": \"value is not a valid decimal\",\n+            \"type\": \"type_error.decimal\",\n+        },\n+    ]\n+}\n+\n+\n+def test_put_correct_body():\n+    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": [{\"name\": \"Foo\", \"age\": 5}]}\n+\n+\n+def test_jsonable_encoder_requiring_error():\n+    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n+    assert response.status_code == 422, response.text\n+    assert response.json() == single_error\n+\n+\n+def test_put_incorrect_body_multiple():\n+    response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n+    assert response.status_code == 422, response.text\n+    assert response.json() == multiple_errors\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -68,7 +126,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"age\": {\"title\": \"Age\", \"exclusiveMinimum\": 0.0, \"type\": \"number\"},\n+                        \"age\": {\n+                            \"title\": \"Age\",\n+                            \"exclusiveMinimum\": 0.0,\n+                            \"type\": \"number\",\n+                        },\n                     },\n                 },\n                 \"ValidationError\": {\n@@ -79,7 +141,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -99,63 +163,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-single_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0.0},\n-            \"loc\": [\"body\", 0, \"age\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-multiple_errors = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", 0, \"name\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        },\n-        {\n-            \"loc\": [\"body\", 0, \"age\"],\n-            \"msg\": \"value is not a valid decimal\",\n-            \"type\": \"type_error.decimal\",\n-        },\n-        {\n-            \"loc\": [\"body\", 1, \"name\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        },\n-        {\n-            \"loc\": [\"body\", 1, \"age\"],\n-            \"msg\": \"value is not a valid decimal\",\n-            \"type\": \"type_error.decimal\",\n-        },\n-    ]\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_put_correct_body():\n-    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": [{\"name\": \"Foo\", \"age\": 5}]}\n-\n-\n-def test_jsonable_encoder_requiring_error():\n-    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n-    assert response.status_code == 422, response.text\n-    assert response.json() == single_error\n-\n-\n-def test_put_incorrect_body_multiple():\n-    response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n-    assert response.status_code == 422, response.text\n-    assert response.json() == multiple_errors\n\n@@ -14,7 +14,38 @@ def read_items(q: List[int] = Query(default=None)):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+multiple_errors = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"q\", 0],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+        {\n+            \"loc\": [\"query\", \"q\", 1],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+    ]\n+}\n+\n+\n+def test_multi_query():\n+    response = client.get(\"/items/?q=5&q=6\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [5, 6]}\n+\n+\n+def test_multi_query_incorrect():\n+    response = client.get(\"/items/?q=five&q=six\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == multiple_errors\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -63,7 +94,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -83,36 +116,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-multiple_errors = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"q\", 0],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        },\n-        {\n-            \"loc\": [\"query\", \"q\", 1],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        },\n-    ]\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_multi_query():\n-    response = client.get(\"/items/?q=5&q=6\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [5, 6]}\n-\n-\n-def test_multi_query_incorrect():\n-    response = client.get(\"/items/?q=five&q=six\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == multiple_errors\n\n@@ -32,7 +32,16 @@ def route_with_extra_query_parameters(standard_query_param: Optional[int] = 50):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_get_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -104,7 +113,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -113,15 +124,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_route():\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {}\n\n@@ -12,7 +12,16 @@ def route_with_extras():\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_get_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -31,15 +40,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_route():\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {}\n\n@@ -21,7 +21,15 @@ def foo():\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_app():\n+    response = client.get(\"/foo\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"servers\": [\n@@ -47,14 +55,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_servers():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_app():\n-    response = client.get(\"/foo\")\n-    assert response.status_code == 200, response.text\n\n@@ -15,7 +15,16 @@ async def read_users(user_id: int):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_read_users():\n+    response = client.get(\"/users/42\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -71,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -80,14 +91,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_reused_param():\n-    response = client.get(\"/openapi.json\")\n-    data = response.json()\n-    assert data == openapi_schema\n-\n-\n-def test_read_users():\n-    response = client.get(\"/users/42\")\n-    assert response.status_code == 200, response.text\n\n@@ -12,7 +12,22 @@ def save_item_no_body(item_id: str):\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_put_no_body():\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_put_no_body_with_body():\n+    response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -57,7 +72,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -77,21 +94,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_put_no_body():\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\"}\n-\n-\n-def test_put_no_body_with_body():\n-    response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\"}\n\n@@ -14,7 +14,18 @@ def get_parameters_with_repeated_aliases(\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_parameters():\n+    response = client.get(\"/test_path\", params={\"repeated_alias\": \"test_query\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"path\": \"test_path\", \"query\": \"test_query\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == status.HTTP_200_OK\n+    actual_schema = response.json()\n+    assert actual_schema == {\n         \"components\": {\n             \"schemas\": {\n                 \"HTTPValidationError\": {\n@@ -31,7 +42,9 @@ openapi_schema = {\n                 \"ValidationError\": {\n                     \"properties\": {\n                         \"loc\": {\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n                         },\n@@ -85,16 +98,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == status.HTTP_200_OK\n-    actual_schema = response.json()\n-    assert actual_schema == openapi_schema\n-\n-\n-def test_get_parameters():\n-    response = client.get(\"/test_path\", params={\"repeated_alias\": \"test_query\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"path\": \"test_path\", \"query\": \"test_query\"}\n\n@@ -22,7 +22,16 @@ async def delete_deployment(\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_dependency_set_status_code():\n+    response = client.delete(\"/1\")\n+    assert response.status_code == 400 and response.content\n+    assert response.json() == {\"msg\": \"Status overwritten\", \"id\": 1}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -75,7 +84,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -84,15 +95,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_dependency_set_status_code():\n-    response = client.delete(\"/1\")\n-    assert response.status_code == 400 and response.content\n-    assert response.json() == {\"msg\": \"Status overwritten\", \"id\": 1}\n\n@@ -68,7 +68,76 @@ def no_alias_list():\n     return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_read_dict():\n+    response = client.get(\"/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_model():\n+    response = client.get(\"/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_list():\n+    response = client.get(\"/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\"},\n+        {\"name\": \"Bar\"},\n+    ]\n+\n+\n+def test_read_dict_by_alias():\n+    response = client.get(\"/by-alias/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"alias\": \"Foo\"}\n+\n+\n+def test_read_model_by_alias():\n+    response = client.get(\"/by-alias/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"alias\": \"Foo\"}\n+\n+\n+def test_read_list_by_alias():\n+    response = client.get(\"/by-alias/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"alias\": \"Foo\"},\n+        {\"alias\": \"Bar\"},\n+    ]\n+\n+\n+def test_read_dict_no_alias():\n+    response = client.get(\"/no-alias/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_model_no_alias():\n+    response = client.get(\"/no-alias/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_list_no_alias():\n+    response = client.get(\"/no-alias/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\"},\n+        {\"name\": \"Bar\"},\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -185,7 +254,9 @@ openapi_schema = {\n                             \"description\": \"Successful Response\",\n                             \"content\": {\n                                 \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ModelNoAlias\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n+                                    }\n                                 }\n                             },\n                         }\n@@ -201,7 +272,9 @@ openapi_schema = {\n                             \"description\": \"Successful Response\",\n                             \"content\": {\n                                 \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ModelNoAlias\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n+                                    }\n                                 }\n                             },\n                         }\n@@ -249,75 +322,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_read_dict():\n-    response = client.get(\"/dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\"}\n-\n-\n-def test_read_model():\n-    response = client.get(\"/model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\"}\n-\n-\n-def test_read_list():\n-    response = client.get(\"/list\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Foo\"},\n-        {\"name\": \"Bar\"},\n-    ]\n-\n-\n-def test_read_dict_by_alias():\n-    response = client.get(\"/by-alias/dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"alias\": \"Foo\"}\n-\n-\n-def test_read_model_by_alias():\n-    response = client.get(\"/by-alias/model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"alias\": \"Foo\"}\n-\n-\n-def test_read_list_by_alias():\n-    response = client.get(\"/by-alias/list\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"alias\": \"Foo\"},\n-        {\"alias\": \"Bar\"},\n-    ]\n-\n-\n-def test_read_dict_no_alias():\n-    response = client.get(\"/no-alias/dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\"}\n-\n-\n-def test_read_model_no_alias():\n-    response = client.get(\"/no-alias/model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\"}\n-\n-\n-def test_read_list_no_alias():\n-    response = client.get(\"/no-alias/list\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Foo\"},\n-        {\"name\": \"Bar\"},\n-    ]\n\n@@ -35,7 +35,13 @@ async def b():\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -46,7 +52,9 @@ openapi_schema = {\n                             \"description\": \"Error\",\n                             \"content\": {\n                                 \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -103,12 +111,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n\n@@ -36,7 +36,20 @@ async def b():\n     pass  # pragma: no cover\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_get_response():\n+    response = client.get(\"/a\")\n+    assert response.status_code == 204, response.text\n+    assert \"content-length\" not in response.headers\n+    assert response.content == b\"\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -47,7 +60,9 @@ openapi_schema = {\n                             \"description\": \"Error\",\n                             \"content\": {\n                                 \"application/vnd.api+json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/JsonApiError\"\n+                                    }\n                                 }\n                             },\n                         },\n@@ -97,19 +112,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_response():\n-    response = client.get(\"/a\")\n-    assert response.status_code == 204, response.text\n-    assert \"content-length\" not in response.headers\n-    assert response.content == b\"\"\n\n@@ -249,7 +249,264 @@ def no_response_model_annotation_json_response_class() -> JSONResponse:\n     return JSONResponse(content={\"foo\": \"bar\"})\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_no_response_model_no_annotation_return_model():\n+    response = client.get(\"/no_response_model-no_annotation-return_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_no_annotation_return_dict():\n+    response = client.get(\"/no_response_model-no_annotation-return_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_no_annotation_return_same_model():\n+    response = client.get(\"/response_model-no_annotation-return_same_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_no_annotation_return_exact_dict():\n+    response = client.get(\"/response_model-no_annotation-return_exact_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_no_annotation_return_invalid_dict():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/response_model-no_annotation-return_invalid_dict\")\n+\n+\n+def test_response_model_no_annotation_return_invalid_model():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/response_model-no_annotation-return_invalid_model\")\n+\n+\n+def test_response_model_no_annotation_return_dict_with_extra_data():\n+    response = client.get(\"/response_model-no_annotation-return_dict_with_extra_data\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_no_annotation_return_submodel_with_extra_data():\n+    response = client.get(\n+        \"/response_model-no_annotation-return_submodel_with_extra_data\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_annotation_return_same_model():\n+    response = client.get(\"/no_response_model-annotation-return_same_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_annotation_return_exact_dict():\n+    response = client.get(\"/no_response_model-annotation-return_exact_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_annotation_return_invalid_dict():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/no_response_model-annotation-return_invalid_dict\")\n+\n+\n+def test_no_response_model_annotation_return_invalid_model():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/no_response_model-annotation-return_invalid_model\")\n+\n+\n+def test_no_response_model_annotation_return_dict_with_extra_data():\n+    response = client.get(\"/no_response_model-annotation-return_dict_with_extra_data\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_annotation_return_submodel_with_extra_data():\n+    response = client.get(\n+        \"/no_response_model-annotation-return_submodel_with_extra_data\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_none_annotation_return_same_model():\n+    response = client.get(\"/response_model_none-annotation-return_same_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_none_annotation_return_exact_dict():\n+    response = client.get(\"/response_model_none-annotation-return_exact_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_none_annotation_return_invalid_dict():\n+    response = client.get(\"/response_model_none-annotation-return_invalid_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\"}\n+\n+\n+def test_response_model_none_annotation_return_invalid_model():\n+    response = client.get(\"/response_model_none-annotation-return_invalid_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n+\n+\n+def test_response_model_none_annotation_return_dict_with_extra_data():\n+    response = client.get(\"/response_model_none-annotation-return_dict_with_extra_data\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"John\",\n+        \"surname\": \"Doe\",\n+        \"password_hash\": \"secret\",\n+    }\n+\n+\n+def test_response_model_none_annotation_return_submodel_with_extra_data():\n+    response = client.get(\n+        \"/response_model_none-annotation-return_submodel_with_extra_data\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"John\",\n+        \"surname\": \"Doe\",\n+        \"password_hash\": \"secret\",\n+    }\n+\n+\n+def test_response_model_model1_annotation_model2_return_same_model():\n+    response = client.get(\"/response_model_model1-annotation_model2-return_same_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_model1_annotation_model2_return_exact_dict():\n+    response = client.get(\"/response_model_model1-annotation_model2-return_exact_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_model1_annotation_model2_return_invalid_dict():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/response_model_model1-annotation_model2-return_invalid_dict\")\n+\n+\n+def test_response_model_model1_annotation_model2_return_invalid_model():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/response_model_model1-annotation_model2-return_invalid_model\")\n+\n+\n+def test_response_model_model1_annotation_model2_return_dict_with_extra_data():\n+    response = client.get(\n+        \"/response_model_model1-annotation_model2-return_dict_with_extra_data\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_model1_annotation_model2_return_submodel_with_extra_data():\n+    response = client.get(\n+        \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_filtering_model_annotation_submodel_return_submodel():\n+    response = client.get(\n+        \"/response_model_filtering_model-annotation_submodel-return_submodel\"\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_list_of_model_no_annotation():\n+    response = client.get(\"/response_model_list_of_model-no_annotation\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"John\", \"surname\": \"Doe\"},\n+        {\"name\": \"Jane\", \"surname\": \"Does\"},\n+    ]\n+\n+\n+def test_no_response_model_annotation_list_of_model():\n+    response = client.get(\"/no_response_model-annotation_list_of_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"John\", \"surname\": \"Doe\"},\n+        {\"name\": \"Jane\", \"surname\": \"Does\"},\n+    ]\n+\n+\n+def test_no_response_model_annotation_forward_ref_list_of_model():\n+    response = client.get(\"/no_response_model-annotation_forward_ref_list_of_model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"John\", \"surname\": \"Doe\"},\n+        {\"name\": \"Jane\", \"surname\": \"Does\"},\n+    ]\n+\n+\n+def test_response_model_union_no_annotation_return_model1():\n+    response = client.get(\"/response_model_union-no_annotation-return_model1\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_response_model_union_no_annotation_return_model2():\n+    response = client.get(\"/response_model_union-no_annotation-return_model2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n+\n+\n+def test_no_response_model_annotation_union_return_model1():\n+    response = client.get(\"/no_response_model-annotation_union-return_model1\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n+\n+\n+def test_no_response_model_annotation_union_return_model2():\n+    response = client.get(\"/no_response_model-annotation_union-return_model2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n+\n+\n+def test_no_response_model_annotation_return_class():\n+    response = client.get(\"/no_response_model-annotation_response_class\")\n+    assert response.status_code == 200, response.text\n+    assert response.text == \"Foo\"\n+\n+\n+def test_no_response_model_annotation_json_response_class():\n+    response = client.get(\"/no_response_model-annotation_json_response_class\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": \"bar\"}\n+\n+\n+def test_invalid_response_model_field():\n+    app = FastAPI()\n+    with pytest.raises(FastAPIError) as e:\n+\n+        @app.get(\"/\")\n+        def read_root() -> Union[Response, None]:\n+            return Response(content=\"Foo\")  # pragma: no cover\n+\n+    assert \"valid Pydantic field type\" in e.value.args[0]\n+    assert \"parameter response_model=None\" in e.value.args[0]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -849,263 +1106,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_response_model_no_annotation_return_model():\n-    response = client.get(\"/no_response_model-no_annotation-return_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_no_annotation_return_dict():\n-    response = client.get(\"/no_response_model-no_annotation-return_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_no_annotation_return_same_model():\n-    response = client.get(\"/response_model-no_annotation-return_same_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_no_annotation_return_exact_dict():\n-    response = client.get(\"/response_model-no_annotation-return_exact_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_no_annotation_return_invalid_dict():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/response_model-no_annotation-return_invalid_dict\")\n-\n-\n-def test_response_model_no_annotation_return_invalid_model():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/response_model-no_annotation-return_invalid_model\")\n-\n-\n-def test_response_model_no_annotation_return_dict_with_extra_data():\n-    response = client.get(\"/response_model-no_annotation-return_dict_with_extra_data\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_no_annotation_return_submodel_with_extra_data():\n-    response = client.get(\n-        \"/response_model-no_annotation-return_submodel_with_extra_data\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_annotation_return_same_model():\n-    response = client.get(\"/no_response_model-annotation-return_same_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_annotation_return_exact_dict():\n-    response = client.get(\"/no_response_model-annotation-return_exact_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_annotation_return_invalid_dict():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/no_response_model-annotation-return_invalid_dict\")\n-\n-\n-def test_no_response_model_annotation_return_invalid_model():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/no_response_model-annotation-return_invalid_model\")\n-\n-\n-def test_no_response_model_annotation_return_dict_with_extra_data():\n-    response = client.get(\"/no_response_model-annotation-return_dict_with_extra_data\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_annotation_return_submodel_with_extra_data():\n-    response = client.get(\n-        \"/no_response_model-annotation-return_submodel_with_extra_data\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_none_annotation_return_same_model():\n-    response = client.get(\"/response_model_none-annotation-return_same_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_none_annotation_return_exact_dict():\n-    response = client.get(\"/response_model_none-annotation-return_exact_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_none_annotation_return_invalid_dict():\n-    response = client.get(\"/response_model_none-annotation-return_invalid_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\"}\n-\n-\n-def test_response_model_none_annotation_return_invalid_model():\n-    response = client.get(\"/response_model_none-annotation-return_invalid_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n-\n-\n-def test_response_model_none_annotation_return_dict_with_extra_data():\n-    response = client.get(\"/response_model_none-annotation-return_dict_with_extra_data\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"John\",\n-        \"surname\": \"Doe\",\n-        \"password_hash\": \"secret\",\n-    }\n-\n-\n-def test_response_model_none_annotation_return_submodel_with_extra_data():\n-    response = client.get(\n-        \"/response_model_none-annotation-return_submodel_with_extra_data\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"John\",\n-        \"surname\": \"Doe\",\n-        \"password_hash\": \"secret\",\n-    }\n-\n-\n-def test_response_model_model1_annotation_model2_return_same_model():\n-    response = client.get(\"/response_model_model1-annotation_model2-return_same_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_model1_annotation_model2_return_exact_dict():\n-    response = client.get(\"/response_model_model1-annotation_model2-return_exact_dict\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_model1_annotation_model2_return_invalid_dict():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/response_model_model1-annotation_model2-return_invalid_dict\")\n-\n-\n-def test_response_model_model1_annotation_model2_return_invalid_model():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/response_model_model1-annotation_model2-return_invalid_model\")\n-\n-\n-def test_response_model_model1_annotation_model2_return_dict_with_extra_data():\n-    response = client.get(\n-        \"/response_model_model1-annotation_model2-return_dict_with_extra_data\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_model1_annotation_model2_return_submodel_with_extra_data():\n-    response = client.get(\n-        \"/response_model_model1-annotation_model2-return_submodel_with_extra_data\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_filtering_model_annotation_submodel_return_submodel():\n-    response = client.get(\n-        \"/response_model_filtering_model-annotation_submodel-return_submodel\"\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_list_of_model_no_annotation():\n-    response = client.get(\"/response_model_list_of_model-no_annotation\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"John\", \"surname\": \"Doe\"},\n-        {\"name\": \"Jane\", \"surname\": \"Does\"},\n-    ]\n-\n-\n-def test_no_response_model_annotation_list_of_model():\n-    response = client.get(\"/no_response_model-annotation_list_of_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"John\", \"surname\": \"Doe\"},\n-        {\"name\": \"Jane\", \"surname\": \"Does\"},\n-    ]\n-\n-\n-def test_no_response_model_annotation_forward_ref_list_of_model():\n-    response = client.get(\"/no_response_model-annotation_forward_ref_list_of_model\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"John\", \"surname\": \"Doe\"},\n-        {\"name\": \"Jane\", \"surname\": \"Does\"},\n-    ]\n-\n-\n-def test_response_model_union_no_annotation_return_model1():\n-    response = client.get(\"/response_model_union-no_annotation-return_model1\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_response_model_union_no_annotation_return_model2():\n-    response = client.get(\"/response_model_union-no_annotation-return_model2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n-\n-\n-def test_no_response_model_annotation_union_return_model1():\n-    response = client.get(\"/no_response_model-annotation_union-return_model1\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"John\", \"surname\": \"Doe\"}\n-\n-\n-def test_no_response_model_annotation_union_return_model2():\n-    response = client.get(\"/no_response_model-annotation_union-return_model2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n-\n-\n-def test_no_response_model_annotation_return_class():\n-    response = client.get(\"/no_response_model-annotation_response_class\")\n-    assert response.status_code == 200, response.text\n-    assert response.text == \"Foo\"\n-\n-\n-def test_no_response_model_annotation_json_response_class():\n-    response = client.get(\"/no_response_model-annotation_json_response_class\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"foo\": \"bar\"}\n-\n-\n-def test_invalid_response_model_field():\n-    app = FastAPI()\n-    with pytest.raises(FastAPIError) as e:\n-\n-        @app.get(\"/\")\n-        def read_root() -> Union[Response, None]:\n-            return Response(content=\"Foo\")  # pragma: no cover\n-\n-    assert \"valid Pydantic field type\" in e.value.args[0]\n-    assert \"parameter response_model=None\" in e.value.args[0]\n\n@@ -32,7 +32,24 @@ def valid4():\n     pass\n \n \n-openapi_schema = {\n+client = TestClient(app)\n+\n+\n+def test_path_operations():\n+    response = client.get(\"/valid1\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/valid2\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/valid3\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/valid4\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -139,22 +156,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-client = TestClient(app)\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operations():\n-    response = client.get(\"/valid1\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/valid2\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/valid3\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/valid4\")\n-    assert response.status_code == 200, response.text\n\n@@ -234,7 +234,52 @@ def cookie_example_examples(\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_call_api():\n+    response = client.post(\"/schema_extra/\", json={\"data\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    response = client.post(\"/example/\", json={\"data\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    response = client.post(\"/examples/\", json={\"data\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    response = client.post(\"/example_examples/\", json={\"data\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/path_example/foo\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/path_examples/foo\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/path_example_examples/foo\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/query_example/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/query_examples/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/query_example_examples/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/header_example/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/header_examples/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/header_example_examples/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/cookie_example/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/cookie_examples/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/cookie_example_examples/\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    \"\"\"\n+    Test that example overrides work:\n+\n+    * pydantic model schema_extra is included\n+    * Body(example={}) overrides schema_extra in pydantic model\n+    * Body(examples{}) overrides Body(example={}) and schema_extra in pydantic model\n+    \"\"\"\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -315,7 +360,9 @@ openapi_schema = {\n                                         },\n                                     },\n                                     \"example2\": {\n-                                    \"value\": {\"data\": \"Data in Body examples, example2\"}\n+                                        \"value\": {\n+                                            \"data\": \"Data in Body examples, example2\"\n+                                        }\n                                     },\n                                 },\n                             }\n@@ -827,7 +874,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -836,51 +885,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    \"\"\"\n-    Test that example overrides work:\n-\n-    * pydantic model schema_extra is included\n-    * Body(example={}) overrides schema_extra in pydantic model\n-    * Body(examples{}) overrides Body(example={}) and schema_extra in pydantic model\n-    \"\"\"\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_call_api():\n-    response = client.post(\"/schema_extra/\", json={\"data\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    response = client.post(\"/example/\", json={\"data\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    response = client.post(\"/examples/\", json={\"data\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    response = client.post(\"/example_examples/\", json={\"data\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/path_example/foo\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/path_examples/foo\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/path_example_examples/foo\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/query_example/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/query_examples/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/query_example_examples/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/header_example/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/header_examples/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/header_example_examples/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/cookie_example/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/cookie_examples/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/cookie_example_examples/\")\n-    assert response.status_code == 200, response.text\n\n@@ -22,7 +22,25 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n     return current_user\n \n \n-openapi_schema = {\n+def test_security_api_key():\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    client = TestClient(app)\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -46,24 +64,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    client = TestClient(app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    client = TestClient(app, cookies={\"key\": \"secret\"})\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    client = TestClient(app)\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -22,7 +22,25 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n     return current_user\n \n \n-openapi_schema = {\n+def test_security_api_key():\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    client = TestClient(app)\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,24 +69,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    client = TestClient(app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    client = TestClient(app, cookies={\"key\": \"secret\"})\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    client = TestClient(app)\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -29,7 +29,25 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n         return current_user\n \n \n-openapi_schema = {\n+def test_security_api_key():\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    client = TestClient(app)\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,24 +71,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    client = TestClient(app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    client = TestClient(app, cookies={\"key\": \"secret\"})\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    client = TestClient(app)\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -24,7 +24,23 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,21 +64,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -24,7 +24,23 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,21 +69,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -30,7 +30,23 @@ def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,21 +70,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -24,7 +24,23 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,21 +64,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me?key=secret\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -24,7 +24,23 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,21 +69,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me?key=secret\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -30,7 +30,23 @@ def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,21 +70,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_api_key():\n-    response = client.get(\"/users/me?key=secret\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"secret\"}\n-\n-\n-def test_security_api_key_no_key():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -14,7 +14,23 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,21 +52,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_base():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_base_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -14,7 +14,23 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,21 +58,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_base():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_base_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -20,7 +20,23 @@ def read_current_user(\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,21 +58,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_base():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_base_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -19,35 +19,6 @@ def read_current_user(credentials: Optional[HTTPBasicCredentials] = Security(sec\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_http_basic():\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -77,3 +48,30 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+        },\n+    }\n\n@@ -16,35 +16,6 @@ def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_http_basic():\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -75,3 +46,30 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+        },\n+    }\n\n@@ -16,41 +16,6 @@ def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\n-            \"HTTPBasic\": {\n-                \"type\": \"http\",\n-                \"scheme\": \"basic\",\n-                \"description\": \"HTTPBasic scheme\",\n-            }\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_http_basic():\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -81,3 +46,36 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\n+                \"HTTPBasic\": {\n+                    \"type\": \"http\",\n+                    \"scheme\": \"basic\",\n+                    \"description\": \"HTTPBasic scheme\",\n+                }\n+            }\n+        },\n+    }\n\n@@ -14,7 +14,29 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,27 +58,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_bearer():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_bearer_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_security_http_bearer_incorrect_scheme_credentials():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -14,7 +14,29 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,27 +64,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_bearer():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_bearer_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_security_http_bearer_incorrect_scheme_credentials():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -20,7 +20,29 @@ def read_current_user(\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,27 +64,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_bearer():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_bearer_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n-\n-\n-def test_security_http_bearer_incorrect_scheme_credentials():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -14,7 +14,31 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,29 +60,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_digest():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_digest_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_security_http_digest_incorrect_scheme_credentials():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -14,7 +14,31 @@ def read_current_user(credentials: HTTPAuthorizationCredentials = Security(secur\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,29 +66,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_digest():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_digest_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_security_http_digest_incorrect_scheme_credentials():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -20,7 +20,31 @@ def read_current_user(\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,29 +66,3 @@ openapi_schema = {\n             \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_http_digest():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n-\n-\n-def test_security_http_digest_no_credentials():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n-\n-\n-def test_security_http_digest_incorrect_scheme_credentials():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -40,124 +40,6 @@ def read_current_user(current_user: \"User\" = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"OAuth2\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login_post\": {\n-                \"title\": \"Body_login_login_post\",\n-                \"required\": [\"grant_type\", \"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"read:users\": \"Read the users\",\n-                            \"write:users\": \"Create users\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n@@ -247,3 +129,121 @@ def test_strict_login(data, expected_status, expected_response):\n     response = client.post(\"/login\", data=data)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"OAuth2\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login_post\": {\n+                    \"title\": \"Body_login_login_post\",\n+                    \"required\": [\"grant_type\", \"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"read:users\": \"Read the users\",\n+                                \"write:users\": \"Create users\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -18,7 +18,29 @@ async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,27 +73,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n\n@@ -21,7 +21,29 @@ async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -55,27 +77,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n\n@@ -44,124 +44,6 @@ def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me_get\",\n-                \"security\": [{\"OAuth2\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login_post\": {\n-                \"title\": \"Body_login_login_post\",\n-                \"required\": [\"grant_type\", \"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"read:users\": \"Read the users\",\n-                            \"write:users\": \"Create users\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n@@ -251,3 +133,121 @@ def test_strict_login(data, expected_status, expected_response):\n     response = client.post(\"/login\", data=data)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me_get\",\n+                    \"security\": [{\"OAuth2\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login_post\": {\n+                    \"title\": \"Body_login_login_post\",\n+                    \"required\": [\"grant_type\", \"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"read:users\": \"Read the users\",\n+                                \"write:users\": \"Create users\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -45,125 +45,6 @@ def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me_get\",\n-                \"security\": [{\"OAuth2\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login_post\": {\n-                \"title\": \"Body_login_login_post\",\n-                \"required\": [\"grant_type\", \"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"read:users\": \"Read the users\",\n-                            \"write:users\": \"Create users\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-                \"description\": \"OAuth2 security scheme\",\n-            }\n-        },\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n@@ -253,3 +134,122 @@ def test_strict_login(data, expected_status, expected_response):\n     response = client.post(\"/login\", data=data)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me_get\",\n+                    \"security\": [{\"OAuth2\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login_post\": {\n+                    \"title\": \"Body_login_login_post\",\n+                    \"required\": [\"grant_type\", \"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"read:users\": \"Read the users\",\n+                                \"write:users\": \"Create users\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                    \"description\": \"OAuth2 security scheme\",\n+                }\n+            },\n+        },\n+    }\n\n@@ -18,7 +18,29 @@ async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -45,27 +67,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -22,7 +22,29 @@ async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -50,27 +72,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -24,7 +24,29 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -44,31 +66,10 @@ openapi_schema = {\n         },\n         \"components\": {\n             \"securitySchemes\": {\n-            \"OpenIdConnect\": {\"type\": \"openIdConnect\", \"openIdConnectUrl\": \"/openid\"}\n+                \"OpenIdConnect\": {\n+                    \"type\": \"openIdConnect\",\n+                    \"openIdConnectUrl\": \"/openid\",\n+                }\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_oauth2():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n-\n-\n-def test_security_oauth2_password_other_header():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Other footokenbar\"}\n-\n-\n-def test_security_oauth2_password_bearer_no_header():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -26,7 +26,29 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,27 +76,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_oauth2():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n-\n-\n-def test_security_oauth2_password_other_header():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Other footokenbar\"}\n-\n-\n-def test_security_oauth2_password_bearer_no_header():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -30,7 +30,29 @@ def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -50,31 +72,10 @@ openapi_schema = {\n         },\n         \"components\": {\n             \"securitySchemes\": {\n-            \"OpenIdConnect\": {\"type\": \"openIdConnect\", \"openIdConnectUrl\": \"/openid\"}\n+                \"OpenIdConnect\": {\n+                    \"type\": \"openIdConnect\",\n+                    \"openIdConnectUrl\": \"/openid\",\n+                }\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_security_oauth2():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n-\n-\n-def test_security_oauth2_password_other_header():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"username\": \"Other footokenbar\"}\n-\n-\n-def test_security_oauth2_password_bearer_no_header():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -37,7 +37,49 @@ async def read_starlette_item(item_id: str):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_item():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.headers.get(\"x-error\") == \"Some custom header\"\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_get_starlette_item():\n+    response = client.get(\"/starlette-items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_starlette_item_not_found():\n+    response = client.get(\"/starlette-items/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.headers.get(\"x-error\") is None\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_no_body_status_code_exception_handlers():\n+    response = client.get(\"/http-no-body-statuscode-exception\")\n+    assert response.status_code == 204\n+    assert not response.content\n+\n+\n+def test_no_body_status_code_with_detail_exception_handlers():\n+    response = client.get(\"/http-no-body-statuscode-with-detail-exception\")\n+    assert response.status_code == 204\n+    assert not response.content\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -136,7 +178,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -156,47 +200,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_item():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n-\n-\n-def test_get_item_not_found():\n-    response = client.get(\"/items/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.headers.get(\"x-error\") == \"Some custom header\"\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-def test_get_starlette_item():\n-    response = client.get(\"/starlette-items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n-\n-\n-def test_get_starlette_item_not_found():\n-    response = client.get(\"/starlette-items/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.headers.get(\"x-error\") is None\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-def test_no_body_status_code_exception_handlers():\n-    response = client.get(\"/http-no-body-statuscode-exception\")\n-    assert response.status_code == 204\n-    assert not response.content\n-\n-\n-def test_no_body_status_code_with_detail_exception_handlers():\n-    response = client.get(\"/http-no-body-statuscode-with-detail-exception\")\n-    assert response.status_code == 204\n-    assert not response.content\n\n@@ -74,7 +74,19 @@ app.include_router(subrouter, callbacks=events_callback_router.routes)\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.post(\n+        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Invoice received\"}\n+\n+\n+def test_openapi_schema():\n+    with client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.json() == {\n             \"openapi\": \"3.0.2\",\n             \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n             \"paths\": {\n@@ -140,7 +152,9 @@ openapi_schema = {\n                                         \"responses\": {\n                                             \"200\": {\n                                                 \"description\": \"Successful Response\",\n-                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                                \"content\": {\n+                                                    \"application/json\": {\"schema\": {}}\n+                                                },\n                                             },\n                                             \"422\": {\n                                                 \"description\": \"Validation Error\",\n@@ -218,7 +232,9 @@ openapi_schema = {\n                             \"detail\": {\n                                 \"title\": \"Detail\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n                             }\n                         },\n                     },\n@@ -256,7 +272,9 @@ openapi_schema = {\n                             \"loc\": {\n                                 \"title\": \"Location\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n                             },\n                             \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                             \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -265,18 +283,3 @@ openapi_schema = {\n                 }\n             },\n         }\n-\n-\n-def test_openapi():\n-    with client:\n-        response = client.get(\"/openapi.json\")\n-\n-        assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.post(\n-        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Invoice received\"}\n\n@@ -33,7 +33,59 @@ def hello(values: Tuple[int, int] = Form()):\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_model_with_tuple_valid():\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_model_with_tuple_invalid():\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\", \"too\", \"much\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_tuple_with_model_valid():\n+    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_tuple_with_model_invalid():\n+    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}, {\"x\": 5, \"y\": 6}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+    data = [{\"x\": 1, \"y\": 2}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_tuple_form_valid():\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\")})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [1, 2]\n+\n+\n+def test_tuple_form_invalid():\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\", \"3\")})\n+    assert response.status_code == 422, response.text\n+\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\")})\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -200,7 +252,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -209,57 +263,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_model_with_tuple_valid():\n-    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\"]]}\n-    response = client.post(\"/model-with-tuple/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n-\n-\n-def test_model_with_tuple_invalid():\n-    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\", \"too\", \"much\"]]}\n-    response = client.post(\"/model-with-tuple/\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\"]]}\n-    response = client.post(\"/model-with-tuple/\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-\n-def test_tuple_with_model_valid():\n-    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}]\n-    response = client.post(\"/tuple-of-models/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n-\n-\n-def test_tuple_with_model_invalid():\n-    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}, {\"x\": 5, \"y\": 6}]\n-    response = client.post(\"/tuple-of-models/\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-    data = [{\"x\": 1, \"y\": 2}]\n-    response = client.post(\"/tuple-of-models/\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-\n-def test_tuple_form_valid():\n-    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\")})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [1, 2]\n-\n-\n-def test_tuple_form_invalid():\n-    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\", \"3\")})\n-    assert response.status_code == 422, response.text\n-\n-    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\")})\n-    assert response.status_code == 422, response.text\n\n@@ -4,7 +4,23 @@ from docs_src.additional_responses.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"message\": \"Item not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -76,7 +92,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -96,21 +114,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operation():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n-\n-\n-def test_path_operation_not_found():\n-    response = client.get(\"/items/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -7,7 +7,26 @@ from docs_src.additional_responses.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_img():\n+    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n+    response = client.get(\"/items/foo?img=1\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"Content-Type\"] == \"image/png\"\n+    assert len(response.content)\n+    os.remove(\"./image.png\")\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -72,7 +91,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -92,24 +113,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operation():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n-\n-\n-def test_path_operation_img():\n-    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n-    response = client.get(\"/items/foo?img=1\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"Content-Type\"] == \"image/png\"\n-    assert len(response.content)\n-    os.remove(\"./image.png\")\n\n@@ -4,7 +4,23 @@ from docs_src.additional_responses.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"message\": \"Item not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -24,7 +40,10 @@ openapi_schema = {\n                             \"content\": {\n                                 \"application/json\": {\n                                     \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"},\n+                                    \"example\": {\n+                                        \"id\": \"bar\",\n+                                        \"value\": \"The bar tenders\",\n+                                    },\n                                 }\n                             },\n                         },\n@@ -77,7 +96,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -97,21 +118,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operation():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n-\n-\n-def test_path_operation_not_found():\n-    response = client.get(\"/items/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -7,7 +7,26 @@ from docs_src.additional_responses.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operation():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n+\n+\n+def test_path_operation_img():\n+    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n+    response = client.get(\"/items/foo?img=1\")\n+    assert response.status_code == 200, response.text\n+    assert response.headers[\"Content-Type\"] == \"image/png\"\n+    assert len(response.content)\n+    os.remove(\"./image.png\")\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -75,7 +94,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -95,24 +116,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operation():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n-\n-\n-def test_path_operation_img():\n-    shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n-    response = client.get(\"/items/foo?img=1\")\n-    assert response.status_code == 200, response.text\n-    assert response.headers[\"Content-Type\"] == \"image/png\"\n-    assert len(response.content)\n-    os.remove(\"./image.png\")\n\n@@ -2,7 +2,26 @@ from fastapi.testclient import TestClient\n \n from docs_src.async_sql_databases.tutorial001 import app\n \n-openapi_schema = {\n+\n+def test_create_read():\n+    with TestClient(app) as client:\n+        note = {\"text\": \"Foo bar\", \"completed\": False}\n+        response = client.post(\"/notes/\", json=note)\n+        assert response.status_code == 200, response.text\n+        data = response.json()\n+        assert data[\"text\"] == note[\"text\"]\n+        assert data[\"completed\"] == note[\"completed\"]\n+        assert \"id\" in data\n+        response = client.get(\"/notes/\")\n+        assert response.status_code == 200, response.text\n+        assert data in response.json()\n+\n+\n+def test_openapi_schema():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\n             \"openapi\": \"3.0.2\",\n             \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n             \"paths\": {\n@@ -16,7 +35,9 @@ openapi_schema = {\n                                         \"schema\": {\n                                             \"title\": \"Response Read Notes Notes  Get\",\n                                             \"type\": \"array\",\n-                                    \"items\": {\"$ref\": \"#/components/schemas/Note\"},\n+                                            \"items\": {\n+                                                \"$ref\": \"#/components/schemas/Note\"\n+                                            },\n                                         }\n                                     }\n                                 },\n@@ -88,7 +109,9 @@ openapi_schema = {\n                             \"loc\": {\n                                 \"title\": \"Location\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n                             },\n                             \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                             \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -101,31 +124,12 @@ openapi_schema = {\n                             \"detail\": {\n                                 \"title\": \"Detail\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n                             }\n                         },\n                     },\n                 }\n             },\n         }\n-\n-\n-def test_openapi_schema():\n-    with TestClient(app) as client:\n-        response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == openapi_schema\n-\n-\n-def test_create_read():\n-    with TestClient(app) as client:\n-        note = {\"text\": \"Foo bar\", \"completed\": False}\n-        response = client.post(\"/notes/\", json=note)\n-        assert response.status_code == 200, response.text\n-        data = response.json()\n-        assert data[\"text\"] == note[\"text\"]\n-        assert data[\"completed\"] == note[\"completed\"]\n-        assert \"id\" in data\n-        response = client.get(\"/notes/\")\n-        assert response.status_code == 200, response.text\n-        assert data in response.json()\n\n@@ -4,7 +4,17 @@ from docs_src.behind_a_proxy.tutorial001 import app\n \n client = TestClient(app, root_path=\"/api/v1\")\n \n-openapi_schema = {\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -23,15 +33,3 @@ openapi_schema = {\n         },\n         \"servers\": [{\"url\": \"/api/v1\"}],\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    response = client.get(\"/app\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n@@ -4,7 +4,17 @@ from docs_src.behind_a_proxy.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -23,15 +33,3 @@ openapi_schema = {\n         },\n         \"servers\": [{\"url\": \"/api/v1\"}],\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    response = client.get(\"/app\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n@@ -4,13 +4,26 @@ from docs_src.behind_a_proxy.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"servers\": [\n             {\"url\": \"/api/v1\"},\n             {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n-        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n+            {\n+                \"url\": \"https://prod.example.com\",\n+                \"description\": \"Production environment\",\n+            },\n         ],\n         \"paths\": {\n             \"/app\": {\n@@ -27,15 +40,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    response = client.get(\"/app\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n@@ -4,12 +4,25 @@ from docs_src.behind_a_proxy.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"servers\": [\n             {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n-        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n+            {\n+                \"url\": \"https://prod.example.com\",\n+                \"description\": \"Production environment\",\n+            },\n         ],\n         \"paths\": {\n             \"/app\": {\n@@ -26,15 +39,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    response = client.get(\"/app\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello World\", \"root_path\": \"/api/v1\"}\n\n@@ -5,7 +5,167 @@ from docs_src.bigger_applications.app.main import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+no_jessica = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"token\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response,headers\",\n+    [\n+        (\n+            \"/users?token=jessica\",\n+            200,\n+            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n+            {},\n+        ),\n+        (\"/users\", 422, no_jessica, {}),\n+        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n+        (\"/users/foo\", 422, no_jessica, {}),\n+        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n+        (\"/users/me\", 422, no_jessica, {}),\n+        (\n+            \"/users?token=monica\",\n+            400,\n+            {\"detail\": \"No Jessica token provided\"},\n+            {},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            200,\n+            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            200,\n+            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            404,\n+            {\"detail\": \"Item not found\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n+        (\"/\", 422, no_jessica, {}),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response, headers):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_put_no_header():\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"query\", \"token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_put_invalid_header():\n+    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_put():\n+    response = client.put(\n+        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n+\n+\n+def test_put_forbidden():\n+    response = client.put(\n+        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n+\n+\n+def test_admin():\n+    response = client.post(\n+        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n+\n+\n+def test_admin_invalid_header():\n+    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -323,7 +483,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -332,160 +494,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-no_jessica = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"token\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        },\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response,headers\",\n-    [\n-        (\n-            \"/users?token=jessica\",\n-            200,\n-            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n-            {},\n-        ),\n-        (\"/users\", 422, no_jessica, {}),\n-        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n-        (\"/users/foo\", 422, no_jessica, {}),\n-        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n-        (\"/users/me\", 422, no_jessica, {}),\n-        (\n-            \"/users?token=monica\",\n-            400,\n-            {\"detail\": \"No Jessica token provided\"},\n-            {},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            200,\n-            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            200,\n-            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            404,\n-            {\"detail\": \"Item not found\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n-        (\"/\", 422, no_jessica, {}),\n-        (\"/openapi.json\", 200, openapi_schema, {}),\n-    ],\n-)\n-def test_get_path(path, expected_status, expected_response, headers):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_put_no_header():\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"query\", \"token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_put_invalid_header():\n-    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_put():\n-    response = client.put(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n-\n-\n-def test_put_forbidden():\n-    response = client.put(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n-\n-\n-def test_admin():\n-    response = client.post(\n-        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n-\n-\n-def test_admin_invalid_header():\n-    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n@@ -5,7 +5,167 @@ from docs_src.bigger_applications.app_an.main import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+no_jessica = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"token\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response,headers\",\n+    [\n+        (\n+            \"/users?token=jessica\",\n+            200,\n+            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n+            {},\n+        ),\n+        (\"/users\", 422, no_jessica, {}),\n+        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n+        (\"/users/foo\", 422, no_jessica, {}),\n+        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n+        (\"/users/me\", 422, no_jessica, {}),\n+        (\n+            \"/users?token=monica\",\n+            400,\n+            {\"detail\": \"No Jessica token provided\"},\n+            {},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            200,\n+            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            200,\n+            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            404,\n+            {\"detail\": \"Item not found\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n+        (\"/\", 422, no_jessica, {}),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response, headers):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_put_no_header():\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"query\", \"token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_put_invalid_header():\n+    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_put():\n+    response = client.put(\n+        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n+\n+\n+def test_put_forbidden():\n+    response = client.put(\n+        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n+\n+\n+def test_admin():\n+    response = client.post(\n+        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n+\n+\n+def test_admin_invalid_header():\n+    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -323,7 +483,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -332,160 +494,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-no_jessica = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"token\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        },\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response,headers\",\n-    [\n-        (\n-            \"/users?token=jessica\",\n-            200,\n-            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n-            {},\n-        ),\n-        (\"/users\", 422, no_jessica, {}),\n-        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n-        (\"/users/foo\", 422, no_jessica, {}),\n-        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n-        (\"/users/me\", 422, no_jessica, {}),\n-        (\n-            \"/users?token=monica\",\n-            400,\n-            {\"detail\": \"No Jessica token provided\"},\n-            {},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            200,\n-            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            200,\n-            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            404,\n-            {\"detail\": \"Item not found\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n-        (\"/\", 422, no_jessica, {}),\n-        (\"/openapi.json\", 200, openapi_schema, {}),\n-    ],\n-)\n-def test_get_path(path, expected_status, expected_response, headers):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_put_no_header():\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"query\", \"token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_put_invalid_header():\n-    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_put():\n-    response = client.put(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n-\n-\n-def test_put_forbidden():\n-    response = client.put(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n-\n-\n-def test_admin():\n-    response = client.post(\n-        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n-\n-\n-def test_admin_invalid_header():\n-    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n@@ -3,7 +3,184 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+no_jessica = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"token\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.bigger_applications.app_an_py39.main import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response,headers\",\n+    [\n+        (\n+            \"/users?token=jessica\",\n+            200,\n+            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n+            {},\n+        ),\n+        (\"/users\", 422, no_jessica, {}),\n+        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n+        (\"/users/foo\", 422, no_jessica, {}),\n+        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n+        (\"/users/me\", 422, no_jessica, {}),\n+        (\n+            \"/users?token=monica\",\n+            400,\n+            {\"detail\": \"No Jessica token provided\"},\n+            {},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            200,\n+            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            200,\n+            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            404,\n+            {\"detail\": \"Item not found\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n+        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n+        (\n+            \"/items?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            400,\n+            {\"detail\": \"X-Token header invalid\"},\n+            {\"X-Token\": \"invalid\"},\n+        ),\n+        (\n+            \"/items?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\n+            \"/items/plumbus?token=jessica\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"header\", \"x-token\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+            {},\n+        ),\n+        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n+        (\"/\", 422, no_jessica, {}),\n+    ],\n+)\n+def test_get_path(\n+    path, expected_status, expected_response, headers, client: TestClient\n+):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_put_no_header(client: TestClient):\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"query\", \"token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+@needs_py39\n+def test_put_invalid_header(client: TestClient):\n+    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+@needs_py39\n+def test_put(client: TestClient):\n+    response = client.put(\n+        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n+\n+\n+@needs_py39\n+def test_put_forbidden(client: TestClient):\n+    response = client.put(\n+        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n+\n+\n+@needs_py39\n+def test_admin(client: TestClient):\n+    response = client.post(\n+        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n+\n+\n+@needs_py39\n+def test_admin_invalid_header(client: TestClient):\n+    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -321,7 +498,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -330,177 +509,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-no_jessica = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"token\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        },\n-    ]\n-}\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.bigger_applications.app_an_py39.main import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response,headers\",\n-    [\n-        (\n-            \"/users?token=jessica\",\n-            200,\n-            [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}],\n-            {},\n-        ),\n-        (\"/users\", 422, no_jessica, {}),\n-        (\"/users/foo?token=jessica\", 200, {\"username\": \"foo\"}, {}),\n-        (\"/users/foo\", 422, no_jessica, {}),\n-        (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n-        (\"/users/me\", 422, no_jessica, {}),\n-        (\n-            \"/users?token=monica\",\n-            400,\n-            {\"detail\": \"No Jessica token provided\"},\n-            {},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            200,\n-            {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            200,\n-            {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            404,\n-            {\"detail\": \"Item not found\"},\n-            {\"X-Token\": \"fake-super-secret-token\"},\n-        ),\n-        (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n-        (\n-            \"/items?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items/bar?token=jessica\",\n-            400,\n-            {\"detail\": \"X-Token header invalid\"},\n-            {\"X-Token\": \"invalid\"},\n-        ),\n-        (\n-            \"/items?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\n-            \"/items/plumbus?token=jessica\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"header\", \"x-token\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    }\n-                ]\n-            },\n-            {},\n-        ),\n-        (\"/?token=jessica\", 200, {\"message\": \"Hello Bigger Applications!\"}, {}),\n-        (\"/\", 422, no_jessica, {}),\n-        (\"/openapi.json\", 200, openapi_schema, {}),\n-    ],\n-)\n-def test_get_path(\n-    path, expected_status, expected_response, headers, client: TestClient\n-):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py39\n-def test_put_no_header(client: TestClient):\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"query\", \"token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-@needs_py39\n-def test_put_invalid_header(client: TestClient):\n-    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n-\n-\n-@needs_py39\n-def test_put_forbidden(client: TestClient):\n-    response = client.put(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n-\n-\n-@needs_py39\n-def test_admin(client: TestClient):\n-    response = client.post(\n-        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n-\n-\n-@needs_py39\n-def test_admin_invalid_header(client: TestClient):\n-    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n@@ -7,89 +7,6 @@ from docs_src.body.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create Item\",\n-                \"operationId\": \"create_item_items__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Item\": {\n-                \"title\": \"Item\",\n-                \"required\": [\"name\", \"price\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n price_missing = {\n     \"detail\": [\n@@ -277,3 +194,86 @@ def test_other_exceptions():\n     with patch(\"json.loads\", side_effect=Exception):\n         response = client.post(\"/items/\", json={\"test\": \"test2\"})\n         assert response.status_code == 400, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -5,83 +5,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create Item\",\n-                \"operationId\": \"create_item_items__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Item\": {\n-                \"title\": \"Item\",\n-                \"required\": [\"name\", \"price\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture\n def client():\n@@ -91,13 +14,6 @@ def client():\n     return client\n \n \n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n price_missing = {\n     \"detail\": [\n         {\n@@ -292,3 +208,87 @@ def test_other_exceptions(client: TestClient):\n     with patch(\"json.loads\", side_effect=Exception):\n         response = client.post(\"/items/\", json={\"test\": \"test2\"})\n         assert response.status_code == 400, response.text\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -6,7 +6,64 @@ from docs_src.body_fields.tutorial001 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -87,7 +144,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,63 +166,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-price_not_greater = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0},\n-            \"loc\": [\"body\", \"item\", \"price\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-            },\n-        ),\n-        (\n-            \"/items/6\",\n-            {\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": \"5.4\",\n-                }\n-            },\n-            200,\n-            {\n-                \"item_id\": 6,\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": 5.4,\n-                },\n-            },\n-        ),\n-        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n-    ],\n-)\n-def test(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -6,7 +6,64 @@ from docs_src.body_fields.tutorial001_an import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -87,7 +144,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,63 +166,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-price_not_greater = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0},\n-            \"loc\": [\"body\", \"item\", \"price\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-            },\n-        ),\n-        (\n-            \"/items/6\",\n-            {\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": \"5.4\",\n-                }\n-            },\n-            200,\n-            {\n-                \"item_id\": 6,\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": 5.4,\n-                },\n-            },\n-        ),\n-        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n-    ],\n-)\n-def test(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,75 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_fields.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -84,7 +152,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -104,73 +174,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-price_not_greater = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0},\n-            \"loc\": [\"body\", \"item\", \"price\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-            },\n-        ),\n-        (\n-            \"/items/6\",\n-            {\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": \"5.4\",\n-                }\n-            },\n-            200,\n-            {\n-                \"item_id\": 6,\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": 5.4,\n-                },\n-            },\n-        ),\n-        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n-    ],\n-)\n-def test(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,75 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_fields.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -84,7 +152,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -104,73 +174,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-price_not_greater = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0},\n-            \"loc\": [\"body\", \"item\", \"price\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-            },\n-        ),\n-        (\n-            \"/items/6\",\n-            {\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": \"5.4\",\n-                }\n-            },\n-            200,\n-            {\n-                \"item_id\": 6,\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": 5.4,\n-                },\n-            },\n-        ),\n-        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n-    ],\n-)\n-def test(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,75 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_fields.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -84,7 +152,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -104,73 +174,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-price_not_greater = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"limit_value\": 0},\n-            \"loc\": [\"body\", \"item\", \"price\"],\n-            \"msg\": \"ensure this value is greater than 0\",\n-            \"type\": \"value_error.number.not_gt\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-            },\n-        ),\n-        (\n-            \"/items/6\",\n-            {\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": \"5.4\",\n-                }\n-            },\n-            200,\n-            {\n-                \"item_id\": 6,\n-                \"item\": {\n-                    \"name\": \"Bar\",\n-                    \"price\": 0.2,\n-                    \"description\": \"Some bar\",\n-                    \"tax\": 5.4,\n-                },\n-            },\n-        ),\n-        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n-    ],\n-)\n-def test(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,51 @@ from docs_src.body_multiple_params.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -79,7 +123,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -99,49 +145,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5?q=bar\",\n-            {\"name\": \"Foo\", \"price\": 50.5},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"q\": \"bar\",\n-            },\n-        ),\n-        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n-        (\"/items/5\", None, 200, {\"item_id\": 5}),\n-        (\"/items/foo\", None, 422, item_id_not_int),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,51 @@ from docs_src.body_multiple_params.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -79,7 +123,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -99,49 +145,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5?q=bar\",\n-            {\"name\": \"Foo\", \"price\": 50.5},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"q\": \"bar\",\n-            },\n-        ),\n-        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n-        (\"/items/5\", None, 200, {\"item_id\": 5}),\n-        (\"/items/foo\", None, 422, item_id_not_int),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,61 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -77,7 +131,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -97,59 +153,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5?q=bar\",\n-            {\"name\": \"Foo\", \"price\": 50.5},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"q\": \"bar\",\n-            },\n-        ),\n-        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n-        (\"/items/5\", None, 200, {\"item_id\": 5}),\n-        (\"/items/foo\", None, 422, item_id_not_int),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,61 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -77,7 +131,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -97,59 +153,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5?q=bar\",\n-            {\"name\": \"Foo\", \"price\": 50.5},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"q\": \"bar\",\n-            },\n-        ),\n-        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n-        (\"/items/5\", None, 200, {\"item_id\": 5}),\n-        (\"/items/foo\", None, 422, item_id_not_int),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,61 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -77,7 +131,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -97,59 +153,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-item_id_not_int = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"path\", \"item_id\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5?q=bar\",\n-            {\"name\": \"Foo\", \"price\": 50.5},\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"q\": \"bar\",\n-            },\n-        ),\n-        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n-        (\"/items/5\", None, 200, {\"item_id\": 5}),\n-        (\"/items/foo\", None, 422, item_id_not_int),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,91 @@ from docs_src.body_multiple_params.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+# Test required and embedded body parameters with no bodies sent\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -90,7 +174,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -110,89 +196,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\n-                \"importance\": 2,\n-                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-                \"user\": {\"username\": \"Dave\"},\n-            },\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"importance\": 2,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            None,\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            [],\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,91 @@ from docs_src.body_multiple_params.tutorial003_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+# Test required and embedded body parameters with no bodies sent\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -90,7 +174,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -110,89 +196,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\n-                \"importance\": 2,\n-                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-                \"user\": {\"username\": \"Dave\"},\n-            },\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"importance\": 2,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            None,\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            [],\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,101 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial003_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -88,7 +182,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -108,99 +204,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\n-                \"importance\": 2,\n-                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-                \"user\": {\"username\": \"Dave\"},\n-            },\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"importance\": 2,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            None,\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            [],\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,101 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial003_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -88,7 +182,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -108,99 +204,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\n-                \"importance\": 2,\n-                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-                \"user\": {\"username\": \"Dave\"},\n-            },\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"importance\": 2,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            None,\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            [],\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,101 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -88,7 +182,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -108,99 +204,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,body,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items/5\",\n-            {\n-                \"importance\": 2,\n-                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-                \"user\": {\"username\": \"Dave\"},\n-            },\n-            200,\n-            {\n-                \"item_id\": 5,\n-                \"importance\": 2,\n-                \"item\": {\n-                    \"name\": \"Foo\",\n-                    \"price\": 50.5,\n-                    \"description\": None,\n-                    \"tax\": None,\n-                },\n-                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            None,\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items/5\",\n-            [],\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"body\", \"item\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"user\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"body\", \"importance\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n-    response = client.put(path, json=body)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,33 @@ from docs_src.body_nested_models.tutorial009 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_body():\n+    data = {\"2\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_post_invalid_body():\n+    data = {\"foo\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"__key__\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +79,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,31 +101,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_body():\n-    data = {\"2\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n-\n-\n-def test_post_invalid_body():\n-    data = {\"foo\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"body\", \"__key__\"],\n-                \"msg\": \"value is not a valid integer\",\n-                \"type\": \"type_error.integer\",\n-            }\n-        ]\n-    }\n\n@@ -3,7 +3,44 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_nested_models.tutorial009_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_post_body(client: TestClient):\n+    data = {\"2\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+@needs_py39\n+def test_post_invalid_body(client: TestClient):\n+    data = {\"foo\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"__key__\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -52,7 +89,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,42 +111,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_nested_models.tutorial009_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_post_body(client: TestClient):\n-    data = {\"2\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n-\n-\n-@needs_py39\n-def test_post_invalid_body(client: TestClient):\n-    data = {\"foo\": 2.2, \"3\": 3.3}\n-    response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"body\", \"__key__\"],\n-                \"msg\": \"value is not a valid integer\",\n-                \"type\": \"type_error.integer\",\n-            }\n-        ]\n-    }\n\n@@ -4,7 +4,36 @@ from docs_src.body_updates.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/items/baz\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Baz\",\n+        \"description\": None,\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+def test_put():\n+    response = client.put(\n+        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n+    )\n+    assert response.json() == {\n+        \"name\": \"Barz\",\n+        \"description\": None,\n+        \"price\": 3,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -109,7 +138,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -129,34 +160,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/items/baz\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Baz\",\n-        \"description\": None,\n-        \"price\": 50.2,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-def test_put():\n-    response = client.put(\n-        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n-    )\n-    assert response.json() == {\n-        \"name\": \"Barz\",\n-        \"description\": None,\n-        \"price\": 3,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n\n@@ -3,7 +3,47 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_updates.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/baz\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Baz\",\n+        \"description\": None,\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py310\n+def test_put(client: TestClient):\n+    response = client.put(\n+        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n+    )\n+    assert response.json() == {\n+        \"name\": \"Barz\",\n+        \"description\": None,\n+        \"price\": 3,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -108,7 +148,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -128,45 +170,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_updates.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/baz\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Baz\",\n-        \"description\": None,\n-        \"price\": 50.2,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py310\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n-    )\n-    assert response.json() == {\n-        \"name\": \"Barz\",\n-        \"description\": None,\n-        \"price\": 3,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n\n@@ -3,7 +3,47 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_updates.tutorial001_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/baz\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Baz\",\n+        \"description\": None,\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py39\n+def test_put(client: TestClient):\n+    response = client.put(\n+        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n+    )\n+    assert response.json() == {\n+        \"name\": \"Barz\",\n+        \"description\": None,\n+        \"price\": 3,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -108,7 +148,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -128,45 +170,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_updates.tutorial001_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/baz\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Baz\",\n-        \"description\": None,\n-        \"price\": 50.2,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py39\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n-    )\n-    assert response.json() == {\n-        \"name\": \"Barz\",\n-        \"description\": None,\n-        \"price\": 3,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n\n@@ -4,35 +4,6 @@ from fastapi.testclient import TestClient\n \n from docs_src.conditional_openapi import tutorial001\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/\": {\n-            \"get\": {\n-                \"summary\": \"Root\",\n-                \"operationId\": \"root__get\",\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-            }\n-        }\n-    },\n-}\n-\n-\n-def test_default_openapi():\n-    client = TestClient(tutorial001.app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.json() == openapi_schema\n-    response = client.get(\"/docs\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/redoc\")\n-    assert response.status_code == 200, response.text\n-\n \n def test_disable_openapi(monkeypatch):\n     monkeypatch.setenv(\"OPENAPI_URL\", \"\")\n@@ -51,3 +22,31 @@ def test_root():\n     response = client.get(\"/\")\n     assert response.status_code == 200\n     assert response.json() == {\"message\": \"Hello World\"}\n+\n+\n+def test_default_openapi():\n+    importlib.reload(tutorial001)\n+    client = TestClient(tutorial001.app)\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/openapi.json\")\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"get\": {\n+                    \"summary\": \"Root\",\n+                    \"operationId\": \"root__get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                }\n+            }\n+        },\n+    }\n\n@@ -3,7 +3,33 @@ from fastapi.testclient import TestClient\n \n from docs_src.cookie_params.tutorial001 import app\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response):\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +74,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,25 +96,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,cookies,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"ads_id\": None}),\n-        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n-        (\n-            \"/items\",\n-            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n-            200,\n-            {\"ads_id\": \"ads_track\"},\n-        ),\n-        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n-    ],\n-)\n-def test(path, cookies, expected_status, expected_response):\n-    client = TestClient(app, cookies=cookies)\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,33 @@ from fastapi.testclient import TestClient\n \n from docs_src.cookie_params.tutorial001_an import app\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response):\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +74,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,25 +96,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,cookies,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"ads_id\": None}),\n-        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n-        (\n-            \"/items\",\n-            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n-            200,\n-            {\"ads_id\": \"ads_track\"},\n-        ),\n-        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n-    ],\n-)\n-def test(path, cookies, expected_status, expected_response):\n-    client = TestClient(app, cookies=cookies)\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,39 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response):\n+    from docs_src.cookie_params.tutorial001_an_py310 import app\n+\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema():\n+    from docs_src.cookie_params.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,28 +102,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,cookies,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"ads_id\": None}),\n-        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n-        (\n-            \"/items\",\n-            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n-            200,\n-            {\"ads_id\": \"ads_track\"},\n-        ),\n-        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n-    ],\n-)\n-def test(path, cookies, expected_status, expected_response):\n-    from docs_src.cookie_params.tutorial001_an_py310 import app\n-\n-    client = TestClient(app, cookies=cookies)\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,39 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response):\n+    from docs_src.cookie_params.tutorial001_an_py39 import app\n+\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema():\n+    from docs_src.cookie_params.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,28 +102,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,cookies,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"ads_id\": None}),\n-        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n-        (\n-            \"/items\",\n-            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n-            200,\n-            {\"ads_id\": \"ads_track\"},\n-        ),\n-        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n-    ],\n-)\n-def test(path, cookies, expected_status, expected_response):\n-    from docs_src.cookie_params.tutorial001_an_py39 import app\n-\n-    client = TestClient(app, cookies=cookies)\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,39 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response):\n+    from docs_src.cookie_params.tutorial001_py310 import app\n+\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema():\n+    from docs_src.cookie_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,28 +102,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,cookies,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"ads_id\": None}),\n-        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n-        (\n-            \"/items\",\n-            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n-            200,\n-            {\"ads_id\": \"ads_track\"},\n-        ),\n-        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n-    ],\n-)\n-def test(path, cookies, expected_status, expected_response):\n-    from docs_src.cookie_params.tutorial001_py310 import app\n-\n-    client = TestClient(app, cookies=cookies)\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,17 @@ from docs_src.custom_response.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_custom_response():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -4,7 +4,17 @@ from docs_src.custom_response.tutorial001b import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_custom_response():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -4,7 +4,29 @@ from docs_src.custom_response.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+html_contents = \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n+\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.text == html_contents\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,26 +44,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-html_contents = \"\"\"\n-    <html>\n-        <head>\n-            <title>Some HTML in here</title>\n-        </head>\n-        <body>\n-            <h1>Look ma! HTML!</h1>\n-        </body>\n-    </html>\n-    \"\"\"\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_custom_response():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.text == html_contents\n\n@@ -4,7 +4,17 @@ from docs_src.custom_response.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.text == \"Hello World\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert response.text == \"Hello World\"\n\n@@ -5,7 +5,16 @@ from docs_src.custom_response.tutorial006 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_get():\n+    response = client.get(\"/typer\", follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -23,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/typer\", follow_redirects=False)\n-    assert response.status_code == 307, response.text\n-    assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"\n\n@@ -5,7 +5,16 @@ from docs_src.custom_response.tutorial006b import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_redirect_response_class():\n+    response = client.get(\"/fastapi\", follow_redirects=False)\n+    assert response.status_code == 307\n+    assert response.headers[\"location\"] == \"https://fastapi.tiangolo.com\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -18,15 +27,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_redirect_response_class():\n-    response = client.get(\"/fastapi\", follow_redirects=False)\n-    assert response.status_code == 307\n-    assert response.headers[\"location\"] == \"https://fastapi.tiangolo.com\"\n\n@@ -5,7 +5,16 @@ from docs_src.custom_response.tutorial006c import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_redirect_status_code():\n+    response = client.get(\"/pydantic\", follow_redirects=False)\n+    assert response.status_code == 302\n+    assert response.headers[\"location\"] == \"https://pydantic-docs.helpmanual.io/\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -18,15 +27,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_redirect_status_code():\n-    response = client.get(\"/pydantic\", follow_redirects=False)\n-    assert response.status_code == 302\n-    assert response.headers[\"location\"] == \"https://pydantic-docs.helpmanual.io/\"\n\n@@ -4,7 +4,36 @@ from docs_src.dataclasses.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 3})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 3,\n+        \"description\": None,\n+        \"tax\": None,\n+    }\n+\n+\n+def test_post_invalid_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"invalid price\"})\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"price\"],\n+                \"msg\": \"value is not a valid float\",\n+                \"type\": \"type_error.float\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -71,7 +100,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -80,34 +111,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_item():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 3})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 3,\n-        \"description\": None,\n-        \"tax\": None,\n-    }\n-\n-\n-def test_post_invalid_item():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"invalid price\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"body\", \"price\"],\n-                \"msg\": \"value is not a valid float\",\n-                \"type\": \"type_error.float\",\n-            }\n-        ]\n-    }\n\n@@ -4,7 +4,57 @@ from docs_src.dataclasses.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_authors_item():\n+    response = client.post(\n+        \"/authors/foo/items/\",\n+        json=[{\"name\": \"Bar\"}, {\"name\": \"Baz\", \"description\": \"Drop the Baz\"}],\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"foo\",\n+        \"items\": [\n+            {\"name\": \"Bar\", \"description\": None},\n+            {\"name\": \"Baz\", \"description\": \"Drop the Baz\"},\n+        ],\n+    }\n+\n+\n+def test_get_authors():\n+    response = client.get(\"/authors/\")\n+    assert response.status_code == 200\n+    assert response.json() == [\n+        {\n+            \"name\": \"Breaters\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Island In The Moon\",\n+                    \"description\": \"A place to be be playin' and havin' fun\",\n+                },\n+                {\"name\": \"Holy Buddies\", \"description\": None},\n+            ],\n+        },\n+        {\n+            \"name\": \"System of an Up\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Salt\",\n+                    \"description\": \"The kombucha mushroom people's favorite\",\n+                },\n+                {\"name\": \"Pad Thai\", \"description\": None},\n+                {\n+                    \"name\": \"Lonely Night\",\n+                    \"description\": \"The mostests lonliest nightiest of allest\",\n+                },\n+            ],\n+        },\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -66,7 +116,9 @@ openapi_schema = {\n                                     \"schema\": {\n                                         \"title\": \"Response Get Authors Authors  Get\",\n                                         \"type\": \"array\",\n-                                    \"items\": {\"$ref\": \"#/components/schemas/Author\"},\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Author\"\n+                                        },\n                                     }\n                                 }\n                             },\n@@ -118,7 +170,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -127,55 +181,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_authors_item():\n-    response = client.post(\n-        \"/authors/foo/items/\",\n-        json=[{\"name\": \"Bar\"}, {\"name\": \"Baz\", \"description\": \"Drop the Baz\"}],\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"foo\",\n-        \"items\": [\n-            {\"name\": \"Bar\", \"description\": None},\n-            {\"name\": \"Baz\", \"description\": \"Drop the Baz\"},\n-        ],\n-    }\n-\n-\n-def test_get_authors():\n-    response = client.get(\"/authors/\")\n-    assert response.status_code == 200\n-    assert response.json() == [\n-        {\n-            \"name\": \"Breaters\",\n-            \"items\": [\n-                {\n-                    \"name\": \"Island In The Moon\",\n-                    \"description\": \"A place to be be playin' and havin' fun\",\n-                },\n-                {\"name\": \"Holy Buddies\", \"description\": None},\n-            ],\n-        },\n-        {\n-            \"name\": \"System of an Up\",\n-            \"items\": [\n-                {\n-                    \"name\": \"Salt\",\n-                    \"description\": \"The kombucha mushroom people's favorite\",\n-                },\n-                {\"name\": \"Pad Thai\", \"description\": None},\n-                {\n-                    \"name\": \"Lonely Night\",\n-                    \"description\": \"The mostests lonliest nightiest of allest\",\n-                },\n-            ],\n-        },\n-    ]\n\n@@ -5,7 +5,27 @@ from docs_src.dependencies.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -38,13 +58,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -80,13 +108,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -104,7 +140,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -124,26 +162,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,27 @@ from docs_src.dependencies.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -38,13 +58,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -80,13 +108,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -104,7 +140,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -124,26 +162,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,37 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,13 +66,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -78,13 +116,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -102,7 +148,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -122,36 +170,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,37 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,13 +66,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -78,13 +116,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -102,7 +148,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -122,36 +170,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,37 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,13 +66,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -78,13 +116,21 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -102,7 +148,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -122,36 +170,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,90 +5,6 @@ from docs_src.dependencies.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n-                        \"name\": \"q\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n-                        \"name\": \"skip\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -142,3 +58,95 @@ def test_get(path, expected_status, expected_response):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                            \"name\": \"q\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n+                            \"name\": \"skip\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n+                            \"name\": \"limit\",\n+                            \"in\": \"query\",\n+                        },\n+                    ],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -5,90 +5,6 @@ from docs_src.dependencies.tutorial004_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n-                        \"name\": \"q\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n-                        \"name\": \"skip\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -142,3 +58,95 @@ def test_get(path, expected_status, expected_response):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                            \"name\": \"q\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n+                            \"name\": \"skip\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n+                            \"name\": \"limit\",\n+                            \"in\": \"query\",\n+                        },\n+                    ],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -3,84 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n-                        \"name\": \"q\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n-                        \"name\": \"skip\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -90,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n @needs_py310\n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -150,3 +65,96 @@ def test_get(path, expected_status, expected_response, client: TestClient):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                            \"name\": \"q\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n+                            \"name\": \"skip\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n+                            \"name\": \"limit\",\n+                            \"in\": \"query\",\n+                        },\n+                    ],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -3,84 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n-                        \"name\": \"q\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n-                        \"name\": \"skip\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -90,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n @needs_py39\n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -150,3 +65,96 @@ def test_get(path, expected_status, expected_response, client: TestClient):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                            \"name\": \"q\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n+                            \"name\": \"skip\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n+                            \"name\": \"limit\",\n+                            \"in\": \"query\",\n+                        },\n+                    ],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -3,84 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n-                        \"name\": \"q\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n-                        \"name\": \"skip\",\n-                        \"in\": \"query\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -90,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n @needs_py310\n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -150,3 +65,96 @@ def test_get(path, expected_status, expected_response, client: TestClient):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                            \"name\": \"q\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n+                            \"name\": \"skip\",\n+                            \"in\": \"query\",\n+                        },\n+                        {\n+                            \"required\": False,\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n+                            \"name\": \"limit\",\n+                            \"in\": \"query\",\n+                        },\n+                    ],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -4,7 +4,56 @@ from docs_src.dependencies.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_no_headers():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_invalid_one_header():\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_second_header():\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_valid_headers():\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -55,7 +104,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -75,54 +126,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_no_headers():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_invalid_one_header():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -4,7 +4,56 @@ from docs_src.dependencies.tutorial006_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_no_headers():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_invalid_one_header():\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_second_header():\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_valid_headers():\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -55,7 +104,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -75,54 +126,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_no_headers():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_invalid_one_header():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -3,7 +3,69 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial006_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get_no_headers(client: TestClient):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+@needs_py39\n+def test_get_invalid_one_header(client: TestClient):\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+@needs_py39\n+def test_get_invalid_second_header(client: TestClient):\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+@needs_py39\n+def test_get_valid_headers(client: TestClient):\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +116,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,67 +138,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial006_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_get_no_headers(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-@needs_py39\n-def test_get_invalid_one_header(client: TestClient):\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_invalid_second_header(client: TestClient):\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_valid_headers(client: TestClient):\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -4,7 +4,101 @@ from docs_src.dependencies.tutorial012 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_no_headers_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_no_headers_users():\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_invalid_one_header_items():\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_one_users():\n+    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_second_header_items():\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_invalid_second_header_users():\n+    response = client.get(\n+        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_valid_headers_items():\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n+\n+\n+def test_get_valid_headers_users():\n+    response = client.get(\n+        \"/users/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -102,7 +196,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -111,99 +207,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_no_headers_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_no_headers_users():\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_invalid_one_header_items():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_one_users():\n-    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header_items():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_invalid_second_header_users():\n-    response = client.get(\n-        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers_items():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n-\n-\n-def test_get_valid_headers_users():\n-    response = client.get(\n-        \"/users/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n@@ -4,7 +4,101 @@ from docs_src.dependencies.tutorial012_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_no_headers_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_no_headers_users():\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"header\", \"x-token\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+            {\n+                \"loc\": [\"header\", \"x-key\"],\n+                \"msg\": \"field required\",\n+                \"type\": \"value_error.missing\",\n+            },\n+        ]\n+    }\n+\n+\n+def test_get_invalid_one_header_items():\n+    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_one_users():\n+    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n+\n+\n+def test_get_invalid_second_header_items():\n+    response = client.get(\n+        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_invalid_second_header_users():\n+    response = client.get(\n+        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n+\n+\n+def test_get_valid_headers_items():\n+    response = client.get(\n+        \"/items/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n+\n+\n+def test_get_valid_headers_users():\n+    response = client.get(\n+        \"/users/\",\n+        headers={\n+            \"X-Token\": \"fake-super-secret-token\",\n+            \"X-Key\": \"fake-super-secret-key\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -102,7 +196,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -111,99 +207,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_no_headers_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_no_headers_users():\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"header\", \"x-token\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-            {\n-                \"loc\": [\"header\", \"x-key\"],\n-                \"msg\": \"field required\",\n-                \"type\": \"value_error.missing\",\n-            },\n-        ]\n-    }\n-\n-\n-def test_get_invalid_one_header_items():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_one_users():\n-    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header_items():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_invalid_second_header_users():\n-    response = client.get(\n-        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers_items():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n-\n-\n-def test_get_valid_headers_users():\n-    response = client.get(\n-        \"/users/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n@@ -3,114 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"get\": {\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                        \"name\": \"x-token\",\n-                        \"in\": \"header\",\n-                    },\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                        \"name\": \"x-key\",\n-                        \"in\": \"header\",\n-                    },\n-                ],\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-        \"/users/\": {\n-            \"get\": {\n-                \"summary\": \"Read Users\",\n-                \"operationId\": \"read_users_users__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                        \"name\": \"x-token\",\n-                        \"in\": \"header\",\n-                    },\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                        \"name\": \"x-key\",\n-                        \"in\": \"header\",\n-                    },\n-                ],\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -120,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n @needs_py39\n def test_get_no_headers_items(client: TestClient):\n     response = client.get(\"/items/\")\n@@ -223,3 +108,118 @@ def test_get_valid_headers_users(client: TestClient):\n     )\n     assert response.status_code == 200, response.text\n     assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Items\",\n+                    \"operationId\": \"read_items_items__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": True,\n+                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                            \"name\": \"x-token\",\n+                            \"in\": \"header\",\n+                        },\n+                        {\n+                            \"required\": True,\n+                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n+                            \"name\": \"x-key\",\n+                            \"in\": \"header\",\n+                        },\n+                    ],\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/users/\": {\n+                \"get\": {\n+                    \"summary\": \"Read Users\",\n+                    \"operationId\": \"read_users_users__get\",\n+                    \"parameters\": [\n+                        {\n+                            \"required\": True,\n+                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n+                            \"name\": \"x-token\",\n+                            \"in\": \"header\",\n+                        },\n+                        {\n+                            \"required\": True,\n+                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n+                            \"name\": \"x-key\",\n+                            \"in\": \"header\",\n+                        },\n+                    ],\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -2,7 +2,19 @@ from fastapi.testclient import TestClient\n \n from docs_src.events.tutorial001 import app\n \n-openapi_schema = {\n+\n+def test_events():\n+    with TestClient(app) as client:\n+        response = client.get(\"/items/foo\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"name\": \"Fighters\"}\n+\n+\n+def test_openapi_schema():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\n             \"openapi\": \"3.0.2\",\n             \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n             \"paths\": {\n@@ -47,7 +59,9 @@ openapi_schema = {\n                             \"loc\": {\n                                 \"title\": \"Location\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n                             },\n                             \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                             \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -60,20 +74,12 @@ openapi_schema = {\n                             \"detail\": {\n                                 \"title\": \"Detail\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n                             }\n                         },\n                     },\n                 }\n             },\n         }\n-\n-\n-def test_events():\n-    with TestClient(app) as client:\n-        response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == openapi_schema\n-        response = client.get(\"/items/foo\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == {\"name\": \"Fighters\"}\n\n@@ -2,7 +2,21 @@ from fastapi.testclient import TestClient\n \n from docs_src.events.tutorial002 import app\n \n-openapi_schema = {\n+\n+def test_events():\n+    with TestClient(app) as client:\n+        response = client.get(\"/items/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == [{\"name\": \"Foo\"}]\n+    with open(\"log.txt\") as log:\n+        assert \"Application shutdown\" in log.read()\n+\n+\n+def test_openapi_schema():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\n             \"openapi\": \"3.0.2\",\n             \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n             \"paths\": {\n@@ -20,15 +34,3 @@ openapi_schema = {\n                 }\n             },\n         }\n-\n-\n-def test_events():\n-    with TestClient(app) as client:\n-        response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == openapi_schema\n-        response = client.get(\"/items/\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == [{\"name\": \"Foo\"}]\n-    with open(\"log.txt\") as log:\n-        assert \"Application shutdown\" in log.read()\n\n@@ -6,7 +6,22 @@ from docs_src.events.tutorial003 import (\n     ml_models,\n )\n \n-openapi_schema = {\n+\n+def test_events():\n+    assert not ml_models, \"ml_models should be empty\"\n+    with TestClient(app) as client:\n+        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n+        response = client.get(\"/predict\", params={\"x\": 2})\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"result\": 84.0}\n+    assert not ml_models, \"ml_models should be empty\"\n+\n+\n+def test_openapi_schema():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\n             \"openapi\": \"3.0.2\",\n             \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n             \"paths\": {\n@@ -50,7 +65,9 @@ openapi_schema = {\n                             \"detail\": {\n                                 \"title\": \"Detail\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n                             }\n                         },\n                     },\n@@ -62,7 +79,9 @@ openapi_schema = {\n                             \"loc\": {\n                                 \"title\": \"Location\",\n                                 \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n                             },\n                             \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                             \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -71,16 +90,3 @@ openapi_schema = {\n                 }\n             },\n         }\n-\n-\n-def test_events():\n-    assert not ml_models, \"ml_models should be empty\"\n-    with TestClient(app) as client:\n-        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n-        response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == openapi_schema\n-        response = client.get(\"/predict\", params={\"x\": 2})\n-        assert response.status_code == 200, response.text\n-        assert response.json() == {\"result\": 84.0}\n-    assert not ml_models, \"ml_models should be empty\"\n\n@@ -4,13 +4,25 @@ from docs_src.extending_openapi.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"name\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\n             \"title\": \"Custom title\",\n             \"version\": \"2.5.0\",\n             \"description\": \"This is a very custom OpenAPI schema\",\n-        \"x-logo\": {\"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"},\n+            \"x-logo\": {\n+                \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n+            },\n         },\n         \"paths\": {\n             \"/items/\": {\n@@ -27,18 +39,8 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n+    openapi_schema = response.json()\n+    # Request again to test the custom cache\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"name\": \"Foo\"}]\n\n@@ -5,7 +5,31 @@ from docs_src.extra_data_types.tutorial001 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_extra_types():\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -89,7 +113,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -109,30 +135,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_extra_types():\n-    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n-    data = {\n-        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n-        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n-        \"repeat_at\": \"15:30:00\",\n-        \"process_after\": 300,\n-    }\n-    expected_response = data.copy()\n-    expected_response.update(\n-        {\n-            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n-            \"duration\": 176_100,\n-            \"item_id\": item_id,\n-        }\n-    )\n-    response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,31 @@ from docs_src.extra_data_types.tutorial001_an import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_extra_types():\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -89,7 +113,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -109,30 +135,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_extra_types():\n-    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n-    data = {\n-        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n-        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n-        \"repeat_at\": \"15:30:00\",\n-        \"process_after\": 300,\n-    }\n-    expected_response = data.copy()\n-    expected_response.update(\n-        {\n-            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n-            \"duration\": 176_100,\n-            \"item_id\": item_id,\n-        }\n-    )\n-    response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,42 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_data_types.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_extra_types(client: TestClient):\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -87,7 +122,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,40 +144,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_data_types.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_extra_types(client: TestClient):\n-    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n-    data = {\n-        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n-        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n-        \"repeat_at\": \"15:30:00\",\n-        \"process_after\": 300,\n-    }\n-    expected_response = data.copy()\n-    expected_response.update(\n-        {\n-            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n-            \"duration\": 176_100,\n-            \"item_id\": item_id,\n-        }\n-    )\n-    response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,42 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_data_types.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_extra_types(client: TestClient):\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -87,7 +122,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,40 +144,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_data_types.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_extra_types(client: TestClient):\n-    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n-    data = {\n-        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n-        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n-        \"repeat_at\": \"15:30:00\",\n-        \"process_after\": 300,\n-    }\n-    expected_response = data.copy()\n-    expected_response.update(\n-        {\n-            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n-            \"duration\": 176_100,\n-            \"item_id\": item_id,\n-        }\n-    )\n-    response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,42 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_data_types.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_extra_types(client: TestClient):\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -87,7 +122,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,40 +144,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_data_types.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_extra_types(client: TestClient):\n-    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n-    data = {\n-        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n-        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n-        \"repeat_at\": \"15:30:00\",\n-        \"process_after\": 300,\n-    }\n-    expected_response = data.copy()\n-    expected_response.update(\n-        {\n-            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n-            \"duration\": 176_100,\n-            \"item_id\": item_id,\n-        }\n-    )\n-    response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,30 @@ from docs_src.extra_models.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_car():\n+    response = client.get(\"/items/item1\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"All my friends drive a low rider\",\n+        \"type\": \"car\",\n+    }\n+\n+\n+def test_get_plane():\n+    response = client.get(\"/items/item2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -78,7 +101,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -98,28 +123,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_car():\n-    response = client.get(\"/items/item1\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"All my friends drive a low rider\",\n-        \"type\": \"car\",\n-    }\n-\n-\n-def test_get_plane():\n-    response = client.get(\"/items/item2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n-        \"type\": \"plane\",\n-        \"size\": 5,\n-    }\n\n@@ -3,7 +3,41 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_get_car(client: TestClient):\n+    response = client.get(\"/items/item1\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"All my friends drive a low rider\",\n+        \"type\": \"car\",\n+    }\n+\n+\n+@needs_py310\n+def test_get_plane(client: TestClient):\n+    response = client.get(\"/items/item2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -77,7 +111,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -97,39 +133,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_get_car(client: TestClient):\n-    response = client.get(\"/items/item1\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"All my friends drive a low rider\",\n-        \"type\": \"car\",\n-    }\n-\n-\n-@needs_py310\n-def test_get_plane(client: TestClient):\n-    response = client.get(\"/items/item2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n-        \"type\": \"plane\",\n-        \"size\": 5,\n-    }\n\n@@ -4,7 +4,20 @@ from docs_src.extra_models.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -43,18 +56,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n-        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n-    ]\n\n@@ -3,7 +3,30 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial004_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get_items(client: TestClient):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+    ]\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,28 +65,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial004_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_get_items(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n-        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n-    ]\n\n@@ -4,7 +4,17 @@ from docs_src.extra_models.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_items():\n+    response = client.get(\"/keyword-weights/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -30,15 +40,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_items():\n-    response = client.get(\"/keyword-weights/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -3,7 +3,27 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial005_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get_items(client: TestClient):\n+    response = client.get(\"/keyword-weights/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -29,25 +49,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial005_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_get_items(client: TestClient):\n-    response = client.get(\"/keyword-weights/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -5,7 +5,24 @@ from docs_src.first_steps.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/\", 200, {\"message\": \"Hello World\"}),\n+        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -23,17 +40,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/\", 200, {\"message\": \"Hello World\"}),\n-        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n-        (\"/openapi.json\", 200, openapi_schema),\n-    ],\n-)\n-def test_get_path(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,34 @@ from docs_src.generate_clients.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_items():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 5})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Item received\"}\n+\n+\n+def test_post_users():\n+    response = client.post(\n+        \"/users/\", json={\"username\": \"Foo\", \"email\": \"foo@example.com\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"User received\"}\n+\n+\n+def test_get_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -147,7 +174,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -156,33 +185,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    with client:\n-        response = client.get(\"/openapi.json\")\n-\n-        assert response.json() == openapi_schema\n-\n-\n-def test_post_items():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 5})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Item received\"}\n-\n-\n-def test_post_users():\n-    response = client.post(\n-        \"/users/\", json={\"username\": \"Foo\", \"email\": \"foo@example.com\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"User received\"}\n-\n-\n-def test_get_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Plumbus\", \"price\": 3},\n-        {\"name\": \"Portal Gun\", \"price\": 9001},\n-    ]\n\n@@ -4,7 +4,24 @@ from docs_src.handling_errors.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_item():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.headers.get(\"x-error\") is None\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +66,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,22 +88,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_item():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n-\n-\n-def test_get_item_not_found():\n-    response = client.get(\"/items/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.headers.get(\"x-error\") is None\n-    assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -4,7 +4,24 @@ from docs_src.handling_errors.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_item_header():\n+    response = client.get(\"/items-header/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found_header():\n+    response = client.get(\"/items-header/bar\")\n+    assert response.status_code == 404, response.text\n+    assert response.headers.get(\"x-error\") == \"There goes my error\"\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +66,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,22 +88,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_item_header():\n-    response = client.get(\"/items-header/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n-\n-\n-def test_get_item_not_found_header():\n-    response = client.get(\"/items-header/bar\")\n-    assert response.status_code == 404, response.text\n-    assert response.headers.get(\"x-error\") == \"There goes my error\"\n-    assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -4,7 +4,25 @@ from docs_src.handling_errors.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/unicorns/shinny\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"unicorn_name\": \"shinny\"}\n+\n+\n+def test_get_exception():\n+    response = client.get(\"/unicorns/yolo\")\n+    assert response.status_code == 418, response.text\n+    assert response.json() == {\n+        \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +67,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,23 +89,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/unicorns/shinny\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"unicorn_name\": \"shinny\"}\n-\n-\n-def test_get_exception():\n-    response = client.get(\"/unicorns/yolo\")\n-    assert response.status_code == 418, response.text\n-    assert response.json() == {\n-        \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n-    }\n\n@@ -4,7 +4,34 @@ from docs_src.handling_errors.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_validation_error():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 400, response.text\n+    validation_error_str_lines = [\n+        b\"1 validation error for Request\",\n+        b\"path -> item_id\",\n+        b\"  value is not a valid integer (type=type_error.integer)\",\n+    ]\n+    assert response.content == b\"\\n\".join(validation_error_str_lines)\n+\n+\n+def test_get_http_error():\n+    response = client.get(\"/items/3\")\n+    assert response.status_code == 418, response.text\n+    assert response.content == b\"Nope! I don't like 3.\"\n+\n+\n+def test_get():\n+    response = client.get(\"/items/2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": 2}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +76,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,32 +98,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_validation_error():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 400, response.text\n-    validation_error_str_lines = [\n-        b\"1 validation error for Request\",\n-        b\"path -> item_id\",\n-        b\"  value is not a valid integer (type=type_error.integer)\",\n-    ]\n-    assert response.content == b\"\\n\".join(validation_error_str_lines)\n-\n-\n-def test_get_http_error():\n-    response = client.get(\"/items/3\")\n-    assert response.status_code == 418, response.text\n-    assert response.content == b\"Nope! I don't like 3.\"\n-\n-\n-def test_get():\n-    response = client.get(\"/items/2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": 2}\n\n@@ -4,7 +4,33 @@ from docs_src.handling_errors.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_validation_error():\n+    response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"size\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ],\n+        \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n+    }\n+\n+\n+def test_post():\n+    data = {\"title\": \"towel\", \"size\": 5}\n+    response = client.post(\"/items/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -69,7 +95,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -78,31 +106,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_validation_error():\n-    response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"body\", \"size\"],\n-                \"msg\": \"value is not a valid integer\",\n-                \"type\": \"type_error.integer\",\n-            }\n-        ],\n-        \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n-    }\n-\n-\n-def test_post():\n-    data = {\"title\": \"towel\", \"size\": 5}\n-    response = client.post(\"/items/\", json=data)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n\n@@ -4,7 +4,37 @@ from docs_src.handling_errors.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_validation_error():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"path\", \"item_id\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_get_http_error():\n+    response = client.get(\"/items/3\")\n+    assert response.status_code == 418, response.text\n+    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n+\n+\n+def test_get():\n+    response = client.get(\"/items/2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item_id\": 2}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +79,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,35 +101,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_validation_error():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"loc\": [\"path\", \"item_id\"],\n-                \"msg\": \"value is not a valid integer\",\n-                \"type\": \"type_error.integer\",\n-            }\n-        ]\n-    }\n-\n-\n-def test_get_http_error():\n-    response = client.get(\"/items/3\")\n-    assert response.status_code == 418, response.text\n-    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n-\n-\n-def test_get():\n-    response = client.get(\"/items/2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": 2}\n\n@@ -6,7 +6,24 @@ from docs_src.header_params.tutorial001 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +68,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -71,18 +90,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -6,7 +6,24 @@ from docs_src.header_params.tutorial001_an import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +68,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -71,18 +90,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,35 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial001_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +76,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,27 +98,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,35 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +76,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,27 +98,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -6,7 +6,35 @@ from docs_src.header_params.tutorial002 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"strange_header\": None}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n+        (\n+            \"/items\",\n+            {\"strange_header\": \"FastAPI test\"},\n+            200,\n+            {\"strange_header\": \"FastAPI test\"},\n+        ),\n+        (\n+            \"/items\",\n+            {\"strange-header\": \"Not really underscore\"},\n+            200,\n+            {\"strange_header\": None},\n+        ),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +79,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -71,29 +101,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -6,7 +6,35 @@ from docs_src.header_params.tutorial002_an import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"strange_header\": None}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n+        (\n+            \"/items\",\n+            {\"strange_header\": \"FastAPI test\"},\n+            200,\n+            {\"strange_header\": \"FastAPI test\"},\n+        ),\n+        (\n+            \"/items\",\n+            {\"strange-header\": \"Not really underscore\"},\n+            200,\n+            {\"strange_header\": None},\n+        ),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +79,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -71,29 +101,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,46 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial002_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"strange_header\": None}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n+        (\n+            \"/items\",\n+            {\"strange_header\": \"FastAPI test\"},\n+            200,\n+            {\"strange_header\": \"FastAPI test\"},\n+        ),\n+        (\n+            \"/items\",\n+            {\"strange-header\": \"Not really underscore\"},\n+            200,\n+            {\"strange_header\": None},\n+        ),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +87,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,38 +109,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,49 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial002_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"strange_header\": None}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n+        (\n+            \"/items\",\n+            {\"strange_header\": \"FastAPI test\"},\n+            200,\n+            {\"strange_header\": \"FastAPI test\"},\n+        ),\n+        (\n+            \"/items\",\n+            {\"strange-header\": \"Not really underscore\"},\n+            200,\n+            {\"strange_header\": None},\n+        ),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema():\n+    from docs_src.header_params.tutorial002_an_py39 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +90,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,38 +112,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,49 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial002_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/items\", None, 200, {\"strange_header\": None}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n+        (\n+            \"/items\",\n+            {\"strange_header\": \"FastAPI test\"},\n+            200,\n+            {\"strange_header\": \"FastAPI test\"},\n+        ),\n+        (\n+            \"/items\",\n+            {\"strange-header\": \"Not really underscore\"},\n+            200,\n+            {\"strange_header\": None},\n+        ),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema():\n+    from docs_src.header_params.tutorial002_py310 import app\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,7 +90,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -68,38 +112,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", None, 200, openapi_schema),\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,17 @@ from docs_src.metadata.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"name\": \"Katana\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\n             \"title\": \"ChimichangApp\",\n@@ -36,15 +46,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"name\": \"Katana\"}]\n\n@@ -4,7 +4,18 @@ from docs_src.metadata.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_path_operations():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -50,16 +61,3 @@ openapi_schema = {\n             },\n         ],\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_path_operations():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n\n@@ -4,7 +4,24 @@ from docs_src.openapi_callbacks.tutorial001 import app, invoice_notification\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.post(\n+        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Invoice received\"}\n+\n+\n+def test_dummy_callback():\n+    # Just for coverage\n+    invoice_notification({})\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -143,7 +160,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -152,23 +171,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    with client:\n-        response = client.get(\"/openapi.json\")\n-\n-        assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.post(\n-        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"msg\": \"Invoice received\"}\n-\n-\n-def test_dummy_callback():\n-    # Just for coverage\n-    invoice_notification({})\n\n@@ -4,7 +4,17 @@ from docs_src.path_operation_advanced_configuration.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -4,7 +4,17 @@ from docs_src.path_operation_advanced_configuration.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -4,20 +4,18 @@ from docs_src.path_operation_advanced_configuration.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {},\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_get():\n     response = client.get(\"/items/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\"}]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {},\n+    }\n\n@@ -4,7 +4,23 @@ from docs_src.path_operation_advanced_configuration.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_query_params_str_validations():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -72,7 +88,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -92,21 +110,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_query_params_str_validations():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n\n@@ -4,7 +4,16 @@ from docs_src.path_operation_advanced_configuration.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -23,14 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n\n@@ -4,7 +4,24 @@ from docs_src.path_operation_advanced_configuration.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post():\n+    response = client.post(\"/items/\", content=b\"this is actually not validated\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"size\": 30,\n+        \"content\": {\n+            \"name\": \"Maaaagic\",\n+            \"price\": 42,\n+            \"description\": \"Just kiddin', no magic here. ✨\",\n+        },\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -38,22 +55,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post():\n-    response = client.post(\"/items/\", content=b\"this is actually not validated\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"size\": 30,\n-        \"content\": {\n-            \"name\": \"Maaaagic\",\n-            \"price\": 42,\n-            \"description\": \"Just kiddin', no magic here. ✨\",\n-        },\n-    }\n\n@@ -4,51 +4,6 @@ from docs_src.path_operation_advanced_configuration.tutorial007 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"post\": {\n-                \"summary\": \"Create Item\",\n-                \"operationId\": \"create_item_items__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-yaml\": {\n-                            \"schema\": {\n-                                \"title\": \"Item\",\n-                                \"required\": [\"name\", \"tags\"],\n-                                \"type\": \"object\",\n-                                \"properties\": {\n-                                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                                    \"tags\": {\n-                                        \"title\": \"Tags\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"type\": \"string\"},\n-                                    },\n-                                },\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-            }\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_post():\n     yaml_data = \"\"\"\n@@ -95,3 +50,46 @@ def test_post_invalid():\n             {\"loc\": [\"tags\", 3], \"msg\": \"str type expected\", \"type\": \"type_error.str\"}\n         ]\n     }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/items/\": {\n+                \"post\": {\n+                    \"summary\": \"Create Item\",\n+                    \"operationId\": \"create_item_items__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-yaml\": {\n+                                \"schema\": {\n+                                    \"title\": \"Item\",\n+                                    \"required\": [\"name\", \"tags\"],\n+                                    \"type\": \"object\",\n+                                    \"properties\": {\n+                                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                                        \"tags\": {\n+                                            \"title\": \"Tags\",\n+                                            \"type\": \"array\",\n+                                            \"items\": {\"type\": \"string\"},\n+                                        },\n+                                    },\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                }\n+            }\n+        },\n+    }\n\n@@ -4,7 +4,23 @@ from docs_src.path_operation_configuration.tutorial002b import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\"Portal gun\", \"Plumbus\"]\n+\n+\n+def test_get_users():\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\"Rick\", \"Morty\"]\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -36,21 +52,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\"Portal gun\", \"Plumbus\"]\n-\n-\n-def test_get_users():\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\"Rick\", \"Morty\"]\n\n@@ -4,7 +4,23 @@ from docs_src.path_operation_configuration.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_query_params_str_validations():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -72,7 +88,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -92,21 +110,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_query_params_str_validations():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n\n@@ -3,7 +3,33 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.path_operation_configuration.tutorial005_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_query_params_str_validations(client: TestClient):\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -71,7 +97,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -91,31 +119,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.path_operation_configuration.tutorial005_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_query_params_str_validations(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n\n@@ -3,7 +3,33 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.path_operation_configuration.tutorial005_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_query_params_str_validations(client: TestClient):\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -71,7 +97,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -91,31 +119,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.path_operation_configuration.tutorial005_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_query_params_str_validations(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n\n@@ -5,7 +5,25 @@ from docs_src.path_operation_configuration.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/\", 200, [{\"name\": \"Foo\", \"price\": 42}]),\n+        (\"/users/\", 200, [{\"username\": \"johndoe\"}]),\n+        (\"/elements/\", 200, [{\"item_id\": \"Foo\"}]),\n+    ],\n+)\n+def test_query_params_str_validations(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,23 +69,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items/\", 200, [{\"name\": \"Foo\", \"price\": 42}]),\n-        (\"/users/\", 200, [{\"username\": \"johndoe\"}]),\n-        (\"/elements/\", 200, [{\"item_id\": \"Foo\"}]),\n-    ],\n-)\n-def test_query_params_str_validations(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,25 @@ from docs_src.path_params.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_file_path():\n+    response = client.get(\"/files/home/johndoe/myfile.txt\")\n+    print(response.content)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}\n+\n+\n+def test_root_file_path():\n+    response = client.get(\"/files//home/johndoe/myfile.txt\")\n+    print(response.content)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -49,7 +67,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -69,23 +89,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_file_path():\n-    response = client.get(\"/files/home/johndoe/myfile.txt\")\n-    print(response.content)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}\n-\n-\n-def test_root_file_path():\n-    response = client.get(\"/files//home/johndoe/myfile.txt\")\n-    print(response.content)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}\n\n@@ -5,78 +5,52 @@ from docs_src.path_params.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/models/{model_name}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Get Model\",\n-                \"operationId\": \"get_model_models__model_name__get\",\n-                \"parameters\": [\n+\n+@pytest.mark.parametrize(\n+    \"url,status_code,expected\",\n+    [\n+        (\n+            \"/models/alexnet\",\n+            200,\n+            {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"},\n+        ),\n+        (\n+            \"/models/lenet\",\n+            200,\n+            {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"},\n+        ),\n+        (\n+            \"/models/resnet\",\n+            200,\n+            {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"},\n+        ),\n+        (\n+            \"/models/foo\",\n+            422,\n             {\n-                        \"required\": True,\n-                        \"schema\": {\n-                            \"title\": \"Model Name\",\n-                            \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n-                            \"type\": \"string\",\n-                        },\n-                        \"name\": \"model_name\",\n-                        \"in\": \"path\",\n+                \"detail\": [\n+                    {\n+                        \"ctx\": {\"enum_values\": [\"alexnet\", \"resnet\", \"lenet\"]},\n+                        \"loc\": [\"path\", \"model_name\"],\n+                        \"msg\": \"value is not a valid enumeration member; permitted: 'alexnet', 'resnet', 'lenet'\",\n+                        \"type\": \"type_error.enum\",\n                     }\n+                ]\n+            },\n+        ),\n     ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n+)\n+def test_get_enums(url, status_code, expected):\n+    response = client.get(url)\n+    assert response.status_code == status_code\n+    assert response.json() == expected\n \n \n-openapi_schema2 = {\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -138,7 +112,9 @@ openapi_schema2 = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -147,50 +123,3 @@ openapi_schema2 = {\n             }\n         },\n     }\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data == openapi_schema or data == openapi_schema2\n-\n-\n-@pytest.mark.parametrize(\n-    \"url,status_code,expected\",\n-    [\n-        (\n-            \"/models/alexnet\",\n-            200,\n-            {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"},\n-        ),\n-        (\n-            \"/models/lenet\",\n-            200,\n-            {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"},\n-        ),\n-        (\n-            \"/models/resnet\",\n-            200,\n-            {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"},\n-        ),\n-        (\n-            \"/models/foo\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"ctx\": {\"enum_values\": [\"alexnet\", \"resnet\", \"lenet\"]},\n-                        \"loc\": [\"path\", \"model_name\"],\n-                        \"msg\": \"value is not a valid enumeration member; permitted: 'alexnet', 'resnet', 'lenet'\",\n-                        \"type\": \"type_error.enum\",\n-                    }\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test_get_enums(url, status_code, expected):\n-    response = client.get(url)\n-    assert response.status_code == status_code\n-    assert response.json() == expected\n\n@@ -5,7 +5,36 @@ from docs_src.query_params.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+query_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"needy\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/foo?needy=very\", 200, {\"item_id\": \"foo\", \"needy\": \"very\"}),\n+        (\"/items/foo\", 422, query_required),\n+        (\"/items/foo\", 422, query_required),\n+    ],\n+)\n+def test(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -56,7 +85,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -76,29 +107,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-query_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"needy\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", 200, openapi_schema),\n-        (\"/items/foo?needy=very\", 200, {\"item_id\": \"foo\", \"needy\": \"very\"}),\n-        (\"/items/foo\", 422, query_required),\n-        (\"/items/foo\", 422, query_required),\n-    ],\n-)\n-def test(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,61 @@ from docs_src.query_params.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+query_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"needy\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/foo?needy=very\",\n+            200,\n+            {\"item_id\": \"foo\", \"needy\": \"very\", \"skip\": 0, \"limit\": None},\n+        ),\n+        (\n+            \"/items/foo?skip=a&limit=b\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"needy\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"skip\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"limit\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -44,7 +98,11 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n@@ -68,7 +126,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -88,54 +148,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-query_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"needy\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", 200, openapi_schema),\n-        (\n-            \"/items/foo?needy=very\",\n-            200,\n-            {\"item_id\": \"foo\", \"needy\": \"very\", \"skip\": 0, \"limit\": None},\n-        ),\n-        (\n-            \"/items/foo?skip=a&limit=b\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"query\", \"needy\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"query\", \"skip\"],\n-                        \"msg\": \"value is not a valid integer\",\n-                        \"type\": \"type_error.integer\",\n-                    },\n-                    {\n-                        \"loc\": [\"query\", \"limit\"],\n-                        \"msg\": \"value is not a valid integer\",\n-                        \"type\": \"type_error.integer\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,70 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+query_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"needy\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params.tutorial006_py310 import app\n+\n+    c = TestClient(app)\n+    return c\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/foo?needy=very\",\n+            200,\n+            {\"item_id\": \"foo\", \"needy\": \"very\", \"skip\": 0, \"limit\": None},\n+        ),\n+        (\n+            \"/items/foo?skip=a&limit=b\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"needy\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"skip\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"limit\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,7 +105,11 @@ openapi_schema = {\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n@@ -66,7 +133,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -86,63 +155,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-query_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"query\", \"needy\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params.tutorial006_py310 import app\n-\n-    c = TestClient(app)\n-    return c\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/openapi.json\", 200, openapi_schema),\n-        (\n-            \"/items/foo?needy=very\",\n-            200,\n-            {\"item_id\": \"foo\", \"needy\": \"very\", \"skip\": 0, \"limit\": None},\n-        ),\n-        (\n-            \"/items/foo?skip=a&limit=b\",\n-            422,\n-            {\n-                \"detail\": [\n-                    {\n-                        \"loc\": [\"query\", \"needy\"],\n-                        \"msg\": \"field required\",\n-                        \"type\": \"value_error.missing\",\n-                    },\n-                    {\n-                        \"loc\": [\"query\", \"skip\"],\n-                        \"msg\": \"value is not a valid integer\",\n-                        \"type\": \"type_error.integer\",\n-                    },\n-                    {\n-                        \"loc\": [\"query\", \"limit\"],\n-                        \"msg\": \"value is not a valid integer\",\n-                        \"type\": \"type_error.integer\",\n-                    },\n-                ]\n-            },\n-        ),\n-    ],\n-)\n-def test(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,46 @@ from docs_src.query_params_str_validations.tutorial010 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(q_name, q, expected_status, expected_response):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -59,7 +98,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -79,44 +120,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-regex_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-            \"loc\": [\"query\", \"item-query\"],\n-            \"msg\": 'string does not match regex \"^fixedquery$\"',\n-            \"type\": \"value_error.str.regex\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"q_name,q,expected_status,expected_response\",\n-    [\n-        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\n-            \"item-query\",\n-            \"fixedquery\",\n-            200,\n-            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n-        ),\n-        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\"item-query\", \"nonregexquery\", 422, regex_error),\n-    ],\n-)\n-def test_query_params_str_validations(q_name, q, expected_status, expected_response):\n-    url = \"/items/\"\n-    if q_name and q:\n-        url = f\"{url}?{q_name}={q}\"\n-    response = client.get(url)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -5,7 +5,46 @@ from docs_src.query_params_str_validations.tutorial010_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(q_name, q, expected_status, expected_response):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -59,7 +98,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -79,44 +120,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-regex_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-            \"loc\": [\"query\", \"item-query\"],\n-            \"msg\": 'string does not match regex \"^fixedquery$\"',\n-            \"type\": \"value_error.str.regex\",\n-        }\n-    ]\n-}\n-\n-\n-@pytest.mark.parametrize(\n-    \"q_name,q,expected_status,expected_response\",\n-    [\n-        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\n-            \"item-query\",\n-            \"fixedquery\",\n-            200,\n-            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n-        ),\n-        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\"item-query\", \"nonregexquery\", 422, regex_error),\n-    ],\n-)\n-def test_query_params_str_validations(q_name, q, expected_status, expected_response):\n-    url = \"/items/\"\n-    if q_name and q:\n-        url = f\"{url}?{q_name}={q}\"\n-    response = client.get(url)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,58 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial010_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(\n+    q_name, q, expected_status, expected_response, client: TestClient\n+):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -57,7 +108,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -77,56 +130,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-regex_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-            \"loc\": [\"query\", \"item-query\"],\n-            \"msg\": 'string does not match regex \"^fixedquery$\"',\n-            \"type\": \"value_error.str.regex\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"q_name,q,expected_status,expected_response\",\n-    [\n-        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\n-            \"item-query\",\n-            \"fixedquery\",\n-            200,\n-            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n-        ),\n-        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\"item-query\", \"nonregexquery\", 422, regex_error),\n-    ],\n-)\n-def test_query_params_str_validations(\n-    q_name, q, expected_status, expected_response, client: TestClient\n-):\n-    url = \"/items/\"\n-    if q_name and q:\n-        url = f\"{url}?{q_name}={q}\"\n-    response = client.get(url)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,58 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial010_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(\n+    q_name, q, expected_status, expected_response, client: TestClient\n+):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -57,7 +108,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -77,56 +130,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-regex_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-            \"loc\": [\"query\", \"item-query\"],\n-            \"msg\": 'string does not match regex \"^fixedquery$\"',\n-            \"type\": \"value_error.str.regex\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"q_name,q,expected_status,expected_response\",\n-    [\n-        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\n-            \"item-query\",\n-            \"fixedquery\",\n-            200,\n-            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n-        ),\n-        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\"item-query\", \"nonregexquery\", 422, regex_error),\n-    ],\n-)\n-def test_query_params_str_validations(\n-    q_name, q, expected_status, expected_response, client: TestClient\n-):\n-    url = \"/items/\"\n-    if q_name and q:\n-        url = f\"{url}?{q_name}={q}\"\n-    response = client.get(url)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -3,7 +3,58 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial010_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(\n+    q_name, q, expected_status, expected_response, client: TestClient\n+):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -57,7 +108,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -77,56 +130,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial010_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-regex_error = {\n-    \"detail\": [\n-        {\n-            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n-            \"loc\": [\"query\", \"item-query\"],\n-            \"msg\": 'string does not match regex \"^fixedquery$\"',\n-            \"type\": \"value_error.str.regex\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"q_name,q,expected_status,expected_response\",\n-    [\n-        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\n-            \"item-query\",\n-            \"fixedquery\",\n-            200,\n-            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n-        ),\n-        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n-        (\"item-query\", \"nonregexquery\", 422, regex_error),\n-    ],\n-)\n-def test_query_params_str_validations(\n-    q_name, q, expected_status, expected_response, client: TestClient\n-):\n-    url = \"/items/\"\n-    if q_name and q:\n-        url = f\"{url}?{q_name}={q}\"\n-    response = client.get(url)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial011 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +71,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,23 +93,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial011_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +71,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,23 +93,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py310\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -52,7 +81,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,34 +103,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py310\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -52,7 +81,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,34 +103,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py310\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -52,7 +81,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,34 +103,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py310\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -52,7 +81,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,34 +103,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial011_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial012 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_default_query_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +72,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,23 +94,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_default_query_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial012_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_default_query_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +72,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,23 +94,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_default_query_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial012_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_default_query_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +82,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,34 +104,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial012_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_default_query_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial012_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_default_query_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +82,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,34 +104,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial012_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_default_query_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=baz&q=foobar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial013 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": []}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +72,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,23 +94,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": []}\n\n@@ -4,7 +4,25 @@ from docs_src.query_params_str_validations.tutorial013_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": []}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -54,7 +72,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -74,23 +94,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_multi_query_values():\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-def test_query_no_values():\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": []}\n\n@@ -3,7 +3,36 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial013_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": []}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +82,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,34 +104,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial013_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_multi_query_values(client: TestClient):\n-    url = \"/items/?q=foo&q=bar\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n-\n-\n-@needs_py39\n-def test_query_no_values(client: TestClient):\n-    url = \"/items/\"\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": []}\n\n@@ -5,7 +5,22 @@ from docs_src.query_params_str_validations.tutorial014 import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_hidden_query():\n+    response = client.get(\"/items?hidden_query=somevalue\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"somevalue\"}\n+\n+\n+def test_no_hidden_query():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"Not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +68,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -62,21 +79,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_hidden_query():\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-def test_no_hidden_query():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n@@ -5,7 +5,22 @@ from docs_src.query_params_str_validations.tutorial014_an import app\n client = TestClient(app)\n \n \n-openapi_schema = {\n+def test_hidden_query():\n+    response = client.get(\"/items?hidden_query=somevalue\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"somevalue\"}\n+\n+\n+def test_no_hidden_query():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"Not found\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -53,7 +68,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -62,21 +79,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_hidden_query():\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-def test_no_hidden_query():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n@@ -3,7 +3,34 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial014_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_hidden_query(client: TestClient):\n+    response = client.get(\"/items?hidden_query=somevalue\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"somevalue\"}\n+\n+\n+@needs_py310\n+def test_no_hidden_query(client: TestClient):\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"Not found\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +78,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -60,32 +89,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n@@ -3,7 +3,34 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial014_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_hidden_query(client: TestClient):\n+    response = client.get(\"/items?hidden_query=somevalue\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"somevalue\"}\n+\n+\n+@needs_py310\n+def test_no_hidden_query(client: TestClient):\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"Not found\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +78,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -60,32 +89,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n@@ -3,7 +3,34 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial014_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_hidden_query(client: TestClient):\n+    response = client.get(\"/items?hidden_query=somevalue\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"somevalue\"}\n+\n+\n+@needs_py310\n+def test_no_hidden_query(client: TestClient):\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"hidden_query\": \"Not found\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +78,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -60,32 +89,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params_str_validations.tutorial014_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_hidden_query(client: TestClient):\n-    response = client.get(\"/items?hidden_query=somevalue\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"somevalue\"}\n-\n-\n-@needs_py310\n-def test_no_hidden_query(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"hidden_query\": \"Not found\"}\n\n@@ -4,7 +4,68 @@ from docs_src.request_files.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_large_file(tmp_path):\n+    default_pydantic_max_size = 2**16\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -99,7 +160,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -119,66 +182,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"file\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_large_file(tmp_path):\n-    default_pydantic_max_size = 2**16\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,45 @@ from docs_src.request_files.tutorial001_02 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No file sent\"}\n+\n+\n+def test_post_uploadfile_no_body():\n+    response = client.post(\"/uploadfile/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No upload file sent\"}\n+\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -106,7 +144,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -115,43 +155,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-def test_post_uploadfile_no_body():\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,45 @@ from docs_src.request_files.tutorial001_02_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No file sent\"}\n+\n+\n+def test_post_uploadfile_no_body():\n+    response = client.post(\"/uploadfile/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No upload file sent\"}\n+\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -106,7 +144,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -115,43 +155,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-def test_post_uploadfile_no_body():\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -5,7 +5,56 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.request_files.tutorial001_02_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No file sent\"}\n+\n+\n+@needs_py310\n+def test_post_uploadfile_no_body(client: TestClient):\n+    response = client.post(\"/uploadfile/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No upload file sent\"}\n+\n+\n+@needs_py310\n+def test_post_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+@needs_py310\n+def test_post_upload_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -107,7 +156,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -116,54 +167,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py310\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py310\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py310\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -5,7 +5,56 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.request_files.tutorial001_02_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No file sent\"}\n+\n+\n+@needs_py39\n+def test_post_uploadfile_no_body(client: TestClient):\n+    response = client.post(\"/uploadfile/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No upload file sent\"}\n+\n+\n+@needs_py39\n+def test_post_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -107,7 +156,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -116,54 +167,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py39\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -5,7 +5,56 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.request_files.tutorial001_02_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No file sent\"}\n+\n+\n+@needs_py310\n+def test_post_uploadfile_no_body(client: TestClient):\n+    response = client.post(\"/uploadfile/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"No upload file sent\"}\n+\n+\n+@needs_py310\n+def test_post_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+@needs_py310\n+def test_post_upload_file(tmp_path: Path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -107,7 +156,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -116,54 +167,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py310\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py310\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py310\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,33 @@ from docs_src.request_files.tutorial001_03 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -120,7 +146,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -129,31 +157,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,33 @@ from docs_src.request_files.tutorial001_03_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -120,7 +146,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -129,31 +157,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -3,7 +3,42 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.request_files.tutorial001_03_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_post_file(tmp_path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -119,7 +154,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -128,40 +165,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_03_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,68 @@ from docs_src.request_files.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_large_file(tmp_path):\n+    default_pydantic_max_size = 2**16\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -99,7 +160,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -119,66 +182,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"file\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_large_file(tmp_path):\n-    default_pydantic_max_size = 2**16\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -3,7 +3,79 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.request_files.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"file\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_body_json(client: TestClient):\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_file(tmp_path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": 14}\n+\n+\n+@needs_py39\n+def test_post_large_file(tmp_path, client: TestClient):\n+    default_pydantic_max_size = 2**16\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, client: TestClient):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -98,7 +170,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -118,77 +192,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"file\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_large_file(tmp_path, client: TestClient):\n-    default_pydantic_max_size = 2**16\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -4,7 +4,79 @@ from docs_src.request_files.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_files(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+def test_get_root():\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -119,7 +191,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -139,77 +213,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,79 @@ from docs_src.request_files.tutorial002_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+def test_post_files(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+def test_get_root():\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -119,7 +191,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -139,77 +213,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,98 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"app\")\n+def get_app():\n+    from docs_src.request_files.tutorial002_an_py39 import app\n+\n+    return app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n+    client = TestClient(app)\n+    return client\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_body_json(client: TestClient):\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_files(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+@needs_py39\n+def test_get_root(app: FastAPI):\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -119,7 +210,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -139,96 +232,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial002_an_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,98 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"app\")\n+def get_app():\n+    from docs_src.request_files.tutorial002_py39 import app\n+\n+    return app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n+    client = TestClient(app)\n+    return client\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_body_json(client: TestClient):\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_files(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+@needs_py39\n+def test_get_root(app: FastAPI):\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -119,7 +210,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -139,96 +232,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial002_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == file_required\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,56 @@ from docs_src.request_files.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_files(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+def test_get_root():\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -132,7 +181,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -141,54 +192,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,56 @@ from docs_src.request_files.tutorial003_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_files(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+def test_get_root():\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -132,7 +181,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -141,54 +192,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,84 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"app\")\n+def get_app():\n+    from docs_src.request_files.tutorial003_an_py39 import app\n+\n+    return app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n+    client = TestClient(app)\n+    return client\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_files(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+@needs_py39\n+def test_get_root(app: FastAPI):\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -132,7 +209,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -141,82 +220,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial003_an_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -4,7 +4,84 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"app\")\n+def get_app():\n+    from docs_src.request_files.tutorial003_py39 import app\n+\n+    return app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n+    client = TestClient(app)\n+    return client\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_files(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+@needs_py39\n+def test_get_root(app: FastAPI):\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -132,7 +209,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -141,82 +220,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial003_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n\n@@ -5,89 +5,6 @@ from docs_src.request_forms.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login__post\": {\n-                \"title\": \"Body_login_login__post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n password_required = {\n     \"detail\": [\n@@ -147,3 +64,86 @@ def test_post_body_json():\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n     assert response.status_code == 422, response.text\n     assert response.json() == username_and_password_required\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login__post\": {\n+                    \"title\": \"Body_login_login__post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -5,89 +5,6 @@ from docs_src.request_forms.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login__post\": {\n-                \"title\": \"Body_login_login__post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n password_required = {\n     \"detail\": [\n@@ -147,3 +64,86 @@ def test_post_body_json():\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n     assert response.status_code == 422, response.text\n     assert response.json() == username_and_password_required\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login__post\": {\n+                    \"title\": \"Body_login_login__post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -3,83 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/login/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login\",\n-                \"operationId\": \"login_login__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_login__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_login_login__post\": {\n-                \"title\": \"Body_login_login__post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -89,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n password_required = {\n     \"detail\": [\n         {\n@@ -158,3 +74,87 @@ def test_post_body_json(client: TestClient):\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n     assert response.status_code == 422, response.text\n     assert response.json() == username_and_password_required\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/login/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login\",\n+                    \"operationId\": \"login_login__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_login_login__post\": {\n+                    \"title\": \"Body_login_login__post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -4,90 +4,6 @@ from docs_src.request_forms_and_files.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/files/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create File\",\n-                \"operationId\": \"create_file_files__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"multipart/form-data\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_create_file_files__post\": {\n-                \"title\": \"Body_create_file_files__post\",\n-                \"required\": [\"file\", \"fileb\", \"token\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"fileb\": {\"title\": \"Fileb\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n file_required = {\n     \"detail\": [\n@@ -190,3 +106,91 @@ def test_post_files_and_token(tmp_path):\n         \"token\": \"foo\",\n         \"fileb_content_type\": \"text/plain\",\n     }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/files/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Create File\",\n+                    \"operationId\": \"create_file_files__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"multipart/form-data\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_create_file_files__post\": {\n+                    \"title\": \"Body_create_file_files__post\",\n+                    \"required\": [\"file\", \"fileb\", \"token\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n+                        \"fileb\": {\n+                            \"title\": \"Fileb\",\n+                            \"type\": \"string\",\n+                            \"format\": \"binary\",\n+                        },\n+                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -4,90 +4,6 @@ from docs_src.request_forms_and_files.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/files/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create File\",\n-                \"operationId\": \"create_file_files__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"multipart/form-data\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_create_file_files__post\": {\n-                \"title\": \"Body_create_file_files__post\",\n-                \"required\": [\"file\", \"fileb\", \"token\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"fileb\": {\"title\": \"Fileb\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n file_required = {\n     \"detail\": [\n@@ -190,3 +106,91 @@ def test_post_files_and_token(tmp_path):\n         \"token\": \"foo\",\n         \"fileb_content_type\": \"text/plain\",\n     }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/files/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Create File\",\n+                    \"operationId\": \"create_file_files__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"multipart/form-data\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_create_file_files__post\": {\n+                    \"title\": \"Body_create_file_files__post\",\n+                    \"required\": [\"file\", \"fileb\", \"token\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n+                        \"fileb\": {\n+                            \"title\": \"Fileb\",\n+                            \"type\": \"string\",\n+                            \"format\": \"binary\",\n+                        },\n+                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -4,84 +4,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/files/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create File\",\n-                \"operationId\": \"create_file_files__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"multipart/form-data\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Body_create_file_files__post\": {\n-                \"title\": \"Body_create_file_files__post\",\n-                \"required\": [\"file\", \"fileb\", \"token\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"fileb\": {\"title\": \"Fileb\", \"type\": \"string\", \"format\": \"binary\"},\n-                    \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n \n @pytest.fixture(name=\"app\")\n def get_app():\n@@ -96,13 +18,6 @@ def get_client(app: FastAPI):\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n file_required = {\n     \"detail\": [\n         {\n@@ -209,3 +124,92 @@ def test_post_files_and_token(tmp_path, app: FastAPI):\n         \"token\": \"foo\",\n         \"fileb_content_type\": \"text/plain\",\n     }\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/files/\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Create File\",\n+                    \"operationId\": \"create_file_files__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"multipart/form-data\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_create_file_files__post\": {\n+                    \"title\": \"Body_create_file_files__post\",\n+                    \"required\": [\"file\", \"fileb\", \"token\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n+                        \"fileb\": {\n+                            \"title\": \"Fileb\",\n+                            \"type\": \"string\",\n+                            \"format\": \"binary\",\n+                        },\n+                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -4,7 +4,29 @@ from docs_src.response_model.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_user():\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +73,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -62,7 +88,11 @@ openapi_schema = {\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                         \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -74,7 +104,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -94,27 +126,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_user():\n-    response = client.post(\n-        \"/user/\",\n-        json={\n-            \"username\": \"foo\",\n-            \"password\": \"fighter\",\n-            \"email\": \"foo@example.com\",\n-            \"full_name\": \"Grave Dohl\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"foo\",\n-        \"email\": \"foo@example.com\",\n-        \"full_name\": \"Grave Dohl\",\n-    }\n\n@@ -4,7 +4,29 @@ from docs_src.response_model.tutorial003_01 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_post_user():\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -51,7 +73,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -72,7 +98,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                         \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                     },\n@@ -85,7 +115,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -94,27 +126,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_post_user():\n-    response = client.post(\n-        \"/user/\",\n-        json={\n-            \"username\": \"foo\",\n-            \"password\": \"fighter\",\n-            \"email\": \"foo@example.com\",\n-            \"full_name\": \"Grave Dohl\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"foo\",\n-        \"email\": \"foo@example.com\",\n-        \"full_name\": \"Grave Dohl\",\n-    }\n\n@@ -3,7 +3,39 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_01_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_post_user(client: TestClient):\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -50,7 +82,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -71,7 +107,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                         \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n                     },\n@@ -84,7 +124,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -93,37 +135,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial003_01_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_post_user(client: TestClient):\n-    response = client.post(\n-        \"/user/\",\n-        json={\n-            \"username\": \"foo\",\n-            \"password\": \"fighter\",\n-            \"email\": \"foo@example.com\",\n-            \"full_name\": \"Grave Dohl\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"foo\",\n-        \"email\": \"foo@example.com\",\n-        \"full_name\": \"Grave Dohl\",\n-    }\n\n@@ -4,7 +4,23 @@ from docs_src.response_model.tutorial003_02 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_portal():\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+def test_get_redirect():\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -64,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,21 +91,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_portal():\n-    response = client.get(\"/portal\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n-\n-\n-def test_get_redirect():\n-    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n-    assert response.status_code == 307, response.text\n-    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -4,7 +4,17 @@ from docs_src.response_model.tutorial003_03 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_portal():\n+    response = client.get(\"/teleport\", follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -22,15 +32,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_portal():\n-    response = client.get(\"/teleport\", follow_redirects=False)\n-    assert response.status_code == 307, response.text\n-    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -4,7 +4,23 @@ from docs_src.response_model.tutorial003_05 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_portal():\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+def test_get_redirect():\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -64,7 +80,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -73,21 +91,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_get_portal():\n-    response = client.get(\"/portal\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n-\n-\n-def test_get_redirect():\n-    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n-    assert response.status_code == 307, response.text\n-    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -3,7 +3,34 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_05_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_get_portal(client: TestClient):\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+@needs_py310\n+def test_get_redirect(client: TestClient):\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -63,7 +90,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -72,32 +101,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial003_05_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_get_portal(client: TestClient):\n-    response = client.get(\"/portal\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n-\n-\n-@needs_py310\n-def test_get_redirect(client: TestClient):\n-    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n-    assert response.status_code == 307, response.text\n-    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -3,7 +3,39 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_post_user(client: TestClient):\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -50,7 +82,11 @@ openapi_schema = {\n                     \"type\": \"object\",\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -61,7 +97,11 @@ openapi_schema = {\n                     \"properties\": {\n                         \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n                         \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                        \"email\": {\n+                            \"title\": \"Email\",\n+                            \"type\": \"string\",\n+                            \"format\": \"email\",\n+                        },\n                         \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n                     },\n                 },\n@@ -73,7 +113,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -93,37 +135,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_post_user(client: TestClient):\n-    response = client.post(\n-        \"/user/\",\n-        json={\n-            \"username\": \"foo\",\n-            \"password\": \"fighter\",\n-            \"email\": \"foo@example.com\",\n-            \"full_name\": \"Grave Dohl\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"foo\",\n-        \"email\": \"foo@example.com\",\n-        \"full_name\": \"Grave Dohl\",\n-    }\n\n@@ -5,7 +5,37 @@ from docs_src.response_model.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+@pytest.mark.parametrize(\n+    \"url,data\",\n+    [\n+        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n+        (\n+            \"/items/bar\",\n+            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+        ),\n+        (\n+            \"/items/baz\",\n+            {\n+                \"name\": \"Baz\",\n+                \"description\": None,\n+                \"price\": 50.2,\n+                \"tax\": 10.5,\n+                \"tags\": [],\n+            },\n+        ),\n+    ],\n+)\n+def test_get(url, data):\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -71,7 +101,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -91,35 +123,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@pytest.mark.parametrize(\n-    \"url,data\",\n-    [\n-        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n-        (\n-            \"/items/bar\",\n-            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n-        ),\n-        (\n-            \"/items/baz\",\n-            {\n-                \"name\": \"Baz\",\n-                \"description\": None,\n-                \"price\": 50.2,\n-                \"tax\": 10.5,\n-                \"tags\": [],\n-            },\n-        ),\n-    ],\n-)\n-def test_get(url, data):\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n\n@@ -3,7 +3,47 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial004_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"url,data\",\n+    [\n+        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n+        (\n+            \"/items/bar\",\n+            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+        ),\n+        (\n+            \"/items/baz\",\n+            {\n+                \"name\": \"Baz\",\n+                \"description\": None,\n+                \"price\": 50.2,\n+                \"tax\": 10.5,\n+                \"tags\": [],\n+            },\n+        ),\n+    ],\n+)\n+def test_get(url, data, client: TestClient):\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -69,7 +109,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -89,45 +131,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial004_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"url,data\",\n-    [\n-        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n-        (\n-            \"/items/bar\",\n-            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n-        ),\n-        (\n-            \"/items/baz\",\n-            {\n-                \"name\": \"Baz\",\n-                \"description\": None,\n-                \"price\": 50.2,\n-                \"tax\": 10.5,\n-                \"tags\": [],\n-            },\n-        ),\n-    ],\n-)\n-def test_get(url, data, client: TestClient):\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n\n@@ -3,7 +3,47 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial004_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"url,data\",\n+    [\n+        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n+        (\n+            \"/items/bar\",\n+            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+        ),\n+        (\n+            \"/items/baz\",\n+            {\n+                \"name\": \"Baz\",\n+                \"description\": None,\n+                \"price\": 50.2,\n+                \"tax\": 10.5,\n+                \"tags\": [],\n+            },\n+        ),\n+    ],\n+)\n+def test_get(url, data, client: TestClient):\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -69,7 +109,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -89,45 +131,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial004_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"url,data\",\n-    [\n-        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n-        (\n-            \"/items/bar\",\n-            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n-        ),\n-        (\n-            \"/items/baz\",\n-            {\n-                \"name\": \"Baz\",\n-                \"description\": None,\n-                \"price\": 50.2,\n-                \"tax\": 10.5,\n-                \"tags\": [],\n-            },\n-        ),\n-    ],\n-)\n-def test_get(url, data, client: TestClient):\n-    response = client.get(url)\n-    assert response.status_code == 200, response.text\n-    assert response.json() == data\n\n@@ -4,7 +4,27 @@ from docs_src.response_model.tutorial005 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_read_item_name():\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+def test_read_item_public_data():\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -98,7 +118,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -118,25 +140,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_read_item_name():\n-    response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n-\n-\n-def test_read_item_public_data():\n-    response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Bar\",\n-        \"description\": \"The Bar fighters\",\n-        \"price\": 62,\n-    }\n\n@@ -3,7 +3,38 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial005_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_read_item_name(client: TestClient):\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+@needs_py310\n+def test_read_item_public_data(client: TestClient):\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -97,7 +128,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -117,36 +150,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial005_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_read_item_name(client: TestClient):\n-    response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n-\n-\n-@needs_py310\n-def test_read_item_public_data(client: TestClient):\n-    response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Bar\",\n-        \"description\": \"The Bar fighters\",\n-        \"price\": 62,\n-    }\n\n@@ -4,7 +4,27 @@ from docs_src.response_model.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_read_item_name():\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+def test_read_item_public_data():\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -98,7 +118,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -118,25 +140,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_read_item_name():\n-    response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n-\n-\n-def test_read_item_public_data():\n-    response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Bar\",\n-        \"description\": \"The Bar fighters\",\n-        \"price\": 62,\n-    }\n\n@@ -3,7 +3,38 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial006_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_read_item_name(client: TestClient):\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+@needs_py310\n+def test_read_item_public_data(client: TestClient):\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -97,7 +128,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -117,36 +150,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.response_model.tutorial006_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_read_item_name(client: TestClient):\n-    response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n-\n-\n-@needs_py310\n-def test_read_item_public_data(client: TestClient):\n-    response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Bar\",\n-        \"description\": \"The Bar fighters\",\n-        \"price\": 62,\n-    }\n\n@@ -4,7 +4,25 @@ from docs_src.schema_extra_example.tutorial004 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+# Test required and embedded body parameters with no bodies sent\n+def test_post_body_example():\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -103,7 +121,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -112,23 +132,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-def test_post_body_example():\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-    assert response.status_code == 200\n\n@@ -4,7 +4,25 @@ from docs_src.schema_extra_example.tutorial004_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+# Test required and embedded body parameters with no bodies sent\n+def test_post_body_example():\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -103,7 +121,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -112,23 +132,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-def test_post_body_example():\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-    assert response.status_code == 200\n\n@@ -3,7 +3,35 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.schema_extra_example.tutorial004_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+def test_post_body_example(client: TestClient):\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -102,7 +130,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -111,33 +141,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.schema_extra_example.tutorial004_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py310\n-def test_post_body_example(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-    assert response.status_code == 200\n\n@@ -3,7 +3,35 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.schema_extra_example.tutorial004_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py39\n+def test_post_body_example(client: TestClient):\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -102,7 +130,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -111,33 +141,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.schema_extra_example.tutorial004_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py39\n-def test_post_body_example(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-    assert response.status_code == 200\n\n@@ -3,7 +3,35 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.schema_extra_example.tutorial004_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+def test_post_body_example(client: TestClient):\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -102,7 +130,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -111,33 +141,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.schema_extra_example.tutorial004_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-# Test required and embedded body parameters with no bodies sent\n-@needs_py310\n-def test_post_body_example(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-    assert response.status_code == 200\n\n@@ -4,7 +4,31 @@ from docs_src.security.tutorial001 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -31,29 +55,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -4,7 +4,31 @@ from docs_src.security.tutorial001_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -31,29 +55,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_no_token():\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -3,7 +3,43 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial001_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_token(client: TestClient):\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+@needs_py39\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -30,41 +66,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/items\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"token\": \"testtoken\"}\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -4,7 +4,72 @@ from docs_src.security.tutorial003 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_login():\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+def test_login_incorrect_password():\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_login_incorrect_username():\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_no_token():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_incorrect_token_type():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_inactive_user():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -81,7 +146,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,70 +174,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_login():\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-def test_login_incorrect_password():\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_login_incorrect_username():\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_no_token():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_incorrect_token_type():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_inactive_user():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -4,7 +4,72 @@ from docs_src.security.tutorial003_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_login():\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+def test_login_incorrect_password():\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_login_incorrect_username():\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_no_token():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_incorrect_token_type():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_inactive_user():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -81,7 +146,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -107,70 +174,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_login():\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-def test_login_incorrect_password():\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_login_incorrect_username():\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-def test_no_token():\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-def test_incorrect_token():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_incorrect_token_type():\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-def test_inactive_user():\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -3,7 +3,89 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial003_an_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py310\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_inactive_user(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -80,7 +162,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -106,87 +190,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -3,7 +3,89 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial003_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+@needs_py39\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py39\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py39\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py39\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_inactive_user(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -80,7 +162,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -106,87 +190,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py39\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py39\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py39\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -3,7 +3,89 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py310\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_inactive_user(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -80,7 +162,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -106,87 +190,3 @@ openapi_schema = {\n             },\n         },\n     }\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.security.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_login(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_password(client: TestClient):\n-    response = client.post(\n-        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_login_incorrect_username(client: TestClient):\n-    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n-\n-\n-@needs_py310\n-def test_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"johndoe\",\n-        \"full_name\": \"John Doe\",\n-        \"email\": \"johndoe@example.com\",\n-        \"hashed_password\": \"fakehashedsecret\",\n-        \"disabled\": False,\n-    }\n-\n-\n-@needs_py310\n-def test_incorrect_token(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_incorrect_token_type(client: TestClient):\n-    response = client.get(\n-        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n-    )\n-    assert response.status_code == 401, response.text\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n-\n-\n-@needs_py310\n-def test_inactive_user(client: TestClient):\n-    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -10,178 +10,6 @@ from docs_src.security.tutorial005 import (\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n     data = {\"username\": username, \"password\": password}\n@@ -345,3 +173,175 @@ def test_read_system_status_no_token():\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -10,178 +10,6 @@ from docs_src.security.tutorial005_an import (\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n     data = {\"username\": username, \"password\": password}\n@@ -345,3 +173,175 @@ def test_read_system_status_no_token():\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -3,172 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -178,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n def get_access_token(\n     *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n ):\n@@ -373,3 +200,176 @@ def test_read_system_status_no_token(client: TestClient):\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -3,172 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -178,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n def get_access_token(\n     *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n ):\n@@ -373,3 +200,176 @@ def test_read_system_status_no_token(client: TestClient):\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -3,172 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -178,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n def get_access_token(\n     *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n ):\n@@ -373,3 +200,176 @@ def test_read_system_status_no_token(client: TestClient):\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -3,172 +3,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/token\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Login For Access Token\",\n-                \"operationId\": \"login_for_access_token_token_post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n-                            }\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        },\n-        \"/users/me/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                            }\n-                        },\n-                    }\n-                },\n-                \"summary\": \"Read Users Me\",\n-                \"operationId\": \"read_users_me_users_me__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n-            }\n-        },\n-        \"/users/me/items/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Own Items\",\n-                \"operationId\": \"read_own_items_users_me_items__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n-            }\n-        },\n-        \"/status/\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read System Status\",\n-                \"operationId\": \"read_system_status_status__get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"User\": {\n-                \"title\": \"User\",\n-                \"required\": [\"username\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n-                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n-                },\n-            },\n-            \"Token\": {\n-                \"title\": \"Token\",\n-                \"required\": [\"access_token\", \"token_type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n-                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"Body_login_for_access_token_token_post\": {\n-                \"title\": \"Body_login_for_access_token_token_post\",\n-                \"required\": [\"username\", \"password\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"grant_type\": {\n-                        \"title\": \"Grant Type\",\n-                        \"pattern\": \"password\",\n-                        \"type\": \"string\",\n-                    },\n-                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n-                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n-                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\n-                    \"password\": {\n-                        \"scopes\": {\n-                            \"me\": \"Read information about the current user.\",\n-                            \"items\": \"Read items.\",\n-                        },\n-                        \"tokenUrl\": \"token\",\n-                    }\n-                },\n-            }\n-        },\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -178,13 +12,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n def get_access_token(\n     *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n ):\n@@ -373,3 +200,176 @@ def test_read_system_status_no_token(client: TestClient):\n     assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/token\": {\n+                \"post\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"summary\": \"Login For Access Token\",\n+                    \"operationId\": \"login_for_access_token_token_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                }\n+            },\n+            \"/users/me/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                                }\n+                            },\n+                        }\n+                    },\n+                    \"summary\": \"Read Users Me\",\n+                    \"operationId\": \"read_users_me_users_me__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+                }\n+            },\n+            \"/users/me/items/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Own Items\",\n+                    \"operationId\": \"read_own_items_users_me_items__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+                }\n+            },\n+            \"/status/\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read System Status\",\n+                    \"operationId\": \"read_system_status_status__get\",\n+                    \"security\": [{\"OAuth2PasswordBearer\": []}],\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"User\": {\n+                    \"title\": \"User\",\n+                    \"required\": [\"username\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                        \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                        \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                    },\n+                },\n+                \"Token\": {\n+                    \"title\": \"Token\",\n+                    \"required\": [\"access_token\", \"token_type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                        \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"Body_login_for_access_token_token_post\": {\n+                    \"title\": \"Body_login_for_access_token_token_post\",\n+                    \"required\": [\"username\", \"password\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"grant_type\": {\n+                            \"title\": \"Grant Type\",\n+                            \"pattern\": \"password\",\n+                            \"type\": \"string\",\n+                        },\n+                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                        \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                        \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                        \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+            },\n+            \"securitySchemes\": {\n+                \"OAuth2PasswordBearer\": {\n+                    \"type\": \"oauth2\",\n+                    \"flows\": {\n+                        \"password\": {\n+                            \"scopes\": {\n+                                \"me\": \"Read information about the current user.\",\n+                                \"items\": \"Read items.\",\n+                            },\n+                            \"tokenUrl\": \"token\",\n+                        }\n+                    },\n+                }\n+            },\n+        },\n+    }\n\n@@ -6,35 +6,6 @@ from docs_src.security.tutorial006 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_http_basic():\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -65,3 +36,30 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+        },\n+    }\n\n@@ -6,35 +6,6 @@ from docs_src.security.tutorial006_an import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n \n def test_security_http_basic():\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -65,3 +36,30 @@ def test_security_http_basic_non_basic_credentials():\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+        },\n+    }\n\n@@ -5,29 +5,6 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n-                \"security\": [{\"HTTPBasic\": []}],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n-    },\n-}\n-\n \n @pytest.fixture(name=\"client\")\n def get_client():\n@@ -37,13 +14,6 @@ def get_client():\n     return client\n \n \n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n @needs_py39\n def test_security_http_basic(client: TestClient):\n     response = client.get(\"/users/me\", auth=(\"john\", \"secret\"))\n@@ -77,3 +47,31 @@ def test_security_http_basic_non_basic_credentials(client: TestClient):\n     assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/users/me\": {\n+                \"get\": {\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        }\n+                    },\n+                    \"summary\": \"Read Current User\",\n+                    \"operationId\": \"read_current_user_users_me_get\",\n+                    \"security\": [{\"HTTPBasic\": []}],\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+        },\n+    }\n\n@@ -5,7 +5,90 @@ from pathlib import Path\n import pytest\n from fastapi.testclient import TestClient\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\")\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -40,13 +123,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -192,13 +283,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -261,7 +360,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -281,88 +382,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -4,7 +4,93 @@ from pathlib import Path\n import pytest\n from fastapi.testclient import TestClient\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+\n+\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -39,13 +125,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -191,13 +285,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -260,7 +362,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -280,91 +384,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client():\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-\n-\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -7,7 +7,104 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\")\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py310 import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py310\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py310\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py310\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py310\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py310\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py310\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+@needs_py310\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,13 +139,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -194,13 +299,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -263,7 +376,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -283,102 +398,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py310 import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py310\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py310\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py310\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py310\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py310\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py310\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -7,7 +7,104 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\")\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py39 import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py39\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py39\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py39\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py39\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py39\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py39\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+@needs_py39\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,13 +139,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -194,13 +299,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -263,7 +376,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -283,102 +398,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py39 import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py39\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py39\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py39\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py39\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py39\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py39\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -7,7 +7,103 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\", name=\"client\")\n+def get_client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py310 import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py310\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py310\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py310\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py310\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py310\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py310\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+@needs_py310\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,13 +138,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -194,13 +298,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -263,7 +375,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -283,101 +397,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\", name=\"client\")\n-def get_client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py310 import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py310\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py310\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py310\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py310\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py310\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py310\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py310\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -7,7 +7,103 @@ from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\", name=\"client\")\n+def get_client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py39 import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py39\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py39\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py39\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py39\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py39\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py39\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+@needs_py39\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -42,13 +138,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -194,13 +298,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -263,7 +375,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -283,101 +397,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\", name=\"client\")\n-def get_client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py39 import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py39\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-@needs_py39\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py39\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py39\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py39\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py39\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py39\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -5,7 +5,98 @@ from unittest.mock import MagicMock\n import pytest\n from fastapi.testclient import TestClient\n \n-openapi_schema = {\n+\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases_peewee.sql_app.main import app\n+\n+    test_db = Path(\"./test.db\")\n+    with TestClient(app) as c:\n+        yield c\n+    test_db.unlink()\n+\n+\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+time.sleep = MagicMock()\n+\n+\n+def test_get_slowusers(client):\n+    response = client.get(\"/slowusers/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n+\n+\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -16,13 +107,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -168,13 +267,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -212,13 +319,21 @@ openapi_schema = {\n                     \"parameters\": [\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                            \"schema\": {\n+                                \"title\": \"Skip\",\n+                                \"type\": \"integer\",\n+                                \"default\": 0,\n+                            },\n                             \"name\": \"skip\",\n                             \"in\": \"query\",\n                         },\n                         {\n                             \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                            \"schema\": {\n+                                \"title\": \"Limit\",\n+                                \"type\": \"integer\",\n+                                \"default\": 100,\n+                            },\n                             \"name\": \"limit\",\n                             \"in\": \"query\",\n                         },\n@@ -316,7 +431,9 @@ openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -325,96 +442,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client():\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases_peewee.sql_app.main import app\n-\n-    test_db = Path(\"./test.db\")\n-    with TestClient(app) as c:\n-        yield c\n-    test_db.unlink()\n-\n-\n-def test_openapi_schema(client):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-def test_inexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-time.sleep = MagicMock()\n-\n-\n-def test_get_slowusers(client):\n-    response = client.get(\"/slowusers/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n\n@@ -1,6 +1,14 @@\n from docs_src.app_testing.test_main import client, test_read_main\n \n-openapi_schema = {\n+\n+def test_main():\n+    test_read_main()\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -18,13 +26,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    test_read_main()\n\n@@ -1,6 +1,14 @@\n from docs_src.app_testing.tutorial001 import client, test_read_main\n \n-openapi_schema = {\n+\n+def test_main():\n+    test_read_main()\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -18,13 +26,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_main():\n-    test_read_main()\n\n@@ -22,7 +22,23 @@ def save_union_body(item: Union[OtherItem, Item]):\n \n client = TestClient(app)\n \n-item_openapi_schema = {\n+\n+def test_post_other_item():\n+    response = client.post(\"/items/\", json={\"price\": 100})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": {\"price\": 100}}\n+\n+\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -84,7 +100,9 @@ item_openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -104,21 +122,3 @@ item_openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_item_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == item_openapi_schema\n-\n-\n-def test_post_other_item():\n-    response = client.post(\"/items/\", json={\"price\": 100})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": {\"price\": 100}}\n-\n-\n-def test_post_item():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n@@ -23,7 +23,22 @@ def save_union_different_body(item: Union[ExtendedItem, Item]):\n client = TestClient(app)\n \n \n-inherited_item_openapi_schema = {\n+def test_post_extended_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n+\n+\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -88,7 +103,9 @@ inherited_item_openapi_schema = {\n                         \"loc\": {\n                             \"title\": \"Location\",\n                             \"type\": \"array\",\n-                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n                         },\n                         \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n                         \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n@@ -108,21 +125,3 @@ inherited_item_openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_inherited_item_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == inherited_item_openapi_schema\n-\n-\n-def test_post_extended_item():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n-\n-\n-def test_post_item():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
