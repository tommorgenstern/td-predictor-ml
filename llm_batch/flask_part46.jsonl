{"custom_id": "flask#7c16054d81ce9af44a4875650b506c9ec2403588", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 24 | Churn Cumulative: 120 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,8 +11,12 @@\n \n from __future__ import absolute_import\n \n+import sys\n+\n+from werkzeug.local import LocalProxy\n from logging import getLogger, StreamHandler, Formatter, getLoggerClass, \\\n      DEBUG, ERROR\n+from .globals import _request_ctx_stack\n \n \n PROD_LOG_FORMAT = '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n@@ -24,7 +28,19 @@ DEBUG_LOG_FORMAT = (\n )\n \n \n-def should_log_for(app, mode):\n+@LocalProxy\n+def _proxy_stream():\n+    \"\"\"Finds the most appropriate error stream for the application.  If a\n+    WSGI request is in flight we log to wsgi.errors, otherwise this resolves\n+    to sys.stderr.\n+    \"\"\"\n+    ctx = _request_ctx_stack.top\n+    if ctx is not None:\n+        return ctx.request.environ['wsgi.errors']\n+    return sys.stderr\n+\n+\n+def _should_log_for(app, mode):\n     policy = app.config['LOGGER_HANDLER_POLICY']\n     if policy == mode or policy == 'always':\n         return True\n@@ -48,19 +64,19 @@ def create_logger(app):\n \n     class DebugHandler(StreamHandler):\n         def emit(self, record):\n-            if app.debug and should_log_for(app, 'debug'):\n+            if app.debug and _should_log_for(app, 'debug'):\n                 StreamHandler.emit(self, record)\n \n     class ProductionHandler(StreamHandler):\n         def emit(self, record):\n-            if not app.debug and should_log_for(app, 'production'):\n+            if not app.debug and _should_log_for(app, 'production'):\n                 StreamHandler.emit(self, record)\n \n     debug_handler = DebugHandler()\n     debug_handler.setLevel(DEBUG)\n     debug_handler.setFormatter(Formatter(DEBUG_LOG_FORMAT))\n \n-    prod_handler = ProductionHandler()\n+    prod_handler = ProductionHandler(_proxy_stream)\n     prod_handler.setLevel(ERROR)\n     prod_handler.setFormatter(Formatter(PROD_LOG_FORMAT))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7183aefd6271fb9d9398b8d721dea15a699ed501", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1723 | Contributors (this commit): 29 | Commits (past 90d): 2 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -251,7 +251,8 @@ def url_for(endpoint, **values):\n       parameter must be set to `True` or a `ValueError` is raised. The default\n       behavior uses the same scheme as the current request, or\n       ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n-      request context is available.\n+      request context is available. As of Werkzeug 0.10, this also can be set\n+      to an empty string to build protocol-relative URLs.\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9641f07d9159cd4289a3b89fbf5cf0bfc0102050", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 30 | Files Changed: 1 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 60 | Churn Cumulative: 1071 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -206,12 +206,33 @@ app_option = click.Option(['-a', '--app'],\n     callback=set_app_value, is_eager=True)\n \n \n-class FlaskGroup(click.Group):\n-    \"\"\"Special subclass of the a regular click group that supports loading\n-    more commands from the configured Flask app.  Normally a developer\n-    does not have to interface with this class but there are some very\n-    advanced usecases for which it makes sense to create an instance of\n-    this.  Not to be confused with :class:`AppGroup`.\n+class AppGroup(click.Group):\n+    \"\"\"This works similar to a regular click :class:`~click.Group` but it\n+    changes the behavior of the :meth:`command` decorator so that it\n+    automatically wraps the functions in :func:`with_appcontext`.\n+\n+    Not to be confused with :class:`FlaskGroup`.\n+    \"\"\"\n+\n+    def command(self, *args, **kwargs):\n+        \"\"\"This works exactly like the method of the same name on a regular\n+        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n+        unless it's disabled by passing ``with_appcontext=False``.\n+        \"\"\"\n+        wrap_for_ctx = kwargs.pop('with_appcontext', True)\n+        def decorator(f):\n+            if wrap_for_ctx:\n+                f = with_appcontext(f)\n+            return click.Group.command(self, *args, **kwargs)(f)\n+        return decorator\n+\n+\n+class FlaskGroup(AppGroup):\n+    \"\"\"Special subclass of the the :class:`AppGroup` group that supports\n+    loading more commands from the configured Flask app.  Normally a\n+    developer does not have to interface with this class but there are\n+    some very advanced usecases for which it makes sense to create an\n+    instance of this.\n \n     For information as of why this is useful see :ref:`custom-scripts`.\n \n@@ -235,7 +256,7 @@ class FlaskGroup(click.Group):\n         if add_debug_option:\n             params.append(debug_option)\n \n-        click.Group.__init__(self, params=params, **extra)\n+        AppGroup.__init__(self, params=params, **extra)\n         self.create_app = create_app\n \n         if add_default_commands:\n@@ -250,7 +271,7 @@ class FlaskGroup(click.Group):\n         #\n         # This also means that the script stays functional in case the\n         # application completely fails.\n-        rv = click.Group.get_command(self, ctx, name)\n+        rv = AppGroup.get_command(self, ctx, name)\n         if rv is not None:\n             return rv\n \n@@ -283,28 +304,7 @@ class FlaskGroup(click.Group):\n             obj = ScriptInfo(create_app=self.create_app)\n         kwargs['obj'] = obj\n         kwargs.setdefault('auto_envvar_prefix', 'FLASK')\n-        return click.Group.main(self, *args, **kwargs)\n-\n-\n-class AppGroup(click.Group):\n-    \"\"\"This works similar to a regular click :class:`~click.Group` but it\n-    changes the behavior of the :meth:`command` decorator so that it\n-    automatically wraps the functions in :func:`with_appcontext`.\n-\n-    Not to be confused with :class:`FlaskGroup`.\n-    \"\"\"\n-\n-    def command(self, *args, **kwargs):\n-        \"\"\"This works exactly like the method of the same name on a regular\n-        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n-        unless it's disabled by passing ``with_appcontext=False``.\n-        \"\"\"\n-        wrap_for_ctx = kwargs.pop('with_appcontext', True)\n-        def decorator(f):\n-            if wrap_for_ctx:\n-                f = with_appcontext(f)\n-            return click.Group.command(self, *args, **kwargs)(f)\n-        return decorator\n+        return AppGroup.main(self, *args, **kwargs)\n \n \n def script_info_option(*args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a94e767acb499bc7c86844d502fd799e3360c534", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 1079 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -226,6 +226,14 @@ class AppGroup(click.Group):\n             return click.Group.command(self, *args, **kwargs)(f)\n         return decorator\n \n+    def group(self, *args, **kwargs):\n+        \"\"\"This works exactly like the method of the same name on a regular\n+        :class:`click.Group` but it defaults the group class to\n+        :class:`AppGroup`.\n+        \"\"\"\n+        kwargs.setdefault('cls', AppGroup)\n+        return click.Group.group(self, *args, **kwargs)\n+\n \n class FlaskGroup(AppGroup):\n     \"\"\"Special subclass of the the :class:`AppGroup` group that supports\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b81f72070ec0dc2bede09eedea3d0b0360887720", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 230 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -54,6 +54,8 @@ class FlaskClient(Client):\n         the test client uses.  Once the with block is left the session is\n         stored back.\n \n+        ::\n+\n             with client.session_transaction() as session:\n                 session['value'] = 42\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#05ad436201f8c835ac2a5a317e5cb5fe5e0f3e21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 615 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -255,7 +255,7 @@ class SessionInterface(object):\n             return datetime.utcnow() + app.permanent_session_lifetime\n \n     def should_set_cookie(self, app, session):\n-        \"\"\"Indicates weather a cookie should be set now or not.  This is\n+        \"\"\"Indicates whether a cookie should be set now or not.  This is\n         used by session backends to figure out if they should emit a\n         set-cookie header or not.  The default behavior is controlled by\n         the ``SESSION_REFRESH_EACH_REQUEST`` config variable.  If\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9eb59b0bef176aa227edc8970d4b2ac420af9293", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 29 | Churn Cumulative: 1108 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@\n \n import os\n import sys\n-from threading import Lock\n+from threading import Lock, Thread\n from functools import update_wrapper\n \n import click\n@@ -99,25 +99,46 @@ def locate_app(app_id):\n \n class DispatchingApp(object):\n     \"\"\"Special application that dispatches to a flask application which\n-    is imported by name on first request.  This is safer than importing\n-    the application upfront because it means that we can forward all\n-    errors for import problems into the browser as error.\n+    is imported by name in a background thread.  If an error happens\n+    it is is recorded and shows as part of the WSGI handling which in case\n+    of the Werkzeug debugger means that it shows up in the browser.\n     \"\"\"\n \n     def __init__(self, loader, use_eager_loading=False):\n         self.loader = loader\n         self._app = None\n         self._lock = Lock()\n+        self._bg_loading_exc_info = None\n         if use_eager_loading:\n             self._load_unlocked()\n+        else:\n+            self._load_in_background()\n+\n+    def _load_in_background(self):\n+        def _load_app():\n+            with self._lock:\n+                try:\n+                    self._load_unlocked()\n+                except Exception:\n+                    self._bg_loading_exc_info = sys.exc_info()\n+        t = Thread(target=_load_app, args=())\n+        t.start()\n+\n+    def _flush_bg_loading_exception(self):\n+        exc_info = self._bg_loading_exc_info\n+        if exc_info is not None:\n+            self._bg_loading_exc_info = None\n+            raise exc_info[0], exc_info[1], exc_info[2]\n \n     def _load_unlocked(self):\n         self._app = rv = self.loader()\n+        self._bg_loading_exc_info = None\n         return rv\n \n     def __call__(self, environ, start_response):\n         if self._app is not None:\n             return self._app(environ, start_response)\n+        self._flush_bg_loading_exception()\n         with self._lock:\n             if self._app is not None:\n                 rv = self._app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed49fe3db1babe0273e295067db9716a69bfbf88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 361 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -67,14 +67,6 @@ class DispatchingJinjaLoader(BaseLoader):\n         if loader is not None:\n             yield loader, template\n \n-        # old style module based loaders in case we are dealing with a\n-        # blueprint that is an old style module\n-        try:\n-            module, local_name = posixpath.normpath(template).split('/', 1)\n-            blueprint = self.app.blueprints[module]\n-        except (ValueError, KeyError):\n-            pass\n-\n         for blueprint in itervalues(self.app.blueprints):\n             loader = blueprint.jinja_loader\n             if loader is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f17ad953dd2e563f91cc9ed2bca19ea23464b5dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1112 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ from functools import update_wrapper\n \n import click\n \n-from ._compat import iteritems\n+from ._compat import iteritems, reraise\n \n \n class NoAppException(click.UsageError):\n@@ -128,7 +128,7 @@ class DispatchingApp(object):\n         exc_info = self._bg_loading_exc_info\n         if exc_info is not None:\n             self._bg_loading_exc_info = None\n-            raise exc_info[0], exc_info[1], exc_info[2]\n+            reraise(*exc_info)\n \n     def _load_unlocked(self):\n         self._app = rv = self.loader()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bafc13981002dee4610234c7c97ac176766181c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 142 | Lines Deleted: 13 | Files Changed: 8 | Hunks: 16 | Methods Changed: 9 | Complexity Δ (Sum/Max): 32/21 | Churn Δ: 155 | Churn Cumulative: 5671 | Contributors (this commit): 56 | Commits (past 90d): 16 | Contributors (cumulative): 82 | DMM Complexity: 0.29523809523809524\n\nDIFF:\n@@ -292,6 +292,7 @@ class Flask(_PackageBoundObject):\n         'SEND_FILE_MAX_AGE_DEFAULT':            12 * 60 * 60, # 12 hours\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n+        'EXPLAIN_TEMPLATE_LOADING':             False,\n         'PREFERRED_URL_SCHEME':                 'http',\n         'JSON_AS_ASCII':                        True,\n         'JSON_SORT_KEYS':                       True,\n\n@@ -8,7 +8,10 @@\n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from ._compat import implements_to_string\n+from ._compat import implements_to_string, text_type\n+from .app import Flask\n+from .blueprints import Blueprint\n+from .globals import _request_ctx_stack\n \n \n class UnexpectedUnicodeError(AssertionError, UnicodeError):\n@@ -85,3 +88,68 @@ def attach_enctype_error_multidict(request):\n     newcls.__name__ = oldcls.__name__\n     newcls.__module__ = oldcls.__module__\n     request.files.__class__ = newcls\n+\n+\n+def _dump_loader_info(loader):\n+    yield 'class: %s.%s' % (type(loader).__module__, type(loader).__name__)\n+    for key, value in sorted(loader.__dict__.items()):\n+        if key.startswith('_'):\n+            continue\n+        if isinstance(value, (tuple, list)):\n+            if not all(isinstance(x, (str, text_type)) for x in value):\n+                continue\n+            yield '%s:' % key\n+            for item in value:\n+                yield '  - %s' % item\n+            continue\n+        elif not isinstance(value, (str, text_type, int, float, bool)):\n+            continue\n+        yield '%s: %r' % (key, value)\n+\n+\n+def explain_template_loading_attempts(app, template, attempts):\n+    \"\"\"This should help developers understand what \"\"\"\n+    info = ['Locating template \"%s\":' % template]\n+    total_found = 0\n+    blueprint = None\n+    reqctx = _request_ctx_stack.top\n+    if reqctx is not None and reqctx.request.blueprint is not None:\n+        blueprint = reqctx.request.blueprint\n+\n+    for idx, (loader, srcobj, triple) in enumerate(attempts):\n+        if isinstance(srcobj, Flask):\n+            src_info = 'application \"%s\"' % srcobj.import_name\n+        elif isinstance(srcobj, Blueprint):\n+            src_info = 'blueprint \"%s\" (%s)' % (srcobj.name,\n+                                                srcobj.import_name)\n+        else:\n+            src_info = repr(srcobj)\n+\n+        info.append('% 5d: trying loader of %s' % (\n+            idx + 1, src_info))\n+\n+        for line in _dump_loader_info(loader):\n+            info.append('       %s' % line)\n+\n+        if triple is None:\n+            detail = 'no match'\n+        else:\n+            detail = 'found (%r)' % (triple[1] or '<string>')\n+            total_found += 1\n+        info.append('       -> %s' % detail)\n+\n+    seems_fishy = False\n+    if total_found == 0:\n+        info.append('Error: the template could not be found.')\n+        seems_fishy = True\n+    elif total_found > 1:\n+        info.append('Warning: multiple loaders returned a match for the template.')\n+        seems_fishy = True\n+\n+    if blueprint is not None and seems_fishy:\n+        info.append('  The template was looked up from an endpoint that '\n+                    'belongs to the blueprint \"%s\".' % blueprint)\n+        info.append('  Maybe you did not place a template in the right folder?')\n+        info.append('  See http://flask.pocoo.org/docs/blueprints/#templates')\n+\n+    app.logger.info('\\n'.join(info))\n\n@@ -71,6 +71,7 @@ def _tag(value):\n         try:\n             return text_type(value)\n         except UnicodeError:\n+            from flask.debughelpers import UnexpectedUnicodeError\n             raise UnexpectedUnicodeError(u'A byte string with '\n                 u'non-ASCII data was passed to the session system '\n                 u'which can only store unicode strings.  Consider '\n@@ -362,6 +363,3 @@ class SecureCookieSessionInterface(SessionInterface):\n         response.set_cookie(app.session_cookie_name, val,\n                             expires=expires, httponly=httponly,\n                             domain=domain, path=path, secure=secure)\n-\n-\n-from flask.debughelpers import UnexpectedUnicodeError\n\n@@ -8,7 +8,6 @@\n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-import posixpath\n from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n      TemplateNotFound\n \n@@ -54,23 +53,38 @@ class DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n-        for loader, local_name in self._iter_loaders(template):\n-            try:\n-                return loader.get_source(environment, local_name)\n-            except TemplateNotFound:\n-                pass\n+        explain = self.app.config['EXPLAIN_TEMPLATE_LOADING']\n+        attempts = []\n+        tmplrv = None\n \n+        for srcobj, loader in self._iter_loaders(template):\n+            try:\n+                rv = loader.get_source(environment, template)\n+                if tmplrv is None:\n+                    tmplrv = rv\n+                if not explain:\n+                    break\n+            except TemplateNotFound:\n+                rv = None\n+            attempts.append((loader, srcobj, rv))\n+\n+        if explain:\n+            from debughelpers import explain_template_loading_attempts\n+            explain_template_loading_attempts(self.app, template, attempts)\n+\n+        if tmplrv is not None:\n+            return tmplrv\n         raise TemplateNotFound(template)\n \n     def _iter_loaders(self, template):\n         loader = self.app.jinja_loader\n         if loader is not None:\n-            yield loader, template\n+            yield self.app, loader\n \n         for blueprint in itervalues(self.app.blueprints):\n             loader = blueprint.jinja_loader\n             if loader is not None:\n-                yield loader, template\n+                yield blueprint, loader\n \n     def list_templates(self):\n         result = set()\n\n@@ -11,6 +11,9 @@\n \n import flask\n import unittest\n+import logging\n+from jinja2 import TemplateNotFound\n+\n from flask.testsuite import FlaskTestCase\n \n \n@@ -303,6 +306,45 @@ class TemplatingTestCase(FlaskTestCase):\n         app.config['TEMPLATES_AUTO_RELOAD'] = False\n         self.assert_false(app.jinja_env.auto_reload)\n \n+    def test_template_loader_debugging(self):\n+        from blueprintapp import app\n+\n+        called = []\n+        class _TestHandler(logging.Handler):\n+            def handle(x, record):\n+                called.append(True)\n+                text = unicode(record.msg)\n+                self.assert_('1: trying loader of application '\n+                             '\"blueprintapp\"' in text)\n+                self.assert_('2: trying loader of blueprint \"admin\" '\n+                             '(blueprintapp.apps.admin)' in text)\n+                self.assert_('trying loader of blueprint \"frontend\" '\n+                             '(blueprintapp.apps.frontend)' in text)\n+                self.assert_('Error: the template could not be found' in text)\n+                self.assert_('looked up from an endpoint that belongs to '\n+                             'the blueprint \"frontend\"' in text)\n+                self.assert_(\n+                    'See http://flask.pocoo.org/docs/blueprints/#templates' in text)\n+\n+        with app.test_client() as c:\n+            try:\n+                old_load_setting = app.config['EXPLAIN_TEMPLATE_LOADING']\n+                old_handlers = app.logger.handlers[:]\n+                app.logger.handlers = [_TestHandler()]\n+                app.config['EXPLAIN_TEMPLATE_LOADING'] = True\n+\n+                try:\n+                    c.get('/missing')\n+                except TemplateNotFound as e:\n+                    self.assert_('missing_template.html' in str(e))\n+                else:\n+                    self.fail('Expected template not found exception.')\n+            finally:\n+                app.logger.handlers[:] = old_handlers\n+                app.config['EXPLAIN_TEMPLATE_LOADING'] = old_load_setting\n+\n+        self.assert_equal(len(called), 1)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -1,6 +1,7 @@\n from flask import Flask\n \n app = Flask(__name__)\n+app.config['DEBUG'] = True\n from blueprintapp.apps.admin import admin\n from blueprintapp.apps.frontend import frontend\n app.register_blueprint(admin)\n\n@@ -6,3 +6,8 @@ frontend = Blueprint('frontend', __name__, template_folder='templates')\n @frontend.route('/')\n def index():\n     return render_template('frontend/index.html')\n+\n+\n+@frontend.route('/missing')\n+def missing_template():\n+    return render_template('missing_template.html')\n\n@@ -12,7 +12,6 @@\n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n from werkzeug.exceptions import BadRequest\n \n-from .debughelpers import attach_enctype_error_multidict\n from . import json\n from .globals import _request_ctx_stack\n \n@@ -184,6 +183,7 @@ class Request(RequestBase):\n         ctx = _request_ctx_stack.top\n         if ctx is not None and ctx.app.debug and \\\n            self.mimetype != 'multipart/form-data' and not self.files:\n+            from .debughelpers import attach_enctype_error_multidict\n             attach_enctype_error_multidict(self)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#84f57b6bda5469a7ed1f18ad1c7b167225326796", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 393 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -69,7 +69,7 @@ class DispatchingJinjaLoader(BaseLoader):\n             attempts.append((loader, srcobj, rv))\n \n         if explain:\n-            from debughelpers import explain_template_loading_attempts\n+            from .debughelpers import explain_template_loading_attempts\n             explain_template_loading_attempts(self.app, template, attempts)\n \n         if tmplrv is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb0084f5bef9b871a82f0451ed71131ffb7a43b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 504 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -313,7 +313,7 @@ class TemplatingTestCase(FlaskTestCase):\n         class _TestHandler(logging.Handler):\n             def handle(x, record):\n                 called.append(True)\n-                text = unicode(record.msg)\n+                text = str(record.msg)\n                 self.assert_('1: trying loader of application '\n                              '\"blueprintapp\"' in text)\n                 self.assert_('2: trying loader of blueprint \"admin\" '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#750ab16364e12387a58061e5895b20fdcdcef003", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 359 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -147,6 +147,7 @@ class FlaskTestCase(unittest.TestCase):\n \n     def assert_true(self, x, msg=None):\n         self.assertTrue(x, msg)\n+    assert_ = assert_true\n \n     def assert_false(self, x, msg=None):\n         self.assertFalse(x, msg)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c09a4317e4cfa64bf59e712405aded84157756a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 3926 | Contributors (this commit): 45 | Commits (past 90d): 12 | Contributors (cumulative): 49 | DMM Complexity: 0.75\n\nDIFF:\n@@ -472,6 +472,7 @@ class Flask(_PackageBoundObject):\n         #:\n         #: .. versionadded:: 0.7\n         self.blueprints = {}\n+        self._blueprint_order = []\n \n         #: a place where extensions can store application specific state.  For\n         #: example this is where an extension could store database engines and\n@@ -903,9 +904,17 @@ class Flask(_PackageBoundObject):\n                 (blueprint, self.blueprints[blueprint.name], blueprint.name)\n         else:\n             self.blueprints[blueprint.name] = blueprint\n+            self._blueprint_order.append(blueprint)\n             first_registration = True\n         blueprint.register(self, options, first_registration)\n \n+    def iter_blueprints(self):\n+        \"\"\"Iterates over all blueprints by the order they were registered.\n+\n+        .. versionadded:: 1.0\n+        \"\"\"\n+        return iter(self._blueprint_order)\n+\n     @setupmethod\n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n\n@@ -13,7 +13,6 @@ from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n from .signals import template_rendered\n-from ._compat import itervalues, iteritems\n \n \n def _default_template_ctx_processor():\n@@ -81,7 +80,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         if loader is not None:\n             yield self.app, loader\n \n-        for blueprint in itervalues(self.app.blueprints):\n+        for blueprint in self.app.iter_blueprints():\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 yield blueprint, loader\n@@ -92,7 +91,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         if loader is not None:\n             result.update(loader.list_templates())\n \n-        for name, blueprint in iteritems(self.app.blueprints):\n+        for blueprint in self.app.iter_blueprints():\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 for template in loader.list_templates():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0a7cc2b113a6785006699b5b2bedcc50d0aa4a1a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1725 | Contributors (this commit): 29 | Commits (past 90d): 3 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -726,7 +726,7 @@ def find_package(import_name):\n             filename = sys.modules[import_name].__file__\n         package_path = os.path.abspath(os.path.dirname(filename))\n \n-        # In case the root module is a pcakage we need to chop of the\n+        # In case the root module is a package we need to chop of the\n         # rightmost part.  This needs to go through a helper function\n         # because of python 3.3 namespace packages.\n         if _matching_loader_thinks_module_is_package(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#013d8ad3d9fa1697c4dc5648376c98dbd537eb28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 6 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,7 @@ flask_svc_url = 'http://flask.pocoo.org/extensions/'\n \n # OS X has awful paths when using mkstemp or gettempdir().  I don't\n # care about security or clashes here, so pick something that is\n-# actually rememberable.\n+# actually memorable.\n if sys.platform == 'darwin':\n     _tempdir = '/private/tmp'\n else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#077d06df5498d51c98983562cff876aff4ab862b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 160 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +0,0 @@\n-#!/usr/bin/env python\n-import sys, os\n-sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))\n-from flask.testsuite import main\n-main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3550b26071e0f392ad67ece2ea5057a292bdc528", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 38 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 290 | Contributors (this commit): 13 | Commits (past 90d): 39 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -117,6 +117,5 @@ setup(\n         [console_scripts]\n         flask=flask.cli:main\n     ''',\n-    cmdclass={'audit': run_audit},\n-    test_suite='flask.testsuite.suite'\n+    cmdclass={'audit': run_audit}\n )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#961db8ad7290f1bd91058b11a5de31e27bf28563", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 31 | Files Changed: 16 | Hunks: 31 | Methods Changed: 0 | Complexity Δ (Sum/Max): 761/209 | Churn Δ: 62 | Churn Cumulative: 62 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite\n+    tests\n     ~~~~~~~~~~~~~~~\n \n     Tests Flask itself.  The majority of Flask is already tested\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.appctx\n+    tests.appctx\n     ~~~~~~~~~~~~~~~~~~~~~~\n \n     Tests the application context.\n@@ -11,7 +11,7 @@\n \n import flask\n import unittest\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n \n \n class AppContextTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.basic\n+    tests.basic\n     ~~~~~~~~~~~~~~~~~~~~~\n \n     The basic functionality.\n@@ -17,7 +17,7 @@ import pickle\n import unittest\n from datetime import datetime\n from threading import Thread\n-from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n+from tests import FlaskTestCase, emits_module_deprecation_warning\n from flask._compat import text_type\n from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.blueprints\n+    tests.blueprints\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Blueprints (and currently modules)\n@@ -11,7 +11,7 @@\n \n import flask\n import unittest\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from flask._compat import text_type\n from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.config\n+    tests.config\n     ~~~~~~~~~~~~~~~~~~~~~~\n \n     Configuration and instances.\n@@ -15,7 +15,7 @@ import flask\n import pkgutil\n import unittest\n from contextlib import contextmanager\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from flask._compat import PY2\n \n \n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.deprecations\n+    tests.deprecations\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Tests deprecation support.\n@@ -11,7 +11,7 @@\n \n import flask\n import unittest\n-from flask.testsuite import FlaskTestCase, catch_warnings\n+from tests import FlaskTestCase, catch_warnings\n \n \n class DeprecationsTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.examples\n+    tests.examples\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Tests the examples.\n@@ -10,7 +10,7 @@\n \"\"\"\n import os\n import unittest\n-from flask.testsuite import add_to_path\n+from tests import add_to_path\n \n \n def setup_path():\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.ext\n+    tests.ext\n     ~~~~~~~~~~~~~~~~~~~\n \n     Tests the extension import thing.\n@@ -15,7 +15,7 @@ try:\n     from imp import reload as reload_module\n except ImportError:\n     reload_module = reload\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from flask._compat import PY2\n \n class ExtImportHookTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.helpers\n+    tests.helpers\n     ~~~~~~~~~~~~~~~~~~~~~~~\n \n     Various helpers.\n@@ -13,7 +13,7 @@ import os\n import flask\n import unittest\n from logging import StreamHandler\n-from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n+from tests import FlaskTestCase, catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from flask._compat import StringIO, text_type\n \n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.regression\n+    tests.regression\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Tests regressions.\n@@ -16,7 +16,7 @@ import flask\n import threading\n import unittest\n from werkzeug.exceptions import NotFound\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n \n \n _gc_lock = threading.Lock()\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.reqctx\n+    tests.reqctx\n     ~~~~~~~~~~~~~~~~~~~~~~\n \n     Tests the request context.\n@@ -15,7 +15,7 @@ try:\n     from greenlet import greenlet\n except ImportError:\n     greenlet = None\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n \n \n class RequestContextTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.signals\n+    tests.signals\n     ~~~~~~~~~~~~~~~~~~~~~~~\n \n     Signalling.\n@@ -11,7 +11,7 @@\n \n import flask\n import unittest\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n \n \n class SignalsTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.subclassing\n+    tests.subclassing\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Test that certain behavior of flask can be customized by\n@@ -12,7 +12,7 @@\n import flask\n import unittest\n from logging import StreamHandler\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from flask._compat import StringIO\n \n \n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.templating\n+    tests.templating\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n     Template functionality\n@@ -14,7 +14,7 @@ import unittest\n import logging\n from jinja2 import TemplateNotFound\n \n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n \n \n class TemplatingTestCase(FlaskTestCase):\n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.testing\n+    tests.testing\n     ~~~~~~~~~~~~~~~~~~~~~~~\n \n     Test client and more.\n@@ -11,7 +11,7 @@\n \n import flask\n import unittest\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from flask._compat import text_type\n \n \n\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.testsuite.views\n+    tests.views\n     ~~~~~~~~~~~~~~~~~~~~~\n \n     Pluggable views.\n@@ -12,7 +12,7 @@\n import flask\n import flask.views\n import unittest\n-from flask.testsuite import FlaskTestCase\n+from tests import FlaskTestCase\n from werkzeug.http import parse_set_header\n \n class ViewTestCase(FlaskTestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8fa5e32d9a1fdf042632bd8fcd0b44dd8031b639", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 418 | Lines Deleted: 530 | Files Changed: 23 | Hunks: 114 | Methods Changed: 109 | Complexity Δ (Sum/Max): -30/14 | Churn Δ: 948 | Churn Cumulative: 1384 | Contributors (this commit): 6 | Commits (past 90d): 41 | Contributors (cumulative): 31 | DMM Complexity: 0.2676056338028169\n\nDIFF:\n@@ -1,36 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Blueprint Example Tests\n-    ~~~~~~~~~~~~~~\n-\n-    Tests the Blueprint example app\n-\"\"\"\n-import blueprintexample\n-import unittest\n-\n-\n-class BlueprintExampleTestCase(unittest.TestCase):\n-\n-    def setUp(self):\n-        self.app = blueprintexample.app.test_client()\n-        \n-    def test_urls(self):\n-        r = self.app.get('/')\n-        self.assertEquals(r.status_code, 200)\n-        \n-        r = self.app.get('/hello')\n-        self.assertEquals(r.status_code, 200)\n-        \n-        r = self.app.get('/world')\n-        self.assertEquals(r.status_code, 200)\n-        \n-        #second blueprint instance\n-        r = self.app.get('/pages/hello')\n-        self.assertEquals(r.status_code, 200)\n-        \n-        r = self.app.get('/pages/world')\n-        self.assertEquals(r.status_code, 200)\n-        \n-        \n-if __name__ == '__main__':\n-    unittest.main()\n\n@@ -0,0 +1,33 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Blueprint Example Tests\n+    ~~~~~~~~~~~~~~\n+\n+    Tests the Blueprint example app\n+\"\"\"\n+import pytest\n+\n+import blueprintexample\n+\n+\n+@pytest.fixture\n+def client():\n+    return blueprintexample.app.test_client()\n+\n+\n+def test_urls(client):\n+    r = client.get('/')\n+    assert r.status_code == 200\n+\n+    r = client.get('/hello')\n+    assert r.status_code == 200\n+\n+    r = client.get('/world')\n+    assert r.status_code == 200\n+\n+    # second blueprint instance\n+    r = client.get('/pages/hello')\n+    assert r.status_code == 200\n+\n+    r = client.get('/pages/world')\n+    assert r.status_code == 200\n\n@@ -1,76 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr Tests\n-    ~~~~~~~~~~~~\n-\n-    Tests the Flaskr application.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-import os\n-import flaskr\n-import unittest\n-import tempfile\n-\n-\n-class FlaskrTestCase(unittest.TestCase):\n-\n-    def setUp(self):\n-        \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n-        flaskr.app.config['TESTING'] = True\n-        self.app = flaskr.app.test_client()\n-        with flaskr.app.app_context():\n-            flaskr.init_db()\n-\n-    def tearDown(self):\n-        \"\"\"Get rid of the database again after each test.\"\"\"\n-        os.close(self.db_fd)\n-        os.unlink(flaskr.app.config['DATABASE'])\n-\n-    def login(self, username, password):\n-        return self.app.post('/login', data=dict(\n-            username=username,\n-            password=password\n-        ), follow_redirects=True)\n-\n-    def logout(self):\n-        return self.app.get('/logout', follow_redirects=True)\n-\n-    # testing functions\n-\n-    def test_empty_db(self):\n-        \"\"\"Start with a blank database.\"\"\"\n-        rv = self.app.get('/')\n-        assert b'No entries here so far' in rv.data\n-\n-    def test_login_logout(self):\n-        \"\"\"Make sure login and logout works\"\"\"\n-        rv = self.login(flaskr.app.config['USERNAME'],\n-                        flaskr.app.config['PASSWORD'])\n-        assert b'You were logged in' in rv.data\n-        rv = self.logout()\n-        assert b'You were logged out' in rv.data\n-        rv = self.login(flaskr.app.config['USERNAME'] + 'x',\n-                        flaskr.app.config['PASSWORD'])\n-        assert b'Invalid username' in rv.data\n-        rv = self.login(flaskr.app.config['USERNAME'],\n-                        flaskr.app.config['PASSWORD'] + 'x')\n-        assert b'Invalid password' in rv.data\n-\n-    def test_messages(self):\n-        \"\"\"Test that messages work\"\"\"\n-        self.login(flaskr.app.config['USERNAME'],\n-                   flaskr.app.config['PASSWORD'])\n-        rv = self.app.post('/add', data=dict(\n-            title='<Hello>',\n-            text='<strong>HTML</strong> allowed here'\n-        ), follow_redirects=True)\n-        assert b'No entries here so far' not in rv.data\n-        assert b'&lt;Hello&gt;' in rv.data\n-        assert b'<strong>HTML</strong> allowed here' in rv.data\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()\n\n@@ -0,0 +1,77 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr Tests\n+    ~~~~~~~~~~~~\n+\n+    Tests the Flaskr application.\n+\n+    :copyright: (c) 2014 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+import pytest\n+\n+import os\n+import flaskr\n+import tempfile\n+\n+\n+@pytest.fixture\n+def client(request):\n+    db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n+    flaskr.app.config['TESTING'] = True\n+    client = flaskr.app.test_client()\n+    with flaskr.app.app_context():\n+        flaskr.init_db()\n+\n+    def teardown():\n+        os.close(db_fd)\n+        os.unlink(flaskr.app.config['DATABASE'])\n+    request.addfinalizer(teardown)\n+\n+    return client\n+\n+\n+def login(client, username, password):\n+    return client.post('/login', data=dict(\n+        username=username,\n+        password=password\n+    ), follow_redirects=True)\n+\n+\n+def logout(client):\n+    return client.get('/logout', follow_redirects=True)\n+\n+\n+def test_empty_db(client):\n+    \"\"\"Start with a blank database.\"\"\"\n+    rv = client.get('/')\n+    assert b'No entries here so far' in rv.data\n+\n+\n+def test_login_logout(client):\n+    \"\"\"Make sure login and logout works\"\"\"\n+    rv = login(client, flaskr.app.config['USERNAME'],\n+               flaskr.app.config['PASSWORD'])\n+    assert b'You were logged in' in rv.data\n+    rv = logout(client)\n+    assert b'You were logged out' in rv.data\n+    rv = login(client, flaskr.app.config['USERNAME'] + 'x',\n+               flaskr.app.config['PASSWORD'])\n+    assert b'Invalid username' in rv.data\n+    rv = login(client, flaskr.app.config['USERNAME'],\n+               flaskr.app.config['PASSWORD'] + 'x')\n+    assert b'Invalid password' in rv.data\n+\n+\n+def test_messages(client):\n+    \"\"\"Test that messages work\"\"\"\n+    login(client, flaskr.app.config['USERNAME'],\n+          flaskr.app.config['PASSWORD'])\n+    rv = client.post('/add', data=dict(\n+        title='<Hello>',\n+        text='<strong>HTML</strong> allowed here'\n+    ), follow_redirects=True)\n+    assert b'No entries here so far' not in rv.data\n+    assert b'&lt;Hello&gt;' in rv.data\n+    assert b'<strong>HTML</strong> allowed here' in rv.data\n\n@@ -1,150 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    MiniTwit Tests\n-    ~~~~~~~~~~~~~~\n-\n-    Tests the MiniTwit application.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-import os\n-import minitwit\n-import unittest\n-import tempfile\n-\n-\n-class MiniTwitTestCase(unittest.TestCase):\n-\n-    def setUp(self):\n-        \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n-        self.app = minitwit.app.test_client()\n-        with minitwit.app.app_context():\n-            minitwit.init_db()\n-\n-    def tearDown(self):\n-        \"\"\"Get rid of the database again after each test.\"\"\"\n-        os.close(self.db_fd)\n-        os.unlink(minitwit.app.config['DATABASE'])\n-\n-    # helper functions\n-\n-    def register(self, username, password, password2=None, email=None):\n-        \"\"\"Helper function to register a user\"\"\"\n-        if password2 is None:\n-            password2 = password\n-        if email is None:\n-            email = username + '@example.com'\n-        return self.app.post('/register', data={\n-            'username':     username,\n-            'password':     password,\n-            'password2':    password2,\n-            'email':        email,\n-        }, follow_redirects=True)\n-\n-    def login(self, username, password):\n-        \"\"\"Helper function to login\"\"\"\n-        return self.app.post('/login', data={\n-            'username': username,\n-            'password': password\n-        }, follow_redirects=True)\n-\n-    def register_and_login(self, username, password):\n-        \"\"\"Registers and logs in in one go\"\"\"\n-        self.register(username, password)\n-        return self.login(username, password)\n-\n-    def logout(self):\n-        \"\"\"Helper function to logout\"\"\"\n-        return self.app.get('/logout', follow_redirects=True)\n-\n-    def add_message(self, text):\n-        \"\"\"Records a message\"\"\"\n-        rv = self.app.post('/add_message', data={'text': text},\n-                                    follow_redirects=True)\n-        if text:\n-            assert b'Your message was recorded' in rv.data\n-        return rv\n-\n-    # testing functions\n-\n-    def test_register(self):\n-        \"\"\"Make sure registering works\"\"\"\n-        rv = self.register('user1', 'default')\n-        assert b'You were successfully registered ' \\\n-               b'and can login now' in rv.data\n-        rv = self.register('user1', 'default')\n-        assert b'The username is already taken' in rv.data\n-        rv = self.register('', 'default')\n-        assert b'You have to enter a username' in rv.data\n-        rv = self.register('meh', '')\n-        assert b'You have to enter a password' in rv.data\n-        rv = self.register('meh', 'x', 'y')\n-        assert b'The two passwords do not match' in rv.data\n-        rv = self.register('meh', 'foo', email='broken')\n-        assert b'You have to enter a valid email address' in rv.data\n-\n-    def test_login_logout(self):\n-        \"\"\"Make sure logging in and logging out works\"\"\"\n-        rv = self.register_and_login('user1', 'default')\n-        assert b'You were logged in' in rv.data\n-        rv = self.logout()\n-        assert b'You were logged out' in rv.data\n-        rv = self.login('user1', 'wrongpassword')\n-        assert b'Invalid password' in rv.data\n-        rv = self.login('user2', 'wrongpassword')\n-        assert b'Invalid username' in rv.data\n-\n-    def test_message_recording(self):\n-        \"\"\"Check if adding messages works\"\"\"\n-        self.register_and_login('foo', 'default')\n-        self.add_message('test message 1')\n-        self.add_message('<test message 2>')\n-        rv = self.app.get('/')\n-        assert b'test message 1' in rv.data\n-        assert b'&lt;test message 2&gt;' in rv.data\n-\n-    def test_timelines(self):\n-        \"\"\"Make sure that timelines work\"\"\"\n-        self.register_and_login('foo', 'default')\n-        self.add_message('the message by foo')\n-        self.logout()\n-        self.register_and_login('bar', 'default')\n-        self.add_message('the message by bar')\n-        rv = self.app.get('/public')\n-        assert b'the message by foo' in rv.data\n-        assert b'the message by bar' in rv.data\n-\n-        # bar's timeline should just show bar's message\n-        rv = self.app.get('/')\n-        assert b'the message by foo' not in rv.data\n-        assert b'the message by bar' in rv.data\n-\n-        # now let's follow foo\n-        rv = self.app.get('/foo/follow', follow_redirects=True)\n-        assert b'You are now following &#34;foo&#34;' in rv.data\n-\n-        # we should now see foo's message\n-        rv = self.app.get('/')\n-        assert b'the message by foo' in rv.data\n-        assert b'the message by bar' in rv.data\n-\n-        # but on the user's page we only want the user's message\n-        rv = self.app.get('/bar')\n-        assert b'the message by foo' not in rv.data\n-        assert b'the message by bar' in rv.data\n-        rv = self.app.get('/foo')\n-        assert b'the message by foo' in rv.data\n-        assert b'the message by bar' not in rv.data\n-\n-        # now unfollow and check if that worked\n-        rv = self.app.get('/foo/unfollow', follow_redirects=True)\n-        assert b'You are no longer following &#34;foo&#34;' in rv.data\n-        rv = self.app.get('/')\n-        assert b'the message by foo' not in rv.data\n-        assert b'the message by bar' in rv.data\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()\n\n@@ -0,0 +1,151 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    MiniTwit Tests\n+    ~~~~~~~~~~~~~~\n+\n+    Tests the MiniTwit application.\n+\n+    :copyright: (c) 2014 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import minitwit\n+import tempfile\n+import pytest\n+\n+\n+@pytest.fixture\n+def client(request):\n+    db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n+    client = minitwit.app.test_client()\n+    with minitwit.app.app_context():\n+        minitwit.init_db()\n+\n+    def teardown():\n+        \"\"\"Get rid of the database again after each test.\"\"\"\n+        os.close(db_fd)\n+        os.unlink(minitwit.app.config['DATABASE'])\n+    request.addfinalizer(teardown)\n+    return client\n+\n+\n+def register(client, username, password, password2=None, email=None):\n+    \"\"\"Helper function to register a user\"\"\"\n+    if password2 is None:\n+        password2 = password\n+    if email is None:\n+        email = username + '@example.com'\n+    return client.post('/register', data={\n+        'username':     username,\n+        'password':     password,\n+        'password2':    password2,\n+        'email':        email,\n+    }, follow_redirects=True)\n+\n+\n+def login(client, username, password):\n+    \"\"\"Helper function to login\"\"\"\n+    return client.post('/login', data={\n+        'username': username,\n+        'password': password\n+    }, follow_redirects=True)\n+\n+\n+def register_and_login(client, username, password):\n+    \"\"\"Registers and logs in in one go\"\"\"\n+    register(client, username, password)\n+    return login(client, username, password)\n+\n+\n+def logout(client):\n+    \"\"\"Helper function to logout\"\"\"\n+    return client.get('/logout', follow_redirects=True)\n+\n+\n+def add_message(client, text):\n+    \"\"\"Records a message\"\"\"\n+    rv = client.post('/add_message', data={'text': text},\n+                     follow_redirects=True)\n+    if text:\n+        assert b'Your message was recorded' in rv.data\n+    return rv\n+\n+\n+def test_register(client):\n+    \"\"\"Make sure registering works\"\"\"\n+    rv = register(client, 'user1', 'default')\n+    assert b'You were successfully registered ' \\\n+           b'and can login now' in rv.data\n+    rv = register(client, 'user1', 'default')\n+    assert b'The username is already taken' in rv.data\n+    rv = register(client, '', 'default')\n+    assert b'You have to enter a username' in rv.data\n+    rv = register(client, 'meh', '')\n+    assert b'You have to enter a password' in rv.data\n+    rv = register(client, 'meh', 'x', 'y')\n+    assert b'The two passwords do not match' in rv.data\n+    rv = register(client, 'meh', 'foo', email='broken')\n+    assert b'You have to enter a valid email address' in rv.data\n+\n+\n+def test_login_logout(client):\n+    \"\"\"Make sure logging in and logging out works\"\"\"\n+    rv = register_and_login(client, 'user1', 'default')\n+    assert b'You were logged in' in rv.data\n+    rv = logout(client)\n+    assert b'You were logged out' in rv.data\n+    rv = login(client, 'user1', 'wrongpassword')\n+    assert b'Invalid password' in rv.data\n+    rv = login(client, 'user2', 'wrongpassword')\n+    assert b'Invalid username' in rv.data\n+\n+\n+def test_message_recording(client):\n+    \"\"\"Check if adding messages works\"\"\"\n+    register_and_login(client, 'foo', 'default')\n+    add_message(client, 'test message 1')\n+    add_message(client, '<test message 2>')\n+    rv = client.get('/')\n+    assert b'test message 1' in rv.data\n+    assert b'&lt;test message 2&gt;' in rv.data\n+\n+\n+def test_timelines(client):\n+    \"\"\"Make sure that timelines work\"\"\"\n+    register_and_login(client, 'foo', 'default')\n+    add_message(client, 'the message by foo')\n+    logout(client)\n+    register_and_login(client, 'bar', 'default')\n+    add_message(client, 'the message by bar')\n+    rv = client.get('/public')\n+    assert b'the message by foo' in rv.data\n+    assert b'the message by bar' in rv.data\n+\n+    # bar's timeline should just show bar's message\n+    rv = client.get('/')\n+    assert b'the message by foo' not in rv.data\n+    assert b'the message by bar' in rv.data\n+\n+    # now let's follow foo\n+    rv = client.get('/foo/follow', follow_redirects=True)\n+    assert b'You are now following &#34;foo&#34;' in rv.data\n+\n+    # we should now see foo's message\n+    rv = client.get('/')\n+    assert b'the message by foo' in rv.data\n+    assert b'the message by bar' in rv.data\n+\n+    # but on the user's page we only want the user's message\n+    rv = client.get('/bar')\n+    assert b'the message by foo' not in rv.data\n+    assert b'the message by bar' in rv.data\n+    rv = client.get('/foo')\n+    assert b'the message by foo' in rv.data\n+    assert b'the message by bar' not in rv.data\n+\n+    # now unfollow and check if that worked\n+    rv = client.get('/foo/unfollow', follow_redirects=True)\n+    assert b'You are no longer following &#34;foo&#34;' in rv.data\n+    rv = client.get('/')\n+    assert b'the message by foo' not in rv.data\n+    assert b'the message by bar' in rv.data\n\n@@ -11,16 +11,15 @@\n \"\"\"\n \n from __future__ import print_function\n+import pytest\n \n import os\n import sys\n import flask\n import warnings\n-import unittest\n from functools import update_wrapper\n from contextlib import contextmanager\n-from werkzeug.utils import import_string, find_modules\n-from flask._compat import reraise, StringIO\n+from flask._compat import StringIO\n \n \n def add_to_path(path):\n@@ -43,29 +42,6 @@ def add_to_path(path):\n     sys.path.insert(0, path)\n \n \n-def iter_suites():\n-    \"\"\"Yields all testsuites.\"\"\"\n-    for module in find_modules(__name__):\n-        mod = import_string(module)\n-        if hasattr(mod, 'suite'):\n-            yield mod.suite()\n-\n-\n-def find_all_tests(suite):\n-    \"\"\"Yields all the tests and their names from a given suite.\"\"\"\n-    suites = [suite]\n-    while suites:\n-        s = suites.pop()\n-        try:\n-            suites.extend(s)\n-        except TypeError:\n-            yield s, '%s.%s.%s' % (\n-                s.__class__.__module__,\n-                s.__class__.__name__,\n-                s._testMethodName\n-            )\n-\n-\n @contextmanager\n def catch_warnings():\n     \"\"\"Catch warnings in a with block in a list\"\"\"\n@@ -76,6 +52,7 @@ def catch_warnings():\n     warnings.filters = filters[:]\n     old_showwarning = warnings.showwarning\n     log = []\n+\n     def showwarning(message, category, filename, lineno, file=None, line=None):\n         log.append(locals())\n     try:\n@@ -107,12 +84,23 @@ def emits_module_deprecation_warning(f):\n     return update_wrapper(new_f, f)\n \n \n-class FlaskTestCase(unittest.TestCase):\n+class TestFlask(object):\n     \"\"\"Baseclass for all the tests that Flask uses.  Use these methods\n     for testing instead of the camelcased ones in the baseclass for\n     consistency.\n     \"\"\"\n \n+    @pytest.fixture(autouse=True)\n+    def setup_path(self, monkeypatch):\n+        monkeypatch.syspath_prepend(\n+            os.path.abspath(os.path.join(\n+                os.path.dirname(__file__), 'test_apps'))\n+        )\n+\n+    @pytest.fixture(autouse=True)\n+    def leak_detector(self, request):\n+        request.addfinalizer(self.ensure_clean_request_context)\n+\n     def ensure_clean_request_context(self):\n         # make sure we're not leaking a request context since we are\n         # testing flask internally in debug mode in a few cases\n@@ -121,133 +109,42 @@ class FlaskTestCase(unittest.TestCase):\n             leaks.append(flask._request_ctx_stack.pop())\n         self.assert_equal(leaks, [])\n \n+    def setup_method(self, method):\n+        self.setup()\n+\n+    def teardown_method(self, method):\n+        self.teardown()\n+\n     def setup(self):\n         pass\n \n     def teardown(self):\n         pass\n \n-    def setUp(self):\n-        self.setup()\n-\n-    def tearDown(self):\n-        unittest.TestCase.tearDown(self)\n-        self.ensure_clean_request_context()\n-        self.teardown()\n-\n     def assert_equal(self, x, y):\n-        return self.assertEqual(x, y)\n+        assert x == y\n \n     def assert_raises(self, exc_type, callable=None, *args, **kwargs):\n-        catcher = _ExceptionCatcher(self, exc_type)\n-        if callable is None:\n-            return catcher\n-        with catcher:\n-            callable(*args, **kwargs)\n+        if callable:\n+            return pytest.raises(exc_type, callable, *args, **kwargs)\n+        else:\n+            return pytest.raises(exc_type)\n \n     def assert_true(self, x, msg=None):\n-        self.assertTrue(x, msg)\n+        assert x\n     assert_ = assert_true\n \n     def assert_false(self, x, msg=None):\n-        self.assertFalse(x, msg)\n+        assert not x\n \n     def assert_in(self, x, y):\n-        self.assertIn(x, y)\n+        assert x in y\n \n     def assert_not_in(self, x, y):\n-        self.assertNotIn(x, y)\n+        assert x not in y\n \n     def assert_isinstance(self, obj, cls):\n-        self.assertIsInstance(obj, cls)\n+        assert isinstance(obj, cls)\n \n-    if sys.version_info[:2] == (2, 6):\n-        def assertIn(self, x, y):\n-            assert x in y, \"%r unexpectedly not in %r\" % (x, y)\n-\n-        def assertNotIn(self, x, y):\n-            assert x not in y, \"%r unexpectedly in %r\" % (x, y)\n-\n-        def assertIsInstance(self, x, y):\n-            assert isinstance(x, y), \"not isinstance(%r, %r)\" % (x, y)\n-\n-\n-class _ExceptionCatcher(object):\n-\n-    def __init__(self, test_case, exc_type):\n-        self.test_case = test_case\n-        self.exc_type = exc_type\n-\n-    def __enter__(self):\n-        return self\n-\n-    def __exit__(self, exc_type, exc_value, tb):\n-        exception_name = self.exc_type.__name__\n-        if exc_type is None:\n-            self.test_case.fail('Expected exception of type %r' %\n-                                exception_name)\n-        elif not issubclass(exc_type, self.exc_type):\n-            reraise(exc_type, exc_value, tb)\n-        return True\n-\n-\n-class BetterLoader(unittest.TestLoader):\n-    \"\"\"A nicer loader that solves two problems.  First of all we are setting\n-    up tests from different sources and we're doing this programmatically\n-    which breaks the default loading logic so this is required anyways.\n-    Secondly this loader has a nicer interpolation for test names than the\n-    default one so you can just do ``run-tests.py ViewTestCase`` and it\n-    will work.\n-    \"\"\"\n-\n-    def getRootSuite(self):\n-        return suite()\n-\n-    def loadTestsFromName(self, name, module=None):\n-        root = self.getRootSuite()\n-        if name == 'suite':\n-            return root\n-\n-        all_tests = []\n-        for testcase, testname in find_all_tests(root):\n-            if testname == name or \\\n-               testname.endswith('.' + name) or \\\n-               ('.' + name + '.') in testname or \\\n-               testname.startswith(name + '.'):\n-                all_tests.append(testcase)\n-\n-        if not all_tests:\n-            raise LookupError('could not find test case for \"%s\"' % name)\n-\n-        if len(all_tests) == 1:\n-            return all_tests[0]\n-        rv = unittest.TestSuite()\n-        for test in all_tests:\n-            rv.addTest(test)\n-        return rv\n-\n-\n-def setup_path():\n-    add_to_path(os.path.abspath(os.path.join(\n-        os.path.dirname(__file__), 'test_apps')))\n-\n-\n-def suite():\n-    \"\"\"A testsuite that has all the Flask tests.  You can use this\n-    function to integrate the Flask tests into your own testsuite\n-    in case you want to test that monkeypatches to Flask do not\n-    break it.\n-    \"\"\"\n-    setup_path()\n-    suite = unittest.TestSuite()\n-    for other_suite in iter_suites():\n-        suite.addTest(other_suite)\n-    return suite\n-\n-\n-def main():\n-    \"\"\"Runs the testsuite as command line application.\"\"\"\n-    try:\n-        unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n-    except Exception as e:\n-        print('Error: %s' % e)\n+    def fail(self, msg):\n+        raise AssertionError(msg)\n\n@@ -11,10 +11,10 @@\n \n import flask\n import unittest\n-from tests import FlaskTestCase\n+from tests import TestFlask\n \n \n-class AppContextTestCase(FlaskTestCase):\n+class TestAppContext(TestFlask):\n \n     def test_basic_url_generation(self):\n         app = flask.Flask(__name__)\n@@ -109,10 +109,10 @@ class AppContextTestCase(FlaskTestCase):\n             return u''\n         c = app.test_client()\n         c.get('/')\n-        self.assertEqual(called, ['request', 'app'])\n+        self.assert_equal(called, ['request', 'app'])\n \n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(AppContextTestCase))\n+    suite.addTest(unittest.makeSuite(TestAppContext))\n     return suite\n\n@@ -1,2 +1,2 @@\n-# NoImportsTestCase\n+# TestNoImports\n raise NotImplementedError\n\n@@ -17,14 +17,14 @@ import pickle\n import unittest\n from datetime import datetime\n from threading import Thread\n-from tests import FlaskTestCase, emits_module_deprecation_warning\n+from tests import TestFlask, emits_module_deprecation_warning\n from flask._compat import text_type\n from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n \n \n-class BasicFunctionalityTestCase(FlaskTestCase):\n+class TestBasicFunctionality(TestFlask):\n \n     def test_options_work(self):\n         app = flask.Flask(__name__)\n@@ -522,8 +522,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return 'Test'\n         c = app.test_client()\n         resp = c.get('/')\n-        self.assertEqual(resp.status_code, 200)\n-        self.assertEqual(resp.headers['X-Foo'], 'a header')\n+        self.assert_equal(resp.status_code, 200)\n+        self.assert_equal(resp.headers['X-Foo'], 'a header')\n \n     def test_teardown_request_handler(self):\n         called = []\n@@ -840,22 +840,22 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         with app.test_request_context():\n             rv = flask.make_response(\n                 flask.jsonify({'msg': 'W00t'}), 400)\n-            self.assertEqual(rv.status_code, 400)\n-            self.assertEqual(rv.data, b'{\\n  \"msg\": \"W00t\"\\n}')\n-            self.assertEqual(rv.mimetype, 'application/json')\n+            self.assert_equal(rv.status_code, 400)\n+            self.assert_equal(rv.data, b'{\\n  \"msg\": \"W00t\"\\n}')\n+            self.assert_equal(rv.mimetype, 'application/json')\n \n             rv = flask.make_response(\n                 flask.Response(''), 400)\n-            self.assertEqual(rv.status_code, 400)\n-            self.assertEqual(rv.data, b'')\n-            self.assertEqual(rv.mimetype, 'text/html')\n+            self.assert_equal(rv.status_code, 400)\n+            self.assert_equal(rv.data, b'')\n+            self.assert_equal(rv.mimetype, 'text/html')\n \n             rv = flask.make_response(\n                 flask.Response('', headers={'Content-Type': 'text/html'}),\n                 400, [('X-Foo', 'bar')])\n-            self.assertEqual(rv.status_code, 400)\n-            self.assertEqual(rv.headers['Content-Type'], 'text/html')\n-            self.assertEqual(rv.headers['X-Foo'], 'bar')\n+            self.assert_equal(rv.status_code, 400)\n+            self.assert_equal(rv.headers['Content-Type'], 'text/html')\n+            self.assert_equal(rv.headers['X-Foo'], 'bar')\n \n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n@@ -872,7 +872,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         # Test base case, a URL which results in a BuildError.\n         with app.test_request_context():\n-            self.assertRaises(BuildError, flask.url_for, 'spam')\n+            self.assert_raises(BuildError, flask.url_for, 'spam')\n \n         # Verify the error is re-raised if not the current exception.\n         try:\n@@ -883,7 +883,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             raise RuntimeError('Test case where BuildError is not current.')\n         except RuntimeError:\n-            self.assertRaises(BuildError, app.handle_url_build_error, error, 'spam', {})\n+            self.assert_raises(BuildError, app.handle_url_build_error, error, 'spam', {})\n \n         # Test a custom handler.\n         def handler(error, endpoint, values):\n@@ -936,7 +936,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_request_locals(self):\n         self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n-        self.assertFalse(flask.g)\n+        self.assert_false(flask.g)\n \n     def test_test_app_proper_environ(self):\n         app = flask.Flask(__name__)\n@@ -1205,9 +1205,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             assert flask.url_for('123') == '/bar/123'\n \n         c = app.test_client()\n-        self.assertEqual(c.get('/foo/').data, b'foo')\n-        self.assertEqual(c.get('/bar/').data, b'bar')\n-        self.assertEqual(c.get('/bar/123').data, b'123')\n+        self.assert_equal(c.get('/foo/').data, b'foo')\n+        self.assert_equal(c.get('/bar/').data, b'bar')\n+        self.assert_equal(c.get('/bar/123').data, b'123')\n \n     def test_preserve_only_once(self):\n         app = flask.Flask(__name__)\n@@ -1286,7 +1286,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(sorted(flask.g), ['bar', 'foo'])\n \n \n-class SubdomainTestCase(FlaskTestCase):\n+class TestSubdomain(TestFlask):\n \n     def test_basic_support(self):\n         app = flask.Flask(__name__)\n@@ -1355,10 +1355,3 @@ class SubdomainTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, b'a')\n         rv = app.test_client().open('/b/')\n         self.assert_equal(rv.data, b'b')\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n-    suite.addTest(unittest.makeSuite(SubdomainTestCase))\n-    return suite\n\n@@ -11,13 +11,13 @@\n \n import flask\n import unittest\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from flask._compat import text_type\n from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n \n \n-class BlueprintTestCase(FlaskTestCase):\n+class TestBlueprint(TestFlask):\n \n     def test_blueprint_specific_error_handling(self):\n         frontend = flask.Blueprint('frontend', __name__)\n@@ -303,11 +303,11 @@ class BlueprintTestCase(FlaskTestCase):\n             return flask.request.endpoint\n \n         c = app.test_client()\n-        self.assertEqual(c.get('/').data, b'index')\n-        self.assertEqual(c.get('/py/foo').data, b'bp.foo')\n-        self.assertEqual(c.get('/py/bar').data, b'bp.bar')\n-        self.assertEqual(c.get('/py/bar/123').data, b'bp.123')\n-        self.assertEqual(c.get('/py/bar/foo').data, b'bp.bar_foo')\n+        self.assert_equal(c.get('/').data, b'index')\n+        self.assert_equal(c.get('/py/foo').data, b'bp.foo')\n+        self.assert_equal(c.get('/py/bar').data, b'bp.bar')\n+        self.assert_equal(c.get('/py/bar/123').data, b'bp.123')\n+        self.assert_equal(c.get('/py/bar/foo').data, b'bp.bar_foo')\n \n     def test_route_decorator_custom_endpoint_with_dots(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -337,14 +337,14 @@ class BlueprintTestCase(FlaskTestCase):\n         def foo_foo_foo():\n             pass\n \n-        self.assertRaises(\n+        self.assert_raises(\n             AssertionError,\n             lambda: bp.add_url_rule(\n                 '/bar/123', endpoint='bar.123', view_func=foo_foo_foo\n             )\n         )\n \n-        self.assertRaises(\n+        self.assert_raises(\n             AssertionError,\n             bp.route('/bar/123', endpoint='bar.123'),\n             lambda: None\n@@ -354,7 +354,7 @@ class BlueprintTestCase(FlaskTestCase):\n         app.register_blueprint(bp, url_prefix='/py')\n \n         c = app.test_client()\n-        self.assertEqual(c.get('/py/foo').data, b'bp.foo')\n+        self.assert_equal(c.get('/py/foo').data, b'bp.foo')\n         # The rule's didn't actually made it through\n         rv = c.get('/py/bar')\n         assert rv.status_code == 404\n@@ -581,5 +581,5 @@ class BlueprintTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(BlueprintTestCase))\n+    suite.addTest(unittest.makeSuite(TestBlueprint))\n     return suite\n\n@@ -15,21 +15,21 @@ import flask\n import pkgutil\n import unittest\n from contextlib import contextmanager\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from flask._compat import PY2\n \n \n-# config keys used for the ConfigTestCase\n+# config keys used for the TestConfig\n TEST_KEY = 'foo'\n SECRET_KEY = 'devkey'\n \n \n-class ConfigTestCase(FlaskTestCase):\n+class TestConfig(TestFlask):\n \n     def common_object_test(self, app):\n         self.assert_equal(app.secret_key, 'devkey')\n         self.assert_equal(app.config['TEST_KEY'], 'foo')\n-        self.assert_not_in('ConfigTestCase', app.config)\n+        self.assert_not_in('TestConfig', app.config)\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n@@ -117,7 +117,7 @@ class ConfigTestCase(FlaskTestCase):\n                 self.assert_true(msg.endswith(\"missing.cfg'\"))\n             else:\n                 self.fail('expected IOError')\n-            self.assertFalse(app.config.from_envvar('FOO_SETTINGS', silent=True))\n+            self.assert_false(app.config.from_envvar('FOO_SETTINGS', silent=True))\n         finally:\n             os.environ = env\n \n@@ -207,7 +207,7 @@ def patch_pkgutil_get_loader(wrapper_class=LimitedLoaderMockWrapper):\n         pkgutil.get_loader = old_get_loader\n \n \n-class InstanceTestCase(FlaskTestCase):\n+class TestInstance(TestFlask):\n \n     def test_explicit_instance_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n@@ -379,6 +379,6 @@ class InstanceTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ConfigTestCase))\n-    suite.addTest(unittest.makeSuite(InstanceTestCase))\n+    suite.addTest(unittest.makeSuite(TestConfig))\n+    suite.addTest(unittest.makeSuite(TestInstance))\n     return suite\n\n@@ -11,14 +11,14 @@\n \n import flask\n import unittest\n-from tests import FlaskTestCase, catch_warnings\n+from tests import TestFlask, catch_warnings\n \n \n-class DeprecationsTestCase(FlaskTestCase):\n+class TestDeprecations(TestFlask):\n     \"\"\"not used currently\"\"\"\n \n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(DeprecationsTestCase))\n+    suite.addTest(unittest.makeSuite(TestDeprecations))\n     return suite\n\n@@ -24,15 +24,15 @@ def suite():\n     setup_path()\n     suite = unittest.TestSuite()\n     try:\n-        from minitwit_tests import MiniTwitTestCase\n+        from minitwit_tests import TestMiniTwit\n     except ImportError:\n         pass\n     else:\n-        suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n+        suite.addTest(unittest.makeSuite(TestMiniTwit))\n     try:\n-        from flaskr_tests import FlaskrTestCase\n+        from flaskr_tests import TestFlaskr\n     except ImportError:\n         pass\n     else:\n-        suite.addTest(unittest.makeSuite(FlaskrTestCase))\n+        suite.addTest(unittest.makeSuite(TestFlaskr))\n     return suite\n\n@@ -15,10 +15,10 @@ try:\n     from imp import reload as reload_module\n except ImportError:\n     reload_module = reload\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from flask._compat import PY2\n \n-class ExtImportHookTestCase(FlaskTestCase):\n+class TestExtImportHook(TestFlask):\n \n     def setup(self):\n         # we clear this out for various reasons.  The most important one is\n@@ -132,5 +132,5 @@ class ExtImportHookTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ExtImportHookTestCase))\n+    suite.addTest(unittest.makeSuite(TestExtImportHook))\n     return suite\n\n@@ -13,7 +13,7 @@ import os\n import flask\n import unittest\n from logging import StreamHandler\n-from tests import FlaskTestCase, catch_warnings, catch_stderr\n+from tests import TestFlask, catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from flask._compat import StringIO, text_type\n \n@@ -27,7 +27,7 @@ def has_encoding(name):\n         return False\n \n \n-class JSONTestCase(FlaskTestCase):\n+class TestJSON(TestFlask):\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n@@ -148,7 +148,7 @@ class JSONTestCase(FlaskTestCase):\n         rv = c.post('/', data=flask.json.dumps({\n             'x': {'_foo': 42}\n         }), content_type='application/json')\n-        self.assertEqual(rv.data, b'\"<42>\"')\n+        self.assert_equal(rv.data, b'\"<42>\"')\n \n     def test_modified_url_encoding(self):\n         class ModifiedRequest(flask.Request):\n@@ -240,7 +240,7 @@ class JSONTestCase(FlaskTestCase):\n         except AssertionError:\n             self.assert_equal(lines, sorted_by_str)\n \n-class SendfileTestCase(FlaskTestCase):\n+class TestSendfile(TestFlask):\n \n     def test_send_file_regular(self):\n         app = flask.Flask(__name__)\n@@ -422,7 +422,7 @@ class SendfileTestCase(FlaskTestCase):\n             rv.close()\n \n \n-class LoggingTestCase(FlaskTestCase):\n+class TestLogging(TestFlask):\n \n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n@@ -450,7 +450,7 @@ class LoggingTestCase(FlaskTestCase):\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n-                self.assert_in('WARNING in helpers [', out)\n+                self.assert_in('WARNING in test_helpers [', out)\n                 self.assert_in(os.path.basename(__file__.rsplit('.', 1)[0] + '.py'), out)\n                 self.assert_in('the standard library is dead', out)\n                 self.assert_in('this is a debug statement', out)\n@@ -572,7 +572,7 @@ class LoggingTestCase(FlaskTestCase):\n                               '/myview/create')\n \n \n-class NoImportsTestCase(FlaskTestCase):\n+class TestNoImports(TestFlask):\n     \"\"\"Test Flasks are created without import.\n \n     Avoiding ``__import__`` helps create Flask instances where there are errors\n@@ -590,7 +590,7 @@ class NoImportsTestCase(FlaskTestCase):\n             self.fail('Flask(import_name) is importing import_name.')\n \n \n-class StreamingTestCase(FlaskTestCase):\n+class TestStreaming(TestFlask):\n \n     def test_streaming_with_context(self):\n         app = flask.Flask(__name__)\n@@ -604,7 +604,7 @@ class StreamingTestCase(FlaskTestCase):\n             return flask.Response(flask.stream_with_context(generate()))\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assertEqual(rv.data, b'Hello World!')\n+        self.assert_equal(rv.data, b'Hello World!')\n \n     def test_streaming_with_context_as_decorator(self):\n         app = flask.Flask(__name__)\n@@ -619,7 +619,7 @@ class StreamingTestCase(FlaskTestCase):\n             return flask.Response(generate())\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assertEqual(rv.data, b'Hello World!')\n+        self.assert_equal(rv.data, b'Hello World!')\n \n     def test_streaming_with_context_and_custom_close(self):\n         app = flask.Flask(__name__)\n@@ -645,16 +645,16 @@ class StreamingTestCase(FlaskTestCase):\n                 Wrapper(generate())))\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assertEqual(rv.data, b'Hello World!')\n-        self.assertEqual(called, [42])\n+        self.assert_equal(rv.data, b'Hello World!')\n+        self.assert_equal(called, [42])\n \n \n def suite():\n     suite = unittest.TestSuite()\n     if flask.json_available:\n-        suite.addTest(unittest.makeSuite(JSONTestCase))\n-    suite.addTest(unittest.makeSuite(SendfileTestCase))\n-    suite.addTest(unittest.makeSuite(LoggingTestCase))\n-    suite.addTest(unittest.makeSuite(NoImportsTestCase))\n-    suite.addTest(unittest.makeSuite(StreamingTestCase))\n+        suite.addTest(unittest.makeSuite(TestJSON))\n+    suite.addTest(unittest.makeSuite(TestSendfile))\n+    suite.addTest(unittest.makeSuite(TestLogging))\n+    suite.addTest(unittest.makeSuite(TestNoImports))\n+    suite.addTest(unittest.makeSuite(TestStreaming))\n     return suite\n\n@@ -9,14 +9,15 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import os\n import gc\n import sys\n import flask\n import threading\n-import unittest\n from werkzeug.exceptions import NotFound\n-from tests import FlaskTestCase\n+from tests import TestFlask\n \n \n _gc_lock = threading.Lock()\n@@ -51,13 +52,16 @@ class _NoLeakAsserter(object):\n         gc.enable()\n \n \n-class MemoryTestCase(FlaskTestCase):\n+@pytest.mark.skipif(os.environ.get('RUN_FLASK_MEMORY_TESTS') != '1',\n+                    reason='Turned off due to envvar.')\n+class TestMemory(TestFlask):\n \n     def assert_no_leak(self):\n         return _NoLeakAsserter(self)\n \n     def test_memory_consumption(self):\n         app = flask.Flask(__name__)\n+\n         @app.route('/')\n         def index():\n             return flask.render_template('simple_template.html', whiskey=42)\n@@ -84,33 +88,28 @@ class MemoryTestCase(FlaskTestCase):\n             safe_join('/foo', '..')\n \n \n-class ExceptionTestCase(FlaskTestCase):\n+class TestException(TestFlask):\n \n     def test_aborting(self):\n         class Foo(Exception):\n             whatever = 42\n         app = flask.Flask(__name__)\n         app.testing = True\n+\n         @app.errorhandler(Foo)\n         def handle_foo(e):\n             return str(e.whatever)\n+\n         @app.route('/')\n         def index():\n             raise flask.abort(flask.redirect(flask.url_for('test')))\n+\n         @app.route('/test')\n         def test():\n             raise Foo()\n \n         with app.test_client() as c:\n             rv = c.get('/')\n-            self.assertEqual(rv.headers['Location'], 'http://localhost/test')\n+            self.assert_equal(rv.headers['Location'], 'http://localhost/test')\n             rv = c.get('/test')\n-            self.assertEqual(rv.data, b'42')\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    if os.environ.get('RUN_FLASK_MEMORY_TESTS') == '1':\n-        suite.addTest(unittest.makeSuite(MemoryTestCase))\n-    suite.addTest(unittest.makeSuite(ExceptionTestCase))\n-    return suite\n+            self.assert_equal(rv.data, b'42')\n\n@@ -15,10 +15,10 @@ try:\n     from greenlet import greenlet\n except ImportError:\n     greenlet = None\n-from tests import FlaskTestCase\n+from tests import TestFlask\n \n \n-class RequestContextTestCase(FlaskTestCase):\n+class TestRequestContext(TestFlask):\n \n     def test_teardown_on_pop(self):\n         buffer = []\n@@ -197,5 +197,5 @@ class RequestContextTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(RequestContextTestCase))\n+    suite.addTest(unittest.makeSuite(TestRequestContext))\n     return suite\n\n@@ -11,10 +11,10 @@\n \n import flask\n import unittest\n-from tests import FlaskTestCase\n+from tests import TestFlask\n \n \n-class SignalsTestCase(FlaskTestCase):\n+class TestSignals(TestFlask):\n \n     def test_template_rendered(self):\n         app = flask.Flask(__name__)\n@@ -149,5 +149,5 @@ class SignalsTestCase(FlaskTestCase):\n def suite():\n     suite = unittest.TestSuite()\n     if flask.signals_available:\n-        suite.addTest(unittest.makeSuite(SignalsTestCase))\n+        suite.addTest(unittest.makeSuite(TestSignals))\n     return suite\n\n@@ -12,11 +12,11 @@\n import flask\n import unittest\n from logging import StreamHandler\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from flask._compat import StringIO\n \n \n-class FlaskSubclassingTestCase(FlaskTestCase):\n+class TestFlaskSubclassing(TestFlask):\n \n     def test_suppressed_exception_logging(self):\n         class SuppressedFlask(flask.Flask):\n@@ -42,5 +42,5 @@ class FlaskSubclassingTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(FlaskSubclassingTestCase))\n+    suite.addTest(unittest.makeSuite(TestFlaskSubclassing))\n     return suite\n\n@@ -14,10 +14,10 @@ import unittest\n import logging\n from jinja2 import TemplateNotFound\n \n-from tests import FlaskTestCase\n+from tests import TestFlask\n \n \n-class TemplatingTestCase(FlaskTestCase):\n+class TestTemplating(TestFlask):\n \n     def test_context_processing(self):\n         app = flask.Flask(__name__)\n@@ -348,5 +348,5 @@ class TemplatingTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TemplatingTestCase))\n+    suite.addTest(unittest.makeSuite(TestTemplating))\n     return suite\n\n@@ -8,14 +8,15 @@\n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import pytest\n \n import flask\n import unittest\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from flask._compat import text_type\n \n \n-class TestToolsTestCase(FlaskTestCase):\n+class TestTestTools(TestFlask):\n \n     def test_environ_defaults_from_config(self):\n         app = flask.Flask(__name__)\n@@ -212,46 +213,45 @@ class TestToolsTestCase(FlaskTestCase):\n             self.assert_true('vodka' in flask.request.args)\n \n \n-class SubdomainTestCase(FlaskTestCase):\n+class TestSubdomain(TestFlask):\n \n-    def setUp(self):\n-        self.app = flask.Flask(__name__)\n-        self.app.config['SERVER_NAME'] = 'example.com'\n-        self.client = self.app.test_client()\n+    @pytest.fixture\n+    def app(self, request):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'example.com'\n \n-        self._ctx = self.app.test_request_context()\n-        self._ctx.push()\n+        ctx = app.test_request_context()\n+        ctx.push()\n \n-    def tearDown(self):\n-        if self._ctx is not None:\n-            self._ctx.pop()\n+        def teardown():\n+            if ctx is not None:\n+                ctx.pop()\n+        request.addfinalizer(teardown)\n+        return app\n \n-    def test_subdomain(self):\n-        @self.app.route('/', subdomain='<company_id>')\n+    @pytest.fixture\n+    def client(self, app):\n+        return app.test_client()\n+\n+    def test_subdomain(self, app, client):\n+        @app.route('/', subdomain='<company_id>')\n         def view(company_id):\n             return company_id\n \n         url = flask.url_for('view', company_id='xxx')\n-        response = self.client.get(url)\n+        response = client.get(url)\n \n         self.assert_equal(200, response.status_code)\n         self.assert_equal(b'xxx', response.data)\n \n \n-    def test_nosubdomain(self):\n-        @self.app.route('/<company_id>')\n+    def test_nosubdomain(self, app, client):\n+        @app.route('/<company_id>')\n         def view(company_id):\n             return company_id\n \n         url = flask.url_for('view', company_id='xxx')\n-        response = self.client.get(url)\n+        response = client.get(url)\n \n         self.assert_equal(200, response.status_code)\n         self.assert_equal(b'xxx', response.data)\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestToolsTestCase))\n-    suite.addTest(unittest.makeSuite(SubdomainTestCase))\n-    return suite\n\n@@ -12,10 +12,10 @@\n import flask\n import flask.views\n import unittest\n-from tests import FlaskTestCase\n+from tests import TestFlask\n from werkzeug.http import parse_set_header\n \n-class ViewTestCase(FlaskTestCase):\n+class TestView(TestFlask):\n \n     def common_test(self, app):\n         c = app.test_client()\n@@ -165,5 +165,5 @@ class ViewTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ViewTestCase))\n+    suite.addTest(unittest.makeSuite(TestView))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
