{"custom_id": "requests#cfd38263d1a8b3c6754c261a93d842fd5090deb8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 3478 | Contributors (this commit): 16 | Commits (past 90d): 61 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ This module impliments the Requests API.\n \n \"\"\"\n \n-import config\n+from . import config\n from .models import Request, Response, AuthObject\n from .status_codes import codes\n from .hooks import dispatch_hook\n\n@@ -19,11 +19,13 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n-from models import HTTPError, Request, Response\n-from api import *\n-from exceptions import *\n-from sessions import session\n-from status_codes import codes\n-from config import settings\n-\n-import utils\n+from . import utils\n+from .models import HTTPError, Request, Response\n+from .api import request, get, head, post, patch, put, delete\n+from .sessions import session\n+from .status_codes import codes\n+from .config import settings\n+from .exceptions import (\n+    RequestException, AuthenticationError, Timeout, URLRequired,\n+    InvalidMethod, TooManyRedirects\n+)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6dc664caaf507dccb2e499e4ab02a451ef7a148c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 33 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 62 | Churn Cumulative: 2888 | Contributors (this commit): 8 | Commits (past 90d): 23 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,31 @@\n # -*- coding: utf-8 -*-\n \n-from core import *\n-from core import __version__\n+\"\"\"\n+requests.core\n+~~~~~~~~~~~~~\n+\n+This module implements the main Requests system.\n+\n+:copyright: (c) 2011 by Kenneth Reitz.\n+:license: ISC, see LICENSE for more details.\n+\n+\"\"\"\n+\n+__title__ = 'requests'\n+__version__ = '0.6.6'\n+__build__ = 0x000606\n+__author__ = 'Kenneth Reitz'\n+__license__ = 'ISC'\n+__copyright__ = 'Copyright 2011 Kenneth Reitz'\n+\n+\n+from . import utils\n+from .models import HTTPError, Request, Response\n+from .api import request, get, head, post, patch, put, delete\n+from .sessions import session\n+from .status_codes import codes\n+from .config import settings\n+from .exceptions import (\n+    RequestException, AuthenticationError, Timeout, URLRequired,\n+    InvalidMethod, TooManyRedirects\n+)\n\n@@ -1,31 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.core\n-~~~~~~~~~~~~~\n-\n-This module implements the main Requests system.\n-\n-:copyright: (c) 2011 by Kenneth Reitz.\n-:license: ISC, see LICENSE for more details.\n-\n-\"\"\"\n-\n-__title__ = 'requests'\n-__version__ = '0.6.6'\n-__build__ = 0x000606\n-__author__ = 'Kenneth Reitz'\n-__license__ = 'ISC'\n-__copyright__ = 'Copyright 2011 Kenneth Reitz'\n-\n-\n-from . import utils\n-from .models import HTTPError, Request, Response\n-from .api import request, get, head, post, patch, put, delete\n-from .sessions import session\n-from .status_codes import codes\n-from .config import settings\n-from .exceptions import (\n-    RequestException, AuthenticationError, Timeout, URLRequired,\n-    InvalidMethod, TooManyRedirects\n-)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0e9d7aad2706d12d9fa27d90dfbdfc58d2adbf1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 158 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,13 @@\n # -*- coding: utf-8 -*-\n \n-\"\"\"\n-requests.core\n-~~~~~~~~~~~~~\n+#   __\n+#  /__)  _  _     _   _ _/   _\n+# / (   (- (/ (/ (- _)  /  _)\n+#          /\n \n-This module implements the main Requests system.\n+\"\"\"\n+requests\n+~~~~~~~~\n \n :copyright: (c) 2011 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f984b0fe66c0d47a9c34dbec1d035c1ac2ed897", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 108 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -56,6 +56,9 @@ _codes = {\n     424: ('failed_depdendency', 'depdendency'),\n     425: ('unordered_collection', 'unordered'),\n     426: ('upgrade_required', 'upgrade'),\n+    428: ('precondition_required', 'precondition'),\n+    429: ('too_many_requests', 'too_many'),\n+    431: ('header_fields_too_large', 'fields_too_large'),\n     444: ('no_response', 'none'),\n     449: ('retry_with', 'retry'),\n     450: ('blocked_by_windows_parental_controls', 'parental_controls'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#194ff1ad891388794ce2e5af12c8d4e36df3cea0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 770 | Contributors (this commit): 10 | Commits (past 90d): 41 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -146,7 +146,7 @@ def patch(url, data='', **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-    return request('patch', url, **kwargs)\n+    return request('patch', url,  data='', **kwargs)\n \n \n def delete(url, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dbf70fc40fd0d05133bf93d0d43d1267650ccf78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 211 | Contributors (this commit): 5 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -30,5 +30,5 @@ from .status_codes import codes\n from .config import settings\n from .exceptions import (\n     RequestException, AuthenticationError, Timeout, URLRequired,\n-    InvalidMethod, TooManyRedirects\n+    TooManyRedirects\n )\n\n@@ -19,8 +19,5 @@ class Timeout(RequestException):\n class URLRequired(RequestException):\n     \"\"\"A valid URL is required to make a request.\"\"\"\n \n-class InvalidMethod(RequestException):\n-    \"\"\"An inappropriate method was attempted.\"\"\"\n-\n class TooManyRedirects(RequestException):\n     \"\"\"Too many redirects.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77909f1d4999dcc988acdae043da406031dd5903", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 164 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.6'\n-__build__ = 0x000606\n+__version__ = '0.6.7'\n+__build__ = 0x000607\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d552e6c8847fb1a32880f1a2912af9b472f0f40d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1204 | Contributors (this commit): 15 | Commits (past 90d): 22 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,7 +17,6 @@ except ImportError:\n     import json\n \n \n-\n # TODO: Detect an open port.\n PORT = os.environ.get('HTTPBIN_PORT', '7077')\n \n@@ -47,8 +46,9 @@ class RequestsTestSuite(unittest.TestCase):\n \n         if not _httpbin:\n \n-            self.httpbin = envoy.connect('gunicorn httpbin:app --bind=0.0.0.0:%s' % (PORT))\n+            c = envoy.connect('gunicorn httpbin:app --bind=0.0.0.0:%s' % (PORT))\n \n+            self.httpbin = c\n             _httpbin = True\n             time.sleep(1)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d72d1162142d1bf8b1b5711c664fbbd674f349d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 90 | Lines Deleted: 101 | Files Changed: 2 | Hunks: 20 | Methods Changed: 9 | Complexity Δ (Sum/Max): -3/4 | Churn Δ: 191 | Churn Cumulative: 1333 | Contributors (this commit): 11 | Commits (past 90d): 67 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,84 +16,24 @@ from .models import Request, Response, AuthObject\n from .status_codes import codes\n from .hooks import dispatch_hook\n from .utils import cookiejar_from_dict, header_expand\n-\n+from .sessions import session\n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n+\n def request(method, url,\n     params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n     timeout=None, allow_redirects=False, proxies=None, hooks=None, return_response=True):\n \n-    \"\"\"Constructs and sends a :class:`Request <Request>`.\n-    Returns :class:`Response <Response>` object.\n-\n-    :param method: method for the new :class:`Request` object.\n-    :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n-    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n-    :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n-    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n-    :param return_response: (optional) If False, an un-sent Request object will returned.\n-    \"\"\"\n-\n-    method = str(method).upper()\n-\n-    if cookies is None:\n-        cookies = {}\n-\n-    cookies = cookiejar_from_dict(cookies)\n-\n-    # Expand header values\n-    if headers:\n-        for k, v in headers.items() or {}:\n-            headers[k] = header_expand(v)\n-\n-    args = dict(\n-        method = method,\n-        url = url,\n-        data = data,\n-        params = params,\n-        headers = headers,\n-        cookiejar = cookies,\n-        files = files,\n-        auth = auth,\n-        hooks = hooks,\n-        timeout = timeout or config.settings.timeout,\n-        allow_redirects = allow_redirects,\n-        proxies = proxies or config.settings.proxies,\n+    s = session()\n+    return s.request(\n+        method, url, params, data, headers, cookies, files, auth,\n+        timeout, allow_redirects, proxies, hooks, return_response\n     )\n \n-    # Arguments manipulation hook.\n-    args = dispatch_hook('args', hooks, args)\n-\n-    r = Request(**args)\n-\n-    # Pre-request hook.\n-    r = dispatch_hook('pre_request', hooks, r)\n-\n-    # Don't send if asked nicely.\n-    if not return_response:\n-        return r\n-\n-    # Send the HTTP Request.\n-    r.send()\n-\n-    # Post-request hook.\n-    r = dispatch_hook('post_request', hooks, r)\n-\n-    # Response manipulation hook.\n-    r.response = dispatch_hook('response', hooks, r.response)\n-\n-    return r.response\n \n \n def get(url, **kwargs):\n-\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n\n@@ -11,9 +11,10 @@ requests (cookies, auth, proxies).\n \n import cookielib\n \n-from . import api\n-from .utils import add_dict_to_cookiejar\n-\n+from . import config\n+from .models import Request\n+from .hooks import dispatch_hook\n+from .utils import add_dict_to_cookiejar, cookiejar_from_dict, header_expand\n \n \n def merge_kwargs(local_kwarg, default_kwarg):\n@@ -25,6 +26,9 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if default_kwarg is None:\n         return local_kwarg\n \n+    if isinstance(local_kwarg, basestring):\n+        return local_kwarg\n+\n     if local_kwarg is None:\n         return default_kwarg\n \n@@ -32,8 +36,6 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if not hasattr(default_kwarg, 'items'):\n         return local_kwarg\n \n-\n-\n     # Update new values.\n     kwargs = default_kwarg.copy()\n     kwargs.update(local_kwarg)\n@@ -73,7 +75,7 @@ class Session(object):\n         self.cookies = cookielib.FileCookieJar()\n \n         # Map and wrap requests.api methods\n-        self._map_api_methods()\n+        # self._map_api_methods()\n \n \n     def __repr__(self):\n@@ -85,48 +87,95 @@ class Session(object):\n     def __exit__(self, *args):\n         pass\n \n-    def _map_api_methods(self):\n-        \"\"\"Reads each available method from requests.api and decorates\n-        them with a wrapper, which inserts any instance-local attributes\n-        (from __attrs__) that have been set, combining them with **kwargs.\n+    def request(self, method, url,\n+        params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n+        timeout=None, allow_redirects=False, proxies=None, hooks=None, return_response=True):\n+\n+        \"\"\"Constructs and sends a :class:`Request <Request>`.\n+        Returns :class:`Response <Response>` object.\n+\n+        :param method: method for the new :class:`Request` object.\n+        :param url: URL for the new :class:`Request` object.\n+        :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n+        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n+        :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n+        :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n+        :param timeout: (optional) Float describing the timeout of the request.\n+        :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n+        :param return_response: (optional) If False, an un-sent Request object will returned.\n         \"\"\"\n \n-        def pass_args(func):\n-            def wrapper_func(*args, **kwargs):\n+        method = str(method).upper()\n \n-                # Argument collector.\n-                _kwargs = {}\n+        if cookies is None:\n+            cookies = {}\n \n-                # If a session request has a cookie_dict, inject the\n-                # values into the existing CookieJar instead.\n-                if isinstance(kwargs.get('cookies', None), dict):\n-                    kwargs['cookies'] = add_dict_to_cookiejar(\n-                        self.cookies, kwargs['cookies']\n+        if isinstance(cookies, dict):\n+            cookies = add_dict_to_cookiejar(self.cookies, cookies)\n+\n+        cookies = cookiejar_from_dict(cookies)\n+\n+        # Expand header values\n+        if headers:\n+            for k, v in headers.items() or {}:\n+                headers[k] = header_expand(v)\n+\n+        args = dict(\n+            method = method,\n+            url = url,\n+            data = data,\n+            params = params,\n+            headers = headers,\n+            cookies = cookies,\n+            files = files,\n+            auth = auth,\n+            hooks = hooks,\n+            timeout = timeout or config.settings.timeout,\n+            allow_redirects = allow_redirects,\n+            proxies = proxies or config.settings.proxies,\n         )\n \n         for attr in self.__attrs__:\n-                # for attr in ['headers',]:\n-                    s_val = self.__dict__.get(attr)\n-                    r_val = kwargs.get(attr)\n+            session_val = getattr(self, attr, None)\n+            local_val = args.get(attr)\n \n-                    new_attr = merge_kwargs(r_val, s_val)\n+            args[attr] = merge_kwargs(local_val, session_val)\n \n-                    # Skip attributes that were set to None.\n-                    if new_attr is not None:\n-                        _kwargs[attr] = new_attr\n+        # Arguments manipulation hook.\n+        args = dispatch_hook('args', hooks, args)\n \n-                # Make sure we didn't miss anything.\n-                for (k, v) in kwargs.items():\n-                    if k not in _kwargs:\n-                        _kwargs[k] = v\n+        r = Request(**args)\n \n-                return func(*args, **_kwargs)\n+        # Pre-request hook.\n+        r = dispatch_hook('pre_request', hooks, r)\n \n-            return wrapper_func\n+        # Don't send if asked nicely.\n+        if not return_response:\n+            return r\n \n-        # Map and decorate each function available in requests.api\n-        map(lambda fn: setattr(self, fn, pass_args(getattr(api, fn))),\n-                api.__all__)\n+        # Send the HTTP Request.\n+        r.send()\n+\n+        # Post-request hook.\n+        r = dispatch_hook('post_request', hooks, r)\n+\n+        # Response manipulation hook.\n+        r.response = dispatch_hook('response', hooks, r.response)\n+\n+        return r.response\n+\n+    def get(self, url, **kwargs):\n+        \"\"\"Sends a GET request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        kwargs.setdefault('allow_redirects', True)\n+        return self.request('GET', url, **kwargs)\n \n \n def session(**kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f269c6c89a1cf0b6368f58a6c2cc4d095d1f5239", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 2875 | Contributors (this commit): 20 | Commits (past 90d): 114 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -24,7 +24,7 @@ from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n from .utils import dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n from .status_codes import codes\n-from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod, TooManyRedirects\n+from .exceptions import Timeout, URLRequired, TooManyRedirects\n \n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n@@ -38,7 +38,7 @@ class Request(object):\n \n     def __init__(self,\n         url=None, headers=dict(), files=None, method=None, data=dict(),\n-        params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n+        params=dict(), auth=None, cookies=None, timeout=None, redirect=False,\n         allow_redirects=False, proxies=None, hooks=None):\n \n         #: Float describes the timeout of the request.\n@@ -91,7 +91,7 @@ class Request(object):\n         self.auth = auth\n \n         #: CookieJar to attach to :class:`Request <Request>`.\n-        self.cookiejar = cookiejar\n+        self.cookies = cookies\n \n         #: True if Request has been sent.\n         self.sent = False\n@@ -132,8 +132,8 @@ class Request(object):\n \n         _handlers = []\n \n-        if self.cookiejar is not None:\n-            _handlers.append(urllib2.HTTPCookieProcessor(self.cookiejar))\n+        if self.cookies is not None:\n+            _handlers.append(urllib2.HTTPCookieProcessor(self.cookies))\n \n         if self.auth:\n             if not isinstance(self.auth.handler,\n@@ -191,8 +191,8 @@ class Request(object):\n                 response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n                 response.raw = resp\n \n-                if self.cookiejar:\n-                    response.cookies = dict_from_cookiejar(self.cookiejar)\n+                if self.cookies:\n+                    response.cookies = dict_from_cookiejar(self.cookies)\n \n \n             except AttributeError:\n@@ -244,7 +244,7 @@ class Request(object):\n \n                 request = Request(\n                     url, self.headers, self.files, method,\n-                    self.data, self.params, self.auth, self.cookiejar,\n+                    self.data, self.params, self.auth, self.cookies,\n                     redirect=True\n                 )\n                 request.send()\n@@ -364,8 +364,8 @@ class Request(object):\n                         # restore global timeout\n                         socket.setdefaulttimeout(old_timeout)\n \n-                if self.cookiejar is not None:\n-                    self.cookiejar.extract_cookies(resp, req)\n+                if self.cookies is not None:\n+                    self.cookies.extract_cookies(resp, req)\n \n             except (urllib2.HTTPError, urllib2.URLError), why:\n                 if hasattr(why, 'reason'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#597ace5718eb116819966213e8772458a9141c29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 848 | Contributors (this commit): 10 | Commits (past 90d): 43 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -11,11 +11,6 @@ This module implements the Requests API.\n \n \"\"\"\n \n-from . import config\n-from .models import Request, Response, AuthObject\n-from .status_codes import codes\n-from .hooks import dispatch_hook\n-from .utils import cookiejar_from_dict, header_expand\n from .sessions import session\n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n@@ -40,7 +35,6 @@ def get(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-\n     kwargs.setdefault('allow_redirects', True)\n     return request('GET', url, **kwargs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b3bd78685f9d30bf29e090b58f5aa1a3b799cdf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 56 | Churn Cumulative: 547 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -167,6 +167,7 @@ class Session(object):\n \n         return r.response\n \n+\n     def get(self, url, **kwargs):\n         \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n@@ -178,6 +179,61 @@ class Session(object):\n         return self.request('GET', url, **kwargs)\n \n \n+    def head(self, url, **kwargs):\n+        \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        kwargs.setdefault('allow_redirects', True)\n+        return self.request('HEAD', url, **kwargs)\n+\n+\n+    def post(self, url, data='', **kwargs):\n+        \"\"\"Sends a POST request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        return self.request('post', url, data=data, **kwargs)\n+\n+\n+    def put(self, url, data='', **kwargs):\n+        \"\"\"Sends a PUT request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        return self.request('put', url, data=data, **kwargs)\n+\n+\n+    def patch(url, data='', **kwargs):\n+        \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        return self.request('patch', url,  data='', **kwargs)\n+\n+\n+    def delete(self, url, **kwargs):\n+        \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        return self.request('delete', url, **kwargs)\n+\n+\n+\n def session(**kwargs):\n     \"\"\"Returns a :class:`Session` for context-management.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#98dc08236c51483130dfa59e1f74a01b31106a46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 549 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -212,7 +212,7 @@ class Session(object):\n         return self.request('put', url, data=data, **kwargs)\n \n \n-    def patch(url, data='', **kwargs):\n+    def patch(self, url, data='', **kwargs):\n         \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3d29f6535fb409e52369c8a6dfe8b76b5bb2bdc6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 553 | Contributors (this commit): 3 | Commits (past 90d): 28 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -74,10 +74,6 @@ class Session(object):\n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n \n-        # Map and wrap requests.api methods\n-        # self._map_api_methods()\n-\n-\n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e007a5a13f3234db499a83a10fa891125d77a3ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 55 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -2,7 +2,9 @@\n \n \"\"\"\n requests.exceptions\n-~~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~\n+\n+This module contains the set of Requests' exceptions.\n \n \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#185450c5e116d3d614fe5ca717477d4251ca025e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 1218 | Contributors (this commit): 15 | Commits (past 90d): 23 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -58,11 +58,23 @@ class RequestsTestSuite(unittest.TestCase):\n         \"\"\"Teardown.\"\"\"\n         # self.httpbin.kill()\n \n+    def test_entry_points(self):\n+        import requests\n+\n+        requests.session\n+        requests.session().get\n+        requests.session().head\n+        requests.get\n+        requests.head\n+        requests.put\n+        requests.patch\n+        requests.post\n+\n+\n \n     def test_invalid_url(self):\n         self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n \n-\n     def test_HTTP_200_OK_GET(self):\n         r = requests.get(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ab3200b4cc1fd2bec915a47aafa48a9d1a4774ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 0 | Churn Cumulative: 17 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4dc48b6521805515b9a3a7a06670d9f5984dd45c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 68 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 116 | Churn Cumulative: 133 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,68 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.config\n-~~~~~~~~~~~~~~~\n-\n-This module provides the Requests settings feature set.\n-\n-\"\"\"\n-\n-class Settings(object):\n-    _singleton = {}\n-\n-    # attributes with defaults\n-    __attrs__ = []\n-\n-    def __init__(self, **kwargs):\n-        super(Settings, self).__init__()\n-\n-        self.__dict__ = self._singleton\n-\n-\n-    def __call__(self, *args, **kwargs):\n-        # new instance of class to call\n-        r = self.__class__()\n-\n-        # cache previous settings for __exit__\n-        r.__cache = self.__dict__.copy()\n-        map(self.__cache.setdefault, self.__attrs__)\n-\n-        # set new settings\n-        self.__dict__.update(*args, **kwargs)\n-\n-        return r\n-\n-\n-    def __enter__(self):\n-        pass\n-\n-\n-    def __exit__(self, *args):\n-\n-        # restore cached copy\n-        self.__dict__.update(self.__cache.copy())\n-        del self.__cache\n-\n-\n-    def __getattribute__(self, key):\n-        if key in object.__getattribute__(self, '__attrs__'):\n-            try:\n-                return object.__getattribute__(self, key)\n-            except AttributeError:\n-                return None\n-        return object.__getattribute__(self, key)\n-\n-\n-settings = Settings()\n-\n-settings.base_headers = {'User-Agent': 'python-requests.org'}\n-settings.accept_gzip = True\n-settings.proxies = None\n-settings.verbose = None\n-settings.timeout = None\n-settings.max_redirects = 30\n-settings.decode_unicode = True\n-\n-#: Use socket.setdefaulttimeout() as fallback?\n-settings.timeout_fallback = True\n\n@@ -0,0 +1,48 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.defaults\n+~~~~~~~~~~~~~~~~~\n+\n+This module provides the Requests configuration defaults.\n+\n+settings parameters:\n+\n+- :base_headers: - Sets default User-Agent to `python-requests.org`\n+- :accept_gzip:  - Whether or not to accept gzip-compressed data\n+- :proxies: - http proxies?\n+- :verbose: - display verbose information?\n+- :timeout: - timeout time until request terminates\n+- :max_redirects: - maximum number of allowed redirects?\n+- :decode_unicode: - whether or not to accept unicode?\n+\n+\"\"\"\n+\n+from . import __version__\n+\n+defaults = dict()\n+\n+\n+defaults['base_headers'] = {\n+    'User-Agent': 'python-requests/{0}'.format(__version__),\n+    'Accept-Encoding': ', '.join([ 'identity', 'deflate', 'compress', 'gzip' ]),\n+}\n+\n+\n+# defaults['accept_gzip'] = True\n+defaults['proxies'] = {}\n+defaults['verbose'] = None\n+defaults['timeout'] = None\n+defaults['max_redirects'] = 30\n+defaults['decode_unicode'] = True\n+defaults['timeout_fallback'] = True\n+# defaults['keep_alive'] = True\n+# defaults['max_connections'] = 10\n+\n+\n+# defaults['hooks'] = {\n+#     'args': list(),\n+#     'pre_request': list(),\n+#     'post_request': list(),\n+#     'response': list()\n+# }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5c81fba1eba9187886bf98dbce395cd119f1ccfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 31 | Churn Cumulative: 584 | Contributors (this commit): 3 | Commits (past 90d): 29 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,7 +11,7 @@ requests (cookies, auth, proxies).\n \n import cookielib\n \n-from . import config\n+from .defaults import defaults\n from .models import Request\n from .hooks import dispatch_hook\n from .utils import add_dict_to_cookiejar, cookiejar_from_dict, header_expand\n@@ -51,7 +51,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n class Session(object):\n     \"\"\"A Requests session.\"\"\"\n \n-    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params']\n+    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params', 'config']\n \n \n     def __init__(self,\n@@ -61,7 +61,8 @@ class Session(object):\n         timeout=None,\n         proxies=None,\n         hooks=None,\n-        params=None):\n+        params=None,\n+        config=None):\n \n         self.headers = headers or {}\n         self.cookies = cookies or {}\n@@ -70,6 +71,10 @@ class Session(object):\n         self.proxies = proxies or {}\n         self.hooks = hooks or {}\n         self.params = params or {}\n+        self.config = config or {}\n+\n+        for (k, v) in defaults.items():\n+            self.config.setdefault(k, v)\n \n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n@@ -84,8 +89,18 @@ class Session(object):\n         pass\n \n     def request(self, method, url,\n-        params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-        timeout=None, allow_redirects=False, proxies=None, hooks=None, return_response=True):\n+        params=None,\n+        data=None,\n+        headers=None,\n+        cookies=None,\n+        files=None,\n+        auth=None,\n+        timeout=None,\n+        allow_redirects=False,\n+        proxies=None,\n+        hooks=None,\n+        return_response=True,\n+        config=None):\n \n         \"\"\"Constructs and sends a :class:`Request <Request>`.\n         Returns :class:`Response <Response>` object.\n@@ -102,6 +117,7 @@ class Session(object):\n         :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n+        :param config: (optional) A configuration dictionary.\n         \"\"\"\n \n         method = str(method).upper()\n@@ -129,9 +145,10 @@ class Session(object):\n             files=files,\n             auth=auth,\n             hooks=hooks,\n-            timeout = timeout or config.settings.timeout,\n+            timeout=timeout,\n             allow_redirects=allow_redirects,\n-            proxies = proxies or config.settings.proxies,\n+            proxies=proxies,\n+            config=config\n         )\n \n         for attr in self.__attrs__:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#903f96cc6a948cdb86a2d79c23f93d27a258c4ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 18 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 68 | Churn Cumulative: 2943 | Contributors (this commit): 20 | Commits (past 90d): 115 | Contributors (cumulative): 20 | DMM Complexity: 0.10526315789473684\n\nDIFF:\n@@ -9,22 +9,22 @@ requests.models\n import urllib\n import urllib2\n import socket\n-import codecs\n import zlib\n \n-\n from urllib2 import HTTPError\n from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n-from .config import settings\n-from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .utils import dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n+from .utils import (dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n from .status_codes import codes\n from .exceptions import Timeout, URLRequired, TooManyRedirects\n+from .monkeys import Request as _Request\n+from .monkeys import (\n+    HTTPBasicAuthHandler, HTTPForcedBasicAuthHandler,\n+    HTTPDigestAuthHandler, HTTPRedirectHandler)\n \n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n@@ -37,9 +37,20 @@ class Request(object):\n     \"\"\"\n \n     def __init__(self,\n-        url=None, headers=dict(), files=None, method=None, data=dict(),\n-        params=dict(), auth=None, cookies=None, timeout=None, redirect=False,\n-        allow_redirects=False, proxies=None, hooks=None):\n+        url=None,\n+        headers=dict(),\n+        files=None,\n+        method=None,\n+        data=dict(),\n+        params=dict(),\n+        auth=None,\n+        cookies=None,\n+        timeout=None,\n+        redirect=False,\n+        allow_redirects=False,\n+        proxies=None,\n+        hooks=None,\n+        config=None):\n \n         #: Float describes the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -93,6 +104,9 @@ class Request(object):\n         #: CookieJar to attach to :class:`Request <Request>`.\n         self.cookies = cookies\n \n+        #: Dictionary of configurations for this request.\n+        self.config = config\n+\n         #: True if Request has been sent.\n         self.sent = False\n \n@@ -100,16 +114,15 @@ class Request(object):\n         self.hooks = hooks\n \n         # Header manipulation and defaults.\n-\n-        if settings.accept_gzip:\n-            settings.base_headers.update({'Accept-Encoding': 'gzip'})\n+        if self.config.get('accept_gzip'):\n+            self.headers.update({'Accept-Encoding': 'gzip'})\n \n         if headers:\n             headers = CaseInsensitiveDict(self.headers)\n         else:\n             headers = CaseInsensitiveDict()\n \n-        for (k, v) in settings.base_headers.items():\n+        for (k, v) in self.config.get('base_headers', {}).items():\n             if k not in headers:\n                 headers[k] = v\n \n@@ -185,6 +198,7 @@ class Request(object):\n         def build(resp):\n \n             response = Response()\n+            response.config = self.config\n             response.status_code = getattr(resp, 'code', None)\n \n             try:\n@@ -219,7 +233,7 @@ class Request(object):\n \n                 r.raw.close()\n \n-                if not len(history) < settings.max_redirects:\n+                if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n                 history.append(r)\n@@ -243,9 +257,16 @@ class Request(object):\n                     method = self.method\n \n                 request = Request(\n-                    url, self.headers, self.files, method,\n-                    self.data, self.params, self.auth, self.cookies,\n-                    redirect=True\n+                    url=url,\n+                    headers=self.headers,\n+                    files=self.files,\n+                    method=method,\n+                    # data=self.data,\n+                    # params=self.params,\n+                    auth=self.auth,\n+                    cookies=self.cookies,\n+                    redirect=True,\n+                    config=self.config\n                 )\n                 request.send()\n                 r = request.response\n@@ -313,8 +334,8 @@ class Request(object):\n         self._checks()\n \n         # Logging\n-        if settings.verbose:\n-            settings.verbose.write('%s   %s   %s\\n' % (\n+        if self.config.get('verbose'):\n+            self.config.get('verbose').write('%s   %s   %s\\n' % (\n                 datetime.now().isoformat(), self.method, self.url\n             ))\n \n@@ -353,14 +374,14 @@ class Request(object):\n                     if not 'timeout' in str(err):\n                         raise\n \n-                    if settings.timeout_fallback:\n+                    if self.config.get('timeout_fallback'):\n                         # fall-back and use global socket timeout (This is not thread-safe!)\n                         old_timeout = socket.getdefaulttimeout()\n                         socket.setdefaulttimeout(self.timeout)\n \n                     resp = opener(req)\n \n-                    if settings.timeout_fallback:\n+                    if self.config.get('timeout_fallback'):\n                         # restore global timeout\n                         socket.setdefaulttimeout(old_timeout)\n \n@@ -429,6 +450,9 @@ class Response(object):\n         #: A dictionary of Cookies the server sent back.\n         self.cookies = None\n \n+        #: Dictionary of configurations for this request.\n+        self.config = None\n+\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n@@ -460,7 +484,7 @@ class Response(object):\n         if 'gzip' in self.headers.get('content-encoding', ''):\n             gen = stream_decode_gzip(gen)\n         if decode_unicode is None:\n-            decode_unicode = settings.decode_unicode\n+            decode_unicode = self.config.get('decode_unicode')\n         if decode_unicode:\n             gen = stream_decode_response_unicode(gen, self)\n         return gen\n@@ -489,7 +513,7 @@ class Response(object):\n                 pass\n \n         # Decode unicode content.\n-        if settings.decode_unicode:\n+        if self.config.get('decode_unicode'):\n             self._content = get_unicode_from_response(self)\n \n         self._content_consumed = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f9dfbb73ddbc6ce78cd6e57dd436158fc417d031", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 865 | Contributors (this commit): 10 | Commits (past 90d): 44 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,13 +17,24 @@ __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n \n def request(method, url,\n-    params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-    timeout=None, allow_redirects=False, proxies=None, hooks=None, return_response=True):\n+    params=None,\n+    data=None,\n+    headers=None,\n+    cookies=None,\n+    files=None,\n+    auth=None,\n+    timeout=None,\n+    allow_redirects=False,\n+    proxies=None,\n+    hooks=None,\n+    return_response=True,\n+    config=None):\n \n     s = session()\n     return s.request(\n         method, url, params, data, headers, cookies, files, auth,\n-        timeout, allow_redirects, proxies, hooks, return_response\n+        timeout, allow_redirects, proxies, hooks, return_response,\n+        config\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f6cf50a6c6e655e8a87c8721fab2049a34d8e8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 165 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,6 @@ from .models import HTTPError, Request, Response\n from .api import request, get, head, post, patch, put, delete\n from .sessions import session\n from .status_codes import codes\n-from .config import settings\n from .exceptions import (\n     RequestException, AuthenticationError, Timeout, URLRequired,\n     TooManyRedirects\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0ee6c1fa681dec4c9353d6ea719ae021f47e1bf8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 3006 | Contributors (this commit): 20 | Commits (past 90d): 118 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,8 +28,6 @@ defaults['base_headers'] = {\n     'Accept-Encoding': ', '.join([ 'identity', 'deflate', 'compress', 'gzip' ]),\n }\n \n-\n-# defaults['accept_gzip'] = True\n defaults['proxies'] = {}\n defaults['verbose'] = None\n defaults['timeout'] = None\n@@ -38,11 +36,3 @@ defaults['decode_unicode'] = True\n defaults['timeout_fallback'] = True\n # defaults['keep_alive'] = True\n # defaults['max_connections'] = 10\n\\ No newline at end of file\n-\n-\n-# defaults['hooks'] = {\n-#     'args': list(),\n-#     'pre_request': list(),\n-#     'post_request': list(),\n-#     'response': list()\n-# }\n\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n \n \"\"\"\n@@ -113,10 +114,6 @@ class Request(object):\n         #: Event-handling hooks.\n         self.hooks = hooks\n \n-        # Header manipulation and defaults.\n-        if self.config.get('accept_gzip'):\n-            self.headers.update({'Accept-Encoding': 'gzip'})\n-\n         if headers:\n             headers = CaseInsensitiveDict(self.headers)\n         else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
