{"custom_id": "flask#648344d4e8878e4aafcc5413f984b21b86173246", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 11 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 44 | Churn Cumulative: 263 | Contributors (this commit): 14 | Commits (past 90d): 1 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -102,38 +102,35 @@ class View(object):\n         return view\n \n \n-def get_methods(cls):\n-    return getattr(cls, 'methods', []) or []\n-\n-\n class MethodViewType(type):\n+    \"\"\"Metaclass for :class:`MethodView` that determines what methods the view\n+    defines.\n+    \"\"\"\n+\n+    def __init__(cls, name, bases, d):\n+        super(MethodViewType, cls).__init__(name, bases, d)\n \n-    def __new__(cls, name, bases, d):\n-        rv = type.__new__(cls, name, bases, d)\n         if 'methods' not in d:\n-            methods = set(m for b in bases for m in get_methods(b))\n-            for key in d:\n-                if key in http_method_funcs:\n+            methods = set()\n+\n+            for key in http_method_funcs:\n+                if hasattr(cls, key):\n                     methods.add(key.upper())\n-            # If we have no method at all in there we don't want to\n-            # add a method list.  (This is for instance the case for\n-            # the base class or another subclass of a base method view\n-            # that does not introduce new methods).\n+\n+            # If we have no method at all in there we don't want to add a\n+            # method list. This is for instance the case for the base class\n+            # or another subclass of a base method view that does not introduce\n+            # new methods.\n             if methods:\n-                rv.methods = sorted(methods)\n-        return rv\n+                cls.methods = methods\n \n \n class MethodView(with_metaclass(MethodViewType, View)):\n-    \"\"\"Like a regular class-based view but that dispatches requests to\n-    particular methods.  For instance if you implement a method called\n-    :meth:`get` it means it will respond to ``'GET'`` requests and\n-    the :meth:`dispatch_request` implementation will automatically\n-    forward your request to that.  Also :attr:`options` is set for you\n-    automatically::\n+    \"\"\"A class-based view that dispatches request methods to the corresponding\n+    class methods. For example, if you implement a ``get`` method, it will be\n+    used to handle ``GET`` requests. ::\n \n         class CounterAPI(MethodView):\n-\n             def get(self):\n                 return session.get('counter', 0)\n \n@@ -143,11 +140,14 @@ class MethodView(with_metaclass(MethodViewType, View)):\n \n         app.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))\n     \"\"\"\n+\n     def dispatch_request(self, *args, **kwargs):\n         meth = getattr(self, request.method.lower(), None)\n+\n         # If the request method is HEAD and we don't have a handler for it\n         # retry with GET.\n         if meth is None and request.method == 'HEAD':\n             meth = getattr(self, 'get', None)\n+\n         assert meth is not None, 'Unimplemented method %r' % request.method\n         return meth(*args, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#13754b6d117eb6847cca45475412fdd05025f1b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 27 | Churn Cumulative: 4578 | Contributors (this commit): 81 | Commits (past 90d): 12 | Contributors (cumulative): 85 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2002,10 +2002,10 @@ class Flask(_PackageBoundObject):\n                                exception context to start the response\n         \"\"\"\n         ctx = self.request_context(environ)\n-        ctx.push()\n         error = None\n         try:\n             try:\n+                ctx.push()\n                 response = self.full_dispatch_request()\n             except Exception as e:\n                 error = e\n\n@@ -12,6 +12,7 @@\n import pytest\n \n import flask\n+from flask.sessions import SessionInterface\n \n try:\n     from greenlet import greenlet\n@@ -193,3 +194,27 @@ def test_greenlet_context_copying_api():\n \n     result = greenlets[0].run()\n     assert result == 42\n+\n+\n+def test_session_error_pops_context():\n+    class SessionError(Exception):\n+        pass\n+\n+    class FailingSessionInterface(SessionInterface):\n+        def open_session(self, app, request):\n+            raise SessionError()\n+\n+    class CustomFlask(flask.Flask):\n+        session_interface = FailingSessionInterface()\n+\n+    app = CustomFlask(__name__)\n+\n+    @app.route('/')\n+    def index():\n+        # shouldn't get here\n+        assert False\n+\n+    response = app.test_client().get('/')\n+    assert response.status_code == 500\n+    assert not flask.request\n+    assert not flask.current_app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46f83665ef74880bbc4a1c1f17ccededa7aaa939", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 15 | Files Changed: 3 | Hunks: 14 | Methods Changed: 5 | Complexity Δ (Sum/Max): 16/10 | Churn Δ: 40 | Churn Cumulative: 2095 | Contributors (this commit): 42 | Commits (past 90d): 13 | Contributors (cumulative): 58 | DMM Complexity: 0.5\n\nDIFF:\n@@ -90,10 +90,10 @@ class Blueprint(_PackageBoundObject):\n     _got_registered_once = False\n \n     #: Blueprint local JSON decoder class to use.\n-    # Set to None to use the :class:`~flask.app.Flask.json_encoder`.\n+    #: Set to ``None`` to use the app's :class:`~flask.app.Flask.json_encoder`.\n     json_encoder = None\n     #: Blueprint local JSON decoder class to use.\n-    # Set to None to use the :class:`~flask.app.Flask.json_decoder`.\n+    #: Set to ``None`` to use the app's :class:`~flask.app.Flask.json_decoder`.\n     json_decoder = None\n \n     def __init__(self, name, import_name, static_folder=None,\n\n@@ -92,13 +92,16 @@ class JSONDecoder(_json.JSONDecoder):\n def _dump_arg_defaults(kwargs):\n     \"\"\"Inject default arguments for dump functions.\"\"\"\n     if current_app:\n-        bp = current_app.blueprints.get(request.blueprint,\n-                                        None) if has_request_context() else None\n-        kwargs.setdefault('cls',\n+        bp = current_app.blueprints.get(request.blueprint) if request else None\n+        kwargs.setdefault(\n+            'cls',\n             bp.json_encoder if bp and bp.json_encoder\n-                          else current_app.json_encoder)\n+                else current_app.json_encoder\n+        )\n+\n         if not current_app.config['JSON_AS_ASCII']:\n             kwargs.setdefault('ensure_ascii', False)\n+\n         kwargs.setdefault('sort_keys', current_app.config['JSON_SORT_KEYS'])\n     else:\n         kwargs.setdefault('sort_keys', True)\n@@ -108,11 +111,12 @@ def _dump_arg_defaults(kwargs):\n def _load_arg_defaults(kwargs):\n     \"\"\"Inject default arguments for load functions.\"\"\"\n     if current_app:\n-        bp = current_app.blueprints.get(request.blueprint,\n-                                        None) if has_request_context() else None\n-        kwargs.setdefault('cls',\n+        bp = current_app.blueprints.get(request.blueprint) if request else None\n+        kwargs.setdefault(\n+            'cls',\n             bp.json_decoder if bp and bp.json_decoder\n-                          else current_app.json_decoder)\n+                else current_app.json_decoder\n+        )\n     else:\n         kwargs.setdefault('cls', JSONDecoder)\n \n\n@@ -271,30 +271,36 @@ class TestJSON(object):\n         class X(object):\n             def __init__(self, val):\n                 self.val = val\n+\n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n                     return '<%d>' % o.val\n+\n                 return flask.json.JSONEncoder.default(self, o)\n+\n         class MyDecoder(flask.json.JSONDecoder):\n             def __init__(self, *args, **kwargs):\n                 kwargs.setdefault('object_hook', self.object_hook)\n                 flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n+\n             def object_hook(self, obj):\n                 if len(obj) == 1 and '_foo' in obj:\n                     return X(obj['_foo'])\n+\n                 return obj\n \n-        blue = flask.Blueprint('blue', __name__)\n-        blue.json_encoder = MyEncoder\n-        blue.json_decoder = MyDecoder\n-        @blue.route('/bp', methods=['POST'])\n+        bp = flask.Blueprint('bp', __name__)\n+        bp.json_encoder = MyEncoder\n+        bp.json_decoder = MyDecoder\n+\n+        @bp.route('/bp', methods=['POST'])\n         def index():\n             return flask.json.dumps(flask.request.get_json()['x'])\n \n         app = flask.Flask(__name__)\n         app.testing = True\n-        app.register_blueprint(blue)\n+        app.register_blueprint(bp)\n \n         c = app.test_client()\n         rv = c.post('/bp', data=flask.json.dumps({\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#697f7b9365304c45216e6c8dd307d931ea1506d0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 195 | Lines Deleted: 102 | Files Changed: 2 | Hunks: 34 | Methods Changed: 25 | Complexity Δ (Sum/Max): 8/5 | Churn Δ: 297 | Churn Cumulative: 6121 | Contributors (this commit): 89 | Commits (past 90d): 22 | Contributors (cumulative): 101 | DMM Complexity: 0.6101694915254238\n\nDIFF:\n@@ -10,30 +10,30 @@\n \"\"\"\n import os\n import sys\n-from threading import Lock\n from datetime import timedelta\n-from itertools import chain\n from functools import update_wrapper\n+from itertools import chain\n+from threading import Lock\n \n-from werkzeug.datastructures import ImmutableDict\n-from werkzeug.routing import Map, Rule, RequestRedirect, BuildError\n-from werkzeug.exceptions import HTTPException, InternalServerError, \\\n-     MethodNotAllowed, BadRequest, default_exceptions\n+from werkzeug.datastructures import ImmutableDict, Headers\n+from werkzeug.exceptions import BadRequest, HTTPException, \\\n+    InternalServerError, MethodNotAllowed, default_exceptions\n+from werkzeug.routing import BuildError, Map, RequestRedirect, Rule\n \n-from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-     locked_cached_property, _endpoint_from_view_func, find_package, \\\n-     get_debug_flag\n-from . import json, cli\n-from .wrappers import Request, Response\n-from .config import ConfigAttribute, Config\n-from .ctx import RequestContext, AppContext, _AppCtxGlobals\n-from .globals import _request_ctx_stack, request, session, g\n+from . import cli, json\n+from ._compat import integer_types, reraise, string_types, text_type\n+from .config import Config, ConfigAttribute\n+from .ctx import AppContext, RequestContext, _AppCtxGlobals\n+from .globals import _request_ctx_stack, g, request, session\n+from .helpers import _PackageBoundObject, \\\n+    _endpoint_from_view_func, find_package, get_debug_flag, \\\n+    get_flashed_messages, locked_cached_property, url_for\n from .sessions import SecureCookieSessionInterface\n+from .signals import appcontext_tearing_down, got_request_exception, \\\n+    request_finished, request_started, request_tearing_down\n from .templating import DispatchingJinjaLoader, Environment, \\\n     _default_template_ctx_processor\n-from .signals import request_started, request_finished, got_request_exception, \\\n-     request_tearing_down, appcontext_tearing_down\n-from ._compat import reraise, string_types, text_type, integer_types\n+from .wrappers import Request, Response\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -1715,62 +1715,106 @@ class Flask(_PackageBoundObject):\n         return False\n \n     def make_response(self, rv):\n-        \"\"\"Converts the return value from a view function to a real\n-        response object that is an instance of :attr:`response_class`.\n+        \"\"\"Convert the return value from a view function to an instance of\n+        :attr:`response_class`.\n \n-        The following types are allowed for `rv`:\n+        :param rv: the return value from the view function. The view function\n+            must return a response. Returning ``None``, or the view ending\n+            without returning, is not allowed. The following types are allowed\n+            for ``view_rv``:\n \n-        .. tabularcolumns:: |p{3.5cm}|p{9.5cm}|\n+            ``str`` (``unicode`` in Python 2)\n+                A response object is created with the string encoded to UTF-8\n+                as the body.\n                 \n-        ======================= ===========================================\n-        :attr:`response_class`  the object is returned unchanged\n-        :class:`str`            a response object is created with the\n-                                string as body\n-        :class:`unicode`        a response object is created with the\n-                                string encoded to utf-8 as body\n-        a WSGI function         the function is called as WSGI application\n-                                and buffered as response object\n-        :class:`tuple`          A tuple in the form ``(response, status,\n-                                headers)`` or ``(response, headers)``\n-                                where `response` is any of the\n-                                types defined here, `status` is a string\n-                                or an integer and `headers` is a list or\n-                                a dictionary with header values.\n-        ======================= ===========================================\n+            ``bytes`` (``str`` in Python 2)\n+                A response object is created with the bytes as the body.\n                 \n-        :param rv: the return value from the view function\n+            ``tuple``\n+                Either ``(body, status, headers)``, ``(body, status)``, or\n+                ``(body, headers)``, where ``body`` is any of the other types\n+                allowed here, ``status`` is a string or an integer, and\n+                ``headers`` is a dictionary or a list of ``(key, value)``\n+                tuples. If ``body`` is a :attr:`response_class` instance,\n+                ``status`` overwrites the exiting value and ``headers`` are\n+                extended.\n+    \n+            :attr:`response_class`\n+                The object is returned unchanged.\n+            \n+            other :class:`~werkzeug.wrappers.Response` class\n+                The object is coerced to :attr:`response_class`.\n+                \n+            :func:`callable`\n+                The function is called as a WSGI application. The result is\n+                used to create a response object.\n \n         .. versionchanged:: 0.9\n            Previously a tuple was interpreted as the arguments for the\n            response object.\n         \"\"\"\n-        status_or_headers = headers = None\n-        if isinstance(rv, tuple):\n-            rv, status_or_headers, headers = rv + (None,) * (3 - len(rv))\n \n+        status = headers = None\n+\n+        # unpack tuple returns\n+        if isinstance(rv, (tuple, list)):\n+            len_rv = len(rv)\n+\n+            # a 3-tuple is unpacked directly\n+            if len_rv == 3:\n+                rv, status, headers = rv\n+            # decide if a 2-tuple has status or headers\n+            elif len_rv == 2:\n+                if isinstance(rv[1], (Headers, dict, tuple, list)):\n+                    rv, headers = rv\n+                else:\n+                    rv, status = rv\n+            # other sized tuples are not allowed\n+            else:\n+                raise TypeError(\n+                    'The view function did not return a valid response tuple.'\n+                    ' The tuple must have the form (body, status, headers),'\n+                    ' (body, status), or (body, headers).'\n+                )\n+\n+        # the body must not be None\n         if rv is None:\n-            raise ValueError('View function did not return a response')\n-\n-        if isinstance(status_or_headers, (dict, list)):\n-            headers, status_or_headers = status_or_headers, None\n+            raise TypeError(\n+                'The view function did not return a valid response. The'\n+                ' function either returned None or ended without a return'\n+                ' statement.'\n+            )\n \n+        # make sure the body is an instance of the response class\n         if not isinstance(rv, self.response_class):\n-            # When we create a response object directly, we let the constructor\n-            # set the headers and status.  We do this because there can be\n-            # some extra logic involved when creating these objects with\n-            # specific values (like default content type selection).\n             if isinstance(rv, (text_type, bytes, bytearray)):\n-                rv = self.response_class(rv, headers=headers,\n-                                         status=status_or_headers)\n-                headers = status_or_headers = None\n+                # let the response class set the status and headers instead of\n+                # waiting to do it manually, so that the class can handle any\n+                # special logic\n+                rv = self.response_class(rv, status=status, headers=headers)\n+                status = headers = None\n             else:\n+                # evaluate a WSGI callable, or coerce a different response\n+                # class to the correct type\n+                try:\n                     rv = self.response_class.force_type(rv, request.environ)\n+                except TypeError as e:\n+                    new_error = TypeError(\n+                        '{e}\\nThe view function did not return a valid'\n+                        ' response. The return type must be a string, tuple,'\n+                        ' Response instance, or WSGI callable, but it was a'\n+                        ' {rv.__class__.__name__}.'.format(e=e, rv=rv)\n+                    )\n+                    reraise(TypeError, new_error, sys.exc_info()[2])\n \n-        if status_or_headers is not None:\n-            if isinstance(status_or_headers, string_types):\n-                rv.status = status_or_headers\n+        # prefer the status if it was provided\n+        if status is not None:\n+            if isinstance(status, (text_type, bytes, bytearray)):\n+                rv.status = status\n             else:\n-                rv.status_code = status_or_headers\n+                rv.status_code = status\n+\n+        # extend existing headers with provided headers\n         if headers:\n             rv.headers.extend(headers)\n \n\n@@ -975,64 +975,129 @@ def test_enctype_debug_helper():\n         assert 'This was submitted: \"index.txt\"' in str(e.value)\n \n \n-def test_response_creation():\n+def test_response_types():\n     app = flask.Flask(__name__)\n+    app.testing = True\n \n-    @app.route('/unicode')\n-    def from_unicode():\n+    @app.route('/text')\n+    def from_text():\n         return u'Hällo Wörld'\n \n-    @app.route('/string')\n-    def from_string():\n+    @app.route('/bytes')\n+    def from_bytes():\n         return u'Hällo Wörld'.encode('utf-8')\n \n-    @app.route('/args')\n-    def from_tuple():\n+    @app.route('/full_tuple')\n+    def from_full_tuple():\n         return 'Meh', 400, {\n             'X-Foo': 'Testing',\n             'Content-Type': 'text/plain; charset=utf-8'\n         }\n \n-    @app.route('/two_args')\n-    def from_two_args_tuple():\n+    @app.route('/text_headers')\n+    def from_text_headers():\n         return 'Hello', {\n             'X-Foo': 'Test',\n             'Content-Type': 'text/plain; charset=utf-8'\n         }\n \n-    @app.route('/args_status')\n-    def from_status_tuple():\n+    @app.route('/text_status')\n+    def from_text_status():\n         return 'Hi, status!', 400\n \n-    @app.route('/args_header')\n-    def from_response_instance_status_tuple():\n-        return flask.Response('Hello world', 404), {\n+    @app.route('/response_headers')\n+    def from_response_headers():\n+        return flask.Response('Hello world', 404, {'X-Foo': 'Baz'}), {\n             \"X-Foo\": \"Bar\",\n             \"X-Bar\": \"Foo\"\n         }\n \n+    @app.route('/response_status')\n+    def from_response_status():\n+        return app.response_class('Hello world', 400), 500\n+\n+    @app.route('/wsgi')\n+    def from_wsgi():\n+        return NotFound()\n+\n     c = app.test_client()\n-    assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n-    assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n-    rv = c.get('/args')\n+\n+    assert c.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n+    assert c.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n+\n+    rv = c.get('/full_tuple')\n     assert rv.data == b'Meh'\n     assert rv.headers['X-Foo'] == 'Testing'\n     assert rv.status_code == 400\n     assert rv.mimetype == 'text/plain'\n-    rv2 = c.get('/two_args')\n-    assert rv2.data == b'Hello'\n-    assert rv2.headers['X-Foo'] == 'Test'\n-    assert rv2.status_code == 200\n-    assert rv2.mimetype == 'text/plain'\n-    rv3 = c.get('/args_status')\n-    assert rv3.data == b'Hi, status!'\n-    assert rv3.status_code == 400\n-    assert rv3.mimetype == 'text/html'\n-    rv4 = c.get('/args_header')\n-    assert rv4.data == b'Hello world'\n-    assert rv4.headers['X-Foo'] == 'Bar'\n-    assert rv4.headers['X-Bar'] == 'Foo'\n-    assert rv4.status_code == 404\n+\n+    rv = c.get('/text_headers')\n+    assert rv.data == b'Hello'\n+    assert rv.headers['X-Foo'] == 'Test'\n+    assert rv.status_code == 200\n+    assert rv.mimetype == 'text/plain'\n+\n+    rv = c.get('/text_status')\n+    assert rv.data == b'Hi, status!'\n+    assert rv.status_code == 400\n+    assert rv.mimetype == 'text/html'\n+\n+    rv = c.get('/response_headers')\n+    assert rv.data == b'Hello world'\n+    assert rv.headers.getlist('X-Foo') == ['Baz', 'Bar']\n+    assert rv.headers['X-Bar'] == 'Foo'\n+    assert rv.status_code == 404\n+\n+    rv = c.get('/response_status')\n+    assert rv.data == b'Hello world'\n+    assert rv.status_code == 500\n+\n+    rv = c.get('/wsgi')\n+    assert b'Not Found' in rv.data\n+    assert rv.status_code == 404\n+\n+\n+def test_response_type_errors():\n+    app = flask.Flask(__name__)\n+    app.testing = True\n+\n+    @app.route('/none')\n+    def from_none():\n+        pass\n+\n+    @app.route('/small_tuple')\n+    def from_small_tuple():\n+        return 'Hello',\n+\n+    @app.route('/large_tuple')\n+    def from_large_tuple():\n+        return 'Hello', 234, {'X-Foo': 'Bar'}, '???'\n+\n+    @app.route('/bad_type')\n+    def from_bad_type():\n+        return True\n+\n+    @app.route('/bad_wsgi')\n+    def from_bad_wsgi():\n+        return lambda: None\n+\n+    c = app.test_client()\n+\n+    with pytest.raises(TypeError) as e:\n+        c.get('/none')\n+        assert 'returned None' in str(e)\n+\n+    with pytest.raises(TypeError) as e:\n+        c.get('/small_tuple')\n+        assert 'tuple must have the form' in str(e)\n+\n+    pytest.raises(TypeError, c.get, '/large_tuple')\n+\n+    with pytest.raises(TypeError) as e:\n+        c.get('/bad_type')\n+        assert 'it was a bool' in str(e)\n+\n+    pytest.raises(TypeError, c.get, '/bad_wsgi')\n \n \n def test_make_response():\n@@ -1272,22 +1337,6 @@ def test_static_route_with_host_matching():\n     flask.Flask(__name__, host_matching=True, static_folder=None)\n \n \n-def test_none_response():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n-    @app.route('/')\n-    def test():\n-        return None\n-    try:\n-        app.test_client().get('/')\n-    except ValueError as e:\n-        assert str(e) == 'View function did not return a response'\n-        pass\n-    else:\n-        assert \"Expected ValueError\"\n-\n-\n def test_request_locals():\n     assert repr(flask.g) == '<LocalProxy unbound>'\n     assert not flask.g\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#501f0431259a30569a5e62bcce68d102fc3ef993", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 68 | Churn Cumulative: 4619 | Contributors (this commit): 80 | Commits (past 90d): 13 | Contributors (cumulative): 80 | DMM Complexity: None\n\nDIFF:\n@@ -415,17 +415,16 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.9\n         self.url_build_error_handlers = []\n \n-        #: A dictionary with lists of functions that should be called at the\n-        #: beginning of the request.  The key of the dictionary is the name of\n-        #: the blueprint this function is active for, ``None`` for all requests.\n-        #: This can for example be used to open database connections or\n-        #: getting hold of the currently logged in user.  To register a\n-        #: function here, use the :meth:`before_request` decorator.\n+        #: A dictionary with lists of functions that will be called at the\n+        #: beginning of each request. The key of the dictionary is the name of\n+        #: the blueprint this function is active for, or ``None`` for all\n+        #: requests. To register a function, use the :meth:`before_request`\n+        #: decorator.\n         self.before_request_funcs = {}\n \n-        #: A lists of functions that should be called at the beginning of the\n-        #: first request to this instance.  To register a function here, use\n-        #: the :meth:`before_first_request` decorator.\n+        #: A list of functions that will be called at the beginning of the\n+        #: first request to this instance. To register a function, use the\n+        #: :meth:`before_first_request` decorator.\n         #:\n         #: .. versionadded:: 0.8\n         self.before_first_request_funcs = []\n@@ -457,12 +456,11 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.9\n         self.teardown_appcontext_funcs = []\n \n-        #: A dictionary with lists of functions that can be used as URL\n-        #: value processor functions.  Whenever a URL is built these functions\n-        #: are called to modify the dictionary of values in place.  The key\n-        #: ``None`` here is used for application wide\n-        #: callbacks, otherwise the key is the name of the blueprint.\n-        #: Each of these functions has the chance to modify the dictionary\n+        #: A dictionary with lists of functions that are called before the\n+        #: :attr:`before_request_funcs` functions. The key of the dictionary is\n+        #: the name of the blueprint this function is active for, or ``None``\n+        #: for all requests. To register a function, use\n+        #: :meth:`url_value_preprocessor`.\n         #:\n         #: .. versionadded:: 0.7\n         self.url_value_preprocessors = {}\n@@ -1315,10 +1313,12 @@ class Flask(_PackageBoundObject):\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\n         \n-        The function will be called without any arguments.\n-        If the function returns a non-None value, it's handled as\n-        if it was the return value from the view and further\n-        request handling is stopped.\n+        For example, this can be used to open a database connection, or to load\n+        the logged in user from the session.\n+\n+        The function will be called without any arguments. If it returns a\n+        non-None value, the value is handled as if it was the return value from\n+        the view, and further request handling is stopped.\n         \"\"\"\n         self.before_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -1437,9 +1437,17 @@ class Flask(_PackageBoundObject):\n \n     @setupmethod\n     def url_value_preprocessor(self, f):\n-        \"\"\"Registers a function as URL value preprocessor for all view\n-        functions of the application.  It's called before the view functions\n-        are called and can modify the url values provided.\n+        \"\"\"Register a URL value preprocessor function for all view\n+        functions in the application. These functions will be called before the\n+        :meth:`before_request` functions.\n+        \n+        The function can modify the values captured from the matched url before\n+        they are passed to the view. For example, this can be used to pop a\n+        common language code value and place it in ``g`` rather than pass it to\n+        every view.\n+        \n+        The function is passed the endpoint name and values dict. The return\n+        value is ignored.\n         \"\"\"\n         self.url_value_preprocessors.setdefault(None, []).append(f)\n         return f\n@@ -1877,16 +1885,14 @@ class Flask(_PackageBoundObject):\n         raise error\n \n     def preprocess_request(self):\n-        \"\"\"Called before the request dispatching.\n+        \"\"\"Called before the request is dispatched. Calls\n+        :attr:`url_value_preprocessors` registered with the app and the\n+        current blueprint (if any). Then calls :attr:`before_request_funcs`\n+        registered with the app and the blueprint.\n         \n-        Triggers two set of hook functions that should be invoked prior to request dispatching:\n-        :attr:`url_value_preprocessors` and :attr:`before_request_funcs`\n-        (the latter are functions decorated with :meth:`before_request` decorator).\n-        In both cases, the method triggers only the functions that are either global\n-        or registered to the current blueprint.\n-\n-        If any function in :attr:`before_request_funcs` returns a value, it's handled as if it was\n-        the return value from the view function, and further request handling is stopped.\n+        If any :meth:`before_request` handler returns a non-None value, the\n+        value is handled as if it was the return value from the view, and\n+        further request handling is stopped.\n         \"\"\"\n \n         bp = _request_ctx_stack.top.request.blueprint\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7ad79583b9558cc7806d56c534f9527e500734e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 100 | Lines Deleted: 71 | Files Changed: 3 | Hunks: 18 | Methods Changed: 17 | Complexity Δ (Sum/Max): 19/11 | Churn Δ: 171 | Churn Cumulative: 1936 | Contributors (this commit): 27 | Commits (past 90d): 9 | Contributors (cumulative): 37 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,14 +12,17 @@\n import os\n import sys\n import traceback\n-from threading import Lock, Thread\n from functools import update_wrapper\n+from operator import attrgetter\n+from threading import Lock, Thread\n \n import click\n \n-from ._compat import iteritems, reraise\n-from .helpers import get_debug_flag\n from . import __version__\n+from ._compat import iteritems, reraise\n+from .globals import current_app\n+from .helpers import get_debug_flag\n+\n \n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n@@ -485,34 +488,51 @@ def shell_command():\n     code.interact(banner=banner, local=ctx)\n \n \n-@click.command('routes', short_help='Show routes for the app.')\n-@click.option('-r', 'order_by', flag_value='rule', default=True, help='Order by route')\n-@click.option('-e', 'order_by', flag_value='endpoint', help='Order by endpoint')\n-@click.option('-m', 'order_by', flag_value='methods', help='Order by methods')\n+@click.command('routes', short_help='Show the routes for the app.')\n+@click.option(\n+    '--sort', '-s',\n+    type=click.Choice(('endpoint', 'methods', 'rule', 'match')),\n+    default='endpoint',\n+    help=(\n+        'Method to sort routes by. \"match\" is the order that Flask will match '\n+        'routes when dispatching a request.'\n+    )\n+)\n+@click.option(\n+    '--all-methods',\n+    is_flag=True,\n+    help=\"Show HEAD and OPTIONS methods.\"\n+)\n @with_appcontext\n-def routes_command(order_by):\n-    \"\"\"Show all routes with endpoints and methods.\"\"\"\n-    from flask.globals import _app_ctx_stack\n-    app = _app_ctx_stack.top.app\n+def routes_command(sort, all_methods):\n+    \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n \n-    order_key = lambda rule: getattr(rule, order_by)\n-    sorted_rules = sorted(app.url_map.iter_rules(), key=order_key)\n+    rules = list(current_app.url_map.iter_rules())\n+    ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))\n \n-    max_rule = max(len(rule.rule) for rule in sorted_rules)\n-    max_rule = max(max_rule, len('Route'))\n-    max_ep = max(len(rule.endpoint) for rule in sorted_rules)\n-    max_ep = max(max_ep, len('Endpoint'))\n-    max_meth = max(len(', '.join(rule.methods)) for rule in sorted_rules)\n-    max_meth = max(max_meth, len('Methods'))\n+    if sort in ('endpoint', 'rule'):\n+        rules = sorted(rules, key=attrgetter(sort))\n+    elif sort == 'methods':\n+        rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n \n-    columnformat = '{:<%s}  {:<%s}  {:<%s}' % (max_rule, max_ep, max_meth)\n-    click.echo(columnformat.format('Route', 'Endpoint', 'Methods'))\n-    under_count = max_rule + max_ep + max_meth + 4\n-    click.echo('-' * under_count)\n+    rule_methods = [\n+        ', '.join(sorted(rule.methods - ignored_methods)) for rule in rules\n+    ]\n \n-    for rule in sorted_rules:\n-        methods = ', '.join(rule.methods)\n-        click.echo(columnformat.format(rule.rule, rule.endpoint, methods))\n+    headers = ('Endpoint', 'Methods', 'Rule')\n+    widths = (\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*('-' * width for width in widths)))\n+\n+    for rule, methods in zip(rules, rule_methods):\n+        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(help=\"\"\"\\\n\n@@ -1,18 +0,0 @@\n-from __future__ import absolute_import, print_function\n-\n-from flask import Flask\n-\n-\n-noroute_app = Flask('noroute app')\n-simpleroute_app = Flask('simpleroute app')\n-only_POST_route_app = Flask('GET route app')\n-\n-\n-@simpleroute_app.route('/simpleroute')\n-def simple():\n-    pass\n-\n-\n-@only_POST_route_app.route('/only-post', methods=['POST'])\n-def only_post():\n-    pass\n\n@@ -14,6 +14,7 @@\n from __future__ import absolute_import, print_function\n import os\n import sys\n+from functools import partial\n \n import click\n import pytest\n@@ -195,7 +196,7 @@ def test_flaskgroup(runner):\n     assert result.output == 'flaskgroup\\n'\n \n \n-def test_print_exceptions():\n+def test_print_exceptions(runner):\n     \"\"\"Print the stacktrace if the CLI.\"\"\"\n     def create_app(info):\n         raise Exception(\"oh no\")\n@@ -205,7 +206,6 @@ def test_print_exceptions():\n     def cli(**params):\n         pass\n \n-    runner = CliRunner()\n     result = runner.invoke(cli, ['--help'])\n     assert result.exit_code == 0\n     assert 'Exception: oh no' in result.output\n@@ -213,34 +213,58 @@ def test_print_exceptions():\n \n \n class TestRoutes:\n-    def test_no_route(self, runner, monkeypatch):\n-        monkeypatch.setitem(os.environ, 'FLASK_APP', 'cliapp.routesapp:noroute_app')\n-        result = runner.invoke(cli, ['routes'], catch_exceptions=False)\n-        assert result.exit_code == 0\n-        assert result.output == \"\"\"\\\n-Route                    Endpoint  Methods           \n------------------------------------------------------\n-/static/<path:filename>  static    HEAD, OPTIONS, GET\n-\"\"\"\n+    @pytest.fixture\n+    def invoke(self, runner):\n+        def create_app(info):\n+            app = Flask(__name__)\n+            app.testing = True\n \n-    def test_simple_route(self, runner, monkeypatch):\n-        monkeypatch.setitem(os.environ, 'FLASK_APP', 'cliapp.routesapp:simpleroute_app')\n-        result = runner.invoke(cli, ['routes'], catch_exceptions=False)\n-        assert result.exit_code == 0\n-        assert result.output == \"\"\"\\\n-Route                    Endpoint  Methods           \n------------------------------------------------------\n-/simpleroute             simple    HEAD, OPTIONS, GET\n-/static/<path:filename>  static    HEAD, OPTIONS, GET\n-\"\"\"\n+            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n+            def yyy_get_post(x, y):\n+                pass\n \n-    def test_only_POST_route(self, runner, monkeypatch):\n-        monkeypatch.setitem(os.environ, 'FLASK_APP', 'cliapp.routesapp:only_POST_route_app')\n-        result = runner.invoke(cli, ['routes'], catch_exceptions=False)\n+            @app.route('/zzz_post', methods=['POST'])\n+            def aaa_post():\n+                pass\n+\n+            return app\n+\n+        cli = FlaskGroup(create_app=create_app)\n+        return partial(runner.invoke, cli)\n+\n+    def expect_order(self, order, output):\n+        # skip the header and match the start of each row\n+        for expect, line in zip(order, output.splitlines()[2:]):\n+            # do this instead of startswith for nicer pytest output\n+            assert line[:len(expect)] == expect\n+\n+    def test_simple(self, invoke):\n+        result = invoke(['routes'])\n         assert result.exit_code == 0\n-        assert result.output == \"\"\"\\\n-Route                    Endpoint   Methods           \n-------------------------------------------------------\n-/only-post               only_post  POST, OPTIONS     \n-/static/<path:filename>  static     HEAD, OPTIONS, GET\n-\"\"\"\n+        self.expect_order(\n+            ['aaa_post', 'static', 'yyy_get_post'],\n+            result.output\n+        )\n+\n+    def test_sort(self, invoke):\n+        default_output = invoke(['routes']).output\n+        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n+        assert default_output == endpoint_output\n+        self.expect_order(\n+            ['static', 'yyy_get_post', 'aaa_post'],\n+            invoke(['routes', '-s', 'methods']).output\n+        )\n+        self.expect_order(\n+            ['yyy_get_post', 'static', 'aaa_post'],\n+            invoke(['routes', '-s', 'rule']).output\n+        )\n+        self.expect_order(\n+            ['aaa_post', 'yyy_get_post', 'static'],\n+            invoke(['routes', '-s', 'match']).output\n+        )\n+\n+    def test_all_methods(self, invoke):\n+        output = invoke(['routes']).output\n+        assert 'GET, HEAD, OPTIONS, POST' not in output\n+        output = invoke(['routes', '--all-methods']).output\n+        assert 'GET, HEAD, OPTIONS, POST' in output\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#75b85656ddad86cbf0c3adb1128b758242793929", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 536 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -38,6 +38,14 @@ extensions = [\n     'flaskdocext'\n ]\n \n+try:\n+    __import__('sphinxcontrib.log_cabinet')\n+except ImportError:\n+    print('sphinxcontrib-log-cabinet is not installed.')\n+    print('Changelog directives will not be re-organized.')\n+else:\n+    extensions.append('sphinxcontrib.log_cabinet')\n+\n # Add any paths that contain templates here, relative to this directory.\n templates_path = ['_templates']\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#160999e88241137c73aaa49e352dcbf2829fad5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 482 | Contributors (this commit): 22 | Commits (past 90d): 5 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ import uuid\n from datetime import date\n from .globals import current_app, request\n from ._compat import text_type, PY2\n-from .ctx import has_request_context\n \n from werkzeug.http import http_date\n from jinja2 import Markup\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c3d49e29ea42d2f468bc780c15683ca197b50d02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -6/3 | Churn Δ: 26 | Churn Cumulative: 2949 | Contributors (this commit): 60 | Commits (past 90d): 18 | Contributors (cumulative): 67 | DMM Complexity: 0.0\n\nDIFF:\n@@ -976,3 +976,23 @@ def total_seconds(td):\n     :rtype: int\n     \"\"\"\n     return td.days * 60 * 60 * 24 + td.seconds\n+\n+def is_ip(ip):\n+    \"\"\"Returns the if the string received is an IP or not.\n+\n+    :param string: the string to check if it an IP or not\n+    :param var_name: the name of the string that is being checked\n+\n+    :returns: True if string is an IP, False if not\n+    :rtype: boolean\n+    \"\"\"\n+    import socket\n+\n+    for family in (socket.AF_INET, socket.AF_INET6):\n+        try:\n+            socket.inet_pton(family, ip)\n+        except socket.error:\n+            pass\n+        else:\n+            return True\n+    return False\n\n@@ -11,13 +11,14 @@\n \n import uuid\n import hashlib\n+from warnings import warn\n from base64 import b64encode, b64decode\n from datetime import datetime\n from werkzeug.http import http_date, parse_date\n from werkzeug.datastructures import CallbackDict\n from . import Markup, json\n from ._compat import iteritems, text_type\n-from .helpers import total_seconds\n+from .helpers import total_seconds, is_ip\n \n from itsdangerous import URLSafeTimedSerializer, BadSignature\n \n@@ -336,6 +337,9 @@ class SecureCookieSessionInterface(SessionInterface):\n \n     def save_session(self, app, session, response):\n         domain = self.get_cookie_domain(app)\n+        if domain is not None:\n+            if is_ip(domain):\n+                warnings.warn(\"IP introduced in SESSION_COOKIE_DOMAIN\", RuntimeWarning)\n         path = self.get_cookie_path(app)\n \n         # Delete case.  If there is no session we bail early.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a6579430649d6514384ca592730c6995e140c43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 45 | Churn Cumulative: 3185 | Contributors (this commit): 58 | Commits (past 90d): 17 | Contributors (cumulative): 71 | DMM Complexity: 0.0\n\nDIFF:\n@@ -638,18 +638,24 @@ def safe_join(directory, *pathnames):\n     :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n             paths fall out of its boundaries.\n     \"\"\"\n+\n+    parts = [directory]\n+\n     for filename in pathnames:\n         if filename != '':\n             filename = posixpath.normpath(filename)\n-        for sep in _os_alt_seps:\n-            if sep in filename:\n+\n+        if (\n+            any(sep in filename for sep in _os_alt_seps)\n+            or os.path.isabs(filename)\n+            or filename == '..'\n+            or filename.startswith('../')\n+        ):\n             raise NotFound()\n-        if os.path.isabs(filename) or \\\n-           filename == '..' or \\\n-           filename.startswith('../'):\n-            raise NotFound()\n-        directory = os.path.join(directory, filename)\n-    return directory\n+\n+        parts.append(filename)\n+\n+    return posixpath.join(*parts)\n \n \n def send_from_directory(directory, filename, **options):\n\n@@ -903,21 +903,20 @@ class TestStreaming(object):\n \n \n class TestSafeJoin(object):\n-\n     def test_safe_join(self):\n         # Valid combinations of *args and expected joined paths.\n         passing = (\n             (('a/b/c',), 'a/b/c'),\n-            (('/', 'a/', 'b/', 'c/', ), '/a/b/c'),\n-            (('a', 'b', 'c', ), 'a/b/c'),\n-            (('/a', 'b/c', ), '/a/b/c'),\n-            (('a/b', 'X/../c'), 'a/b/c', ),\n-            (('/a/b', 'c/X/..'), '/a/b/c', ),\n+            (('/', 'a/', 'b/', 'c/'), '/a/b/c'),\n+            (('a', 'b', 'c'), 'a/b/c'),\n+            (('/a', 'b/c'), '/a/b/c'),\n+            (('a/b', 'X/../c'), 'a/b/c'),\n+            (('/a/b', 'c/X/..'), '/a/b/c'),\n             # If last path is '' add a slash\n-            (('/a/b/c', '', ), '/a/b/c/', ),\n+            (('/a/b/c', ''), '/a/b/c/'),\n             # Preserve dot slash\n-            (('/a/b/c', './', ), '/a/b/c/.', ),\n-            (('a/b/c', 'X/..'), 'a/b/c/.', ),\n+            (('/a/b/c', './'), '/a/b/c/.'),\n+            (('a/b/c', 'X/..'), 'a/b/c/.'),\n             # Base directory is always considered safe\n             (('../', 'a/b/c'), '../a/b/c'),\n             (('/..', ), '/..'),\n@@ -931,12 +930,12 @@ class TestSafeJoin(object):\n         failing = (\n             # path.isabs and ``..'' checks\n             ('/a', 'b', '/c'),\n-            ('/a', '../b/c', ),\n+            ('/a', '../b/c'),\n             ('/a', '..', 'b/c'),\n             # Boundaries violations after path normalization\n-            ('/a', 'b/../b/../../c', ),\n+            ('/a', 'b/../b/../../c'),\n             ('/a', 'b', 'c/../..'),\n-            ('/a', 'b/../../c', ),\n+            ('/a', 'b/../../c'),\n         )\n \n         for args in failing:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f7c35bf0d51d1ae02709e39fe29110e12f64fb87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 45 | Churn Cumulative: 3230 | Contributors (this commit): 58 | Commits (past 90d): 19 | Contributors (cumulative): 71 | DMM Complexity: 0.0\n\nDIFF:\n@@ -619,18 +619,24 @@ def safe_join(directory, *pathnames):\n     :raises: :class:`~werkzeug.exceptions.NotFound` if one or more passed\n             paths fall out of its boundaries.\n     \"\"\"\n+\n+    parts = [directory]\n+\n     for filename in pathnames:\n         if filename != '':\n             filename = posixpath.normpath(filename)\n-        for sep in _os_alt_seps:\n-            if sep in filename:\n+\n+        if (\n+            any(sep in filename for sep in _os_alt_seps)\n+            or os.path.isabs(filename)\n+            or filename == '..'\n+            or filename.startswith('../')\n+        ):\n             raise NotFound()\n-        if os.path.isabs(filename) or \\\n-           filename == '..' or \\\n-           filename.startswith('../'):\n-            raise NotFound()\n-        directory = os.path.join(directory, filename)\n-    return directory\n+\n+        parts.append(filename)\n+\n+    return posixpath.join(*parts)\n \n \n def send_from_directory(directory, filename, **options):\n\n@@ -846,21 +846,20 @@ class TestStreaming(object):\n \n \n class TestSafeJoin(object):\n-\n     def test_safe_join(self):\n         # Valid combinations of *args and expected joined paths.\n         passing = (\n             (('a/b/c',), 'a/b/c'),\n-            (('/', 'a/', 'b/', 'c/', ), '/a/b/c'),\n-            (('a', 'b', 'c', ), 'a/b/c'),\n-            (('/a', 'b/c', ), '/a/b/c'),\n-            (('a/b', 'X/../c'), 'a/b/c', ),\n-            (('/a/b', 'c/X/..'), '/a/b/c', ),\n+            (('/', 'a/', 'b/', 'c/'), '/a/b/c'),\n+            (('a', 'b', 'c'), 'a/b/c'),\n+            (('/a', 'b/c'), '/a/b/c'),\n+            (('a/b', 'X/../c'), 'a/b/c'),\n+            (('/a/b', 'c/X/..'), '/a/b/c'),\n             # If last path is '' add a slash\n-            (('/a/b/c', '', ), '/a/b/c/', ),\n+            (('/a/b/c', ''), '/a/b/c/'),\n             # Preserve dot slash\n-            (('/a/b/c', './', ), '/a/b/c/.', ),\n-            (('a/b/c', 'X/..'), 'a/b/c/.', ),\n+            (('/a/b/c', './'), '/a/b/c/.'),\n+            (('a/b/c', 'X/..'), 'a/b/c/.'),\n             # Base directory is always considered safe\n             (('../', 'a/b/c'), '../a/b/c'),\n             (('/..', ), '/..'),\n@@ -874,12 +873,12 @@ class TestSafeJoin(object):\n         failing = (\n             # path.isabs and ``..'' checks\n             ('/a', 'b', '/c'),\n-            ('/a', '../b/c', ),\n+            ('/a', '../b/c'),\n             ('/a', '..', 'b/c'),\n             # Boundaries violations after path normalization\n-            ('/a', 'b/../b/../../c', ),\n+            ('/a', 'b/../b/../../c'),\n             ('/a', 'b', 'c/../..'),\n-            ('/a', 'b/../../c', ),\n+            ('/a', 'b/../../c'),\n         )\n \n         for args in failing:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
