{"custom_id": "flask#88f671aaaef334caf3231095b119cac094ff5ffb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 8 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 42 | Churn Cumulative: 1162 | Contributors (this commit): 5 | Commits (past 90d): 41 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -275,6 +275,41 @@ else:\n     _tojson_filter = json.dumps\n \n \n+class _ModuleSetupState(object):\n+\n+    def __init__(self, app, url_prefix=None):\n+        self.app = app\n+        self.url_prefix = url_prefix\n+\n+\n+class Module(object):\n+    \"\"\"Container object that enables pluggable applications\"\"\"\n+\n+    def __init__(self, name, url_prefix=None, package_name=None):\n+        self.name = name\n+        self.package_name = package_name\n+        self.url_prefix = url_prefix\n+        self._register_events = []\n+\n+    def route(self, rule, **options):\n+        def decorator(f):\n+            self.add_url_rule(rule, f.__name__, f, **options)\n+            return f\n+        return decorator\n+\n+    def add_url_rule(self, rule, endpoint, view_func=None, **options):\n+        self._record(self._register_rule, (rule, endpoint, view_func, options))\n+\n+    def _record(self, func, args):\n+        self._register_events.append((func, args))\n+\n+    def _register_rule(self, state, rule, endpoint, view_func, options):\n+        if self.url_prefix:\n+            rule = state.url_prefix + rule\n+        self.app.add_url_rule(rule, '%s.%s' % (self.name, endpoint),\n+                              view_func, **options)\n+\n+\n class Flask(object):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -506,6 +541,13 @@ class Flask(object):\n         \"\"\"\n         session.save_cookie(response, self.session_cookie_name)\n \n+    def register_module(self, module, **options):\n+        \"\"\"Registers a module with this application.\"\"\"\n+        options.setdefault('url_prefix', self.url_prefix)\n+        state = _ModuleSetupState(app, options)\n+        for func, args in module._register_events:\n+            func(state, *args)\n+\n     def add_url_rule(self, rule, endpoint, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a862ead5f22f9d4592c1c85bda285a4ded59b631", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -6/3 | Churn Δ: 21 | Churn Cumulative: 1521 | Contributors (this commit): 5 | Commits (past 90d): 56 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -687,7 +687,7 @@ class Flask(object):\n         \"\"\"Converts the return value from a view function to a real\n         response object that is an instance of :attr:`response_class`.\n \n-        The following types are allowd for `rv`:\n+        The following types are allowed for `rv`:\n \n         ======================= ===========================================\n         :attr:`response_class`  the object is returned unchanged\n@@ -703,6 +703,11 @@ class Flask(object):\n \n         :param rv: the return value from the view function\n         \"\"\"\n+        if rv is None:\n+            from warnings import warn\n+            warn(Warning('View function did not return a response'),\n+                 stacklevel=2)\n+            return u''\n         if isinstance(rv, self.response_class):\n             return rv\n         if isinstance(rv, basestring):\n\n@@ -15,6 +15,7 @@ import sys\n import flask\n import unittest\n import tempfile\n+import warnings\n \n \n example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n@@ -224,6 +225,19 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             assert flask.url_for('static', filename='index.html') \\\n                 == '/static/index.html'\n \n+    def test_none_response(self):\n+        warnings.filterwarnings('error', 'View function did not return')\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def test():\n+            return None\n+        try:\n+            app.test_client().get('/')\n+        except Warning:\n+            pass\n+        else:\n+            assert \"Expected warning\"\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#444e6425312a16589130ff36f2830b6f97fbbd4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 10 | Methods Changed: 8 | Complexity Δ (Sum/Max): 14/14 | Churn Δ: 40 | Churn Cumulative: 1209 | Contributors (this commit): 5 | Commits (past 90d): 43 | Contributors (cumulative): 5 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -56,7 +56,7 @@ class Request(RequestBase):\n     :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n \n-    endpoint = view_args = None\n+    endpoint = view_args = routing_exception = None\n \n     @cached_property\n     def json(self):\n@@ -117,6 +117,12 @@ class _RequestContext(object):\n         self.g = _RequestGlobals()\n         self.flashes = None\n \n+        try:\n+            self.request.endpoint, self.request.view_args = \\\n+                self.url_adapter.match()\n+        except HTTPException, e:\n+            self.request.routing_exception = e\n+\n     def __enter__(self):\n         _request_ctx_stack.push(self)\n \n@@ -134,7 +140,12 @@ def url_for(endpoint, **values):\n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n     \"\"\"\n-    return _request_ctx_stack.top.url_adapter.build(endpoint, values)\n+    ctx = _request_ctx_stack.top\n+    if '.' not in endpoint and \\\n+       ctx.request.endpoint is not None \\\n+       and '.' in ctx.request.endpoint:\n+        endpoint = ctx.request.endpoint.rsplit('.', 1)[0] + '.' + endpoint\n+    return ctx.url_adapter.build(endpoint.lstrip('.'), values)\n \n \n def get_template_attribute(template_name, attribute):\n@@ -548,7 +559,7 @@ class Flask(object):\n         for func, args in module._register_events:\n             func(state, *args)\n \n-    def add_url_rule(self, rule, endpoint, view_func=None, **options):\n+    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n         endpoint.\n@@ -571,7 +582,7 @@ class Flask(object):\n             app.view_functions['index'] = index\n \n         .. versionchanged:: 0.2\n-           `view_func` parameter added\n+           `view_func` parameter added.\n \n         :param rule: the URL rule as string\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n@@ -582,6 +593,10 @@ class Flask(object):\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object\n         \"\"\"\n+        if endpoint is None:\n+            assert view_func is not None, 'expected view func if endpoint ' \\\n+                                          'is not provided.'\n+            endpoint = view_func.__name__\n         options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n         self.url_map.add(Rule(rule, **options))\n@@ -654,7 +669,7 @@ class Flask(object):\n                         :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n         def decorator(f):\n-            self.add_url_rule(rule, f.__name__, f, **options)\n+            self.add_url_rule(rule, None, f, **options)\n             return f\n         return decorator\n \n@@ -696,24 +711,17 @@ class Flask(object):\n         self.template_context_processors.append(f)\n         return f\n \n-    def match_request(self):\n-        \"\"\"Matches the current request against the URL map and also\n-        stores the endpoint and view arguments on the request object\n-        is successful, otherwise the exception is stored.\n-        \"\"\"\n-        rv = _request_ctx_stack.top.url_adapter.match()\n-        request.endpoint, request.view_args = rv\n-        return rv\n-\n     def dispatch_request(self):\n         \"\"\"Does the request dispatching.  Matches the URL and returns the\n         return value of the view or error handler.  This does not have to\n         be a response object.  In order to convert the return value to a\n         proper response object, call :func:`make_response`.\n         \"\"\"\n+        req = _request_ctx_stack.top.request\n         try:\n-            endpoint, values = self.match_request()\n-            return self.view_functions[endpoint](**values)\n+            if req.routing_exception is not None:\n+                raise req.routing_exception\n+            return self.view_functions[req.endpoint](**req.view_args)\n         except HTTPException, e:\n             handler = self.error_handlers.get(e.code)\n             if handler is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e0148a00c0f468784052926f80e8112be7686470", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 11 | Methods Changed: 11 | Complexity Δ (Sum/Max): 11/9 | Churn Δ: 80 | Churn Cumulative: 1641 | Contributors (this commit): 5 | Commits (past 90d): 59 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,6 +13,7 @@ from __future__ import with_statement\n import os\n import sys\n \n+from itertools import chain\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n@@ -58,6 +59,12 @@ class Request(RequestBase):\n \n     endpoint = view_args = routing_exception = None\n \n+    @property\n+    def module(self):\n+        \"\"\"The name of the current module\"\"\"\n+        if self.endpoint and '.' in self.endpoint:\n+            return self.endpoint.rsplit('.', 1)[0]\n+\n     @cached_property\n     def json(self):\n         \"\"\"If the mimetype is `application/json` this will contain the\n@@ -141,11 +148,13 @@ def url_for(endpoint, **values):\n     :param values: the variable arguments of the URL rule\n     \"\"\"\n     ctx = _request_ctx_stack.top\n-    if '.' not in endpoint and \\\n-       ctx.request.endpoint is not None \\\n-       and '.' in ctx.request.endpoint:\n-        endpoint = ctx.request.endpoint.rsplit('.', 1)[0] + '.' + endpoint\n-    return ctx.url_adapter.build(endpoint.lstrip('.'), values)\n+    if '.' not in endpoint:\n+        mod = ctx.request.module\n+        if mod is not None:\n+            endpoint = mod + '.' + endpoint\n+    elif endpoint.startswith('.'):\n+        endpoint = endpoint[1:]\n+    return ctx.url_adapter.build(endpoint, values)\n \n \n def get_template_attribute(template_name, attribute):\n@@ -311,6 +320,16 @@ class Module(object):\n     def add_url_rule(self, rule, endpoint, view_func=None, **options):\n         self._record(self._register_rule, (rule, endpoint, view_func, options))\n \n+    def before_request(self, f):\n+        self._record(lambda s: s.app.before_request_funcs\n+            .setdefault(self.name, []).append(f), ())\n+        return f\n+\n+    def after_request(self, f):\n+        self._record(lambda s: s.app.after_request_funcs\n+            .setdefault(self.name, []).append(f), ())\n+        return f\n+\n     def _record(self, func, args):\n         self._register_events.append((func, args))\n \n@@ -402,14 +421,14 @@ class Flask(object):\n         #: getting hold of the currently logged in user.\n         #: To register a function here, use the :meth:`before_request`\n         #: decorator.\n-        self.before_request_funcs = []\n+        self.before_request_funcs = {}\n \n         #: a list of functions that are called at the end of the\n         #: request.  The function is passed the current response\n         #: object and modify it in place or replace it.\n         #: To register a function here use the :meth:`after_request`\n         #: decorator.\n-        self.after_request_funcs = []\n+        self.after_request_funcs = {}\n \n         #: a list of functions that are called without arguments\n         #: to populate the template context.  Each returns a dictionary\n@@ -698,12 +717,12 @@ class Flask(object):\n \n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n-        self.before_request_funcs.append(f)\n+        self.before_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     def after_request(self, f):\n         \"\"\"Register a function to be run after each request.\"\"\"\n-        self.after_request_funcs.append(f)\n+        self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     def context_processor(self, f):\n@@ -768,7 +787,11 @@ class Flask(object):\n         if it was the return value from the view and further\n         request handling is stopped.\n         \"\"\"\n-        for func in self.before_request_funcs:\n+        funcs = self.before_request_funcs.get(None, ())\n+        mod = request.module\n+        if mod and mod in self.before_request_funcs:\n+            funcs = chain(funcs, self.before_request_funcs[mod])\n+        for func in funcs:\n             rv = func()\n             if rv is not None:\n                 return rv\n@@ -782,10 +805,14 @@ class Flask(object):\n         :return: a new response object or the same, has to be an\n                  instance of :attr:`response_class`.\n         \"\"\"\n-        session = _request_ctx_stack.top.session\n-        if not isinstance(session, _NullSession):\n-            self.save_session(session, response)\n-        for handler in self.after_request_funcs:\n+        ctx = _request_ctx_stack.top\n+        mod = ctx.request.module\n+        if not isinstance(ctx.session, _NullSession):\n+            self.save_session(ctx.session, response)\n+        funcs = self.after_request_funcs.get(None, ())\n+        if mod and mod in self.after_request_funcs:\n+            funcs = chain(funcs, self.after_request_funcs[mod])\n+        for handler in funcs:\n             response = handler(response)\n         return response\n \n\n@@ -298,6 +298,31 @@ class TemplatingTestCase(unittest.TestCase):\n             assert macro('World') == 'Hello World!'\n \n \n+class ModuleTestCase(unittest.TestCase):\n+\n+    def test_basic_module(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module('admin', url_prefix='/admin')\n+        @admin.route('/')\n+        def index():\n+            return 'admin index'\n+        @admin.route('/login')\n+        def login():\n+            return 'admin login'\n+        @admin.route('/logout')\n+        def logout():\n+            return 'admin logout'\n+        @app.route('/')\n+        def index():\n+            return 'the index'\n+        app.register_module('admin', admin)\n+        c = app.test_client()\n+        assert c.get('/').data == 'the index'\n+        assert c.get('/admin/').data == 'admin index'\n+        assert c.get('/admin/login').data == 'admin login'\n+        assert c.get('/admin/logout').data == 'admin logout'\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5c52fe980eda6065edcc39e6dd346636b1c40768", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 7 | Methods Changed: 11 | Complexity Δ (Sum/Max): 8/7 | Churn Δ: 48 | Churn Cumulative: 1689 | Contributors (this commit): 5 | Commits (past 90d): 61 | Contributors (cumulative): 8 | DMM Complexity: 0.6829268292682927\n\nDIFF:\n@@ -336,7 +336,7 @@ class Module(object):\n     def _register_rule(self, state, rule, endpoint, view_func, options):\n         if self.url_prefix:\n             rule = state.url_prefix + rule\n-        self.app.add_url_rule(rule, '%s.%s' % (self.name, endpoint),\n+        state.app.add_url_rule(rule, '%s.%s' % (self.name, endpoint),\n                                view_func, **options)\n \n \n@@ -573,8 +573,8 @@ class Flask(object):\n \n     def register_module(self, module, **options):\n         \"\"\"Registers a module with this application.\"\"\"\n-        options.setdefault('url_prefix', self.url_prefix)\n-        state = _ModuleSetupState(app, options)\n+        options.setdefault('url_prefix', module.url_prefix)\n+        state = _ModuleSetupState(self, **options)\n         for func, args in module._register_events:\n             func(state, *args)\n \n@@ -809,9 +809,11 @@ class Flask(object):\n         mod = ctx.request.module\n         if not isinstance(ctx.session, _NullSession):\n             self.save_session(ctx.session, response)\n-        funcs = self.after_request_funcs.get(None, ())\n+        funcs = ()\n         if mod and mod in self.after_request_funcs:\n             funcs = chain(funcs, self.after_request_funcs[mod])\n+        if None in self.after_request_funcs:\n+            funcs = chain(funcs, self.after_request_funcs[None])\n         for handler in funcs:\n             response = handler(response)\n         return response\n\n@@ -315,13 +315,48 @@ class ModuleTestCase(unittest.TestCase):\n         @app.route('/')\n         def index():\n             return 'the index'\n-        app.register_module('admin', admin)\n+        app.register_module(admin)\n         c = app.test_client()\n         assert c.get('/').data == 'the index'\n         assert c.get('/admin/').data == 'admin index'\n         assert c.get('/admin/login').data == 'admin login'\n         assert c.get('/admin/logout').data == 'admin logout'\n \n+    def test_request_processing(self):\n+        catched = []\n+        app = flask.Flask(__name__)\n+        admin = flask.Module('admin', url_prefix='/admin')\n+        @admin.before_request\n+        def before_admin_request():\n+            catched.append('before-admin')\n+        @admin.after_request\n+        def after_admin_request(response):\n+            catched.append('after-admin')\n+            return response\n+        @admin.route('/')\n+        def index():\n+            return 'the admin'\n+        @app.before_request\n+        def before_request():\n+            catched.append('before-app')\n+        @app.after_request\n+        def after_request(response):\n+            catched.append('after-app')\n+            return response\n+        @app.route('/')\n+        def index():\n+            return 'the index'\n+        app.register_module(admin)\n+        c = app.test_client()\n+\n+        assert c.get('/').data == 'the index'\n+        assert catched == ['before-app', 'after-app']\n+        del catched[:]\n+\n+        assert c.get('/admin/').data == 'the admin'\n+        assert catched == ['before-app', 'before-admin',\n+                           'after-admin', 'after-app']\n+\n \n def suite():\n     from minitwit_tests import MiniTwitTestCase\n@@ -334,6 +369,7 @@ def suite():\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n     suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n     suite.addTest(unittest.makeSuite(FlaskrTestCase))\n+    suite.addTest(unittest.makeSuite(ModuleTestCase))\n     return suite\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2f181e19496a1fe693d9b20260fe961bb406c53b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1277 | Contributors (this commit): 5 | Commits (past 90d): 46 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -305,9 +305,8 @@ class _ModuleSetupState(object):\n class Module(object):\n     \"\"\"Container object that enables pluggable applications\"\"\"\n \n-    def __init__(self, name, url_prefix=None, package_name=None):\n+    def __init__(self, name, url_prefix=None):\n         self.name = name\n-        self.package_name = package_name\n         self.url_prefix = url_prefix\n         self._register_events = []\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#67f4b0f31538832f06b9351d15e30c85f449ac7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 96 | Lines Deleted: 73 | Files Changed: 2 | Hunks: 24 | Methods Changed: 19 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 169 | Churn Cumulative: 1861 | Contributors (this commit): 5 | Commits (past 90d): 64 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -295,6 +295,43 @@ else:\n     _tojson_filter = json.dumps\n \n \n+class _PackageBoundObject(object):\n+\n+    def __init__(self, import_name):\n+        #: the name of the package or module.  Do not change this once\n+        #: it was set by the constructor.\n+        self.import_name = import_name\n+\n+        #: where is the app root located?\n+        self.root_path = _get_package_path(self.import_name)\n+\n+    def open_resource(self, resource):\n+        \"\"\"Opens a resource from the application's resource folder.  To see\n+        how this works, consider the following folder structure::\n+\n+            /myapplication.py\n+            /schemal.sql\n+            /static\n+                /style.css\n+            /template\n+                /layout.html\n+                /index.html\n+\n+        If you want to open the `schema.sql` file you would do the\n+        following::\n+\n+            with app.open_resource('schema.sql') as f:\n+                contents = f.read()\n+                do_something_with(contents)\n+\n+        :param resource: the name of the resource.  To access resources within\n+                         subfolders use forward slashes as separator.\n+        \"\"\"\n+        if pkg_resources is None:\n+            return open(os.path.join(self.root_path, resource), 'rb')\n+        return pkg_resources.resource_stream(self.import_name, resource)\n+\n+\n class _ModuleSetupState(object):\n \n     def __init__(self, app, url_prefix=None):\n@@ -302,44 +339,53 @@ class _ModuleSetupState(object):\n         self.url_prefix = url_prefix\n \n \n-class Module(object):\n+class Module(_PackageBoundObject):\n     \"\"\"Container object that enables pluggable applications\"\"\"\n \n-    def __init__(self, name, url_prefix=None):\n+    def __init__(self, import_name, name=None, url_prefix=None):\n+        if name is None:\n+            assert '.' in import_name, 'name required if package name ' \\\n+                'does not point to a submodule'\n+            name = import_name.rsplit('.', 1)[1]\n+        _PackageBoundObject.__init__(self, import_name)\n         self.name = name\n         self.url_prefix = url_prefix\n         self._register_events = []\n \n     def route(self, rule, **options):\n+        \"\"\"Like :meth:`flask.Flask.route` but for a module\"\"\"\n         def decorator(f):\n             self.add_url_rule(rule, f.__name__, f, **options)\n             return f\n         return decorator\n \n     def add_url_rule(self, rule, endpoint, view_func=None, **options):\n-        self._record(self._register_rule, (rule, endpoint, view_func, options))\n+        \"\"\"Like :meth:`flask.Flask.add_url_rule` but for a module\"\"\"\n+        def register_rule(state):\n+            the_rule = rule\n+            if self.url_prefix:\n+                the_rule = state.url_prefix + rule\n+            state.app.add_url_rule(the_rule, '%s.%s' % (self.name, endpoint),\n+                                   view_func, **options)\n+        self._record(register_rule)\n \n     def before_request(self, f):\n+        \"\"\"Like :meth:`flask.Flask.before_request` but for a module\"\"\"\n         self._record(lambda s: s.app.before_request_funcs\n-            .setdefault(self.name, []).append(f), ())\n+            .setdefault(self.name, []).append(f))\n         return f\n \n     def after_request(self, f):\n+        \"\"\"Like :meth:`flask.Flask.after_request` but for a module\"\"\"\n         self._record(lambda s: s.app.after_request_funcs\n-            .setdefault(self.name, []).append(f), ())\n+            .setdefault(self.name, []).append(f))\n         return f\n \n-    def _record(self, func, args):\n-        self._register_events.append((func, args))\n-\n-    def _register_rule(self, state, rule, endpoint, view_func, options):\n-        if self.url_prefix:\n-            rule = state.url_prefix + rule\n-        state.app.add_url_rule(rule, '%s.%s' % (self.name, endpoint),\n-                               view_func, **options)\n+    def _record(self, func):\n+        self._register_events.append(func)\n \n \n-class Flask(object):\n+class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n     application.  Once it is created it will act as a central registry for\n@@ -386,7 +432,9 @@ class Flask(object):\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n-    def __init__(self, package_name):\n+    def __init__(self, import_name):\n+        _PackageBoundObject.__init__(self, import_name)\n+\n         #: the debug flag.  Set this to `True` to enable debugging of\n         #: the application.  In debug mode the debugger will kick in\n         #: when an unhandled exception ocurrs and the integrated server\n@@ -394,13 +442,6 @@ class Flask(object):\n         #: code are detected.\n         self.debug = False\n \n-        #: the name of the package or module.  Do not change this once\n-        #: it was set by the constructor.\n-        self.package_name = package_name\n-\n-        #: where is the app root located?\n-        self.root_path = _get_package_path(self.package_name)\n-\n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n         #: the values are the function objects themselves.\n@@ -414,27 +455,31 @@ class Flask(object):\n         #: decorator.\n         self.error_handlers = {}\n \n-        #: a list of functions that should be called at the beginning\n-        #: of the request before request dispatching kicks in.  This\n-        #: can for example be used to open database connections or\n-        #: getting hold of the currently logged in user.\n-        #: To register a function here, use the :meth:`before_request`\n-        #: decorator.\n+        #: a dictionary with lists of functions that should be called at the\n+        #: beginning of the request.  The key of the dictionary is the name of\n+        #: the module this function is active for, `None` for all requests.\n+        #: This can for example be used to open database connections or\n+        #: getting hold of the currently logged in user.  To register a\n+        #: function here, use the :meth:`before_request` decorator.\n         self.before_request_funcs = {}\n \n-        #: a list of functions that are called at the end of the\n-        #: request.  The function is passed the current response\n-        #: object and modify it in place or replace it.\n-        #: To register a function here use the :meth:`after_request`\n-        #: decorator.\n+        #: a dictionary with lists of functions that should be called after\n+        #: each request.  The key of the dictionary is the name of the module\n+        #: this function is active for, `None` for all requests.  This can for\n+        #: example be used to open database connections or getting hold of the\n+        #: currently logged in user.  To register a function here, use the\n+        #: :meth:`before_request` decorator.\n         self.after_request_funcs = {}\n \n-        #: a list of functions that are called without arguments\n-        #: to populate the template context.  Each returns a dictionary\n-        #: that the template context is updated with.\n-        #: To register a function here, use the :meth:`context_processor`\n-        #: decorator.\n-        self.template_context_processors = [_default_template_ctx_processor]\n+        #: a dictionary with list of functions that are called without arguments\n+        #: to populate the template context.  They key of the dictionary is the\n+        #: name of the module this function is active for, `None` for all\n+        #: requests.  Each returns a dictionary that the template context is\n+        #: updated with.  To register a function here, use the\n+        #: :meth:`context_processor` decorator.\n+        self.template_context_processors = {\n+            None: [_default_template_ctx_processor]\n+        }\n \n         #: the :class:`~werkzeug.routing.Map` for this instance.  You can use\n         #: this to change the routing converters after the class was created\n@@ -457,7 +502,7 @@ class Flask(object):\n             self.add_url_rule(self.static_path + '/<filename>',\n                               build_only=True, endpoint='static')\n             if pkg_resources is not None:\n-                target = (self.package_name, 'static')\n+                target = (self.import_name, 'static')\n             else:\n                 target = os.path.join(self.root_path, 'static')\n             self.wsgi_app = SharedDataMiddleware(self.wsgi_app, {\n@@ -483,7 +528,7 @@ class Flask(object):\n         \"\"\"\n         if pkg_resources is None:\n             return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n-        return PackageLoader(self.package_name)\n+        return PackageLoader(self.import_name)\n \n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n@@ -492,7 +537,11 @@ class Flask(object):\n         :param context: the context as a dictionary that is updated in place\n                         to add extra variables.\n         \"\"\"\n-        for func in self.template_context_processors:\n+        funcs = self.template_context_processors[None]\n+        mod = _request_ctx_stack.top.request.module\n+        if mod is not None and mod in self.template_context_processors:\n+            funcs = chain(funcs, self.template_context_processors[mod])\n+        for func in funcs:\n             context.update(func())\n \n     def run(self, host='127.0.0.1', port=5000, **options):\n@@ -521,32 +570,6 @@ class Flask(object):\n         from werkzeug import Client\n         return Client(self, self.response_class, use_cookies=True)\n \n-    def open_resource(self, resource):\n-        \"\"\"Opens a resource from the application's resource folder.  To see\n-        how this works, consider the following folder structure::\n-\n-            /myapplication.py\n-            /schemal.sql\n-            /static\n-                /style.css\n-            /template\n-                /layout.html\n-                /index.html\n-\n-        If you want to open the `schema.sql` file you would do the\n-        following::\n-\n-            with app.open_resource('schema.sql') as f:\n-                contents = f.read()\n-                do_something_with(contents)\n-\n-        :param resource: the name of the resource.  To access resources within\n-                         subfolders use forward slashes as separator.\n-        \"\"\"\n-        if pkg_resources is None:\n-            return open(os.path.join(self.root_path, resource), 'rb')\n-        return pkg_resources.resource_stream(self.package_name, resource)\n-\n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n         session data in a signed cookie.  This requires that the\n@@ -574,8 +597,8 @@ class Flask(object):\n         \"\"\"Registers a module with this application.\"\"\"\n         options.setdefault('url_prefix', module.url_prefix)\n         state = _ModuleSetupState(self, **options)\n-        for func, args in module._register_events:\n-            func(state, *args)\n+        for func in module._register_events:\n+            func(state)\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n@@ -726,7 +749,7 @@ class Flask(object):\n \n     def context_processor(self, f):\n         \"\"\"Registers a template context processor function.\"\"\"\n-        self.template_context_processors.append(f)\n+        self.template_context_processors[None].append(f)\n         return f\n \n     def dispatch_request(self):\n\n@@ -302,7 +302,7 @@ class ModuleTestCase(unittest.TestCase):\n \n     def test_basic_module(self):\n         app = flask.Flask(__name__)\n-        admin = flask.Module('admin', url_prefix='/admin')\n+        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n         @admin.route('/')\n         def index():\n             return 'admin index'\n@@ -325,7 +325,7 @@ class ModuleTestCase(unittest.TestCase):\n     def test_request_processing(self):\n         catched = []\n         app = flask.Flask(__name__)\n-        admin = flask.Module('admin', url_prefix='/admin')\n+        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n         @admin.before_request\n         def before_admin_request():\n             catched.append('before-admin')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c0a9f5d0c4f09dbe8b744609552cbbfa9f14fbc0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 84 | Churn Cumulative: 1526 | Contributors (this commit): 5 | Commits (past 90d): 48 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -340,7 +340,49 @@ class _ModuleSetupState(object):\n \n \n class Module(_PackageBoundObject):\n-    \"\"\"Container object that enables pluggable applications\"\"\"\n+    \"\"\"Container object that enables pluggable applications.  A module can\n+    be used to organize larger applications.  They represent blueprints that,\n+    in combination with a :class:`Flask` object are used to create a large\n+    application.\n+\n+    A module is like an application bound to an `import_name`.  Multiple\n+    modules can share the same import names, but in that case a `name` has\n+    to be provided to keep them apart.  If different import names are used,\n+    the rightmost part of the import name is used as name.\n+\n+    Here an example structure for a larger appliation::\n+\n+        /myapplication\n+            /__init__.py\n+            /views\n+                /__init__.py\n+                /admin.py\n+                /frontend.py\n+\n+    The `myapplication/__init__.py` can look like this::\n+\n+        from flask import Flask\n+        from myapplication.views.admin import admin\n+        from myapplication.views.frontend import frontend\n+\n+        app = Flask(__name__)\n+        app.register_module(admin, url_prefix='/admin')\n+        app.register_module(frontend)\n+\n+    And here an example view module (`myapplication/views/admin.py`)::\n+\n+        from flask import Module\n+\n+        admin = Module(__name__)\n+\n+        @admin.route('/')\n+        def index():\n+            pass\n+\n+        @admin.route('/login')\n+        def login():\n+            pass\n+    \"\"\"\n \n     def __init__(self, import_name, name=None, url_prefix=None):\n         if name is None:\n@@ -353,14 +395,18 @@ class Module(_PackageBoundObject):\n         self._register_events = []\n \n     def route(self, rule, **options):\n-        \"\"\"Like :meth:`flask.Flask.route` but for a module\"\"\"\n+        \"\"\"Like :meth:`Flask.route` but for a module.  The endpoint for the\n+        :func:`url_for` function is prefixed with the name of the module.\n+        \"\"\"\n         def decorator(f):\n             self.add_url_rule(rule, f.__name__, f, **options)\n             return f\n         return decorator\n \n     def add_url_rule(self, rule, endpoint, view_func=None, **options):\n-        \"\"\"Like :meth:`flask.Flask.add_url_rule` but for a module\"\"\"\n+        \"\"\"Like :meth:`Flask.add_url_rule` but for a module.  The endpoint for\n+        the :func:`url_for` function is prefixed with the name of the module.\n+        \"\"\"\n         def register_rule(state):\n             the_rule = rule\n             if self.url_prefix:\n@@ -370,17 +416,39 @@ class Module(_PackageBoundObject):\n         self._record(register_rule)\n \n     def before_request(self, f):\n-        \"\"\"Like :meth:`flask.Flask.before_request` but for a module\"\"\"\n+        \"\"\"Like :meth:`Flask.before_request` but for a module.  This function\n+        is only executed before each request that is handled by a function of\n+        that module.\n+        \"\"\"\n         self._record(lambda s: s.app.before_request_funcs\n             .setdefault(self.name, []).append(f))\n         return f\n \n+    def before_app_request(self, f):\n+        \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n+        before each request.\n+        \"\"\"\n+        self._record(lambda s: s.app.before_request_funcs\n+            .setdefault(None, []).append(f))\n+        return f\n+\n     def after_request(self, f):\n-        \"\"\"Like :meth:`flask.Flask.after_request` but for a module\"\"\"\n+        \"\"\"Like :meth:`Flask.after_request` but for a module.  This function\n+        is only executed after each request that is handled by a function of\n+        that module.\n+        \"\"\"\n         self._record(lambda s: s.app.after_request_funcs\n             .setdefault(self.name, []).append(f))\n         return f\n \n+    def after_app_request(self, f):\n+        \"\"\"Like :meth:`Flask.after_request` but for a module.  Such a function\n+        is executed after each request.\n+        \"\"\"\n+        self._record(lambda s: s.app.after_request_funcs\n+            .setdefault(None, []).append(f))\n+        return f\n+\n     def _record(self, func):\n         self._register_events.append(func)\n \n@@ -594,7 +662,11 @@ class Flask(_PackageBoundObject):\n         session.save_cookie(response, self.session_cookie_name)\n \n     def register_module(self, module, **options):\n-        \"\"\"Registers a module with this application.\"\"\"\n+        \"\"\"Registers a module with this application.  The keyword argument\n+        of this function are the same as the ones for the constructor of the\n+        :class:`Module` class and will override the values of the module if\n+        provided.\n+        \"\"\"\n         options.setdefault('url_prefix', module.url_prefix)\n         state = _ModuleSetupState(self, **options)\n         for func in module._register_events:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0da39c76e3c67293aef2234b43aff8728d9002eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 1542 | Contributors (this commit): 5 | Commits (past 90d): 49 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -143,6 +143,19 @@ class _RequestContext(object):\n \n def url_for(endpoint, **values):\n     \"\"\"Generates a URL to the given endpoint with the method provided.\n+    The endpoint is relative to the active module if modules are in use.\n+\n+    Here some examples:\n+\n+    ==================== ======================= =============================\n+    Active Module        Target Endpoint         Target Function\n+    ==================== ======================= =============================\n+    `None`               ``'index'``             `index` of the application\n+    `None`               ``'.index'``            `index` of the application\n+    ``'admin'``          ``'index'``             `index` of the `admin` module\n+    any                  ``'.index'``            `index` of the application\n+    any                  ``'admin.index'``       `index` of the `admin` module\n+    ==================== ======================= =============================\n \n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n@@ -382,6 +395,9 @@ class Module(_PackageBoundObject):\n         @admin.route('/login')\n         def login():\n             pass\n+\n+    For a gentle introduction into modules, checkout the\n+    :ref:`working-with-modules` section.\n     \"\"\"\n \n     def __init__(self, import_name, name=None, url_prefix=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a9bb965b6dcd931cefdc7dd05fa4c672b5dff69c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 8 | Complexity Δ (Sum/Max): -30/0 | Churn Δ: 48 | Churn Cumulative: 2009 | Contributors (this commit): 6 | Commits (past 90d): 68 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,6 +12,7 @@\n from __future__ import with_statement\n import os\n import sys\n+import types\n \n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n@@ -639,6 +640,27 @@ class Flask(object):\n             return f\n         return decorator\n \n+    def template_filter(self, arg=None):\n+        \"\"\"A decorator that is used to register custom template filter.\n+        You can specify a name for the filter, otherwise the function\n+        name will be used. Example::\n+\n+          @app.template_filter\n+          def reverse(s):\n+              return s[::-1]\n+\n+        :param name: the optional name of the filter, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        if type(arg) is types.FunctionType:\n+            self.jinja_env.filters[arg.__name__] = arg\n+            return arg\n+\n+        def decorator(f):\n+            self.jinja_env.filters[arg or f.__name__] = f\n+            return f\n+        return decorator\n+\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n         self.before_request_funcs.append(f)\n\n@@ -311,6 +311,32 @@ class TemplatingTestCase(unittest.TestCase):\n             macro = flask.get_template_attribute('_macro.html', 'hello')\n             assert macro('World') == 'Hello World!'\n \n+    def test_template_filter_not_called(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter\n+        def my_reverse(s):\n+            return s[::-1]\n+        assert 'my_reverse' in  app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+\n+    def test_template_filter_called(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter()\n+        def my_reverse(s):\n+            return s[::-1]\n+        assert 'my_reverse' in  app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+\n+    def test_template_filter_with_name(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter('strrev')\n+        def my_reverse(s):\n+            return s[::-1]\n+        assert 'strrev' in  app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n def suite():\n     from minitwit_tests import MiniTwitTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5c9ef2c44dce5afc99a0b3b539ebaafe9b8ce3c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 21 | Churn Cumulative: 2030 | Contributors (this commit): 6 | Commits (past 90d): 70 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -640,24 +640,20 @@ class Flask(object):\n             return f\n         return decorator\n \n-    def template_filter(self, arg=None):\n+    def template_filter(self, name=None):\n         \"\"\"A decorator that is used to register custom template filter.\n         You can specify a name for the filter, otherwise the function\n         name will be used. Example::\n \n-          @app.template_filter\n+          @app.template_filter()\n           def reverse(s):\n               return s[::-1]\n \n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n         \"\"\"\n-        if type(arg) is types.FunctionType:\n-            self.jinja_env.filters[arg.__name__] = arg\n-            return arg\n-\n         def decorator(f):\n-            self.jinja_env.filters[arg or f.__name__] = f\n+            self.jinja_env.filters[name or f.__name__] = f\n             return f\n         return decorator\n \n\n@@ -311,16 +311,7 @@ class TemplatingTestCase(unittest.TestCase):\n             macro = flask.get_template_attribute('_macro.html', 'hello')\n             assert macro('World') == 'Hello World!'\n \n-    def test_template_filter_not_called(self):\n-        app = flask.Flask(__name__)\n-        @app.template_filter\n-        def my_reverse(s):\n-            return s[::-1]\n-        assert 'my_reverse' in  app.jinja_env.filters.keys()\n-        assert app.jinja_env.filters['my_reverse'] == my_reverse\n-        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n-\n-    def test_template_filter_called(self):\n+    def test_template_filter(self):\n         app = flask.Flask(__name__)\n         @app.template_filter()\n         def my_reverse(s):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4395e9493cc33d49b53889f9f726458f05f1a475", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 23 | Churn Cumulative: 479 | Contributors (this commit): 4 | Commits (past 90d): 20 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -329,6 +329,29 @@ class TemplatingTestCase(unittest.TestCase):\n         assert app.jinja_env.filters['strrev'] == my_reverse\n         assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n+    def test_template_filter_with_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter()\n+        def super_reverse(s):\n+            return s[::-1]\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'dcba'\n+\n+    def test_template_filter_with_name_and_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter('super_reverse')\n+        def my_reverse(s):\n+            return s[::-1]\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'dcba'\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
