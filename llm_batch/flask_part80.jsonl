{"custom_id": "flask#ed9775fb77bc2291473c176937326aadd435f73c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 28 | Churn Cumulative: 1013 | Contributors (this commit): 21 | Commits (past 90d): 4 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -282,7 +282,11 @@ class RequestContext(object):\n         if request is None:\n             request = app.request_class(environ)\n         self.request = request\n+        self.url_adapter = None\n+        try:\n             self.url_adapter = app.create_url_adapter(self.request)\n+        except HTTPException as e:\n+            self.request.routing_exception = e\n         self.flashes = None\n         self.session = session\n \n@@ -305,6 +309,7 @@ class RequestContext(object):\n         # functions.\n         self._after_request_functions = []\n \n+        if self.url_adapter is not None:\n             self.match_request()\n \n     def _get_g(self):\n\n@@ -229,3 +229,26 @@ def test_session_error_pops_context():\n     assert response.status_code == 500\n     assert not flask.request\n     assert not flask.current_app\n+\n+\n+def test_bad_environ_raises_bad_request():\n+    app = flask.Flask(__name__)\n+\n+    @app.route('/')\n+    def index():\n+        # shouldn't get here anyway\n+        assert False\n+\n+    response = app.test_client().get('/', headers={'host': 'ąśź.com'})\n+    assert response.status_code == 400\n+\n+\n+def test_normal_environ_completes():\n+    app = flask.Flask(__name__)\n+\n+    @app.route('/')\n+    def index():\n+        return 'Hello World!'\n+\n+    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n+    assert response.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9b0bd91195828e16887a31fec1ce2ad16999bb0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 39 | Churn Cumulative: 306 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -234,13 +234,44 @@ def test_session_error_pops_context():\n def test_bad_environ_raises_bad_request():\n     app = flask.Flask(__name__)\n \n+    # We cannot use app.test_client() for the Unicode-rich Host header,\n+    # because werkzeug enforces latin1 on Python 2.\n+    # However it works when actually passed to the server.\n+\n+    from flask.testing import make_test_environ_builder\n+    builder = make_test_environ_builder(app)\n+    environ = builder.get_environ()\n+\n+    # use a non-printable character in the Host - this is key to this test\n+    environ['HTTP_HOST'] = u'\\x8a'\n+\n+    with app.request_context(environ):\n+        response = app.full_dispatch_request()\n+    assert response.status_code == 400\n+\n+\n+def test_environ_for_valid_idna_completes():\n+    app = flask.Flask(__name__)\n+\n     @app.route('/')\n     def index():\n-        # shouldn't get here anyway\n-        assert False\n+        return 'Hello World!'\n \n-    response = app.test_client().get('/', headers={'host': 'ąśź.com'})\n-    assert response.status_code == 400\n+    # We cannot use app.test_client() for the Unicode-rich Host header,\n+    # because werkzeug enforces latin1 on Python 2.\n+    # However it works when actually passed to the server.\n+\n+    from flask.testing import make_test_environ_builder\n+    builder = make_test_environ_builder(app)\n+    environ = builder.get_environ()\n+\n+    # these characters are all IDNA-compatible\n+    environ['HTTP_HOST'] = u'ąśźäüжŠßя.com'\n+\n+    with app.request_context(environ):\n+        response = app.full_dispatch_request()\n+\n+    assert response.status_code == 200\n \n \n def test_normal_environ_completes():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2611632c69d46b03cb5321a43103c3fee8705aca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 525 | Contributors (this commit): 25 | Commits (past 90d): 1 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -69,6 +69,7 @@ setup(\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',\n         'Topic :: Software Development :: Libraries :: Application Frameworks',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#49efc4423398e4895cb22a772c4aa4269b4eaa78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 8240 | Contributors (this commit): 104 | Commits (past 90d): 3 | Contributors (cumulative): 117 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1698,16 +1698,17 @@ class Flask(_PackageBoundObject):\n         # we cannot prevent users from trashing it themselves in a custom\n         # trap_http_exception method so that's their fault then.\n \n-        # MultiDict passes the key to the exception, but that's ignored\n-        # when generating the response message. Set an informative\n-        # description for key errors in debug mode or when trapping errors.\n-        if (\n-            (self.debug or self.config['TRAP_BAD_REQUEST_ERRORS'])\n-            and isinstance(e, BadRequestKeyError)\n-            # only set it if it's still the default description\n-            and e.description is BadRequestKeyError.description\n-        ):\n-            e.description = \"KeyError: '{0}'\".format(*e.args)\n+        if isinstance(e, BadRequestKeyError):\n+            if self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]:\n+                # Werkzeug < 0.15 doesn't add the KeyError to the 400\n+                # message, add it in manually.\n+                description = e.get_description()\n+\n+                if e.args[0] not in description:\n+                    e.description = \"KeyError: '{}'\".format(*e.args)\n+            else:\n+                # Werkzeug >= 0.15 does add it, remove it in production\n+                e.args = ()\n \n         if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n             return self.handle_http_exception(e)\n\n@@ -1045,7 +1045,7 @@ def test_trapping_of_bad_request_key_errors(app, client):\n     with pytest.raises(KeyError) as e:\n         client.get(\"/key\")\n     assert e.errisinstance(BadRequest)\n-    assert 'missing_key' in e.value.description\n+    assert 'missing_key' in e.value.get_description()\n     rv = client.get('/abort')\n     assert rv.status_code == 400\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8b567fea2397ae4c8c593efa4da62cc9e7ea9746", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 120 | Files Changed: 1 | Hunks: 21 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 169 | Churn Cumulative: 1730 | Contributors (this commit): 15 | Commits (past 90d): 1 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,168 +1,99 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n \n-import inspect\n-import re\n-\n-from pallets_sphinx_themes import DocVersion, ProjectLink, get_version\n+from pallets_sphinx_themes import ProjectLink, get_version\n \n # Project --------------------------------------------------------------\n \n-project = 'Flask'\n-copyright = '2010 Pallets Team'\n-author = 'Pallets Team'\n-release, version = get_version('Flask')\n+project = \"Flask\"\n+copyright = \"2010 Pallets Team\"\n+author = \"Pallets Team\"\n+release, version = get_version(\"Flask\")\n \n # General --------------------------------------------------------------\n \n-master_doc = 'index'\n-\n+master_doc = \"index\"\n extensions = [\n-    'sphinx.ext.autodoc',\n-    'sphinx.ext.intersphinx',\n-    'sphinxcontrib.log_cabinet',\n+    \"sphinx.ext.autodoc\",\n+    \"sphinx.ext.intersphinx\",\n+    \"sphinxcontrib.log_cabinet\",\n+    \"pallets_sphinx_themes\",\n ]\n-\n intersphinx_mapping = {\n-    'python': ('https://docs.python.org/3/', None),\n-    'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n-    'click': ('http://click.pocoo.org/', None),\n-    'jinja': ('http://jinja.pocoo.org/docs/', None),\n-    'itsdangerous': ('https://pythonhosted.org/itsdangerous', None),\n-    'sqlalchemy': ('https://docs.sqlalchemy.org/en/latest/', None),\n-    'wtforms': ('https://wtforms.readthedocs.io/en/latest/', None),\n-    'blinker': ('https://pythonhosted.org/blinker/', None),\n+    \"python\": (\"https://docs.python.org/3/\", None),\n+    \"werkzeug\": (\"http://werkzeug.pocoo.org/docs/\", None),\n+    \"click\": (\"https://click.palletsprojects.com/\", None),\n+    \"jinja\": (\"http://jinja.pocoo.org/docs/\", None),\n+    \"itsdangerous\": (\"https://itsdangerous.palletsprojects.com/\", None),\n+    \"sqlalchemy\": (\"https://docs.sqlalchemy.org/\", None),\n+    \"wtforms\": (\"https://wtforms.readthedocs.io/en/stable/\", None),\n+    \"blinker\": (\"https://pythonhosted.org/blinker/\", None),\n }\n \n # HTML -----------------------------------------------------------------\n \n-html_theme = 'flask'\n+html_theme = \"flask\"\n+html_theme_options = {\"index_sidebar_logo\": False}\n html_context = {\n-    'project_links': [\n-        ProjectLink('Donate to Pallets', 'https://psfmember.org/civicrm/contribute/transact?reset=1&id=20'),\n-        ProjectLink('Flask Website', 'https://palletsprojects.com/p/flask/'),\n-        ProjectLink('PyPI releases', 'https://pypi.org/project/Flask/'),\n-        ProjectLink('Source Code', 'https://github.com/pallets/flask/'),\n-        ProjectLink(\n-            'Issue Tracker', 'https://github.com/pallets/flask/issues/'),\n-    ],\n-    'versions': [\n-        DocVersion('dev', 'Development', 'unstable'),\n-        DocVersion('1.0', 'Flask 1.0', 'stable'),\n-        DocVersion('0.12', 'Flask 0.12'),\n-    ],\n-    'canonical_url': 'http://flask.pocoo.org/docs/{}/'.format(version),\n-    'carbon_ads_args': 'zoneid=1673&serve=C6AILKT&placement=pocooorg',\n-}\n-html_sidebars = {\n-    'index': [\n-        'project.html',\n-        'versions.html',\n-        'carbon_ads.html',\n-        'searchbox.html',\n-    ],\n-    '**': [\n-        'localtoc.html',\n-        'relations.html',\n-        'versions.html',\n-        'carbon_ads.html',\n-        'searchbox.html',\n+    \"project_links\": [\n+        ProjectLink(\"Donate to Pallets\", \"https://palletsprojects.com/donate\"),\n+        ProjectLink(\"Flask Website\", \"https://palletsprojects.com/p/flask/\"),\n+        ProjectLink(\"PyPI releases\", \"https://pypi.org/project/Flask/\"),\n+        ProjectLink(\"Source Code\", \"https://github.com/pallets/flask/\"),\n+        ProjectLink(\"Issue Tracker\", \"https://github.com/pallets/flask/issues/\"),\n     ]\n }\n-html_static_path = ['_static']\n-html_favicon = '_static/flask-favicon.ico'\n-html_logo = '_static/flask.png'\n-html_additional_pages = {\n-    '404': '404.html',\n+html_sidebars = {\n+    \"index\": [\"project.html\", \"localtoc.html\", \"searchbox.html\"],\n+    \"**\": [\"localtoc.html\", \"relations.html\", \"searchbox.html\"],\n }\n+singlehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\"]}\n+html_static_path = [\"_static\"]\n+html_favicon = \"_static/flask-favicon.ico\"\n+html_logo = \"_static/flask.png\"\n+html_title = \"Flask Documentation ({})\".format(version)\n html_show_sourcelink = False\n \n # LaTeX ----------------------------------------------------------------\n \n latex_documents = [\n-    (master_doc, 'Flask.tex', 'Flask Documentation', 'Pallets Team', 'manual'),\n+    (master_doc, \"Flask.tex\", \"Flask Documentation\", \"Pallets Team\", \"manual\")\n ]\n latex_use_modindex = False\n latex_elements = {\n-    'papersize': 'a4paper',\n-    'pointsize': '12pt',\n-    'fontpkg': r'\\usepackage{mathpazo}',\n-    'preamble': r'\\usepackage{flaskstyle}',\n+    \"papersize\": \"a4paper\",\n+    \"pointsize\": \"12pt\",\n+    \"fontpkg\": r\"\\usepackage{mathpazo}\",\n+    \"preamble\": r\"\\usepackage{flaskstyle}\",\n }\n latex_use_parts = True\n-latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n-\n-# linkcheck ------------------------------------------------------------\n-\n-linkcheck_anchors = False\n+latex_additional_files = [\"flaskstyle.sty\", \"logo.pdf\"]\n \n # Local Extensions -----------------------------------------------------\n \n-def unwrap_decorators():\n-    import sphinx.util.inspect as inspect\n-    import functools\n \n-    old_getargspec = inspect.getargspec\n-    def getargspec(x):\n-        return old_getargspec(getattr(x, '_original_function', x))\n-    inspect.getargspec = getargspec\n-\n-    old_update_wrapper = functools.update_wrapper\n-    def update_wrapper(wrapper, wrapped, *a, **kw):\n-        rv = old_update_wrapper(wrapper, wrapped, *a, **kw)\n-        rv._original_function = wrapped\n-        return rv\n-    functools.update_wrapper = update_wrapper\n-\n-\n-unwrap_decorators()\n-del unwrap_decorators\n-\n-\n-_internal_mark_re = re.compile(r'^\\s*:internal:\\s*$(?m)', re.M)\n-\n-\n-def skip_internal(app, what, name, obj, skip, options):\n-    docstring = inspect.getdoc(obj) or ''\n-\n-    if skip or _internal_mark_re.search(docstring) is not None:\n-        return True\n-\n-\n-def cut_module_meta(app, what, name, obj, options, lines):\n-    \"\"\"Remove metadata from autodoc output.\"\"\"\n-    if what != 'module':\n-        return\n-\n-    lines[:] = [\n-        line for line in lines\n-        if not line.startswith((':copyright:', ':license:'))\n-    ]\n-\n-\n-def github_link(\n-    name, rawtext, text, lineno, inliner, options=None, content=None\n-):\n+def github_link(name, rawtext, text, lineno, inliner, options=None, content=None):\n     app = inliner.document.settings.env.app\n     release = app.config.release\n-    base_url = 'https://github.com/pallets/flask/tree/'\n+    base_url = \"https://github.com/pallets/flask/tree/\"\n \n-    if text.endswith('>'):\n-        words, text = text[:-1].rsplit('<', 1)\n+    if text.endswith(\">\"):\n+        words, text = text[:-1].rsplit(\"<\", 1)\n         words = words.strip()\n     else:\n         words = None\n \n-    if release.endswith('dev'):\n-        url = '{0}master/{1}'.format(base_url, text)\n+    if release.endswith(\"dev\"):\n+        url = \"{0}master/{1}\".format(base_url, text)\n     else:\n-        url = '{0}{1}/{2}'.format(base_url, release, text)\n+        url = \"{0}{1}/{2}\".format(base_url, release, text)\n \n     if words is None:\n         words = url\n \n     from docutils.nodes import reference\n     from docutils.parsers.rst.roles import set_classes\n+\n     options = options or {}\n     set_classes(options)\n     node = reference(rawtext, words, refuri=url, **options)\n@@ -170,6 +101,4 @@ def github_link(\n \n \n def setup(app):\n-    app.connect('autodoc-skip-member', skip_internal)\n-    app.connect('autodoc-process-docstring', cut_module_meta)\n-    app.add_role('gh', github_link)\n+    app.add_role(\"gh\", github_link)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#25de45cbb6fc7304f67b685034151f9ac6ea0df5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 7/4 | Churn Δ: 56 | Churn Cumulative: 4544 | Contributors (this commit): 68 | Commits (past 90d): 3 | Contributors (cumulative): 91 | DMM Complexity: 0.9310344827586207\n\nDIFF:\n@@ -97,3 +97,12 @@ if hasattr(sys, 'pypy_version_info'):\n         BROKEN_PYPY_CTXMGR_EXIT = True\n     except AssertionError:\n         pass\n+\n+\n+try:\n+    from os import fspath\n+except ImportError:\n+    # Backwards compatibility as proposed in PEP 0519:\n+    # https://www.python.org/dev/peps/pep-0519/#backwards-compatibility\n+    def fspath(path):\n+        return path.__fspath__() if hasattr(path, '__fspath__') else path\n\n@@ -33,7 +33,7 @@ from jinja2 import FileSystemLoader\n from .signals import message_flashed\n from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n-from ._compat import string_types, text_type, PY2\n+from ._compat import string_types, text_type, PY2, fspath\n \n # sentinel\n _missing = object()\n@@ -510,6 +510,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         Filenames are encoded with ASCII instead of Latin-1 for broader\n         compatibility with WSGI servers.\n \n+    .. versionchanged:: 1.1\n+        Filenames may be a `PathLike` object.\n+\n     :param filename_or_fp: the filename of the file to send.\n                            This is relative to the :attr:`~Flask.root_path`\n                            if a relative path is specified.\n@@ -538,6 +541,10 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     \"\"\"\n     mtime = None\n     fsize = None\n+\n+    if hasattr(filename_or_fp, '__fspath__'):\n+        filename_or_fp = fspath(filename_or_fp)\n+\n     if isinstance(filename_or_fp, string_types):\n         filename = filename_or_fp\n         if not os.path.isabs(filename):\n@@ -705,6 +712,8 @@ def send_from_directory(directory, filename, **options):\n     :param options: optional keyword arguments that are directly\n                     forwarded to :func:`send_file`.\n     \"\"\"\n+    filename = fspath(filename)\n+    directory = fspath(directory)\n     filename = safe_join(directory, filename)\n     if not os.path.isabs(filename):\n         filename = os.path.join(current_app.root_path, filename)\n\n@@ -36,6 +36,19 @@ def has_encoding(name):\n         return False\n \n \n+class FakePath(object):\n+    \"\"\"Fake object to represent a ``PathLike object``.\n+\n+    This represents a ``pathlib.Path`` object in python 3.\n+    See: https://www.python.org/dev/peps/pep-0519/\n+    \"\"\"\n+    def __init__(self, path):\n+        self.path = path\n+\n+    def __fspath__(self):\n+        return self.path\n+\n+\n class FixedOffset(datetime.tzinfo):\n     \"\"\"Fixed offset in hours east from UTC.\n \n@@ -527,6 +540,15 @@ class TestSendfile(object):\n         assert 'x-sendfile' not in rv.headers\n         rv.close()\n \n+    def test_send_file_pathlike(self, app, req_ctx):\n+        rv = flask.send_file(FakePath('static/index.html'))\n+        assert rv.direct_passthrough\n+        assert rv.mimetype == 'text/html'\n+        with app.open_resource('static/index.html') as f:\n+            rv.direct_passthrough = False\n+            assert rv.data == f.read()\n+        rv.close()\n+\n     @pytest.mark.skipif(\n         not callable(getattr(Range, 'to_content_range_header', None)),\n         reason=\"not implemented within werkzeug\"\n@@ -681,6 +703,12 @@ class TestSendfile(object):\n         assert cc.max_age == 3600\n         rv.close()\n \n+        # Test with static file handler.\n+        rv = app.send_static_file(FakePath('index.html'))\n+        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        assert cc.max_age == 3600\n+        rv.close()\n+\n         class StaticFileApp(flask.Flask):\n             def get_send_file_max_age(self, filename):\n                 return 10\n@@ -706,6 +734,14 @@ class TestSendfile(object):\n         assert rv.data.strip() == b'Hello Subdomain'\n         rv.close()\n \n+    def test_send_from_directory_pathlike(self, app, req_ctx):\n+        app.root_path = os.path.join(os.path.dirname(__file__),\n+                                     'test_apps', 'subdomaintestmodule')\n+        rv = flask.send_from_directory(FakePath('static'), FakePath('hello.txt'))\n+        rv.direct_passthrough = False\n+        assert rv.data.strip() == b'Hello Subdomain'\n+        rv.close()\n+\n     def test_send_from_directory_bad_request(self, app, req_ctx):\n         app.root_path = os.path.join(os.path.dirname(__file__),\n                                      'test_apps', 'subdomaintestmodule')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d0ceb16be956ea3339dd0b7ab67ba3aceac6a9a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 2658 | Contributors (this commit): 34 | Commits (past 90d): 3 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -724,7 +724,7 @@ def _validate_key(ctx, param, value):\n     return value\n \n \n-@click.command('run', short_help='Runs a development server.')\n+@click.command('run', short_help='Run a development server.')\n @click.option('--host', '-h', default='127.0.0.1',\n               help='The interface to bind to.')\n @click.option('--port', '-p', default=5000,\n@@ -776,10 +776,10 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n                threaded=with_threads, ssl_context=cert)\n \n \n-@click.command('shell', short_help='Runs a shell in the app context.')\n+@click.command('shell', short_help='Run a shell in the app context.')\n @with_appcontext\n def shell_command():\n-    \"\"\"Runs an interactive Python shell in the context of a given\n+    \"\"\"Run an interactive Python shell in the context of a given\n     Flask application.  The application will populate the default\n     namespace of this shell according to it's configuration.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#02df042416c312f6c04a5ded8c9404386585c122", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2660 | Contributors (this commit): 35 | Commits (past 90d): 4 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -332,7 +332,7 @@ class DispatchingApp(object):\n \n \n class ScriptInfo(object):\n-    \"\"\"Help object to deal with Flask applications.  This is usually not\n+    \"\"\"Helper object to deal with Flask applications.  This is usually not\n     necessary to interface with as it's used internally in the dispatching\n     to click.  In future versions of Flask this object will most likely play\n     a bigger role.  Typically it's created automatically by the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e4ebbd3f5befca0f6891def3ebf292f756ec5f3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 1503 | Contributors (this commit): 26 | Commits (past 90d): 3 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -28,6 +28,7 @@ if not PY2:\n \n     from inspect import getfullargspec as getargspec\n     from io import StringIO\n+    import collections.abc as collections_abc\n \n     def reraise(tp, value, tb=None):\n         if value.__traceback__ is not tb:\n@@ -47,6 +48,7 @@ else:\n \n     from inspect import getargspec\n     from cStringIO import StringIO\n+    import collections as collections_abc\n \n     exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n \n\n@@ -11,17 +11,17 @@\n \n import hashlib\n import warnings\n-from collections import MutableMapping\n from datetime import datetime\n \n from itsdangerous import BadSignature, URLSafeTimedSerializer\n from werkzeug.datastructures import CallbackDict\n \n+from flask._compat import collections_abc\n from flask.helpers import is_ip, total_seconds\n from flask.json.tag import TaggedJSONSerializer\n \n \n-class SessionMixin(MutableMapping):\n+class SessionMixin(collections_abc.MutableMapping):\n     \"\"\"Expands a basic dictionary with session attributes.\"\"\"\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b85425ac1bc04bd6fc5c90192f9454395f95bd3a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 5597 | Contributors (this commit): 93 | Commits (past 90d): 3 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -1678,16 +1678,17 @@ class Flask(_PackageBoundObject):\n         return False\n \n     def handle_user_exception(self, e):\n-        \"\"\"This method is called whenever an exception occurs that should be\n-        handled.  A special case are\n-        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by\n-        this function to the :meth:`handle_http_exception` method.  This\n-        function will either return a response value or reraise the\n-        exception with the same traceback.\n+        \"\"\"This method is called whenever an exception occurs that\n+        should be handled. A special case is :class:`~werkzeug\n+        .exceptions.HTTPException` which is forwarded to the\n+        :meth:`handle_http_exception` method. This function will either\n+        return a response value or reraise the exception with the same\n+        traceback.\n \n         .. versionchanged:: 1.0\n-            Key errors raised from request data like ``form`` show the the bad\n-            key in debug mode rather than a generic bad request message.\n+            Key errors raised from request data like ``form`` show the\n+            bad key in debug mode rather than a generic bad request\n+            message.\n \n         .. versionadded:: 0.7\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#830c77cb44d513a7c8044734a460d2b381df2f5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 232 | Contributors (this commit): 18 | Commits (past 90d): 1 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -156,6 +156,10 @@ class Config(dict):\n             from yourapplication import default_config\n             app.config.from_object(default_config)\n \n+        Nothing is done to the object before loading. If the object is a\n+        class and has ``@property`` attributes, it needs to be\n+        instantiated before being passed to this method.\n+\n         You should not use this function to load the actual configuration but\n         rather configuration defaults.  The actual config should be loaded\n         with :meth:`from_pyfile` and ideally from a location not within the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3fd51c65fb4774b10848715b62ec284a0b86a6b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2664 | Contributors (this commit): 36 | Commits (past 90d): 17 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,6 +21,7 @@ import traceback\n from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock, Thread\n+import werkzeug\n \n import click\n from werkzeug.utils import import_string\n@@ -259,10 +260,11 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n def get_version(ctx, param, value):\n     if not value or ctx.resilient_parsing:\n         return\n-    message = 'Flask %(version)s\\nPython %(python_version)s'\n+    message = 'Python %(python_version)s\\nFlask %(version)s\\nWerkzeug %(werkzeug_version)s'\n     click.echo(message % {\n         'version': __version__,\n         'python_version': sys.version,\n+        'werkzeug_version': werkzeug.__version__,\n     }, color=ctx.color)\n     ctx.exit()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a0ccc477800737d9907ab772bb1bba25f164fefb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 3706 | Contributors (this commit): 43 | Commits (past 90d): 7 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,6 +14,7 @@ from __future__ import print_function\n import ast\n import inspect\n import os\n+import platform\n import re\n import ssl\n import sys\n@@ -21,7 +22,6 @@ import traceback\n from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock, Thread\n-import werkzeug\n \n import click\n from werkzeug.utils import import_string\n@@ -260,11 +260,16 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n def get_version(ctx, param, value):\n     if not value or ctx.resilient_parsing:\n         return\n-    message = 'Python %(python_version)s\\nFlask %(version)s\\nWerkzeug %(werkzeug_version)s'\n+    import werkzeug\n+    message = (\n+        'Python %(python)s\\n'\n+        'Flask %(flask)s\\n'\n+        'Werkzeug %(werkzeug)s'\n+    )\n     click.echo(message % {\n-        'version': __version__,\n-        'python_version': sys.version,\n-        'werkzeug_version': werkzeug.__version__,\n+        'python': platform.python_version(),\n+        'flask': __version__,\n+        'werkzeug': werkzeug.__version__,\n     }, color=ctx.color)\n     ctx.exit()\n \n\n@@ -241,9 +241,9 @@ def test_locate_app_suppress_raise():\n \n \n def test_get_version(test_apps, capsys):\n-    \"\"\"Test of get_version.\"\"\"\n-    from flask import __version__ as flask_ver\n-    from sys import version as py_ver\n+    from flask import __version__ as flask_version\n+    from werkzeug import __version__ as werkzeug_version\n+    from platform import python_version\n \n     class MockCtx(object):\n         resilient_parsing = False\n@@ -254,8 +254,9 @@ def test_get_version(test_apps, capsys):\n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n     out, err = capsys.readouterr()\n-    assert flask_ver in out\n-    assert py_ver in out\n+    assert \"Python \" + python_version() in out\n+    assert \"Flask \" + flask_version in out\n+    assert \"Werkzeug \" + werkzeug_version in out\n \n \n def test_scriptinfo(test_apps, monkeypatch):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b570bf699c162e3223043582179db1c67b0a4c74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 28 | Churn Cumulative: 4312 | Contributors (this commit): 67 | Commits (past 90d): 4 | Contributors (cumulative): 83 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -8,7 +8,7 @@\n     :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n+import io\n import os\n import socket\n import sys\n@@ -512,6 +512,8 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     .. versionchanged:: 1.1\n         Filenames may be a `PathLike` object.\n+    .. versionadded:: 1.1\n+        Partial content supports ``BytesIO``.\n \n     :param filename_or_fp: the filename of the file to send.\n                            This is relative to the :attr:`~Flask.root_path`\n@@ -600,6 +602,12 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             mtime = os.path.getmtime(filename)\n             fsize = os.path.getsize(filename)\n             headers['Content-Length'] = fsize\n+        elif isinstance(file, io.BytesIO):\n+            try:\n+                fsize = file.getbuffer().nbytes\n+            except AttributeError:\n+                fsize = len(file.getvalue())\n+            headers['Content-Length'] = fsize\n         data = wrap_file(request.environ, file)\n \n     rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n\n@@ -10,6 +10,7 @@\n \"\"\"\n \n import datetime\n+import io\n import os\n import uuid\n \n@@ -608,6 +609,23 @@ class TestSendfile(object):\n         assert rv.status_code == 200\n         rv.close()\n \n+    @pytest.mark.skipif(\n+        not callable(getattr(Range, 'to_content_range_header', None)),\n+        reason=\"not implemented within werkzeug\"\n+    )\n+    def test_send_file_range_request_bytesio(self, app, client):\n+        @app.route('/')\n+        def index():\n+            file = io.BytesIO(b'somethingsomething')\n+            return flask.send_file(\n+                file, attachment_filename='filename', conditional=True\n+            )\n+\n+        rv = client.get('/', headers={'Range': 'bytes=4-15'})\n+        assert rv.status_code == 206\n+        assert rv.data == b'somethingsomething'[4:16]\n+        rv.close()\n+\n     @pytest.mark.skipif(\n         not callable(getattr(Range, 'to_content_range_header', None)),\n         reason=\"not implemented within werkzeug\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#366f3f49af72702066da60476fa5e02d030c936b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 4322 | Contributors (this commit): 67 | Commits (past 90d): 6 | Contributors (cumulative): 83 | DMM Complexity: None\n\nDIFF:\n@@ -511,9 +511,10 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         compatibility with WSGI servers.\n \n     .. versionchanged:: 1.1\n-        Filenames may be a `PathLike` object.\n+        Filename may be a :class:`~os.PathLike` object.\n+\n     .. versionadded:: 1.1\n-        Partial content supports ``BytesIO``.\n+        Partial content supports :class:`~io.BytesIO`.\n \n     :param filename_or_fp: the filename of the file to send.\n                            This is relative to the :attr:`~Flask.root_path`\n@@ -606,6 +607,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             try:\n                 fsize = file.getbuffer().nbytes\n             except AttributeError:\n+                # Python 2 doesn't have getbuffer\n                 fsize = len(file.getvalue())\n             headers['Content-Length'] = fsize\n         data = wrap_file(request.environ, file)\n\n@@ -609,10 +609,6 @@ class TestSendfile(object):\n         assert rv.status_code == 200\n         rv.close()\n \n-    @pytest.mark.skipif(\n-        not callable(getattr(Range, 'to_content_range_header', None)),\n-        reason=\"not implemented within werkzeug\"\n-    )\n     def test_send_file_range_request_bytesio(self, app, client):\n         @app.route('/')\n         def index():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#40118e785f0ec69bb519c7f34dcceb092006aa02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -8/0 | Churn Δ: 5 | Churn Cumulative: 4327 | Contributors (this commit): 68 | Commits (past 90d): 8 | Contributors (cumulative): 85 | DMM Complexity: 0.0\n\nDIFF:\n@@ -567,6 +567,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n \n+        if not isinstance(attachment_filename, text_type):\n+            attachment_filename = attachment_filename.decode('utf-8')\n+\n         try:\n             attachment_filename = attachment_filename.encode('ascii')\n         except UnicodeEncodeError:\n\n@@ -644,6 +644,8 @@ class TestSendfile(object):\n         (u'Ñandú／pingüino.txt', '\"Nandu/pinguino.txt\"',\n         '%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt'),\n         (u'Vögel.txt', 'Vogel.txt', 'V%C3%B6gel.txt'),\n+        # Native string not marked as Unicode on Python 2\n+        ('tést.txt', 'test.txt', 't%C3%A9st.txt'),\n     ))\n     def test_attachment_filename_encoding(self, filename, ascii, utf8):\n         rv = flask.send_file('static/index.html', as_attachment=True, attachment_filename=filename)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b92b2e6c743c8b09744c9c9788046c719cc38eab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 14 | Churn Cumulative: 5970 | Contributors (this commit): 95 | Commits (past 90d): 6 | Contributors (cumulative): 102 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,7 +20,8 @@ from threading import Lock\n from werkzeug.datastructures import Headers, ImmutableDict\n from werkzeug.exceptions import BadRequest, BadRequestKeyError, HTTPException, \\\n     InternalServerError, MethodNotAllowed, default_exceptions\n-from werkzeug.routing import BuildError, Map, RequestRedirect, Rule\n+from werkzeug.routing import BuildError, Map, RequestRedirect, \\\n+    RoutingException, Rule\n \n from . import cli, json\n from ._compat import integer_types, reraise, string_types, text_type\n@@ -1638,6 +1639,12 @@ class Flask(_PackageBoundObject):\n         if e.code is None:\n             return e\n \n+        # RoutingExceptions such as RequestRedirects are special exceptions\n+        # used to trigger routing actions such as redirects, and also behave\n+        # like proxy exceptions. We return these unchanged as well.\n+        if isinstance(e, RoutingException):\n+            return e\n+\n         handler = self._find_error_handler(e)\n         if handler is None:\n             return e\n\n@@ -184,6 +184,10 @@ def test_default_error_handler():\n     def forbidden():\n         raise Forbidden()\n \n+    @app.route('/slash/')\n+    def slash():\n+        return ''\n+\n     app.register_blueprint(bp, url_prefix='/bp')\n \n     c = app.test_client()\n@@ -191,5 +195,6 @@ def test_default_error_handler():\n     assert c.get('/bp/forbidden').data == b'bp-forbidden'\n     assert c.get('/undefined').data == b'default'\n     assert c.get('/forbidden').data == b'forbidden'\n+    assert c.get('/slash').location.endswith('/slash/')\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#662ce2151d0f17d592133eeecdc8d7e6676db811", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 5995 | Contributors (this commit): 95 | Commits (past 90d): 7 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -1632,6 +1632,16 @@ class Flask(_PackageBoundObject):\n         registered error handlers and fall back to returning the\n         exception as response.\n \n+        .. versionchanged:: 1.0.3\n+            ``RoutingException``, used internally for actions such as\n+             slash redirects during routing, is not passed to error\n+             handlers.\n+\n+        .. versionchanged:: 1.0\n+            Exceptions are looked up by code *and* by MRO, so\n+            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n+            handler for the base ``HTTPException``.\n+\n         .. versionadded:: 0.3\n         \"\"\"\n         # Proxy exceptions don't have error codes.  We want to always return\n@@ -1639,9 +1649,9 @@ class Flask(_PackageBoundObject):\n         if e.code is None:\n             return e\n \n-        # RoutingExceptions such as RequestRedirects are special exceptions\n-        # used to trigger routing actions such as redirects, and also behave\n-        # like proxy exceptions. We return these unchanged as well.\n+        # RoutingExceptions are used internally to trigger routing\n+        # actions, such as slash redirects raising RequestRedirect. They\n+        # are not raised or handled in user code.\n         if isinstance(e, RoutingException):\n             return e\n \n\n@@ -184,9 +184,9 @@ def test_default_error_handler():\n     def forbidden():\n         raise Forbidden()\n \n-    @app.route('/slash/')\n+    @app.route(\"/slash/\")\n     def slash():\n-        return ''\n+        return \"slash\"\n \n     app.register_blueprint(bp, url_prefix='/bp')\n \n@@ -195,6 +195,5 @@ def test_default_error_handler():\n     assert c.get('/bp/forbidden').data == b'bp-forbidden'\n     assert c.get('/undefined').data == b'default'\n     assert c.get('/forbidden').data == b'forbidden'\n-    assert c.get('/slash').location.endswith('/slash/')\n-\n-\n+    # Don't handle RequestRedirect raised when adding slash.\n+    assert c.get(\"/slash\", follow_redirects=True).data == b\"slash\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#47bdf9f26fdd499c00a25efa4c0229c544cf682d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 274 | Contributors (this commit): 12 | Commits (past 90d): 3 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -16,12 +16,16 @@ import sys\n PY2 = sys.version_info[0] == 2\n _identity = lambda x: x\n \n-\n-if not PY2:\n+try:  # Python 2\n+    text_type = unicode\n+    string_types = (str, unicode)\n+    integer_types = (int, long)\n+except NameError:  # Python 3\n     text_type = str\n     string_types = (str,)\n     integer_types = (int,)\n \n+if not PY2:\n     iterkeys = lambda d: iter(d.keys())\n     itervalues = lambda d: iter(d.values())\n     iteritems = lambda d: iter(d.items())\n@@ -38,10 +42,6 @@ if not PY2:\n     implements_to_string = _identity\n \n else:\n-    text_type = unicode\n-    string_types = (str, unicode)\n-    integer_types = (int, long)\n-\n     iterkeys = lambda d: d.iterkeys()\n     itervalues = lambda d: d.itervalues()\n     iteritems = lambda d: d.iteritems()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#de01dfb70206f8dbb55724b7abfc515ead3ca283", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 527 | Contributors (this commit): 26 | Commits (past 90d): 1 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -35,7 +35,7 @@ setup(\n     python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\n     install_requires=[\n         'Werkzeug>=0.14',\n-        'Jinja2>=2.10',\n+        'Jinja2>=2.10.1',\n         'itsdangerous>=0.24',\n         'click>=5.1',\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#025589ee766249652e2e097da05808fe64911ddc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3741 | Lines Deleted: 3416 | Files Changed: 63 | Hunks: 2091 | Methods Changed: 875 | Complexity Δ (Sum/Max): 18/6 | Churn Δ: 7157 | Churn Cumulative: 37115 | Contributors (this commit): 252 | Commits (past 90d): 64 | Contributors (cumulative): 677 | DMM Complexity: 0.8920863309352518\n\nDIFF:\n@@ -3,14 +3,14 @@ from flask import jsonify, render_template, request\n from js_example import app\n \n \n-@app.route('/', defaults={'js': 'plain'})\n-@app.route('/<any(plain, jquery, fetch):js>')\n+@app.route(\"/\", defaults={\"js\": \"plain\"})\n+@app.route(\"/<any(plain, jquery, fetch):js>\")\n def index(js):\n-    return render_template('{0}.html'.format(js), js=js)\n+    return render_template(\"{0}.html\".format(js), js=js)\n \n \n-@app.route('/add', methods=['POST'])\n+@app.route(\"/add\", methods=[\"POST\"])\n def add():\n-    a = request.form.get('a', 0, type=float)\n-    b = request.form.get('b', 0, type=float)\n+    a = request.form.get(\"a\", 0, type=float)\n+    b = request.form.get(\"b\", 0, type=float)\n     return jsonify(result=a + b)\n\n@@ -2,29 +2,21 @@ import io\n \n from setuptools import find_packages, setup\n \n-with io.open('README.rst', 'rt', encoding='utf8') as f:\n+with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n setup(\n-    name='js_example',\n-    version='1.0.0',\n-    url='http://flask.pocoo.org/docs/patterns/jquery/',\n-    license='BSD',\n-    maintainer='Pallets team',\n-    maintainer_email='contact@palletsprojects.com',\n-    description='Demonstrates making Ajax requests to Flask.',\n+    name=\"js_example\",\n+    version=\"1.0.0\",\n+    url=\"http://flask.pocoo.org/docs/patterns/jquery/\",\n+    license=\"BSD\",\n+    maintainer=\"Pallets team\",\n+    maintainer_email=\"contact@palletsprojects.com\",\n+    description=\"Demonstrates making Ajax requests to Flask.\",\n     long_description=readme,\n     packages=find_packages(),\n     include_package_data=True,\n     zip_safe=False,\n-    install_requires=[\n-        'flask',\n-    ],\n-    extras_require={\n-        'test': [\n-            'pytest',\n-            'coverage',\n-            'blinker',\n-        ],\n-    },\n+    install_requires=[\"flask\"],\n+    extras_require={\"test\": [\"pytest\", \"coverage\", \"blinker\"]},\n )\n\n@@ -3,7 +3,7 @@ import pytest\n from js_example import app\n \n \n-@pytest.fixture(name='app')\n+@pytest.fixture(name=\"app\")\n def fixture_app():\n     app.testing = True\n     yield app\n\n@@ -3,12 +3,15 @@ import pytest\n from flask import template_rendered\n \n \n-@pytest.mark.parametrize(('path', 'template_name'), (\n-    ('/', 'plain.html'),\n-    ('/plain', 'plain.html'),\n-    ('/fetch', 'fetch.html'),\n-    ('/jquery', 'jquery.html'),\n-))\n+@pytest.mark.parametrize(\n+    (\"path\", \"template_name\"),\n+    (\n+        (\"/\", \"plain.html\"),\n+        (\"/plain\", \"plain.html\"),\n+        (\"/fetch\", \"fetch.html\"),\n+        (\"/jquery\", \"jquery.html\"),\n+    ),\n+)\n def test_index(app, client, path, template_name):\n     def check(sender, template, context):\n         assert template.name == template_name\n@@ -17,12 +20,9 @@ def test_index(app, client, path, template_name):\n         client.get(path)\n \n \n-@pytest.mark.parametrize(('a', 'b', 'result'), (\n-    (2, 3, 5),\n-    (2.5, 3, 5.5),\n-    (2, None, 2),\n-    (2, 'b', 2),\n-))\n+@pytest.mark.parametrize(\n+    (\"a\", \"b\", \"result\"), ((2, 3, 5), (2.5, 3, 5.5), (2, None, 2), (2, \"b\", 2))\n+)\n def test_add(client, a, b, result):\n-    response = client.post('/add', data={'a': a, 'b': b})\n-    assert response.get_json()['result'] == result\n+    response = client.post(\"/add\", data={\"a\": a, \"b\": b})\n+    assert response.get_json()[\"result\"] == result\n\n@@ -8,14 +8,14 @@ def create_app(test_config=None):\n     app = Flask(__name__, instance_relative_config=True)\n     app.config.from_mapping(\n         # a default secret that should be overridden by instance config\n-        SECRET_KEY='dev',\n+        SECRET_KEY=\"dev\",\n         # store the database in the instance folder\n-        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n+        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),\n     )\n \n     if test_config is None:\n         # load the instance config, if it exists, when not testing\n-        app.config.from_pyfile('config.py', silent=True)\n+        app.config.from_pyfile(\"config.py\", silent=True)\n     else:\n         # load the test config if passed in\n         app.config.update(test_config)\n@@ -26,16 +26,18 @@ def create_app(test_config=None):\n     except OSError:\n         pass\n \n-    @app.route('/hello')\n+    @app.route(\"/hello\")\n     def hello():\n-        return 'Hello, World!'\n+        return \"Hello, World!\"\n \n     # register the database commands\n     from flaskr import db\n+\n     db.init_app(app)\n \n     # apply the blueprints to the app\n     from flaskr import auth, blog\n+\n     app.register_blueprint(auth.bp)\n     app.register_blueprint(blog.bp)\n \n@@ -43,6 +45,6 @@ def create_app(test_config=None):\n     # in another app, you might define a separate main index here with\n     # app.route, while giving the blog blueprint a url_prefix, but for\n     # the tutorial the blog will be the main index\n-    app.add_url_rule('/', endpoint='index')\n+    app.add_url_rule(\"/\", endpoint=\"index\")\n \n     return app\n\n@@ -1,21 +1,29 @@\n import functools\n \n from flask import (\n-    Blueprint, flash, g, redirect, render_template, request, session, url_for\n+    Blueprint,\n+    flash,\n+    g,\n+    redirect,\n+    render_template,\n+    request,\n+    session,\n+    url_for,\n )\n from werkzeug.security import check_password_hash, generate_password_hash\n \n from flaskr.db import get_db\n \n-bp = Blueprint('auth', __name__, url_prefix='/auth')\n+bp = Blueprint(\"auth\", __name__, url_prefix=\"/auth\")\n \n \n def login_required(view):\n     \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"\n+\n     @functools.wraps(view)\n     def wrapped_view(**kwargs):\n         if g.user is None:\n-            return redirect(url_for('auth.login'))\n+            return redirect(url_for(\"auth.login\"))\n \n         return view(**kwargs)\n \n@@ -26,83 +34,84 @@ def login_required(view):\n def load_logged_in_user():\n     \"\"\"If a user id is stored in the session, load the user object from\n     the database into ``g.user``.\"\"\"\n-    user_id = session.get('user_id')\n+    user_id = session.get(\"user_id\")\n \n     if user_id is None:\n         g.user = None\n     else:\n-        g.user = get_db().execute(\n-            'SELECT * FROM user WHERE id = ?', (user_id,)\n-        ).fetchone()\n+        g.user = (\n+            get_db().execute(\"SELECT * FROM user WHERE id = ?\", (user_id,)).fetchone()\n+        )\n \n \n-@bp.route('/register', methods=('GET', 'POST'))\n+@bp.route(\"/register\", methods=(\"GET\", \"POST\"))\n def register():\n     \"\"\"Register a new user.\n \n     Validates that the username is not already taken. Hashes the\n     password for security.\n     \"\"\"\n-    if request.method == 'POST':\n-        username = request.form['username']\n-        password = request.form['password']\n+    if request.method == \"POST\":\n+        username = request.form[\"username\"]\n+        password = request.form[\"password\"]\n         db = get_db()\n         error = None\n \n         if not username:\n-            error = 'Username is required.'\n+            error = \"Username is required.\"\n         elif not password:\n-            error = 'Password is required.'\n-        elif db.execute(\n-            'SELECT id FROM user WHERE username = ?', (username,)\n-        ).fetchone() is not None:\n-            error = 'User {0} is already registered.'.format(username)\n+            error = \"Password is required.\"\n+        elif (\n+            db.execute(\"SELECT id FROM user WHERE username = ?\", (username,)).fetchone()\n+            is not None\n+        ):\n+            error = \"User {0} is already registered.\".format(username)\n \n         if error is None:\n             # the name is available, store it in the database and go to\n             # the login page\n             db.execute(\n-                'INSERT INTO user (username, password) VALUES (?, ?)',\n-                (username, generate_password_hash(password))\n+                \"INSERT INTO user (username, password) VALUES (?, ?)\",\n+                (username, generate_password_hash(password)),\n             )\n             db.commit()\n-            return redirect(url_for('auth.login'))\n+            return redirect(url_for(\"auth.login\"))\n \n         flash(error)\n \n-    return render_template('auth/register.html')\n+    return render_template(\"auth/register.html\")\n \n \n-@bp.route('/login', methods=('GET', 'POST'))\n+@bp.route(\"/login\", methods=(\"GET\", \"POST\"))\n def login():\n     \"\"\"Log in a registered user by adding the user id to the session.\"\"\"\n-    if request.method == 'POST':\n-        username = request.form['username']\n-        password = request.form['password']\n+    if request.method == \"POST\":\n+        username = request.form[\"username\"]\n+        password = request.form[\"password\"]\n         db = get_db()\n         error = None\n         user = db.execute(\n-            'SELECT * FROM user WHERE username = ?', (username,)\n+            \"SELECT * FROM user WHERE username = ?\", (username,)\n         ).fetchone()\n \n         if user is None:\n-            error = 'Incorrect username.'\n-        elif not check_password_hash(user['password'], password):\n-            error = 'Incorrect password.'\n+            error = \"Incorrect username.\"\n+        elif not check_password_hash(user[\"password\"], password):\n+            error = \"Incorrect password.\"\n \n         if error is None:\n             # store the user id in a new session and return to the index\n             session.clear()\n-            session['user_id'] = user['id']\n-            return redirect(url_for('index'))\n+            session[\"user_id\"] = user[\"id\"]\n+            return redirect(url_for(\"index\"))\n \n         flash(error)\n \n-    return render_template('auth/login.html')\n+    return render_template(\"auth/login.html\")\n \n \n-@bp.route('/logout')\n+@bp.route(\"/logout\")\n def logout():\n     \"\"\"Clear the current session, including the stored user id.\"\"\"\n     session.clear()\n-    return redirect(url_for('index'))\n+    return redirect(url_for(\"index\"))\n\n@@ -1,24 +1,22 @@\n-from flask import (\n-    Blueprint, flash, g, redirect, render_template, request, url_for\n-)\n+from flask import Blueprint, flash, g, redirect, render_template, request, url_for\n from werkzeug.exceptions import abort\n \n from flaskr.auth import login_required\n from flaskr.db import get_db\n \n-bp = Blueprint('blog', __name__)\n+bp = Blueprint(\"blog\", __name__)\n \n \n-@bp.route('/')\n+@bp.route(\"/\")\n def index():\n     \"\"\"Show all the posts, most recent first.\"\"\"\n     db = get_db()\n     posts = db.execute(\n-        'SELECT p.id, title, body, created, author_id, username'\n-        ' FROM post p JOIN user u ON p.author_id = u.id'\n-        ' ORDER BY created DESC'\n+        \"SELECT p.id, title, body, created, author_id, username\"\n+        \" FROM post p JOIN user u ON p.author_id = u.id\"\n+        \" ORDER BY created DESC\"\n     ).fetchall()\n-    return render_template('blog/index.html', posts=posts)\n+    return render_template(\"blog/index.html\", posts=posts)\n \n \n def get_post(id, check_author=True):\n@@ -33,78 +31,80 @@ def get_post(id, check_author=True):\n     :raise 404: if a post with the given id doesn't exist\n     :raise 403: if the current user isn't the author\n     \"\"\"\n-    post = get_db().execute(\n-        'SELECT p.id, title, body, created, author_id, username'\n-        ' FROM post p JOIN user u ON p.author_id = u.id'\n-        ' WHERE p.id = ?',\n-        (id,)\n-    ).fetchone()\n+    post = (\n+        get_db()\n+        .execute(\n+            \"SELECT p.id, title, body, created, author_id, username\"\n+            \" FROM post p JOIN user u ON p.author_id = u.id\"\n+            \" WHERE p.id = ?\",\n+            (id,),\n+        )\n+        .fetchone()\n+    )\n \n     if post is None:\n         abort(404, \"Post id {0} doesn't exist.\".format(id))\n \n-    if check_author and post['author_id'] != g.user['id']:\n+    if check_author and post[\"author_id\"] != g.user[\"id\"]:\n         abort(403)\n \n     return post\n \n \n-@bp.route('/create', methods=('GET', 'POST'))\n+@bp.route(\"/create\", methods=(\"GET\", \"POST\"))\n @login_required\n def create():\n     \"\"\"Create a new post for the current user.\"\"\"\n-    if request.method == 'POST':\n-        title = request.form['title']\n-        body = request.form['body']\n+    if request.method == \"POST\":\n+        title = request.form[\"title\"]\n+        body = request.form[\"body\"]\n         error = None\n \n         if not title:\n-            error = 'Title is required.'\n+            error = \"Title is required.\"\n \n         if error is not None:\n             flash(error)\n         else:\n             db = get_db()\n             db.execute(\n-                'INSERT INTO post (title, body, author_id)'\n-                ' VALUES (?, ?, ?)',\n-                (title, body, g.user['id'])\n+                \"INSERT INTO post (title, body, author_id)\" \" VALUES (?, ?, ?)\",\n+                (title, body, g.user[\"id\"]),\n             )\n             db.commit()\n-            return redirect(url_for('blog.index'))\n+            return redirect(url_for(\"blog.index\"))\n \n-    return render_template('blog/create.html')\n+    return render_template(\"blog/create.html\")\n \n \n-@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n+@bp.route(\"/<int:id>/update\", methods=(\"GET\", \"POST\"))\n @login_required\n def update(id):\n     \"\"\"Update a post if the current user is the author.\"\"\"\n     post = get_post(id)\n \n-    if request.method == 'POST':\n-        title = request.form['title']\n-        body = request.form['body']\n+    if request.method == \"POST\":\n+        title = request.form[\"title\"]\n+        body = request.form[\"body\"]\n         error = None\n \n         if not title:\n-            error = 'Title is required.'\n+            error = \"Title is required.\"\n \n         if error is not None:\n             flash(error)\n         else:\n             db = get_db()\n             db.execute(\n-                'UPDATE post SET title = ?, body = ? WHERE id = ?',\n-                (title, body, id)\n+                \"UPDATE post SET title = ?, body = ? WHERE id = ?\", (title, body, id)\n             )\n             db.commit()\n-            return redirect(url_for('blog.index'))\n+            return redirect(url_for(\"blog.index\"))\n \n-    return render_template('blog/update.html', post=post)\n+    return render_template(\"blog/update.html\", post=post)\n \n \n-@bp.route('/<int:id>/delete', methods=('POST',))\n+@bp.route(\"/<int:id>/delete\", methods=(\"POST\",))\n @login_required\n def delete(id):\n     \"\"\"Delete a post.\n@@ -114,6 +114,6 @@ def delete(id):\n     \"\"\"\n     get_post(id)\n     db = get_db()\n-    db.execute('DELETE FROM post WHERE id = ?', (id,))\n+    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))\n     db.commit()\n-    return redirect(url_for('blog.index'))\n+    return redirect(url_for(\"blog.index\"))\n\n@@ -10,10 +10,9 @@ def get_db():\n     is unique for each request and will be reused if this is called\n     again.\n     \"\"\"\n-    if 'db' not in g:\n+    if \"db\" not in g:\n         g.db = sqlite3.connect(\n-            current_app.config['DATABASE'],\n-            detect_types=sqlite3.PARSE_DECLTYPES\n+            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n         )\n         g.db.row_factory = sqlite3.Row\n \n@@ -24,7 +23,7 @@ def close_db(e=None):\n     \"\"\"If this request connected to the database, close the\n     connection.\n     \"\"\"\n-    db = g.pop('db', None)\n+    db = g.pop(\"db\", None)\n \n     if db is not None:\n         db.close()\n@@ -34,16 +33,16 @@ def init_db():\n     \"\"\"Clear existing data and create new tables.\"\"\"\n     db = get_db()\n \n-    with current_app.open_resource('schema.sql') as f:\n-        db.executescript(f.read().decode('utf8'))\n+    with current_app.open_resource(\"schema.sql\") as f:\n+        db.executescript(f.read().decode(\"utf8\"))\n \n \n-@click.command('init-db')\n+@click.command(\"init-db\")\n @with_appcontext\n def init_db_command():\n     \"\"\"Clear existing data and create new tables.\"\"\"\n     init_db()\n-    click.echo('Initialized the database.')\n+    click.echo(\"Initialized the database.\")\n \n \n def init_app(app):\n\n@@ -2,28 +2,21 @@ import io\n \n from setuptools import find_packages, setup\n \n-with io.open('README.rst', 'rt', encoding='utf8') as f:\n+with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n setup(\n-    name='flaskr',\n-    version='1.0.0',\n-    url='http://flask.pocoo.org/docs/tutorial/',\n-    license='BSD',\n-    maintainer='Pallets team',\n-    maintainer_email='contact@palletsprojects.com',\n-    description='The basic blog app built in the Flask tutorial.',\n+    name=\"flaskr\",\n+    version=\"1.0.0\",\n+    url=\"http://flask.pocoo.org/docs/tutorial/\",\n+    license=\"BSD\",\n+    maintainer=\"Pallets team\",\n+    maintainer_email=\"contact@palletsprojects.com\",\n+    description=\"The basic blog app built in the Flask tutorial.\",\n     long_description=readme,\n     packages=find_packages(),\n     include_package_data=True,\n     zip_safe=False,\n-    install_requires=[\n-        'flask',\n-    ],\n-    extras_require={\n-        'test': [\n-            'pytest',\n-            'coverage',\n-        ],\n-    },\n+    install_requires=[\"flask\"],\n+    extras_require={\"test\": [\"pytest\", \"coverage\"]},\n )\n\n@@ -6,8 +6,8 @@ from flaskr import create_app\n from flaskr.db import get_db, init_db\n \n # read in SQL for populating test data\n-with open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:\n-    _data_sql = f.read().decode('utf8')\n+with open(os.path.join(os.path.dirname(__file__), \"data.sql\"), \"rb\") as f:\n+    _data_sql = f.read().decode(\"utf8\")\n \n \n @pytest.fixture\n@@ -16,10 +16,7 @@ def app():\n     # create a temporary file to isolate the database for each test\n     db_fd, db_path = tempfile.mkstemp()\n     # create the app with common test config\n-    app = create_app({\n-        'TESTING': True,\n-        'DATABASE': db_path,\n-    })\n+    app = create_app({\"TESTING\": True, \"DATABASE\": db_path})\n \n     # create the database and load test data\n     with app.app_context():\n@@ -49,14 +46,13 @@ class AuthActions(object):\n     def __init__(self, client):\n         self._client = client\n \n-    def login(self, username='test', password='test'):\n+    def login(self, username=\"test\", password=\"test\"):\n         return self._client.post(\n-            '/auth/login',\n-            data={'username': username, 'password': password}\n+            \"/auth/login\", data={\"username\": username, \"password\": password}\n         )\n \n     def logout(self):\n-        return self._client.get('/auth/logout')\n+        return self._client.get(\"/auth/logout\")\n \n \n @pytest.fixture\n\n@@ -5,54 +5,55 @@ from flaskr.db import get_db\n \n def test_register(client, app):\n     # test that viewing the page renders without template errors\n-    assert client.get('/auth/register').status_code == 200\n+    assert client.get(\"/auth/register\").status_code == 200\n \n     # test that successful registration redirects to the login page\n-    response = client.post(\n-        '/auth/register', data={'username': 'a', 'password': 'a'}\n-    )\n-    assert 'http://localhost/auth/login' == response.headers['Location']\n+    response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n+    assert \"http://localhost/auth/login\" == response.headers[\"Location\"]\n \n     # test that the user was inserted into the database\n     with app.app_context():\n-        assert get_db().execute(\n-            \"select * from user where username = 'a'\",\n-        ).fetchone() is not None\n+        assert (\n+            get_db().execute(\"select * from user where username = 'a'\").fetchone()\n+            is not None\n+        )\n \n \n-@pytest.mark.parametrize(('username', 'password', 'message'), (\n-    ('', '', b'Username is required.'),\n-    ('a', '', b'Password is required.'),\n-    ('test', 'test', b'already registered'),\n-))\n+@pytest.mark.parametrize(\n+    (\"username\", \"password\", \"message\"),\n+    (\n+        (\"\", \"\", b\"Username is required.\"),\n+        (\"a\", \"\", b\"Password is required.\"),\n+        (\"test\", \"test\", b\"already registered\"),\n+    ),\n+)\n def test_register_validate_input(client, username, password, message):\n     response = client.post(\n-        '/auth/register',\n-        data={'username': username, 'password': password}\n+        \"/auth/register\", data={\"username\": username, \"password\": password}\n     )\n     assert message in response.data\n \n \n def test_login(client, auth):\n     # test that viewing the page renders without template errors\n-    assert client.get('/auth/login').status_code == 200\n+    assert client.get(\"/auth/login\").status_code == 200\n \n     # test that successful login redirects to the index page\n     response = auth.login()\n-    assert response.headers['Location'] == 'http://localhost/'\n+    assert response.headers[\"Location\"] == \"http://localhost/\"\n \n     # login request set the user_id in the session\n     # check that the user is loaded from the session\n     with client:\n-        client.get('/')\n-        assert session['user_id'] == 1\n-        assert g.user['username'] == 'test'\n+        client.get(\"/\")\n+        assert session[\"user_id\"] == 1\n+        assert g.user[\"username\"] == \"test\"\n \n \n-@pytest.mark.parametrize(('username', 'password', 'message'), (\n-    ('a', 'test', b'Incorrect username.'),\n-    ('test', 'a', b'Incorrect password.'),\n-))\n+@pytest.mark.parametrize(\n+    (\"username\", \"password\", \"message\"),\n+    ((\"a\", \"test\", b\"Incorrect username.\"), (\"test\", \"a\", b\"Incorrect password.\")),\n+)\n def test_login_validate_input(auth, username, password, message):\n     response = auth.login(username, password)\n     assert message in response.data\n@@ -63,4 +64,4 @@ def test_logout(client, auth):\n \n     with client:\n         auth.logout()\n-        assert 'user_id' not in session\n+        assert \"user_id\" not in session\n\n@@ -3,47 +3,40 @@ from flaskr.db import get_db\n \n \n def test_index(client, auth):\n-    response = client.get('/')\n+    response = client.get(\"/\")\n     assert b\"Log In\" in response.data\n     assert b\"Register\" in response.data\n \n     auth.login()\n-    response = client.get('/')\n-    assert b'test title' in response.data\n-    assert b'by test on 2018-01-01' in response.data\n-    assert b'test\\nbody' in response.data\n+    response = client.get(\"/\")\n+    assert b\"test title\" in response.data\n+    assert b\"by test on 2018-01-01\" in response.data\n+    assert b\"test\\nbody\" in response.data\n     assert b'href=\"/1/update\"' in response.data\n \n \n-@pytest.mark.parametrize('path', (\n-    '/create',\n-    '/1/update',\n-    '/1/delete',\n-))\n+@pytest.mark.parametrize(\"path\", (\"/create\", \"/1/update\", \"/1/delete\"))\n def test_login_required(client, path):\n     response = client.post(path)\n-    assert response.headers['Location'] == 'http://localhost/auth/login'\n+    assert response.headers[\"Location\"] == \"http://localhost/auth/login\"\n \n \n def test_author_required(app, client, auth):\n     # change the post author to another user\n     with app.app_context():\n         db = get_db()\n-        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')\n+        db.execute(\"UPDATE post SET author_id = 2 WHERE id = 1\")\n         db.commit()\n \n     auth.login()\n     # current user can't modify other user's post\n-    assert client.post('/1/update').status_code == 403\n-    assert client.post('/1/delete').status_code == 403\n+    assert client.post(\"/1/update\").status_code == 403\n+    assert client.post(\"/1/delete\").status_code == 403\n     # current user doesn't see edit link\n-    assert b'href=\"/1/update\"' not in client.get('/').data\n+    assert b'href=\"/1/update\"' not in client.get(\"/\").data\n \n \n-@pytest.mark.parametrize('path', (\n-    '/2/update',\n-    '/2/delete',\n-))\n+@pytest.mark.parametrize(\"path\", (\"/2/update\", \"/2/delete\"))\n def test_exists_required(client, auth, path):\n     auth.login()\n     assert client.post(path).status_code == 404\n@@ -51,42 +44,39 @@ def test_exists_required(client, auth, path):\n \n def test_create(client, auth, app):\n     auth.login()\n-    assert client.get('/create').status_code == 200\n-    client.post('/create', data={'title': 'created', 'body': ''})\n+    assert client.get(\"/create\").status_code == 200\n+    client.post(\"/create\", data={\"title\": \"created\", \"body\": \"\"})\n \n     with app.app_context():\n         db = get_db()\n-        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]\n+        count = db.execute(\"SELECT COUNT(id) FROM post\").fetchone()[0]\n         assert count == 2\n \n \n def test_update(client, auth, app):\n     auth.login()\n-    assert client.get('/1/update').status_code == 200\n-    client.post('/1/update', data={'title': 'updated', 'body': ''})\n+    assert client.get(\"/1/update\").status_code == 200\n+    client.post(\"/1/update\", data={\"title\": \"updated\", \"body\": \"\"})\n \n     with app.app_context():\n         db = get_db()\n-        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n-        assert post['title'] == 'updated'\n+        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n+        assert post[\"title\"] == \"updated\"\n \n \n-@pytest.mark.parametrize('path', (\n-    '/create',\n-    '/1/update',\n-))\n+@pytest.mark.parametrize(\"path\", (\"/create\", \"/1/update\"))\n def test_create_update_validate(client, auth, path):\n     auth.login()\n-    response = client.post(path, data={'title': '', 'body': ''})\n-    assert b'Title is required.' in response.data\n+    response = client.post(path, data={\"title\": \"\", \"body\": \"\"})\n+    assert b\"Title is required.\" in response.data\n \n \n def test_delete(client, auth, app):\n     auth.login()\n-    response = client.post('/1/delete')\n-    assert response.headers['Location'] == 'http://localhost/'\n+    response = client.post(\"/1/delete\")\n+    assert response.headers[\"Location\"] == \"http://localhost/\"\n \n     with app.app_context():\n         db = get_db()\n-        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n+        post = db.execute(\"SELECT * FROM post WHERE id = 1\").fetchone()\n         assert post is None\n\n@@ -10,9 +10,9 @@ def test_get_close_db(app):\n         assert db is get_db()\n \n     with pytest.raises(sqlite3.ProgrammingError) as e:\n-        db.execute('SELECT 1')\n+        db.execute(\"SELECT 1\")\n \n-    assert 'closed' in str(e)\n+    assert \"closed\" in str(e)\n \n \n def test_init_db_command(runner, monkeypatch):\n@@ -22,7 +22,7 @@ def test_init_db_command(runner, monkeypatch):\n     def fake_init_db():\n         Recorder.called = True\n \n-    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)\n-    result = runner.invoke(args=['init-db'])\n-    assert 'Initialized' in result.output\n+    monkeypatch.setattr(\"flaskr.db.init_db\", fake_init_db)\n+    result = runner.invoke(args=[\"init-db\"])\n+    assert \"Initialized\" in result.output\n     assert Recorder.called\n\n@@ -4,9 +4,9 @@ from flaskr import create_app\n def test_config():\n     \"\"\"Test create_app without passing test config.\"\"\"\n     assert not create_app().testing\n-    assert create_app({'TESTING': True}).testing\n+    assert create_app({\"TESTING\": True}).testing\n \n \n def test_hello(client):\n-    response = client.get('/hello')\n-    assert response.data == b'Hello, World!'\n+    response = client.get(\"/hello\")\n+    assert response.data == b\"Hello, World!\"\n\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '1.1.dev'\n+__version__ = \"1.1.dev\"\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n@@ -20,21 +20,48 @@ from jinja2 import Markup, escape\n \n from .app import Flask, Request, Response\n from .config import Config\n-from .helpers import url_for, flash, send_file, send_from_directory, \\\n-     get_flashed_messages, get_template_attribute, make_response, safe_join, \\\n-     stream_with_context\n-from .globals import current_app, g, request, session, _request_ctx_stack, \\\n-     _app_ctx_stack\n-from .ctx import has_request_context, has_app_context, \\\n-     after_this_request, copy_current_request_context\n+from .helpers import (\n+    url_for,\n+    flash,\n+    send_file,\n+    send_from_directory,\n+    get_flashed_messages,\n+    get_template_attribute,\n+    make_response,\n+    safe_join,\n+    stream_with_context,\n+)\n+from .globals import (\n+    current_app,\n+    g,\n+    request,\n+    session,\n+    _request_ctx_stack,\n+    _app_ctx_stack,\n+)\n+from .ctx import (\n+    has_request_context,\n+    has_app_context,\n+    after_this_request,\n+    copy_current_request_context,\n+)\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n \n # the signals\n-from .signals import signals_available, template_rendered, request_started, \\\n-     request_finished, got_request_exception, request_tearing_down, \\\n-     appcontext_tearing_down, appcontext_pushed, \\\n-     appcontext_popped, message_flashed, before_render_template\n+from .signals import (\n+    signals_available,\n+    template_rendered,\n+    request_started,\n+    request_finished,\n+    got_request_exception,\n+    request_tearing_down,\n+    appcontext_tearing_down,\n+    appcontext_pushed,\n+    appcontext_popped,\n+    message_flashed,\n+    before_render_template,\n+)\n \n # We're not exposing the actual json module but a convenient wrapper around\n # it.\n\n@@ -9,6 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-if __name__ == '__main__':\n+if __name__ == \"__main__\":\n     from .cli import main\n+\n     main(as_module=True)\n\n@@ -50,11 +50,11 @@ else:\n     from cStringIO import StringIO\n     import collections as collections_abc\n \n-    exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n+    exec(\"def reraise(tp, value, tb=None):\\n raise tp, value, tb\")\n \n     def implements_to_string(cls):\n         cls.__unicode__ = cls.__str__\n-        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n+        cls.__str__ = lambda x: x.__unicode__().encode(\"utf-8\")\n         return cls\n \n \n@@ -66,7 +66,8 @@ def with_metaclass(meta, *bases):\n     class metaclass(type):\n         def __new__(cls, name, this_bases, d):\n             return meta(name, bases, d)\n-    return type.__new__(metaclass, 'temporary_class', (), {})\n+\n+    return type.__new__(metaclass, \"temporary_class\", (), {})\n \n \n # Certain versions of pypy have a bug where clearing the exception stack\n@@ -81,14 +82,17 @@ def with_metaclass(meta, *bases):\n #\n # Ubuntu 14.04 has PyPy 2.2.1, which does exhibit this bug.\n BROKEN_PYPY_CTXMGR_EXIT = False\n-if hasattr(sys, 'pypy_version_info'):\n+if hasattr(sys, \"pypy_version_info\"):\n+\n     class _Mgr(object):\n         def __enter__(self):\n             return self\n+\n         def __exit__(self, *args):\n-            if hasattr(sys, 'exc_clear'):\n+            if hasattr(sys, \"exc_clear\"):\n                 # Python 3 (PyPy3) doesn't have exc_clear\n                 sys.exc_clear()\n+\n     try:\n         try:\n             with _Mgr():\n@@ -107,4 +111,4 @@ except ImportError:\n     # Backwards compatibility as proposed in PEP 0519:\n     # https://www.python.org/dev/peps/pep-0519/#backwards-compatibility\n     def fspath(path):\n-        return path.__fspath__() if hasattr(path, '__fspath__') else path\n+        return path.__fspath__() if hasattr(path, \"__fspath__\") else path\n\n@@ -18,10 +18,15 @@ from itertools import chain\n from threading import Lock\n \n from werkzeug.datastructures import Headers, ImmutableDict\n-from werkzeug.exceptions import BadRequest, BadRequestKeyError, HTTPException, \\\n-    InternalServerError, MethodNotAllowed, default_exceptions\n-from werkzeug.routing import BuildError, Map, RequestRedirect, \\\n-    RoutingException, Rule\n+from werkzeug.exceptions import (\n+    BadRequest,\n+    BadRequestKeyError,\n+    HTTPException,\n+    InternalServerError,\n+    MethodNotAllowed,\n+    default_exceptions,\n+)\n+from werkzeug.routing import BuildError, Map, RequestRedirect, RoutingException, Rule\n \n from . import cli, json\n from ._compat import integer_types, reraise, string_types, text_type\n@@ -30,15 +35,29 @@ from .ctx import AppContext, RequestContext, _AppCtxGlobals\n from .globals import _request_ctx_stack, g, request, session\n from .helpers import (\n     _PackageBoundObject,\n-    _endpoint_from_view_func, find_package, get_env, get_debug_flag,\n-    get_flashed_messages, locked_cached_property, url_for, get_load_dotenv\n+    _endpoint_from_view_func,\n+    find_package,\n+    get_env,\n+    get_debug_flag,\n+    get_flashed_messages,\n+    locked_cached_property,\n+    url_for,\n+    get_load_dotenv,\n )\n from .logging import create_logger\n from .sessions import SecureCookieSessionInterface\n-from .signals import appcontext_tearing_down, got_request_exception, \\\n-    request_finished, request_started, request_tearing_down\n-from .templating import DispatchingJinjaLoader, Environment, \\\n-    _default_template_ctx_processor\n+from .signals import (\n+    appcontext_tearing_down,\n+    got_request_exception,\n+    request_finished,\n+    request_started,\n+    request_tearing_down,\n+)\n+from .templating import (\n+    DispatchingJinjaLoader,\n+    Environment,\n+    _default_template_ctx_processor,\n+)\n from .wrappers import Request, Response\n \n # a singleton sentinel value for parameter defaults\n@@ -55,16 +74,20 @@ def setupmethod(f):\n     \"\"\"Wraps a method so that it performs a check in debug mode if the\n     first request was already handled.\n     \"\"\"\n+\n     def wrapper_func(self, *args, **kwargs):\n         if self.debug and self._got_first_request:\n-            raise AssertionError('A setup function was called after the '\n-                'first request was handled.  This usually indicates a bug '\n-                'in the application where a module was not imported '\n-                'and decorators or other functionality was called too late.\\n'\n-                'To fix this make sure to import all your view modules, '\n-                'database models and everything related at a central place '\n-                'before the application starts serving requests.')\n+            raise AssertionError(\n+                \"A setup function was called after the \"\n+                \"first request was handled.  This usually indicates a bug \"\n+                \"in the application where a module was not imported \"\n+                \"and decorators or other functionality was called too late.\\n\"\n+                \"To fix this make sure to import all your view modules, \"\n+                \"database models and everything related at a central place \"\n+                \"before the application starts serving requests.\"\n+            )\n         return f(self, *args, **kwargs)\n+\n     return update_wrapper(wrapper_func, f)\n \n \n@@ -217,7 +240,7 @@ class Flask(_PackageBoundObject):\n     #:\n     #: This attribute can also be configured from the config with the\n     #: ``TESTING`` configuration key.  Defaults to ``False``.\n-    testing = ConfigAttribute('TESTING')\n+    testing = ConfigAttribute(\"TESTING\")\n \n     #: If a secret key is set, cryptographic components can use this to\n     #: sign cookies and other things. Set this to a complex random value\n@@ -225,13 +248,13 @@ class Flask(_PackageBoundObject):\n     #:\n     #: This attribute can also be configured from the config with the\n     #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n-    secret_key = ConfigAttribute('SECRET_KEY')\n+    secret_key = ConfigAttribute(\"SECRET_KEY\")\n \n     #: The secure cookie uses this for the name of the session cookie.\n     #:\n     #: This attribute can also be configured from the config with the\n     #: ``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``\n-    session_cookie_name = ConfigAttribute('SESSION_COOKIE_NAME')\n+    session_cookie_name = ConfigAttribute(\"SESSION_COOKIE_NAME\")\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n@@ -240,8 +263,9 @@ class Flask(_PackageBoundObject):\n     #: This attribute can also be configured from the config with the\n     #: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to\n     #: ``timedelta(days=31)``\n-    permanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LIFETIME',\n-        get_converter=_make_timedelta)\n+    permanent_session_lifetime = ConfigAttribute(\n+        \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta\n+    )\n \n     #: A :class:`~datetime.timedelta` which is used as default cache_timeout\n     #: for the :func:`send_file` functions. The default is 12 hours.\n@@ -250,8 +274,9 @@ class Flask(_PackageBoundObject):\n     #: ``SEND_FILE_MAX_AGE_DEFAULT`` configuration key. This configuration\n     #: variable can also be set with an integer value used as seconds.\n     #: Defaults to ``timedelta(hours=12)``\n-    send_file_max_age_default = ConfigAttribute('SEND_FILE_MAX_AGE_DEFAULT',\n-        get_converter=_make_timedelta)\n+    send_file_max_age_default = ConfigAttribute(\n+        \"SEND_FILE_MAX_AGE_DEFAULT\", get_converter=_make_timedelta\n+    )\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n@@ -261,7 +286,7 @@ class Flask(_PackageBoundObject):\n     #:\n     #: This attribute can also be configured from the config with the\n     #: ``USE_X_SENDFILE`` configuration key.  Defaults to ``False``.\n-    use_x_sendfile = ConfigAttribute('USE_X_SENDFILE')\n+    use_x_sendfile = ConfigAttribute(\"USE_X_SENDFILE\")\n \n     #: The JSON encoder class to use.  Defaults to :class:`~flask.json.JSONEncoder`.\n     #:\n@@ -275,41 +300,43 @@ class Flask(_PackageBoundObject):\n \n     #: Options that are passed directly to the Jinja2 environment.\n     jinja_options = ImmutableDict(\n-        extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n+        extensions=[\"jinja2.ext.autoescape\", \"jinja2.ext.with_\"]\n     )\n \n     #: Default configuration parameters.\n-    default_config = ImmutableDict({\n-        'ENV':                                  None,\n-        'DEBUG':                                None,\n-        'TESTING':                              False,\n-        'PROPAGATE_EXCEPTIONS':                 None,\n-        'PRESERVE_CONTEXT_ON_EXCEPTION':        None,\n-        'SECRET_KEY':                           None,\n-        'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n-        'USE_X_SENDFILE':                       False,\n-        'SERVER_NAME':                          None,\n-        'APPLICATION_ROOT':                     '/',\n-        'SESSION_COOKIE_NAME':                  'session',\n-        'SESSION_COOKIE_DOMAIN':                None,\n-        'SESSION_COOKIE_PATH':                  None,\n-        'SESSION_COOKIE_HTTPONLY':              True,\n-        'SESSION_COOKIE_SECURE':                False,\n-        'SESSION_COOKIE_SAMESITE':              None,\n-        'SESSION_REFRESH_EACH_REQUEST':         True,\n-        'MAX_CONTENT_LENGTH':                   None,\n-        'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),\n-        'TRAP_BAD_REQUEST_ERRORS':              None,\n-        'TRAP_HTTP_EXCEPTIONS':                 False,\n-        'EXPLAIN_TEMPLATE_LOADING':             False,\n-        'PREFERRED_URL_SCHEME':                 'http',\n-        'JSON_AS_ASCII':                        True,\n-        'JSON_SORT_KEYS':                       True,\n-        'JSONIFY_PRETTYPRINT_REGULAR':          False,\n-        'JSONIFY_MIMETYPE':                     'application/json',\n-        'TEMPLATES_AUTO_RELOAD':                None,\n-        'MAX_COOKIE_SIZE': 4093,\n-    })\n+    default_config = ImmutableDict(\n+        {\n+            \"ENV\": None,\n+            \"DEBUG\": None,\n+            \"TESTING\": False,\n+            \"PROPAGATE_EXCEPTIONS\": None,\n+            \"PRESERVE_CONTEXT_ON_EXCEPTION\": None,\n+            \"SECRET_KEY\": None,\n+            \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),\n+            \"USE_X_SENDFILE\": False,\n+            \"SERVER_NAME\": None,\n+            \"APPLICATION_ROOT\": \"/\",\n+            \"SESSION_COOKIE_NAME\": \"session\",\n+            \"SESSION_COOKIE_DOMAIN\": None,\n+            \"SESSION_COOKIE_PATH\": None,\n+            \"SESSION_COOKIE_HTTPONLY\": True,\n+            \"SESSION_COOKIE_SECURE\": False,\n+            \"SESSION_COOKIE_SAMESITE\": None,\n+            \"SESSION_REFRESH_EACH_REQUEST\": True,\n+            \"MAX_CONTENT_LENGTH\": None,\n+            \"SEND_FILE_MAX_AGE_DEFAULT\": timedelta(hours=12),\n+            \"TRAP_BAD_REQUEST_ERRORS\": None,\n+            \"TRAP_HTTP_EXCEPTIONS\": False,\n+            \"EXPLAIN_TEMPLATE_LOADING\": False,\n+            \"PREFERRED_URL_SCHEME\": \"http\",\n+            \"JSON_AS_ASCII\": True,\n+            \"JSON_SORT_KEYS\": True,\n+            \"JSONIFY_PRETTYPRINT_REGULAR\": False,\n+            \"JSONIFY_MIMETYPE\": \"application/json\",\n+            \"TEMPLATES_AUTO_RELOAD\": None,\n+            \"MAX_COOKIE_SIZE\": 4093,\n+        }\n+    )\n \n     #: The rule object to use for URL rules created.  This is used by\n     #: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.\n@@ -355,20 +382,17 @@ class Flask(_PackageBoundObject):\n         self,\n         import_name,\n         static_url_path=None,\n-        static_folder='static',\n+        static_folder=\"static\",\n         static_host=None,\n         host_matching=False,\n         subdomain_matching=False,\n-        template_folder='templates',\n+        template_folder=\"templates\",\n         instance_path=None,\n         instance_relative_config=False,\n-        root_path=None\n+        root_path=None,\n     ):\n         _PackageBoundObject.__init__(\n-            self,\n-            import_name,\n-            template_folder=template_folder,\n-            root_path=root_path\n+            self, import_name, template_folder=template_folder, root_path=root_path\n         )\n \n         if static_url_path is not None:\n@@ -381,8 +405,8 @@ class Flask(_PackageBoundObject):\n             instance_path = self.auto_find_instance_path()\n         elif not os.path.isabs(instance_path):\n             raise ValueError(\n-                'If an instance path is provided it must be absolute.'\n-                ' A relative path was given instead.'\n+                \"If an instance path is provided it must be absolute.\"\n+                \" A relative path was given instead.\"\n             )\n \n         #: Holds the path to the instance folder.\n@@ -490,9 +514,7 @@ class Flask(_PackageBoundObject):\n         #: requests.  Each returns a dictionary that the template context is\n         #: updated with.  To register a function here, use the\n         #: :meth:`context_processor` decorator.\n-        self.template_context_processors = {\n-            None: [_default_template_ctx_processor]\n-        }\n+        self.template_context_processors = {None: [_default_template_ctx_processor]}\n \n         #: A list of shell context processor functions that should be run\n         #: when a shell context is created.\n@@ -555,12 +577,14 @@ class Flask(_PackageBoundObject):\n         # For one, it might be created while the server is running (e.g. during\n         # development). Also, Google App Engine stores static files somewhere\n         if self.has_static_folder:\n-            assert bool(static_host) == host_matching, 'Invalid static_host/host_matching combination'\n+            assert (\n+                bool(static_host) == host_matching\n+            ), \"Invalid static_host/host_matching combination\"\n             self.add_url_rule(\n-                self.static_url_path + '/<path:filename>',\n-                endpoint='static',\n+                self.static_url_path + \"/<path:filename>\",\n+                endpoint=\"static\",\n                 host=static_host,\n-                view_func=self.send_static_file\n+                view_func=self.send_static_file,\n             )\n \n         #: The click command line context for this application.  Commands\n@@ -581,10 +605,10 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        if self.import_name == '__main__':\n-            fn = getattr(sys.modules['__main__'], '__file__', None)\n+        if self.import_name == \"__main__\":\n+            fn = getattr(sys.modules[\"__main__\"], \"__file__\", None)\n             if fn is None:\n-                return '__main__'\n+                return \"__main__\"\n             return os.path.splitext(os.path.basename(fn))[0]\n         return self.import_name\n \n@@ -595,7 +619,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        rv = self.config['PROPAGATE_EXCEPTIONS']\n+        rv = self.config[\"PROPAGATE_EXCEPTIONS\"]\n         if rv is not None:\n             return rv\n         return self.testing or self.debug\n@@ -608,7 +632,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        rv = self.config['PRESERVE_CONTEXT_ON_EXCEPTION']\n+        rv = self.config[\"PRESERVE_CONTEXT_ON_EXCEPTION\"]\n         if rv is not None:\n             return rv\n         return self.debug\n@@ -663,8 +687,8 @@ class Flask(_PackageBoundObject):\n         if instance_relative:\n             root_path = self.instance_path\n         defaults = dict(self.default_config)\n-        defaults['ENV'] = get_env()\n-        defaults['DEBUG'] = get_debug_flag()\n+        defaults[\"ENV\"] = get_env()\n+        defaults[\"DEBUG\"] = get_debug_flag()\n         return self.config_class(root_path, defaults)\n \n     def auto_find_instance_path(self):\n@@ -677,10 +701,10 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         prefix, package_path = find_package(self.import_name)\n         if prefix is None:\n-            return os.path.join(package_path, 'instance')\n-        return os.path.join(prefix, 'var', self.name + '-instance')\n+            return os.path.join(package_path, \"instance\")\n+        return os.path.join(prefix, \"var\", self.name + \"-instance\")\n \n-    def open_instance_resource(self, resource, mode='rb'):\n+    def open_instance_resource(self, resource, mode=\"rb\"):\n         \"\"\"Opens a resource from the application's instance folder\n         (:attr:`instance_path`).  Otherwise works like\n         :meth:`open_resource`.  Instance resources can also be opened for\n@@ -703,11 +727,11 @@ class Flask(_PackageBoundObject):\n             This property was added but the underlying config and behavior\n             already existed.\n         \"\"\"\n-        rv = self.config['TEMPLATES_AUTO_RELOAD']\n+        rv = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n         return rv if rv is not None else self.debug\n \n     def _set_templates_auto_reload(self, value):\n-        self.config['TEMPLATES_AUTO_RELOAD'] = value\n+        self.config[\"TEMPLATES_AUTO_RELOAD\"] = value\n \n     templates_auto_reload = property(\n         _get_templates_auto_reload, _set_templates_auto_reload\n@@ -727,11 +751,11 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         options = dict(self.jinja_options)\n \n-        if 'autoescape' not in options:\n-            options['autoescape'] = self.select_jinja_autoescape\n+        if \"autoescape\" not in options:\n+            options[\"autoescape\"] = self.select_jinja_autoescape\n \n-        if 'auto_reload' not in options:\n-            options['auto_reload'] = self.templates_auto_reload\n+        if \"auto_reload\" not in options:\n+            options[\"auto_reload\"] = self.templates_auto_reload\n \n         rv = self.jinja_environment(self, **options)\n         rv.globals.update(\n@@ -743,9 +767,9 @@ class Flask(_PackageBoundObject):\n             # templates we also want the proxies in there.\n             request=request,\n             session=session,\n-            g=g\n+            g=g,\n         )\n-        rv.filters['tojson'] = json.tojson_filter\n+        rv.filters[\"tojson\"] = json.tojson_filter\n         return rv\n \n     def create_global_jinja_loader(self):\n@@ -769,7 +793,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         if filename is None:\n             return True\n-        return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n+        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\"))\n \n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n@@ -803,7 +827,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.11\n         \"\"\"\n-        rv = {'app': self, 'g': g}\n+        rv = {\"app\": self, \"g\": g}\n         for processor in self.shell_context_processors:\n             rv.update(processor())\n         return rv\n@@ -817,13 +841,13 @@ class Flask(_PackageBoundObject):\n     #: **Do not enable development when deploying in production.**\n     #:\n     #: Default: ``'production'``\n-    env = ConfigAttribute('ENV')\n+    env = ConfigAttribute(\"ENV\")\n \n     def _get_debug(self):\n-        return self.config['DEBUG']\n+        return self.config[\"DEBUG\"]\n \n     def _set_debug(self, value):\n-        self.config['DEBUG'] = value\n+        self.config[\"DEBUG\"] = value\n         self.jinja_env.auto_reload = self.templates_auto_reload\n \n     #: Whether debug mode is enabled. When using ``flask run`` to start\n@@ -841,8 +865,7 @@ class Flask(_PackageBoundObject):\n     debug = property(_get_debug, _set_debug)\n     del _get_debug, _set_debug\n \n-    def run(self, host=None, port=None, debug=None,\n-            load_dotenv=True, **options):\n+    def run(self, host=None, port=None, debug=None, load_dotenv=True, **options):\n         \"\"\"Runs the application on a local development server.\n \n         Do not use ``run()`` in a production setting. It is not intended to\n@@ -902,8 +925,9 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         # Change this into a no-op if the server is invoked from the\n         # command line. Have a look at cli.py for more information.\n-        if os.environ.get('FLASK_RUN_FROM_CLI') == 'true':\n+        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":\n             from .debughelpers import explain_ignored_app_run\n+\n             explain_ignored_app_run()\n             return\n \n@@ -911,30 +935,30 @@ class Flask(_PackageBoundObject):\n             cli.load_dotenv()\n \n             # if set, let env vars override previous values\n-            if 'FLASK_ENV' in os.environ:\n+            if \"FLASK_ENV\" in os.environ:\n                 self.env = get_env()\n                 self.debug = get_debug_flag()\n-            elif 'FLASK_DEBUG' in os.environ:\n+            elif \"FLASK_DEBUG\" in os.environ:\n                 self.debug = get_debug_flag()\n \n         # debug passed to method overrides all other sources\n         if debug is not None:\n             self.debug = bool(debug)\n \n-        _host = '127.0.0.1'\n+        _host = \"127.0.0.1\"\n         _port = 5000\n-        server_name = self.config.get('SERVER_NAME')\n+        server_name = self.config.get(\"SERVER_NAME\")\n         sn_host, sn_port = None, None\n \n         if server_name:\n-            sn_host, _, sn_port = server_name.partition(':')\n+            sn_host, _, sn_port = server_name.partition(\":\")\n \n         host = host or sn_host or _host\n         port = int(port or sn_port or _port)\n \n-        options.setdefault('use_reloader', self.debug)\n-        options.setdefault('use_debugger', self.debug)\n-        options.setdefault('threaded', True)\n+        options.setdefault(\"use_reloader\", self.debug)\n+        options.setdefault(\"use_debugger\", self.debug)\n+        options.setdefault(\"threaded\", True)\n \n         cli.show_server_banner(self.env, self.debug, self.name, False)\n \n@@ -1034,10 +1058,12 @@ class Flask(_PackageBoundObject):\n         :param request: an instance of :attr:`request_class`.\n         \"\"\"\n \n-        warnings.warn(DeprecationWarning(\n+        warnings.warn(\n+            DeprecationWarning(\n                 '\"open_session\" is deprecated and will be removed in 1.1. Use'\n                 ' \"session_interface.open_session\" instead.'\n-        ))\n+            )\n+        )\n         return self.session_interface.open_session(self, request)\n \n     def save_session(self, session, response):\n@@ -1055,10 +1081,12 @@ class Flask(_PackageBoundObject):\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n \n-        warnings.warn(DeprecationWarning(\n+        warnings.warn(\n+            DeprecationWarning(\n                 '\"save_session\" is deprecated and will be removed in 1.1. Use'\n                 ' \"session_interface.save_session\" instead.'\n-        ))\n+            )\n+        )\n         return self.session_interface.save_session(self, session, response)\n \n     def make_null_session(self):\n@@ -1072,10 +1100,12 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.7\n         \"\"\"\n \n-        warnings.warn(DeprecationWarning(\n+        warnings.warn(\n+            DeprecationWarning(\n                 '\"make_null_session\" is deprecated and will be removed in 1.1. Use'\n                 ' \"session_interface.make_null_session\" instead.'\n-        ))\n+            )\n+        )\n         return self.session_interface.make_null_session(self)\n \n     @setupmethod\n@@ -1102,11 +1132,10 @@ class Flask(_PackageBoundObject):\n \n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, (\n-                'A name collision occurred between blueprints %r and %r. Both'\n+                \"A name collision occurred between blueprints %r and %r. Both\"\n                 ' share the same name \"%s\". Blueprints that are created on the'\n-                ' fly need unique names.' % (\n-                    blueprint, self.blueprints[blueprint.name], blueprint.name\n-                )\n+                \" fly need unique names.\"\n+                % (blueprint, self.blueprints[blueprint.name], blueprint.name)\n             )\n         else:\n             self.blueprints[blueprint.name] = blueprint\n@@ -1123,8 +1152,14 @@ class Flask(_PackageBoundObject):\n         return iter(self._blueprint_order)\n \n     @setupmethod\n-    def add_url_rule(self, rule, endpoint=None, view_func=None,\n-                     provide_automatic_options=None, **options):\n+    def add_url_rule(\n+        self,\n+        rule,\n+        endpoint=None,\n+        view_func=None,\n+        provide_automatic_options=None,\n+        **options\n+    ):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n         endpoint.\n@@ -1179,32 +1214,35 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         if endpoint is None:\n             endpoint = _endpoint_from_view_func(view_func)\n-        options['endpoint'] = endpoint\n-        methods = options.pop('methods', None)\n+        options[\"endpoint\"] = endpoint\n+        methods = options.pop(\"methods\", None)\n \n         # if the methods are not given and the view_func object knows its\n         # methods we can use that instead.  If neither exists, we go with\n         # a tuple of only ``GET`` as default.\n         if methods is None:\n-            methods = getattr(view_func, 'methods', None) or ('GET',)\n+            methods = getattr(view_func, \"methods\", None) or (\"GET\",)\n         if isinstance(methods, string_types):\n-            raise TypeError('Allowed methods have to be iterables of strings, '\n-                            'for example: @app.route(..., methods=[\"POST\"])')\n+            raise TypeError(\n+                \"Allowed methods have to be iterables of strings, \"\n+                'for example: @app.route(..., methods=[\"POST\"])'\n+            )\n         methods = set(item.upper() for item in methods)\n \n         # Methods that should always be added\n-        required_methods = set(getattr(view_func, 'required_methods', ()))\n+        required_methods = set(getattr(view_func, \"required_methods\", ()))\n \n         # starting with Flask 0.8 the view_func object can disable and\n         # force-enable the automatic options handling.\n         if provide_automatic_options is None:\n-            provide_automatic_options = getattr(view_func,\n-                'provide_automatic_options', None)\n+            provide_automatic_options = getattr(\n+                view_func, \"provide_automatic_options\", None\n+            )\n \n         if provide_automatic_options is None:\n-            if 'OPTIONS' not in methods:\n+            if \"OPTIONS\" not in methods:\n                 provide_automatic_options = True\n-                required_methods.add('OPTIONS')\n+                required_methods.add(\"OPTIONS\")\n             else:\n                 provide_automatic_options = False\n \n@@ -1218,8 +1256,10 @@ class Flask(_PackageBoundObject):\n         if view_func is not None:\n             old_func = self.view_functions.get(endpoint)\n             if old_func is not None and old_func != view_func:\n-                raise AssertionError('View function mapping is overwriting an '\n-                                     'existing endpoint function: %s' % endpoint)\n+                raise AssertionError(\n+                    \"View function mapping is overwriting an \"\n+                    \"existing endpoint function: %s\" % endpoint\n+                )\n             self.view_functions[endpoint] = view_func\n \n     def route(self, rule, **options):\n@@ -1246,10 +1286,12 @@ class Flask(_PackageBoundObject):\n                         Starting with Flask 0.6, ``OPTIONS`` is implicitly\n                         added and handled by the standard request handling.\n         \"\"\"\n+\n         def decorator(f):\n-            endpoint = options.pop('endpoint', None)\n+            endpoint = options.pop(\"endpoint\", None)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n+\n         return decorator\n \n     @setupmethod\n@@ -1263,9 +1305,11 @@ class Flask(_PackageBoundObject):\n \n         :param endpoint: the name of the endpoint\n         \"\"\"\n+\n         def decorator(f):\n             self.view_functions[endpoint] = f\n             return f\n+\n         return decorator\n \n     @staticmethod\n@@ -1313,9 +1357,11 @@ class Flask(_PackageBoundObject):\n         :param code_or_exception: the code as integer for the handler, or\n                                   an arbitrary exception\n         \"\"\"\n+\n         def decorator(f):\n             self._register_error_handler(None, code_or_exception, f)\n             return f\n+\n         return decorator\n \n     @setupmethod\n@@ -1337,9 +1383,9 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         if isinstance(code_or_exception, HTTPException):  # old broken behavior\n             raise ValueError(\n-                'Tried to register a handler for an exception instance {0!r}.'\n-                ' Handlers can only be registered for exception classes or'\n-                ' HTTP error codes.'.format(code_or_exception)\n+                \"Tried to register a handler for an exception instance {0!r}.\"\n+                \" Handlers can only be registered for exception classes or\"\n+                \" HTTP error codes.\".format(code_or_exception)\n             )\n \n         try:\n@@ -1366,9 +1412,11 @@ class Flask(_PackageBoundObject):\n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_template_filter(f, name=name)\n             return f\n+\n         return decorator\n \n     @setupmethod\n@@ -1401,9 +1449,11 @@ class Flask(_PackageBoundObject):\n         :param name: the optional name of the test, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_template_test(f, name=name)\n             return f\n+\n         return decorator\n \n     @setupmethod\n@@ -1433,9 +1483,11 @@ class Flask(_PackageBoundObject):\n         :param name: the optional name of the global function, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_template_global(f, name=name)\n             return f\n+\n         return decorator\n \n     @setupmethod\n@@ -1613,8 +1665,10 @@ class Flask(_PackageBoundObject):\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n         for name, c in (\n-            (request.blueprint, code), (None, code),\n-            (request.blueprint, None), (None, None)\n+            (request.blueprint, code),\n+            (None, code),\n+            (request.blueprint, None),\n+            (None, None),\n         ):\n             handler_map = self.error_handler_spec.setdefault(name, {}).get(c)\n \n@@ -1677,14 +1731,15 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        if self.config['TRAP_HTTP_EXCEPTIONS']:\n+        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:\n             return True\n \n-        trap_bad_request = self.config['TRAP_BAD_REQUEST_ERRORS']\n+        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n \n         # if unset, trap key errors in debug mode\n         if (\n-            trap_bad_request is None and self.debug\n+            trap_bad_request is None\n+            and self.debug\n             and isinstance(e, BadRequestKeyError)\n         ):\n             return True\n@@ -1773,10 +1828,9 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        self.logger.error('Exception on %s [%s]' % (\n-            request.path,\n-            request.method\n-        ), exc_info=exc_info)\n+        self.logger.error(\n+            \"Exception on %s [%s]\" % (request.path, request.method), exc_info=exc_info\n+        )\n \n     def raise_routing_exception(self, request):\n         \"\"\"Exceptions that are recording during routing are reraised with\n@@ -1786,12 +1840,15 @@ class Flask(_PackageBoundObject):\n \n         :internal:\n         \"\"\"\n-        if not self.debug \\\n-           or not isinstance(request.routing_exception, RequestRedirect) \\\n-           or request.method in ('GET', 'HEAD', 'OPTIONS'):\n+        if (\n+            not self.debug\n+            or not isinstance(request.routing_exception, RequestRedirect)\n+            or request.method in (\"GET\", \"HEAD\", \"OPTIONS\")\n+        ):\n             raise request.routing_exception\n \n         from .debughelpers import FormDataRoutingRedirect\n+\n         raise FormDataRoutingRedirect(request)\n \n     def dispatch_request(self):\n@@ -1810,8 +1867,10 @@ class Flask(_PackageBoundObject):\n         rule = req.url_rule\n         # if we provide automatic options for this URL and the\n         # request came with the OPTIONS method, reply automatically\n-        if getattr(rule, 'provide_automatic_options', False) \\\n-           and req.method == 'OPTIONS':\n+        if (\n+            getattr(rule, \"provide_automatic_options\", False)\n+            and req.method == \"OPTIONS\"\n+        ):\n             return self.make_default_options_response()\n         # otherwise dispatch to the handler for that endpoint\n         return self.view_functions[rule.endpoint](**req.view_args)\n@@ -1853,8 +1912,9 @@ class Flask(_PackageBoundObject):\n         except Exception:\n             if not from_error_handler:\n                 raise\n-            self.logger.exception('Request finalizing failed with an '\n-                                  'error while handling an error')\n+            self.logger.exception(\n+                \"Request finalizing failed with an \" \"error while handling an error\"\n+            )\n         return response\n \n     def try_trigger_before_first_request_functions(self):\n@@ -1881,13 +1941,13 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.7\n         \"\"\"\n         adapter = _request_ctx_stack.top.url_adapter\n-        if hasattr(adapter, 'allowed_methods'):\n+        if hasattr(adapter, \"allowed_methods\"):\n             methods = adapter.allowed_methods()\n         else:\n             # fallback for Werkzeug < 0.7\n             methods = []\n             try:\n-                adapter.match(method='--')\n+                adapter.match(method=\"--\")\n             except MethodNotAllowed as e:\n                 methods = e.valid_methods\n             except HTTPException as e:\n@@ -1964,17 +2024,17 @@ class Flask(_PackageBoundObject):\n             # other sized tuples are not allowed\n             else:\n                 raise TypeError(\n-                    'The view function did not return a valid response tuple.'\n-                    ' The tuple must have the form (body, status, headers),'\n-                    ' (body, status), or (body, headers).'\n+                    \"The view function did not return a valid response tuple.\"\n+                    \" The tuple must have the form (body, status, headers),\"\n+                    \" (body, status), or (body, headers).\"\n                 )\n \n         # the body must not be None\n         if rv is None:\n             raise TypeError(\n-                'The view function did not return a valid response. The'\n-                ' function either returned None or ended without a return'\n-                ' statement.'\n+                \"The view function did not return a valid response. The\"\n+                \" function either returned None or ended without a return\"\n+                \" statement.\"\n             )\n \n         # make sure the body is an instance of the response class\n@@ -1992,10 +2052,10 @@ class Flask(_PackageBoundObject):\n                     rv = self.response_class.force_type(rv, request.environ)\n                 except TypeError as e:\n                     new_error = TypeError(\n-                        '{e}\\nThe view function did not return a valid'\n-                        ' response. The return type must be a string, tuple,'\n-                        ' Response instance, or WSGI callable, but it was a'\n-                        ' {rv.__class__.__name__}.'.format(e=e, rv=rv)\n+                        \"{e}\\nThe view function did not return a valid\"\n+                        \" response. The return type must be a string, tuple,\"\n+                        \" Response instance, or WSGI callable, but it was a\"\n+                        \" {rv.__class__.__name__}.\".format(e=e, rv=rv)\n                     )\n                     reraise(TypeError, new_error, sys.exc_info()[2])\n \n@@ -2031,19 +2091,24 @@ class Flask(_PackageBoundObject):\n             # If subdomain matching is disabled (the default), use the\n             # default subdomain in all cases. This should be the default\n             # in Werkzeug but it currently does not have that feature.\n-            subdomain = ((self.url_map.default_subdomain or None)\n-                         if not self.subdomain_matching else None)\n+            subdomain = (\n+                (self.url_map.default_subdomain or None)\n+                if not self.subdomain_matching\n+                else None\n+            )\n             return self.url_map.bind_to_environ(\n                 request.environ,\n-                server_name=self.config['SERVER_NAME'],\n-                subdomain=subdomain)\n+                server_name=self.config[\"SERVER_NAME\"],\n+                subdomain=subdomain,\n+            )\n         # We need at the very least the server name to be set for this\n         # to work.\n-        if self.config['SERVER_NAME'] is not None:\n+        if self.config[\"SERVER_NAME\"] is not None:\n             return self.url_map.bind(\n-                self.config['SERVER_NAME'],\n-                script_name=self.config['APPLICATION_ROOT'],\n-                url_scheme=self.config['PREFERRED_URL_SCHEME'])\n+                self.config[\"SERVER_NAME\"],\n+                script_name=self.config[\"APPLICATION_ROOT\"],\n+                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],\n+            )\n \n     def inject_url_defaults(self, endpoint, values):\n         \"\"\"Injects the URL defaults for the given endpoint directly into\n@@ -2053,8 +2118,8 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.7\n         \"\"\"\n         funcs = self.url_default_functions.get(None, ())\n-        if '.' in endpoint:\n-            bp = endpoint.rsplit('.', 1)[0]\n+        if \".\" in endpoint:\n+            bp = endpoint.rsplit(\".\", 1)[0]\n             funcs = chain(funcs, self.url_default_functions.get(bp, ()))\n         for func in funcs:\n             func(endpoint, values)\n@@ -2327,7 +2392,4 @@ class Flask(_PackageBoundObject):\n         return self.wsgi_app(environ, start_response)\n \n     def __repr__(self):\n-        return '<%s %r>' % (\n-            self.__class__.__name__,\n-            self.name,\n-        )\n+        return \"<%s %r>\" % (self.__class__.__name__, self.name)\n\n@@ -39,7 +39,7 @@ class BlueprintSetupState(object):\n         #: out if the blueprint was registered in the past already.\n         self.first_registration = first_registration\n \n-        subdomain = self.options.get('subdomain')\n+        subdomain = self.options.get(\"subdomain\")\n         if subdomain is None:\n             subdomain = self.blueprint.subdomain\n \n@@ -47,7 +47,7 @@ class BlueprintSetupState(object):\n         #: otherwise.\n         self.subdomain = subdomain\n \n-        url_prefix = self.options.get('url_prefix')\n+        url_prefix = self.options.get(\"url_prefix\")\n         if url_prefix is None:\n             url_prefix = self.blueprint.url_prefix\n         #: The prefix that should be used for all URLs defined on the\n@@ -57,7 +57,7 @@ class BlueprintSetupState(object):\n         #: A dictionary with URL defaults that is added to each and every\n         #: URL that was defined with the blueprint.\n         self.url_defaults = dict(self.blueprint.url_values_defaults)\n-        self.url_defaults.update(self.options.get('url_defaults', ()))\n+        self.url_defaults.update(self.options.get(\"url_defaults\", ()))\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"A helper method to register a rule (and optionally a view function)\n@@ -66,18 +66,22 @@ class BlueprintSetupState(object):\n         \"\"\"\n         if self.url_prefix is not None:\n             if rule:\n-                rule = '/'.join((\n-                    self.url_prefix.rstrip('/'), rule.lstrip('/')))\n+                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))\n             else:\n                 rule = self.url_prefix\n-        options.setdefault('subdomain', self.subdomain)\n+        options.setdefault(\"subdomain\", self.subdomain)\n         if endpoint is None:\n             endpoint = _endpoint_from_view_func(view_func)\n         defaults = self.url_defaults\n-        if 'defaults' in options:\n-            defaults = dict(defaults, **options.pop('defaults'))\n-        self.app.add_url_rule(rule, '%s.%s' % (self.blueprint.name, endpoint),\n-                              view_func, defaults=defaults, **options)\n+        if \"defaults\" in options:\n+            defaults = dict(defaults, **options.pop(\"defaults\"))\n+        self.app.add_url_rule(\n+            rule,\n+            \"%s.%s\" % (self.blueprint.name, endpoint),\n+            view_func,\n+            defaults=defaults,\n+            **options\n+        )\n \n \n class Blueprint(_PackageBoundObject):\n@@ -115,12 +119,21 @@ class Blueprint(_PackageBoundObject):\n     #: resources contained in the package.\n     root_path = None\n \n-    def __init__(self, name, import_name, static_folder=None,\n-                 static_url_path=None, template_folder=None,\n-                 url_prefix=None, subdomain=None, url_defaults=None,\n-                 root_path=None):\n-        _PackageBoundObject.__init__(self, import_name, template_folder,\n-                                     root_path=root_path)\n+    def __init__(\n+        self,\n+        name,\n+        import_name,\n+        static_folder=None,\n+        static_url_path=None,\n+        template_folder=None,\n+        url_prefix=None,\n+        subdomain=None,\n+        url_defaults=None,\n+        root_path=None,\n+    ):\n+        _PackageBoundObject.__init__(\n+            self, import_name, template_folder, root_path=root_path\n+        )\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n@@ -139,9 +152,14 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"\n         if self._got_registered_once and self.warn_on_modifications:\n             from warnings import warn\n-            warn(Warning('The blueprint was already registered once '\n-                         'but is getting modified now.  These changes '\n-                         'will not show up.'))\n+\n+            warn(\n+                Warning(\n+                    \"The blueprint was already registered once \"\n+                    \"but is getting modified now.  These changes \"\n+                    \"will not show up.\"\n+                )\n+            )\n         self.deferred_functions.append(func)\n \n     def record_once(self, func):\n@@ -150,9 +168,11 @@ class Blueprint(_PackageBoundObject):\n         blueprint is registered a second time on the application, the\n         function passed is not called.\n         \"\"\"\n+\n         def wrapper(state):\n             if state.first_registration:\n                 func(state)\n+\n         return self.record(update_wrapper(wrapper, func))\n \n     def make_setup_state(self, app, options, first_registration=False):\n@@ -179,8 +199,9 @@ class Blueprint(_PackageBoundObject):\n \n         if self.has_static_folder:\n             state.add_url_rule(\n-                self.static_url_path + '/<path:filename>',\n-                view_func=self.send_static_file, endpoint='static'\n+                self.static_url_path + \"/<path:filename>\",\n+                view_func=self.send_static_file,\n+                endpoint=\"static\",\n             )\n \n         for deferred in self.deferred_functions:\n@@ -190,10 +211,12 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.route` but for a blueprint.  The endpoint for the\n         :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n+\n         def decorator(f):\n             endpoint = options.pop(\"endpoint\", f.__name__)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n+\n         return decorator\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n@@ -201,11 +224,12 @@ class Blueprint(_PackageBoundObject):\n         the :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n         if endpoint:\n-            assert '.' not in endpoint, \"Blueprint endpoints should not contain dots\"\n-        if view_func and hasattr(view_func, '__name__'):\n-            assert '.' not in view_func.__name__, \"Blueprint view function name should not contain dots\"\n-        self.record(lambda s:\n-            s.add_url_rule(rule, endpoint, view_func, **options))\n+            assert \".\" not in endpoint, \"Blueprint endpoints should not contain dots\"\n+        if view_func and hasattr(view_func, \"__name__\"):\n+            assert (\n+                \".\" not in view_func.__name__\n+            ), \"Blueprint view function name should not contain dots\"\n+        self.record(lambda s: s.add_url_rule(rule, endpoint, view_func, **options))\n \n     def endpoint(self, endpoint):\n         \"\"\"Like :meth:`Flask.endpoint` but for a blueprint.  This does not\n@@ -214,11 +238,14 @@ class Blueprint(_PackageBoundObject):\n         with a `.` it will be registered to the current blueprint, otherwise\n         it's an application independent endpoint.\n         \"\"\"\n+\n         def decorator(f):\n             def register_endpoint(state):\n                 state.app.view_functions[endpoint] = f\n+\n             self.record_once(register_endpoint)\n             return f\n+\n         return decorator\n \n     def app_template_filter(self, name=None):\n@@ -228,9 +255,11 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_app_template_filter(f, name=name)\n             return f\n+\n         return decorator\n \n     def add_app_template_filter(self, f, name=None):\n@@ -241,8 +270,10 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def register_template(state):\n             state.app.jinja_env.filters[name or f.__name__] = f\n+\n         self.record_once(register_template)\n \n     def app_template_test(self, name=None):\n@@ -254,9 +285,11 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the test, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_app_template_test(f, name=name)\n             return f\n+\n         return decorator\n \n     def add_app_template_test(self, f, name=None):\n@@ -269,8 +302,10 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the test, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def register_template(state):\n             state.app.jinja_env.tests[name or f.__name__] = f\n+\n         self.record_once(register_template)\n \n     def app_template_global(self, name=None):\n@@ -282,9 +317,11 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the global, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def decorator(f):\n             self.add_app_template_global(f, name=name)\n             return f\n+\n         return decorator\n \n     def add_app_template_global(self, f, name=None):\n@@ -297,8 +334,10 @@ class Blueprint(_PackageBoundObject):\n         :param name: the optional name of the global, otherwise the\n                      function name will be used.\n         \"\"\"\n+\n         def register_template(state):\n             state.app.jinja_env.globals[name or f.__name__] = f\n+\n         self.record_once(register_template)\n \n     def before_request(self, f):\n@@ -306,16 +345,18 @@ class Blueprint(_PackageBoundObject):\n         is only executed before each request that is handled by a function of\n         that blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.before_request_funcs\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.before_request_funcs.setdefault(self.name, []).append(f)\n+        )\n         return f\n \n     def before_app_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n         before each request, even if outside of a blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.before_request_funcs\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def before_app_first_request(self, f):\n@@ -330,16 +371,18 @@ class Blueprint(_PackageBoundObject):\n         is only executed after each request that is handled by a function of\n         that blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.after_request_funcs\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.after_request_funcs.setdefault(self.name, []).append(f)\n+        )\n         return f\n \n     def after_app_request(self, f):\n         \"\"\"Like :meth:`Flask.after_request` but for a blueprint.  Such a function\n         is executed after each request, even if outside of the blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.after_request_funcs\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def teardown_request(self, f):\n@@ -349,8 +392,9 @@ class Blueprint(_PackageBoundObject):\n         when the request context is popped, even when no actual request was\n         performed.\n         \"\"\"\n-        self.record_once(lambda s: s.app.teardown_request_funcs\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.teardown_request_funcs.setdefault(self.name, []).append(f)\n+        )\n         return f\n \n     def teardown_app_request(self, f):\n@@ -358,33 +402,40 @@ class Blueprint(_PackageBoundObject):\n         function is executed when tearing down each request, even if outside of\n         the blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.teardown_request_funcs\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def context_processor(self, f):\n         \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  This\n         function is only executed for requests handled by a blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.template_context_processors\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.template_context_processors.setdefault(\n+                self.name, []\n+            ).append(f)\n+        )\n         return f\n \n     def app_context_processor(self, f):\n         \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  Such a\n         function is executed each request, even if outside of the blueprint.\n         \"\"\"\n-        self.record_once(lambda s: s.app.template_context_processors\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def app_errorhandler(self, code):\n         \"\"\"Like :meth:`Flask.errorhandler` but for a blueprint.  This\n         handler is used for all requests, even if outside of the blueprint.\n         \"\"\"\n+\n         def decorator(f):\n             self.record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n+\n         return decorator\n \n     def url_value_preprocessor(self, f):\n@@ -392,8 +443,9 @@ class Blueprint(_PackageBoundObject):\n         blueprint.  It's called before the view functions are called and\n         can modify the url values provided.\n         \"\"\"\n-        self.record_once(lambda s: s.app.url_value_preprocessors\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.url_value_preprocessors.setdefault(self.name, []).append(f)\n+        )\n         return f\n \n     def url_defaults(self, f):\n@@ -401,22 +453,25 @@ class Blueprint(_PackageBoundObject):\n         with the endpoint and values and should update the values passed\n         in place.\n         \"\"\"\n-        self.record_once(lambda s: s.app.url_default_functions\n-            .setdefault(self.name, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.url_default_functions.setdefault(self.name, []).append(f)\n+        )\n         return f\n \n     def app_url_value_preprocessor(self, f):\n         \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\n         \"\"\"\n-        self.record_once(lambda s: s.app.url_value_preprocessors\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def app_url_defaults(self, f):\n         \"\"\"Same as :meth:`url_defaults` but application wide.\n         \"\"\"\n-        self.record_once(lambda s: s.app.url_default_functions\n-            .setdefault(None, []).append(f))\n+        self.record_once(\n+            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n+        )\n         return f\n \n     def errorhandler(self, code_or_exception):\n@@ -430,10 +485,13 @@ class Blueprint(_PackageBoundObject):\n         Otherwise works as the :meth:`~flask.Flask.errorhandler` decorator\n         of the :class:`~flask.Flask` object.\n         \"\"\"\n+\n         def decorator(f):\n-            self.record_once(lambda s: s.app._register_error_handler(\n-                self.name, code_or_exception, f))\n+            self.record_once(\n+                lambda s: s.app._register_error_handler(self.name, code_or_exception, f)\n+            )\n             return f\n+\n         return decorator\n \n     def register_error_handler(self, code_or_exception, f):\n@@ -444,5 +502,6 @@ class Blueprint(_PackageBoundObject):\n \n         .. versionadded:: 0.11\n         \"\"\"\n-        self.record_once(lambda s: s.app._register_error_handler(\n-            self.name, code_or_exception, f))\n+        self.record_once(\n+            lambda s: s.app._register_error_handler(self.name, code_or_exception, f)\n+        )\n\n@@ -48,16 +48,14 @@ def find_best_app(script_info, module):\n     from . import Flask\n \n     # Search for the most common names first.\n-    for attr_name in ('app', 'application'):\n+    for attr_name in (\"app\", \"application\"):\n         app = getattr(module, attr_name, None)\n \n         if isinstance(app, Flask):\n             return app\n \n     # Otherwise find the only object that is a Flask instance.\n-    matches = [\n-        v for v in itervalues(module.__dict__) if isinstance(v, Flask)\n-    ]\n+    matches = [v for v in itervalues(module.__dict__) if isinstance(v, Flask)]\n \n     if len(matches) == 1:\n         return matches[0]\n@@ -65,11 +63,11 @@ def find_best_app(script_info, module):\n         raise NoAppException(\n             'Detected multiple Flask applications in module \"{module}\". Use '\n             '\"FLASK_APP={module}:name\" to specify the correct '\n-            'one.'.format(module=module.__name__)\n+            \"one.\".format(module=module.__name__)\n         )\n \n     # Search for app factory functions.\n-    for attr_name in ('create_app', 'make_app'):\n+    for attr_name in (\"create_app\", \"make_app\"):\n         app_factory = getattr(module, attr_name, None)\n \n         if inspect.isfunction(app_factory):\n@@ -83,18 +81,14 @@ def find_best_app(script_info, module):\n                     raise\n                 raise NoAppException(\n                     'Detected factory \"{factory}\" in module \"{module}\", but '\n-                    'could not call it without arguments. Use '\n-                    '\"FLASK_APP=\\'{module}:{factory}(args)\\'\" to specify '\n-                    'arguments.'.format(\n-                        factory=attr_name, module=module.__name__\n-                    )\n+                    \"could not call it without arguments. Use \"\n+                    \"\\\"FLASK_APP='{module}:{factory}(args)'\\\" to specify \"\n+                    \"arguments.\".format(factory=attr_name, module=module.__name__)\n                 )\n \n     raise NoAppException(\n         'Failed to find Flask application or factory in module \"{module}\". '\n-        'Use \"FLASK_APP={module}:name to specify one.'.format(\n-            module=module.__name__\n-        )\n+        'Use \"FLASK_APP={module}:name to specify one.'.format(module=module.__name__)\n     )\n \n \n@@ -107,7 +101,7 @@ def call_factory(script_info, app_factory, arguments=()):\n     arg_names = args_spec.args\n     arg_defaults = args_spec.defaults\n \n-    if 'script_info' in arg_names:\n+    if \"script_info\" in arg_names:\n         return app_factory(*arguments, script_info=script_info)\n     elif arguments:\n         return app_factory(*arguments)\n@@ -148,12 +142,13 @@ def find_app_by_string(script_info, module, app_name):\n     arguments.\n     \"\"\"\n     from flask import Flask\n-    match = re.match(r'^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$', app_name)\n+\n+    match = re.match(r\"^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$\", app_name)\n \n     if not match:\n         raise NoAppException(\n             '\"{name}\" is not a valid variable name or function '\n-            'expression.'.format(name=app_name)\n+            \"expression.\".format(name=app_name)\n         )\n \n     name, args = match.groups()\n@@ -166,10 +161,10 @@ def find_app_by_string(script_info, module, app_name):\n     if inspect.isfunction(attr):\n         if args:\n             try:\n-                args = ast.literal_eval('({args},)'.format(args=args))\n+                args = ast.literal_eval(\"({args},)\".format(args=args))\n             except (ValueError, SyntaxError) as e:\n                 raise NoAppException(\n-                    'Could not parse the arguments in '\n+                    \"Could not parse the arguments in \"\n                     '\"{app_name}\".'.format(e=e, app_name=app_name)\n                 )\n         else:\n@@ -183,7 +178,7 @@ def find_app_by_string(script_info, module, app_name):\n \n             raise NoAppException(\n                 '{e}\\nThe factory \"{app_name}\" in module \"{module}\" could not '\n-                'be called with the specified arguments.'.format(\n+                \"be called with the specified arguments.\".format(\n                     e=e, app_name=app_name, module=module.__name__\n                 )\n             )\n@@ -194,10 +189,8 @@ def find_app_by_string(script_info, module, app_name):\n         return app\n \n     raise NoAppException(\n-        'A valid Flask application was not obtained from '\n-        '\"{module}:{app_name}\".'.format(\n-            module=module.__name__, app_name=app_name\n-        )\n+        \"A valid Flask application was not obtained from \"\n+        '\"{module}:{app_name}\".'.format(module=module.__name__, app_name=app_name)\n     )\n \n \n@@ -208,10 +201,10 @@ def prepare_import(path):\n     path = os.path.realpath(path)\n \n     fname, ext = os.path.splitext(path)\n-    if ext == '.py':\n+    if ext == \".py\":\n         path = fname\n \n-    if os.path.basename(path) == '__init__':\n+    if os.path.basename(path) == \"__init__\":\n         path = os.path.dirname(path)\n \n     module_name = []\n@@ -221,13 +214,13 @@ def prepare_import(path):\n         path, name = os.path.split(path)\n         module_name.append(name)\n \n-        if not os.path.exists(os.path.join(path, '__init__.py')):\n+        if not os.path.exists(os.path.join(path, \"__init__.py\")):\n             break\n \n     if sys.path[0] != path:\n         sys.path.insert(0, path)\n \n-    return '.'.join(module_name[::-1])\n+    return \".\".join(module_name[::-1])\n \n \n def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n@@ -241,12 +234,10 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n         if sys.exc_info()[-1].tb_next:\n             raise NoAppException(\n                 'While importing \"{name}\", an ImportError was raised:'\n-                '\\n\\n{tb}'.format(name=module_name, tb=traceback.format_exc())\n+                \"\\n\\n{tb}\".format(name=module_name, tb=traceback.format_exc())\n             )\n         elif raise_if_not_found:\n-            raise NoAppException(\n-                'Could not import \"{name}\".'.format(name=module_name)\n-            )\n+            raise NoAppException('Could not import \"{name}\".'.format(name=module_name))\n         else:\n             return\n \n@@ -262,26 +253,27 @@ def get_version(ctx, param, value):\n     if not value or ctx.resilient_parsing:\n         return\n     import werkzeug\n-    message = (\n-        'Python %(python)s\\n'\n-        'Flask %(flask)s\\n'\n-        'Werkzeug %(werkzeug)s'\n+\n+    message = \"Python %(python)s\\n\" \"Flask %(flask)s\\n\" \"Werkzeug %(werkzeug)s\"\n+    click.echo(\n+        message\n+        % {\n+            \"python\": platform.python_version(),\n+            \"flask\": __version__,\n+            \"werkzeug\": werkzeug.__version__,\n+        },\n+        color=ctx.color,\n     )\n-    click.echo(message % {\n-        'python': platform.python_version(),\n-        'flask': __version__,\n-        'werkzeug': werkzeug.__version__,\n-    }, color=ctx.color)\n     ctx.exit()\n \n \n version_option = click.Option(\n-    ['--version'],\n-    help='Show the flask version',\n+    [\"--version\"],\n+    help=\"Show the flask version\",\n     expose_value=False,\n     callback=get_version,\n     is_flag=True,\n-    is_eager=True\n+    is_eager=True,\n )\n \n \n@@ -310,6 +302,7 @@ class DispatchingApp(object):\n                     self._load_unlocked()\n                 except Exception:\n                     self._bg_loading_exc_info = sys.exc_info()\n+\n         t = Thread(target=_load_app, args=())\n         t.start()\n \n@@ -348,10 +341,9 @@ class ScriptInfo(object):\n     onwards as click object.\n     \"\"\"\n \n-    def __init__(self, app_import_path=None, create_app=None,\n-                 set_debug_flag=True):\n+    def __init__(self, app_import_path=None, create_app=None, set_debug_flag=True):\n         #: Optionally the import path for the Flask application.\n-        self.app_import_path = app_import_path or os.environ.get('FLASK_APP')\n+        self.app_import_path = app_import_path or os.environ.get(\"FLASK_APP\")\n         #: Optionally a function that is passed the script info to create\n         #: the instance of the application.\n         self.create_app = create_app\n@@ -377,21 +369,22 @@ class ScriptInfo(object):\n             app = call_factory(self, self.create_app)\n         else:\n             if self.app_import_path:\n-                path, name = (re.split(r':(?![\\\\/])', self.app_import_path, 1) + [None])[:2]\n+                path, name = (\n+                    re.split(r\":(?![\\\\/])\", self.app_import_path, 1) + [None]\n+                )[:2]\n                 import_name = prepare_import(path)\n                 app = locate_app(self, import_name, name)\n             else:\n-                for path in ('wsgi.py', 'app.py'):\n+                for path in (\"wsgi.py\", \"app.py\"):\n                     import_name = prepare_import(path)\n-                    app = locate_app(self, import_name, None,\n-                                     raise_if_not_found=False)\n+                    app = locate_app(self, import_name, None, raise_if_not_found=False)\n \n                     if app:\n                         break\n \n         if not app:\n             raise NoAppException(\n-                'Could not locate a Flask application. You did not provide '\n+                \"Could not locate a Flask application. You did not provide \"\n                 'the \"FLASK_APP\" environment variable, and a \"wsgi.py\" or '\n                 '\"app.py\" module was not found in the current directory.'\n             )\n@@ -414,10 +407,12 @@ def with_appcontext(f):\n     to the ``app.cli`` object then they are wrapped with this function\n     by default unless it's disabled.\n     \"\"\"\n+\n     @click.pass_context\n     def decorator(__ctx, *args, **kwargs):\n         with __ctx.ensure_object(ScriptInfo).load_app().app_context():\n             return __ctx.invoke(f, *args, **kwargs)\n+\n     return update_wrapper(decorator, f)\n \n \n@@ -434,11 +429,13 @@ class AppGroup(click.Group):\n         :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n         unless it's disabled by passing ``with_appcontext=False``.\n         \"\"\"\n-        wrap_for_ctx = kwargs.pop('with_appcontext', True)\n+        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)\n+\n         def decorator(f):\n             if wrap_for_ctx:\n                 f = with_appcontext(f)\n             return click.Group.command(self, *args, **kwargs)(f)\n+\n         return decorator\n \n     def group(self, *args, **kwargs):\n@@ -446,7 +443,7 @@ class AppGroup(click.Group):\n         :class:`click.Group` but it defaults the group class to\n         :class:`AppGroup`.\n         \"\"\"\n-        kwargs.setdefault('cls', AppGroup)\n+        kwargs.setdefault(\"cls\", AppGroup)\n         return click.Group.group(self, *args, **kwargs)\n \n \n@@ -475,10 +472,16 @@ class FlaskGroup(AppGroup):\n         from :file:`.env` and :file:`.flaskenv` files.\n     \"\"\"\n \n-    def __init__(self, add_default_commands=True, create_app=None,\n-                 add_version_option=True, load_dotenv=True,\n-                 set_debug_flag=True, **extra):\n-        params = list(extra.pop('params', None) or ())\n+    def __init__(\n+        self,\n+        add_default_commands=True,\n+        create_app=None,\n+        add_version_option=True,\n+        load_dotenv=True,\n+        set_debug_flag=True,\n+        **extra\n+    ):\n+        params = list(extra.pop(\"params\", None) or ())\n \n         if add_version_option:\n             params.append(version_option)\n@@ -504,7 +507,7 @@ class FlaskGroup(AppGroup):\n             self._loaded_plugin_commands = True\n             return\n \n-        for ep in pkg_resources.iter_entry_points('flask.commands'):\n+        for ep in pkg_resources.iter_entry_points(\"flask.commands\"):\n             self.add_command(ep.load(), ep.name)\n         self._loaded_plugin_commands = True\n \n@@ -554,19 +557,20 @@ class FlaskGroup(AppGroup):\n         # command line interface. This is detected by Flask.run to make the\n         # call into a no-op. This is necessary to avoid ugly errors when the\n         # script that is loaded here also attempts to start a server.\n-        os.environ['FLASK_RUN_FROM_CLI'] = 'true'\n+        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n \n         if get_load_dotenv(self.load_dotenv):\n             load_dotenv()\n \n-        obj = kwargs.get('obj')\n+        obj = kwargs.get(\"obj\")\n \n         if obj is None:\n-            obj = ScriptInfo(create_app=self.create_app,\n-                             set_debug_flag=self.set_debug_flag)\n+            obj = ScriptInfo(\n+                create_app=self.create_app, set_debug_flag=self.set_debug_flag\n+            )\n \n-        kwargs['obj'] = obj\n-        kwargs.setdefault('auto_envvar_prefix', 'FLASK')\n+        kwargs[\"obj\"] = obj\n+        kwargs.setdefault(\"auto_envvar_prefix\", \"FLASK\")\n         return super(FlaskGroup, self).main(*args, **kwargs)\n \n \n@@ -597,11 +601,12 @@ def load_dotenv(path=None):\n     .. versionadded:: 1.0\n     \"\"\"\n     if dotenv is None:\n-        if path or os.path.isfile('.env') or os.path.isfile('.flaskenv'):\n+        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n             click.secho(\n-                ' * Tip: There are .env or .flaskenv files present.'\n+                \" * Tip: There are .env or .flaskenv files present.\"\n                 ' Do \"pip install python-dotenv\" to use them.',\n-                fg='yellow')\n+                fg=\"yellow\",\n+            )\n         return\n \n     if path is not None:\n@@ -609,7 +614,7 @@ def load_dotenv(path=None):\n \n     new_dir = None\n \n-    for name in ('.env', '.flaskenv'):\n+    for name in (\".env\", \".flaskenv\"):\n         path = dotenv.find_dotenv(name, usecwd=True)\n \n         if not path:\n@@ -630,27 +635,29 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n     \"\"\"Show extra startup messages the first time the server is run,\n     ignoring the reloader.\n     \"\"\"\n-    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':\n+    if os.environ.get(\"WERKZEUG_RUN_MAIN\") == \"true\":\n         return\n \n     if app_import_path is not None:\n         message = ' * Serving Flask app \"{0}\"'.format(app_import_path)\n \n         if not eager_loading:\n-            message += ' (lazy loading)'\n+            message += \" (lazy loading)\"\n \n         click.echo(message)\n \n-    click.echo(' * Environment: {0}'.format(env))\n+    click.echo(\" * Environment: {0}\".format(env))\n \n-    if env == 'production':\n+    if env == \"production\":\n         click.secho(\n-            '   WARNING: Do not use the development server in a production'\n-            ' environment.', fg='red')\n-        click.secho('   Use a production WSGI server instead.', dim=True)\n+            \"   WARNING: Do not use the development server in a production\"\n+            \" environment.\",\n+            fg=\"red\",\n+        )\n+        click.secho(\"   Use a production WSGI server instead.\", dim=True)\n \n     if debug is not None:\n-        click.echo(' * Debug mode: {0}'.format('on' if debug else 'off'))\n+        click.echo(\" * Debug mode: {0}\".format(\"on\" if debug else \"off\"))\n \n \n class CertParamType(click.ParamType):\n@@ -659,11 +666,10 @@ class CertParamType(click.ParamType):\n     :class:`~ssl.SSLContext` object.\n     \"\"\"\n \n-    name = 'path'\n+    name = \"path\"\n \n     def __init__(self):\n-        self.path_type = click.Path(\n-            exists=True, dir_okay=False, resolve_path=True)\n+        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)\n \n     def convert(self, value, param, ctx):\n         try:\n@@ -671,13 +677,13 @@ class CertParamType(click.ParamType):\n         except click.BadParameter:\n             value = click.STRING(value, param, ctx).lower()\n \n-            if value == 'adhoc':\n+            if value == \"adhoc\":\n                 try:\n                     import OpenSSL\n                 except ImportError:\n                     raise click.BadParameter(\n-                        'Using ad-hoc certificates requires pyOpenSSL.',\n-                        ctx, param)\n+                        \"Using ad-hoc certificates requires pyOpenSSL.\", ctx, param\n+                    )\n \n                 return value\n \n@@ -697,8 +703,8 @@ def _validate_key(ctx, param, value):\n     \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n     Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n     \"\"\"\n-    cert = ctx.params.get('cert')\n-    is_adhoc = cert == 'adhoc'\n+    cert = ctx.params.get(\"cert\")\n+    is_adhoc = cert == \"adhoc\"\n \n     if sys.version_info < (2, 7, 9):\n         is_context = cert and not isinstance(cert, (text_type, bytes))\n@@ -708,55 +714,64 @@ def _validate_key(ctx, param, value):\n     if value is not None:\n         if is_adhoc:\n             raise click.BadParameter(\n-                'When \"--cert\" is \"adhoc\", \"--key\" is not used.',\n-                ctx, param)\n+                'When \"--cert\" is \"adhoc\", \"--key\" is not used.', ctx, param\n+            )\n \n         if is_context:\n             raise click.BadParameter(\n-                'When \"--cert\" is an SSLContext object, \"--key is not used.',\n-                ctx, param)\n+                'When \"--cert\" is an SSLContext object, \"--key is not used.', ctx, param\n+            )\n \n         if not cert:\n-            raise click.BadParameter(\n-                '\"--cert\" must also be specified.',\n-                ctx, param)\n+            raise click.BadParameter('\"--cert\" must also be specified.', ctx, param)\n \n-        ctx.params['cert'] = cert, value\n+        ctx.params[\"cert\"] = cert, value\n \n     else:\n         if cert and not (is_adhoc or is_context):\n-            raise click.BadParameter(\n-                'Required when using \"--cert\".',\n-                ctx, param)\n+            raise click.BadParameter('Required when using \"--cert\".', ctx, param)\n \n     return value\n \n \n-@click.command('run', short_help='Run a development server.')\n-@click.option('--host', '-h', default='127.0.0.1',\n-              help='The interface to bind to.')\n-@click.option('--port', '-p', default=5000,\n-              help='The port to bind to.')\n-@click.option('--cert', type=CertParamType(),\n-              help='Specify a certificate file to use HTTPS.')\n-@click.option('--key',\n+@click.command(\"run\", short_help=\"Run a development server.\")\n+@click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n+@click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n+@click.option(\n+    \"--cert\", type=CertParamType(), help=\"Specify a certificate file to use HTTPS.\"\n+)\n+@click.option(\n+    \"--key\",\n     type=click.Path(exists=True, dir_okay=False, resolve_path=True),\n-              callback=_validate_key, expose_value=False,\n-              help='The key file to use when specifying a certificate.')\n-@click.option('--reload/--no-reload', default=None,\n-              help='Enable or disable the reloader. By default the reloader '\n-              'is active if debug is enabled.')\n-@click.option('--debugger/--no-debugger', default=None,\n-              help='Enable or disable the debugger. By default the debugger '\n-              'is active if debug is enabled.')\n-@click.option('--eager-loading/--lazy-loader', default=None,\n-              help='Enable or disable eager loading. By default eager '\n-              'loading is enabled if the reloader is disabled.')\n-@click.option('--with-threads/--without-threads', default=True,\n-              help='Enable or disable multithreading.')\n+    callback=_validate_key,\n+    expose_value=False,\n+    help=\"The key file to use when specifying a certificate.\",\n+)\n+@click.option(\n+    \"--reload/--no-reload\",\n+    default=None,\n+    help=\"Enable or disable the reloader. By default the reloader \"\n+    \"is active if debug is enabled.\",\n+)\n+@click.option(\n+    \"--debugger/--no-debugger\",\n+    default=None,\n+    help=\"Enable or disable the debugger. By default the debugger \"\n+    \"is active if debug is enabled.\",\n+)\n+@click.option(\n+    \"--eager-loading/--lazy-loader\",\n+    default=None,\n+    help=\"Enable or disable eager loading. By default eager \"\n+    \"loading is enabled if the reloader is disabled.\",\n+)\n+@click.option(\n+    \"--with-threads/--without-threads\",\n+    default=True,\n+    help=\"Enable or disable multithreading.\",\n+)\n @pass_script_info\n-def run_command(info, host, port, reload, debugger, eager_loading,\n-                with_threads, cert):\n+def run_command(info, host, port, reload, debugger, eager_loading, with_threads, cert):\n     \"\"\"Run a local development server.\n \n     This server is for development purposes only. It does not provide\n@@ -780,11 +795,19 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n     app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n \n     from werkzeug.serving import run_simple\n-    run_simple(host, port, app, use_reloader=reload, use_debugger=debugger,\n-               threaded=with_threads, ssl_context=cert)\n+\n+    run_simple(\n+        host,\n+        port,\n+        app,\n+        use_reloader=reload,\n+        use_debugger=debugger,\n+        threaded=with_threads,\n+        ssl_context=cert,\n+    )\n \n \n-@click.command('shell', short_help='Run a shell in the app context.')\n+@click.command(\"shell\", short_help=\"Run a shell in the app context.\")\n @with_appcontext\n def shell_command():\n     \"\"\"Run an interactive Python shell in the context of a given\n@@ -796,8 +819,9 @@ def shell_command():\n     \"\"\"\n     import code\n     from flask.globals import _app_ctx_stack\n+\n     app = _app_ctx_stack.top.app\n-    banner = 'Python %s on %s\\nApp: %s [%s]\\nInstance: %s' % (\n+    banner = \"Python %s on %s\\nApp: %s [%s]\\nInstance: %s\" % (\n         sys.version,\n         sys.platform,\n         app.import_name,\n@@ -808,68 +832,64 @@ def shell_command():\n \n     # Support the regular Python interpreter startup script if someone\n     # is using it.\n-    startup = os.environ.get('PYTHONSTARTUP')\n+    startup = os.environ.get(\"PYTHONSTARTUP\")\n     if startup and os.path.isfile(startup):\n-        with open(startup, 'r') as f:\n-            eval(compile(f.read(), startup, 'exec'), ctx)\n+        with open(startup, \"r\") as f:\n+            eval(compile(f.read(), startup, \"exec\"), ctx)\n \n     ctx.update(app.make_shell_context())\n \n     code.interact(banner=banner, local=ctx)\n \n \n-@click.command('routes', short_help='Show the routes for the app.')\n+@click.command(\"routes\", short_help=\"Show the routes for the app.\")\n @click.option(\n-    '--sort', '-s',\n-    type=click.Choice(('endpoint', 'methods', 'rule', 'match')),\n-    default='endpoint',\n+    \"--sort\",\n+    \"-s\",\n+    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    default=\"endpoint\",\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n-        'routes when dispatching a request.'\n-    )\n-)\n-@click.option(\n-    '--all-methods',\n-    is_flag=True,\n-    help=\"Show HEAD and OPTIONS methods.\"\n+        \"routes when dispatching a request.\"\n+    ),\n )\n+@click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n @with_appcontext\n def routes_command(sort, all_methods):\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n \n     rules = list(current_app.url_map.iter_rules())\n     if not rules:\n-        click.echo('No routes were registered.')\n+        click.echo(\"No routes were registered.\")\n         return\n \n-    ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))\n+    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n \n-    if sort in ('endpoint', 'rule'):\n+    if sort in (\"endpoint\", \"rule\"):\n         rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == 'methods':\n+    elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n \n-    rule_methods = [\n-        ', '.join(sorted(rule.methods - ignored_methods)) for rule in rules\n-    ]\n+    rule_methods = [\", \".join(sorted(rule.methods - ignored_methods)) for rule in rules]\n \n-    headers = ('Endpoint', 'Methods', 'Rule')\n+    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*('-' * width for width in widths)))\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n         click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n \n \n-cli = FlaskGroup(help=\"\"\"\\\n+cli = FlaskGroup(\n+    help=\"\"\"\\\n A general utility script for Flask applications.\n \n Provides commands from Flask, extensions, and the application. Loads the\n@@ -882,30 +902,31 @@ debug mode.\n   {prefix}{cmd} FLASK_ENV=development\n   {prefix}flask run\n \"\"\".format(\n-    cmd='export' if os.name == 'posix' else 'set',\n-    prefix='$ ' if os.name == 'posix' else '> '\n-))\n+        cmd=\"export\" if os.name == \"posix\" else \"set\",\n+        prefix=\"$ \" if os.name == \"posix\" else \"> \",\n+    )\n+)\n \n \n def main(as_module=False):\n     args = sys.argv[1:]\n \n     if as_module:\n-        this_module = 'flask'\n+        this_module = \"flask\"\n \n         if sys.version_info < (2, 7):\n-            this_module += '.cli'\n+            this_module += \".cli\"\n \n-        name = 'python -m ' + this_module\n+        name = \"python -m \" + this_module\n \n         # Python rewrites \"python -m flask\" to the path to the file in argv.\n         # Restore the original command so that the reloader works.\n-        sys.argv = ['-m', this_module] + args\n+        sys.argv = [\"-m\", this_module] + args\n     else:\n         name = None\n \n     cli.main(args=args, prog_name=name)\n \n \n-if __name__ == '__main__':\n+if __name__ == \"__main__\":\n     main(as_module=True)\n\n@@ -101,11 +101,12 @@ class Config(dict):\n         if not rv:\n             if silent:\n                 return False\n-            raise RuntimeError('The environment variable %r is not set '\n-                               'and as such configuration could not be '\n-                               'loaded.  Set this variable and make it '\n-                               'point to a configuration file' %\n-                               variable_name)\n+            raise RuntimeError(\n+                \"The environment variable %r is not set \"\n+                \"and as such configuration could not be \"\n+                \"loaded.  Set this variable and make it \"\n+                \"point to a configuration file\" % variable_name\n+            )\n         return self.from_pyfile(rv, silent=silent)\n \n     def from_pyfile(self, filename, silent=False):\n@@ -123,17 +124,15 @@ class Config(dict):\n            `silent` parameter.\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n-        d = types.ModuleType('config')\n+        d = types.ModuleType(\"config\")\n         d.__file__ = filename\n         try:\n-            with open(filename, mode='rb') as config_file:\n-                exec(compile(config_file.read(), filename, 'exec'), d.__dict__)\n+            with open(filename, mode=\"rb\") as config_file:\n+                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)\n         except IOError as e:\n-            if silent and e.errno in (\n-                errno.ENOENT, errno.EISDIR, errno.ENOTDIR\n-            ):\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                 return False\n-            e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n+            e.strerror = \"Unable to load configuration file (%s)\" % e.strerror\n             raise\n         self.from_object(d)\n         return True\n@@ -197,7 +196,7 @@ class Config(dict):\n         except IOError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                 return False\n-            e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n+            e.strerror = \"Unable to load configuration file (%s)\" % e.strerror\n             raise\n         return self.from_mapping(obj)\n \n@@ -209,13 +208,13 @@ class Config(dict):\n         \"\"\"\n         mappings = []\n         if len(mapping) == 1:\n-            if hasattr(mapping[0], 'items'):\n+            if hasattr(mapping[0], \"items\"):\n                 mappings.append(mapping[0].items())\n             else:\n                 mappings.append(mapping[0])\n         elif len(mapping) > 1:\n             raise TypeError(\n-                'expected at most 1 positional argument, got %d' % len(mapping)\n+                \"expected at most 1 positional argument, got %d\" % len(mapping)\n             )\n         mappings.append(kwargs.items())\n         for mapping in mappings:\n@@ -266,4 +265,4 @@ class Config(dict):\n         return rv\n \n     def __repr__(self):\n-        return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n+        return \"<%s %s>\" % (self.__class__.__name__, dict.__repr__(self))\n\n@@ -89,7 +89,7 @@ class _AppCtxGlobals(object):\n     def __repr__(self):\n         top = _app_ctx_stack.top\n         if top is not None:\n-            return '<flask.g of %r>' % top.app.name\n+            return \"<flask.g of %r>\" % top.app.name\n         return object.__repr__(self)\n \n \n@@ -144,13 +144,17 @@ def copy_current_request_context(f):\n     \"\"\"\n     top = _request_ctx_stack.top\n     if top is None:\n-        raise RuntimeError('This decorator can only be used at local scopes '\n-            'when a request context is on the stack.  For instance within '\n-            'view functions.')\n+        raise RuntimeError(\n+            \"This decorator can only be used at local scopes \"\n+            \"when a request context is on the stack.  For instance within \"\n+            \"view functions.\"\n+        )\n     reqctx = top.copy()\n+\n     def wrapper(*args, **kwargs):\n         with reqctx:\n             return f(*args, **kwargs)\n+\n     return update_wrapper(wrapper, f)\n \n \n@@ -217,7 +221,7 @@ class AppContext(object):\n     def push(self):\n         \"\"\"Binds the app context to the current context.\"\"\"\n         self._refcnt += 1\n-        if hasattr(sys, 'exc_clear'):\n+        if hasattr(sys, \"exc_clear\"):\n             sys.exc_clear()\n         _app_ctx_stack.push(self)\n         appcontext_pushed.send(self.app)\n@@ -232,8 +236,7 @@ class AppContext(object):\n                 self.app.do_teardown_appcontext(exc)\n         finally:\n             rv = _app_ctx_stack.pop()\n-        assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n-            % (rv, self)\n+        assert rv is self, \"Popped wrong app context.  (%r instead of %r)\" % (rv, self)\n         appcontext_popped.send(self.app)\n \n     def __enter__(self):\n@@ -314,8 +317,10 @@ class RequestContext(object):\n \n     def _get_g(self):\n         return _app_ctx_stack.top.g\n+\n     def _set_g(self, value):\n         _app_ctx_stack.top.g = value\n+\n     g = property(_get_g, _set_g)\n     del _get_g, _set_g\n \n@@ -332,10 +337,11 @@ class RequestContext(object):\n            The current session object is used instead of reloading the original\n            data. This prevents `flask.session` pointing to an out-of-date object.\n         \"\"\"\n-        return self.__class__(self.app,\n+        return self.__class__(\n+            self.app,\n             environ=self.request.environ,\n             request=self.request,\n-            session=self.session\n+            session=self.session,\n         )\n \n     def match_request(self):\n@@ -343,8 +349,7 @@ class RequestContext(object):\n         of the request.\n         \"\"\"\n         try:\n-            url_rule, self.request.view_args = \\\n-                self.url_adapter.match(return_rule=True)\n+            url_rule, self.request.view_args = self.url_adapter.match(return_rule=True)\n             self.request.url_rule = url_rule\n         except HTTPException as e:\n             self.request.routing_exception = e\n@@ -373,7 +378,7 @@ class RequestContext(object):\n         else:\n             self._implicit_app_ctx_stack.append(None)\n \n-        if hasattr(sys, 'exc_clear'):\n+        if hasattr(sys, \"exc_clear\"):\n             sys.exc_clear()\n \n         _request_ctx_stack.push(self)\n@@ -384,9 +389,7 @@ class RequestContext(object):\n         # pushed, otherwise stream_with_context loses the session.\n         if self.session is None:\n             session_interface = self.app.session_interface\n-            self.session = session_interface.open_session(\n-                self.app, self.request\n-            )\n+            self.session = session_interface.open_session(self.app, self.request)\n \n             if self.session is None:\n                 self.session = session_interface.make_null_session(self.app)\n@@ -414,10 +417,10 @@ class RequestContext(object):\n                 # we do that now.  This will only go into effect on Python 2.x,\n                 # on 3.x it disappears automatically at the end of the exception\n                 # stack.\n-                if hasattr(sys, 'exc_clear'):\n+                if hasattr(sys, \"exc_clear\"):\n                     sys.exc_clear()\n \n-                request_close = getattr(self.request, 'close', None)\n+                request_close = getattr(self.request, \"close\", None)\n                 if request_close is not None:\n                     request_close()\n                 clear_request = True\n@@ -427,18 +430,20 @@ class RequestContext(object):\n             # get rid of circular dependencies at the end of the request\n             # so that we don't require the GC to be active.\n             if clear_request:\n-                rv.request.environ['werkzeug.request'] = None\n+                rv.request.environ[\"werkzeug.request\"] = None\n \n             # Get rid of the app as well if necessary.\n             if app_ctx is not None:\n                 app_ctx.pop(exc)\n \n-            assert rv is self, 'Popped wrong request context.  ' \\\n-                '(%r instead of %r)' % (rv, self)\n+            assert (\n+                rv is self\n+            ), \"Popped wrong request context.  \" \"(%r instead of %r)\" % (rv, self)\n \n     def auto_pop(self, exc):\n-        if self.request.environ.get('flask._preserve_context') or \\\n-           (exc is not None and self.app.preserve_context_on_exception):\n+        if self.request.environ.get(\"flask._preserve_context\") or (\n+            exc is not None and self.app.preserve_context_on_exception\n+        ):\n             self.preserved = True\n             self._preserved_exc = exc\n         else:\n@@ -460,7 +465,7 @@ class RequestContext(object):\n             reraise(exc_type, exc_value, tb)\n \n     def __repr__(self):\n-        return '<%s \\'%s\\' [%s] of %s>' % (\n+        return \"<%s '%s' [%s] of %s>\" % (\n             self.__class__.__name__,\n             self.request.url,\n             self.request.method,\n\n@@ -32,17 +32,20 @@ class DebugFilesKeyError(KeyError, AssertionError):\n \n     def __init__(self, request, key):\n         form_matches = request.form.getlist(key)\n-        buf = ['You tried to access the file \"%s\" in the request.files '\n-               'dictionary but it does not exist.  The mimetype for the request '\n+        buf = [\n+            'You tried to access the file \"%s\" in the request.files '\n+            \"dictionary but it does not exist.  The mimetype for the request \"\n             'is \"%s\" instead of \"multipart/form-data\" which means that no '\n-               'file contents were transmitted.  To fix this error you should '\n-               'provide enctype=\"multipart/form-data\" in your form.' %\n-               (key, request.mimetype)]\n+            \"file contents were transmitted.  To fix this error you should \"\n+            'provide enctype=\"multipart/form-data\" in your form.'\n+            % (key, request.mimetype)\n+        ]\n         if form_matches:\n-            buf.append('\\n\\nThe browser instead transmitted some file names. '\n-                       'This was submitted: %s' % ', '.join('\"%s\"' % x\n-                            for x in form_matches))\n-        self.msg = ''.join(buf)\n+            buf.append(\n+                \"\\n\\nThe browser instead transmitted some file names. \"\n+                \"This was submitted: %s\" % \", \".join('\"%s\"' % x for x in form_matches)\n+            )\n+        self.msg = \"\".join(buf)\n \n     def __str__(self):\n         return self.msg\n@@ -56,23 +59,28 @@ class FormDataRoutingRedirect(AssertionError):\n \n     def __init__(self, request):\n         exc = request.routing_exception\n-        buf = ['A request was sent to this URL (%s) but a redirect was '\n+        buf = [\n+            \"A request was sent to this URL (%s) but a redirect was \"\n             'issued automatically by the routing system to \"%s\".'\n-               % (request.url, exc.new_url)]\n+            % (request.url, exc.new_url)\n+        ]\n \n         # In case just a slash was appended we can be extra helpful\n-        if request.base_url + '/' == exc.new_url.split('?')[0]:\n-            buf.append('  The URL was defined with a trailing slash so '\n-                       'Flask will automatically redirect to the URL '\n-                       'with the trailing slash if it was accessed '\n-                       'without one.')\n+        if request.base_url + \"/\" == exc.new_url.split(\"?\")[0]:\n+            buf.append(\n+                \"  The URL was defined with a trailing slash so \"\n+                \"Flask will automatically redirect to the URL \"\n+                \"with the trailing slash if it was accessed \"\n+                \"without one.\"\n+            )\n \n-        buf.append('  Make sure to directly send your %s-request to this URL '\n-                   'since we can\\'t make browsers or HTTP clients redirect '\n-                   'with form data reliably or without user interaction.' %\n-                   request.method)\n-        buf.append('\\n\\nNote: this exception is only raised in debug mode')\n-        AssertionError.__init__(self, ''.join(buf).encode('utf-8'))\n+        buf.append(\n+            \"  Make sure to directly send your %s-request to this URL \"\n+            \"since we can't make browsers or HTTP clients redirect \"\n+            \"with form data reliably or without user interaction.\" % request.method\n+        )\n+        buf.append(\"\\n\\nNote: this exception is only raised in debug mode\")\n+        AssertionError.__init__(self, \"\".join(buf).encode(\"utf-8\"))\n \n \n def attach_enctype_error_multidict(request):\n@@ -81,6 +89,7 @@ def attach_enctype_error_multidict(request):\n     object is accessed.\n     \"\"\"\n     oldcls = request.files.__class__\n+\n     class newcls(oldcls):\n         def __getitem__(self, key):\n             try:\n@@ -89,26 +98,27 @@ def attach_enctype_error_multidict(request):\n                 if key not in request.form:\n                     raise\n                 raise DebugFilesKeyError(request, key)\n+\n     newcls.__name__ = oldcls.__name__\n     newcls.__module__ = oldcls.__module__\n     request.files.__class__ = newcls\n \n \n def _dump_loader_info(loader):\n-    yield 'class: %s.%s' % (type(loader).__module__, type(loader).__name__)\n+    yield \"class: %s.%s\" % (type(loader).__module__, type(loader).__name__)\n     for key, value in sorted(loader.__dict__.items()):\n-        if key.startswith('_'):\n+        if key.startswith(\"_\"):\n             continue\n         if isinstance(value, (tuple, list)):\n             if not all(isinstance(x, (str, text_type)) for x in value):\n                 continue\n-            yield '%s:' % key\n+            yield \"%s:\" % key\n             for item in value:\n-                yield '  - %s' % item\n+                yield \"  - %s\" % item\n             continue\n         elif not isinstance(value, (str, text_type, int, float, bool)):\n             continue\n-        yield '%s: %r' % (key, value)\n+        yield \"%s: %r\" % (key, value)\n \n \n def explain_template_loading_attempts(app, template, attempts):\n@@ -124,45 +134,50 @@ def explain_template_loading_attempts(app, template, attempts):\n         if isinstance(srcobj, Flask):\n             src_info = 'application \"%s\"' % srcobj.import_name\n         elif isinstance(srcobj, Blueprint):\n-            src_info = 'blueprint \"%s\" (%s)' % (srcobj.name,\n-                                                srcobj.import_name)\n+            src_info = 'blueprint \"%s\" (%s)' % (srcobj.name, srcobj.import_name)\n         else:\n             src_info = repr(srcobj)\n \n-        info.append('% 5d: trying loader of %s' % (\n-            idx + 1, src_info))\n+        info.append(\"% 5d: trying loader of %s\" % (idx + 1, src_info))\n \n         for line in _dump_loader_info(loader):\n-            info.append('       %s' % line)\n+            info.append(\"       %s\" % line)\n \n         if triple is None:\n-            detail = 'no match'\n+            detail = \"no match\"\n         else:\n-            detail = 'found (%r)' % (triple[1] or '<string>')\n+            detail = \"found (%r)\" % (triple[1] or \"<string>\")\n             total_found += 1\n-        info.append('       -> %s' % detail)\n+        info.append(\"       -> %s\" % detail)\n \n     seems_fishy = False\n     if total_found == 0:\n-        info.append('Error: the template could not be found.')\n+        info.append(\"Error: the template could not be found.\")\n         seems_fishy = True\n     elif total_found > 1:\n-        info.append('Warning: multiple loaders returned a match for the template.')\n+        info.append(\"Warning: multiple loaders returned a match for the template.\")\n         seems_fishy = True\n \n     if blueprint is not None and seems_fishy:\n-        info.append('  The template was looked up from an endpoint that '\n-                    'belongs to the blueprint \"%s\".' % blueprint)\n-        info.append('  Maybe you did not place a template in the right folder?')\n-        info.append('  See http://flask.pocoo.org/docs/blueprints/#templates')\n+        info.append(\n+            \"  The template was looked up from an endpoint that \"\n+            'belongs to the blueprint \"%s\".' % blueprint\n+        )\n+        info.append(\"  Maybe you did not place a template in the right folder?\")\n+        info.append(\"  See http://flask.pocoo.org/docs/blueprints/#templates\")\n \n-    app.logger.info('\\n'.join(info))\n+    app.logger.info(\"\\n\".join(info))\n \n \n def explain_ignored_app_run():\n-    if os.environ.get('WERKZEUG_RUN_MAIN') != 'true':\n-        warn(Warning('Silently ignoring app.run() because the '\n-                     'application is run from the flask command line '\n-                     'executable.  Consider putting app.run() behind an '\n+    if os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\":\n+        warn(\n+            Warning(\n+                \"Silently ignoring app.run() because the \"\n+                \"application is run from the flask command line \"\n+                \"executable.  Consider putting app.run() behind an \"\n                 'if __name__ == \"__main__\" guard to silence this '\n-                     'warning.'), stacklevel=3)\n+                \"warning.\"\n+            ),\n+            stacklevel=3,\n+        )\n\n@@ -14,21 +14,21 @@ from functools import partial\n from werkzeug.local import LocalStack, LocalProxy\n \n \n-_request_ctx_err_msg = '''\\\n+_request_ctx_err_msg = \"\"\"\\\n Working outside of request context.\n \n This typically means that you attempted to use functionality that needed\n an active HTTP request.  Consult the documentation on testing for\n information about how to avoid this problem.\\\n-'''\n-_app_ctx_err_msg = '''\\\n+\"\"\"\n+_app_ctx_err_msg = \"\"\"\\\n Working outside of application context.\n \n This typically means that you attempted to use functionality that needed\n to interface with the current application object in some way. To solve\n this, set up an application context with app.app_context().  See the\n documentation for more information.\\\n-'''\n+\"\"\"\n \n \n def _lookup_req_object(name):\n@@ -56,6 +56,6 @@ def _find_app():\n _request_ctx_stack = LocalStack()\n _app_ctx_stack = LocalStack()\n current_app = LocalProxy(_find_app)\n-request = LocalProxy(partial(_lookup_req_object, 'request'))\n-session = LocalProxy(partial(_lookup_req_object, 'session'))\n-g = LocalProxy(partial(_lookup_app_object, 'g'))\n+request = LocalProxy(partial(_lookup_req_object, \"request\"))\n+session = LocalProxy(partial(_lookup_req_object, \"session\"))\n+g = LocalProxy(partial(_lookup_app_object, \"g\"))\n\n@@ -24,15 +24,13 @@ from functools import update_wrapper\n \n from werkzeug.urls import url_quote\n from werkzeug.datastructures import Headers, Range\n-from werkzeug.exceptions import BadRequest, NotFound, \\\n-    RequestedRangeNotSatisfiable\n+from werkzeug.exceptions import BadRequest, NotFound, RequestedRangeNotSatisfiable\n \n from werkzeug.wsgi import wrap_file\n from jinja2 import FileSystemLoader\n \n from .signals import message_flashed\n-from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n-     current_app, request\n+from .globals import session, _request_ctx_stack, _app_ctx_stack, current_app, request\n from ._compat import string_types, text_type, PY2, fspath\n \n # sentinel\n@@ -42,8 +40,9 @@ _missing = object()\n # what separators does this operating system provide that are not a slash?\n # this is used by the send_from_directory function to ensure that nobody is\n # able to access files from outside the filesystem.\n-_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n-                    if sep not in (None, '/'))\n+_os_alt_seps = list(\n+    sep for sep in [os.path.sep, os.path.altsep] if sep not in (None, \"/\")\n+)\n \n \n def get_env():\n@@ -51,7 +50,7 @@ def get_env():\n     :envvar:`FLASK_ENV` environment variable. The default is\n     ``'production'``.\n     \"\"\"\n-    return os.environ.get('FLASK_ENV') or 'production'\n+    return os.environ.get(\"FLASK_ENV\") or \"production\"\n \n \n def get_debug_flag():\n@@ -60,12 +59,12 @@ def get_debug_flag():\n     ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n     otherwise.\n     \"\"\"\n-    val = os.environ.get('FLASK_DEBUG')\n+    val = os.environ.get(\"FLASK_DEBUG\")\n \n     if not val:\n-        return get_env() == 'development'\n+        return get_env() == \"development\"\n \n-    return val.lower() not in ('0', 'false', 'no')\n+    return val.lower() not in (\"0\", \"false\", \"no\")\n \n \n def get_load_dotenv(default=True):\n@@ -75,20 +74,19 @@ def get_load_dotenv(default=True):\n \n     :param default: What to return if the env var isn't set.\n     \"\"\"\n-    val = os.environ.get('FLASK_SKIP_DOTENV')\n+    val = os.environ.get(\"FLASK_SKIP_DOTENV\")\n \n     if not val:\n         return default\n \n-    return val.lower() in ('0', 'false', 'no')\n+    return val.lower() in (\"0\", \"false\", \"no\")\n \n \n def _endpoint_from_view_func(view_func):\n     \"\"\"Internal helper that returns the default endpoint for a given\n     function.  This always is the function name.\n     \"\"\"\n-    assert view_func is not None, 'expected view func if endpoint ' \\\n-                                  'is not provided.'\n+    assert view_func is not None, \"expected view func if endpoint \" \"is not provided.\"\n     return view_func.__name__\n \n \n@@ -129,16 +127,20 @@ def stream_with_context(generator_or_function):\n     try:\n         gen = iter(generator_or_function)\n     except TypeError:\n+\n         def decorator(*args, **kwargs):\n             gen = generator_or_function(*args, **kwargs)\n             return stream_with_context(gen)\n+\n         return update_wrapper(decorator, generator_or_function)\n \n     def generator():\n         ctx = _request_ctx_stack.top\n         if ctx is None:\n-            raise RuntimeError('Attempted to stream with context but '\n-                'there was no context in the first place to keep around.')\n+            raise RuntimeError(\n+                \"Attempted to stream with context but \"\n+                \"there was no context in the first place to keep around.\"\n+            )\n         with ctx:\n             # Dummy sentinel.  Has to be inside the context block or we're\n             # not actually keeping the context around.\n@@ -152,7 +154,7 @@ def stream_with_context(generator_or_function):\n                 for item in gen:\n                     yield item\n             finally:\n-                if hasattr(gen, 'close'):\n+                if hasattr(gen, \"close\"):\n                     gen.close()\n \n     # The trick is to start the generator.  Then the code execution runs until\n@@ -291,9 +293,9 @@ def url_for(endpoint, **values):\n \n     if appctx is None:\n         raise RuntimeError(\n-            'Attempted to generate a URL without the application context being'\n-            ' pushed. This has to be executed when application context is'\n-            ' available.'\n+            \"Attempted to generate a URL without the application context being\"\n+            \" pushed. This has to be executed when application context is\"\n+            \" available.\"\n         )\n \n     # If request specific information is available we have some extra\n@@ -302,13 +304,13 @@ def url_for(endpoint, **values):\n         url_adapter = reqctx.url_adapter\n         blueprint_name = request.blueprint\n \n-        if endpoint[:1] == '.':\n+        if endpoint[:1] == \".\":\n             if blueprint_name is not None:\n                 endpoint = blueprint_name + endpoint\n             else:\n                 endpoint = endpoint[1:]\n \n-        external = values.pop('_external', False)\n+        external = values.pop(\"_external\", False)\n \n     # Otherwise go with the url adapter from the appctx and make\n     # the URLs external by default.\n@@ -317,16 +319,16 @@ def url_for(endpoint, **values):\n \n         if url_adapter is None:\n             raise RuntimeError(\n-                'Application was not able to create a URL adapter for request'\n-                ' independent URL generation. You might be able to fix this by'\n-                ' setting the SERVER_NAME config variable.'\n+                \"Application was not able to create a URL adapter for request\"\n+                \" independent URL generation. You might be able to fix this by\"\n+                \" setting the SERVER_NAME config variable.\"\n             )\n \n-        external = values.pop('_external', True)\n+        external = values.pop(\"_external\", True)\n \n-    anchor = values.pop('_anchor', None)\n-    method = values.pop('_method', None)\n-    scheme = values.pop('_scheme', None)\n+    anchor = values.pop(\"_anchor\", None)\n+    method = values.pop(\"_method\", None)\n+    scheme = values.pop(\"_scheme\", None)\n     appctx.app.inject_url_defaults(endpoint, values)\n \n     # This is not the best way to deal with this but currently the\n@@ -335,28 +337,29 @@ def url_for(endpoint, **values):\n     old_scheme = None\n     if scheme is not None:\n         if not external:\n-            raise ValueError('When specifying _scheme, _external must be True')\n+            raise ValueError(\"When specifying _scheme, _external must be True\")\n         old_scheme = url_adapter.url_scheme\n         url_adapter.url_scheme = scheme\n \n     try:\n         try:\n-            rv = url_adapter.build(endpoint, values, method=method,\n-                                   force_external=external)\n+            rv = url_adapter.build(\n+                endpoint, values, method=method, force_external=external\n+            )\n         finally:\n             if old_scheme is not None:\n                 url_adapter.url_scheme = old_scheme\n     except BuildError as error:\n         # We need to inject the values again so that the app callback can\n         # deal with that sort of stuff.\n-        values['_external'] = external\n-        values['_anchor'] = anchor\n-        values['_method'] = method\n-        values['_scheme'] = scheme\n+        values[\"_external\"] = external\n+        values[\"_anchor\"] = anchor\n+        values[\"_method\"] = method\n+        values[\"_scheme\"] = scheme\n         return appctx.app.handle_url_build_error(error, endpoint, values)\n \n     if anchor is not None:\n-        rv += '#' + url_quote(anchor)\n+        rv += \"#\" + url_quote(anchor)\n     return rv\n \n \n@@ -379,11 +382,10 @@ def get_template_attribute(template_name, attribute):\n     :param template_name: the name of the template\n     :param attribute: the name of the variable of macro to access\n     \"\"\"\n-    return getattr(current_app.jinja_env.get_template(template_name).module,\n-                   attribute)\n+    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)\n \n \n-def flash(message, category='message'):\n+def flash(message, category=\"message\"):\n     \"\"\"Flashes a message to the next request.  In order to remove the\n     flashed message from the session and to display it to the user,\n     the template has to call :func:`get_flashed_messages`.\n@@ -405,11 +407,12 @@ def flash(message, category='message'):\n     # This assumed that changes made to mutable structures in the session are\n     # always in sync with the session object, which is not true for session\n     # implementations that use external storage for keeping their keys/values.\n-    flashes = session.get('_flashes', [])\n+    flashes = session.get(\"_flashes\", [])\n     flashes.append((category, message))\n-    session['_flashes'] = flashes\n-    message_flashed.send(current_app._get_current_object(),\n-                         message=message, category=category)\n+    session[\"_flashes\"] = flashes\n+    message_flashed.send(\n+        current_app._get_current_object(), message=message, category=category\n+    )\n \n \n def get_flashed_messages(with_categories=False, category_filter=[]):\n@@ -442,8 +445,9 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n-            if '_flashes' in session else []\n+        _request_ctx_stack.top.flashes = flashes = (\n+            session.pop(\"_flashes\") if \"_flashes\" in session else []\n+        )\n     if category_filter:\n         flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n     if not with_categories:\n@@ -451,9 +455,16 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n     return flashes\n \n \n-def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n-              attachment_filename=None, add_etags=True,\n-              cache_timeout=None, conditional=False, last_modified=None):\n+def send_file(\n+    filename_or_fp,\n+    mimetype=None,\n+    as_attachment=False,\n+    attachment_filename=None,\n+    add_etags=True,\n+    cache_timeout=None,\n+    conditional=False,\n+    last_modified=None,\n+):\n     \"\"\"Sends the contents of a file to the client.  This will use the\n     most efficient method available and configured.  By default it will\n     try to use the WSGI server's file_wrapper support.  Alternatively\n@@ -545,7 +556,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     mtime = None\n     fsize = None\n \n-    if hasattr(filename_or_fp, '__fspath__'):\n+    if hasattr(filename_or_fp, \"__fspath__\"):\n         filename_or_fp = fspath(filename_or_fp)\n \n     if isinstance(filename_or_fp, string_types):\n@@ -561,62 +572,67 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     if mimetype is None:\n         if attachment_filename is not None:\n-            mimetype = mimetypes.guess_type(attachment_filename)[0] \\\n-                or 'application/octet-stream'\n+            mimetype = (\n+                mimetypes.guess_type(attachment_filename)[0]\n+                or \"application/octet-stream\"\n+            )\n \n         if mimetype is None:\n             raise ValueError(\n-                'Unable to infer MIME-type because no filename is available. '\n-                'Please set either `attachment_filename`, pass a filepath to '\n-                '`filename_or_fp` or set your own MIME-type via `mimetype`.'\n+                \"Unable to infer MIME-type because no filename is available. \"\n+                \"Please set either `attachment_filename`, pass a filepath to \"\n+                \"`filename_or_fp` or set your own MIME-type via `mimetype`.\"\n             )\n \n     headers = Headers()\n     if as_attachment:\n         if attachment_filename is None:\n-            raise TypeError('filename unavailable, required for '\n-                            'sending as attachment')\n+            raise TypeError(\n+                \"filename unavailable, required for \" \"sending as attachment\"\n+            )\n \n         if not isinstance(attachment_filename, text_type):\n-            attachment_filename = attachment_filename.decode('utf-8')\n+            attachment_filename = attachment_filename.decode(\"utf-8\")\n \n         try:\n-            attachment_filename = attachment_filename.encode('ascii')\n+            attachment_filename = attachment_filename.encode(\"ascii\")\n         except UnicodeEncodeError:\n             filenames = {\n-                'filename': unicodedata.normalize(\n-                    'NFKD', attachment_filename).encode('ascii', 'ignore'),\n-                'filename*': \"UTF-8''%s\" % url_quote(attachment_filename),\n+                \"filename\": unicodedata.normalize(\"NFKD\", attachment_filename).encode(\n+                    \"ascii\", \"ignore\"\n+                ),\n+                \"filename*\": \"UTF-8''%s\" % url_quote(attachment_filename),\n             }\n         else:\n-            filenames = {'filename': attachment_filename}\n+            filenames = {\"filename\": attachment_filename}\n \n-        headers.add('Content-Disposition', 'attachment', **filenames)\n+        headers.add(\"Content-Disposition\", \"attachment\", **filenames)\n \n     if current_app.use_x_sendfile and filename:\n         if file is not None:\n             file.close()\n-        headers['X-Sendfile'] = filename\n+        headers[\"X-Sendfile\"] = filename\n         fsize = os.path.getsize(filename)\n-        headers['Content-Length'] = fsize\n+        headers[\"Content-Length\"] = fsize\n         data = None\n     else:\n         if file is None:\n-            file = open(filename, 'rb')\n+            file = open(filename, \"rb\")\n             mtime = os.path.getmtime(filename)\n             fsize = os.path.getsize(filename)\n-            headers['Content-Length'] = fsize\n+            headers[\"Content-Length\"] = fsize\n         elif isinstance(file, io.BytesIO):\n             try:\n                 fsize = file.getbuffer().nbytes\n             except AttributeError:\n                 # Python 2 doesn't have getbuffer\n                 fsize = len(file.getvalue())\n-            headers['Content-Length'] = fsize\n+            headers[\"Content-Length\"] = fsize\n         data = wrap_file(request.environ, file)\n \n-    rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n-                                    direct_passthrough=True)\n+    rv = current_app.response_class(\n+        data, mimetype=mimetype, headers=headers, direct_passthrough=True\n+    )\n \n     if last_modified is not None:\n         rv.last_modified = last_modified\n@@ -634,22 +650,29 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         from warnings import warn\n \n         try:\n-            rv.set_etag('%s-%s-%s' % (\n+            rv.set_etag(\n+                \"%s-%s-%s\"\n+                % (\n                     os.path.getmtime(filename),\n                     os.path.getsize(filename),\n                     adler32(\n-                    filename.encode('utf-8') if isinstance(filename, text_type)\n+                        filename.encode(\"utf-8\")\n+                        if isinstance(filename, text_type)\n                         else filename\n-                ) & 0xffffffff\n-            ))\n+                    )\n+                    & 0xFFFFFFFF,\n+                )\n+            )\n         except OSError:\n-            warn('Access %s failed, maybe it does not exist, so ignore etags in '\n-                 'headers' % filename, stacklevel=2)\n+            warn(\n+                \"Access %s failed, maybe it does not exist, so ignore etags in \"\n+                \"headers\" % filename,\n+                stacklevel=2,\n+            )\n \n     if conditional:\n         try:\n-            rv = rv.make_conditional(request, accept_ranges=True,\n-                                     complete_length=fsize)\n+            rv = rv.make_conditional(request, accept_ranges=True, complete_length=fsize)\n         except RequestedRangeNotSatisfiable:\n             if file is not None:\n                 file.close()\n@@ -657,7 +680,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         # make sure we don't send x-sendfile for servers that\n         # ignore the 304 status code for x-sendfile.\n         if rv.status_code == 304:\n-            rv.headers.pop('x-sendfile', None)\n+            rv.headers.pop(\"x-sendfile\", None)\n     return rv\n \n \n@@ -682,14 +705,14 @@ def safe_join(directory, *pathnames):\n     parts = [directory]\n \n     for filename in pathnames:\n-        if filename != '':\n+        if filename != \"\":\n             filename = posixpath.normpath(filename)\n \n         if (\n             any(sep in filename for sep in _os_alt_seps)\n             or os.path.isabs(filename)\n-            or filename == '..'\n-            or filename.startswith('../')\n+            or filename == \"..\"\n+            or filename.startswith(\"../\")\n         ):\n             raise NotFound()\n \n@@ -735,7 +758,7 @@ def send_from_directory(directory, filename, **options):\n             raise NotFound()\n     except (TypeError, ValueError):\n         raise BadRequest()\n-    options.setdefault('conditional', True)\n+    options.setdefault(\"conditional\", True)\n     return send_file(filename, **options)\n \n \n@@ -747,7 +770,7 @@ def get_root_path(import_name):\n     \"\"\"\n     # Module already imported and has a file attribute.  Use that first.\n     mod = sys.modules.get(import_name)\n-    if mod is not None and hasattr(mod, '__file__'):\n+    if mod is not None and hasattr(mod, \"__file__\"):\n         return os.path.dirname(os.path.abspath(mod.__file__))\n \n     # Next attempt: check the loader.\n@@ -756,30 +779,32 @@ def get_root_path(import_name):\n     # Loader does not exist or we're referring to an unloaded main module\n     # or a main module without path (interactive sessions), go with the\n     # current working directory.\n-    if loader is None or import_name == '__main__':\n+    if loader is None or import_name == \"__main__\":\n         return os.getcwd()\n \n     # For .egg, zipimporter does not have get_filename until Python 2.7.\n     # Some other loaders might exhibit the same behavior.\n-    if hasattr(loader, 'get_filename'):\n+    if hasattr(loader, \"get_filename\"):\n         filepath = loader.get_filename(import_name)\n     else:\n         # Fall back to imports.\n         __import__(import_name)\n         mod = sys.modules[import_name]\n-        filepath = getattr(mod, '__file__', None)\n+        filepath = getattr(mod, \"__file__\", None)\n \n         # If we don't have a filepath it might be because we are a\n         # namespace package.  In this case we pick the root path from the\n         # first module that is contained in our package.\n         if filepath is None:\n-            raise RuntimeError('No root path can be found for the provided '\n+            raise RuntimeError(\n+                \"No root path can be found for the provided \"\n                 'module \"%s\".  This can happen because the '\n-                               'module came from an import hook that does '\n-                               'not provide file name information or because '\n-                               'it\\'s a namespace package.  In this case '\n-                               'the root path needs to be explicitly '\n-                               'provided.' % import_name)\n+                \"module came from an import hook that does \"\n+                \"not provide file name information or because \"\n+                \"it's a namespace package.  In this case \"\n+                \"the root path needs to be explicitly \"\n+                \"provided.\" % import_name\n+            )\n \n     # filepath is import_name.py for a module, or __init__.py for a package.\n     return os.path.dirname(os.path.abspath(filepath))\n@@ -791,21 +816,26 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):\n     \"\"\"\n     # If the loader can tell us if something is a package, we can\n     # directly ask the loader.\n-    if hasattr(loader, 'is_package'):\n+    if hasattr(loader, \"is_package\"):\n         return loader.is_package(mod_name)\n     # importlib's namespace loaders do not have this functionality but\n     # all the modules it loads are packages, so we can take advantage of\n     # this information.\n-    elif (loader.__class__.__module__ == '_frozen_importlib' and\n-          loader.__class__.__name__ == 'NamespaceLoader'):\n+    elif (\n+        loader.__class__.__module__ == \"_frozen_importlib\"\n+        and loader.__class__.__name__ == \"NamespaceLoader\"\n+    ):\n         return True\n     # Otherwise we need to fail with an error that explains what went\n     # wrong.\n     raise AttributeError(\n-        ('%s.is_package() method is missing but is required by Flask of '\n-         'PEP 302 import hooks.  If you do not use import hooks and '\n-         'you encounter this error please file a bug against Flask.') %\n-        loader.__class__.__name__)\n+        (\n+            \"%s.is_package() method is missing but is required by Flask of \"\n+            \"PEP 302 import hooks.  If you do not use import hooks and \"\n+            \"you encounter this error please file a bug against Flask.\"\n+        )\n+        % loader.__class__.__name__\n+    )\n \n \n def find_package(import_name):\n@@ -816,16 +846,16 @@ def find_package(import_name):\n     import the module.  The prefix is the path below which a UNIX like\n     folder structure exists (lib, share etc.).\n     \"\"\"\n-    root_mod_name = import_name.split('.')[0]\n+    root_mod_name = import_name.split(\".\")[0]\n     loader = pkgutil.get_loader(root_mod_name)\n-    if loader is None or import_name == '__main__':\n+    if loader is None or import_name == \"__main__\":\n         # import name is not found, or interactive/main module\n         package_path = os.getcwd()\n     else:\n         # For .egg, zipimporter does not have get_filename until Python 2.7.\n-        if hasattr(loader, 'get_filename'):\n+        if hasattr(loader, \"get_filename\"):\n             filename = loader.get_filename(root_mod_name)\n-        elif hasattr(loader, 'archive'):\n+        elif hasattr(loader, \"archive\"):\n             # zipimporter's loader.archive points to the .egg or .zip\n             # archive filename is dropped in call to dirname below.\n             filename = loader.archive\n@@ -841,21 +871,20 @@ def find_package(import_name):\n         # In case the root module is a package we need to chop of the\n         # rightmost part.  This needs to go through a helper function\n         # because of python 3.3 namespace packages.\n-        if _matching_loader_thinks_module_is_package(\n-                loader, root_mod_name):\n+        if _matching_loader_thinks_module_is_package(loader, root_mod_name):\n             package_path = os.path.dirname(package_path)\n \n     site_parent, site_folder = os.path.split(package_path)\n     py_prefix = os.path.abspath(sys.prefix)\n     if package_path.startswith(py_prefix):\n         return py_prefix, package_path\n-    elif site_folder.lower() == 'site-packages':\n+    elif site_folder.lower() == \"site-packages\":\n         parent, folder = os.path.split(site_parent)\n         # Windows like installations\n-        if folder.lower() == 'lib':\n+        if folder.lower() == \"lib\":\n             base_dir = parent\n         # UNIX like installations\n-        elif os.path.basename(parent).lower() == 'lib':\n+        elif os.path.basename(parent).lower() == \"lib\":\n             base_dir = os.path.dirname(parent)\n         else:\n             base_dir = site_parent\n@@ -921,8 +950,9 @@ class _PackageBoundObject(object):\n         self._static_folder = value\n \n     static_folder = property(\n-        _get_static_folder, _set_static_folder,\n-        doc='The absolute path to the configured static folder.'\n+        _get_static_folder,\n+        _set_static_folder,\n+        doc=\"The absolute path to the configured static folder.\",\n     )\n     del _get_static_folder, _set_static_folder\n \n@@ -931,14 +961,15 @@ class _PackageBoundObject(object):\n             return self._static_url_path\n \n         if self.static_folder is not None:\n-            return '/' + os.path.basename(self.static_folder)\n+            return \"/\" + os.path.basename(self.static_folder)\n \n     def _set_static_url_path(self, value):\n         self._static_url_path = value\n \n     static_url_path = property(\n-        _get_static_url_path, _set_static_url_path,\n-        doc='The URL prefix that the static route will be registered for.'\n+        _get_static_url_path,\n+        _set_static_url_path,\n+        doc=\"The URL prefix that the static route will be registered for.\",\n     )\n     del _get_static_url_path, _set_static_url_path\n \n@@ -958,8 +989,7 @@ class _PackageBoundObject(object):\n         .. versionadded:: 0.5\n         \"\"\"\n         if self.template_folder is not None:\n-            return FileSystemLoader(os.path.join(self.root_path,\n-                                                 self.template_folder))\n+            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\n \n     def get_send_file_max_age(self, filename):\n         \"\"\"Provides default cache_timeout for the :func:`send_file` functions.\n@@ -994,14 +1024,15 @@ class _PackageBoundObject(object):\n         .. versionadded:: 0.5\n         \"\"\"\n         if not self.has_static_folder:\n-            raise RuntimeError('No static folder for this object')\n+            raise RuntimeError(\"No static folder for this object\")\n         # Ensure get_send_file_max_age is called in all cases.\n         # Here, we ensure get_send_file_max_age is called for Blueprints.\n         cache_timeout = self.get_send_file_max_age(filename)\n-        return send_from_directory(self.static_folder, filename,\n-                                   cache_timeout=cache_timeout)\n+        return send_from_directory(\n+            self.static_folder, filename, cache_timeout=cache_timeout\n+        )\n \n-    def open_resource(self, resource, mode='rb'):\n+    def open_resource(self, resource, mode=\"rb\"):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n         how this works, consider the following folder structure::\n \n@@ -1024,8 +1055,8 @@ class _PackageBoundObject(object):\n                          subfolders use forward slashes as separator.\n         :param mode: resource file opening mode, default is 'rb'.\n         \"\"\"\n-        if mode not in ('r', 'rb'):\n-            raise ValueError('Resources can only be opened for reading')\n+        if mode not in (\"r\", \"rb\"):\n+            raise ValueError(\"Resources can only be opened for reading\")\n         return open(os.path.join(self.root_path, resource), mode)\n \n \n@@ -1052,7 +1083,7 @@ def is_ip(value):\n     :return: True if string is an IP address\n     :rtype: bool\n     \"\"\"\n-    if PY2 and os.name == 'nt':\n+    if PY2 and os.name == \"nt\":\n         try:\n             socket.inet_aton(value)\n             return True\n\n@@ -23,12 +23,20 @@ from itsdangerous import json as _json\n \n # Figure out if simplejson escapes slashes.  This behavior was changed\n # from one version to another without reason.\n-_slash_escape = '\\\\/' not in _json.dumps('/')\n+_slash_escape = \"\\\\/\" not in _json.dumps(\"/\")\n \n \n-__all__ = ['dump', 'dumps', 'load', 'loads', 'htmlsafe_dump',\n-           'htmlsafe_dumps', 'JSONDecoder', 'JSONEncoder',\n-           'jsonify']\n+__all__ = [\n+    \"dump\",\n+    \"dumps\",\n+    \"load\",\n+    \"loads\",\n+    \"htmlsafe_dump\",\n+    \"htmlsafe_dumps\",\n+    \"JSONDecoder\",\n+    \"JSONEncoder\",\n+    \"jsonify\",\n+]\n \n \n def _wrap_reader_for_text(fp, encoding):\n@@ -39,7 +47,7 @@ def _wrap_reader_for_text(fp, encoding):\n \n def _wrap_writer_for_text(fp, encoding):\n     try:\n-        fp.write('')\n+        fp.write(\"\")\n     except TypeError:\n         fp = io.TextIOWrapper(fp, encoding)\n     return fp\n@@ -76,7 +84,7 @@ class JSONEncoder(_json.JSONEncoder):\n             return http_date(o.timetuple())\n         if isinstance(o, uuid.UUID):\n             return str(o)\n-        if hasattr(o, '__html__'):\n+        if hasattr(o, \"__html__\"):\n             return text_type(o.__html__())\n         return _json.JSONEncoder.default(self, o)\n \n@@ -94,18 +102,17 @@ def _dump_arg_defaults(kwargs):\n     if current_app:\n         bp = current_app.blueprints.get(request.blueprint) if request else None\n         kwargs.setdefault(\n-            'cls',\n-            bp.json_encoder if bp and bp.json_encoder\n-                else current_app.json_encoder\n+            \"cls\",\n+            bp.json_encoder if bp and bp.json_encoder else current_app.json_encoder,\n         )\n \n-        if not current_app.config['JSON_AS_ASCII']:\n-            kwargs.setdefault('ensure_ascii', False)\n+        if not current_app.config[\"JSON_AS_ASCII\"]:\n+            kwargs.setdefault(\"ensure_ascii\", False)\n \n-        kwargs.setdefault('sort_keys', current_app.config['JSON_SORT_KEYS'])\n+        kwargs.setdefault(\"sort_keys\", current_app.config[\"JSON_SORT_KEYS\"])\n     else:\n-        kwargs.setdefault('sort_keys', True)\n-        kwargs.setdefault('cls', JSONEncoder)\n+        kwargs.setdefault(\"sort_keys\", True)\n+        kwargs.setdefault(\"cls\", JSONEncoder)\n \n \n def _load_arg_defaults(kwargs):\n@@ -113,12 +120,11 @@ def _load_arg_defaults(kwargs):\n     if current_app:\n         bp = current_app.blueprints.get(request.blueprint) if request else None\n         kwargs.setdefault(\n-            'cls',\n-            bp.json_decoder if bp and bp.json_decoder\n-                else current_app.json_decoder\n+            \"cls\",\n+            bp.json_decoder if bp and bp.json_decoder else current_app.json_decoder,\n         )\n     else:\n-        kwargs.setdefault('cls', JSONDecoder)\n+        kwargs.setdefault(\"cls\", JSONDecoder)\n \n \n def detect_encoding(data):\n@@ -134,34 +140,34 @@ def detect_encoding(data):\n     head = data[:4]\n \n     if head[:3] == codecs.BOM_UTF8:\n-        return 'utf-8-sig'\n+        return \"utf-8-sig\"\n \n-    if b'\\x00' not in head:\n-        return 'utf-8'\n+    if b\"\\x00\" not in head:\n+        return \"utf-8\"\n \n     if head in (codecs.BOM_UTF32_BE, codecs.BOM_UTF32_LE):\n-        return 'utf-32'\n+        return \"utf-32\"\n \n     if head[:2] in (codecs.BOM_UTF16_BE, codecs.BOM_UTF16_LE):\n-        return 'utf-16'\n+        return \"utf-16\"\n \n     if len(head) == 4:\n-        if head[:3] == b'\\x00\\x00\\x00':\n-            return 'utf-32-be'\n+        if head[:3] == b\"\\x00\\x00\\x00\":\n+            return \"utf-32-be\"\n \n-        if head[::2] == b'\\x00\\x00':\n-            return 'utf-16-be'\n+        if head[::2] == b\"\\x00\\x00\":\n+            return \"utf-16-be\"\n \n-        if head[1:] == b'\\x00\\x00\\x00':\n-            return 'utf-32-le'\n+        if head[1:] == b\"\\x00\\x00\\x00\":\n+            return \"utf-32-le\"\n \n-        if head[1::2] == b'\\x00\\x00':\n-            return 'utf-16-le'\n+        if head[1::2] == b\"\\x00\\x00\":\n+            return \"utf-16-le\"\n \n     if len(head) == 2:\n-        return 'utf-16-be' if head.startswith(b'\\x00') else 'utf-16-le'\n+        return \"utf-16-be\" if head.startswith(b\"\\x00\") else \"utf-16-le\"\n \n-    return 'utf-8'\n+    return \"utf-8\"\n \n \n def dumps(obj, **kwargs):\n@@ -175,7 +181,7 @@ def dumps(obj, **kwargs):\n     and can be overridden by the simplejson ``ensure_ascii`` parameter.\n     \"\"\"\n     _dump_arg_defaults(kwargs)\n-    encoding = kwargs.pop('encoding', None)\n+    encoding = kwargs.pop(\"encoding\", None)\n     rv = _json.dumps(obj, **kwargs)\n     if encoding is not None and isinstance(rv, text_type):\n         rv = rv.encode(encoding)\n@@ -185,7 +191,7 @@ def dumps(obj, **kwargs):\n def dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n     _dump_arg_defaults(kwargs)\n-    encoding = kwargs.pop('encoding', None)\n+    encoding = kwargs.pop(\"encoding\", None)\n     if encoding is not None:\n         fp = _wrap_writer_for_text(fp, encoding)\n     _json.dump(obj, fp, **kwargs)\n@@ -198,7 +204,7 @@ def loads(s, **kwargs):\n     \"\"\"\n     _load_arg_defaults(kwargs)\n     if isinstance(s, bytes):\n-        encoding = kwargs.pop('encoding', None)\n+        encoding = kwargs.pop(\"encoding\", None)\n         if encoding is None:\n             encoding = detect_encoding(s)\n         s = s.decode(encoding)\n@@ -210,7 +216,7 @@ def load(fp, **kwargs):\n     \"\"\"\n     _load_arg_defaults(kwargs)\n     if not PY2:\n-        fp = _wrap_reader_for_text(fp, kwargs.pop('encoding', None) or 'utf-8')\n+        fp = _wrap_reader_for_text(fp, kwargs.pop(\"encoding\", None) or \"utf-8\")\n     return _json.load(fp, **kwargs)\n \n \n@@ -239,13 +245,15 @@ def htmlsafe_dumps(obj, **kwargs):\n        quoted.  Always single quote attributes if you use the ``|tojson``\n        filter.  Alternatively use ``|tojson|forceescape``.\n     \"\"\"\n-    rv = dumps(obj, **kwargs) \\\n-        .replace(u'<', u'\\\\u003c') \\\n-        .replace(u'>', u'\\\\u003e') \\\n-        .replace(u'&', u'\\\\u0026') \\\n-        .replace(u\"'\", u'\\\\u0027')\n+    rv = (\n+        dumps(obj, **kwargs)\n+        .replace(u\"<\", u\"\\\\u003c\")\n+        .replace(u\">\", u\"\\\\u003e\")\n+        .replace(u\"&\", u\"\\\\u0026\")\n+        .replace(u\"'\", u\"\\\\u0027\")\n+    )\n     if not _slash_escape:\n-        rv = rv.replace('\\\\/', '/')\n+        rv = rv.replace(\"\\\\/\", \"/\")\n     return rv\n \n \n@@ -304,22 +312,22 @@ def jsonify(*args, **kwargs):\n     \"\"\"\n \n     indent = None\n-    separators = (',', ':')\n+    separators = (\",\", \":\")\n \n-    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] or current_app.debug:\n+    if current_app.config[\"JSONIFY_PRETTYPRINT_REGULAR\"] or current_app.debug:\n         indent = 2\n-        separators = (', ', ': ')\n+        separators = (\", \", \": \")\n \n     if args and kwargs:\n-        raise TypeError('jsonify() behavior undefined when passed both args and kwargs')\n+        raise TypeError(\"jsonify() behavior undefined when passed both args and kwargs\")\n     elif len(args) == 1:  # single args are passed directly to dumps()\n         data = args[0]\n     else:\n         data = args or kwargs\n \n     return current_app.response_class(\n-        dumps(data, indent=indent, separators=separators) + '\\n',\n-        mimetype=current_app.config['JSONIFY_MIMETYPE']\n+        dumps(data, indent=indent, separators=separators) + \"\\n\",\n+        mimetype=current_app.config[\"JSONIFY_MIMETYPE\"],\n     )\n \n \n\n@@ -56,7 +56,7 @@ from flask.json import dumps, loads\n class JSONTag(object):\n     \"\"\"Base class for defining type tags for :class:`TaggedJSONSerializer`.\"\"\"\n \n-    __slots__ = ('serializer',)\n+    __slots__ = (\"serializer\",)\n \n     #: The tag to mark the serialized object with. If ``None``, this tag is\n     #: only used as an intermediate step during tagging.\n@@ -94,7 +94,7 @@ class TagDict(JSONTag):\n     \"\"\"\n \n     __slots__ = ()\n-    key = ' di'\n+    key = \" di\"\n \n     def check(self, value):\n         return (\n@@ -105,7 +105,7 @@ class TagDict(JSONTag):\n \n     def to_json(self, value):\n         key = next(iter(value))\n-        return {key + '__': self.serializer.tag(value[key])}\n+        return {key + \"__\": self.serializer.tag(value[key])}\n \n     def to_python(self, value):\n         key = next(iter(value))\n@@ -128,7 +128,7 @@ class PassDict(JSONTag):\n \n class TagTuple(JSONTag):\n     __slots__ = ()\n-    key = ' t'\n+    key = \" t\"\n \n     def check(self, value):\n         return isinstance(value, tuple)\n@@ -154,13 +154,13 @@ class PassList(JSONTag):\n \n class TagBytes(JSONTag):\n     __slots__ = ()\n-    key = ' b'\n+    key = \" b\"\n \n     def check(self, value):\n         return isinstance(value, bytes)\n \n     def to_json(self, value):\n-        return b64encode(value).decode('ascii')\n+        return b64encode(value).decode(\"ascii\")\n \n     def to_python(self, value):\n         return b64decode(value)\n@@ -172,10 +172,10 @@ class TagMarkup(JSONTag):\n     deserializes to an instance of :class:`~flask.Markup`.\"\"\"\n \n     __slots__ = ()\n-    key = ' m'\n+    key = \" m\"\n \n     def check(self, value):\n-        return callable(getattr(value, '__html__', None))\n+        return callable(getattr(value, \"__html__\", None))\n \n     def to_json(self, value):\n         return text_type(value.__html__())\n@@ -186,7 +186,7 @@ class TagMarkup(JSONTag):\n \n class TagUUID(JSONTag):\n     __slots__ = ()\n-    key = ' u'\n+    key = \" u\"\n \n     def check(self, value):\n         return isinstance(value, UUID)\n@@ -200,7 +200,7 @@ class TagUUID(JSONTag):\n \n class TagDateTime(JSONTag):\n     __slots__ = ()\n-    key = ' d'\n+    key = \" d\"\n \n     def check(self, value):\n         return isinstance(value, datetime)\n@@ -227,12 +227,18 @@ class TaggedJSONSerializer(object):\n     * :class:`~datetime.datetime`\n     \"\"\"\n \n-    __slots__ = ('tags', 'order')\n+    __slots__ = (\"tags\", \"order\")\n \n     #: Tag classes to bind when creating the serializer. Other tags can be\n     #: added later using :meth:`~register`.\n     default_tags = [\n-        TagDict, PassDict, TagTuple, PassList, TagBytes, TagMarkup, TagUUID,\n+        TagDict,\n+        PassDict,\n+        TagTuple,\n+        PassList,\n+        TagBytes,\n+        TagMarkup,\n+        TagUUID,\n         TagDateTime,\n     ]\n \n@@ -293,7 +299,7 @@ class TaggedJSONSerializer(object):\n \n     def dumps(self, value):\n         \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n-        return dumps(self.tag(value), separators=(',', ':'))\n+        return dumps(self.tag(value), separators=(\",\", \":\"))\n \n     def loads(self, value):\n         \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n\n@@ -27,7 +27,7 @@ def wsgi_errors_stream():\n     can't import this directly, you can refer to it as\n     ``ext://flask.logging.wsgi_errors_stream``.\n     \"\"\"\n-    return request.environ['wsgi.errors'] if request else sys.stderr\n+    return request.environ[\"wsgi.errors\"] if request else sys.stderr\n \n \n def has_level_handler(logger):\n@@ -52,9 +52,9 @@ def has_level_handler(logger):\n #: Log messages to :func:`~flask.logging.wsgi_errors_stream` with the format\n #: ``[%(asctime)s] %(levelname)s in %(module)s: %(message)s``.\n default_handler = logging.StreamHandler(wsgi_errors_stream)\n-default_handler.setFormatter(logging.Formatter(\n-    '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'\n-))\n+default_handler.setFormatter(\n+    logging.Formatter(\"[%(asctime)s] %(levelname)s in %(module)s: %(message)s\")\n+)\n \n \n def create_logger(app):\n@@ -67,7 +67,7 @@ def create_logger(app):\n     :class:`~logging.StreamHandler` for\n     :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n     \"\"\"\n-    logger = logging.getLogger('flask.app')\n+    logger = logging.getLogger(\"flask.app\")\n \n     if app.debug and logger.level == logging.NOTSET:\n         logger.setLevel(logging.DEBUG)\n\n@@ -27,11 +27,11 @@ class SessionMixin(collections_abc.MutableMapping):\n     @property\n     def permanent(self):\n         \"\"\"This reflects the ``'_permanent'`` key in the dict.\"\"\"\n-        return self.get('_permanent', False)\n+        return self.get(\"_permanent\", False)\n \n     @permanent.setter\n     def permanent(self, value):\n-        self['_permanent'] = bool(value)\n+        self[\"_permanent\"] = bool(value)\n \n     #: Some implementations can detect whether a session is newly\n     #: created, but that is not guaranteed. Use with caution. The mixin\n@@ -98,11 +98,13 @@ class NullSession(SecureCookieSession):\n     \"\"\"\n \n     def _fail(self, *args, **kwargs):\n-        raise RuntimeError('The session is unavailable because no secret '\n-                           'key was set.  Set the secret_key on the '\n-                           'application to something unique and secret.')\n-    __setitem__ = __delitem__ = clear = pop = popitem = \\\n-        update = setdefault = _fail\n+        raise RuntimeError(\n+            \"The session is unavailable because no secret \"\n+            \"key was set.  Set the secret_key on the \"\n+            \"application to something unique and secret.\"\n+        )\n+\n+    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail\n     del _fail\n \n \n@@ -180,52 +182,52 @@ class SessionInterface(object):\n         updated to avoid re-running the logic.\n         \"\"\"\n \n-        rv = app.config['SESSION_COOKIE_DOMAIN']\n+        rv = app.config[\"SESSION_COOKIE_DOMAIN\"]\n \n         # set explicitly, or cached from SERVER_NAME detection\n         # if False, return None\n         if rv is not None:\n             return rv if rv else None\n \n-        rv = app.config['SERVER_NAME']\n+        rv = app.config[\"SERVER_NAME\"]\n \n         # server name not set, cache False to return none next time\n         if not rv:\n-            app.config['SESSION_COOKIE_DOMAIN'] = False\n+            app.config[\"SESSION_COOKIE_DOMAIN\"] = False\n             return None\n \n         # chop off the port which is usually not supported by browsers\n         # remove any leading '.' since we'll add that later\n-        rv = rv.rsplit(':', 1)[0].lstrip('.')\n+        rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")\n \n-        if '.' not in rv:\n+        if \".\" not in rv:\n             # Chrome doesn't allow names without a '.'\n             # this should only come up with localhost\n             # hack around this by not setting the name, and show a warning\n             warnings.warn(\n                 '\"{rv}\" is not a valid cookie domain, it must contain a \".\".'\n-                ' Add an entry to your hosts file, for example'\n+                \" Add an entry to your hosts file, for example\"\n                 ' \"{rv}.localdomain\", and use that instead.'.format(rv=rv)\n             )\n-            app.config['SESSION_COOKIE_DOMAIN'] = False\n+            app.config[\"SESSION_COOKIE_DOMAIN\"] = False\n             return None\n \n         ip = is_ip(rv)\n \n         if ip:\n             warnings.warn(\n-                'The session cookie domain is an IP address. This may not work'\n-                ' as intended in some browsers. Add an entry to your hosts'\n+                \"The session cookie domain is an IP address. This may not work\"\n+                \" as intended in some browsers. Add an entry to your hosts\"\n                 ' file, for example \"localhost.localdomain\", and use that'\n-                ' instead.'\n+                \" instead.\"\n             )\n \n         # if this is not an ip and app is mounted at the root, allow subdomain\n         # matching by adding a '.' prefix\n-        if self.get_cookie_path(app) == '/' and not ip:\n-            rv = '.' + rv\n+        if self.get_cookie_path(app) == \"/\" and not ip:\n+            rv = \".\" + rv\n \n-        app.config['SESSION_COOKIE_DOMAIN'] = rv\n+        app.config[\"SESSION_COOKIE_DOMAIN\"] = rv\n         return rv\n \n     def get_cookie_path(self, app):\n@@ -234,28 +236,27 @@ class SessionInterface(object):\n         config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n         uses ``/`` if it's ``None``.\n         \"\"\"\n-        return app.config['SESSION_COOKIE_PATH'] \\\n-               or app.config['APPLICATION_ROOT']\n+        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]\n \n     def get_cookie_httponly(self, app):\n         \"\"\"Returns True if the session cookie should be httponly.  This\n         currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n         config var.\n         \"\"\"\n-        return app.config['SESSION_COOKIE_HTTPONLY']\n+        return app.config[\"SESSION_COOKIE_HTTPONLY\"]\n \n     def get_cookie_secure(self, app):\n         \"\"\"Returns True if the cookie should be secure.  This currently\n         just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n         \"\"\"\n-        return app.config['SESSION_COOKIE_SECURE']\n+        return app.config[\"SESSION_COOKIE_SECURE\"]\n \n     def get_cookie_samesite(self, app):\n         \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n         ``SameSite`` attribute. This currently just returns the value of\n         the :data:`SESSION_COOKIE_SAMESITE` setting.\n         \"\"\"\n-        return app.config['SESSION_COOKIE_SAMESITE']\n+        return app.config[\"SESSION_COOKIE_SAMESITE\"]\n \n     def get_expiration_time(self, app, session):\n         \"\"\"A helper method that returns an expiration date for the session\n@@ -279,7 +280,7 @@ class SessionInterface(object):\n         \"\"\"\n \n         return session.modified or (\n-            session.permanent and app.config['SESSION_REFRESH_EACH_REQUEST']\n+            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]\n         )\n \n     def open_session(self, app, request):\n@@ -306,14 +307,15 @@ class SecureCookieSessionInterface(SessionInterface):\n     \"\"\"The default session interface that stores sessions in signed cookies\n     through the :mod:`itsdangerous` module.\n     \"\"\"\n+\n     #: the salt that should be applied on top of the secret key for the\n     #: signing of cookie based sessions.\n-    salt = 'cookie-session'\n+    salt = \"cookie-session\"\n     #: the hash function to use for the signature.  The default is sha1\n     digest_method = staticmethod(hashlib.sha1)\n     #: the name of the itsdangerous supported key derivation.  The default\n     #: is hmac.\n-    key_derivation = 'hmac'\n+    key_derivation = \"hmac\"\n     #: A python serializer for the payload.  The default is a compact\n     #: JSON derived serializer with support for some extra Python types\n     #: such as datetime objects or tuples.\n@@ -324,12 +326,14 @@ class SecureCookieSessionInterface(SessionInterface):\n         if not app.secret_key:\n             return None\n         signer_kwargs = dict(\n-            key_derivation=self.key_derivation,\n-            digest_method=self.digest_method\n+            key_derivation=self.key_derivation, digest_method=self.digest_method\n         )\n-        return URLSafeTimedSerializer(app.secret_key, salt=self.salt,\n+        return URLSafeTimedSerializer(\n+            app.secret_key,\n+            salt=self.salt,\n             serializer=self.serializer,\n-                                      signer_kwargs=signer_kwargs)\n+            signer_kwargs=signer_kwargs,\n+        )\n \n     def open_session(self, app, request):\n         s = self.get_signing_serializer(app)\n@@ -354,16 +358,14 @@ class SecureCookieSessionInterface(SessionInterface):\n         if not session:\n             if session.modified:\n                 response.delete_cookie(\n-                    app.session_cookie_name,\n-                    domain=domain,\n-                    path=path\n+                    app.session_cookie_name, domain=domain, path=path\n                 )\n \n             return\n \n         # Add a \"Vary: Cookie\" header if the session was accessed at all.\n         if session.accessed:\n-            response.vary.add('Cookie')\n+            response.vary.add(\"Cookie\")\n \n         if not self.should_set_cookie(app, session):\n             return\n@@ -381,5 +383,5 @@ class SecureCookieSessionInterface(SessionInterface):\n             domain=domain,\n             path=path,\n             secure=secure,\n-            samesite=samesite\n+            samesite=samesite,\n         )\n\n@@ -13,8 +13,10 @@\n signals_available = False\n try:\n     from blinker import Namespace\n+\n     signals_available = True\n except ImportError:\n+\n     class Namespace(object):\n         def signal(self, name, doc=None):\n             return _FakeSignal(name, doc)\n@@ -29,15 +31,23 @@ except ImportError:\n         def __init__(self, name, doc=None):\n             self.name = name\n             self.__doc__ = doc\n+\n         def _fail(self, *args, **kwargs):\n-            raise RuntimeError('signalling support is unavailable '\n-                               'because the blinker library is '\n-                               'not installed.')\n+            raise RuntimeError(\n+                \"signalling support is unavailable \"\n+                \"because the blinker library is \"\n+                \"not installed.\"\n+            )\n+\n         send = lambda *a, **kw: None\n-        connect = disconnect = has_receivers_for = receivers_for = \\\n-            temporarily_connected_to = connected_to = _fail\n+        connect = (\n+            disconnect\n+        ) = (\n+            has_receivers_for\n+        ) = receivers_for = temporarily_connected_to = connected_to = _fail\n         del _fail\n \n+\n # The namespace for code signals.  If you are not Flask code, do\n # not put signals in here.  Create your own namespace instead.\n _signals = Namespace()\n@@ -45,13 +55,13 @@ _signals = Namespace()\n \n # Core signals.  For usage examples grep the source code or consult\n # the API documentation in docs/api.rst as well as docs/signals.rst\n-template_rendered = _signals.signal('template-rendered')\n-before_render_template = _signals.signal('before-render-template')\n-request_started = _signals.signal('request-started')\n-request_finished = _signals.signal('request-finished')\n-request_tearing_down = _signals.signal('request-tearing-down')\n-got_request_exception = _signals.signal('got-request-exception')\n-appcontext_tearing_down = _signals.signal('appcontext-tearing-down')\n-appcontext_pushed = _signals.signal('appcontext-pushed')\n-appcontext_popped = _signals.signal('appcontext-popped')\n-message_flashed = _signals.signal('message-flashed')\n+template_rendered = _signals.signal(\"template-rendered\")\n+before_render_template = _signals.signal(\"before-render-template\")\n+request_started = _signals.signal(\"request-started\")\n+request_finished = _signals.signal(\"request-finished\")\n+request_tearing_down = _signals.signal(\"request-tearing-down\")\n+got_request_exception = _signals.signal(\"got-request-exception\")\n+appcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")\n+appcontext_pushed = _signals.signal(\"appcontext-pushed\")\n+appcontext_popped = _signals.signal(\"appcontext-popped\")\n+message_flashed = _signals.signal(\"message-flashed\")\n\n@@ -9,8 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n-     TemplateNotFound\n+from jinja2 import BaseLoader, Environment as BaseEnvironment, TemplateNotFound\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n from .signals import template_rendered, before_render_template\n@@ -24,10 +23,10 @@ def _default_template_ctx_processor():\n     appctx = _app_ctx_stack.top\n     rv = {}\n     if appctx is not None:\n-        rv['g'] = appctx.g\n+        rv[\"g\"] = appctx.g\n     if reqctx is not None:\n-        rv['request'] = reqctx.request\n-        rv['session'] = reqctx.session\n+        rv[\"request\"] = reqctx.request\n+        rv[\"session\"] = reqctx.session\n     return rv\n \n \n@@ -38,8 +37,8 @@ class Environment(BaseEnvironment):\n     \"\"\"\n \n     def __init__(self, app, **options):\n-        if 'loader' not in options:\n-            options['loader'] = app.create_global_jinja_loader()\n+        if \"loader\" not in options:\n+            options[\"loader\"] = app.create_global_jinja_loader()\n         BaseEnvironment.__init__(self, **options)\n         self.app = app\n \n@@ -53,7 +52,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n-        if self.app.config['EXPLAIN_TEMPLATE_LOADING']:\n+        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n             return self._get_source_explained(environment, template)\n         return self._get_source_fast(environment, template)\n \n@@ -71,6 +70,7 @@ class DispatchingJinjaLoader(BaseLoader):\n             attempts.append((loader, srcobj, rv))\n \n         from .debughelpers import explain_template_loading_attempts\n+\n         explain_template_loading_attempts(self.app, template, attempts)\n \n         if trv is not None:\n@@ -131,8 +131,11 @@ def render_template(template_name_or_list, **context):\n     \"\"\"\n     ctx = _app_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n-                   context, ctx.app)\n+    return _render(\n+        ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n+        context,\n+        ctx.app,\n+    )\n \n \n def render_template_string(source, **context):\n@@ -146,5 +149,4 @@ def render_template_string(source, **context):\n     \"\"\"\n     ctx = _app_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    return _render(ctx.app.jinja_env.from_string(source),\n-                   context, ctx.app)\n+    return _render(ctx.app.jinja_env.from_string(source), context, ctx.app)\n\n@@ -22,8 +22,7 @@ from werkzeug.urls import url_parse\n \n \n def make_test_environ_builder(\n-    app, path='/', base_url=None, subdomain=None, url_scheme=None,\n-    *args, **kwargs\n+    app, path=\"/\", base_url=None, subdomain=None, url_scheme=None, *args, **kwargs\n ):\n     \"\"\"Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n     defaults from the application.\n@@ -46,44 +45,41 @@ def make_test_environ_builder(\n         :class:`~werkzeug.test.EnvironBuilder`.\n     \"\"\"\n \n-    assert (\n-        not (base_url or subdomain or url_scheme)\n-        or (base_url is not None) != bool(subdomain or url_scheme)\n+    assert not (base_url or subdomain or url_scheme) or (base_url is not None) != bool(\n+        subdomain or url_scheme\n     ), 'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n \n     if base_url is None:\n-        http_host = app.config.get('SERVER_NAME') or 'localhost'\n-        app_root = app.config['APPLICATION_ROOT']\n+        http_host = app.config.get(\"SERVER_NAME\") or \"localhost\"\n+        app_root = app.config[\"APPLICATION_ROOT\"]\n \n         if subdomain:\n-            http_host = '{0}.{1}'.format(subdomain, http_host)\n+            http_host = \"{0}.{1}\".format(subdomain, http_host)\n \n         if url_scheme is None:\n-            url_scheme = app.config['PREFERRED_URL_SCHEME']\n+            url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n \n         url = url_parse(path)\n-        base_url = '{scheme}://{netloc}/{path}'.format(\n+        base_url = \"{scheme}://{netloc}/{path}\".format(\n             scheme=url.scheme or url_scheme,\n             netloc=url.netloc or http_host,\n-            path=app_root.lstrip('/')\n+            path=app_root.lstrip(\"/\"),\n         )\n         path = url.path\n \n         if url.query:\n-            sep = b'?' if isinstance(url.query, bytes) else '?'\n+            sep = b\"?\" if isinstance(url.query, bytes) else \"?\"\n             path += sep + url.query\n \n-    if 'json' in kwargs:\n-        assert 'data' not in kwargs, (\n-            \"Client cannot provide both 'json' and 'data'.\"\n-        )\n+    if \"json\" in kwargs:\n+        assert \"data\" not in kwargs, \"Client cannot provide both 'json' and 'data'.\"\n \n         # push a context so flask.json can use app's json attributes\n         with app.app_context():\n-            kwargs['data'] = json_dumps(kwargs.pop('json'))\n+            kwargs[\"data\"] = json_dumps(kwargs.pop(\"json\"))\n \n-        if 'content_type' not in kwargs:\n-            kwargs['content_type'] = 'application/json'\n+        if \"content_type\" not in kwargs:\n+            kwargs[\"content_type\"] = \"application/json\"\n \n     return EnvironBuilder(path, base_url, *args, **kwargs)\n \n@@ -109,7 +105,7 @@ class FlaskClient(Client):\n         super(FlaskClient, self).__init__(*args, **kwargs)\n         self.environ_base = {\n             \"REMOTE_ADDR\": \"127.0.0.1\",\n-            \"HTTP_USER_AGENT\": \"werkzeug/\" + werkzeug.__version__\n+            \"HTTP_USER_AGENT\": \"werkzeug/\" + werkzeug.__version__,\n         }\n \n     @contextmanager\n@@ -131,18 +127,20 @@ class FlaskClient(Client):\n         passed through.\n         \"\"\"\n         if self.cookie_jar is None:\n-            raise RuntimeError('Session transactions only make sense '\n-                               'with cookies enabled.')\n+            raise RuntimeError(\n+                \"Session transactions only make sense \" \"with cookies enabled.\"\n+            )\n         app = self.application\n-        environ_overrides = kwargs.setdefault('environ_overrides', {})\n+        environ_overrides = kwargs.setdefault(\"environ_overrides\", {})\n         self.cookie_jar.inject_wsgi(environ_overrides)\n         outer_reqctx = _request_ctx_stack.top\n         with app.test_request_context(*args, **kwargs) as c:\n             session_interface = app.session_interface\n             sess = session_interface.open_session(app, c.request)\n             if sess is None:\n-                raise RuntimeError('Session backend did not open a session. '\n-                                   'Check the configuration')\n+                raise RuntimeError(\n+                    \"Session backend did not open a session. \" \"Check the configuration\"\n+                )\n \n             # Since we have to open a new request context for the session\n             # handling we want to make sure that we hide out own context\n@@ -164,12 +162,13 @@ class FlaskClient(Client):\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n     def open(self, *args, **kwargs):\n-        as_tuple = kwargs.pop('as_tuple', False)\n-        buffered = kwargs.pop('buffered', False)\n-        follow_redirects = kwargs.pop('follow_redirects', False)\n+        as_tuple = kwargs.pop(\"as_tuple\", False)\n+        buffered = kwargs.pop(\"buffered\", False)\n+        follow_redirects = kwargs.pop(\"follow_redirects\", False)\n \n         if (\n-            not kwargs and len(args) == 1\n+            not kwargs\n+            and len(args) == 1\n             and isinstance(args[0], (EnvironBuilder, dict))\n         ):\n             environ = self.environ_base.copy()\n@@ -179,14 +178,13 @@ class FlaskClient(Client):\n             else:\n                 environ.update(args[0])\n \n-            environ['flask._preserve_context'] = self.preserve_context\n+            environ[\"flask._preserve_context\"] = self.preserve_context\n         else:\n-            kwargs.setdefault('environ_overrides', {}) \\\n-                ['flask._preserve_context'] = self.preserve_context\n-            kwargs.setdefault('environ_base', self.environ_base)\n-            builder = make_test_environ_builder(\n-                self.application, *args, **kwargs\n-            )\n+            kwargs.setdefault(\"environ_overrides\", {})[\n+                \"flask._preserve_context\"\n+            ] = self.preserve_context\n+            kwargs.setdefault(\"environ_base\", self.environ_base)\n+            builder = make_test_environ_builder(self.application, *args, **kwargs)\n \n             try:\n                 environ = builder.get_environ()\n@@ -194,15 +192,16 @@ class FlaskClient(Client):\n                 builder.close()\n \n         return Client.open(\n-            self, environ,\n+            self,\n+            environ,\n             as_tuple=as_tuple,\n             buffered=buffered,\n-            follow_redirects=follow_redirects\n+            follow_redirects=follow_redirects,\n         )\n \n     def __enter__(self):\n         if self.preserve_context:\n-            raise RuntimeError('Cannot nest client invocations')\n+            raise RuntimeError(\"Cannot nest client invocations\")\n         self.preserve_context = True\n         return self\n \n@@ -222,6 +221,7 @@ class FlaskCliRunner(CliRunner):\n     CLI commands. Typically created using\n     :meth:`~flask.Flask.test_cli_runner`. See :ref:`testing-cli`.\n     \"\"\"\n+\n     def __init__(self, app, **kwargs):\n         self.app = app\n         super(FlaskCliRunner, self).__init__(**kwargs)\n@@ -244,7 +244,7 @@ class FlaskCliRunner(CliRunner):\n         if cli is None:\n             cli = self.app.cli\n \n-        if 'obj' not in kwargs:\n-            kwargs['obj'] = ScriptInfo(create_app=lambda: self.app)\n+        if \"obj\" not in kwargs:\n+            kwargs[\"obj\"] = ScriptInfo(create_app=lambda: self.app)\n \n         return super(FlaskCliRunner, self).invoke(cli, args, **kwargs)\n\n@@ -13,8 +13,9 @@ from .globals import request\n from ._compat import with_metaclass\n \n \n-http_method_funcs = frozenset(['get', 'post', 'head', 'options',\n-                               'delete', 'put', 'trace', 'patch'])\n+http_method_funcs = frozenset(\n+    [\"get\", \"post\", \"head\", \"options\", \"delete\", \"put\", \"trace\", \"patch\"]\n+)\n \n \n class View(object):\n@@ -83,6 +84,7 @@ class View(object):\n         The arguments passed to :meth:`as_view` are forwarded to the\n         constructor of the class.\n         \"\"\"\n+\n         def view(*args, **kwargs):\n             self = view.view_class(*class_args, **class_kwargs)\n             return self.dispatch_request(*args, **kwargs)\n@@ -115,7 +117,7 @@ class MethodViewType(type):\n     def __init__(cls, name, bases, d):\n         super(MethodViewType, cls).__init__(name, bases, d)\n \n-        if 'methods' not in d:\n+        if \"methods\" not in d:\n             methods = set()\n \n             for key in http_method_funcs:\n@@ -151,8 +153,8 @@ class MethodView(with_metaclass(MethodViewType, View)):\n \n         # If the request method is HEAD and we don't have a handler for it\n         # retry with GET.\n-        if meth is None and request.method == 'HEAD':\n-            meth = getattr(self, 'get', None)\n+        if meth is None and request.method == \"HEAD\":\n+            meth = getattr(self, \"get\", None)\n \n-        assert meth is not None, 'Unimplemented method %r' % request.method\n+        assert meth is not None, \"Unimplemented method %r\" % request.method\n         return meth(*args, **kwargs)\n\n@@ -34,8 +34,9 @@ class JSONMixin(object):\n         \"\"\"\n         mt = self.mimetype\n         return (\n-            mt == 'application/json'\n-            or (mt.startswith('application/')) and mt.endswith('+json')\n+            mt == \"application/json\"\n+            or (mt.startswith(\"application/\"))\n+            and mt.endswith(\"+json\")\n         )\n \n     @property\n@@ -103,7 +104,7 @@ class JSONMixin(object):\n         .. versionadded:: 0.8\n         \"\"\"\n         if current_app is not None and current_app.debug:\n-            raise BadRequest('Failed to decode JSON object: {0}'.format(e))\n+            raise BadRequest(\"Failed to decode JSON object: {0}\".format(e))\n \n         raise BadRequest()\n \n@@ -146,7 +147,7 @@ class Request(RequestBase, JSONMixin):\n     def max_content_length(self):\n         \"\"\"Read-only view of the ``MAX_CONTENT_LENGTH`` config key.\"\"\"\n         if current_app:\n-            return current_app.config['MAX_CONTENT_LENGTH']\n+            return current_app.config[\"MAX_CONTENT_LENGTH\"]\n \n     @property\n     def endpoint(self):\n@@ -161,8 +162,8 @@ class Request(RequestBase, JSONMixin):\n     @property\n     def blueprint(self):\n         \"\"\"The name of the current blueprint\"\"\"\n-        if self.url_rule and '.' in self.url_rule.endpoint:\n-            return self.url_rule.endpoint.rsplit('.', 1)[0]\n+        if self.url_rule and \".\" in self.url_rule.endpoint:\n+            return self.url_rule.endpoint.rsplit(\".\", 1)[0]\n \n     def _load_form_data(self):\n         RequestBase._load_form_data(self)\n@@ -172,10 +173,11 @@ class Request(RequestBase, JSONMixin):\n         if (\n             current_app\n             and current_app.debug\n-            and self.mimetype != 'multipart/form-data'\n+            and self.mimetype != \"multipart/form-data\"\n             and not self.files\n         ):\n             from .debughelpers import attach_enctype_error_multidict\n+\n             attach_enctype_error_multidict(self)\n \n \n@@ -197,7 +199,7 @@ class Response(ResponseBase, JSONMixin):\n         Added :attr:`max_cookie_size`.\n     \"\"\"\n \n-    default_mimetype = 'text/html'\n+    default_mimetype = \"text/html\"\n \n     def _get_data_for_json(self, cache):\n         return self.get_data()\n@@ -210,7 +212,7 @@ class Response(ResponseBase, JSONMixin):\n         Werkzeug's docs.\n         \"\"\"\n         if current_app:\n-            return current_app.config['MAX_COOKIE_SIZE']\n+            return current_app.config[\"MAX_COOKIE_SIZE\"]\n \n         # return Werkzeug's default when not in an app context\n         return super(Response, self).max_cookie_size\n\n@@ -7,21 +7,21 @@ import sys\n from datetime import date, datetime\n from subprocess import PIPE, Popen\n \n-_date_strip_re = re.compile(r'(?<=\\d)(st|nd|rd|th)')\n+_date_strip_re = re.compile(r\"(?<=\\d)(st|nd|rd|th)\")\n \n \n def parse_changelog():\n-    with open('CHANGES.rst') as f:\n+    with open(\"CHANGES.rst\") as f:\n         lineiter = iter(f)\n         for line in lineiter:\n-            match = re.search('^Version\\s+(.*)', line.strip())\n+            match = re.search(\"^Version\\s+(.*)\", line.strip())\n \n             if match is None:\n                 continue\n \n             version = match.group(1).strip()\n \n-            if next(lineiter).count('-') != len(match.group(0)):\n+            if next(lineiter).count(\"-\") != len(match.group(0)):\n                 continue\n \n             while 1:\n@@ -31,9 +31,9 @@ def parse_changelog():\n                     break\n \n             match = re.search(\n-                r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)(?:, codename (.*))?',\n+                r\"released on (\\w+\\s+\\d+\\w+\\s+\\d+)(?:, codename (.*))?\",\n                 change_info,\n-                flags=re.IGNORECASE\n+                flags=re.IGNORECASE,\n             )\n \n             if match is None:\n@@ -45,17 +45,17 @@ def parse_changelog():\n \n def bump_version(version):\n     try:\n-        parts = [int(i) for i in version.split('.')]\n+        parts = [int(i) for i in version.split(\".\")]\n     except ValueError:\n-        fail('Current version is not numeric')\n+        fail(\"Current version is not numeric\")\n \n     parts[-1] += 1\n-    return '.'.join(map(str, parts))\n+    return \".\".join(map(str, parts))\n \n \n def parse_date(string):\n-    string = _date_strip_re.sub('', string)\n-    return datetime.strptime(string, '%B %d %Y')\n+    string = _date_strip_re.sub(\"\", string)\n+    return datetime.strptime(string, \"%B %d %Y\")\n \n \n def set_filename_version(filename, version_number, pattern):\n@@ -69,29 +69,30 @@ def set_filename_version(filename, version_number, pattern):\n     with open(filename) as f:\n         contents = re.sub(\n             r\"^(\\s*%s\\s*=\\s*')(.+?)(')\" % pattern,\n-            inject_version, f.read(),\n-            flags=re.DOTALL | re.MULTILINE\n+            inject_version,\n+            f.read(),\n+            flags=re.DOTALL | re.MULTILINE,\n         )\n \n     if not changed:\n-        fail('Could not find %s in %s', pattern, filename)\n+        fail(\"Could not find %s in %s\", pattern, filename)\n \n-    with open(filename, 'w') as f:\n+    with open(filename, \"w\") as f:\n         f.write(contents)\n \n \n def set_init_version(version):\n-    info('Setting __init__.py version to %s', version)\n-    set_filename_version('flask/__init__.py', version, '__version__')\n+    info(\"Setting __init__.py version to %s\", version)\n+    set_filename_version(\"flask/__init__.py\", version, \"__version__\")\n \n \n def build():\n-    cmd = [sys.executable, 'setup.py', 'sdist', 'bdist_wheel']\n+    cmd = [sys.executable, \"setup.py\", \"sdist\", \"bdist_wheel\"]\n     Popen(cmd).wait()\n \n \n def fail(message, *args):\n-    print('Error:', message % args, file=sys.stderr)\n+    print(\"Error:\", message % args, file=sys.stderr)\n     sys.exit(1)\n \n \n@@ -100,39 +101,39 @@ def info(message, *args):\n \n \n def get_git_tags():\n-    return set(\n-        Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines()\n-    )\n+    return set(Popen([\"git\", \"tag\"], stdout=PIPE).communicate()[0].splitlines())\n \n \n def git_is_clean():\n-    return Popen(['git', 'diff', '--quiet']).wait() == 0\n+    return Popen([\"git\", \"diff\", \"--quiet\"]).wait() == 0\n \n \n def make_git_commit(message, *args):\n     message = message % args\n-    Popen(['git', 'commit', '-am', message]).wait()\n+    Popen([\"git\", \"commit\", \"-am\", message]).wait()\n \n \n def make_git_tag(tag):\n     info('Tagging \"%s\"', tag)\n-    Popen(['git', 'tag', tag]).wait()\n+    Popen([\"git\", \"tag\", tag]).wait()\n \n \n def main():\n-    os.chdir(os.path.join(os.path.dirname(__file__), '..'))\n+    os.chdir(os.path.join(os.path.dirname(__file__), \"..\"))\n \n     rv = parse_changelog()\n \n     if rv is None:\n-        fail('Could not parse changelog')\n+        fail(\"Could not parse changelog\")\n \n     version, release_date, codename = rv\n-    dev_version = bump_version(version) + '.dev'\n+    dev_version = bump_version(version) + \".dev\"\n \n     info(\n-        'Releasing %s (codename %s, release date %s)',\n-        version, codename, release_date.strftime('%d/%m/%Y')\n+        \"Releasing %s (codename %s, release date %s)\",\n+        version,\n+        codename,\n+        release_date.strftime(\"%d/%m/%Y\"),\n     )\n     tags = get_git_tags()\n \n@@ -140,25 +141,22 @@ def main():\n         fail('Version \"%s\" is already tagged', version)\n \n     if release_date.date() != date.today():\n-        fail(\n-            'Release date is not today (%s != %s)',\n-            release_date.date(), date.today()\n-        )\n+        fail(\"Release date is not today (%s != %s)\", release_date.date(), date.today())\n \n     if not git_is_clean():\n-        fail('You have uncommitted changes in git')\n+        fail(\"You have uncommitted changes in git\")\n \n     try:\n         import wheel  # noqa: F401\n     except ImportError:\n-        fail('You need to install the wheel package.')\n+        fail(\"You need to install the wheel package.\")\n \n     set_init_version(version)\n-    make_git_commit('Bump version number to %s', version)\n+    make_git_commit(\"Bump version number to %s\", version)\n     make_git_tag(version)\n     build()\n     set_init_version(dev_version)\n \n \n-if __name__ == '__main__':\n+if __name__ == \"__main__\":\n     main()\n\n@@ -6,78 +6,72 @@ from collections import OrderedDict\n \n from setuptools import setup\n \n-with io.open('README.rst', 'rt', encoding='utf8') as f:\n+with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n-with io.open('flask/__init__.py', 'rt', encoding='utf8') as f:\n-    version = re.search(r'__version__ = \\'(.*?)\\'', f.read()).group(1)\n+with io.open(\"flask/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n+    version = re.search(r\"__version__ = \\\"(.*?)\\\"\", f.read()).group(1)\n \n setup(\n-    name='Flask',\n+    name=\"Flask\",\n     version=version,\n-    url='https://www.palletsprojects.com/p/flask/',\n-    project_urls=OrderedDict((\n-        ('Documentation', 'http://flask.pocoo.org/docs/'),\n-        ('Code', 'https://github.com/pallets/flask'),\n-        ('Issue tracker', 'https://github.com/pallets/flask/issues'),\n-    )),\n-    license='BSD',\n-    author='Armin Ronacher',\n-    author_email='armin.ronacher@active-4.com',\n-    maintainer='Pallets team',\n-    maintainer_email='contact@palletsprojects.com',\n-    description='A simple framework for building complex web applications.',\n+    url=\"https://www.palletsprojects.com/p/flask/\",\n+    project_urls=OrderedDict(\n+        (\n+            (\"Documentation\", \"http://flask.pocoo.org/docs/\"),\n+            (\"Code\", \"https://github.com/pallets/flask\"),\n+            (\"Issue tracker\", \"https://github.com/pallets/flask/issues\"),\n+        )\n+    ),\n+    license=\"BSD\",\n+    author=\"Armin Ronacher\",\n+    author_email=\"armin.ronacher@active-4.com\",\n+    maintainer=\"Pallets team\",\n+    maintainer_email=\"contact@palletsprojects.com\",\n+    description=\"A simple framework for building complex web applications.\",\n     long_description=readme,\n-    packages=['flask', 'flask.json'],\n+    packages=[\"flask\", \"flask.json\"],\n     include_package_data=True,\n     zip_safe=False,\n-    platforms='any',\n-    python_requires='>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*',\n+    platforms=\"any\",\n+    python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*\",\n     install_requires=[\n-        'Werkzeug>=0.14',\n-        'Jinja2>=2.10.1',\n-        'itsdangerous>=0.24',\n-        'click>=5.1',\n+        \"Werkzeug>=0.14\",\n+        \"Jinja2>=2.10.1\",\n+        \"itsdangerous>=0.24\",\n+        \"click>=5.1\",\n     ],\n     extras_require={\n-        'dotenv': ['python-dotenv'],\n-        'dev': [\n-            'pytest>=3',\n-            'coverage',\n-            'tox',\n-            'sphinx',\n-            'pallets-sphinx-themes',\n-            'sphinxcontrib-log-cabinet',\n+        \"dotenv\": [\"python-dotenv\"],\n+        \"dev\": [\n+            \"pytest>=3\",\n+            \"coverage\",\n+            \"tox\",\n+            \"sphinx\",\n+            \"pallets-sphinx-themes\",\n+            \"sphinxcontrib-log-cabinet\",\n         ],\n-        'docs': [\n-            'sphinx',\n-            'pallets-sphinx-themes',\n-            'sphinxcontrib-log-cabinet',\n-        ]\n+        \"docs\": [\"sphinx\", \"pallets-sphinx-themes\", \"sphinxcontrib-log-cabinet\"],\n     },\n     classifiers=[\n-        'Development Status :: 5 - Production/Stable',\n-        'Environment :: Web Environment',\n-        'Framework :: Flask',\n-        'Intended Audience :: Developers',\n-        'License :: OSI Approved :: BSD License',\n-        'Operating System :: OS Independent',\n-        'Programming Language :: Python',\n-        'Programming Language :: Python :: 2',\n-        'Programming Language :: Python :: 2.7',\n-        'Programming Language :: Python :: 3',\n-        'Programming Language :: Python :: 3.4',\n-        'Programming Language :: Python :: 3.5',\n-        'Programming Language :: Python :: 3.6',\n-        'Programming Language :: Python :: 3.7',\n-        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n-        'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',\n-        'Topic :: Software Development :: Libraries :: Application Frameworks',\n-        'Topic :: Software Development :: Libraries :: Python Modules',\n+        \"Development Status :: 5 - Production/Stable\",\n+        \"Environment :: Web Environment\",\n+        \"Framework :: Flask\",\n+        \"Intended Audience :: Developers\",\n+        \"License :: OSI Approved :: BSD License\",\n+        \"Operating System :: OS Independent\",\n+        \"Programming Language :: Python\",\n+        \"Programming Language :: Python :: 2\",\n+        \"Programming Language :: Python :: 2.7\",\n+        \"Programming Language :: Python :: 3\",\n+        \"Programming Language :: Python :: 3.4\",\n+        \"Programming Language :: Python :: 3.5\",\n+        \"Programming Language :: Python :: 3.6\",\n+        \"Programming Language :: Python :: 3.7\",\n+        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n+        \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n+        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n+        \"Topic :: Software Development :: Libraries :: Python Modules\",\n     ],\n-    entry_points={\n-        'console_scripts': [\n-            'flask = flask.cli:main',\n-        ],\n-    },\n+    entry_points={\"console_scripts\": [\"flask = flask.cli:main\"]},\n )\n\n@@ -20,7 +20,7 @@ import flask\n from flask import Flask as _Flask\n \n \n-@pytest.fixture(scope='session', autouse=True)\n+@pytest.fixture(scope=\"session\", autouse=True)\n def _standard_os_environ():\n     \"\"\"Set up ``os.environ`` at the start of the test session to have\n     standard values. Returns a list of operations that is used by\n@@ -28,11 +28,11 @@ def _standard_os_environ():\n     \"\"\"\n     mp = monkeypatch.MonkeyPatch()\n     out = (\n-        (os.environ, 'FLASK_APP', monkeypatch.notset),\n-        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n-        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n-        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n-        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n+        (os.environ, \"FLASK_APP\", monkeypatch.notset),\n+        (os.environ, \"FLASK_ENV\", monkeypatch.notset),\n+        (os.environ, \"FLASK_DEBUG\", monkeypatch.notset),\n+        (os.environ, \"FLASK_RUN_FROM_CLI\", monkeypatch.notset),\n+        (os.environ, \"WERKZEUG_RUN_MAIN\", monkeypatch.notset),\n     )\n \n     for _, key, value in out:\n@@ -55,12 +55,12 @@ def _reset_os_environ(monkeypatch, _standard_os_environ):\n \n class Flask(_Flask):\n     testing = True\n-    secret_key = 'test key'\n+    secret_key = \"test key\"\n \n \n @pytest.fixture\n def app():\n-    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n+    app = Flask(\"flask_test\", root_path=os.path.dirname(__file__))\n     return app\n \n \n@@ -84,8 +84,7 @@ def client(app):\n @pytest.fixture\n def test_apps(monkeypatch):\n     monkeypatch.syspath_prepend(\n-        os.path.abspath(os.path.join(\n-            os.path.dirname(__file__), 'test_apps'))\n+        os.path.abspath(os.path.join(os.path.dirname(__file__), \"test_apps\"))\n     )\n \n \n@@ -120,8 +119,8 @@ def limit_loader(request, monkeypatch):\n             self.loader = loader\n \n         def __getattr__(self, name):\n-            if name in ('archive', 'get_filename'):\n-                msg = 'Mocking a loader which does not have `%s.`' % name\n+            if name in (\"archive\", \"get_filename\"):\n+                msg = \"Mocking a loader which does not have `%s.`\" % name\n                 raise AttributeError(msg)\n             return getattr(self.loader, name)\n \n@@ -130,30 +129,31 @@ def limit_loader(request, monkeypatch):\n     def get_loader(*args, **kwargs):\n         return LimitedLoader(old_get_loader(*args, **kwargs))\n \n-    monkeypatch.setattr(pkgutil, 'get_loader', get_loader)\n+    monkeypatch.setattr(pkgutil, \"get_loader\", get_loader)\n \n \n @pytest.fixture\n def modules_tmpdir(tmpdir, monkeypatch):\n     \"\"\"A tmpdir added to sys.path.\"\"\"\n-    rv = tmpdir.mkdir('modules_tmpdir')\n+    rv = tmpdir.mkdir(\"modules_tmpdir\")\n     monkeypatch.syspath_prepend(str(rv))\n     return rv\n \n \n @pytest.fixture\n def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n-    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n+    monkeypatch.setattr(sys, \"prefix\", str(modules_tmpdir))\n     return modules_tmpdir\n \n \n @pytest.fixture\n def site_packages(modules_tmpdir, monkeypatch):\n     \"\"\"Create a fake site-packages.\"\"\"\n-    rv = modules_tmpdir \\\n-        .mkdir('lib') \\\n-        .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info)) \\\n-        .mkdir('site-packages')\n+    rv = (\n+        modules_tmpdir.mkdir(\"lib\")\n+        .mkdir(\"python{x[0]}.{x[1]}\".format(x=sys.version_info))\n+        .mkdir(\"site-packages\")\n+    )\n     monkeypatch.syspath_prepend(str(rv))\n     return rv\n \n@@ -167,23 +167,29 @@ def install_egg(modules_tmpdir, monkeypatch):\n         if not isinstance(name, str):\n             raise ValueError(name)\n         base.join(name).ensure_dir()\n-        base.join(name).join('__init__.py').ensure()\n+        base.join(name).join(\"__init__.py\").ensure()\n \n-        egg_setup = base.join('setup.py')\n-        egg_setup.write(textwrap.dedent(\"\"\"\n+        egg_setup = base.join(\"setup.py\")\n+        egg_setup.write(\n+            textwrap.dedent(\n+                \"\"\"\n         from setuptools import setup\n         setup(name='{0}',\n               version='1.0',\n               packages=['site_egg'],\n               zip_safe=True)\n-        \"\"\".format(name)))\n+        \"\"\".format(\n+                    name\n+                )\n+            )\n+        )\n \n         import subprocess\n+\n         subprocess.check_call(\n-            [sys.executable, 'setup.py', 'bdist_egg'],\n-            cwd=str(modules_tmpdir)\n+            [sys.executable, \"setup.py\", \"bdist_egg\"], cwd=str(modules_tmpdir)\n         )\n-        egg_path, = modules_tmpdir.join('dist/').listdir()\n+        egg_path, = modules_tmpdir.join(\"dist/\").listdir()\n         monkeypatch.syspath_prepend(str(egg_path))\n         return egg_path\n \n@@ -202,4 +208,4 @@ def purge_module(request):\n def catch_deprecation_warnings(recwarn):\n     yield\n     gc.collect()\n-    assert not recwarn.list, '\\n'.join(str(w.message) for w in recwarn.list)\n+    assert not recwarn.list, \"\\n\".join(str(w.message) for w in recwarn.list)\n\n@@ -15,27 +15,27 @@ import flask\n \n \n def test_basic_url_generation(app):\n-    app.config['SERVER_NAME'] = 'localhost'\n-    app.config['PREFERRED_URL_SCHEME'] = 'https'\n+    app.config[\"SERVER_NAME\"] = \"localhost\"\n+    app.config[\"PREFERRED_URL_SCHEME\"] = \"https\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         pass\n \n     with app.app_context():\n-        rv = flask.url_for('index')\n-        assert rv == 'https://localhost/'\n+        rv = flask.url_for(\"index\")\n+        assert rv == \"https://localhost/\"\n \n \n def test_url_generation_requires_server_name(app):\n     with app.app_context():\n         with pytest.raises(RuntimeError):\n-            flask.url_for('index')\n+            flask.url_for(\"index\")\n \n \n def test_url_generation_without_context_fails():\n     with pytest.raises(RuntimeError):\n-        flask.url_for('index')\n+        flask.url_for(\"index\")\n \n \n def test_request_context_means_app_context(app):\n@@ -71,7 +71,7 @@ def test_app_tearing_down_with_previous_exception(app):\n         cleanup_stuff.append(exception)\n \n     try:\n-        raise Exception('dummy')\n+        raise Exception(\"dummy\")\n     except Exception:\n         pass\n \n@@ -90,7 +90,7 @@ def test_app_tearing_down_with_handled_exception_by_except_block(app):\n \n     with app.app_context():\n         try:\n-            raise Exception('dummy')\n+            raise Exception(\"dummy\")\n         except Exception:\n             pass\n \n@@ -98,67 +98,67 @@ def test_app_tearing_down_with_handled_exception_by_except_block(app):\n \n \n def test_app_tearing_down_with_handled_exception_by_app_handler(app, client):\n-    app.config['PROPAGATE_EXCEPTIONS'] = True\n+    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n     cleanup_stuff = []\n \n     @app.teardown_appcontext\n     def cleanup(exception):\n         cleanup_stuff.append(exception)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        raise Exception('dummy')\n+        raise Exception(\"dummy\")\n \n     @app.errorhandler(Exception)\n     def handler(f):\n         return flask.jsonify(str(f))\n \n     with app.app_context():\n-        client.get('/')\n+        client.get(\"/\")\n \n     assert cleanup_stuff == [None]\n \n \n def test_app_tearing_down_with_unhandled_exception(app, client):\n-    app.config['PROPAGATE_EXCEPTIONS'] = True\n+    app.config[\"PROPAGATE_EXCEPTIONS\"] = True\n     cleanup_stuff = []\n \n     @app.teardown_appcontext\n     def cleanup(exception):\n         cleanup_stuff.append(exception)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        raise Exception('dummy')\n+        raise Exception(\"dummy\")\n \n     with pytest.raises(Exception):\n         with app.app_context():\n-            client.get('/')\n+            client.get(\"/\")\n \n     assert len(cleanup_stuff) == 1\n     assert isinstance(cleanup_stuff[0], Exception)\n-    assert str(cleanup_stuff[0]) == 'dummy'\n+    assert str(cleanup_stuff[0]) == \"dummy\"\n \n \n def test_app_ctx_globals_methods(app, app_ctx):\n     # get\n-    assert flask.g.get('foo') is None\n-    assert flask.g.get('foo', 'bar') == 'bar'\n+    assert flask.g.get(\"foo\") is None\n+    assert flask.g.get(\"foo\", \"bar\") == \"bar\"\n     # __contains__\n-    assert 'foo' not in flask.g\n-    flask.g.foo = 'bar'\n-    assert 'foo' in flask.g\n+    assert \"foo\" not in flask.g\n+    flask.g.foo = \"bar\"\n+    assert \"foo\" in flask.g\n     # setdefault\n-    flask.g.setdefault('bar', 'the cake is a lie')\n-    flask.g.setdefault('bar', 'hello world')\n-    assert flask.g.bar == 'the cake is a lie'\n+    flask.g.setdefault(\"bar\", \"the cake is a lie\")\n+    flask.g.setdefault(\"bar\", \"hello world\")\n+    assert flask.g.bar == \"the cake is a lie\"\n     # pop\n-    assert flask.g.pop('bar') == 'the cake is a lie'\n+    assert flask.g.pop(\"bar\") == \"the cake is a lie\"\n     with pytest.raises(KeyError):\n-        flask.g.pop('bar')\n-    assert flask.g.pop('bar', 'more cake') == 'more cake'\n+        flask.g.pop(\"bar\")\n+    assert flask.g.pop(\"bar\", \"more cake\") == \"more cake\"\n     # __iter__\n-    assert list(flask.g) == ['foo']\n+    assert list(flask.g) == [\"foo\"]\n     # __repr__\n     assert repr(flask.g) == \"<flask.g of 'flask_test'>\"\n \n@@ -166,11 +166,11 @@ def test_app_ctx_globals_methods(app, app_ctx):\n def test_custom_app_ctx_globals_class(app):\n     class CustomRequestGlobals(object):\n         def __init__(self):\n-            self.spam = 'eggs'\n+            self.spam = \"eggs\"\n \n     app.app_ctx_globals_class = CustomRequestGlobals\n     with app.app_context():\n-        assert flask.render_template_string('{{ g.spam }}') == 'eggs'\n+        assert flask.render_template_string(\"{{ g.spam }}\") == \"eggs\"\n \n \n def test_context_refcounts(app, client):\n@@ -178,25 +178,25 @@ def test_context_refcounts(app, client):\n \n     @app.teardown_request\n     def teardown_req(error=None):\n-        called.append('request')\n+        called.append(\"request\")\n \n     @app.teardown_appcontext\n     def teardown_app(error=None):\n-        called.append('app')\n+        called.append(\"app\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         with flask._app_ctx_stack.top:\n             with flask._request_ctx_stack.top:\n                 pass\n         env = flask._request_ctx_stack.top.request.environ\n-        assert env['werkzeug.request'] is not None\n-        return u''\n+        assert env[\"werkzeug.request\"] is not None\n+        return u\"\"\n \n-    res = client.get('/')\n+    res = client.get(\"/\")\n     assert res.status_code == 200\n-    assert res.data == b''\n-    assert called == ['request', 'app']\n+    assert res.data == b\"\"\n+    assert called == [\"request\", \"app\"]\n \n \n def test_clean_pop(app):\n@@ -209,7 +209,7 @@ def test_clean_pop(app):\n \n     @app.teardown_appcontext\n     def teardown_app(error=None):\n-        called.append('TEARDOWN')\n+        called.append(\"TEARDOWN\")\n \n     try:\n         with app.test_request_context():\n@@ -217,5 +217,5 @@ def test_clean_pop(app):\n     except ZeroDivisionError:\n         pass\n \n-    assert called == ['flask_test', 'TEARDOWN']\n+    assert called == [\"flask_test\", \"TEARDOWN\"]\n     assert not flask.current_app\n\n@@ -1,8 +1,9 @@\n from flask import Flask\n \n app = Flask(__name__)\n-app.config['DEBUG'] = True\n+app.config[\"DEBUG\"] = True\n from blueprintapp.apps.admin import admin\n from blueprintapp.apps.frontend import frontend\n+\n app.register_blueprint(admin)\n app.register_blueprint(frontend)\n\n@@ -1,15 +1,19 @@\n from flask import Blueprint, render_template\n \n-admin = Blueprint('admin', __name__, url_prefix='/admin',\n-                  template_folder='templates',\n-                  static_folder='static')\n+admin = Blueprint(\n+    \"admin\",\n+    __name__,\n+    url_prefix=\"/admin\",\n+    template_folder=\"templates\",\n+    static_folder=\"static\",\n+)\n \n \n-@admin.route('/')\n+@admin.route(\"/\")\n def index():\n-    return render_template('admin/index.html')\n+    return render_template(\"admin/index.html\")\n \n \n-@admin.route('/index2')\n+@admin.route(\"/index2\")\n def index2():\n-    return render_template('./admin/index.html')\n+    return render_template(\"./admin/index.html\")\n\n@@ -1,13 +1,13 @@\n from flask import Blueprint, render_template\n \n-frontend = Blueprint('frontend', __name__, template_folder='templates')\n+frontend = Blueprint(\"frontend\", __name__, template_folder=\"templates\")\n \n \n-@frontend.route('/')\n+@frontend.route(\"/\")\n def index():\n-    return render_template('frontend/index.html')\n+    return render_template(\"frontend/index.html\")\n \n \n-@frontend.route('/missing')\n+@frontend.route(\"/missing\")\n def missing_template():\n-    return render_template('missing_template.html')\n+    return render_template(\"missing_template.html\")\n\n@@ -2,4 +2,4 @@ from __future__ import absolute_import, print_function\n \n from flask import Flask\n \n-testapp = Flask('testapp')\n+testapp = Flask(\"testapp\")\n\n@@ -4,15 +4,15 @@ from flask import Flask\n \n \n def create_app():\n-    return Flask('app')\n+    return Flask(\"app\")\n \n \n def create_app2(foo, bar):\n-    return Flask('_'.join(['app2', foo, bar]))\n+    return Flask(\"_\".join([\"app2\", foo, bar]))\n \n \n def create_app3(foo, script_info):\n-    return Flask('_'.join(['app3', foo, script_info.data['test']]))\n+    return Flask(\"_\".join([\"app3\", foo, script_info.data[\"test\"]]))\n \n \n def no_app():\n\n@@ -4,4 +4,4 @@ from flask import Flask\n \n raise ImportError()\n \n-testapp = Flask('testapp')\n+testapp = Flask(\"testapp\")\n\n@@ -2,5 +2,5 @@ from __future__ import absolute_import, print_function\n \n from flask import Flask\n \n-app1 = Flask('app1')\n-app2 = Flask('app2')\n+app1 = Flask(\"app1\")\n+app2 = Flask(\"app2\")\n\n@@ -1,6 +1,8 @@\n from flask import Flask\n+\n app = Flask(__name__)\n \n+\n @app.route(\"/\")\n def hello():\n     return \"Hello World!\"\n\n@@ -1,4 +1,4 @@\n from flask import Module\n \n \n-mod = Module(__name__, 'foo', subdomain='foo')\n+mod = Module(__name__, \"foo\", subdomain=\"foo\")\n\n@@ -26,48 +26,48 @@ from flask._compat import text_type\n \n \n def test_options_work(app, client):\n-    @app.route('/', methods=['GET', 'POST'])\n+    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n     def index():\n-        return 'Hello World'\n+        return \"Hello World\"\n \n-    rv = client.open('/', method='OPTIONS')\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-    assert rv.data == b''\n+    rv = client.open(\"/\", method=\"OPTIONS\")\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n+    assert rv.data == b\"\"\n \n \n def test_options_on_multiple_rules(app, client):\n-    @app.route('/', methods=['GET', 'POST'])\n+    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n     def index():\n-        return 'Hello World'\n+        return \"Hello World\"\n \n-    @app.route('/', methods=['PUT'])\n+    @app.route(\"/\", methods=[\"PUT\"])\n     def index_put():\n-        return 'Aha!'\n+        return \"Aha!\"\n \n-    rv = client.open('/', method='OPTIONS')\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n+    rv = client.open(\"/\", method=\"OPTIONS\")\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"]\n \n \n def test_provide_automatic_options_attr():\n     app = flask.Flask(__name__)\n \n     def index():\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n     index.provide_automatic_options = False\n-    app.route('/')(index)\n-    rv = app.test_client().open('/', method='OPTIONS')\n+    app.route(\"/\")(index)\n+    rv = app.test_client().open(\"/\", method=\"OPTIONS\")\n     assert rv.status_code == 405\n \n     app = flask.Flask(__name__)\n \n     def index2():\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n     index2.provide_automatic_options = True\n-    app.route('/', methods=['OPTIONS'])(index2)\n-    rv = app.test_client().open('/', method='OPTIONS')\n-    assert sorted(rv.allow) == ['OPTIONS']\n+    app.route(\"/\", methods=[\"OPTIONS\"])(index2)\n+    rv = app.test_client().open(\"/\", method=\"OPTIONS\")\n+    assert sorted(rv.allow) == [\"OPTIONS\"]\n \n \n def test_provide_automatic_options_kwarg(app, client):\n@@ -77,69 +77,72 @@ def test_provide_automatic_options_kwarg(app, client):\n     def more():\n         return flask.request.method\n \n-    app.add_url_rule('/', view_func=index, provide_automatic_options=False)\n+    app.add_url_rule(\"/\", view_func=index, provide_automatic_options=False)\n     app.add_url_rule(\n-        '/more', view_func=more, methods=['GET', 'POST'],\n-        provide_automatic_options=False\n+        \"/more\",\n+        view_func=more,\n+        methods=[\"GET\", \"POST\"],\n+        provide_automatic_options=False,\n     )\n-    assert client.get('/').data == b'GET'\n+    assert client.get(\"/\").data == b\"GET\"\n \n-    rv = client.post('/')\n+    rv = client.post(\"/\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD']\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\"]\n \n     # Older versions of Werkzeug.test.Client don't have an options method\n-    if hasattr(client, 'options'):\n-        rv = client.options('/')\n+    if hasattr(client, \"options\"):\n+        rv = client.options(\"/\")\n     else:\n-        rv = client.open('/', method='OPTIONS')\n+        rv = client.open(\"/\", method=\"OPTIONS\")\n \n     assert rv.status_code == 405\n \n-    rv = client.head('/')\n+    rv = client.head(\"/\")\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert client.post('/more').data == b'POST'\n-    assert client.get('/more').data == b'GET'\n+    assert client.post(\"/more\").data == b\"POST\"\n+    assert client.get(\"/more\").data == b\"GET\"\n \n-    rv = client.delete('/more')\n+    rv = client.delete(\"/more\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"POST\"]\n \n-    if hasattr(client, 'options'):\n-        rv = client.options('/more')\n+    if hasattr(client, \"options\"):\n+        rv = client.options(\"/more\")\n     else:\n-        rv = client.open('/more', method='OPTIONS')\n+        rv = client.open(\"/more\", method=\"OPTIONS\")\n \n     assert rv.status_code == 405\n \n \n def test_request_dispatching(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.request.method\n \n-    @app.route('/more', methods=['GET', 'POST'])\n+    @app.route(\"/more\", methods=[\"GET\", \"POST\"])\n     def more():\n         return flask.request.method\n \n-    assert client.get('/').data == b'GET'\n-    rv = client.post('/')\n+    assert client.get(\"/\").data == b\"GET\"\n+    rv = client.post(\"/\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-    rv = client.head('/')\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n+    rv = client.head(\"/\")\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert client.post('/more').data == b'POST'\n-    assert client.get('/more').data == b'GET'\n-    rv = client.delete('/more')\n+    assert client.post(\"/more\").data == b\"POST\"\n+    assert client.get(\"/more\").data == b\"GET\"\n+    rv = client.delete(\"/more\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n \n \n def test_disallow_string_for_allowed_methods(app):\n     with pytest.raises(TypeError):\n-        @app.route('/', methods='GET POST')\n+\n+        @app.route(\"/\", methods=\"GET POST\")\n         def index():\n             return \"Hey\"\n \n@@ -156,136 +159,129 @@ def test_url_mapping(app, client):\n     def options():\n         return random_uuid4\n \n-    app.add_url_rule('/', 'index', index)\n-    app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n+    app.add_url_rule(\"/\", \"index\", index)\n+    app.add_url_rule(\"/more\", \"more\", more, methods=[\"GET\", \"POST\"])\n \n     # Issue 1288: Test that automatic options are not added when non-uppercase 'options' in methods\n-    app.add_url_rule('/options', 'options', options, methods=['options'])\n+    app.add_url_rule(\"/options\", \"options\", options, methods=[\"options\"])\n \n-    assert client.get('/').data == b'GET'\n-    rv = client.post('/')\n+    assert client.get(\"/\").data == b\"GET\"\n+    rv = client.post(\"/\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-    rv = client.head('/')\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n+    rv = client.head(\"/\")\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert client.post('/more').data == b'POST'\n-    assert client.get('/more').data == b'GET'\n-    rv = client.delete('/more')\n+    assert client.post(\"/more\").data == b\"POST\"\n+    assert client.get(\"/more\").data == b\"GET\"\n+    rv = client.delete(\"/more\")\n     assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-    rv = client.open('/options', method='OPTIONS')\n+    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n+    rv = client.open(\"/options\", method=\"OPTIONS\")\n     assert rv.status_code == 200\n     assert random_uuid4 in rv.data.decode(\"utf-8\")\n \n \n def test_werkzeug_routing(app, client):\n     from werkzeug.routing import Submount, Rule\n-    app.url_map.add(Submount('/foo', [\n-        Rule('/bar', endpoint='bar'),\n-        Rule('/', endpoint='index')\n-    ]))\n+\n+    app.url_map.add(\n+        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n+    )\n \n     def bar():\n-        return 'bar'\n+        return \"bar\"\n \n     def index():\n-        return 'index'\n+        return \"index\"\n \n-    app.view_functions['bar'] = bar\n-    app.view_functions['index'] = index\n+    app.view_functions[\"bar\"] = bar\n+    app.view_functions[\"index\"] = index\n \n-    assert client.get('/foo/').data == b'index'\n-    assert client.get('/foo/bar').data == b'bar'\n+    assert client.get(\"/foo/\").data == b\"index\"\n+    assert client.get(\"/foo/bar\").data == b\"bar\"\n \n \n def test_endpoint_decorator(app, client):\n     from werkzeug.routing import Submount, Rule\n-    app.url_map.add(Submount('/foo', [\n-        Rule('/bar', endpoint='bar'),\n-        Rule('/', endpoint='index')\n-    ]))\n \n-    @app.endpoint('bar')\n+    app.url_map.add(\n+        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n+    )\n+\n+    @app.endpoint(\"bar\")\n     def bar():\n-        return 'bar'\n+        return \"bar\"\n \n-    @app.endpoint('index')\n+    @app.endpoint(\"index\")\n     def index():\n-        return 'index'\n+        return \"index\"\n \n-    assert client.get('/foo/').data == b'index'\n-    assert client.get('/foo/bar').data == b'bar'\n+    assert client.get(\"/foo/\").data == b\"index\"\n+    assert client.get(\"/foo/bar\").data == b\"bar\"\n \n \n def test_session(app, client):\n-    @app.route('/set', methods=['POST'])\n+    @app.route(\"/set\", methods=[\"POST\"])\n     def set():\n         assert not flask.session.accessed\n         assert not flask.session.modified\n-        flask.session['value'] = flask.request.form['value']\n+        flask.session[\"value\"] = flask.request.form[\"value\"]\n         assert flask.session.accessed\n         assert flask.session.modified\n-        return 'value set'\n+        return \"value set\"\n \n-    @app.route('/get')\n+    @app.route(\"/get\")\n     def get():\n         assert not flask.session.accessed\n         assert not flask.session.modified\n-        v = flask.session.get('value', 'None')\n+        v = flask.session.get(\"value\", \"None\")\n         assert flask.session.accessed\n         assert not flask.session.modified\n         return v\n \n-    assert client.post('/set', data={'value': '42'}).data == b'value set'\n-    assert client.get('/get').data == b'42'\n+    assert client.post(\"/set\", data={\"value\": \"42\"}).data == b\"value set\"\n+    assert client.get(\"/get\").data == b\"42\"\n \n \n def test_session_using_server_name(app, client):\n-    app.config.update(\n-        SERVER_NAME='example.com'\n-    )\n+    app.config.update(SERVER_NAME=\"example.com\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    rv = client.get('/', 'http://example.com/')\n-    assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-    assert 'httponly' in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://example.com/\")\n+    assert \"domain=.example.com\" in rv.headers[\"set-cookie\"].lower()\n+    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n \n \n def test_session_using_server_name_and_port(app, client):\n-    app.config.update(\n-        SERVER_NAME='example.com:8080'\n-    )\n+    app.config.update(SERVER_NAME=\"example.com:8080\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    rv = client.get('/', 'http://example.com:8080/')\n-    assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-    assert 'httponly' in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://example.com:8080/\")\n+    assert \"domain=.example.com\" in rv.headers[\"set-cookie\"].lower()\n+    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n \n \n def test_session_using_server_name_port_and_path(app, client):\n-    app.config.update(\n-        SERVER_NAME='example.com:8080',\n-        APPLICATION_ROOT='/foo'\n-    )\n+    app.config.update(SERVER_NAME=\"example.com:8080\", APPLICATION_ROOT=\"/foo\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    rv = client.get('/', 'http://example.com:8080/foo')\n-    assert 'domain=example.com' in rv.headers['set-cookie'].lower()\n-    assert 'path=/foo' in rv.headers['set-cookie'].lower()\n-    assert 'httponly' in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://example.com:8080/foo\")\n+    assert \"domain=example.com\" in rv.headers[\"set-cookie\"].lower()\n+    assert \"path=/foo\" in rv.headers[\"set-cookie\"].lower()\n+    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n \n \n def test_session_using_application_root(app, client):\n@@ -295,105 +291,99 @@ def test_session_using_application_root(app, client):\n             self.prefix = prefix\n \n         def __call__(self, environ, start_response):\n-            environ['SCRIPT_NAME'] = self.prefix\n+            environ[\"SCRIPT_NAME\"] = self.prefix\n             return self.app(environ, start_response)\n \n-    app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, '/bar')\n-    app.config.update(\n-        APPLICATION_ROOT='/bar'\n-    )\n+    app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, \"/bar\")\n+    app.config.update(APPLICATION_ROOT=\"/bar\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    rv = client.get('/', 'http://example.com:8080/')\n-    assert 'path=/bar' in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://example.com:8080/\")\n+    assert \"path=/bar\" in rv.headers[\"set-cookie\"].lower()\n \n \n def test_session_using_session_settings(app, client):\n     app.config.update(\n-        SERVER_NAME='www.example.com:8080',\n-        APPLICATION_ROOT='/test',\n-        SESSION_COOKIE_DOMAIN='.example.com',\n+        SERVER_NAME=\"www.example.com:8080\",\n+        APPLICATION_ROOT=\"/test\",\n+        SESSION_COOKIE_DOMAIN=\".example.com\",\n         SESSION_COOKIE_HTTPONLY=False,\n         SESSION_COOKIE_SECURE=True,\n-        SESSION_COOKIE_SAMESITE='Lax',\n-        SESSION_COOKIE_PATH='/'\n+        SESSION_COOKIE_SAMESITE=\"Lax\",\n+        SESSION_COOKIE_PATH=\"/\",\n     )\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    rv = client.get('/', 'http://www.example.com:8080/test/')\n-    cookie = rv.headers['set-cookie'].lower()\n-    assert 'domain=.example.com' in cookie\n-    assert 'path=/' in cookie\n-    assert 'secure' in cookie\n-    assert 'httponly' not in cookie\n-    assert 'samesite' in cookie\n+    rv = client.get(\"/\", \"http://www.example.com:8080/test/\")\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    assert \"domain=.example.com\" in cookie\n+    assert \"path=/\" in cookie\n+    assert \"secure\" in cookie\n+    assert \"httponly\" not in cookie\n+    assert \"samesite\" in cookie\n \n \n def test_session_using_samesite_attribute(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'Hello World'\n+        flask.session[\"testing\"] = 42\n+        return \"Hello World\"\n \n-    app.config.update(SESSION_COOKIE_SAMESITE='invalid')\n+    app.config.update(SESSION_COOKIE_SAMESITE=\"invalid\")\n \n     with pytest.raises(ValueError):\n-        client.get('/')\n+        client.get(\"/\")\n \n     app.config.update(SESSION_COOKIE_SAMESITE=None)\n-    rv = client.get('/')\n-    cookie = rv.headers['set-cookie'].lower()\n-    assert 'samesite' not in cookie\n+    rv = client.get(\"/\")\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    assert \"samesite\" not in cookie\n \n-    app.config.update(SESSION_COOKIE_SAMESITE='Strict')\n-    rv = client.get('/')\n-    cookie = rv.headers['set-cookie'].lower()\n-    assert 'samesite=strict' in cookie\n+    app.config.update(SESSION_COOKIE_SAMESITE=\"Strict\")\n+    rv = client.get(\"/\")\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    assert \"samesite=strict\" in cookie\n \n-    app.config.update(SESSION_COOKIE_SAMESITE='Lax')\n-    rv = client.get('/')\n-    cookie = rv.headers['set-cookie'].lower()\n-    assert 'samesite=lax' in cookie\n+    app.config.update(SESSION_COOKIE_SAMESITE=\"Lax\")\n+    rv = client.get(\"/\")\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    assert \"samesite=lax\" in cookie\n \n \n def test_session_localhost_warning(recwarn, app, client):\n-    app.config.update(\n-        SERVER_NAME='localhost:5000',\n-    )\n+    app.config.update(SERVER_NAME=\"localhost:5000\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'testing'\n+        flask.session[\"testing\"] = 42\n+        return \"testing\"\n \n-    rv = client.get('/', 'http://localhost:5000/')\n-    assert 'domain' not in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://localhost:5000/\")\n+    assert \"domain\" not in rv.headers[\"set-cookie\"].lower()\n     w = recwarn.pop(UserWarning)\n     assert '\"localhost\" is not a valid cookie domain' in str(w.message)\n \n \n def test_session_ip_warning(recwarn, app, client):\n-    app.config.update(\n-        SERVER_NAME='127.0.0.1:5000',\n-    )\n+    app.config.update(SERVER_NAME=\"127.0.0.1:5000\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['testing'] = 42\n-        return 'testing'\n+        flask.session[\"testing\"] = 42\n+        return \"testing\"\n \n-    rv = client.get('/', 'http://127.0.0.1:5000/')\n-    assert 'domain=127.0.0.1' in rv.headers['set-cookie'].lower()\n+    rv = client.get(\"/\", \"http://127.0.0.1:5000/\")\n+    assert \"domain=127.0.0.1\" in rv.headers[\"set-cookie\"].lower()\n     w = recwarn.pop(UserWarning)\n-    assert 'cookie domain is an IP' in str(w.message)\n+    assert \"cookie domain is an IP\" in str(w.message)\n \n \n def test_missing_session(app):\n@@ -401,194 +391,194 @@ def test_missing_session(app):\n \n     def expect_exception(f, *args, **kwargs):\n         e = pytest.raises(RuntimeError, f, *args, **kwargs)\n-        assert e.value.args and 'session is unavailable' in e.value.args[0]\n+        assert e.value.args and \"session is unavailable\" in e.value.args[0]\n \n     with app.test_request_context():\n-        assert flask.session.get('missing_key') is None\n-        expect_exception(flask.session.__setitem__, 'foo', 42)\n-        expect_exception(flask.session.pop, 'foo')\n+        assert flask.session.get(\"missing_key\") is None\n+        expect_exception(flask.session.__setitem__, \"foo\", 42)\n+        expect_exception(flask.session.pop, \"foo\")\n \n \n def test_session_expiration(app, client):\n     permanent = True\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.session['test'] = 42\n+        flask.session[\"test\"] = 42\n         flask.session.permanent = permanent\n-        return ''\n+        return \"\"\n \n-    @app.route('/test')\n+    @app.route(\"/test\")\n     def test():\n         return text_type(flask.session.permanent)\n \n-    rv = client.get('/')\n-    assert 'set-cookie' in rv.headers\n-    match = re.search(r'(?i)\\bexpires=([^;]+)', rv.headers['set-cookie'])\n+    rv = client.get(\"/\")\n+    assert \"set-cookie\" in rv.headers\n+    match = re.search(r\"(?i)\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n     expires = parse_date(match.group())\n     expected = datetime.utcnow() + app.permanent_session_lifetime\n     assert expires.year == expected.year\n     assert expires.month == expected.month\n     assert expires.day == expected.day\n \n-    rv = client.get('/test')\n-    assert rv.data == b'True'\n+    rv = client.get(\"/test\")\n+    assert rv.data == b\"True\"\n \n     permanent = False\n-    rv = client.get('/')\n-    assert 'set-cookie' in rv.headers\n-    match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n+    rv = client.get(\"/\")\n+    assert \"set-cookie\" in rv.headers\n+    match = re.search(r\"\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n     assert match is None\n \n \n def test_session_stored_last(app, client):\n     @app.after_request\n     def modify_session(response):\n-        flask.session['foo'] = 42\n+        flask.session[\"foo\"] = 42\n         return response\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def dump_session_contents():\n-        return repr(flask.session.get('foo'))\n+        return repr(flask.session.get(\"foo\"))\n \n-    assert client.get('/').data == b'None'\n-    assert client.get('/').data == b'42'\n+    assert client.get(\"/\").data == b\"None\"\n+    assert client.get(\"/\").data == b\"42\"\n \n \n def test_session_special_types(app, client):\n     now = datetime.utcnow().replace(microsecond=0)\n     the_uuid = uuid.uuid4()\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def dump_session_contents():\n-        flask.session['t'] = (1, 2, 3)\n-        flask.session['b'] = b'\\xff'\n-        flask.session['m'] = flask.Markup('<html>')\n-        flask.session['u'] = the_uuid\n-        flask.session['d'] = now\n-        flask.session['t_tag'] = {' t': 'not-a-tuple'}\n-        flask.session['di_t_tag'] = {' t__': 'not-a-tuple'}\n-        flask.session['di_tag'] = {' di': 'not-a-dict'}\n-        return '', 204\n+        flask.session[\"t\"] = (1, 2, 3)\n+        flask.session[\"b\"] = b\"\\xff\"\n+        flask.session[\"m\"] = flask.Markup(\"<html>\")\n+        flask.session[\"u\"] = the_uuid\n+        flask.session[\"d\"] = now\n+        flask.session[\"t_tag\"] = {\" t\": \"not-a-tuple\"}\n+        flask.session[\"di_t_tag\"] = {\" t__\": \"not-a-tuple\"}\n+        flask.session[\"di_tag\"] = {\" di\": \"not-a-dict\"}\n+        return \"\", 204\n \n     with client:\n-        client.get('/')\n+        client.get(\"/\")\n         s = flask.session\n-        assert s['t'] == (1, 2, 3)\n-        assert type(s['b']) == bytes\n-        assert s['b'] == b'\\xff'\n-        assert type(s['m']) == flask.Markup\n-        assert s['m'] == flask.Markup('<html>')\n-        assert s['u'] == the_uuid\n-        assert s['d'] == now\n-        assert s['t_tag'] == {' t': 'not-a-tuple'}\n-        assert s['di_t_tag'] == {' t__': 'not-a-tuple'}\n-        assert s['di_tag'] == {' di': 'not-a-dict'}\n+        assert s[\"t\"] == (1, 2, 3)\n+        assert type(s[\"b\"]) == bytes\n+        assert s[\"b\"] == b\"\\xff\"\n+        assert type(s[\"m\"]) == flask.Markup\n+        assert s[\"m\"] == flask.Markup(\"<html>\")\n+        assert s[\"u\"] == the_uuid\n+        assert s[\"d\"] == now\n+        assert s[\"t_tag\"] == {\" t\": \"not-a-tuple\"}\n+        assert s[\"di_t_tag\"] == {\" t__\": \"not-a-tuple\"}\n+        assert s[\"di_tag\"] == {\" di\": \"not-a-dict\"}\n \n \n def test_session_cookie_setting(app):\n     is_permanent = True\n \n-    @app.route('/bump')\n+    @app.route(\"/bump\")\n     def bump():\n-        rv = flask.session['foo'] = flask.session.get('foo', 0) + 1\n+        rv = flask.session[\"foo\"] = flask.session.get(\"foo\", 0) + 1\n         flask.session.permanent = is_permanent\n         return str(rv)\n \n-    @app.route('/read')\n+    @app.route(\"/read\")\n     def read():\n-        return str(flask.session.get('foo', 0))\n+        return str(flask.session.get(\"foo\", 0))\n \n     def run_test(expect_header):\n         with app.test_client() as c:\n-            assert c.get('/bump').data == b'1'\n-            assert c.get('/bump').data == b'2'\n-            assert c.get('/bump').data == b'3'\n+            assert c.get(\"/bump\").data == b\"1\"\n+            assert c.get(\"/bump\").data == b\"2\"\n+            assert c.get(\"/bump\").data == b\"3\"\n \n-            rv = c.get('/read')\n-            set_cookie = rv.headers.get('set-cookie')\n+            rv = c.get(\"/read\")\n+            set_cookie = rv.headers.get(\"set-cookie\")\n             assert (set_cookie is not None) == expect_header\n-            assert rv.data == b'3'\n+            assert rv.data == b\"3\"\n \n     is_permanent = True\n-    app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n+    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = True\n     run_test(expect_header=True)\n \n     is_permanent = True\n-    app.config['SESSION_REFRESH_EACH_REQUEST'] = False\n+    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = False\n     run_test(expect_header=False)\n \n     is_permanent = False\n-    app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n+    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = True\n     run_test(expect_header=False)\n \n     is_permanent = False\n-    app.config['SESSION_REFRESH_EACH_REQUEST'] = False\n+    app.config[\"SESSION_REFRESH_EACH_REQUEST\"] = False\n     run_test(expect_header=False)\n \n \n def test_session_vary_cookie(app, client):\n-    @app.route('/set')\n+    @app.route(\"/set\")\n     def set_session():\n-        flask.session['test'] = 'test'\n-        return ''\n+        flask.session[\"test\"] = \"test\"\n+        return \"\"\n \n-    @app.route('/get')\n+    @app.route(\"/get\")\n     def get():\n-        return flask.session.get('test')\n+        return flask.session.get(\"test\")\n \n-    @app.route('/getitem')\n+    @app.route(\"/getitem\")\n     def getitem():\n-        return flask.session['test']\n+        return flask.session[\"test\"]\n \n-    @app.route('/setdefault')\n+    @app.route(\"/setdefault\")\n     def setdefault():\n-        return flask.session.setdefault('test', 'default')\n+        return flask.session.setdefault(\"test\", \"default\")\n \n-    @app.route('/vary-cookie-header-set')\n+    @app.route(\"/vary-cookie-header-set\")\n     def vary_cookie_header_set():\n         response = flask.Response()\n-        response.vary.add('Cookie')\n-        flask.session['test'] = 'test'\n+        response.vary.add(\"Cookie\")\n+        flask.session[\"test\"] = \"test\"\n         return response\n \n-    @app.route('/vary-header-set')\n+    @app.route(\"/vary-header-set\")\n     def vary_header_set():\n         response = flask.Response()\n-        response.vary.update(('Accept-Encoding', 'Accept-Language'))\n-        flask.session['test'] = 'test'\n+        response.vary.update((\"Accept-Encoding\", \"Accept-Language\"))\n+        flask.session[\"test\"] = \"test\"\n         return response\n \n-    @app.route('/no-vary-header')\n+    @app.route(\"/no-vary-header\")\n     def no_vary_header():\n-        return ''\n+        return \"\"\n \n-    def expect(path, header_value='Cookie'):\n+    def expect(path, header_value=\"Cookie\"):\n         rv = client.get(path)\n \n         if header_value:\n             # The 'Vary' key should exist in the headers only once.\n-            assert len(rv.headers.get_all('Vary')) == 1\n-            assert rv.headers['Vary'] == header_value\n+            assert len(rv.headers.get_all(\"Vary\")) == 1\n+            assert rv.headers[\"Vary\"] == header_value\n         else:\n-            assert 'Vary' not in rv.headers\n+            assert \"Vary\" not in rv.headers\n \n-    expect('/set')\n-    expect('/get')\n-    expect('/getitem')\n-    expect('/setdefault')\n-    expect('/vary-cookie-header-set')\n-    expect('/vary-header-set', 'Accept-Encoding, Accept-Language, Cookie')\n-    expect('/no-vary-header', None)\n+    expect(\"/set\")\n+    expect(\"/get\")\n+    expect(\"/getitem\")\n+    expect(\"/setdefault\")\n+    expect(\"/vary-cookie-header-set\")\n+    expect(\"/vary-header-set\", \"Accept-Encoding, Accept-Language, Cookie\")\n+    expect(\"/no-vary-header\", None)\n \n \n def test_flashes(app, req_ctx):\n     assert not flask.session.modified\n-    flask.flash('Zap')\n+    flask.flash(\"Zap\")\n     flask.session.modified = False\n-    flask.flash('Zip')\n+    flask.flash(\"Zip\")\n     assert flask.session.modified\n-    assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n+    assert list(flask.get_flashed_messages()) == [\"Zap\", \"Zip\"]\n \n \n def test_extended_flashing(app):\n@@ -598,77 +588,78 @@ def test_extended_flashing(app):\n     # in the view functions will cause a 500 response to the test client\n     # instead of propagating exceptions.\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.flash(u'Hello World')\n-        flask.flash(u'Hello World', 'error')\n-        flask.flash(flask.Markup(u'<em>Testing</em>'), 'warning')\n-        return ''\n+        flask.flash(u\"Hello World\")\n+        flask.flash(u\"Hello World\", \"error\")\n+        flask.flash(flask.Markup(u\"<em>Testing</em>\"), \"warning\")\n+        return \"\"\n \n-    @app.route('/test/')\n+    @app.route(\"/test/\")\n     def test():\n         messages = flask.get_flashed_messages()\n         assert list(messages) == [\n-            u'Hello World',\n-            u'Hello World',\n-            flask.Markup(u'<em>Testing</em>')\n+            u\"Hello World\",\n+            u\"Hello World\",\n+            flask.Markup(u\"<em>Testing</em>\"),\n         ]\n-        return ''\n+        return \"\"\n \n-    @app.route('/test_with_categories/')\n+    @app.route(\"/test_with_categories/\")\n     def test_with_categories():\n         messages = flask.get_flashed_messages(with_categories=True)\n         assert len(messages) == 3\n         assert list(messages) == [\n-            ('message', u'Hello World'),\n-            ('error', u'Hello World'),\n-            ('warning', flask.Markup(u'<em>Testing</em>'))\n+            (\"message\", u\"Hello World\"),\n+            (\"error\", u\"Hello World\"),\n+            (\"warning\", flask.Markup(u\"<em>Testing</em>\")),\n         ]\n-        return ''\n+        return \"\"\n \n-    @app.route('/test_filter/')\n+    @app.route(\"/test_filter/\")\n     def test_filter():\n         messages = flask.get_flashed_messages(\n-            category_filter=['message'], with_categories=True)\n-        assert list(messages) == [('message', u'Hello World')]\n-        return ''\n+            category_filter=[\"message\"], with_categories=True\n+        )\n+        assert list(messages) == [(\"message\", u\"Hello World\")]\n+        return \"\"\n \n-    @app.route('/test_filters/')\n+    @app.route(\"/test_filters/\")\n     def test_filters():\n         messages = flask.get_flashed_messages(\n-            category_filter=['message', 'warning'], with_categories=True)\n+            category_filter=[\"message\", \"warning\"], with_categories=True\n+        )\n         assert list(messages) == [\n-            ('message', u'Hello World'),\n-            ('warning', flask.Markup(u'<em>Testing</em>'))\n+            (\"message\", u\"Hello World\"),\n+            (\"warning\", flask.Markup(u\"<em>Testing</em>\")),\n         ]\n-        return ''\n+        return \"\"\n \n-    @app.route('/test_filters_without_returning_categories/')\n+    @app.route(\"/test_filters_without_returning_categories/\")\n     def test_filters2():\n-        messages = flask.get_flashed_messages(\n-            category_filter=['message', 'warning'])\n+        messages = flask.get_flashed_messages(category_filter=[\"message\", \"warning\"])\n         assert len(messages) == 2\n-        assert messages[0] == u'Hello World'\n-        assert messages[1] == flask.Markup(u'<em>Testing</em>')\n-        return ''\n+        assert messages[0] == u\"Hello World\"\n+        assert messages[1] == flask.Markup(u\"<em>Testing</em>\")\n+        return \"\"\n \n     # Create new test client on each test to clean flashed messages.\n \n     client = app.test_client()\n-    client.get('/')\n-    client.get('/test_with_categories/')\n+    client.get(\"/\")\n+    client.get(\"/test_with_categories/\")\n \n     client = app.test_client()\n-    client.get('/')\n-    client.get('/test_filter/')\n+    client.get(\"/\")\n+    client.get(\"/test_filter/\")\n \n     client = app.test_client()\n-    client.get('/')\n-    client.get('/test_filters/')\n+    client.get(\"/\")\n+    client.get(\"/test_filters/\")\n \n     client = app.test_client()\n-    client.get('/')\n-    client.get('/test_filters_without_returning_categories/')\n+    client.get(\"/\")\n+    client.get(\"/test_filters_without_returning_categories/\")\n \n \n def test_request_processing(app, client):\n@@ -676,24 +667,24 @@ def test_request_processing(app, client):\n \n     @app.before_request\n     def before_request():\n-        evts.append('before')\n+        evts.append(\"before\")\n \n     @app.after_request\n     def after_request(response):\n-        response.data += b'|after'\n-        evts.append('after')\n+        response.data += b\"|after\"\n+        evts.append(\"after\")\n         return response\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        assert 'before' in evts\n-        assert 'after' not in evts\n-        return 'request'\n+        assert \"before\" in evts\n+        assert \"after\" not in evts\n+        return \"request\"\n \n-    assert 'after' not in evts\n-    rv = client.get('/').data\n-    assert 'after' in evts\n-    assert rv == b'request|after'\n+    assert \"after\" not in evts\n+    rv = client.get(\"/\").data\n+    assert \"after\" in evts\n+    assert rv == b\"request|after\"\n \n \n def test_request_preprocessing_early_return(app, client):\n@@ -713,29 +704,29 @@ def test_request_preprocessing_early_return(app, client):\n         evts.append(3)\n         return \"bye\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        evts.append('index')\n+        evts.append(\"index\")\n         return \"damnit\"\n \n-    rv = client.get('/').data.strip()\n-    assert rv == b'hello'\n+    rv = client.get(\"/\").data.strip()\n+    assert rv == b\"hello\"\n     assert evts == [1, 2]\n \n \n def test_after_request_processing(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         @flask.after_this_request\n         def foo(response):\n-            response.headers['X-Foo'] = 'a header'\n+            response.headers[\"X-Foo\"] = \"a header\"\n             return response\n \n-        return 'Test'\n+        return \"Test\"\n \n-    resp = client.get('/')\n+    resp = client.get(\"/\")\n     assert resp.status_code == 200\n-    assert resp.headers['X-Foo'] == 'a header'\n+    assert resp.headers[\"X-Foo\"] == \"a header\"\n \n \n def test_teardown_request_handler(app, client):\n@@ -746,13 +737,13 @@ def test_teardown_request_handler(app, client):\n         called.append(True)\n         return \"Ignored\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def root():\n         return \"Response\"\n \n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     assert rv.status_code == 200\n-    assert b'Response' in rv.data\n+    assert b\"Response\" in rv.data\n     assert len(called) == 1\n \n \n@@ -764,13 +755,13 @@ def test_teardown_request_handler_debug_mode(app, client):\n         called.append(True)\n         return \"Ignored\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def root():\n         return \"Response\"\n \n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     assert rv.status_code == 200\n-    assert b'Response' in rv.data\n+    assert b\"Response\" in rv.data\n     assert len(called) == 1\n \n \n@@ -802,13 +793,13 @@ def test_teardown_request_handler_error(app, client):\n         except:\n             pass\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def fails():\n         1 // 0\n \n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     assert rv.status_code == 500\n-    assert b'Internal Server Error' in rv.data\n+    assert b\"Internal Server Error\" in rv.data\n     assert len(called) == 2\n \n \n@@ -841,12 +832,12 @@ def test_before_after_request_order(app, client):\n     def finish2(exc):\n         called.append(5)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return '42'\n+        return \"42\"\n \n-    rv = client.get('/')\n-    assert rv.data == b'42'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"42\"\n     assert called == [1, 2, 3, 4, 5, 6]\n \n \n@@ -855,44 +846,44 @@ def test_error_handling(app, client):\n \n     @app.errorhandler(404)\n     def not_found(e):\n-        return 'not found', 404\n+        return \"not found\", 404\n \n     @app.errorhandler(500)\n     def internal_server_error(e):\n-        return 'internal server error', 500\n+        return \"internal server error\", 500\n \n     @app.errorhandler(Forbidden)\n     def forbidden(e):\n-        return 'forbidden', 403\n+        return \"forbidden\", 403\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         flask.abort(404)\n \n-    @app.route('/error')\n+    @app.route(\"/error\")\n     def error():\n         1 // 0\n \n-    @app.route('/forbidden')\n+    @app.route(\"/forbidden\")\n     def error2():\n         flask.abort(403)\n \n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     assert rv.status_code == 404\n-    assert rv.data == b'not found'\n-    rv = client.get('/error')\n+    assert rv.data == b\"not found\"\n+    rv = client.get(\"/error\")\n     assert rv.status_code == 500\n-    assert b'internal server error' == rv.data\n-    rv = client.get('/forbidden')\n+    assert b\"internal server error\" == rv.data\n+    rv = client.get(\"/forbidden\")\n     assert rv.status_code == 403\n-    assert b'forbidden' == rv.data\n+    assert b\"forbidden\" == rv.data\n \n \n def test_error_handler_unknown_code(app):\n     with pytest.raises(KeyError) as exc_info:\n-        app.register_error_handler(999, lambda e: ('999', 999))\n+        app.register_error_handler(999, lambda e: (\"999\", 999))\n \n-    assert 'Use a subclass' in exc_info.value.args[0]\n+    assert \"Use a subclass\" in exc_info.value.args[0]\n \n \n def test_error_handling_processing(app, client):\n@@ -900,31 +891,31 @@ def test_error_handling_processing(app, client):\n \n     @app.errorhandler(500)\n     def internal_server_error(e):\n-        return 'internal server error', 500\n+        return \"internal server error\", 500\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def broken_func():\n         1 // 0\n \n     @app.after_request\n     def after_request(resp):\n-        resp.mimetype = 'text/x-special'\n+        resp.mimetype = \"text/x-special\"\n         return resp\n \n-    resp = client.get('/')\n-    assert resp.mimetype == 'text/x-special'\n-    assert resp.data == b'internal server error'\n+    resp = client.get(\"/\")\n+    assert resp.mimetype == \"text/x-special\"\n+    assert resp.data == b\"internal server error\"\n \n \n def test_baseexception_error_handling(app, client):\n     app.testing = False\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def broken_func():\n         raise KeyboardInterrupt()\n \n     with pytest.raises(KeyboardInterrupt):\n-        client.get('/')\n+        client.get(\"/\")\n \n         ctx = flask._request_ctx_stack.top\n         assert ctx.preserved\n@@ -934,15 +925,15 @@ def test_baseexception_error_handling(app, client):\n def test_before_request_and_routing_errors(app, client):\n     @app.before_request\n     def attach_something():\n-        flask.g.something = 'value'\n+        flask.g.something = \"value\"\n \n     @app.errorhandler(404)\n     def return_something(error):\n         return flask.g.something, 404\n \n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     assert rv.status_code == 404\n-    assert rv.data == b'value'\n+    assert rv.data == b\"value\"\n \n \n def test_user_error_handling(app, client):\n@@ -952,13 +943,13 @@ def test_user_error_handling(app, client):\n     @app.errorhandler(MyException)\n     def handle_my_exception(e):\n         assert isinstance(e, MyException)\n-        return '42'\n+        return \"42\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         raise MyException()\n \n-    assert client.get('/').data == b'42'\n+    assert client.get(\"/\").data == b\"42\"\n \n \n def test_http_error_subclass_handling(app, client):\n@@ -968,29 +959,29 @@ def test_http_error_subclass_handling(app, client):\n     @app.errorhandler(ForbiddenSubclass)\n     def handle_forbidden_subclass(e):\n         assert isinstance(e, ForbiddenSubclass)\n-        return 'banana'\n+        return \"banana\"\n \n     @app.errorhandler(403)\n     def handle_forbidden_subclass(e):\n         assert not isinstance(e, ForbiddenSubclass)\n         assert isinstance(e, Forbidden)\n-        return 'apple'\n+        return \"apple\"\n \n-    @app.route('/1')\n+    @app.route(\"/1\")\n     def index1():\n         raise ForbiddenSubclass()\n \n-    @app.route('/2')\n+    @app.route(\"/2\")\n     def index2():\n         flask.abort(403)\n \n-    @app.route('/3')\n+    @app.route(\"/3\")\n     def index3():\n         raise Forbidden()\n \n-    assert client.get('/1').data == b'banana'\n-    assert client.get('/2').data == b'apple'\n-    assert client.get('/3').data == b'apple'\n+    assert client.get(\"/1\").data == b\"banana\"\n+    assert client.get(\"/2\").data == b\"apple\"\n+    assert client.get(\"/3\").data == b\"apple\"\n \n \n def test_errorhandler_precedence(app, client):\n@@ -1005,67 +996,67 @@ def test_errorhandler_precedence(app, client):\n \n     @app.errorhandler(E2)\n     def handle_e2(e):\n-        return 'E2'\n+        return \"E2\"\n \n     @app.errorhandler(Exception)\n     def handle_exception(e):\n-        return 'Exception'\n+        return \"Exception\"\n \n-    @app.route('/E1')\n+    @app.route(\"/E1\")\n     def raise_e1():\n         raise E1\n \n-    @app.route('/E3')\n+    @app.route(\"/E3\")\n     def raise_e3():\n         raise E3\n \n-    rv = client.get('/E1')\n-    assert rv.data == b'Exception'\n+    rv = client.get(\"/E1\")\n+    assert rv.data == b\"Exception\"\n \n-    rv = client.get('/E3')\n-    assert rv.data == b'E2'\n+    rv = client.get(\"/E3\")\n+    assert rv.data == b\"E2\"\n \n \n def test_trapping_of_bad_request_key_errors(app, client):\n-    @app.route('/key')\n+    @app.route(\"/key\")\n     def fail():\n-        flask.request.form['missing_key']\n+        flask.request.form[\"missing_key\"]\n \n-    @app.route('/abort')\n+    @app.route(\"/abort\")\n     def allow_abort():\n         flask.abort(400)\n \n-    rv = client.get('/key')\n+    rv = client.get(\"/key\")\n     assert rv.status_code == 400\n-    assert b'missing_key' not in rv.data\n-    rv = client.get('/abort')\n+    assert b\"missing_key\" not in rv.data\n+    rv = client.get(\"/abort\")\n     assert rv.status_code == 400\n \n     app.debug = True\n     with pytest.raises(KeyError) as e:\n         client.get(\"/key\")\n     assert e.errisinstance(BadRequest)\n-    assert 'missing_key' in e.value.get_description()\n-    rv = client.get('/abort')\n+    assert \"missing_key\" in e.value.get_description()\n+    rv = client.get(\"/abort\")\n     assert rv.status_code == 400\n \n     app.debug = False\n-    app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n+    app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = True\n     with pytest.raises(KeyError):\n-        client.get('/key')\n+        client.get(\"/key\")\n     with pytest.raises(BadRequest):\n-        client.get('/abort')\n+        client.get(\"/abort\")\n \n \n def test_trapping_of_all_http_exceptions(app, client):\n-    app.config['TRAP_HTTP_EXCEPTIONS'] = True\n+    app.config[\"TRAP_HTTP_EXCEPTIONS\"] = True\n \n-    @app.route('/fail')\n+    @app.route(\"/fail\")\n     def fail():\n         flask.abort(404)\n \n     with pytest.raises(NotFound):\n-        client.get('/fail')\n+        client.get(\"/fail\")\n \n \n def test_error_handler_after_processor_error(app, client):\n@@ -1073,121 +1064,120 @@ def test_error_handler_after_processor_error(app, client):\n \n     @app.before_request\n     def before_request():\n-        if trigger == 'before':\n+        if trigger == \"before\":\n             1 // 0\n \n     @app.after_request\n     def after_request(response):\n-        if trigger == 'after':\n+        if trigger == \"after\":\n             1 // 0\n         return response\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Foo'\n+        return \"Foo\"\n \n     @app.errorhandler(500)\n     def internal_server_error(e):\n-        return 'Hello Server Error', 500\n+        return \"Hello Server Error\", 500\n \n-    for trigger in 'before', 'after':\n-        rv = client.get('/')\n+    for trigger in \"before\", \"after\":\n+        rv = client.get(\"/\")\n         assert rv.status_code == 500\n-        assert rv.data == b'Hello Server Error'\n+        assert rv.data == b\"Hello Server Error\"\n \n \n def test_enctype_debug_helper(app, client):\n     from flask.debughelpers import DebugFilesKeyError\n+\n     app.debug = True\n \n-    @app.route('/fail', methods=['POST'])\n+    @app.route(\"/fail\", methods=[\"POST\"])\n     def index():\n-        return flask.request.files['foo'].filename\n+        return flask.request.files[\"foo\"].filename\n \n     # with statement is important because we leave an exception on the\n     # stack otherwise and we want to ensure that this is not the case\n     # to not negatively affect other tests.\n     with client:\n         with pytest.raises(DebugFilesKeyError) as e:\n-            client.post('/fail', data={'foo': 'index.txt'})\n-        assert 'no file contents were transmitted' in str(e.value)\n+            client.post(\"/fail\", data={\"foo\": \"index.txt\"})\n+        assert \"no file contents were transmitted\" in str(e.value)\n         assert 'This was submitted: \"index.txt\"' in str(e.value)\n \n \n def test_response_types(app, client):\n-    @app.route('/text')\n+    @app.route(\"/text\")\n     def from_text():\n-        return u'Hällo Wörld'\n+        return u\"Hällo Wörld\"\n \n-    @app.route('/bytes')\n+    @app.route(\"/bytes\")\n     def from_bytes():\n-        return u'Hällo Wörld'.encode('utf-8')\n+        return u\"Hällo Wörld\".encode(\"utf-8\")\n \n-    @app.route('/full_tuple')\n+    @app.route(\"/full_tuple\")\n     def from_full_tuple():\n-        return 'Meh', 400, {\n-            'X-Foo': 'Testing',\n-            'Content-Type': 'text/plain; charset=utf-8'\n-        }\n+        return (\n+            \"Meh\",\n+            400,\n+            {\"X-Foo\": \"Testing\", \"Content-Type\": \"text/plain; charset=utf-8\"},\n+        )\n \n-    @app.route('/text_headers')\n+    @app.route(\"/text_headers\")\n     def from_text_headers():\n-        return 'Hello', {\n-            'X-Foo': 'Test',\n-            'Content-Type': 'text/plain; charset=utf-8'\n-        }\n+        return \"Hello\", {\"X-Foo\": \"Test\", \"Content-Type\": \"text/plain; charset=utf-8\"}\n \n-    @app.route('/text_status')\n+    @app.route(\"/text_status\")\n     def from_text_status():\n-        return 'Hi, status!', 400\n+        return \"Hi, status!\", 400\n \n-    @app.route('/response_headers')\n+    @app.route(\"/response_headers\")\n     def from_response_headers():\n-        return flask.Response('Hello world', 404, {'X-Foo': 'Baz'}), {\n-            \"X-Foo\": \"Bar\",\n-            \"X-Bar\": \"Foo\"\n-        }\n+        return (\n+            flask.Response(\"Hello world\", 404, {\"X-Foo\": \"Baz\"}),\n+            {\"X-Foo\": \"Bar\", \"X-Bar\": \"Foo\"},\n+        )\n \n-    @app.route('/response_status')\n+    @app.route(\"/response_status\")\n     def from_response_status():\n-        return app.response_class('Hello world', 400), 500\n+        return app.response_class(\"Hello world\", 400), 500\n \n-    @app.route('/wsgi')\n+    @app.route(\"/wsgi\")\n     def from_wsgi():\n         return NotFound()\n \n-    assert client.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n-    assert client.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n+    assert client.get(\"/text\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n+    assert client.get(\"/bytes\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n \n-    rv = client.get('/full_tuple')\n-    assert rv.data == b'Meh'\n-    assert rv.headers['X-Foo'] == 'Testing'\n+    rv = client.get(\"/full_tuple\")\n+    assert rv.data == b\"Meh\"\n+    assert rv.headers[\"X-Foo\"] == \"Testing\"\n     assert rv.status_code == 400\n-    assert rv.mimetype == 'text/plain'\n+    assert rv.mimetype == \"text/plain\"\n \n-    rv = client.get('/text_headers')\n-    assert rv.data == b'Hello'\n-    assert rv.headers['X-Foo'] == 'Test'\n+    rv = client.get(\"/text_headers\")\n+    assert rv.data == b\"Hello\"\n+    assert rv.headers[\"X-Foo\"] == \"Test\"\n     assert rv.status_code == 200\n-    assert rv.mimetype == 'text/plain'\n+    assert rv.mimetype == \"text/plain\"\n \n-    rv = client.get('/text_status')\n-    assert rv.data == b'Hi, status!'\n+    rv = client.get(\"/text_status\")\n+    assert rv.data == b\"Hi, status!\"\n     assert rv.status_code == 400\n-    assert rv.mimetype == 'text/html'\n+    assert rv.mimetype == \"text/html\"\n \n-    rv = client.get('/response_headers')\n-    assert rv.data == b'Hello world'\n-    assert rv.headers.getlist('X-Foo') == ['Baz', 'Bar']\n-    assert rv.headers['X-Bar'] == 'Foo'\n+    rv = client.get(\"/response_headers\")\n+    assert rv.data == b\"Hello world\"\n+    assert rv.headers.getlist(\"X-Foo\") == [\"Baz\", \"Bar\"]\n+    assert rv.headers[\"X-Bar\"] == \"Foo\"\n     assert rv.status_code == 404\n \n-    rv = client.get('/response_status')\n-    assert rv.data == b'Hello world'\n+    rv = client.get(\"/response_status\")\n+    assert rv.data == b\"Hello world\"\n     assert rv.status_code == 500\n \n-    rv = client.get('/wsgi')\n-    assert b'Not Found' in rv.data\n+    rv = client.get(\"/wsgi\")\n+    assert b\"Not Found\" in rv.data\n     assert rv.status_code == 404\n \n \n@@ -1195,160 +1185,152 @@ def test_response_type_errors():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n-    @app.route('/none')\n+    @app.route(\"/none\")\n     def from_none():\n         pass\n \n-    @app.route('/small_tuple')\n+    @app.route(\"/small_tuple\")\n     def from_small_tuple():\n-        return 'Hello',\n+        return (\"Hello\",)\n \n-    @app.route('/large_tuple')\n+    @app.route(\"/large_tuple\")\n     def from_large_tuple():\n-        return 'Hello', 234, {'X-Foo': 'Bar'}, '???'\n+        return \"Hello\", 234, {\"X-Foo\": \"Bar\"}, \"???\"\n \n-    @app.route('/bad_type')\n+    @app.route(\"/bad_type\")\n     def from_bad_type():\n         return True\n \n-    @app.route('/bad_wsgi')\n+    @app.route(\"/bad_wsgi\")\n     def from_bad_wsgi():\n         return lambda: None\n \n     c = app.test_client()\n \n     with pytest.raises(TypeError) as e:\n-        c.get('/none')\n-        assert 'returned None' in str(e)\n+        c.get(\"/none\")\n+        assert \"returned None\" in str(e)\n \n     with pytest.raises(TypeError) as e:\n-        c.get('/small_tuple')\n-        assert 'tuple must have the form' in str(e)\n+        c.get(\"/small_tuple\")\n+        assert \"tuple must have the form\" in str(e)\n \n-    pytest.raises(TypeError, c.get, '/large_tuple')\n+    pytest.raises(TypeError, c.get, \"/large_tuple\")\n \n     with pytest.raises(TypeError) as e:\n-        c.get('/bad_type')\n-        assert 'it was a bool' in str(e)\n+        c.get(\"/bad_type\")\n+        assert \"it was a bool\" in str(e)\n \n-    pytest.raises(TypeError, c.get, '/bad_wsgi')\n+    pytest.raises(TypeError, c.get, \"/bad_wsgi\")\n \n \n def test_make_response(app, req_ctx):\n     rv = flask.make_response()\n     assert rv.status_code == 200\n-    assert rv.data == b''\n-    assert rv.mimetype == 'text/html'\n+    assert rv.data == b\"\"\n+    assert rv.mimetype == \"text/html\"\n \n-    rv = flask.make_response('Awesome')\n+    rv = flask.make_response(\"Awesome\")\n     assert rv.status_code == 200\n-    assert rv.data == b'Awesome'\n-    assert rv.mimetype == 'text/html'\n+    assert rv.data == b\"Awesome\"\n+    assert rv.mimetype == \"text/html\"\n \n-    rv = flask.make_response('W00t', 404)\n+    rv = flask.make_response(\"W00t\", 404)\n     assert rv.status_code == 404\n-    assert rv.data == b'W00t'\n-    assert rv.mimetype == 'text/html'\n+    assert rv.data == b\"W00t\"\n+    assert rv.mimetype == \"text/html\"\n \n \n def test_make_response_with_response_instance(app, req_ctx):\n-    rv = flask.make_response(\n-        flask.jsonify({'msg': 'W00t'}), 400)\n+    rv = flask.make_response(flask.jsonify({\"msg\": \"W00t\"}), 400)\n     assert rv.status_code == 400\n     assert rv.data == b'{\"msg\":\"W00t\"}\\n'\n-    assert rv.mimetype == 'application/json'\n+    assert rv.mimetype == \"application/json\"\n+\n+    rv = flask.make_response(flask.Response(\"\"), 400)\n+    assert rv.status_code == 400\n+    assert rv.data == b\"\"\n+    assert rv.mimetype == \"text/html\"\n \n     rv = flask.make_response(\n-        flask.Response(''), 400)\n+        flask.Response(\"\", headers={\"Content-Type\": \"text/html\"}),\n+        400,\n+        [(\"X-Foo\", \"bar\")],\n+    )\n     assert rv.status_code == 400\n-    assert rv.data == b''\n-    assert rv.mimetype == 'text/html'\n-\n-    rv = flask.make_response(\n-        flask.Response('', headers={'Content-Type': 'text/html'}),\n-        400, [('X-Foo', 'bar')])\n-    assert rv.status_code == 400\n-    assert rv.headers['Content-Type'] == 'text/html'\n-    assert rv.headers['X-Foo'] == 'bar'\n+    assert rv.headers[\"Content-Type\"] == \"text/html\"\n+    assert rv.headers[\"X-Foo\"] == \"bar\"\n \n \n def test_jsonify_no_prettyprint(app, req_ctx):\n     app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": False})\n     compressed_msg = b'{\"msg\":{\"submsg\":\"W00t\"},\"msg2\":\"foobar\"}\\n'\n-    uncompressed_msg = {\n-        \"msg\": {\n-            \"submsg\": \"W00t\"\n-        },\n-        \"msg2\": \"foobar\"\n-    }\n+    uncompressed_msg = {\"msg\": {\"submsg\": \"W00t\"}, \"msg2\": \"foobar\"}\n \n-    rv = flask.make_response(\n-        flask.jsonify(uncompressed_msg), 200)\n+    rv = flask.make_response(flask.jsonify(uncompressed_msg), 200)\n     assert rv.data == compressed_msg\n \n \n def test_jsonify_prettyprint(app, req_ctx):\n     app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": True})\n     compressed_msg = {\"msg\": {\"submsg\": \"W00t\"}, \"msg2\": \"foobar\"}\n-    pretty_response = \\\n+    pretty_response = (\n         b'{\\n  \"msg\": {\\n    \"submsg\": \"W00t\"\\n  }, \\n  \"msg2\": \"foobar\"\\n}\\n'\n+    )\n \n-    rv = flask.make_response(\n-        flask.jsonify(compressed_msg), 200)\n+    rv = flask.make_response(flask.jsonify(compressed_msg), 200)\n     assert rv.data == pretty_response\n \n \n def test_jsonify_mimetype(app, req_ctx):\n-    app.config.update({\"JSONIFY_MIMETYPE\": 'application/vnd.api+json'})\n-    msg = {\n-        \"msg\": {\"submsg\": \"W00t\"},\n-    }\n-    rv = flask.make_response(\n-        flask.jsonify(msg), 200)\n-    assert rv.mimetype == 'application/vnd.api+json'\n+    app.config.update({\"JSONIFY_MIMETYPE\": \"application/vnd.api+json\"})\n+    msg = {\"msg\": {\"submsg\": \"W00t\"}}\n+    rv = flask.make_response(flask.jsonify(msg), 200)\n+    assert rv.mimetype == \"application/vnd.api+json\"\n \n \n def test_jsonify_args_and_kwargs_check(app, req_ctx):\n     with pytest.raises(TypeError) as e:\n-        flask.jsonify('fake args', kwargs='fake')\n-    assert 'behavior undefined' in str(e.value)\n+        flask.jsonify(\"fake args\", kwargs=\"fake\")\n+    assert \"behavior undefined\" in str(e.value)\n \n \n def test_url_generation(app, req_ctx):\n-    @app.route('/hello/<name>', methods=['POST'])\n+    @app.route(\"/hello/<name>\", methods=[\"POST\"])\n     def hello():\n         pass\n \n-    assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n-    assert flask.url_for('hello', name='test x', _external=True) == \\\n-           'http://localhost/hello/test%20x'\n+    assert flask.url_for(\"hello\", name=\"test x\") == \"/hello/test%20x\"\n+    assert (\n+        flask.url_for(\"hello\", name=\"test x\", _external=True)\n+        == \"http://localhost/hello/test%20x\"\n+    )\n \n \n def test_build_error_handler(app):\n     # Test base case, a URL which results in a BuildError.\n     with app.test_request_context():\n-        pytest.raises(BuildError, flask.url_for, 'spam')\n+        pytest.raises(BuildError, flask.url_for, \"spam\")\n \n     # Verify the error is re-raised if not the current exception.\n     try:\n         with app.test_request_context():\n-            flask.url_for('spam')\n+            flask.url_for(\"spam\")\n     except BuildError as err:\n         error = err\n     try:\n-        raise RuntimeError('Test case where BuildError is not current.')\n+        raise RuntimeError(\"Test case where BuildError is not current.\")\n     except RuntimeError:\n-        pytest.raises(\n-            BuildError, app.handle_url_build_error, error, 'spam', {})\n+        pytest.raises(BuildError, app.handle_url_build_error, error, \"spam\", {})\n \n     # Test a custom handler.\n     def handler(error, endpoint, values):\n         # Just a test.\n-        return '/test_handler/'\n+        return \"/test_handler/\"\n \n     app.url_build_error_handlers.append(handler)\n     with app.test_request_context():\n-        assert flask.url_for('spam') == '/test_handler/'\n+        assert flask.url_for(\"spam\") == \"/test_handler/\"\n \n \n def test_build_error_handler_reraise(app):\n@@ -1359,22 +1341,22 @@ def test_build_error_handler_reraise(app):\n     app.url_build_error_handlers.append(handler_raises_build_error)\n \n     with app.test_request_context():\n-        pytest.raises(BuildError, flask.url_for, 'not.existing')\n+        pytest.raises(BuildError, flask.url_for, \"not.existing\")\n \n \n def test_url_for_passes_special_values_to_build_error_handler(app):\n     @app.url_build_error_handlers.append\n     def handler(error, endpoint, values):\n         assert values == {\n-            '_external': False,\n-            '_anchor': None,\n-            '_method': None,\n-            '_scheme': None,\n+            \"_external\": False,\n+            \"_anchor\": None,\n+            \"_method\": None,\n+            \"_scheme\": None,\n         }\n-        return 'handled'\n+        return \"handled\"\n \n     with app.test_request_context():\n-        flask.url_for('/')\n+        flask.url_for(\"/\")\n \n \n def test_custom_converters(app, client):\n@@ -1382,54 +1364,53 @@ def test_custom_converters(app, client):\n \n     class ListConverter(BaseConverter):\n         def to_python(self, value):\n-            return value.split(',')\n+            return value.split(\",\")\n \n         def to_url(self, value):\n             base_to_url = super(ListConverter, self).to_url\n-            return ','.join(base_to_url(x) for x in value)\n+            return \",\".join(base_to_url(x) for x in value)\n \n-    app.url_map.converters['list'] = ListConverter\n+    app.url_map.converters[\"list\"] = ListConverter\n \n-    @app.route('/<list:args>')\n+    @app.route(\"/<list:args>\")\n     def index(args):\n-        return '|'.join(args)\n+        return \"|\".join(args)\n \n-    assert client.get('/1,2,3').data == b'1|2|3'\n+    assert client.get(\"/1,2,3\").data == b\"1|2|3\"\n \n \n def test_static_files(app, client):\n-    rv = client.get('/static/index.html')\n+    rv = client.get(\"/static/index.html\")\n     assert rv.status_code == 200\n-    assert rv.data.strip() == b'<h1>Hello World!</h1>'\n+    assert rv.data.strip() == b\"<h1>Hello World!</h1>\"\n     with app.test_request_context():\n-        assert flask.url_for('static', filename='index.html') == \\\n-               '/static/index.html'\n+        assert flask.url_for(\"static\", filename=\"index.html\") == \"/static/index.html\"\n     rv.close()\n \n \n def test_static_url_path():\n-    app = flask.Flask(__name__, static_url_path='/foo')\n+    app = flask.Flask(__name__, static_url_path=\"/foo\")\n     app.testing = True\n-    rv = app.test_client().get('/foo/index.html')\n+    rv = app.test_client().get(\"/foo/index.html\")\n     assert rv.status_code == 200\n     rv.close()\n \n     with app.test_request_context():\n-        assert flask.url_for('static', filename='index.html') == '/foo/index.html'\n+        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n \n \n def test_static_route_with_host_matching():\n-    app = flask.Flask(__name__, host_matching=True, static_host='example.com')\n+    app = flask.Flask(__name__, host_matching=True, static_host=\"example.com\")\n     c = app.test_client()\n-    rv = c.get('http://example.com/static/index.html')\n+    rv = c.get(\"http://example.com/static/index.html\")\n     assert rv.status_code == 200\n     rv.close()\n     with app.test_request_context():\n-        rv = flask.url_for('static', filename='index.html', _external=True)\n-        assert rv == 'http://example.com/static/index.html'\n+        rv = flask.url_for(\"static\", filename=\"index.html\", _external=True)\n+        assert rv == \"http://example.com/static/index.html\"\n     # Providing static_host without host_matching=True should error.\n     with pytest.raises(Exception):\n-        flask.Flask(__name__, static_host='example.com')\n+        flask.Flask(__name__, static_host=\"example.com\")\n     # Providing host_matching=True with static_folder but without static_host should error.\n     with pytest.raises(Exception):\n         flask.Flask(__name__, host_matching=True)\n@@ -1438,41 +1419,39 @@ def test_static_route_with_host_matching():\n \n \n def test_request_locals():\n-    assert repr(flask.g) == '<LocalProxy unbound>'\n+    assert repr(flask.g) == \"<LocalProxy unbound>\"\n     assert not flask.g\n \n \n def test_test_app_proper_environ():\n     app = flask.Flask(__name__, subdomain_matching=True)\n-    app.config.update(\n-        SERVER_NAME='localhost.localdomain:5000'\n-    )\n+    app.config.update(SERVER_NAME=\"localhost.localdomain:5000\")\n     client = app.test_client()\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Foo'\n+        return \"Foo\"\n \n-    @app.route('/', subdomain='foo')\n+    @app.route(\"/\", subdomain=\"foo\")\n     def subdomain():\n-        return 'Foo SubDomain'\n+        return \"Foo SubDomain\"\n \n-    rv = client.get('/')\n-    assert rv.data == b'Foo'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"Foo\"\n \n-    rv = client.get('/', 'http://localhost.localdomain:5000')\n-    assert rv.data == b'Foo'\n+    rv = client.get(\"/\", \"http://localhost.localdomain:5000\")\n+    assert rv.data == b\"Foo\"\n \n-    rv = client.get('/', 'https://localhost.localdomain:5000')\n-    assert rv.data == b'Foo'\n+    rv = client.get(\"/\", \"https://localhost.localdomain:5000\")\n+    assert rv.data == b\"Foo\"\n \n-    app.config.update(SERVER_NAME='localhost.localdomain')\n-    rv = client.get('/', 'https://localhost.localdomain')\n-    assert rv.data == b'Foo'\n+    app.config.update(SERVER_NAME=\"localhost.localdomain\")\n+    rv = client.get(\"/\", \"https://localhost.localdomain\")\n+    assert rv.data == b\"Foo\"\n \n     try:\n-        app.config.update(SERVER_NAME='localhost.localdomain:443')\n-        rv = client.get('/', 'https://localhost.localdomain')\n+        app.config.update(SERVER_NAME=\"localhost.localdomain:443\")\n+        rv = client.get(\"/\", \"https://localhost.localdomain\")\n         # Werkzeug 0.8\n         assert rv.status_code == 404\n     except ValueError as e:\n@@ -1484,8 +1463,8 @@ def test_test_app_proper_environ():\n         )\n \n     try:\n-        app.config.update(SERVER_NAME='localhost.localdomain')\n-        rv = client.get('/', 'http://foo.localhost')\n+        app.config.update(SERVER_NAME=\"localhost.localdomain\")\n+        rv = client.get(\"/\", \"http://foo.localhost\")\n         # Werkzeug 0.8\n         assert rv.status_code == 404\n     except ValueError as e:\n@@ -1496,157 +1475,158 @@ def test_test_app_proper_environ():\n             \"server name from the WSGI environment ('foo.localhost')\"\n         )\n \n-    rv = client.get('/', 'http://foo.localhost.localdomain')\n-    assert rv.data == b'Foo SubDomain'\n+    rv = client.get(\"/\", \"http://foo.localhost.localdomain\")\n+    assert rv.data == b\"Foo SubDomain\"\n \n \n def test_exception_propagation(app, client):\n     def apprunner(config_key):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n             1 // 0\n \n         if config_key is not None:\n             app.config[config_key] = True\n             with pytest.raises(Exception):\n-                client.get('/')\n+                client.get(\"/\")\n         else:\n-            assert client.get('/').status_code == 500\n+            assert client.get(\"/\").status_code == 500\n \n     # we have to run this test in an isolated thread because if the\n     # debug flag is set to true and an exception happens the context is\n     # not torn down.  This causes other tests that run after this fail\n     # when they expect no exception on the stack.\n-    for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n+    for config_key in \"TESTING\", \"PROPAGATE_EXCEPTIONS\", \"DEBUG\", None:\n         t = Thread(target=apprunner, args=(config_key,))\n         t.start()\n         t.join()\n \n \n-@pytest.mark.parametrize('debug', [True, False])\n-@pytest.mark.parametrize('use_debugger', [True, False])\n-@pytest.mark.parametrize('use_reloader', [True, False])\n-@pytest.mark.parametrize('propagate_exceptions', [None, True, False])\n-def test_werkzeug_passthrough_errors(monkeypatch, debug, use_debugger,\n-                                     use_reloader, propagate_exceptions, app):\n+@pytest.mark.parametrize(\"debug\", [True, False])\n+@pytest.mark.parametrize(\"use_debugger\", [True, False])\n+@pytest.mark.parametrize(\"use_reloader\", [True, False])\n+@pytest.mark.parametrize(\"propagate_exceptions\", [None, True, False])\n+def test_werkzeug_passthrough_errors(\n+    monkeypatch, debug, use_debugger, use_reloader, propagate_exceptions, app\n+):\n     rv = {}\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(*args, **kwargs):\n-        rv['passthrough_errors'] = kwargs.get('passthrough_errors')\n+        rv[\"passthrough_errors\"] = kwargs.get(\"passthrough_errors\")\n \n-    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n-    app.config['PROPAGATE_EXCEPTIONS'] = propagate_exceptions\n+    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n+    app.config[\"PROPAGATE_EXCEPTIONS\"] = propagate_exceptions\n     app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reloader)\n \n \n def test_max_content_length(app, client):\n-    app.config['MAX_CONTENT_LENGTH'] = 64\n+    app.config[\"MAX_CONTENT_LENGTH\"] = 64\n \n     @app.before_request\n     def always_first():\n-        flask.request.form['myfile']\n+        flask.request.form[\"myfile\"]\n         assert False\n \n-    @app.route('/accept', methods=['POST'])\n+    @app.route(\"/accept\", methods=[\"POST\"])\n     def accept_file():\n-        flask.request.form['myfile']\n+        flask.request.form[\"myfile\"]\n         assert False\n \n     @app.errorhandler(413)\n     def catcher(error):\n-        return '42'\n+        return \"42\"\n \n-    rv = client.post('/accept', data={'myfile': 'foo' * 100})\n-    assert rv.data == b'42'\n+    rv = client.post(\"/accept\", data={\"myfile\": \"foo\" * 100})\n+    assert rv.data == b\"42\"\n \n \n def test_url_processors(app, client):\n-\n     @app.url_defaults\n     def add_language_code(endpoint, values):\n-        if flask.g.lang_code is not None and \\\n-                app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n-            values.setdefault('lang_code', flask.g.lang_code)\n+        if flask.g.lang_code is not None and app.url_map.is_endpoint_expecting(\n+            endpoint, \"lang_code\"\n+        ):\n+            values.setdefault(\"lang_code\", flask.g.lang_code)\n \n     @app.url_value_preprocessor\n     def pull_lang_code(endpoint, values):\n-        flask.g.lang_code = values.pop('lang_code', None)\n+        flask.g.lang_code = values.pop(\"lang_code\", None)\n \n-    @app.route('/<lang_code>/')\n+    @app.route(\"/<lang_code>/\")\n     def index():\n-        return flask.url_for('about')\n+        return flask.url_for(\"about\")\n \n-    @app.route('/<lang_code>/about')\n+    @app.route(\"/<lang_code>/about\")\n     def about():\n-        return flask.url_for('something_else')\n+        return flask.url_for(\"something_else\")\n \n-    @app.route('/foo')\n+    @app.route(\"/foo\")\n     def something_else():\n-        return flask.url_for('about', lang_code='en')\n+        return flask.url_for(\"about\", lang_code=\"en\")\n \n-    assert client.get('/de/').data == b'/de/about'\n-    assert client.get('/de/about').data == b'/foo'\n-    assert client.get('/foo').data == b'/en/about'\n+    assert client.get(\"/de/\").data == b\"/de/about\"\n+    assert client.get(\"/de/about\").data == b\"/foo\"\n+    assert client.get(\"/foo\").data == b\"/en/about\"\n \n \n def test_inject_blueprint_url_defaults(app):\n-    bp = flask.Blueprint('foo.bar.baz', __name__,\n-                         template_folder='template')\n+    bp = flask.Blueprint(\"foo.bar.baz\", __name__, template_folder=\"template\")\n \n     @bp.url_defaults\n     def bp_defaults(endpoint, values):\n-        values['page'] = 'login'\n+        values[\"page\"] = \"login\"\n \n-    @bp.route('/<page>')\n+    @bp.route(\"/<page>\")\n     def view(page):\n         pass\n \n     app.register_blueprint(bp)\n \n     values = dict()\n-    app.inject_url_defaults('foo.bar.baz.view', values)\n-    expected = dict(page='login')\n+    app.inject_url_defaults(\"foo.bar.baz.view\", values)\n+    expected = dict(page=\"login\")\n     assert values == expected\n \n-    with app.test_request_context('/somepage'):\n-        url = flask.url_for('foo.bar.baz.view')\n-    expected = '/login'\n+    with app.test_request_context(\"/somepage\"):\n+        url = flask.url_for(\"foo.bar.baz.view\")\n+    expected = \"/login\"\n     assert url == expected\n \n \n def test_nonascii_pathinfo(app, client):\n-    @app.route(u'/киртест')\n+    @app.route(u\"/киртест\")\n     def index():\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n-    rv = client.get(u'/киртест')\n-    assert rv.data == b'Hello World!'\n+    rv = client.get(u\"/киртест\")\n+    assert rv.data == b\"Hello World!\"\n \n \n def test_debug_mode_complains_after_first_request(app, client):\n     app.debug = True\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Awesome'\n+        return \"Awesome\"\n \n     assert not app.got_first_request\n-    assert client.get('/').data == b'Awesome'\n+    assert client.get(\"/\").data == b\"Awesome\"\n     with pytest.raises(AssertionError) as e:\n-        @app.route('/foo')\n+\n+        @app.route(\"/foo\")\n         def broken():\n-            return 'Meh'\n-    assert 'A setup function was called' in str(e)\n+            return \"Meh\"\n+\n+    assert \"A setup function was called\" in str(e)\n \n     app.debug = False\n \n-    @app.route('/foo')\n+    @app.route(\"/foo\")\n     def working():\n-        return 'Meh'\n+        return \"Meh\"\n \n-    assert client.get('/foo').data == b'Meh'\n+    assert client.get(\"/foo\").data == b\"Meh\"\n     assert app.got_first_request\n \n \n@@ -1657,9 +1637,9 @@ def test_before_first_request_functions(app, client):\n     def foo():\n         got.append(42)\n \n-    client.get('/')\n+    client.get(\"/\")\n     assert got == [42]\n-    client.get('/')\n+    client.get(\"/\")\n     assert got == [42]\n     assert app.got_first_request\n \n@@ -1686,61 +1666,60 @@ def test_before_first_request_functions_concurrent(app, client):\n def test_routing_redirect_debugging(app, client):\n     app.debug = True\n \n-    @app.route('/foo/', methods=['GET', 'POST'])\n+    @app.route(\"/foo/\", methods=[\"GET\", \"POST\"])\n     def foo():\n-        return 'success'\n+        return \"success\"\n \n     with client:\n         with pytest.raises(AssertionError) as e:\n-            client.post('/foo', data={})\n-        assert 'http://localhost/foo/' in str(e)\n-        assert ('Make sure to directly send '\n-                'your POST-request to this URL') in str(e)\n+            client.post(\"/foo\", data={})\n+        assert \"http://localhost/foo/\" in str(e)\n+        assert (\"Make sure to directly send \" \"your POST-request to this URL\") in str(e)\n \n-        rv = client.get('/foo', data={}, follow_redirects=True)\n-        assert rv.data == b'success'\n+        rv = client.get(\"/foo\", data={}, follow_redirects=True)\n+        assert rv.data == b\"success\"\n \n     app.debug = False\n     with client:\n-        rv = client.post('/foo', data={}, follow_redirects=True)\n-        assert rv.data == b'success'\n+        rv = client.post(\"/foo\", data={}, follow_redirects=True)\n+        assert rv.data == b\"success\"\n \n \n def test_route_decorator_custom_endpoint(app, client):\n     app.debug = True\n \n-    @app.route('/foo/')\n+    @app.route(\"/foo/\")\n     def foo():\n         return flask.request.endpoint\n \n-    @app.route('/bar/', endpoint='bar')\n+    @app.route(\"/bar/\", endpoint=\"bar\")\n     def for_bar():\n         return flask.request.endpoint\n \n-    @app.route('/bar/123', endpoint='123')\n+    @app.route(\"/bar/123\", endpoint=\"123\")\n     def for_bar_foo():\n         return flask.request.endpoint\n \n     with app.test_request_context():\n-        assert flask.url_for('foo') == '/foo/'\n-        assert flask.url_for('bar') == '/bar/'\n-        assert flask.url_for('123') == '/bar/123'\n+        assert flask.url_for(\"foo\") == \"/foo/\"\n+        assert flask.url_for(\"bar\") == \"/bar/\"\n+        assert flask.url_for(\"123\") == \"/bar/123\"\n \n-    assert client.get('/foo/').data == b'foo'\n-    assert client.get('/bar/').data == b'bar'\n-    assert client.get('/bar/123').data == b'123'\n+    assert client.get(\"/foo/\").data == b\"foo\"\n+    assert client.get(\"/bar/\").data == b\"bar\"\n+    assert client.get(\"/bar/123\").data == b\"123\"\n \n \n def test_preserve_only_once(app, client):\n     app.debug = True\n \n-    @app.route('/fail')\n+    @app.route(\"/fail\")\n     def fail_func():\n         1 // 0\n \n     for x in range(3):\n         with pytest.raises(ZeroDivisionError):\n-            client.get('/fail')\n+            client.get(\"/fail\")\n \n     assert flask._request_ctx_stack.top is not None\n     assert flask._app_ctx_stack.top is not None\n@@ -1754,13 +1733,13 @@ def test_preserve_remembers_exception(app, client):\n     app.debug = True\n     errors = []\n \n-    @app.route('/fail')\n+    @app.route(\"/fail\")\n     def fail_func():\n         1 // 0\n \n-    @app.route('/success')\n+    @app.route(\"/success\")\n     def success_func():\n-        return 'Okay'\n+        return \"Okay\"\n \n     @app.teardown_request\n     def teardown_handler(exc):\n@@ -1768,127 +1747,127 @@ def test_preserve_remembers_exception(app, client):\n \n     # After this failure we did not yet call the teardown handler\n     with pytest.raises(ZeroDivisionError):\n-        client.get('/fail')\n+        client.get(\"/fail\")\n     assert errors == []\n \n     # But this request triggers it, and it's an error\n-    client.get('/success')\n+    client.get(\"/success\")\n     assert len(errors) == 2\n     assert isinstance(errors[0], ZeroDivisionError)\n \n     # At this point another request does nothing.\n-    client.get('/success')\n+    client.get(\"/success\")\n     assert len(errors) == 3\n     assert errors[1] is None\n \n \n def test_get_method_on_g(app_ctx):\n-    assert flask.g.get('x') is None\n-    assert flask.g.get('x', 11) == 11\n+    assert flask.g.get(\"x\") is None\n+    assert flask.g.get(\"x\", 11) == 11\n     flask.g.x = 42\n-    assert flask.g.get('x') == 42\n+    assert flask.g.get(\"x\") == 42\n     assert flask.g.x == 42\n \n \n def test_g_iteration_protocol(app_ctx):\n     flask.g.foo = 23\n     flask.g.bar = 42\n-    assert 'foo' in flask.g\n-    assert 'foos' not in flask.g\n-    assert sorted(flask.g) == ['bar', 'foo']\n+    assert \"foo\" in flask.g\n+    assert \"foos\" not in flask.g\n+    assert sorted(flask.g) == [\"bar\", \"foo\"]\n \n \n def test_subdomain_basic_support():\n     app = flask.Flask(__name__, subdomain_matching=True)\n-    app.config['SERVER_NAME'] = 'localhost.localdomain'\n+    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n     client = app.test_client()\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def normal_index():\n-        return 'normal index'\n+        return \"normal index\"\n \n-    @app.route('/', subdomain='test')\n+    @app.route(\"/\", subdomain=\"test\")\n     def test_index():\n-        return 'test index'\n+        return \"test index\"\n \n-    rv = client.get('/', 'http://localhost.localdomain/')\n-    assert rv.data == b'normal index'\n+    rv = client.get(\"/\", \"http://localhost.localdomain/\")\n+    assert rv.data == b\"normal index\"\n \n-    rv = client.get('/', 'http://test.localhost.localdomain/')\n-    assert rv.data == b'test index'\n+    rv = client.get(\"/\", \"http://test.localhost.localdomain/\")\n+    assert rv.data == b\"test index\"\n \n \n def test_subdomain_matching():\n     app = flask.Flask(__name__, subdomain_matching=True)\n     client = app.test_client()\n-    app.config['SERVER_NAME'] = 'localhost.localdomain'\n+    app.config[\"SERVER_NAME\"] = \"localhost.localdomain\"\n \n-    @app.route('/', subdomain='<user>')\n+    @app.route(\"/\", subdomain=\"<user>\")\n     def index(user):\n-        return 'index for %s' % user\n+        return \"index for %s\" % user\n \n-    rv = client.get('/', 'http://mitsuhiko.localhost.localdomain/')\n-    assert rv.data == b'index for mitsuhiko'\n+    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain/\")\n+    assert rv.data == b\"index for mitsuhiko\"\n \n \n def test_subdomain_matching_with_ports():\n     app = flask.Flask(__name__, subdomain_matching=True)\n-    app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n+    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n     client = app.test_client()\n \n-    @app.route('/', subdomain='<user>')\n+    @app.route(\"/\", subdomain=\"<user>\")\n     def index(user):\n-        return 'index for %s' % user\n+        return \"index for %s\" % user\n \n-    rv = client.get('/', 'http://mitsuhiko.localhost.localdomain:3000/')\n-    assert rv.data == b'index for mitsuhiko'\n+    rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain:3000/\")\n+    assert rv.data == b\"index for mitsuhiko\"\n \n \n-@pytest.mark.parametrize('matching', (False, True))\n+@pytest.mark.parametrize(\"matching\", (False, True))\n def test_subdomain_matching_other_name(matching):\n     app = flask.Flask(__name__, subdomain_matching=matching)\n-    app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n+    app.config[\"SERVER_NAME\"] = \"localhost.localdomain:3000\"\n     client = app.test_client()\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return '', 204\n+        return \"\", 204\n \n     # ip address can't match name\n-    rv = client.get('/', 'http://127.0.0.1:3000/')\n+    rv = client.get(\"/\", \"http://127.0.0.1:3000/\")\n     assert rv.status_code == 404 if matching else 204\n \n     # allow all subdomains if matching is disabled\n-    rv = client.get('/', 'http://www.localhost.localdomain:3000/')\n+    rv = client.get(\"/\", \"http://www.localhost.localdomain:3000/\")\n     assert rv.status_code == 404 if matching else 204\n \n \n def test_multi_route_rules(app, client):\n-    @app.route('/')\n-    @app.route('/<test>/')\n-    def index(test='a'):\n+    @app.route(\"/\")\n+    @app.route(\"/<test>/\")\n+    def index(test=\"a\"):\n         return test\n \n-    rv = client.open('/')\n-    assert rv.data == b'a'\n-    rv = client.open('/b/')\n-    assert rv.data == b'b'\n+    rv = client.open(\"/\")\n+    assert rv.data == b\"a\"\n+    rv = client.open(\"/b/\")\n+    assert rv.data == b\"b\"\n \n \n def test_multi_route_class_views(app, client):\n     class View(object):\n         def __init__(self, app):\n-            app.add_url_rule('/', 'index', self.index)\n-            app.add_url_rule('/<test>/', 'index', self.index)\n+            app.add_url_rule(\"/\", \"index\", self.index)\n+            app.add_url_rule(\"/<test>/\", \"index\", self.index)\n \n-        def index(self, test='a'):\n+        def index(self, test=\"a\"):\n             return test\n \n     _ = View(app)\n-    rv = client.open('/')\n-    assert rv.data == b'a'\n-    rv = client.open('/b/')\n-    assert rv.data == b'b'\n+    rv = client.open(\"/\")\n+    assert rv.data == b\"a\"\n+    rv = client.open(\"/b/\")\n+    assert rv.data == b\"b\"\n \n \n def test_run_defaults(monkeypatch, app):\n@@ -1896,11 +1875,11 @@ def test_run_defaults(monkeypatch, app):\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(*args, **kwargs):\n-        rv['result'] = 'running...'\n+        rv[\"result\"] = \"running...\"\n \n-    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n     app.run()\n-    assert rv['result'] == 'running...'\n+    assert rv[\"result\"] == \"running...\"\n \n \n def test_run_server_port(monkeypatch, app):\n@@ -1908,55 +1887,58 @@ def test_run_server_port(monkeypatch, app):\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(hostname, port, application, *args, **kwargs):\n-        rv['result'] = 'running on %s:%s ...' % (hostname, port)\n+        rv[\"result\"] = \"running on %s:%s ...\" % (hostname, port)\n \n-    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n-    hostname, port = 'localhost', 8000\n+    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n+    hostname, port = \"localhost\", 8000\n     app.run(hostname, port, debug=True)\n-    assert rv['result'] == 'running on %s:%s ...' % (hostname, port)\n+    assert rv[\"result\"] == \"running on %s:%s ...\" % (hostname, port)\n \n \n-@pytest.mark.parametrize('host,port,expect_host,expect_port', (\n-        (None, None, 'pocoo.org', 8080),\n-        ('localhost', None, 'localhost', 8080),\n-        (None, 80, 'pocoo.org', 80),\n-        ('localhost', 80, 'localhost', 80),\n-))\n+@pytest.mark.parametrize(\n+    \"host,port,expect_host,expect_port\",\n+    (\n+        (None, None, \"pocoo.org\", 8080),\n+        (\"localhost\", None, \"localhost\", 8080),\n+        (None, 80, \"pocoo.org\", 80),\n+        (\"localhost\", 80, \"localhost\", 80),\n+    ),\n+)\n def test_run_from_config(monkeypatch, host, port, expect_host, expect_port, app):\n     def run_simple_mock(hostname, port, *args, **kwargs):\n         assert hostname == expect_host\n         assert port == expect_port\n \n-    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n-    app.config['SERVER_NAME'] = 'pocoo.org:8080'\n+    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n+    app.config[\"SERVER_NAME\"] = \"pocoo.org:8080\"\n     app.run(host, port)\n \n \n def test_max_cookie_size(app, client, recwarn):\n-    app.config['MAX_COOKIE_SIZE'] = 100\n+    app.config[\"MAX_COOKIE_SIZE\"] = 100\n \n     # outside app context, default to Werkzeug static value,\n     # which is also the default config\n     response = flask.Response()\n-    default = flask.Flask.default_config['MAX_COOKIE_SIZE']\n+    default = flask.Flask.default_config[\"MAX_COOKIE_SIZE\"]\n     assert response.max_cookie_size == default\n \n     # inside app context, use app config\n     with app.app_context():\n         assert flask.Response().max_cookie_size == 100\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        r = flask.Response('', status=204)\n-        r.set_cookie('foo', 'bar' * 100)\n+        r = flask.Response(\"\", status=204)\n+        r.set_cookie(\"foo\", \"bar\" * 100)\n         return r\n \n-    client.get('/')\n+    client.get(\"/\")\n     assert len(recwarn) == 1\n     w = recwarn.pop()\n-    assert 'cookie is too large' in str(w.message)\n+    assert \"cookie is too large\" in str(w.message)\n \n-    app.config['MAX_COOKIE_SIZE'] = 0\n+    app.config[\"MAX_COOKIE_SIZE\"] = 0\n \n-    client.get('/')\n+    client.get(\"/\")\n     assert len(recwarn) == 0\n\n@@ -20,27 +20,27 @@ from jinja2 import TemplateNotFound\n \n \n def test_blueprint_specific_error_handling(app, client):\n-    frontend = flask.Blueprint('frontend', __name__)\n-    backend = flask.Blueprint('backend', __name__)\n-    sideend = flask.Blueprint('sideend', __name__)\n+    frontend = flask.Blueprint(\"frontend\", __name__)\n+    backend = flask.Blueprint(\"backend\", __name__)\n+    sideend = flask.Blueprint(\"sideend\", __name__)\n \n     @frontend.errorhandler(403)\n     def frontend_forbidden(e):\n-        return 'frontend says no', 403\n+        return \"frontend says no\", 403\n \n-    @frontend.route('/frontend-no')\n+    @frontend.route(\"/frontend-no\")\n     def frontend_no():\n         flask.abort(403)\n \n     @backend.errorhandler(403)\n     def backend_forbidden(e):\n-        return 'backend says no', 403\n+        return \"backend says no\", 403\n \n-    @backend.route('/backend-no')\n+    @backend.route(\"/backend-no\")\n     def backend_no():\n         flask.abort(403)\n \n-    @sideend.route('/what-is-a-sideend')\n+    @sideend.route(\"/what-is-a-sideend\")\n     def sideend_no():\n         flask.abort(403)\n \n@@ -50,11 +50,11 @@ def test_blueprint_specific_error_handling(app, client):\n \n     @app.errorhandler(403)\n     def app_forbidden(e):\n-        return 'application itself says no', 403\n+        return \"application itself says no\", 403\n \n-    assert client.get('/frontend-no').data == b'frontend says no'\n-    assert client.get('/backend-no').data == b'backend says no'\n-    assert client.get('/what-is-a-sideend').data == b'application itself says no'\n+    assert client.get(\"/frontend-no\").data == b\"frontend says no\"\n+    assert client.get(\"/backend-no\").data == b\"backend says no\"\n+    assert client.get(\"/what-is-a-sideend\").data == b\"application itself says no\"\n \n \n def test_blueprint_specific_user_error_handling(app, client):\n@@ -64,167 +64,174 @@ def test_blueprint_specific_user_error_handling(app, client):\n     class MyFunctionException(Exception):\n         pass\n \n-    blue = flask.Blueprint('blue', __name__)\n+    blue = flask.Blueprint(\"blue\", __name__)\n \n     @blue.errorhandler(MyDecoratorException)\n     def my_decorator_exception_handler(e):\n         assert isinstance(e, MyDecoratorException)\n-        return 'boom'\n+        return \"boom\"\n \n     def my_function_exception_handler(e):\n         assert isinstance(e, MyFunctionException)\n-        return 'bam'\n+        return \"bam\"\n \n     blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n \n-    @blue.route('/decorator')\n+    @blue.route(\"/decorator\")\n     def blue_deco_test():\n         raise MyDecoratorException()\n \n-    @blue.route('/function')\n+    @blue.route(\"/function\")\n     def blue_func_test():\n         raise MyFunctionException()\n \n     app.register_blueprint(blue)\n \n-    assert client.get('/decorator').data == b'boom'\n-    assert client.get('/function').data == b'bam'\n+    assert client.get(\"/decorator\").data == b\"boom\"\n+    assert client.get(\"/function\").data == b\"bam\"\n \n \n def test_blueprint_app_error_handling(app, client):\n-    errors = flask.Blueprint('errors', __name__)\n+    errors = flask.Blueprint(\"errors\", __name__)\n \n     @errors.app_errorhandler(403)\n     def forbidden_handler(e):\n-        return 'you shall not pass', 403\n+        return \"you shall not pass\", 403\n \n-    @app.route('/forbidden')\n+    @app.route(\"/forbidden\")\n     def app_forbidden():\n         flask.abort(403)\n \n-    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n+    forbidden_bp = flask.Blueprint(\"forbidden_bp\", __name__)\n \n-    @forbidden_bp.route('/nope')\n+    @forbidden_bp.route(\"/nope\")\n     def bp_forbidden():\n         flask.abort(403)\n \n     app.register_blueprint(errors)\n     app.register_blueprint(forbidden_bp)\n \n-    assert client.get('/forbidden').data == b'you shall not pass'\n-    assert client.get('/nope').data == b'you shall not pass'\n+    assert client.get(\"/forbidden\").data == b\"you shall not pass\"\n+    assert client.get(\"/nope\").data == b\"you shall not pass\"\n \n \n-@pytest.mark.parametrize(('prefix', 'rule', 'url'), (\n-    ('', '/', '/'),\n-    ('/', '', '/'),\n-    ('/', '/', '/'),\n-    ('/foo', '', '/foo'),\n-    ('/foo/', '', '/foo/'),\n-    ('', '/bar', '/bar'),\n-    ('/foo/', '/bar', '/foo/bar'),\n-    ('/foo/', 'bar', '/foo/bar'),\n-    ('/foo', '/bar', '/foo/bar'),\n-    ('/foo/', '//bar', '/foo/bar'),\n-    ('/foo//', '/bar', '/foo/bar'),\n-))\n+@pytest.mark.parametrize(\n+    (\"prefix\", \"rule\", \"url\"),\n+    (\n+        (\"\", \"/\", \"/\"),\n+        (\"/\", \"\", \"/\"),\n+        (\"/\", \"/\", \"/\"),\n+        (\"/foo\", \"\", \"/foo\"),\n+        (\"/foo/\", \"\", \"/foo/\"),\n+        (\"\", \"/bar\", \"/bar\"),\n+        (\"/foo/\", \"/bar\", \"/foo/bar\"),\n+        (\"/foo/\", \"bar\", \"/foo/bar\"),\n+        (\"/foo\", \"/bar\", \"/foo/bar\"),\n+        (\"/foo/\", \"//bar\", \"/foo/bar\"),\n+        (\"/foo//\", \"/bar\", \"/foo/bar\"),\n+    ),\n+)\n def test_blueprint_prefix_slash(app, client, prefix, rule, url):\n-    bp = flask.Blueprint('test', __name__, url_prefix=prefix)\n+    bp = flask.Blueprint(\"test\", __name__, url_prefix=prefix)\n \n     @bp.route(rule)\n     def index():\n-        return '', 204\n+        return \"\", 204\n \n     app.register_blueprint(bp)\n     assert client.get(url).status_code == 204\n \n \n def test_blueprint_url_defaults(app, client):\n-    bp = flask.Blueprint('test', __name__)\n+    bp = flask.Blueprint(\"test\", __name__)\n \n-    @bp.route('/foo', defaults={'baz': 42})\n+    @bp.route(\"/foo\", defaults={\"baz\": 42})\n     def foo(bar, baz):\n-        return '%s/%d' % (bar, baz)\n+        return \"%s/%d\" % (bar, baz)\n \n-    @bp.route('/bar')\n+    @bp.route(\"/bar\")\n     def bar(bar):\n         return text_type(bar)\n \n-    app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n-    app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n+    app.register_blueprint(bp, url_prefix=\"/1\", url_defaults={\"bar\": 23})\n+    app.register_blueprint(bp, url_prefix=\"/2\", url_defaults={\"bar\": 19})\n \n-    assert client.get('/1/foo').data == b'23/42'\n-    assert client.get('/2/foo').data == b'19/42'\n-    assert client.get('/1/bar').data == b'23'\n-    assert client.get('/2/bar').data == b'19'\n+    assert client.get(\"/1/foo\").data == b\"23/42\"\n+    assert client.get(\"/2/foo\").data == b\"19/42\"\n+    assert client.get(\"/1/bar\").data == b\"23\"\n+    assert client.get(\"/2/bar\").data == b\"19\"\n \n \n def test_blueprint_url_processors(app, client):\n-    bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n+    bp = flask.Blueprint(\"frontend\", __name__, url_prefix=\"/<lang_code>\")\n \n     @bp.url_defaults\n     def add_language_code(endpoint, values):\n-        values.setdefault('lang_code', flask.g.lang_code)\n+        values.setdefault(\"lang_code\", flask.g.lang_code)\n \n     @bp.url_value_preprocessor\n     def pull_lang_code(endpoint, values):\n-        flask.g.lang_code = values.pop('lang_code')\n+        flask.g.lang_code = values.pop(\"lang_code\")\n \n-    @bp.route('/')\n+    @bp.route(\"/\")\n     def index():\n-        return flask.url_for('.about')\n+        return flask.url_for(\".about\")\n \n-    @bp.route('/about')\n+    @bp.route(\"/about\")\n     def about():\n-        return flask.url_for('.index')\n+        return flask.url_for(\".index\")\n \n     app.register_blueprint(bp)\n \n-    assert client.get('/de/').data == b'/de/about'\n-    assert client.get('/de/about').data == b'/de/'\n+    assert client.get(\"/de/\").data == b\"/de/about\"\n+    assert client.get(\"/de/about\").data == b\"/de/\"\n \n \n def test_templates_and_static(test_apps):\n     from blueprintapp import app\n+\n     client = app.test_client()\n \n-    rv = client.get('/')\n-    assert rv.data == b'Hello from the Frontend'\n-    rv = client.get('/admin/')\n-    assert rv.data == b'Hello from the Admin'\n-    rv = client.get('/admin/index2')\n-    assert rv.data == b'Hello from the Admin'\n-    rv = client.get('/admin/static/test.txt')\n-    assert rv.data.strip() == b'Admin File'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"Hello from the Frontend\"\n+    rv = client.get(\"/admin/\")\n+    assert rv.data == b\"Hello from the Admin\"\n+    rv = client.get(\"/admin/index2\")\n+    assert rv.data == b\"Hello from the Admin\"\n+    rv = client.get(\"/admin/static/test.txt\")\n+    assert rv.data.strip() == b\"Admin File\"\n     rv.close()\n-    rv = client.get('/admin/static/css/test.css')\n-    assert rv.data.strip() == b'/* nested file */'\n+    rv = client.get(\"/admin/static/css/test.css\")\n+    assert rv.data.strip() == b\"/* nested file */\"\n     rv.close()\n \n     # try/finally, in case other tests use this app for Blueprint tests.\n-    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+    max_age_default = app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n     try:\n         expected_max_age = 3600\n-        if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n+        if app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] == expected_max_age:\n             expected_max_age = 7200\n-        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n-        rv = client.get('/admin/static/css/test.css')\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = expected_max_age\n+        rv = client.get(\"/admin/static/css/test.css\")\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == expected_max_age\n         rv.close()\n     finally:\n-        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n+        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n     with app.test_request_context():\n-        assert flask.url_for('admin.static', filename='test.txt') == '/admin/static/test.txt'\n+        assert (\n+            flask.url_for(\"admin.static\", filename=\"test.txt\")\n+            == \"/admin/static/test.txt\"\n+        )\n \n     with app.test_request_context():\n         with pytest.raises(TemplateNotFound) as e:\n-            flask.render_template('missing.html')\n-        assert e.value.name == 'missing.html'\n+            flask.render_template(\"missing.html\")\n+        assert e.value.name == \"missing.html\"\n \n     with flask.Flask(__name__).test_request_context():\n-        assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+        assert flask.render_template(\"nested/nested.txt\") == \"I'm nested\"\n \n \n def test_default_static_cache_timeout(app):\n@@ -232,625 +239,626 @@ def test_default_static_cache_timeout(app):\n         def get_send_file_max_age(self, filename):\n             return 100\n \n-    blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n+    blueprint = MyBlueprint(\"blueprint\", __name__, static_folder=\"static\")\n     app.register_blueprint(blueprint)\n \n     # try/finally, in case other tests use this app for Blueprint tests.\n-    max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+    max_age_default = app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n     try:\n         with app.test_request_context():\n             unexpected_max_age = 3600\n-            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n+            if app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] == unexpected_max_age:\n                 unexpected_max_age = 7200\n-            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n-            rv = blueprint.send_static_file('index.html')\n-            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = unexpected_max_age\n+            rv = blueprint.send_static_file(\"index.html\")\n+            cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n             assert cc.max_age == 100\n             rv.close()\n     finally:\n-        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n+        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n def test_templates_list(test_apps):\n     from blueprintapp import app\n+\n     templates = sorted(app.jinja_env.list_templates())\n-    assert templates == ['admin/index.html', 'frontend/index.html']\n+    assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n def test_dotted_names(app, client):\n-    frontend = flask.Blueprint('myapp.frontend', __name__)\n-    backend = flask.Blueprint('myapp.backend', __name__)\n+    frontend = flask.Blueprint(\"myapp.frontend\", __name__)\n+    backend = flask.Blueprint(\"myapp.backend\", __name__)\n \n-    @frontend.route('/fe')\n+    @frontend.route(\"/fe\")\n     def frontend_index():\n-        return flask.url_for('myapp.backend.backend_index')\n+        return flask.url_for(\"myapp.backend.backend_index\")\n \n-    @frontend.route('/fe2')\n+    @frontend.route(\"/fe2\")\n     def frontend_page2():\n-        return flask.url_for('.frontend_index')\n+        return flask.url_for(\".frontend_index\")\n \n-    @backend.route('/be')\n+    @backend.route(\"/be\")\n     def backend_index():\n-        return flask.url_for('myapp.frontend.frontend_index')\n+        return flask.url_for(\"myapp.frontend.frontend_index\")\n \n     app.register_blueprint(frontend)\n     app.register_blueprint(backend)\n \n-    assert client.get('/fe').data.strip() == b'/be'\n-    assert client.get('/fe2').data.strip() == b'/fe'\n-    assert client.get('/be').data.strip() == b'/fe'\n+    assert client.get(\"/fe\").data.strip() == b\"/be\"\n+    assert client.get(\"/fe2\").data.strip() == b\"/fe\"\n+    assert client.get(\"/be\").data.strip() == b\"/fe\"\n \n \n def test_dotted_names_from_app(app, client):\n-    test = flask.Blueprint('test', __name__)\n+    test = flask.Blueprint(\"test\", __name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def app_index():\n-        return flask.url_for('test.index')\n+        return flask.url_for(\"test.index\")\n \n-    @test.route('/test/')\n+    @test.route(\"/test/\")\n     def index():\n-        return flask.url_for('app_index')\n+        return flask.url_for(\"app_index\")\n \n     app.register_blueprint(test)\n \n-    rv = client.get('/')\n-    assert rv.data == b'/test/'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"/test/\"\n \n \n def test_empty_url_defaults(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.route('/', defaults={'page': 1})\n-    @bp.route('/page/<int:page>')\n+    @bp.route(\"/\", defaults={\"page\": 1})\n+    @bp.route(\"/page/<int:page>\")\n     def something(page):\n         return str(page)\n \n     app.register_blueprint(bp)\n \n-    assert client.get('/').data == b'1'\n-    assert client.get('/page/2').data == b'2'\n+    assert client.get(\"/\").data == b\"1\"\n+    assert client.get(\"/page/2\").data == b\"2\"\n \n \n def test_route_decorator_custom_endpoint(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.route('/foo')\n+    @bp.route(\"/foo\")\n     def foo():\n         return flask.request.endpoint\n \n-    @bp.route('/bar', endpoint='bar')\n+    @bp.route(\"/bar\", endpoint=\"bar\")\n     def foo_bar():\n         return flask.request.endpoint\n \n-    @bp.route('/bar/123', endpoint='123')\n+    @bp.route(\"/bar/123\", endpoint=\"123\")\n     def foo_bar_foo():\n         return flask.request.endpoint\n \n-    @bp.route('/bar/foo')\n+    @bp.route(\"/bar/foo\")\n     def bar_foo():\n         return flask.request.endpoint\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.request.endpoint\n \n-    assert client.get('/').data == b'index'\n-    assert client.get('/py/foo').data == b'bp.foo'\n-    assert client.get('/py/bar').data == b'bp.bar'\n-    assert client.get('/py/bar/123').data == b'bp.123'\n-    assert client.get('/py/bar/foo').data == b'bp.bar_foo'\n+    assert client.get(\"/\").data == b\"index\"\n+    assert client.get(\"/py/foo\").data == b\"bp.foo\"\n+    assert client.get(\"/py/bar\").data == b\"bp.bar\"\n+    assert client.get(\"/py/bar/123\").data == b\"bp.123\"\n+    assert client.get(\"/py/bar/foo\").data == b\"bp.bar_foo\"\n \n \n def test_route_decorator_custom_endpoint_with_dots(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.route('/foo')\n+    @bp.route(\"/foo\")\n     def foo():\n         return flask.request.endpoint\n \n     try:\n-        @bp.route('/bar', endpoint='bar.bar')\n+\n+        @bp.route(\"/bar\", endpoint=\"bar.bar\")\n         def foo_bar():\n             return flask.request.endpoint\n+\n     except AssertionError:\n         pass\n     else:\n-        raise AssertionError('expected AssertionError not raised')\n+        raise AssertionError(\"expected AssertionError not raised\")\n \n     try:\n-        @bp.route('/bar/123', endpoint='bar.123')\n+\n+        @bp.route(\"/bar/123\", endpoint=\"bar.123\")\n         def foo_bar_foo():\n             return flask.request.endpoint\n+\n     except AssertionError:\n         pass\n     else:\n-        raise AssertionError('expected AssertionError not raised')\n+        raise AssertionError(\"expected AssertionError not raised\")\n \n     def foo_foo_foo():\n         pass\n \n     pytest.raises(\n         AssertionError,\n-        lambda: bp.add_url_rule(\n-            '/bar/123', endpoint='bar.123', view_func=foo_foo_foo\n-        )\n+        lambda: bp.add_url_rule(\"/bar/123\", endpoint=\"bar.123\", view_func=foo_foo_foo),\n     )\n \n     pytest.raises(\n-        AssertionError,\n-        bp.route('/bar/123', endpoint='bar.123'),\n-        lambda: None\n+        AssertionError, bp.route(\"/bar/123\", endpoint=\"bar.123\"), lambda: None\n     )\n \n-    foo_foo_foo.__name__ = 'bar.123'\n+    foo_foo_foo.__name__ = \"bar.123\"\n \n     pytest.raises(\n-        AssertionError,\n-        lambda: bp.add_url_rule(\n-            '/bar/123', view_func=foo_foo_foo\n-        )\n+        AssertionError, lambda: bp.add_url_rule(\"/bar/123\", view_func=foo_foo_foo)\n     )\n \n-    bp.add_url_rule('/bar/456', endpoint='foofoofoo', view_func=functools.partial(foo_foo_foo))\n+    bp.add_url_rule(\n+        \"/bar/456\", endpoint=\"foofoofoo\", view_func=functools.partial(foo_foo_foo)\n+    )\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    assert client.get('/py/foo').data == b'bp.foo'\n+    assert client.get(\"/py/foo\").data == b\"bp.foo\"\n     # The rule's didn't actually made it through\n-    rv = client.get('/py/bar')\n+    rv = client.get(\"/py/bar\")\n     assert rv.status_code == 404\n-    rv = client.get('/py/bar/123')\n+    rv = client.get(\"/py/bar/123\")\n     assert rv.status_code == 404\n \n \n def test_endpoint_decorator(app, client):\n     from werkzeug.routing import Rule\n-    app.url_map.add(Rule('/foo', endpoint='bar'))\n \n-    bp = flask.Blueprint('bp', __name__)\n+    app.url_map.add(Rule(\"/foo\", endpoint=\"bar\"))\n \n-    @bp.endpoint('bar')\n+    bp = flask.Blueprint(\"bp\", __name__)\n+\n+    @bp.endpoint(\"bar\")\n     def foobar():\n         return flask.request.endpoint\n \n-    app.register_blueprint(bp, url_prefix='/bp_prefix')\n+    app.register_blueprint(bp, url_prefix=\"/bp_prefix\")\n \n-    assert client.get('/foo').data == b'bar'\n-    assert client.get('/bp_prefix/bar').status_code == 404\n+    assert client.get(\"/foo\").data == b\"bar\"\n+    assert client.get(\"/bp_prefix/bar\").status_code == 404\n \n \n def test_template_filter(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_filter()\n     def my_reverse(s):\n         return s[::-1]\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'my_reverse' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['my_reverse'] == my_reverse\n-    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"my_reverse\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n+    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n \n \n def test_add_template_filter(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def my_reverse(s):\n         return s[::-1]\n \n     bp.add_app_template_filter(my_reverse)\n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'my_reverse' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['my_reverse'] == my_reverse\n-    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"my_reverse\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n+    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n \n \n def test_template_filter_with_name(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.app_template_filter('strrev')\n+    @bp.app_template_filter(\"strrev\")\n     def my_reverse(s):\n         return s[::-1]\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'strrev' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['strrev'] == my_reverse\n-    assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"strrev\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n+    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n \n \n def test_add_template_filter_with_name(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def my_reverse(s):\n         return s[::-1]\n \n-    bp.add_app_template_filter(my_reverse, 'strrev')\n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'strrev' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['strrev'] == my_reverse\n-    assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+    bp.add_app_template_filter(my_reverse, \"strrev\")\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"strrev\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n+    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n \n \n def test_template_filter_with_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_filter()\n     def super_reverse(s):\n         return s[::-1]\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_template_filter_after_route_with_template(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_filter()\n     def super_reverse(s):\n         return s[::-1]\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_add_template_filter_with_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def super_reverse(s):\n         return s[::-1]\n \n     bp.add_app_template_filter(super_reverse)\n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_template_filter_with_name_and_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.app_template_filter('super_reverse')\n+    @bp.app_template_filter(\"super_reverse\")\n     def my_reverse(s):\n         return s[::-1]\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_add_template_filter_with_name_and_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def my_reverse(s):\n         return s[::-1]\n \n-    bp.add_app_template_filter(my_reverse, 'super_reverse')\n-    app.register_blueprint(bp, url_prefix='/py')\n+    bp.add_app_template_filter(my_reverse, \"super_reverse\")\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_template_test(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_test()\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'is_boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['is_boolean'] == is_boolean\n-    assert app.jinja_env.tests['is_boolean'](False)\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"is_boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"is_boolean\"](False)\n \n \n def test_add_template_test(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def is_boolean(value):\n         return isinstance(value, bool)\n \n     bp.add_app_template_test(is_boolean)\n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'is_boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['is_boolean'] == is_boolean\n-    assert app.jinja_env.tests['is_boolean'](False)\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"is_boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"is_boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"is_boolean\"](False)\n \n \n def test_template_test_with_name(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.app_template_test('boolean')\n+    @bp.app_template_test(\"boolean\")\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == is_boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_add_template_test_with_name(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    bp.add_app_template_test(is_boolean, 'boolean')\n-    app.register_blueprint(bp, url_prefix='/py')\n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == is_boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    bp.add_app_template_test(is_boolean, \"boolean\")\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_template_test_with_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_template_test_after_route_with_template(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n \n-    app.register_blueprint(bp, url_prefix='/py')\n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_add_template_test_with_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def boolean(value):\n         return isinstance(value, bool)\n \n     bp.add_app_template_test(boolean)\n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_template_test_with_name_and_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n-    @bp.app_template_test('boolean')\n+    @bp.app_template_test(\"boolean\")\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    app.register_blueprint(bp, url_prefix='/py')\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_add_template_test_with_name_and_template(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    bp.add_app_template_test(is_boolean, 'boolean')\n-    app.register_blueprint(bp, url_prefix='/py')\n+    bp.add_app_template_test(is_boolean, \"boolean\")\n+    app.register_blueprint(bp, url_prefix=\"/py\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_context_processing(app, client):\n-    answer_bp = flask.Blueprint('answer_bp', __name__)\n+    answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n \n     template_string = lambda: flask.render_template_string(\n-        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n-        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n+        \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n+        \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n     )\n \n     # App global context processor\n     @answer_bp.app_context_processor\n     def not_answer_context_processor():\n-        return {'notanswer': 43}\n+        return {\"notanswer\": 43}\n \n     # Blueprint local context processor\n     @answer_bp.context_processor\n     def answer_context_processor():\n-        return {'answer': 42}\n+        return {\"answer\": 42}\n \n     # Setup endpoints for testing\n-    @answer_bp.route('/bp')\n+    @answer_bp.route(\"/bp\")\n     def bp_page():\n         return template_string()\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def app_page():\n         return template_string()\n \n     # Register the blueprint\n     app.register_blueprint(answer_bp)\n \n-    app_page_bytes = client.get('/').data\n-    answer_page_bytes = client.get('/bp').data\n+    app_page_bytes = client.get(\"/\").data\n+    answer_page_bytes = client.get(\"/bp\").data\n \n-    assert b'43' in app_page_bytes\n-    assert b'42' not in app_page_bytes\n+    assert b\"43\" in app_page_bytes\n+    assert b\"42\" not in app_page_bytes\n \n-    assert b'42' in answer_page_bytes\n-    assert b'43' in answer_page_bytes\n+    assert b\"42\" in answer_page_bytes\n+    assert b\"43\" in answer_page_bytes\n \n \n def test_template_global(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.app_template_global()\n     def get_answer():\n         return 42\n \n     # Make sure the function is not in the jinja_env already\n-    assert 'get_answer' not in app.jinja_env.globals.keys()\n+    assert \"get_answer\" not in app.jinja_env.globals.keys()\n     app.register_blueprint(bp)\n \n     # Tests\n-    assert 'get_answer' in app.jinja_env.globals.keys()\n-    assert app.jinja_env.globals['get_answer'] is get_answer\n-    assert app.jinja_env.globals['get_answer']() == 42\n+    assert \"get_answer\" in app.jinja_env.globals.keys()\n+    assert app.jinja_env.globals[\"get_answer\"] is get_answer\n+    assert app.jinja_env.globals[\"get_answer\"]() == 42\n \n     with app.app_context():\n-        rv = flask.render_template_string('{{ get_answer() }}')\n-        assert rv == '42'\n+        rv = flask.render_template_string(\"{{ get_answer() }}\")\n+        assert rv == \"42\"\n \n \n def test_request_processing(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n     evts = []\n \n     @bp.before_request\n     def before_bp():\n-        evts.append('before')\n+        evts.append(\"before\")\n \n     @bp.after_request\n     def after_bp(response):\n-        response.data += b'|after'\n-        evts.append('after')\n+        response.data += b\"|after\"\n+        evts.append(\"after\")\n         return response\n \n     @bp.teardown_request\n     def teardown_bp(exc):\n-        evts.append('teardown')\n+        evts.append(\"teardown\")\n \n     # Setup routes for testing\n-    @bp.route('/bp')\n+    @bp.route(\"/bp\")\n     def bp_endpoint():\n-        return 'request'\n+        return \"request\"\n \n     app.register_blueprint(bp)\n \n     assert evts == []\n-    rv = client.get('/bp')\n-    assert rv.data == b'request|after'\n-    assert evts == ['before', 'after', 'teardown']\n+    rv = client.get(\"/bp\")\n+    assert rv.data == b\"request|after\"\n+    assert evts == [\"before\", \"after\", \"teardown\"]\n \n \n def test_app_request_processing(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n     evts = []\n \n     @bp.before_app_first_request\n     def before_first_request():\n-        evts.append('first')\n+        evts.append(\"first\")\n \n     @bp.before_app_request\n     def before_app():\n-        evts.append('before')\n+        evts.append(\"before\")\n \n     @bp.after_app_request\n     def after_app(response):\n-        response.data += b'|after'\n-        evts.append('after')\n+        response.data += b\"|after\"\n+        evts.append(\"after\")\n         return response\n \n     @bp.teardown_app_request\n     def teardown_app(exc):\n-        evts.append('teardown')\n+        evts.append(\"teardown\")\n \n     app.register_blueprint(bp)\n \n     # Setup routes for testing\n-    @app.route('/')\n+    @app.route(\"/\")\n     def bp_endpoint():\n-        return 'request'\n+        return \"request\"\n \n     # before first request\n     assert evts == []\n \n     # first request\n-    resp = client.get('/').data\n-    assert resp == b'request|after'\n-    assert evts == ['first', 'before', 'after', 'teardown']\n+    resp = client.get(\"/\").data\n+    assert resp == b\"request|after\"\n+    assert evts == [\"first\", \"before\", \"after\", \"teardown\"]\n \n     # second request\n-    resp = client.get('/').data\n-    assert resp == b'request|after'\n-    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2\n+    resp = client.get(\"/\").data\n+    assert resp == b\"request|after\"\n+    assert evts == [\"first\"] + [\"before\", \"after\", \"teardown\"] * 2\n \n \n def test_app_url_processors(app, client):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     # Register app-wide url defaults and preprocessor on blueprint\n     @bp.app_url_defaults\n     def add_language_code(endpoint, values):\n-        values.setdefault('lang_code', flask.g.lang_code)\n+        values.setdefault(\"lang_code\", flask.g.lang_code)\n \n     @bp.app_url_value_preprocessor\n     def pull_lang_code(endpoint, values):\n-        flask.g.lang_code = values.pop('lang_code')\n+        flask.g.lang_code = values.pop(\"lang_code\")\n \n     # Register route rules at the app level\n-    @app.route('/<lang_code>/')\n+    @app.route(\"/<lang_code>/\")\n     def index():\n-        return flask.url_for('about')\n+        return flask.url_for(\"about\")\n \n-    @app.route('/<lang_code>/about')\n+    @app.route(\"/<lang_code>/about\")\n     def about():\n-        return flask.url_for('index')\n+        return flask.url_for(\"index\")\n \n     app.register_blueprint(bp)\n \n-    assert client.get('/de/').data == b'/de/about'\n-    assert client.get('/de/about').data == b'/de/'\n+    assert client.get(\"/de/\").data == b\"/de/about\"\n+    assert client.get(\"/de/about\").data == b\"/de/\"\n\n@@ -25,15 +25,22 @@ from click.testing import CliRunner\n \n from flask import Flask, current_app\n from flask.cli import (\n-    AppGroup, FlaskGroup, NoAppException, ScriptInfo, dotenv, find_best_app,\n-    get_version, load_dotenv, locate_app, prepare_import, run_command,\n-    with_appcontext\n+    AppGroup,\n+    FlaskGroup,\n+    NoAppException,\n+    ScriptInfo,\n+    dotenv,\n+    find_best_app,\n+    get_version,\n+    load_dotenv,\n+    locate_app,\n+    prepare_import,\n+    run_command,\n+    with_appcontext,\n )\n \n cwd = os.getcwd()\n-test_path = os.path.abspath(os.path.join(\n-    os.path.dirname(__file__), 'test_apps'\n-))\n+test_path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"test_apps\"))\n \n \n @pytest.fixture\n@@ -44,6 +51,7 @@ def runner():\n def test_cli_name(test_apps):\n     \"\"\"Make sure the CLI object's name is the app's name and not the app itself\"\"\"\n     from cliapp.app import testapp\n+\n     assert testapp.cli.name == testapp.name\n \n \n@@ -52,67 +60,67 @@ def test_find_best_app(test_apps):\n     script_info = ScriptInfo()\n \n     class Module:\n-        app = Flask('appname')\n+        app = Flask(\"appname\")\n \n     assert find_best_app(script_info, Module) == Module.app\n \n     class Module:\n-        application = Flask('appname')\n+        application = Flask(\"appname\")\n \n     assert find_best_app(script_info, Module) == Module.application\n \n     class Module:\n-        myapp = Flask('appname')\n+        myapp = Flask(\"appname\")\n \n     assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         @staticmethod\n         def create_app():\n-            return Flask('appname')\n+            return Flask(\"appname\")\n \n     assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == 'appname'\n+    assert find_best_app(script_info, Module).name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def create_app(foo):\n-            return Flask('appname')\n+            return Flask(\"appname\")\n \n     assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == 'appname'\n+    assert find_best_app(script_info, Module).name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def create_app(foo=None, script_info=None):\n-            return Flask('appname')\n+            return Flask(\"appname\")\n \n     assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == 'appname'\n+    assert find_best_app(script_info, Module).name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def make_app():\n-            return Flask('appname')\n+            return Flask(\"appname\")\n \n     assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == 'appname'\n+    assert find_best_app(script_info, Module).name == \"appname\"\n \n     class Module:\n-        myapp = Flask('appname1')\n+        myapp = Flask(\"appname1\")\n \n         @staticmethod\n         def create_app():\n-            return Flask('appname2')\n+            return Flask(\"appname2\")\n \n     assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n-        myapp = Flask('appname1')\n+        myapp = Flask(\"appname1\")\n \n         @staticmethod\n         def create_app():\n-            return Flask('appname2')\n+            return Flask(\"appname2\")\n \n     assert find_best_app(script_info, Module) == Module.myapp\n \n@@ -122,50 +130,56 @@ def test_find_best_app(test_apps):\n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n-        myapp1 = Flask('appname1')\n-        myapp2 = Flask('appname2')\n+        myapp1 = Flask(\"appname1\")\n+        myapp2 = Flask(\"appname2\")\n \n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         @staticmethod\n         def create_app(foo, bar):\n-            return Flask('appname2')\n+            return Flask(\"appname2\")\n \n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         @staticmethod\n         def create_app():\n-            raise TypeError('bad bad factory!')\n+            raise TypeError(\"bad bad factory!\")\n \n     pytest.raises(TypeError, find_best_app, script_info, Module)\n \n \n-@pytest.mark.parametrize('value,path,result', (\n-    ('test', cwd, 'test'),\n-    ('test.py', cwd, 'test'),\n-    ('a/test', os.path.join(cwd, 'a'), 'test'),\n-    ('test/__init__.py', cwd, 'test'),\n-    ('test/__init__', cwd, 'test'),\n+@pytest.mark.parametrize(\n+    \"value,path,result\",\n+    (\n+        (\"test\", cwd, \"test\"),\n+        (\"test.py\", cwd, \"test\"),\n+        (\"a/test\", os.path.join(cwd, \"a\"), \"test\"),\n+        (\"test/__init__.py\", cwd, \"test\"),\n+        (\"test/__init__\", cwd, \"test\"),\n         # nested package\n         (\n-        os.path.join(test_path, 'cliapp', 'inner1', '__init__'),\n-        test_path, 'cliapp.inner1'\n+            os.path.join(test_path, \"cliapp\", \"inner1\", \"__init__\"),\n+            test_path,\n+            \"cliapp.inner1\",\n         ),\n         (\n-        os.path.join(test_path, 'cliapp', 'inner1', 'inner2'),\n-        test_path, 'cliapp.inner1.inner2'\n+            os.path.join(test_path, \"cliapp\", \"inner1\", \"inner2\"),\n+            test_path,\n+            \"cliapp.inner1.inner2\",\n         ),\n         # dotted name\n-    ('test.a.b', cwd, 'test.a.b'),\n-    (os.path.join(test_path, 'cliapp.app'), test_path, 'cliapp.app'),\n+        (\"test.a.b\", cwd, \"test.a.b\"),\n+        (os.path.join(test_path, \"cliapp.app\"), test_path, \"cliapp.app\"),\n         # not a Python file, will be caught during import\n         (\n-        os.path.join(test_path, 'cliapp', 'message.txt'),\n-        test_path, 'cliapp.message.txt'\n+            os.path.join(test_path, \"cliapp\", \"message.txt\"),\n+            test_path,\n+            \"cliapp.message.txt\",\n         ),\n-))\n+    ),\n+)\n def test_prepare_import(request, value, path, result):\n     \"\"\"Expect the correct path to be set and the correct import and app names\n     to be returned.\n@@ -185,42 +199,48 @@ def test_prepare_import(request, value, path, result):\n     assert sys.path[0] == path\n \n \n-@pytest.mark.parametrize('iname,aname,result', (\n-    ('cliapp.app', None, 'testapp'),\n-    ('cliapp.app', 'testapp', 'testapp'),\n-    ('cliapp.factory', None, 'app'),\n-    ('cliapp.factory', 'create_app', 'app'),\n-    ('cliapp.factory', 'create_app()', 'app'),\n+@pytest.mark.parametrize(\n+    \"iname,aname,result\",\n+    (\n+        (\"cliapp.app\", None, \"testapp\"),\n+        (\"cliapp.app\", \"testapp\", \"testapp\"),\n+        (\"cliapp.factory\", None, \"app\"),\n+        (\"cliapp.factory\", \"create_app\", \"app\"),\n+        (\"cliapp.factory\", \"create_app()\", \"app\"),\n         # no script_info\n-    ('cliapp.factory', 'create_app2(\"foo\", \"bar\")', 'app2_foo_bar'),\n+        (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\")', \"app2_foo_bar\"),\n         # trailing comma space\n-    ('cliapp.factory', 'create_app2(\"foo\", \"bar\", )', 'app2_foo_bar'),\n+        (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\", )', \"app2_foo_bar\"),\n         # takes script_info\n-    ('cliapp.factory', 'create_app3(\"foo\")', 'app3_foo_spam'),\n+        (\"cliapp.factory\", 'create_app3(\"foo\")', \"app3_foo_spam\"),\n         # strip whitespace\n-    ('cliapp.factory', ' create_app () ', 'app'),\n-))\n+        (\"cliapp.factory\", \" create_app () \", \"app\"),\n+    ),\n+)\n def test_locate_app(test_apps, iname, aname, result):\n     info = ScriptInfo()\n-    info.data['test'] = 'spam'\n+    info.data[\"test\"] = \"spam\"\n     assert locate_app(info, iname, aname).name == result\n \n \n-@pytest.mark.parametrize('iname,aname', (\n-    ('notanapp.py', None),\n-    ('cliapp/app', None),\n-    ('cliapp.app', 'notanapp'),\n+@pytest.mark.parametrize(\n+    \"iname,aname\",\n+    (\n+        (\"notanapp.py\", None),\n+        (\"cliapp/app\", None),\n+        (\"cliapp.app\", \"notanapp\"),\n         # not enough arguments\n-    ('cliapp.factory', 'create_app2(\"foo\")'),\n+        (\"cliapp.factory\", 'create_app2(\"foo\")'),\n         # invalid identifier\n-    ('cliapp.factory', 'create_app('),\n+        (\"cliapp.factory\", \"create_app(\"),\n         # no app returned\n-    ('cliapp.factory', 'no_app'),\n+        (\"cliapp.factory\", \"no_app\"),\n         # nested import error\n-    ('cliapp.importerrorapp', None),\n+        (\"cliapp.importerrorapp\", None),\n         # not a Python file\n-    ('cliapp.message.txt', None),\n-))\n+        (\"cliapp.message.txt\", None),\n+    ),\n+)\n def test_locate_app_raises(test_apps, iname, aname):\n     info = ScriptInfo()\n \n@@ -230,14 +250,12 @@ def test_locate_app_raises(test_apps, iname, aname):\n \n def test_locate_app_suppress_raise():\n     info = ScriptInfo()\n-    app = locate_app(info, 'notanapp.py', None, raise_if_not_found=False)\n+    app = locate_app(info, \"notanapp.py\", None, raise_if_not_found=False)\n     assert app is None\n \n     # only direct import error is suppressed\n     with pytest.raises(NoAppException):\n-        locate_app(\n-            info, 'cliapp.importerrorapp', None, raise_if_not_found=False\n-        )\n+        locate_app(info, \"cliapp.importerrorapp\", None, raise_if_not_found=False)\n \n \n def test_get_version(test_apps, capsys):\n@@ -249,7 +267,8 @@ def test_get_version(test_apps, capsys):\n         resilient_parsing = False\n         color = None\n \n-        def exit(self): return\n+        def exit(self):\n+            return\n \n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n@@ -267,15 +286,16 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert obj.load_app() is app\n \n     # import app with module's absolute path\n-    cli_app_path = os.path.abspath(os.path.join(\n-            os.path.dirname(__file__), 'test_apps', 'cliapp', 'app.py'))\n+    cli_app_path = os.path.abspath(\n+        os.path.join(os.path.dirname(__file__), \"test_apps\", \"cliapp\", \"app.py\")\n+    )\n     obj = ScriptInfo(app_import_path=cli_app_path)\n     app = obj.load_app()\n-    assert app.name == 'testapp'\n+    assert app.name == \"testapp\"\n     assert obj.load_app() is app\n-    obj = ScriptInfo(app_import_path=cli_app_path + ':testapp')\n+    obj = ScriptInfo(app_import_path=cli_app_path + \":testapp\")\n     app = obj.load_app()\n-    assert app.name == 'testapp'\n+    assert app.name == \"testapp\"\n     assert obj.load_app() is app\n \n     def create_app(info):\n@@ -290,20 +310,22 @@ def test_scriptinfo(test_apps, monkeypatch):\n     pytest.raises(NoAppException, obj.load_app)\n \n     # import app from wsgi.py in current directory\n-    monkeypatch.chdir(os.path.abspath(os.path.join(\n-        os.path.dirname(__file__), 'test_apps', 'helloworld'\n-    )))\n+    monkeypatch.chdir(\n+        os.path.abspath(\n+            os.path.join(os.path.dirname(__file__), \"test_apps\", \"helloworld\")\n+        )\n+    )\n     obj = ScriptInfo()\n     app = obj.load_app()\n-    assert app.name == 'hello'\n+    assert app.name == \"hello\"\n \n     # import app from app.py in current directory\n-    monkeypatch.chdir(os.path.abspath(os.path.join(\n-        os.path.dirname(__file__), 'test_apps', 'cliapp'\n-    )))\n+    monkeypatch.chdir(\n+        os.path.abspath(os.path.join(os.path.dirname(__file__), \"test_apps\", \"cliapp\"))\n+    )\n     obj = ScriptInfo()\n     app = obj.load_app()\n-    assert app.name == 'testapp'\n+    assert app.name == \"testapp\"\n \n \n def test_with_appcontext(runner):\n@@ -318,7 +340,7 @@ def test_with_appcontext(runner):\n \n     result = runner.invoke(testcmd, obj=obj)\n     assert result.exit_code == 0\n-    assert result.output == 'testapp\\n'\n+    assert result.output == \"testapp\\n\"\n \n \n def test_appgroup(runner):\n@@ -342,13 +364,13 @@ def test_appgroup(runner):\n \n     obj = ScriptInfo(create_app=lambda info: Flask(\"testappgroup\"))\n \n-    result = runner.invoke(cli, ['test'], obj=obj)\n+    result = runner.invoke(cli, [\"test\"], obj=obj)\n     assert result.exit_code == 0\n-    assert result.output == 'testappgroup\\n'\n+    assert result.output == \"testappgroup\\n\"\n \n-    result = runner.invoke(cli, ['subgroup', 'test2'], obj=obj)\n+    result = runner.invoke(cli, [\"subgroup\", \"test2\"], obj=obj)\n     assert result.exit_code == 0\n-    assert result.output == 'testappgroup\\n'\n+    assert result.output == \"testappgroup\\n\"\n \n \n def test_flaskgroup(runner):\n@@ -365,12 +387,12 @@ def test_flaskgroup(runner):\n     def test():\n         click.echo(current_app.name)\n \n-    result = runner.invoke(cli, ['test'])\n+    result = runner.invoke(cli, [\"test\"])\n     assert result.exit_code == 0\n-    assert result.output == 'flaskgroup\\n'\n+    assert result.output == \"flaskgroup\\n\"\n \n \n-@pytest.mark.parametrize('set_debug_flag', (True, False))\n+@pytest.mark.parametrize(\"set_debug_flag\", (True, False))\n def test_flaskgroup_debug(runner, set_debug_flag):\n     \"\"\"Test FlaskGroup debug flag behavior.\"\"\"\n \n@@ -387,9 +409,9 @@ def test_flaskgroup_debug(runner, set_debug_flag):\n     def test():\n         click.echo(str(current_app.debug))\n \n-    result = runner.invoke(cli, ['test'])\n+    result = runner.invoke(cli, [\"test\"])\n     assert result.exit_code == 0\n-    assert result.output == '%s\\n' % str(not set_debug_flag)\n+    assert result.output == \"%s\\n\" % str(not set_debug_flag)\n \n \n def test_print_exceptions(runner):\n@@ -403,10 +425,10 @@ def test_print_exceptions(runner):\n     def cli(**params):\n         pass\n \n-    result = runner.invoke(cli, ['--help'])\n+    result = runner.invoke(cli, [\"--help\"])\n     assert result.exit_code == 0\n-    assert 'Exception: oh no' in result.output\n-    assert 'Traceback' in result.output\n+    assert \"Exception: oh no\" in result.output\n+    assert \"Traceback\" in result.output\n \n \n class TestRoutes:\n@@ -416,11 +438,11 @@ class TestRoutes:\n             app = Flask(__name__)\n             app.testing = True\n \n-            @app.route('/get_post/<int:x>/<int:y>', methods=['GET', 'POST'])\n+            @app.route(\"/get_post/<int:x>/<int:y>\", methods=[\"GET\", \"POST\"])\n             def yyy_get_post(x, y):\n                 pass\n \n-            @app.route('/zzz_post', methods=['POST'])\n+            @app.route(\"/zzz_post\", methods=[\"POST\"])\n             def aaa_post():\n                 pass\n \n@@ -447,135 +469,129 @@ class TestRoutes:\n             assert line[: len(expect)] == expect\n \n     def test_simple(self, invoke):\n-        result = invoke(['routes'])\n+        result = invoke([\"routes\"])\n         assert result.exit_code == 0\n-        self.expect_order(\n-            ['aaa_post', 'static', 'yyy_get_post'],\n-            result.output\n-        )\n+        self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)\n \n     def test_sort(self, invoke):\n-        default_output = invoke(['routes']).output\n-        endpoint_output = invoke(['routes', '-s', 'endpoint']).output\n+        default_output = invoke([\"routes\"]).output\n+        endpoint_output = invoke([\"routes\", \"-s\", \"endpoint\"]).output\n         assert default_output == endpoint_output\n         self.expect_order(\n-            ['static', 'yyy_get_post', 'aaa_post'],\n-            invoke(['routes', '-s', 'methods']).output\n+            [\"static\", \"yyy_get_post\", \"aaa_post\"],\n+            invoke([\"routes\", \"-s\", \"methods\"]).output,\n         )\n         self.expect_order(\n-            ['yyy_get_post', 'static', 'aaa_post'],\n-            invoke(['routes', '-s', 'rule']).output\n+            [\"yyy_get_post\", \"static\", \"aaa_post\"],\n+            invoke([\"routes\", \"-s\", \"rule\"]).output,\n         )\n         self.expect_order(\n-            ['aaa_post', 'yyy_get_post', 'static'],\n-            invoke(['routes', '-s', 'match']).output\n+            [\"aaa_post\", \"yyy_get_post\", \"static\"],\n+            invoke([\"routes\", \"-s\", \"match\"]).output,\n         )\n \n     def test_all_methods(self, invoke):\n-        output = invoke(['routes']).output\n-        assert 'GET, HEAD, OPTIONS, POST' not in output\n-        output = invoke(['routes', '--all-methods']).output\n-        assert 'GET, HEAD, OPTIONS, POST' in output\n+        output = invoke([\"routes\"]).output\n+        assert \"GET, HEAD, OPTIONS, POST\" not in output\n+        output = invoke([\"routes\", \"--all-methods\"]).output\n+        assert \"GET, HEAD, OPTIONS, POST\" in output\n \n     def test_no_routes(self, invoke_no_routes):\n-        result = invoke_no_routes(['routes'])\n+        result = invoke_no_routes([\"routes\"])\n         assert result.exit_code == 0\n-        assert 'No routes were registered.' in result.output\n+        assert \"No routes were registered.\" in result.output\n \n \n-need_dotenv = pytest.mark.skipif(\n-    dotenv is None, reason='dotenv is not installed'\n-)\n+need_dotenv = pytest.mark.skipif(dotenv is None, reason=\"dotenv is not installed\")\n \n \n @need_dotenv\n def test_load_dotenv(monkeypatch):\n     # can't use monkeypatch.delitem since the keys don't exist yet\n-    for item in ('FOO', 'BAR', 'SPAM'):\n+    for item in (\"FOO\", \"BAR\", \"SPAM\"):\n         monkeypatch._setitem.append((os.environ, item, notset))\n \n-    monkeypatch.setenv('EGGS', '3')\n-    monkeypatch.chdir(os.path.join(test_path, 'cliapp', 'inner1'))\n+    monkeypatch.setenv(\"EGGS\", \"3\")\n+    monkeypatch.chdir(os.path.join(test_path, \"cliapp\", \"inner1\"))\n     load_dotenv()\n     assert os.getcwd() == test_path\n     # .flaskenv doesn't overwrite .env\n-    assert os.environ['FOO'] == 'env'\n+    assert os.environ[\"FOO\"] == \"env\"\n     # set only in .flaskenv\n-    assert os.environ['BAR'] == 'bar'\n+    assert os.environ[\"BAR\"] == \"bar\"\n     # set only in .env\n-    assert os.environ['SPAM'] == '1'\n+    assert os.environ[\"SPAM\"] == \"1\"\n     # set manually, files don't overwrite\n-    assert os.environ['EGGS'] == '3'\n+    assert os.environ[\"EGGS\"] == \"3\"\n \n \n @need_dotenv\n def test_dotenv_path(monkeypatch):\n-    for item in ('FOO', 'BAR', 'EGGS'):\n+    for item in (\"FOO\", \"BAR\", \"EGGS\"):\n         monkeypatch._setitem.append((os.environ, item, notset))\n \n     cwd = os.getcwd()\n-    load_dotenv(os.path.join(test_path, '.flaskenv'))\n+    load_dotenv(os.path.join(test_path, \".flaskenv\"))\n     assert os.getcwd() == cwd\n-    assert 'FOO' in os.environ\n+    assert \"FOO\" in os.environ\n \n \n def test_dotenv_optional(monkeypatch):\n-    monkeypatch.setattr('flask.cli.dotenv', None)\n+    monkeypatch.setattr(\"flask.cli.dotenv\", None)\n     monkeypatch.chdir(test_path)\n     load_dotenv()\n-    assert 'FOO' not in os.environ\n+    assert \"FOO\" not in os.environ\n \n \n @need_dotenv\n def test_disable_dotenv_from_env(monkeypatch, runner):\n     monkeypatch.chdir(test_path)\n-    monkeypatch.setitem(os.environ, 'FLASK_SKIP_DOTENV', '1')\n+    monkeypatch.setitem(os.environ, \"FLASK_SKIP_DOTENV\", \"1\")\n     runner.invoke(FlaskGroup())\n-    assert 'FOO' not in os.environ\n+    assert \"FOO\" not in os.environ\n \n \n def test_run_cert_path():\n     # no key\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context('run', ['--cert', __file__])\n+        run_command.make_context(\"run\", [\"--cert\", __file__])\n \n     # no cert\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context('run', ['--key', __file__])\n+        run_command.make_context(\"run\", [\"--key\", __file__])\n \n-    ctx = run_command.make_context(\n-        'run', ['--cert', __file__, '--key', __file__])\n-    assert ctx.params['cert'] == (__file__, __file__)\n+    ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n+    assert ctx.params[\"cert\"] == (__file__, __file__)\n \n \n def test_run_cert_adhoc(monkeypatch):\n-    monkeypatch.setitem(sys.modules, 'OpenSSL', None)\n+    monkeypatch.setitem(sys.modules, \"OpenSSL\", None)\n \n     # pyOpenSSL not installed\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context('run', ['--cert', 'adhoc'])\n+        run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n \n     # pyOpenSSL installed\n-    monkeypatch.setitem(sys.modules, 'OpenSSL', types.ModuleType('OpenSSL'))\n-    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n-    assert ctx.params['cert'] == 'adhoc'\n+    monkeypatch.setitem(sys.modules, \"OpenSSL\", types.ModuleType(\"OpenSSL\"))\n+    ctx = run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n+    assert ctx.params[\"cert\"] == \"adhoc\"\n \n     # no key with adhoc\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__])\n+        run_command.make_context(\"run\", [\"--cert\", \"adhoc\", \"--key\", __file__])\n \n \n def test_run_cert_import(monkeypatch):\n-    monkeypatch.setitem(sys.modules, 'not_here', None)\n+    monkeypatch.setitem(sys.modules, \"not_here\", None)\n \n     # ImportError\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context('run', ['--cert', 'not_here'])\n+        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n \n     # not an SSLContext\n     if sys.version_info >= (2, 7, 9):\n         with pytest.raises(click.BadParameter):\n-            run_command.make_context('run', ['--cert', 'flask'])\n+            run_command.make_context(\"run\", [\"--cert\", \"flask\"])\n \n     # SSLContext\n     if sys.version_info < (2, 7, 9):\n@@ -583,11 +599,10 @@ def test_run_cert_import(monkeypatch):\n     else:\n         ssl_context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n \n-    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n-    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n-    assert ctx.params['cert'] is ssl_context\n+    monkeypatch.setitem(sys.modules, \"ssl_context\", ssl_context)\n+    ctx = run_command.make_context(\"run\", [\"--cert\", \"ssl_context\"])\n+    assert ctx.params[\"cert\"] is ssl_context\n \n     # no --key with SSLContext\n     with pytest.raises(click.BadParameter):\n-        run_command.make_context(\n-            'run', ['--cert', 'ssl_context', '--key', __file__])\n+        run_command.make_context(\"run\", [\"--cert\", \"ssl_context\", \"--key\", __file__])\n\n@@ -17,19 +17,19 @@ import pytest\n \n \n # config keys used for the TestConfig\n-TEST_KEY = 'foo'\n-SECRET_KEY = 'config'\n+TEST_KEY = \"foo\"\n+SECRET_KEY = \"config\"\n \n \n def common_object_test(app):\n-    assert app.secret_key == 'config'\n-    assert app.config['TEST_KEY'] == 'foo'\n-    assert 'TestConfig' not in app.config\n+    assert app.secret_key == \"config\"\n+    assert app.config[\"TEST_KEY\"] == \"foo\"\n+    assert \"TestConfig\" not in app.config\n \n \n def test_config_from_file():\n     app = flask.Flask(__name__)\n-    app.config.from_pyfile(__file__.rsplit('.', 1)[0] + '.py')\n+    app.config.from_pyfile(__file__.rsplit(\".\", 1)[0] + \".py\")\n     common_object_test(app)\n \n \n@@ -42,45 +42,34 @@ def test_config_from_object():\n def test_config_from_json():\n     app = flask.Flask(__name__)\n     current_dir = os.path.dirname(os.path.abspath(__file__))\n-    app.config.from_json(os.path.join(current_dir, 'static', 'config.json'))\n+    app.config.from_json(os.path.join(current_dir, \"static\", \"config.json\"))\n     common_object_test(app)\n \n \n def test_config_from_mapping():\n     app = flask.Flask(__name__)\n-    app.config.from_mapping({\n-        'SECRET_KEY': 'config',\n-        'TEST_KEY': 'foo'\n-    })\n+    app.config.from_mapping({\"SECRET_KEY\": \"config\", \"TEST_KEY\": \"foo\"})\n     common_object_test(app)\n \n     app = flask.Flask(__name__)\n-    app.config.from_mapping([\n-        ('SECRET_KEY', 'config'),\n-        ('TEST_KEY', 'foo')\n-    ])\n+    app.config.from_mapping([(\"SECRET_KEY\", \"config\"), (\"TEST_KEY\", \"foo\")])\n     common_object_test(app)\n \n     app = flask.Flask(__name__)\n-    app.config.from_mapping(\n-        SECRET_KEY='config',\n-        TEST_KEY='foo'\n-    )\n+    app.config.from_mapping(SECRET_KEY=\"config\", TEST_KEY=\"foo\")\n     common_object_test(app)\n \n     app = flask.Flask(__name__)\n     with pytest.raises(TypeError):\n-        app.config.from_mapping(\n-            {}, {}\n-        )\n+        app.config.from_mapping({}, {})\n \n \n def test_config_from_class():\n     class Base(object):\n-        TEST_KEY = 'foo'\n+        TEST_KEY = \"foo\"\n \n     class Test(Base):\n-        SECRET_KEY = 'config'\n+        SECRET_KEY = \"config\"\n \n     app = flask.Flask(__name__)\n     app.config.from_object(Test)\n@@ -93,12 +82,12 @@ def test_config_from_envvar():\n         os.environ = {}\n         app = flask.Flask(__name__)\n         with pytest.raises(RuntimeError) as e:\n-            app.config.from_envvar('FOO_SETTINGS')\n+            app.config.from_envvar(\"FOO_SETTINGS\")\n         assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n-        assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+        assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n \n-        os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n-        assert app.config.from_envvar('FOO_SETTINGS')\n+        os.environ = {\"FOO_SETTINGS\": __file__.rsplit(\".\", 1)[0] + \".py\"}\n+        assert app.config.from_envvar(\"FOO_SETTINGS\")\n         common_object_test(app)\n     finally:\n         os.environ = env\n@@ -107,15 +96,17 @@ def test_config_from_envvar():\n def test_config_from_envvar_missing():\n     env = os.environ\n     try:\n-        os.environ = {'FOO_SETTINGS': 'missing.cfg'}\n+        os.environ = {\"FOO_SETTINGS\": \"missing.cfg\"}\n         with pytest.raises(IOError) as e:\n             app = flask.Flask(__name__)\n-            app.config.from_envvar('FOO_SETTINGS')\n+            app.config.from_envvar(\"FOO_SETTINGS\")\n         msg = str(e.value)\n-        assert msg.startswith('[Errno 2] Unable to load configuration '\n-                              'file (No such file or directory):')\n+        assert msg.startswith(\n+            \"[Errno 2] Unable to load configuration \"\n+            \"file (No such file or directory):\"\n+        )\n         assert msg.endswith(\"missing.cfg'\")\n-        assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+        assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n     finally:\n         os.environ = env\n \n@@ -123,23 +114,25 @@ def test_config_from_envvar_missing():\n def test_config_missing():\n     app = flask.Flask(__name__)\n     with pytest.raises(IOError) as e:\n-        app.config.from_pyfile('missing.cfg')\n+        app.config.from_pyfile(\"missing.cfg\")\n     msg = str(e.value)\n-    assert msg.startswith('[Errno 2] Unable to load configuration '\n-                          'file (No such file or directory):')\n+    assert msg.startswith(\n+        \"[Errno 2] Unable to load configuration \" \"file (No such file or directory):\"\n+    )\n     assert msg.endswith(\"missing.cfg'\")\n-    assert not app.config.from_pyfile('missing.cfg', silent=True)\n+    assert not app.config.from_pyfile(\"missing.cfg\", silent=True)\n \n \n def test_config_missing_json():\n     app = flask.Flask(__name__)\n     with pytest.raises(IOError) as e:\n-        app.config.from_json('missing.json')\n+        app.config.from_json(\"missing.json\")\n     msg = str(e.value)\n-    assert msg.startswith('[Errno 2] Unable to load configuration '\n-                          'file (No such file or directory):')\n+    assert msg.startswith(\n+        \"[Errno 2] Unable to load configuration \" \"file (No such file or directory):\"\n+    )\n     assert msg.endswith(\"missing.json'\")\n-    assert not app.config.from_json('missing.json', silent=True)\n+    assert not app.config.from_json(\"missing.json\", silent=True)\n \n \n def test_custom_config_class():\n@@ -148,6 +141,7 @@ def test_custom_config_class():\n \n     class Flask(flask.Flask):\n         config_class = Config\n+\n     app = Flask(__name__)\n     assert isinstance(app.config, Config)\n     app.config.from_object(__name__)\n@@ -156,52 +150,60 @@ def test_custom_config_class():\n \n def test_session_lifetime():\n     app = flask.Flask(__name__)\n-    app.config['PERMANENT_SESSION_LIFETIME'] = 42\n+    app.config[\"PERMANENT_SESSION_LIFETIME\"] = 42\n     assert app.permanent_session_lifetime.seconds == 42\n \n \n def test_send_file_max_age():\n     app = flask.Flask(__name__)\n-    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n+    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 3600\n     assert app.send_file_max_age_default.seconds == 3600\n-    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n+    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = timedelta(hours=2)\n     assert app.send_file_max_age_default.seconds == 7200\n \n \n def test_get_namespace():\n     app = flask.Flask(__name__)\n-    app.config['FOO_OPTION_1'] = 'foo option 1'\n-    app.config['FOO_OPTION_2'] = 'foo option 2'\n-    app.config['BAR_STUFF_1'] = 'bar stuff 1'\n-    app.config['BAR_STUFF_2'] = 'bar stuff 2'\n-    foo_options = app.config.get_namespace('FOO_')\n+    app.config[\"FOO_OPTION_1\"] = \"foo option 1\"\n+    app.config[\"FOO_OPTION_2\"] = \"foo option 2\"\n+    app.config[\"BAR_STUFF_1\"] = \"bar stuff 1\"\n+    app.config[\"BAR_STUFF_2\"] = \"bar stuff 2\"\n+    foo_options = app.config.get_namespace(\"FOO_\")\n     assert 2 == len(foo_options)\n-    assert 'foo option 1' == foo_options['option_1']\n-    assert 'foo option 2' == foo_options['option_2']\n-    bar_options = app.config.get_namespace('BAR_', lowercase=False)\n+    assert \"foo option 1\" == foo_options[\"option_1\"]\n+    assert \"foo option 2\" == foo_options[\"option_2\"]\n+    bar_options = app.config.get_namespace(\"BAR_\", lowercase=False)\n     assert 2 == len(bar_options)\n-    assert 'bar stuff 1' == bar_options['STUFF_1']\n-    assert 'bar stuff 2' == bar_options['STUFF_2']\n-    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n+    assert \"bar stuff 1\" == bar_options[\"STUFF_1\"]\n+    assert \"bar stuff 2\" == bar_options[\"STUFF_2\"]\n+    foo_options = app.config.get_namespace(\"FOO_\", trim_namespace=False)\n     assert 2 == len(foo_options)\n-    assert 'foo option 1' == foo_options['foo_option_1']\n-    assert 'foo option 2' == foo_options['foo_option_2']\n-    bar_options = app.config.get_namespace('BAR_', lowercase=False, trim_namespace=False)\n+    assert \"foo option 1\" == foo_options[\"foo_option_1\"]\n+    assert \"foo option 2\" == foo_options[\"foo_option_2\"]\n+    bar_options = app.config.get_namespace(\n+        \"BAR_\", lowercase=False, trim_namespace=False\n+    )\n     assert 2 == len(bar_options)\n-    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n-    assert 'bar stuff 2' == bar_options['BAR_STUFF_2']\n+    assert \"bar stuff 1\" == bar_options[\"BAR_STUFF_1\"]\n+    assert \"bar stuff 2\" == bar_options[\"BAR_STUFF_2\"]\n \n \n-@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\n+@pytest.mark.parametrize(\"encoding\", [\"utf-8\", \"iso-8859-15\", \"latin-1\"])\n def test_from_pyfile_weird_encoding(tmpdir, encoding):\n-    f = tmpdir.join('my_config.py')\n-    f.write_binary(textwrap.dedent(u'''\n+    f = tmpdir.join(\"my_config.py\")\n+    f.write_binary(\n+        textwrap.dedent(\n+            u\"\"\"\n     # -*- coding: {0} -*-\n     TEST_VALUE = \"föö\"\n-    '''.format(encoding)).encode(encoding))\n+    \"\"\".format(\n+                encoding\n+            )\n+        ).encode(encoding)\n+    )\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(str(f))\n-    value = app.config['TEST_VALUE']\n+    value = app.config[\"TEST_VALUE\"]\n     if PY2:\n         value = value.decode(encoding)\n-    assert value == u'föö'\n+    assert value == u\"föö\"\n\n@@ -17,10 +17,7 @@ import uuid\n import pytest\n from werkzeug.datastructures import Range\n from werkzeug.exceptions import BadRequest, NotFound\n-from werkzeug.http import (\n-    http_date, parse_cache_control_header,\n-    parse_options_header\n-)\n+from werkzeug.http import http_date, parse_cache_control_header, parse_options_header\n \n import flask\n from flask import json\n@@ -31,6 +28,7 @@ from flask.helpers import get_debug_flag, get_env\n def has_encoding(name):\n     try:\n         import codecs\n+\n         codecs.lookup(name)\n         return True\n     except LookupError:\n@@ -43,6 +41,7 @@ class FakePath(object):\n     This represents a ``pathlib.Path`` object in python 3.\n     See: https://www.python.org/dev/peps/pep-0519/\n     \"\"\"\n+\n     def __init__(self, path):\n         self.path = path\n \n@@ -72,96 +71,107 @@ class FixedOffset(datetime.tzinfo):\n \n \n class TestJSON(object):\n-    @pytest.mark.parametrize('value', (\n-        1, 't', True, False, None,\n-        [], [1, 2, 3],\n-        {}, {'foo': u'🐍'},\n-    ))\n-    @pytest.mark.parametrize('encoding', (\n-        'utf-8', 'utf-8-sig',\n-        'utf-16-le', 'utf-16-be', 'utf-16',\n-        'utf-32-le', 'utf-32-be', 'utf-32',\n-    ))\n+    @pytest.mark.parametrize(\n+        \"value\", (1, \"t\", True, False, None, [], [1, 2, 3], {}, {\"foo\": u\"🐍\"})\n+    )\n+    @pytest.mark.parametrize(\n+        \"encoding\",\n+        (\n+            \"utf-8\",\n+            \"utf-8-sig\",\n+            \"utf-16-le\",\n+            \"utf-16-be\",\n+            \"utf-16\",\n+            \"utf-32-le\",\n+            \"utf-32-be\",\n+            \"utf-32\",\n+        ),\n+    )\n     def test_detect_encoding(self, value, encoding):\n         data = json.dumps(value).encode(encoding)\n         assert json.detect_encoding(data) == encoding\n         assert json.loads(data) == value\n \n     def test_ignore_cached_json(self, app):\n-        with app.test_request_context('/', method='POST', data='malformed',\n-                                      content_type='application/json'):\n+        with app.test_request_context(\n+            \"/\", method=\"POST\", data=\"malformed\", content_type=\"application/json\"\n+        ):\n             assert flask.request.get_json(silent=True, cache=True) is None\n             with pytest.raises(BadRequest):\n                 flask.request.get_json(silent=False, cache=False)\n \n     def test_different_silent_on_bad_request(self, app):\n         with app.test_request_context(\n-                '/', method='POST', data='malformed',\n-                content_type='application/json'):\n+            \"/\", method=\"POST\", data=\"malformed\", content_type=\"application/json\"\n+        ):\n             assert flask.request.get_json(silent=True) is None\n             with pytest.raises(BadRequest):\n                 flask.request.get_json(silent=False)\n \n     def test_different_silent_on_normal_request(self, app):\n-        with app.test_request_context('/', method='POST', json={'foo': 'bar'}):\n+        with app.test_request_context(\"/\", method=\"POST\", json={\"foo\": \"bar\"}):\n             silent_rv = flask.request.get_json(silent=True)\n             normal_rv = flask.request.get_json(silent=False)\n             assert silent_rv is normal_rv\n-            assert normal_rv['foo'] == 'bar'\n+            assert normal_rv[\"foo\"] == \"bar\"\n \n-    def test_post_empty_json_adds_exception_to_response_content_in_debug(self, app, client):\n-        app.config['DEBUG'] = True\n-        app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n+    def test_post_empty_json_adds_exception_to_response_content_in_debug(\n+        self, app, client\n+    ):\n+        app.config[\"DEBUG\"] = True\n+        app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n \n-        @app.route('/json', methods=['POST'])\n+        @app.route(\"/json\", methods=[\"POST\"])\n         def post_json():\n             flask.request.get_json()\n             return None\n \n-        rv = client.post('/json', data=None, content_type='application/json')\n+        rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n         assert rv.status_code == 400\n-        assert b'Failed to decode JSON object' in rv.data\n+        assert b\"Failed to decode JSON object\" in rv.data\n \n-    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self, app, client):\n-        app.config['DEBUG'] = False\n-        app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n+    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(\n+        self, app, client\n+    ):\n+        app.config[\"DEBUG\"] = False\n+        app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n \n-        @app.route('/json', methods=['POST'])\n+        @app.route(\"/json\", methods=[\"POST\"])\n         def post_json():\n             flask.request.get_json()\n             return None\n \n-        rv = client.post('/json', data=None, content_type='application/json')\n+        rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n         assert rv.status_code == 400\n-        assert b'Failed to decode JSON object' not in rv.data\n+        assert b\"Failed to decode JSON object\" not in rv.data\n \n     def test_json_bad_requests(self, app, client):\n-\n-        @app.route('/json', methods=['POST'])\n+        @app.route(\"/json\", methods=[\"POST\"])\n         def return_json():\n             return flask.jsonify(foo=text_type(flask.request.get_json()))\n \n-        rv = client.post('/json', data='malformed', content_type='application/json')\n+        rv = client.post(\"/json\", data=\"malformed\", content_type=\"application/json\")\n         assert rv.status_code == 400\n \n     def test_json_custom_mimetypes(self, app, client):\n-\n-        @app.route('/json', methods=['POST'])\n+        @app.route(\"/json\", methods=[\"POST\"])\n         def return_json():\n             return flask.request.get_json()\n \n-        rv = client.post('/json', data='\"foo\"', content_type='application/x+json')\n-        assert rv.data == b'foo'\n+        rv = client.post(\"/json\", data='\"foo\"', content_type=\"application/x+json\")\n+        assert rv.data == b\"foo\"\n \n-    @pytest.mark.parametrize('test_value,expected', [(True, '\"\\\\u2603\"'), (False, u'\"\\u2603\"')])\n+    @pytest.mark.parametrize(\n+        \"test_value,expected\", [(True, '\"\\\\u2603\"'), (False, u'\"\\u2603\"')]\n+    )\n     def test_json_as_unicode(self, test_value, expected, app, app_ctx):\n \n-        app.config['JSON_AS_ASCII'] = test_value\n-        rv = flask.json.dumps(u'\\N{SNOWMAN}')\n+        app.config[\"JSON_AS_ASCII\"] = test_value\n+        rv = flask.json.dumps(u\"\\N{SNOWMAN}\")\n         assert rv == expected\n \n     def test_json_dump_to_file(self, app, app_ctx):\n-        test_data = {'name': 'Flask'}\n+        test_data = {\"name\": \"Flask\"}\n         out = StringIO()\n \n         flask.json.dump(test_data, out)\n@@ -169,108 +179,125 @@ class TestJSON(object):\n         rv = flask.json.load(out)\n         assert rv == test_data\n \n-    @pytest.mark.parametrize('test_value', [0, -1, 1, 23, 3.14, 's', \"longer string\", True, False, None])\n+    @pytest.mark.parametrize(\n+        \"test_value\", [0, -1, 1, 23, 3.14, \"s\", \"longer string\", True, False, None]\n+    )\n     def test_jsonify_basic_types(self, test_value, app, client):\n         \"\"\"Test jsonify with basic types.\"\"\"\n \n-        url = '/jsonify_basic_types'\n+        url = \"/jsonify_basic_types\"\n         app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n         rv = client.get(url)\n-        assert rv.mimetype == 'application/json'\n+        assert rv.mimetype == \"application/json\"\n         assert flask.json.loads(rv.data) == test_value\n \n     def test_jsonify_dicts(self, app, client):\n         \"\"\"Test jsonify with dicts and kwargs unpacking.\"\"\"\n-        d = {'a': 0, 'b': 23, 'c': 3.14, 'd': 't',\n-             'e': 'Hi', 'f': True, 'g': False,\n-             'h': ['test list', 10, False],\n-             'i': {'test': 'dict'}}\n+        d = {\n+            \"a\": 0,\n+            \"b\": 23,\n+            \"c\": 3.14,\n+            \"d\": \"t\",\n+            \"e\": \"Hi\",\n+            \"f\": True,\n+            \"g\": False,\n+            \"h\": [\"test list\", 10, False],\n+            \"i\": {\"test\": \"dict\"},\n+        }\n \n-        @app.route('/kw')\n+        @app.route(\"/kw\")\n         def return_kwargs():\n             return flask.jsonify(**d)\n \n-        @app.route('/dict')\n+        @app.route(\"/dict\")\n         def return_dict():\n             return flask.jsonify(d)\n \n-        for url in '/kw', '/dict':\n+        for url in \"/kw\", \"/dict\":\n             rv = client.get(url)\n-            assert rv.mimetype == 'application/json'\n+            assert rv.mimetype == \"application/json\"\n             assert flask.json.loads(rv.data) == d\n \n     def test_jsonify_arrays(self, app, client):\n         \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n         l = [\n-            0, 42, 3.14, 't', 'hello', True, False,\n-            ['test list', 2, False],\n-            {'test': 'dict'}\n+            0,\n+            42,\n+            3.14,\n+            \"t\",\n+            \"hello\",\n+            True,\n+            False,\n+            [\"test list\", 2, False],\n+            {\"test\": \"dict\"},\n         ]\n \n-        @app.route('/args_unpack')\n+        @app.route(\"/args_unpack\")\n         def return_args_unpack():\n             return flask.jsonify(*l)\n \n-        @app.route('/array')\n+        @app.route(\"/array\")\n         def return_array():\n             return flask.jsonify(l)\n \n-        for url in '/args_unpack', '/array':\n+        for url in \"/args_unpack\", \"/array\":\n             rv = client.get(url)\n-            assert rv.mimetype == 'application/json'\n+            assert rv.mimetype == \"application/json\"\n             assert flask.json.loads(rv.data) == l\n \n     def test_jsonify_date_types(self, app, client):\n         \"\"\"Test jsonify with datetime.date and datetime.datetime types.\"\"\"\n         test_dates = (\n             datetime.datetime(1973, 3, 11, 6, 30, 45),\n-            datetime.date(1975, 1, 5)\n+            datetime.date(1975, 1, 5),\n         )\n \n         for i, d in enumerate(test_dates):\n-            url = '/datetest{0}'.format(i)\n+            url = \"/datetest{0}\".format(i)\n             app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n             rv = client.get(url)\n-            assert rv.mimetype == 'application/json'\n-            assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n+            assert rv.mimetype == \"application/json\"\n+            assert flask.json.loads(rv.data)[\"x\"] == http_date(d.timetuple())\n \n-    @pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\n+    @pytest.mark.parametrize(\"tz\", ((\"UTC\", 0), (\"PST\", -8), (\"KST\", 9)))\n     def test_jsonify_aware_datetimes(self, tz):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n         tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n         dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n-        gmt = FixedOffset(hours=0, name='GMT')\n+        gmt = FixedOffset(hours=0, name=\"GMT\")\n         expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n         assert flask.json.JSONEncoder().encode(dt) == expected\n \n     def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n \n-        test_uuid = uuid.UUID(bytes=b'\\xDE\\xAD\\xBE\\xEF' * 4)\n-        url = '/uuid_test'\n+        test_uuid = uuid.UUID(bytes=b\"\\xDE\\xAD\\xBE\\xEF\" * 4)\n+        url = \"/uuid_test\"\n         app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n \n         rv = client.get(url)\n \n-        rv_x = flask.json.loads(rv.data)['x']\n+        rv_x = flask.json.loads(rv.data)[\"x\"]\n         assert rv_x == str(test_uuid)\n         rv_uuid = uuid.UUID(rv_x)\n         assert rv_uuid == test_uuid\n \n     def test_json_attr(self, app, client):\n-\n-        @app.route('/add', methods=['POST'])\n+        @app.route(\"/add\", methods=[\"POST\"])\n         def add():\n             json = flask.request.get_json()\n-            return text_type(json['a'] + json['b'])\n+            return text_type(json[\"a\"] + json[\"b\"])\n \n-        rv = client.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n-                         content_type='application/json')\n-        assert rv.data == b'3'\n+        rv = client.post(\n+            \"/add\",\n+            data=flask.json.dumps({\"a\": 1, \"b\": 2}),\n+            content_type=\"application/json\",\n+        )\n+        assert rv.data == b\"3\"\n \n     def test_template_escaping(self, app, req_ctx):\n         render = flask.render_template_string\n-        rv = flask.json.htmlsafe_dumps('</script>')\n+        rv = flask.json.htmlsafe_dumps(\"</script>\")\n         assert rv == u'\"\\\\u003c/script\\\\u003e\"'\n         assert type(rv) == text_type\n         rv = render('{{ \"</script>\"|tojson }}')\n@@ -283,8 +310,9 @@ class TestJSON(object):\n         assert rv == '\"\\\\u0026\"'\n         rv = render('{{ \"\\'\"|tojson }}')\n         assert rv == '\"\\\\u0027\"'\n-        rv = render(\"<a ng-data='{{ data|tojson }}'></a>\",\n-                    data={'x': [\"foo\", \"bar\", \"baz'\"]})\n+        rv = render(\n+            \"<a ng-data='{{ data|tojson }}'></a>\", data={\"x\": [\"foo\", \"bar\", \"baz'\"]}\n+        )\n         assert rv == '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>'\n \n     def test_json_customization(self, app, client):\n@@ -295,29 +323,31 @@ class TestJSON(object):\n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n-                    return '<%d>' % o.val\n+                    return \"<%d>\" % o.val\n                 return flask.json.JSONEncoder.default(self, o)\n \n         class MyDecoder(flask.json.JSONDecoder):\n             def __init__(self, *args, **kwargs):\n-                kwargs.setdefault('object_hook', self.object_hook)\n+                kwargs.setdefault(\"object_hook\", self.object_hook)\n                 flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n \n             def object_hook(self, obj):\n-                if len(obj) == 1 and '_foo' in obj:\n-                    return X(obj['_foo'])\n+                if len(obj) == 1 and \"_foo\" in obj:\n+                    return X(obj[\"_foo\"])\n                 return obj\n \n         app.json_encoder = MyEncoder\n         app.json_decoder = MyDecoder\n \n-        @app.route('/', methods=['POST'])\n+        @app.route(\"/\", methods=[\"POST\"])\n         def index():\n-            return flask.json.dumps(flask.request.get_json()['x'])\n+            return flask.json.dumps(flask.request.get_json()[\"x\"])\n \n-        rv = client.post('/', data=flask.json.dumps({\n-            'x': {'_foo': 42}\n-        }), content_type='application/json')\n+        rv = client.post(\n+            \"/\",\n+            data=flask.json.dumps({\"x\": {\"_foo\": 42}}),\n+            content_type=\"application/json\",\n+        )\n         assert rv.data == b'\"<42>\"'\n \n     def test_blueprint_json_customization(self, app, client):\n@@ -328,68 +358,70 @@ class TestJSON(object):\n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n-                    return '<%d>' % o.val\n+                    return \"<%d>\" % o.val\n \n                 return flask.json.JSONEncoder.default(self, o)\n \n         class MyDecoder(flask.json.JSONDecoder):\n             def __init__(self, *args, **kwargs):\n-                kwargs.setdefault('object_hook', self.object_hook)\n+                kwargs.setdefault(\"object_hook\", self.object_hook)\n                 flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n \n             def object_hook(self, obj):\n-                if len(obj) == 1 and '_foo' in obj:\n-                    return X(obj['_foo'])\n+                if len(obj) == 1 and \"_foo\" in obj:\n+                    return X(obj[\"_foo\"])\n \n                 return obj\n \n-        bp = flask.Blueprint('bp', __name__)\n+        bp = flask.Blueprint(\"bp\", __name__)\n         bp.json_encoder = MyEncoder\n         bp.json_decoder = MyDecoder\n \n-        @bp.route('/bp', methods=['POST'])\n+        @bp.route(\"/bp\", methods=[\"POST\"])\n         def index():\n-            return flask.json.dumps(flask.request.get_json()['x'])\n+            return flask.json.dumps(flask.request.get_json()[\"x\"])\n \n         app.register_blueprint(bp)\n \n-        rv = client.post('/bp', data=flask.json.dumps({\n-            'x': {'_foo': 42}\n-        }), content_type='application/json')\n+        rv = client.post(\n+            \"/bp\",\n+            data=flask.json.dumps({\"x\": {\"_foo\": 42}}),\n+            content_type=\"application/json\",\n+        )\n         assert rv.data == b'\"<42>\"'\n \n     def test_modified_url_encoding(self, app, client):\n         class ModifiedRequest(flask.Request):\n-            url_charset = 'euc-kr'\n+            url_charset = \"euc-kr\"\n \n         app.request_class = ModifiedRequest\n-        app.url_map.charset = 'euc-kr'\n+        app.url_map.charset = \"euc-kr\"\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return flask.request.args['foo']\n+            return flask.request.args[\"foo\"]\n \n-        rv = client.get(u'/?foo=정상처리'.encode('euc-kr'))\n+        rv = client.get(u\"/?foo=정상처리\".encode(\"euc-kr\"))\n         assert rv.status_code == 200\n-        assert rv.data == u'정상처리'.encode('utf-8')\n+        assert rv.data == u\"정상처리\".encode(\"utf-8\")\n \n-    if not has_encoding('euc-kr'):\n+    if not has_encoding(\"euc-kr\"):\n         test_modified_url_encoding = None\n \n     def test_json_key_sorting(self, app, client):\n         app.debug = True\n \n-        assert app.config['JSON_SORT_KEYS'] == True\n-        d = dict.fromkeys(range(20), 'foo')\n+        assert app.config[\"JSON_SORT_KEYS\"] == True\n+        d = dict.fromkeys(range(20), \"foo\")\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n             return flask.jsonify(values=d)\n \n-        rv = client.get('/')\n-        lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n+        rv = client.get(\"/\")\n+        lines = [x.strip() for x in rv.data.strip().decode(\"utf-8\").splitlines()]\n         sorted_by_str = [\n-            '{',\n+            \"{\",\n             '\"values\": {',\n             '\"0\": \"foo\",',\n             '\"1\": \"foo\",',\n@@ -411,11 +443,11 @@ class TestJSON(object):\n             '\"7\": \"foo\",',\n             '\"8\": \"foo\",',\n             '\"9\": \"foo\"',\n-            '}',\n-            '}'\n+            \"}\",\n+            \"}\",\n         ]\n         sorted_by_int = [\n-            '{',\n+            \"{\",\n             '\"values\": {',\n             '\"0\": \"foo\",',\n             '\"1\": \"foo\",',\n@@ -437,8 +469,8 @@ class TestJSON(object):\n             '\"17\": \"foo\",',\n             '\"18\": \"foo\",',\n             '\"19\": \"foo\"',\n-            '}',\n-            '}'\n+            \"}\",\n+            \"}\",\n         ]\n \n         try:\n@@ -449,67 +481,70 @@ class TestJSON(object):\n \n class TestSendfile(object):\n     def test_send_file_regular(self, app, req_ctx):\n-        rv = flask.send_file('static/index.html')\n+        rv = flask.send_file(\"static/index.html\")\n         assert rv.direct_passthrough\n-        assert rv.mimetype == 'text/html'\n-        with app.open_resource('static/index.html') as f:\n+        assert rv.mimetype == \"text/html\"\n+        with app.open_resource(\"static/index.html\") as f:\n             rv.direct_passthrough = False\n             assert rv.data == f.read()\n         rv.close()\n \n     def test_send_file_xsendfile(self, app, req_ctx, catch_deprecation_warnings):\n         app.use_x_sendfile = True\n-        rv = flask.send_file('static/index.html')\n+        rv = flask.send_file(\"static/index.html\")\n         assert rv.direct_passthrough\n-        assert 'x-sendfile' in rv.headers\n-        assert rv.headers['x-sendfile'] == \\\n-               os.path.join(app.root_path, 'static/index.html')\n-        assert rv.mimetype == 'text/html'\n+        assert \"x-sendfile\" in rv.headers\n+        assert rv.headers[\"x-sendfile\"] == os.path.join(\n+            app.root_path, \"static/index.html\"\n+        )\n+        assert rv.mimetype == \"text/html\"\n         rv.close()\n \n     def test_send_file_last_modified(self, app, client):\n         last_modified = datetime.datetime(1999, 1, 1)\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return flask.send_file(StringIO(\"party like it's\"),\n+            return flask.send_file(\n+                StringIO(\"party like it's\"),\n                 last_modified=last_modified,\n-                                   mimetype='text/plain')\n+                mimetype=\"text/plain\",\n+            )\n \n-        rv = client.get('/')\n+        rv = client.get(\"/\")\n         assert rv.last_modified == last_modified\n \n     def test_send_file_object_without_mimetype(self, app, req_ctx):\n         with pytest.raises(ValueError) as excinfo:\n             flask.send_file(StringIO(\"LOL\"))\n-        assert 'Unable to infer MIME-type' in str(excinfo)\n-        assert 'no filename is available' in str(excinfo)\n+        assert \"Unable to infer MIME-type\" in str(excinfo)\n+        assert \"no filename is available\" in str(excinfo)\n \n-        flask.send_file(StringIO(\"LOL\"), attachment_filename='filename')\n+        flask.send_file(StringIO(\"LOL\"), attachment_filename=\"filename\")\n \n     def test_send_file_object(self, app, req_ctx):\n-        with open(os.path.join(app.root_path, 'static/index.html'), mode='rb') as f:\n-            rv = flask.send_file(f, mimetype='text/html')\n+        with open(os.path.join(app.root_path, \"static/index.html\"), mode=\"rb\") as f:\n+            rv = flask.send_file(f, mimetype=\"text/html\")\n             rv.direct_passthrough = False\n-            with app.open_resource('static/index.html') as f:\n+            with app.open_resource(\"static/index.html\") as f:\n                 assert rv.data == f.read()\n-            assert rv.mimetype == 'text/html'\n+            assert rv.mimetype == \"text/html\"\n             rv.close()\n \n         app.use_x_sendfile = True\n \n-        with open(os.path.join(app.root_path, 'static/index.html')) as f:\n-            rv = flask.send_file(f, mimetype='text/html')\n-            assert rv.mimetype == 'text/html'\n-            assert 'x-sendfile' not in rv.headers\n+        with open(os.path.join(app.root_path, \"static/index.html\")) as f:\n+            rv = flask.send_file(f, mimetype=\"text/html\")\n+            assert rv.mimetype == \"text/html\"\n+            assert \"x-sendfile\" not in rv.headers\n             rv.close()\n \n         app.use_x_sendfile = False\n-        f = StringIO('Test')\n-        rv = flask.send_file(f, mimetype='application/octet-stream')\n+        f = StringIO(\"Test\")\n+        rv = flask.send_file(f, mimetype=\"application/octet-stream\")\n         rv.direct_passthrough = False\n-        assert rv.data == b'Test'\n-        assert rv.mimetype == 'application/octet-stream'\n+        assert rv.data == b\"Test\"\n+        assert rv.mimetype == \"application/octet-stream\"\n         rv.close()\n \n         class PyStringIO(object):\n@@ -519,175 +554,192 @@ class TestSendfile(object):\n             def __getattr__(self, name):\n                 return getattr(self._io, name)\n \n-        f = PyStringIO('Test')\n-        f.name = 'test.txt'\n+        f = PyStringIO(\"Test\")\n+        f.name = \"test.txt\"\n         rv = flask.send_file(f, attachment_filename=f.name)\n         rv.direct_passthrough = False\n-        assert rv.data == b'Test'\n-        assert rv.mimetype == 'text/plain'\n+        assert rv.data == b\"Test\"\n+        assert rv.mimetype == \"text/plain\"\n         rv.close()\n \n-        f = StringIO('Test')\n-        rv = flask.send_file(f, mimetype='text/plain')\n+        f = StringIO(\"Test\")\n+        rv = flask.send_file(f, mimetype=\"text/plain\")\n         rv.direct_passthrough = False\n-        assert rv.data == b'Test'\n-        assert rv.mimetype == 'text/plain'\n+        assert rv.data == b\"Test\"\n+        assert rv.mimetype == \"text/plain\"\n         rv.close()\n \n         app.use_x_sendfile = True\n \n-        f = StringIO('Test')\n-        rv = flask.send_file(f, mimetype='text/html')\n-        assert 'x-sendfile' not in rv.headers\n+        f = StringIO(\"Test\")\n+        rv = flask.send_file(f, mimetype=\"text/html\")\n+        assert \"x-sendfile\" not in rv.headers\n         rv.close()\n \n     def test_send_file_pathlike(self, app, req_ctx):\n-        rv = flask.send_file(FakePath('static/index.html'))\n+        rv = flask.send_file(FakePath(\"static/index.html\"))\n         assert rv.direct_passthrough\n-        assert rv.mimetype == 'text/html'\n-        with app.open_resource('static/index.html') as f:\n+        assert rv.mimetype == \"text/html\"\n+        with app.open_resource(\"static/index.html\") as f:\n             rv.direct_passthrough = False\n             assert rv.data == f.read()\n         rv.close()\n \n     @pytest.mark.skipif(\n-        not callable(getattr(Range, 'to_content_range_header', None)),\n-        reason=\"not implemented within werkzeug\"\n+        not callable(getattr(Range, \"to_content_range_header\", None)),\n+        reason=\"not implemented within werkzeug\",\n     )\n     def test_send_file_range_request(self, app, client):\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return flask.send_file('static/index.html', conditional=True)\n+            return flask.send_file(\"static/index.html\", conditional=True)\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-15'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=4-15\"})\n         assert rv.status_code == 206\n-        with app.open_resource('static/index.html') as f:\n+        with app.open_resource(\"static/index.html\") as f:\n             assert rv.data == f.read()[4:16]\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=4-\"})\n         assert rv.status_code == 206\n-        with app.open_resource('static/index.html') as f:\n+        with app.open_resource(\"static/index.html\") as f:\n             assert rv.data == f.read()[4:]\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-1000'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=4-1000\"})\n         assert rv.status_code == 206\n-        with app.open_resource('static/index.html') as f:\n+        with app.open_resource(\"static/index.html\") as f:\n             assert rv.data == f.read()[4:]\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=-10'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=-10\"})\n         assert rv.status_code == 206\n-        with app.open_resource('static/index.html') as f:\n+        with app.open_resource(\"static/index.html\") as f:\n             assert rv.data == f.read()[-10:]\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=1000-'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=1000-\"})\n         assert rv.status_code == 416\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=-'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=-\"})\n         assert rv.status_code == 416\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'somethingsomething'})\n+        rv = client.get(\"/\", headers={\"Range\": \"somethingsomething\"})\n         assert rv.status_code == 416\n         rv.close()\n \n-        last_modified = datetime.datetime.utcfromtimestamp(os.path.getmtime(\n-            os.path.join(app.root_path, 'static/index.html'))).replace(\n-            microsecond=0)\n+        last_modified = datetime.datetime.utcfromtimestamp(\n+            os.path.getmtime(os.path.join(app.root_path, \"static/index.html\"))\n+        ).replace(microsecond=0)\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-15',\n-                                      'If-Range': http_date(last_modified)})\n+        rv = client.get(\n+            \"/\", headers={\"Range\": \"bytes=4-15\", \"If-Range\": http_date(last_modified)}\n+        )\n         assert rv.status_code == 206\n         rv.close()\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-15', 'If-Range': http_date(\n-            datetime.datetime(1999, 1, 1))})\n+        rv = client.get(\n+            \"/\",\n+            headers={\n+                \"Range\": \"bytes=4-15\",\n+                \"If-Range\": http_date(datetime.datetime(1999, 1, 1)),\n+            },\n+        )\n         assert rv.status_code == 200\n         rv.close()\n \n     def test_send_file_range_request_bytesio(self, app, client):\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            file = io.BytesIO(b'somethingsomething')\n+            file = io.BytesIO(b\"somethingsomething\")\n             return flask.send_file(\n-                file, attachment_filename='filename', conditional=True\n+                file, attachment_filename=\"filename\", conditional=True\n             )\n \n-        rv = client.get('/', headers={'Range': 'bytes=4-15'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=4-15\"})\n         assert rv.status_code == 206\n-        assert rv.data == b'somethingsomething'[4:16]\n+        assert rv.data == b\"somethingsomething\"[4:16]\n         rv.close()\n \n     @pytest.mark.skipif(\n-        not callable(getattr(Range, 'to_content_range_header', None)),\n-        reason=\"not implemented within werkzeug\"\n+        not callable(getattr(Range, \"to_content_range_header\", None)),\n+        reason=\"not implemented within werkzeug\",\n     )\n     def test_send_file_range_request_xsendfile_invalid(self, app, client):\n         # https://github.com/pallets/flask/issues/2526\n         app.use_x_sendfile = True\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return flask.send_file('static/index.html', conditional=True)\n+            return flask.send_file(\"static/index.html\", conditional=True)\n \n-        rv = client.get('/', headers={'Range': 'bytes=1000-'})\n+        rv = client.get(\"/\", headers={\"Range\": \"bytes=1000-\"})\n         assert rv.status_code == 416\n         rv.close()\n \n     def test_attachment(self, app, req_ctx):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n-            with open(os.path.join(app.root_path, 'static/index.html')) as f:\n-                rv = flask.send_file(f, as_attachment=True,\n-                                     attachment_filename='index.html')\n-                value, options = \\\n-                    parse_options_header(rv.headers['Content-Disposition'])\n-                assert value == 'attachment'\n+            with open(os.path.join(app.root_path, \"static/index.html\")) as f:\n+                rv = flask.send_file(\n+                    f, as_attachment=True, attachment_filename=\"index.html\"\n+                )\n+                value, options = parse_options_header(rv.headers[\"Content-Disposition\"])\n+                assert value == \"attachment\"\n                 rv.close()\n \n-        with open(os.path.join(app.root_path, 'static/index.html')) as f:\n-            rv = flask.send_file(f, as_attachment=True,\n-                                 attachment_filename='index.html')\n-            value, options = \\\n-                parse_options_header(rv.headers['Content-Disposition'])\n-            assert value == 'attachment'\n-            assert options['filename'] == 'index.html'\n-            assert 'filename*' not in rv.headers['Content-Disposition']\n+        with open(os.path.join(app.root_path, \"static/index.html\")) as f:\n+            rv = flask.send_file(\n+                f, as_attachment=True, attachment_filename=\"index.html\"\n+            )\n+            value, options = parse_options_header(rv.headers[\"Content-Disposition\"])\n+            assert value == \"attachment\"\n+            assert options[\"filename\"] == \"index.html\"\n+            assert \"filename*\" not in rv.headers[\"Content-Disposition\"]\n             rv.close()\n \n-        rv = flask.send_file('static/index.html', as_attachment=True)\n-        value, options = parse_options_header(rv.headers['Content-Disposition'])\n-        assert value == 'attachment'\n-        assert options['filename'] == 'index.html'\n+        rv = flask.send_file(\"static/index.html\", as_attachment=True)\n+        value, options = parse_options_header(rv.headers[\"Content-Disposition\"])\n+        assert value == \"attachment\"\n+        assert options[\"filename\"] == \"index.html\"\n         rv.close()\n \n-        rv = flask.send_file(StringIO('Test'), as_attachment=True,\n-                             attachment_filename='index.txt',\n-                             add_etags=False)\n-        assert rv.mimetype == 'text/plain'\n-        value, options = parse_options_header(rv.headers['Content-Disposition'])\n-        assert value == 'attachment'\n-        assert options['filename'] == 'index.txt'\n+        rv = flask.send_file(\n+            StringIO(\"Test\"),\n+            as_attachment=True,\n+            attachment_filename=\"index.txt\",\n+            add_etags=False,\n+        )\n+        assert rv.mimetype == \"text/plain\"\n+        value, options = parse_options_header(rv.headers[\"Content-Disposition\"])\n+        assert value == \"attachment\"\n+        assert options[\"filename\"] == \"index.txt\"\n         rv.close()\n \n-    @pytest.mark.usefixtures('req_ctx')\n-    @pytest.mark.parametrize(('filename', 'ascii', 'utf8'), (\n-        ('index.html', 'index.html', False),\n-        (u'Ñandú／pingüino.txt', '\"Nandu/pinguino.txt\"',\n-        '%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt'),\n-        (u'Vögel.txt', 'Vogel.txt', 'V%C3%B6gel.txt'),\n+    @pytest.mark.usefixtures(\"req_ctx\")\n+    @pytest.mark.parametrize(\n+        (\"filename\", \"ascii\", \"utf8\"),\n+        (\n+            (\"index.html\", \"index.html\", False),\n+            (\n+                u\"Ñandú／pingüino.txt\",\n+                '\"Nandu/pinguino.txt\"',\n+                \"%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\",\n+            ),\n+            (u\"Vögel.txt\", \"Vogel.txt\", \"V%C3%B6gel.txt\"),\n             # Native string not marked as Unicode on Python 2\n-        ('tést.txt', 'test.txt', 't%C3%A9st.txt'),\n-    ))\n+            (\"tést.txt\", \"test.txt\", \"t%C3%A9st.txt\"),\n+        ),\n+    )\n     def test_attachment_filename_encoding(self, filename, ascii, utf8):\n-        rv = flask.send_file('static/index.html', as_attachment=True, attachment_filename=filename)\n+        rv = flask.send_file(\n+            \"static/index.html\", as_attachment=True, attachment_filename=filename\n+        )\n         rv.close()\n-        content_disposition = rv.headers['Content-Disposition']\n-        assert 'filename=%s' % ascii in content_disposition\n+        content_disposition = rv.headers[\"Content-Disposition\"]\n+        assert \"filename=%s\" % ascii in content_disposition\n         if utf8:\n             assert \"filename*=UTF-8''\" + utf8 in content_disposition\n         else:\n@@ -697,31 +749,31 @@ class TestSendfile(object):\n         # default cache timeout is 12 hours\n \n         # Test with static file handler.\n-        rv = app.send_static_file('index.html')\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        rv = app.send_static_file(\"index.html\")\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == 12 * 60 * 60\n         rv.close()\n         # Test again with direct use of send_file utility.\n-        rv = flask.send_file('static/index.html')\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        rv = flask.send_file(\"static/index.html\")\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == 12 * 60 * 60\n         rv.close()\n-        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n+        app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 3600\n \n         # Test with static file handler.\n-        rv = app.send_static_file('index.html')\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        rv = app.send_static_file(\"index.html\")\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == 3600\n         rv.close()\n         # Test again with direct use of send_file utility.\n-        rv = flask.send_file('static/index.html')\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        rv = flask.send_file(\"static/index.html\")\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == 3600\n         rv.close()\n \n         # Test with static file handler.\n-        rv = app.send_static_file(FakePath('index.html'))\n-        cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+        rv = app.send_static_file(FakePath(\"index.html\"))\n+        cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n         assert cc.max_age == 3600\n         rv.close()\n \n@@ -732,77 +784,79 @@ class TestSendfile(object):\n         app = StaticFileApp(__name__)\n         with app.test_request_context():\n             # Test with static file handler.\n-            rv = app.send_static_file('index.html')\n-            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            rv = app.send_static_file(\"index.html\")\n+            cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n             assert cc.max_age == 10\n             rv.close()\n             # Test again with direct use of send_file utility.\n-            rv = flask.send_file('static/index.html')\n-            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            rv = flask.send_file(\"static/index.html\")\n+            cc = parse_cache_control_header(rv.headers[\"Cache-Control\"])\n             assert cc.max_age == 10\n             rv.close()\n \n     def test_send_from_directory(self, app, req_ctx):\n-        app.root_path = os.path.join(os.path.dirname(__file__),\n-                                     'test_apps', 'subdomaintestmodule')\n-        rv = flask.send_from_directory('static', 'hello.txt')\n+        app.root_path = os.path.join(\n+            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n+        )\n+        rv = flask.send_from_directory(\"static\", \"hello.txt\")\n         rv.direct_passthrough = False\n-        assert rv.data.strip() == b'Hello Subdomain'\n+        assert rv.data.strip() == b\"Hello Subdomain\"\n         rv.close()\n \n     def test_send_from_directory_pathlike(self, app, req_ctx):\n-        app.root_path = os.path.join(os.path.dirname(__file__),\n-                                     'test_apps', 'subdomaintestmodule')\n-        rv = flask.send_from_directory(FakePath('static'), FakePath('hello.txt'))\n+        app.root_path = os.path.join(\n+            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n+        )\n+        rv = flask.send_from_directory(FakePath(\"static\"), FakePath(\"hello.txt\"))\n         rv.direct_passthrough = False\n-        assert rv.data.strip() == b'Hello Subdomain'\n+        assert rv.data.strip() == b\"Hello Subdomain\"\n         rv.close()\n \n     def test_send_from_directory_bad_request(self, app, req_ctx):\n-        app.root_path = os.path.join(os.path.dirname(__file__),\n-                                     'test_apps', 'subdomaintestmodule')\n+        app.root_path = os.path.join(\n+            os.path.dirname(__file__), \"test_apps\", \"subdomaintestmodule\"\n+        )\n \n         with pytest.raises(BadRequest):\n-            flask.send_from_directory('static', 'bad\\x00')\n+            flask.send_from_directory(\"static\", \"bad\\x00\")\n \n \n class TestUrlFor(object):\n     def test_url_for_with_anchor(self, app, req_ctx):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return '42'\n+            return \"42\"\n \n-        assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n+        assert flask.url_for(\"index\", _anchor=\"x y\") == \"/#x%20y\"\n \n     def test_url_for_with_scheme(self, app, req_ctx):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return '42'\n+            return \"42\"\n \n-        assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n+        assert (\n+            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n+            == \"https://localhost/\"\n+        )\n \n     def test_url_for_with_scheme_not_external(self, app, req_ctx):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return '42'\n+            return \"42\"\n \n-        pytest.raises(ValueError,\n-                      flask.url_for,\n-                      'index',\n-                      _scheme='https')\n+        pytest.raises(ValueError, flask.url_for, \"index\", _scheme=\"https\")\n \n     def test_url_for_with_alternating_schemes(self, app, req_ctx):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            return '42'\n+            return \"42\"\n \n-        assert flask.url_for('index', _external=True) == 'http://localhost/'\n-        assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n-        assert flask.url_for('index', _external=True) == 'http://localhost/'\n+        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\"\n+        assert (\n+            flask.url_for(\"index\", _external=True, _scheme=\"https\")\n+            == \"https://localhost/\"\n+        )\n+        assert flask.url_for(\"index\", _external=True) == \"http://localhost/\"\n \n     def test_url_with_method(self, app, req_ctx):\n         from flask.views import MethodView\n@@ -810,23 +864,20 @@ class TestUrlFor(object):\n         class MyView(MethodView):\n             def get(self, id=None):\n                 if id is None:\n-                    return 'List'\n-                return 'Get %d' % id\n+                    return \"List\"\n+                return \"Get %d\" % id\n \n             def post(self):\n-                return 'Create'\n+                return \"Create\"\n \n-        myview = MyView.as_view('myview')\n-        app.add_url_rule('/myview/', methods=['GET'],\n-                         view_func=myview)\n-        app.add_url_rule('/myview/<int:id>', methods=['GET'],\n-                         view_func=myview)\n-        app.add_url_rule('/myview/create', methods=['POST'],\n-                         view_func=myview)\n+        myview = MyView.as_view(\"myview\")\n+        app.add_url_rule(\"/myview/\", methods=[\"GET\"], view_func=myview)\n+        app.add_url_rule(\"/myview/<int:id>\", methods=[\"GET\"], view_func=myview)\n+        app.add_url_rule(\"/myview/create\", methods=[\"POST\"], view_func=myview)\n \n-        assert flask.url_for('myview', _method='GET') == '/myview/'\n-        assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n-        assert flask.url_for('myview', _method='POST') == '/myview/create'\n+        assert flask.url_for(\"myview\", _method=\"GET\") == \"/myview/\"\n+        assert flask.url_for(\"myview\", id=42, _method=\"GET\") == \"/myview/42\"\n+        assert flask.url_for(\"myview\", _method=\"POST\") == \"/myview/create\"\n \n \n class TestNoImports(object):\n@@ -841,42 +892,40 @@ class TestNoImports(object):\n     \"\"\"\n \n     def test_name_with_import_error(self, modules_tmpdir):\n-        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n+        modules_tmpdir.join(\"importerror.py\").write(\"raise NotImplementedError()\")\n         try:\n-            flask.Flask('importerror')\n+            flask.Flask(\"importerror\")\n         except NotImplementedError:\n-            assert False, 'Flask(import_name) is importing import_name.'\n+            assert False, \"Flask(import_name) is importing import_name.\"\n \n \n class TestStreaming(object):\n     def test_streaming_with_context(self, app, client):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n             def generate():\n-                yield 'Hello '\n-                yield flask.request.args['name']\n-                yield '!'\n+                yield \"Hello \"\n+                yield flask.request.args[\"name\"]\n+                yield \"!\"\n \n             return flask.Response(flask.stream_with_context(generate()))\n \n-        rv = client.get('/?name=World')\n-        assert rv.data == b'Hello World!'\n+        rv = client.get(\"/?name=World\")\n+        assert rv.data == b\"Hello World!\"\n \n     def test_streaming_with_context_as_decorator(self, app, client):\n-\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n             @flask.stream_with_context\n             def generate(hello):\n                 yield hello\n-                yield flask.request.args['name']\n-                yield '!'\n+                yield flask.request.args[\"name\"]\n+                yield \"!\"\n \n-            return flask.Response(generate('Hello '))\n+            return flask.Response(generate(\"Hello \"))\n \n-        rv = client.get('/?name=World')\n-        assert rv.data == b'Hello World!'\n+        rv = client.get(\"/?name=World\")\n+        assert rv.data == b\"Hello World!\"\n \n     def test_streaming_with_context_and_custom_close(self, app, client):\n         called = []\n@@ -896,53 +945,52 @@ class TestStreaming(object):\n \n             next = __next__\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n             def generate():\n-                yield 'Hello '\n-                yield flask.request.args['name']\n-                yield '!'\n+                yield \"Hello \"\n+                yield flask.request.args[\"name\"]\n+                yield \"!\"\n \n-            return flask.Response(flask.stream_with_context(\n-                Wrapper(generate())))\n+            return flask.Response(flask.stream_with_context(Wrapper(generate())))\n \n-        rv = client.get('/?name=World')\n-        assert rv.data == b'Hello World!'\n+        rv = client.get(\"/?name=World\")\n+        assert rv.data == b\"Hello World!\"\n         assert called == [42]\n \n     def test_stream_keeps_session(self, app, client):\n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            flask.session['test'] = 'flask'\n+            flask.session[\"test\"] = \"flask\"\n \n             @flask.stream_with_context\n             def gen():\n-                yield flask.session['test']\n+                yield flask.session[\"test\"]\n \n             return flask.Response(gen())\n \n-        rv = client.get('/')\n-        assert rv.data == b'flask'\n+        rv = client.get(\"/\")\n+        assert rv.data == b\"flask\"\n \n \n class TestSafeJoin(object):\n     def test_safe_join(self):\n         # Valid combinations of *args and expected joined paths.\n         passing = (\n-            (('a/b/c',), 'a/b/c'),\n-            (('/', 'a/', 'b/', 'c/'), '/a/b/c'),\n-            (('a', 'b', 'c'), 'a/b/c'),\n-            (('/a', 'b/c'), '/a/b/c'),\n-            (('a/b', 'X/../c'), 'a/b/c'),\n-            (('/a/b', 'c/X/..'), '/a/b/c'),\n+            ((\"a/b/c\",), \"a/b/c\"),\n+            ((\"/\", \"a/\", \"b/\", \"c/\"), \"/a/b/c\"),\n+            ((\"a\", \"b\", \"c\"), \"a/b/c\"),\n+            ((\"/a\", \"b/c\"), \"/a/b/c\"),\n+            ((\"a/b\", \"X/../c\"), \"a/b/c\"),\n+            ((\"/a/b\", \"c/X/..\"), \"/a/b/c\"),\n             # If last path is '' add a slash\n-            (('/a/b/c', ''), '/a/b/c/'),\n+            ((\"/a/b/c\", \"\"), \"/a/b/c/\"),\n             # Preserve dot slash\n-            (('/a/b/c', './'), '/a/b/c/.'),\n-            (('a/b/c', 'X/..'), 'a/b/c/.'),\n+            ((\"/a/b/c\", \"./\"), \"/a/b/c/.\"),\n+            ((\"a/b/c\", \"X/..\"), \"a/b/c/.\"),\n             # Base directory is always considered safe\n-            (('../', 'a/b/c'), '../a/b/c'),\n-            (('/..',), '/..'),\n+            ((\"../\", \"a/b/c\"), \"../a/b/c\"),\n+            ((\"/..\",), \"/..\"),\n         )\n \n         for args, expected in passing:\n@@ -952,44 +1000,52 @@ class TestSafeJoin(object):\n         # Should raise werkzeug.exceptions.NotFound on unsafe joins.\n         failing = (\n             # path.isabs and ``..'' checks\n-            ('/a', 'b', '/c'),\n-            ('/a', '../b/c'),\n-            ('/a', '..', 'b/c'),\n+            (\"/a\", \"b\", \"/c\"),\n+            (\"/a\", \"../b/c\"),\n+            (\"/a\", \"..\", \"b/c\"),\n             # Boundaries violations after path normalization\n-            ('/a', 'b/../b/../../c'),\n-            ('/a', 'b', 'c/../..'),\n-            ('/a', 'b/../../c'),\n+            (\"/a\", \"b/../b/../../c\"),\n+            (\"/a\", \"b\", \"c/../..\"),\n+            (\"/a\", \"b/../../c\"),\n         )\n \n         for args in failing:\n             with pytest.raises(NotFound):\n                 print(flask.safe_join(*args))\n \n-class TestHelpers(object):\n \n-    @pytest.mark.parametrize('debug, expected_flag, expected_default_flag', [\n-        ('', False, False),\n-        ('0', False, False),\n-        ('False', False, False),\n-        ('No', False, False),\n-        ('True', True, True)\n-    ])\n-    def test_get_debug_flag(self, monkeypatch, debug, expected_flag, expected_default_flag):\n-        monkeypatch.setenv('FLASK_DEBUG', debug)\n+class TestHelpers(object):\n+    @pytest.mark.parametrize(\n+        \"debug, expected_flag, expected_default_flag\",\n+        [\n+            (\"\", False, False),\n+            (\"0\", False, False),\n+            (\"False\", False, False),\n+            (\"No\", False, False),\n+            (\"True\", True, True),\n+        ],\n+    )\n+    def test_get_debug_flag(\n+        self, monkeypatch, debug, expected_flag, expected_default_flag\n+    ):\n+        monkeypatch.setenv(\"FLASK_DEBUG\", debug)\n         if expected_flag is None:\n             assert get_debug_flag() is None\n         else:\n             assert get_debug_flag() == expected_flag\n         assert get_debug_flag() == expected_default_flag\n \n-    @pytest.mark.parametrize('env, ref_env, debug', [\n-        ('', 'production', False),\n-        ('production', 'production', False),\n-        ('development', 'development', True),\n-        ('other', 'other', False),\n-    ])\n+    @pytest.mark.parametrize(\n+        \"env, ref_env, debug\",\n+        [\n+            (\"\", \"production\", False),\n+            (\"production\", \"production\", False),\n+            (\"development\", \"development\", True),\n+            (\"other\", \"other\", False),\n+        ],\n+    )\n     def test_get_env(self, monkeypatch, env, ref_env, debug):\n-        monkeypatch.setenv('FLASK_ENV', env)\n+        monkeypatch.setenv(\"FLASK_ENV\", env)\n         assert get_debug_flag() == debug\n         assert get_env() == ref_env\n \n@@ -998,9 +1054,9 @@ class TestHelpers(object):\n         with app.test_request_context():\n             rv = flask.helpers.make_response()\n             assert rv.status_code == 200\n-            assert rv.mimetype == 'text/html'\n+            assert rv.mimetype == \"text/html\"\n \n-            rv = flask.helpers.make_response('Hello')\n+            rv = flask.helpers.make_response(\"Hello\")\n             assert rv.status_code == 200\n-            assert rv.data == b'Hello'\n-            assert rv.mimetype == 'text/html'\n+            assert rv.data == b\"Hello\"\n+            assert rv.mimetype == \"text/html\"\n\n@@ -17,112 +17,120 @@ from flask._compat import PY2\n \n def test_explicit_instance_paths(modules_tmpdir):\n     with pytest.raises(ValueError) as excinfo:\n-        flask.Flask(__name__, instance_path='instance')\n-    assert 'must be absolute' in str(excinfo.value)\n+        flask.Flask(__name__, instance_path=\"instance\")\n+    assert \"must be absolute\" in str(excinfo.value)\n \n     app = flask.Flask(__name__, instance_path=str(modules_tmpdir))\n     assert app.instance_path == str(modules_tmpdir)\n \n \n def test_main_module_paths(modules_tmpdir, purge_module):\n-    app = modules_tmpdir.join('main_app.py')\n+    app = modules_tmpdir.join(\"main_app.py\")\n     app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n-    purge_module('main_app')\n+    purge_module(\"main_app\")\n \n     from main_app import app\n+\n     here = os.path.abspath(os.getcwd())\n-    assert app.instance_path == os.path.join(here, 'instance')\n+    assert app.instance_path == os.path.join(here, \"instance\")\n \n \n def test_uninstalled_module_paths(modules_tmpdir, purge_module):\n-    app = modules_tmpdir.join('config_module_app.py').write(\n-        'import os\\n'\n-        'import flask\\n'\n-        'here = os.path.abspath(os.path.dirname(__file__))\\n'\n-        'app = flask.Flask(__name__)\\n'\n+    app = modules_tmpdir.join(\"config_module_app.py\").write(\n+        \"import os\\n\"\n+        \"import flask\\n\"\n+        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n+        \"app = flask.Flask(__name__)\\n\"\n     )\n-    purge_module('config_module_app')\n+    purge_module(\"config_module_app\")\n \n     from config_module_app import app\n-    assert app.instance_path == str(modules_tmpdir.join('instance'))\n+\n+    assert app.instance_path == str(modules_tmpdir.join(\"instance\"))\n \n \n def test_uninstalled_package_paths(modules_tmpdir, purge_module):\n-    app = modules_tmpdir.mkdir('config_package_app')\n-    init = app.join('__init__.py')\n+    app = modules_tmpdir.mkdir(\"config_package_app\")\n+    init = app.join(\"__init__.py\")\n     init.write(\n-        'import os\\n'\n-        'import flask\\n'\n-        'here = os.path.abspath(os.path.dirname(__file__))\\n'\n-        'app = flask.Flask(__name__)\\n'\n+        \"import os\\n\"\n+        \"import flask\\n\"\n+        \"here = os.path.abspath(os.path.dirname(__file__))\\n\"\n+        \"app = flask.Flask(__name__)\\n\"\n     )\n-    purge_module('config_package_app')\n+    purge_module(\"config_package_app\")\n \n     from config_package_app import app\n-    assert app.instance_path == str(modules_tmpdir.join('instance'))\n+\n+    assert app.instance_path == str(modules_tmpdir.join(\"instance\"))\n \n \n-def test_installed_module_paths(modules_tmpdir, modules_tmpdir_prefix,\n-                                purge_module, site_packages, limit_loader):\n-    site_packages.join('site_app.py').write(\n-        'import flask\\n'\n-        'app = flask.Flask(__name__)\\n'\n+def test_installed_module_paths(\n+    modules_tmpdir, modules_tmpdir_prefix, purge_module, site_packages, limit_loader\n+):\n+    site_packages.join(\"site_app.py\").write(\n+        \"import flask\\n\" \"app = flask.Flask(__name__)\\n\"\n     )\n-    purge_module('site_app')\n+    purge_module(\"site_app\")\n \n     from site_app import app\n-    assert app.instance_path == \\\n-        modules_tmpdir.join('var').join('site_app-instance')\n+\n+    assert app.instance_path == modules_tmpdir.join(\"var\").join(\"site_app-instance\")\n \n \n-def test_installed_package_paths(limit_loader, modules_tmpdir,\n-                                 modules_tmpdir_prefix, purge_module,\n-                                 monkeypatch):\n-    installed_path = modules_tmpdir.mkdir('path')\n+def test_installed_package_paths(\n+    limit_loader, modules_tmpdir, modules_tmpdir_prefix, purge_module, monkeypatch\n+):\n+    installed_path = modules_tmpdir.mkdir(\"path\")\n     monkeypatch.syspath_prepend(installed_path)\n \n-    app = installed_path.mkdir('installed_package')\n-    init = app.join('__init__.py')\n-    init.write('import flask\\napp = flask.Flask(__name__)')\n-    purge_module('installed_package')\n+    app = installed_path.mkdir(\"installed_package\")\n+    init = app.join(\"__init__.py\")\n+    init.write(\"import flask\\napp = flask.Flask(__name__)\")\n+    purge_module(\"installed_package\")\n \n     from installed_package import app\n-    assert app.instance_path == \\\n-        modules_tmpdir.join('var').join('installed_package-instance')\n+\n+    assert app.instance_path == modules_tmpdir.join(\"var\").join(\n+        \"installed_package-instance\"\n+    )\n \n \n-def test_prefix_package_paths(limit_loader, modules_tmpdir,\n-                              modules_tmpdir_prefix, purge_module,\n-                              site_packages):\n-    app = site_packages.mkdir('site_package')\n-    init = app.join('__init__.py')\n-    init.write('import flask\\napp = flask.Flask(__name__)')\n-    purge_module('site_package')\n+def test_prefix_package_paths(\n+    limit_loader, modules_tmpdir, modules_tmpdir_prefix, purge_module, site_packages\n+):\n+    app = site_packages.mkdir(\"site_package\")\n+    init = app.join(\"__init__.py\")\n+    init.write(\"import flask\\napp = flask.Flask(__name__)\")\n+    purge_module(\"site_package\")\n \n     import site_package\n-    assert site_package.app.instance_path == \\\n-        modules_tmpdir.join('var').join('site_package-instance')\n \n-\n-def test_egg_installed_paths(install_egg, modules_tmpdir,\n-                             modules_tmpdir_prefix):\n-    modules_tmpdir.mkdir('site_egg').join('__init__.py').write(\n-        'import flask\\n\\napp = flask.Flask(__name__)'\n+    assert site_package.app.instance_path == modules_tmpdir.join(\"var\").join(\n+        \"site_package-instance\"\n     )\n-    install_egg('site_egg')\n+\n+\n+def test_egg_installed_paths(install_egg, modules_tmpdir, modules_tmpdir_prefix):\n+    modules_tmpdir.mkdir(\"site_egg\").join(\"__init__.py\").write(\n+        \"import flask\\n\\napp = flask.Flask(__name__)\"\n+    )\n+    install_egg(\"site_egg\")\n     try:\n         import site_egg\n-        assert site_egg.app.instance_path == \\\n-            str(modules_tmpdir.join('var/').join('site_egg-instance'))\n+\n+        assert site_egg.app.instance_path == str(\n+            modules_tmpdir.join(\"var/\").join(\"site_egg-instance\")\n+        )\n     finally:\n-        if 'site_egg' in sys.modules:\n-            del sys.modules['site_egg']\n+        if \"site_egg\" in sys.modules:\n+            del sys.modules[\"site_egg\"]\n \n \n-@pytest.mark.skipif(not PY2, reason='This only works under Python 2.')\n+@pytest.mark.skipif(not PY2, reason=\"This only works under Python 2.\")\n def test_meta_path_loader_without_is_package(request, modules_tmpdir):\n-    app = modules_tmpdir.join('unimportable.py')\n-    app.write('import flask\\napp = flask.Flask(__name__)')\n+    app = modules_tmpdir.join(\"unimportable.py\")\n+    app.write(\"import flask\\napp = flask.Flask(__name__)\")\n \n     class Loader(object):\n         def find_module(self, name, path=None):\n\n@@ -16,18 +16,21 @@ from flask import Markup\n from flask.json.tag import TaggedJSONSerializer, JSONTag\n \n \n-@pytest.mark.parametrize(\"data\", (\n-    {' t': (1, 2, 3)},\n-    {' t__': b'a'},\n-    {' di': ' di'},\n-    {'x': (1, 2, 3), 'y': 4},\n+@pytest.mark.parametrize(\n+    \"data\",\n+    (\n+        {\" t\": (1, 2, 3)},\n+        {\" t__\": b\"a\"},\n+        {\" di\": \" di\"},\n+        {\"x\": (1, 2, 3), \"y\": 4},\n         (1, 2, 3),\n         [(1, 2, 3)],\n-    b'\\xff',\n-    Markup('<html>'),\n+        b\"\\xff\",\n+        Markup(\"<html>\"),\n         uuid4(),\n         datetime.utcnow().replace(microsecond=0),\n-))\n+    ),\n+)\n def test_dump_load_unchanged(data):\n     s = TaggedJSONSerializer()\n     assert s.loads(s.dumps(data)) == data\n@@ -35,12 +38,12 @@ def test_dump_load_unchanged(data):\n \n def test_duplicate_tag():\n     class TagDict(JSONTag):\n-        key = ' d'\n+        key = \" d\"\n \n     s = TaggedJSONSerializer()\n     pytest.raises(KeyError, s.register, TagDict)\n     s.register(TagDict, force=True, index=0)\n-    assert isinstance(s.tags[' d'], TagDict)\n+    assert isinstance(s.tags[\" d\"], TagDict)\n     assert isinstance(s.order[0], TagDict)\n \n \n@@ -51,7 +54,7 @@ def test_custom_tag():\n \n     class TagFoo(JSONTag):\n         __slots__ = ()\n-        key = ' f'\n+        key = \" f\"\n \n         def check(self, value):\n             return isinstance(value, Foo)\n@@ -64,7 +67,7 @@ def test_custom_tag():\n \n     s = TaggedJSONSerializer()\n     s.register(TagFoo)\n-    assert s.loads(s.dumps(Foo('bar'))).data == 'bar'\n+    assert s.loads(s.dumps(Foo(\"bar\"))).data == \"bar\"\n \n \n def test_tag_interface():\n@@ -76,10 +79,10 @@ def test_tag_interface():\n \n def test_tag_order():\n     class Tag1(JSONTag):\n-        key = ' 1'\n+        key = \" 1\"\n \n     class Tag2(JSONTag):\n-        key = ' 2'\n+        key = \" 2\"\n \n     s = TaggedJSONSerializer()\n \n\n@@ -13,8 +13,7 @@ import sys\n import pytest\n \n from flask._compat import StringIO\n-from flask.logging import default_handler, has_level_handler, \\\n-    wsgi_errors_stream\n+from flask.logging import default_handler, has_level_handler, wsgi_errors_stream\n \n \n @pytest.fixture(autouse=True)\n@@ -23,12 +22,11 @@ def reset_logging(pytestconfig):\n     logging.root.handlers = []\n     root_level = logging.root.level\n \n-    logger = logging.getLogger('flask.app')\n+    logger = logging.getLogger(\"flask.app\")\n     logger.handlers = []\n     logger.setLevel(logging.NOTSET)\n \n-    logging_plugin = pytestconfig.pluginmanager.unregister(\n-        name='logging-plugin')\n+    logging_plugin = pytestconfig.pluginmanager.unregister(name=\"logging-plugin\")\n \n     yield\n \n@@ -39,11 +37,11 @@ def reset_logging(pytestconfig):\n     logger.setLevel(logging.NOTSET)\n \n     if logging_plugin:\n-        pytestconfig.pluginmanager.register(logging_plugin, 'logging-plugin')\n+        pytestconfig.pluginmanager.register(logging_plugin, \"logging-plugin\")\n \n \n def test_logger(app):\n-    assert app.logger.name == 'flask.app'\n+    assert app.logger.name == \"flask.app\"\n     assert app.logger.level == logging.NOTSET\n     assert app.logger.handlers == [default_handler]\n \n@@ -61,14 +59,14 @@ def test_existing_handler(app):\n \n \n def test_wsgi_errors_stream(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        app.logger.error('test')\n-        return ''\n+        app.logger.error(\"test\")\n+        return \"\"\n \n     stream = StringIO()\n-    client.get('/', errors_stream=stream)\n-    assert 'ERROR in test_logging: test' in stream.getvalue()\n+    client.get(\"/\", errors_stream=stream)\n+    assert \"ERROR in test_logging: test\" in stream.getvalue()\n \n     assert wsgi_errors_stream._get_current_object() is sys.stderr\n \n@@ -77,7 +75,7 @@ def test_wsgi_errors_stream(app, client):\n \n \n def test_has_level_handler():\n-    logger = logging.getLogger('flask.app')\n+    logger = logging.getLogger(\"flask.app\")\n     assert not has_level_handler(logger)\n \n     handler = logging.StreamHandler()\n@@ -93,15 +91,15 @@ def test_has_level_handler():\n \n \n def test_log_view_exception(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        raise Exception('test')\n+        raise Exception(\"test\")\n \n     app.testing = False\n     stream = StringIO()\n-    rv = client.get('/', errors_stream=stream)\n+    rv = client.get(\"/\", errors_stream=stream)\n     assert rv.status_code == 500\n     assert rv.data\n     err = stream.getvalue()\n-    assert 'Exception on / [GET]' in err\n-    assert 'Exception: test' in err\n+    assert \"Exception on / [GET]\" in err\n+    assert \"Exception: test\" in err\n\n@@ -22,7 +22,6 @@ _gc_lock = threading.Lock()\n \n \n class assert_no_leak(object):\n-\n     def __enter__(self):\n         gc.disable()\n         _gc_lock.acquire()\n@@ -32,7 +31,7 @@ class assert_no_leak(object):\n         # This is necessary since Python only starts tracking\n         # dicts if they contain mutable objects.  It's a horrible,\n         # horrible hack but makes this kinda testable.\n-        loc.__storage__['FOOO'] = [1, 2, 3]\n+        loc.__storage__[\"FOOO\"] = [1, 2, 3]\n \n         gc.collect()\n         self.old_objects = len(gc.get_objects())\n@@ -41,7 +40,7 @@ class assert_no_leak(object):\n         gc.collect()\n         new_objects = len(gc.get_objects())\n         if new_objects > self.old_objects:\n-            pytest.fail('Example code leaked')\n+            pytest.fail(\"Example code leaked\")\n         _gc_lock.release()\n         gc.enable()\n \n@@ -49,22 +48,21 @@ class assert_no_leak(object):\n def test_memory_consumption():\n     app = flask.Flask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('simple_template.html', whiskey=42)\n+        return flask.render_template(\"simple_template.html\", whiskey=42)\n \n     def fire():\n         with app.test_client() as c:\n-            rv = c.get('/')\n+            rv = c.get(\"/\")\n             assert rv.status_code == 200\n-            assert rv.data == b'<h1>42</h1>'\n+            assert rv.data == b\"<h1>42</h1>\"\n \n     # Trigger caches\n     fire()\n \n     # This test only works on CPython 2.7.\n-    if sys.version_info >= (2, 7) and \\\n-            not hasattr(sys, 'pypy_translation_info'):\n+    if sys.version_info >= (2, 7) and not hasattr(sys, \"pypy_translation_info\"):\n         with assert_no_leak():\n             for x in range(10):\n                 fire()\n@@ -72,8 +70,9 @@ def test_memory_consumption():\n \n def test_safe_join_toplevel_pardir():\n     from flask.helpers import safe_join\n+\n     with pytest.raises(NotFound):\n-        safe_join('/foo', '..')\n+        safe_join(\"/foo\", \"..\")\n \n \n def test_aborting(app):\n@@ -84,16 +83,16 @@ def test_aborting(app):\n     def handle_foo(e):\n         return str(e.whatever)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        raise flask.abort(flask.redirect(flask.url_for('test')))\n+        raise flask.abort(flask.redirect(flask.url_for(\"test\")))\n \n-    @app.route('/test')\n+    @app.route(\"/test\")\n     def test():\n         raise Foo()\n \n     with app.test_client() as c:\n-        rv = c.get('/')\n-        assert rv.headers['Location'] == 'http://localhost/test'\n-        rv = c.get('/test')\n-        assert rv.data == b'42'\n+        rv = c.get(\"/\")\n+        assert rv.headers[\"Location\"] == \"http://localhost/test\"\n+        rv = c.get(\"/test\")\n+        assert rv.data == b\"42\"\n\n@@ -42,7 +42,7 @@ def test_teardown_with_previous_exception(app):\n         buffer.append(exception)\n \n     try:\n-        raise Exception('dummy')\n+        raise Exception(\"dummy\")\n     except Exception:\n         pass\n \n@@ -61,35 +61,39 @@ def test_teardown_with_handled_exception(app):\n     with app.test_request_context():\n         assert buffer == []\n         try:\n-            raise Exception('dummy')\n+            raise Exception(\"dummy\")\n         except Exception:\n             pass\n     assert buffer == [None]\n \n \n def test_proper_test_request_context(app):\n-    app.config.update(\n-        SERVER_NAME='localhost.localdomain:5000'\n-    )\n+    app.config.update(SERVER_NAME=\"localhost.localdomain:5000\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return None\n \n-    @app.route('/', subdomain='foo')\n+    @app.route(\"/\", subdomain=\"foo\")\n     def sub():\n         return None\n \n-    with app.test_request_context('/'):\n-        assert flask.url_for('index', _external=True) == \\\n-               'http://localhost.localdomain:5000/'\n+    with app.test_request_context(\"/\"):\n+        assert (\n+            flask.url_for(\"index\", _external=True)\n+            == \"http://localhost.localdomain:5000/\"\n+        )\n \n-    with app.test_request_context('/'):\n-        assert flask.url_for('sub', _external=True) == \\\n-               'http://foo.localhost.localdomain:5000/'\n+    with app.test_request_context(\"/\"):\n+        assert (\n+            flask.url_for(\"sub\", _external=True)\n+            == \"http://foo.localhost.localdomain:5000/\"\n+        )\n \n     try:\n-        with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n+        with app.test_request_context(\n+            \"/\", environ_overrides={\"HTTP_HOST\": \"localhost\"}\n+        ):\n             pass\n     except ValueError as e:\n         assert str(e) == (\n@@ -98,28 +102,30 @@ def test_proper_test_request_context(app):\n             \"server name from the WSGI environment ('localhost')\"\n         )\n \n-    app.config.update(SERVER_NAME='localhost')\n-    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n+    app.config.update(SERVER_NAME=\"localhost\")\n+    with app.test_request_context(\"/\", environ_overrides={\"SERVER_NAME\": \"localhost\"}):\n         pass\n \n-    app.config.update(SERVER_NAME='localhost:80')\n-    with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n+    app.config.update(SERVER_NAME=\"localhost:80\")\n+    with app.test_request_context(\n+        \"/\", environ_overrides={\"SERVER_NAME\": \"localhost:80\"}\n+    ):\n         pass\n \n \n def test_context_binding(app):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Hello %s!' % flask.request.args['name']\n+        return \"Hello %s!\" % flask.request.args[\"name\"]\n \n-    @app.route('/meh')\n+    @app.route(\"/meh\")\n     def meh():\n         return flask.request.url\n \n-    with app.test_request_context('/?name=World'):\n-        assert index() == 'Hello World!'\n-    with app.test_request_context('/meh'):\n-        assert meh() == 'http://localhost/meh'\n+    with app.test_request_context(\"/?name=World\"):\n+        assert index() == \"Hello World!\"\n+    with app.test_request_context(\"/meh\"):\n+        assert meh() == \"http://localhost/meh\"\n     assert flask._request_ctx_stack.top is None\n \n \n@@ -136,27 +142,26 @@ def test_context_test(app):\n \n \n def test_manual_context_binding(app):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Hello %s!' % flask.request.args['name']\n+        return \"Hello %s!\" % flask.request.args[\"name\"]\n \n-    ctx = app.test_request_context('/?name=World')\n+    ctx = app.test_request_context(\"/?name=World\")\n     ctx.push()\n-    assert index() == 'Hello World!'\n+    assert index() == \"Hello World!\"\n     ctx.pop()\n     with pytest.raises(RuntimeError):\n         index()\n \n \n-@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n+@pytest.mark.skipif(greenlet is None, reason=\"greenlet not installed\")\n class TestGreenletContextCopying(object):\n-\n     def test_greenlet_context_copying(self, app, client):\n         greenlets = []\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            flask.session['fizz'] = 'buzz'\n+            flask.session[\"fizz\"] = \"buzz\"\n             reqctx = flask._request_ctx_stack.top.copy()\n \n             def g():\n@@ -165,17 +170,17 @@ class TestGreenletContextCopying(object):\n                 with reqctx:\n                     assert flask.request\n                     assert flask.current_app == app\n-                    assert flask.request.path == '/'\n-                    assert flask.request.args['foo'] == 'bar'\n-                    assert flask.session.get('fizz') == 'buzz'\n+                    assert flask.request.path == \"/\"\n+                    assert flask.request.args[\"foo\"] == \"bar\"\n+                    assert flask.session.get(\"fizz\") == \"buzz\"\n                 assert not flask.request\n                 return 42\n \n             greenlets.append(greenlet(g))\n-            return 'Hello World!'\n+            return \"Hello World!\"\n \n-        rv = client.get('/?foo=bar')\n-        assert rv.data == b'Hello World!'\n+        rv = client.get(\"/?foo=bar\")\n+        assert rv.data == b\"Hello World!\"\n \n         result = greenlets[0].run()\n         assert result == 42\n@@ -183,25 +188,25 @@ class TestGreenletContextCopying(object):\n     def test_greenlet_context_copying_api(self, app, client):\n         greenlets = []\n \n-        @app.route('/')\n+        @app.route(\"/\")\n         def index():\n-            flask.session['fizz'] = 'buzz'\n+            flask.session[\"fizz\"] = \"buzz\"\n             reqctx = flask._request_ctx_stack.top.copy()\n \n             @flask.copy_current_request_context\n             def g():\n                 assert flask.request\n                 assert flask.current_app == app\n-                assert flask.request.path == '/'\n-                assert flask.request.args['foo'] == 'bar'\n-                assert flask.session.get('fizz') == 'buzz'\n+                assert flask.request.path == \"/\"\n+                assert flask.request.args[\"foo\"] == \"bar\"\n+                assert flask.session.get(\"fizz\") == \"buzz\"\n                 return 42\n \n             greenlets.append(greenlet(g))\n-            return 'Hello World!'\n+            return \"Hello World!\"\n \n-        rv = client.get('/?foo=bar')\n-        assert rv.data == b'Hello World!'\n+        rv = client.get(\"/?foo=bar\")\n+        assert rv.data == b\"Hello World!\"\n \n         result = greenlets[0].run()\n         assert result == 42\n@@ -220,12 +225,12 @@ def test_session_error_pops_context():\n \n     app = CustomFlask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         # shouldn't get here\n         assert False\n \n-    response = app.test_client().get('/')\n+    response = app.test_client().get(\"/\")\n     assert response.status_code == 500\n     assert not flask.request\n     assert not flask.current_app\n@@ -239,11 +244,12 @@ def test_bad_environ_raises_bad_request():\n     # However it works when actually passed to the server.\n \n     from flask.testing import make_test_environ_builder\n+\n     builder = make_test_environ_builder(app)\n     environ = builder.get_environ()\n \n     # use a non-printable character in the Host - this is key to this test\n-    environ['HTTP_HOST'] = u'\\x8a'\n+    environ[\"HTTP_HOST\"] = u\"\\x8a\"\n \n     with app.request_context(environ):\n         response = app.full_dispatch_request()\n@@ -253,20 +259,21 @@ def test_bad_environ_raises_bad_request():\n def test_environ_for_valid_idna_completes():\n     app = flask.Flask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n     # We cannot use app.test_client() for the Unicode-rich Host header,\n     # because werkzeug enforces latin1 on Python 2.\n     # However it works when actually passed to the server.\n \n     from flask.testing import make_test_environ_builder\n+\n     builder = make_test_environ_builder(app)\n     environ = builder.get_environ()\n \n     # these characters are all IDNA-compatible\n-    environ['HTTP_HOST'] = u'ąśźäüжŠßя.com'\n+    environ[\"HTTP_HOST\"] = u\"ąśźäüжŠßя.com\"\n \n     with app.request_context(environ):\n         response = app.full_dispatch_request()\n@@ -277,9 +284,9 @@ def test_environ_for_valid_idna_completes():\n def test_normal_environ_completes():\n     app = flask.Flask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n-    response = app.test_client().get('/', headers={'host': 'xn--on-0ia.com'})\n+    response = app.test_client().get(\"/\", headers={\"host\": \"xn--on-0ia.com\"})\n     assert response.status_code == 200\n\n@@ -19,15 +19,14 @@ except ImportError:\n import flask\n \n pytestmark = pytest.mark.skipif(\n-    blinker is None,\n-    reason='Signals require the blinker library.'\n+    blinker is None, reason=\"Signals require the blinker library.\"\n )\n \n \n def test_template_rendered(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('simple_template.html', whiskey=42)\n+        return flask.render_template(\"simple_template.html\", whiskey=42)\n \n     recorded = []\n \n@@ -36,11 +35,11 @@ def test_template_rendered(app, client):\n \n     flask.template_rendered.connect(record, app)\n     try:\n-        client.get('/')\n+        client.get(\"/\")\n         assert len(recorded) == 1\n         template, context = recorded[0]\n-        assert template.name == 'simple_template.html'\n-        assert context['whiskey'] == 42\n+        assert template.name == \"simple_template.html\"\n+        assert context[\"whiskey\"] == 42\n     finally:\n         flask.template_rendered.disconnect(record, app)\n \n@@ -48,24 +47,24 @@ def test_template_rendered(app, client):\n def test_before_render_template():\n     app = flask.Flask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('simple_template.html', whiskey=42)\n+        return flask.render_template(\"simple_template.html\", whiskey=42)\n \n     recorded = []\n \n     def record(sender, template, context):\n-        context['whiskey'] = 43\n+        context[\"whiskey\"] = 43\n         recorded.append((template, context))\n \n     flask.before_render_template.connect(record, app)\n     try:\n-        rv = app.test_client().get('/')\n+        rv = app.test_client().get(\"/\")\n         assert len(recorded) == 1\n         template, context = recorded[0]\n-        assert template.name == 'simple_template.html'\n-        assert context['whiskey'] == 43\n-        assert rv.data == b'<h1>43</h1>'\n+        assert template.name == \"simple_template.html\"\n+        assert context[\"whiskey\"] == 43\n+        assert rv.data == b\"<h1>43</h1>\"\n     finally:\n         flask.before_render_template.disconnect(record, app)\n \n@@ -75,36 +74,41 @@ def test_request_signals():\n     calls = []\n \n     def before_request_signal(sender):\n-        calls.append('before-signal')\n+        calls.append(\"before-signal\")\n \n     def after_request_signal(sender, response):\n-        assert response.data == b'stuff'\n-        calls.append('after-signal')\n+        assert response.data == b\"stuff\"\n+        calls.append(\"after-signal\")\n \n     @app.before_request\n     def before_request_handler():\n-        calls.append('before-handler')\n+        calls.append(\"before-handler\")\n \n     @app.after_request\n     def after_request_handler(response):\n-        calls.append('after-handler')\n-        response.data = 'stuff'\n+        calls.append(\"after-handler\")\n+        response.data = \"stuff\"\n         return response\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        calls.append('handler')\n-        return 'ignored anyway'\n+        calls.append(\"handler\")\n+        return \"ignored anyway\"\n \n     flask.request_started.connect(before_request_signal, app)\n     flask.request_finished.connect(after_request_signal, app)\n \n     try:\n-        rv = app.test_client().get('/')\n-        assert rv.data == b'stuff'\n+        rv = app.test_client().get(\"/\")\n+        assert rv.data == b\"stuff\"\n \n-        assert calls == ['before-signal', 'before-handler', 'handler',\n-                         'after-handler', 'after-signal']\n+        assert calls == [\n+            \"before-signal\",\n+            \"before-handler\",\n+            \"handler\",\n+            \"after-handler\",\n+            \"after-signal\",\n+        ]\n     finally:\n         flask.request_started.disconnect(before_request_signal, app)\n         flask.request_finished.disconnect(after_request_signal, app)\n@@ -114,7 +118,7 @@ def test_request_exception_signal():\n     app = flask.Flask(__name__)\n     recorded = []\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         1 // 0\n \n@@ -123,7 +127,7 @@ def test_request_exception_signal():\n \n     flask.got_request_exception.connect(record, app)\n     try:\n-        assert app.test_client().get('/').status_code == 500\n+        assert app.test_client().get(\"/\").status_code == 500\n         assert len(recorded) == 1\n         assert isinstance(recorded[0], ZeroDivisionError)\n     finally:\n@@ -135,33 +139,33 @@ def test_appcontext_signals():\n     recorded = []\n \n     def record_push(sender, **kwargs):\n-        recorded.append('push')\n+        recorded.append(\"push\")\n \n     def record_pop(sender, **kwargs):\n-        recorded.append('pop')\n+        recorded.append(\"pop\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return 'Hello'\n+        return \"Hello\"\n \n     flask.appcontext_pushed.connect(record_push, app)\n     flask.appcontext_popped.connect(record_pop, app)\n     try:\n         with app.test_client() as c:\n-            rv = c.get('/')\n-            assert rv.data == b'Hello'\n-            assert recorded == ['push']\n-        assert recorded == ['push', 'pop']\n+            rv = c.get(\"/\")\n+            assert rv.data == b\"Hello\"\n+            assert recorded == [\"push\"]\n+        assert recorded == [\"push\", \"pop\"]\n     finally:\n         flask.appcontext_pushed.disconnect(record_push, app)\n         flask.appcontext_popped.disconnect(record_pop, app)\n \n \n def test_flash_signal(app):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        flask.flash('This is a flash message', category='notice')\n-        return flask.redirect('/other')\n+        flask.flash(\"This is a flash message\", category=\"notice\")\n+        return flask.redirect(\"/other\")\n \n     recorded = []\n \n@@ -172,11 +176,11 @@ def test_flash_signal(app):\n     try:\n         client = app.test_client()\n         with client.session_transaction():\n-            client.get('/')\n+            client.get(\"/\")\n             assert len(recorded) == 1\n             message, category = recorded[0]\n-            assert message == 'This is a flash message'\n-            assert category == 'notice'\n+            assert message == \"This is a flash message\"\n+            assert category == \"notice\"\n     finally:\n         flask.message_flashed.disconnect(record, app)\n \n@@ -186,18 +190,18 @@ def test_appcontext_tearing_down_signal():\n     recorded = []\n \n     def record_teardown(sender, **kwargs):\n-        recorded.append(('tear_down', kwargs))\n+        recorded.append((\"tear_down\", kwargs))\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         1 // 0\n \n     flask.appcontext_tearing_down.connect(record_teardown, app)\n     try:\n         with app.test_client() as c:\n-            rv = c.get('/')\n+            rv = c.get(\"/\")\n             assert rv.status_code == 500\n             assert recorded == []\n-        assert recorded == [('tear_down', {'exc': None})]\n+        assert recorded == [(\"tear_down\", {\"exc\": None})]\n     finally:\n         flask.appcontext_tearing_down.disconnect(record_teardown, app)\n\n@@ -23,11 +23,11 @@ def test_suppressed_exception_logging():\n     out = StringIO()\n     app = SuppressedFlask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        raise Exception('test')\n+        raise Exception(\"test\")\n \n-    rv = app.test_client().get('/', errors_stream=out)\n+    rv = app.test_client().get(\"/\", errors_stream=out)\n     assert rv.status_code == 500\n-    assert b'Internal Server Error' in rv.data\n+    assert b\"Internal Server Error\" in rv.data\n     assert not out.getvalue()\n\n@@ -20,102 +20,104 @@ import werkzeug.serving\n def test_context_processing(app, client):\n     @app.context_processor\n     def context_processor():\n-        return {'injected_value': 42}\n+        return {\"injected_value\": 42}\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('context_template.html', value=23)\n+        return flask.render_template(\"context_template.html\", value=23)\n \n-    rv = client.get('/')\n-    assert rv.data == b'<p>23|42'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"<p>23|42\"\n \n \n def test_original_win(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template_string('{{ config }}', config=42)\n+        return flask.render_template_string(\"{{ config }}\", config=42)\n \n-    rv = client.get('/')\n-    assert rv.data == b'42'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"42\"\n \n \n def test_request_less_rendering(app, app_ctx):\n-    app.config['WORLD_NAME'] = 'Special World'\n+    app.config[\"WORLD_NAME\"] = \"Special World\"\n \n     @app.context_processor\n     def context_processor():\n         return dict(foo=42)\n \n-    rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} '\n-                                      '{{ foo }}')\n-    assert rv == 'Hello Special World 42'\n+    rv = flask.render_template_string(\"Hello {{ config.WORLD_NAME }} \" \"{{ foo }}\")\n+    assert rv == \"Hello Special World 42\"\n \n \n def test_standard_context(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         flask.g.foo = 23\n-        flask.session['test'] = 'aha'\n-        return flask.render_template_string('''\n+        flask.session[\"test\"] = \"aha\"\n+        return flask.render_template_string(\n+            \"\"\"\n             {{ request.args.foo }}\n             {{ g.foo }}\n             {{ config.DEBUG }}\n             {{ session.test }}\n-        ''')\n+        \"\"\"\n+        )\n \n-    rv = client.get('/?foo=42')\n-    assert rv.data.split() == [b'42', b'23', b'False', b'aha']\n+    rv = client.get(\"/?foo=42\")\n+    assert rv.data.split() == [b\"42\", b\"23\", b\"False\", b\"aha\"]\n \n \n def test_escaping(app, client):\n-    text = '<p>Hello World!'\n+    text = \"<p>Hello World!\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('escaping_template.html', text=text,\n-                                     html=flask.Markup(text))\n+        return flask.render_template(\n+            \"escaping_template.html\", text=text, html=flask.Markup(text)\n+        )\n \n-    lines = client.get('/').data.splitlines()\n+    lines = client.get(\"/\").data.splitlines()\n     assert lines == [\n-        b'&lt;p&gt;Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'&lt;p&gt;Hello World!',\n-        b'<p>Hello World!'\n+        b\"&lt;p&gt;Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"&lt;p&gt;Hello World!\",\n+        b\"<p>Hello World!\",\n     ]\n \n \n def test_no_escaping(app, client):\n-    text = '<p>Hello World!'\n+    text = \"<p>Hello World!\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('non_escaping_template.txt', text=text,\n-                                     html=flask.Markup(text))\n+        return flask.render_template(\n+            \"non_escaping_template.txt\", text=text, html=flask.Markup(text)\n+        )\n \n-    lines = client.get('/').data.splitlines()\n+    lines = client.get(\"/\").data.splitlines()\n     assert lines == [\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'&lt;p&gt;Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!',\n-        b'<p>Hello World!'\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"&lt;p&gt;Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n+        b\"<p>Hello World!\",\n     ]\n \n \n def test_escaping_without_template_filename(app, client, req_ctx):\n-    assert flask.render_template_string(\n-        '{{ foo }}', foo='<test>') == '&lt;test&gt;'\n-    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail'\n+    assert flask.render_template_string(\"{{ foo }}\", foo=\"<test>\") == \"&lt;test&gt;\"\n+    assert flask.render_template(\"mail.txt\", foo=\"<test>\") == \"<test> Mail\"\n \n \n def test_macros(app, req_ctx):\n-    macro = flask.get_template_attribute('_macro.html', 'hello')\n-    assert macro('World') == 'Hello World!'\n+    macro = flask.get_template_attribute(\"_macro.html\", \"hello\")\n+    assert macro(\"World\") == \"Hello World!\"\n \n \n def test_template_filter(app):\n@@ -123,9 +125,9 @@ def test_template_filter(app):\n     def my_reverse(s):\n         return s[::-1]\n \n-    assert 'my_reverse' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['my_reverse'] == my_reverse\n-    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+    assert \"my_reverse\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n+    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n \n \n def test_add_template_filter(app):\n@@ -133,29 +135,29 @@ def test_add_template_filter(app):\n         return s[::-1]\n \n     app.add_template_filter(my_reverse)\n-    assert 'my_reverse' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['my_reverse'] == my_reverse\n-    assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+    assert \"my_reverse\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n+    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\"\n \n \n def test_template_filter_with_name(app):\n-    @app.template_filter('strrev')\n+    @app.template_filter(\"strrev\")\n     def my_reverse(s):\n         return s[::-1]\n \n-    assert 'strrev' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['strrev'] == my_reverse\n-    assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+    assert \"strrev\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n+    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n \n \n def test_add_template_filter_with_name(app):\n     def my_reverse(s):\n         return s[::-1]\n \n-    app.add_template_filter(my_reverse, 'strrev')\n-    assert 'strrev' in app.jinja_env.filters.keys()\n-    assert app.jinja_env.filters['strrev'] == my_reverse\n-    assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+    app.add_template_filter(my_reverse, \"strrev\")\n+    assert \"strrev\" in app.jinja_env.filters.keys()\n+    assert app.jinja_env.filters[\"strrev\"] == my_reverse\n+    assert app.jinja_env.filters[\"strrev\"](\"abcd\") == \"dcba\"\n \n \n def test_template_filter_with_template(app, client):\n@@ -163,12 +165,12 @@ def test_template_filter_with_template(app, client):\n     def super_reverse(s):\n         return s[::-1]\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_add_template_filter_with_template(app, client):\n@@ -177,39 +179,39 @@ def test_add_template_filter_with_template(app, client):\n \n     app.add_template_filter(super_reverse)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_template_filter_with_name_and_template(app, client):\n-    @app.template_filter('super_reverse')\n+    @app.template_filter(\"super_reverse\")\n     def my_reverse(s):\n         return s[::-1]\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_add_template_filter_with_name_and_template(app, client):\n     def my_reverse(s):\n         return s[::-1]\n \n-    app.add_template_filter(my_reverse, 'super_reverse')\n+    app.add_template_filter(my_reverse, \"super_reverse\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_filter.html', value='abcd')\n+        return flask.render_template(\"template_filter.html\", value=\"abcd\")\n \n-    rv = client.get('/')\n-    assert rv.data == b'dcba'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"dcba\"\n \n \n def test_template_test(app):\n@@ -217,9 +219,9 @@ def test_template_test(app):\n     def boolean(value):\n         return isinstance(value, bool)\n \n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_add_template_test(app):\n@@ -227,29 +229,29 @@ def test_add_template_test(app):\n         return isinstance(value, bool)\n \n     app.add_template_test(boolean)\n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_template_test_with_name(app):\n-    @app.template_test('boolean')\n+    @app.template_test(\"boolean\")\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == is_boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_add_template_test_with_name(app):\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    app.add_template_test(is_boolean, 'boolean')\n-    assert 'boolean' in app.jinja_env.tests.keys()\n-    assert app.jinja_env.tests['boolean'] == is_boolean\n-    assert app.jinja_env.tests['boolean'](False)\n+    app.add_template_test(is_boolean, \"boolean\")\n+    assert \"boolean\" in app.jinja_env.tests.keys()\n+    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n+    assert app.jinja_env.tests[\"boolean\"](False)\n \n \n def test_template_test_with_template(app, client):\n@@ -257,12 +259,12 @@ def test_template_test_with_template(app, client):\n     def boolean(value):\n         return isinstance(value, bool)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_add_template_test_with_template(app, client):\n@@ -271,39 +273,39 @@ def test_add_template_test_with_template(app, client):\n \n     app.add_template_test(boolean)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_template_test_with_name_and_template(app, client):\n-    @app.template_test('boolean')\n+    @app.template_test(\"boolean\")\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_add_template_test_with_name_and_template(app, client):\n     def is_boolean(value):\n         return isinstance(value, bool)\n \n-    app.add_template_test(is_boolean, 'boolean')\n+    app.add_template_test(is_boolean, \"boolean\")\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('template_test.html', value=False)\n+        return flask.render_template(\"template_test.html\", value=False)\n \n-    rv = client.get('/')\n-    assert b'Success!' in rv.data\n+    rv = client.get(\"/\")\n+    assert b\"Success!\" in rv.data\n \n \n def test_add_template_global(app, app_ctx):\n@@ -311,84 +313,89 @@ def test_add_template_global(app, app_ctx):\n     def get_stuff():\n         return 42\n \n-    assert 'get_stuff' in app.jinja_env.globals.keys()\n-    assert app.jinja_env.globals['get_stuff'] == get_stuff\n-    assert app.jinja_env.globals['get_stuff'](), 42\n+    assert \"get_stuff\" in app.jinja_env.globals.keys()\n+    assert app.jinja_env.globals[\"get_stuff\"] == get_stuff\n+    assert app.jinja_env.globals[\"get_stuff\"](), 42\n \n-    rv = flask.render_template_string('{{ get_stuff() }}')\n-    assert rv == '42'\n+    rv = flask.render_template_string(\"{{ get_stuff() }}\")\n+    assert rv == \"42\"\n \n \n def test_custom_template_loader(client):\n     class MyFlask(flask.Flask):\n         def create_global_jinja_loader(self):\n             from jinja2 import DictLoader\n-            return DictLoader({'index.html': 'Hello Custom World!'})\n+\n+            return DictLoader({\"index.html\": \"Hello Custom World!\"})\n \n     app = MyFlask(__name__)\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return flask.render_template('index.html')\n+        return flask.render_template(\"index.html\")\n \n     c = app.test_client()\n-    rv = c.get('/')\n-    assert rv.data == b'Hello Custom World!'\n+    rv = c.get(\"/\")\n+    assert rv.data == b\"Hello Custom World!\"\n \n \n def test_iterable_loader(app, client):\n     @app.context_processor\n     def context_processor():\n-        return {'whiskey': 'Jameson'}\n+        return {\"whiskey\": \"Jameson\"}\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.render_template(\n-            ['no_template.xml',  # should skip this one\n-             'simple_template.html',  # should render this\n-             'context_template.html'],\n-            value=23)\n+            [\n+                \"no_template.xml\",  # should skip this one\n+                \"simple_template.html\",  # should render this\n+                \"context_template.html\",\n+            ],\n+            value=23,\n+        )\n \n-    rv = client.get('/')\n-    assert rv.data == b'<h1>Jameson</h1>'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"<h1>Jameson</h1>\"\n \n \n def test_templates_auto_reload(app):\n     # debug is False, config option is None\n     assert app.debug is False\n-    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n+    assert app.config[\"TEMPLATES_AUTO_RELOAD\"] is None\n     assert app.jinja_env.auto_reload is False\n     # debug is False, config option is False\n     app = flask.Flask(__name__)\n-    app.config['TEMPLATES_AUTO_RELOAD'] = False\n+    app.config[\"TEMPLATES_AUTO_RELOAD\"] = False\n     assert app.debug is False\n     assert app.jinja_env.auto_reload is False\n     # debug is False, config option is True\n     app = flask.Flask(__name__)\n-    app.config['TEMPLATES_AUTO_RELOAD'] = True\n+    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n     assert app.debug is False\n     assert app.jinja_env.auto_reload is True\n     # debug is True, config option is None\n     app = flask.Flask(__name__)\n-    app.config['DEBUG'] = True\n-    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n+    app.config[\"DEBUG\"] = True\n+    assert app.config[\"TEMPLATES_AUTO_RELOAD\"] is None\n     assert app.jinja_env.auto_reload is True\n     # debug is True, config option is False\n     app = flask.Flask(__name__)\n-    app.config['DEBUG'] = True\n-    app.config['TEMPLATES_AUTO_RELOAD'] = False\n+    app.config[\"DEBUG\"] = True\n+    app.config[\"TEMPLATES_AUTO_RELOAD\"] = False\n     assert app.jinja_env.auto_reload is False\n     # debug is True, config option is True\n     app = flask.Flask(__name__)\n-    app.config['DEBUG'] = True\n-    app.config['TEMPLATES_AUTO_RELOAD'] = True\n+    app.config[\"DEBUG\"] = True\n+    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n     assert app.jinja_env.auto_reload is True\n \n+\n def test_templates_auto_reload_debug_run(app, monkeypatch):\n     def run_simple_mock(*args, **kwargs):\n         pass\n \n-    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n \n     app.run()\n     assert app.templates_auto_reload == False\n@@ -409,25 +416,26 @@ def test_template_loader_debugging(test_apps, monkeypatch):\n             called.append(True)\n             text = str(record.msg)\n             assert '1: trying loader of application \"blueprintapp\"' in text\n-            assert ('2: trying loader of blueprint \"admin\" '\n-                    '(blueprintapp.apps.admin)') in text\n-            assert ('trying loader of blueprint \"frontend\" '\n-                    '(blueprintapp.apps.frontend)') in text\n-            assert 'Error: the template could not be found' in text\n-            assert ('looked up from an endpoint that belongs to '\n-                    'the blueprint \"frontend\"') in text\n-            assert 'See http://flask.pocoo.org/docs/blueprints/#templates' in text\n+            assert (\n+                '2: trying loader of blueprint \"admin\" ' \"(blueprintapp.apps.admin)\"\n+            ) in text\n+            assert (\n+                'trying loader of blueprint \"frontend\" ' \"(blueprintapp.apps.frontend)\"\n+            ) in text\n+            assert \"Error: the template could not be found\" in text\n+            assert (\n+                \"looked up from an endpoint that belongs to \" 'the blueprint \"frontend\"'\n+            ) in text\n+            assert \"See http://flask.pocoo.org/docs/blueprints/#templates\" in text\n \n     with app.test_client() as c:\n-        monkeypatch.setitem(app.config, 'EXPLAIN_TEMPLATE_LOADING', True)\n-        monkeypatch.setattr(\n-            logging.getLogger('flask'), 'handlers', [_TestHandler()]\n-        )\n+        monkeypatch.setitem(app.config, \"EXPLAIN_TEMPLATE_LOADING\", True)\n+        monkeypatch.setattr(logging.getLogger(\"flask\"), \"handlers\", [_TestHandler()])\n \n         with pytest.raises(TemplateNotFound) as excinfo:\n-            c.get('/missing')\n+            c.get(\"/missing\")\n \n-        assert 'missing_template.html' in str(excinfo.value)\n+        assert \"missing_template.html\" in str(excinfo.value)\n \n     assert len(called) == 1\n \n\n@@ -21,166 +21,166 @@ from flask.testing import make_test_environ_builder, FlaskCliRunner\n \n \n def test_environ_defaults_from_config(app, client):\n-    app.config['SERVER_NAME'] = 'example.com:1234'\n-    app.config['APPLICATION_ROOT'] = '/foo'\n+    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n+    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.request.url\n \n     ctx = app.test_request_context()\n-    assert ctx.request.url == 'http://example.com:1234/foo/'\n+    assert ctx.request.url == \"http://example.com:1234/foo/\"\n \n-    rv = client.get('/')\n-    assert rv.data == b'http://example.com:1234/foo/'\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"http://example.com:1234/foo/\"\n \n \n def test_environ_defaults(app, client, app_ctx, req_ctx):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.request.url\n \n     ctx = app.test_request_context()\n-    assert ctx.request.url == 'http://localhost/'\n+    assert ctx.request.url == \"http://localhost/\"\n     with client:\n-        rv = client.get('/')\n-        assert rv.data == b'http://localhost/'\n+        rv = client.get(\"/\")\n+        assert rv.data == b\"http://localhost/\"\n \n \n def test_environ_base_default(app, client, app_ctx):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n         return flask.request.remote_addr\n \n-    rv = client.get('/')\n-    assert rv.data == b'127.0.0.1'\n-    assert flask.g.user_agent == 'werkzeug/' + werkzeug.__version__\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"127.0.0.1\"\n+    assert flask.g.user_agent == \"werkzeug/\" + werkzeug.__version__\n \n \n def test_environ_base_modified(app, client, app_ctx):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n         return flask.request.remote_addr\n \n-    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n-    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n-    rv = client.get('/')\n-    assert rv.data == b'0.0.0.0'\n-    assert flask.g.user_agent == 'Foo'\n+    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.0\"\n+    client.environ_base[\"HTTP_USER_AGENT\"] = \"Foo\"\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"0.0.0.0\"\n+    assert flask.g.user_agent == \"Foo\"\n \n-    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n-    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n-    rv = client.get('/')\n-    assert rv.data == b'0.0.0.1'\n-    assert flask.g.user_agent == 'Bar'\n+    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.1\"\n+    client.environ_base[\"HTTP_USER_AGENT\"] = \"Bar\"\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"0.0.0.1\"\n+    assert flask.g.user_agent == \"Bar\"\n \n \n def test_client_open_environ(app, client, request):\n-    @app.route('/index')\n+    @app.route(\"/index\")\n     def index():\n         return flask.request.remote_addr\n \n-    builder = make_test_environ_builder(app, path='/index', method='GET')\n+    builder = make_test_environ_builder(app, path=\"/index\", method=\"GET\")\n     request.addfinalizer(builder.close)\n \n     rv = client.open(builder)\n-    assert rv.data == b'127.0.0.1'\n+    assert rv.data == b\"127.0.0.1\"\n \n     environ = builder.get_environ()\n-    client.environ_base['REMOTE_ADDR'] = '127.0.0.2'\n+    client.environ_base[\"REMOTE_ADDR\"] = \"127.0.0.2\"\n     rv = client.open(environ)\n-    assert rv.data == b'127.0.0.2'\n+    assert rv.data == b\"127.0.0.2\"\n \n \n def test_specify_url_scheme(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         return flask.request.url\n \n-    ctx = app.test_request_context(url_scheme='https')\n-    assert ctx.request.url == 'https://localhost/'\n+    ctx = app.test_request_context(url_scheme=\"https\")\n+    assert ctx.request.url == \"https://localhost/\"\n \n-    rv = client.get('/', url_scheme='https')\n-    assert rv.data == b'https://localhost/'\n+    rv = client.get(\"/\", url_scheme=\"https\")\n+    assert rv.data == b\"https://localhost/\"\n \n \n def test_path_is_url(app):\n-    eb = make_test_environ_builder(app, 'https://example.com/')\n-    assert eb.url_scheme == 'https'\n-    assert eb.host == 'example.com'\n-    assert eb.script_root == ''\n-    assert eb.path == '/'\n+    eb = make_test_environ_builder(app, \"https://example.com/\")\n+    assert eb.url_scheme == \"https\"\n+    assert eb.host == \"example.com\"\n+    assert eb.script_root == \"\"\n+    assert eb.path == \"/\"\n \n \n def test_blueprint_with_subdomain():\n     app = flask.Flask(__name__, subdomain_matching=True)\n-    app.config['SERVER_NAME'] = 'example.com:1234'\n-    app.config['APPLICATION_ROOT'] = '/foo'\n+    app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n+    app.config[\"APPLICATION_ROOT\"] = \"/foo\"\n     client = app.test_client()\n \n-    bp = flask.Blueprint('company', __name__, subdomain='xxx')\n+    bp = flask.Blueprint(\"company\", __name__, subdomain=\"xxx\")\n \n-    @bp.route('/')\n+    @bp.route(\"/\")\n     def index():\n         return flask.request.url\n \n     app.register_blueprint(bp)\n \n-    ctx = app.test_request_context('/', subdomain='xxx')\n-    assert ctx.request.url == 'http://xxx.example.com:1234/foo/'\n+    ctx = app.test_request_context(\"/\", subdomain=\"xxx\")\n+    assert ctx.request.url == \"http://xxx.example.com:1234/foo/\"\n     assert ctx.request.blueprint == bp.name\n \n-    rv = client.get('/', subdomain='xxx')\n-    assert rv.data == b'http://xxx.example.com:1234/foo/'\n+    rv = client.get(\"/\", subdomain=\"xxx\")\n+    assert rv.data == b\"http://xxx.example.com:1234/foo/\"\n \n \n def test_redirect_keep_session(app, client, app_ctx):\n-    @app.route('/', methods=['GET', 'POST'])\n+    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n     def index():\n-        if flask.request.method == 'POST':\n-            return flask.redirect('/getsession')\n-        flask.session['data'] = 'foo'\n-        return 'index'\n+        if flask.request.method == \"POST\":\n+            return flask.redirect(\"/getsession\")\n+        flask.session[\"data\"] = \"foo\"\n+        return \"index\"\n \n-    @app.route('/getsession')\n+    @app.route(\"/getsession\")\n     def get_session():\n-        return flask.session.get('data', '<missing>')\n+        return flask.session.get(\"data\", \"<missing>\")\n \n     with client:\n-        rv = client.get('/getsession')\n-        assert rv.data == b'<missing>'\n+        rv = client.get(\"/getsession\")\n+        assert rv.data == b\"<missing>\"\n \n-        rv = client.get('/')\n-        assert rv.data == b'index'\n-        assert flask.session.get('data') == 'foo'\n-        rv = client.post('/', data={}, follow_redirects=True)\n-        assert rv.data == b'foo'\n+        rv = client.get(\"/\")\n+        assert rv.data == b\"index\"\n+        assert flask.session.get(\"data\") == \"foo\"\n+        rv = client.post(\"/\", data={}, follow_redirects=True)\n+        assert rv.data == b\"foo\"\n \n         # This support requires a new Werkzeug version\n-        if not hasattr(client, 'redirect_client'):\n-            assert flask.session.get('data') == 'foo'\n+        if not hasattr(client, \"redirect_client\"):\n+            assert flask.session.get(\"data\") == \"foo\"\n \n-        rv = client.get('/getsession')\n-        assert rv.data == b'foo'\n+        rv = client.get(\"/getsession\")\n+        assert rv.data == b\"foo\"\n \n \n def test_session_transactions(app, client):\n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n-        return text_type(flask.session['foo'])\n+        return text_type(flask.session[\"foo\"])\n \n     with client:\n         with client.session_transaction() as sess:\n             assert len(sess) == 0\n-            sess['foo'] = [42]\n+            sess[\"foo\"] = [42]\n             assert len(sess) == 1\n-        rv = client.get('/')\n-        assert rv.data == b'[42]'\n+        rv = client.get(\"/\")\n+        assert rv.data == b\"[42]\"\n         with client.session_transaction() as sess:\n             assert len(sess) == 1\n-            assert sess['foo'] == [42]\n+            assert sess[\"foo\"] == [42]\n \n \n def test_session_transactions_no_null_sessions():\n@@ -191,11 +191,11 @@ def test_session_transactions_no_null_sessions():\n         with pytest.raises(RuntimeError) as e:\n             with c.session_transaction() as sess:\n                 pass\n-        assert 'Session backend did not open a session' in str(e.value)\n+        assert \"Session backend did not open a session\" in str(e.value)\n \n \n def test_session_transactions_keep_context(app, client, req_ctx):\n-    rv = client.get('/')\n+    rv = client.get(\"/\")\n     req = flask.request._get_current_object()\n     assert req is not None\n     with client.session_transaction():\n@@ -207,30 +207,30 @@ def test_session_transaction_needs_cookies(app):\n     with pytest.raises(RuntimeError) as e:\n         with c.session_transaction() as s:\n             pass\n-    assert 'cookies' in str(e.value)\n+    assert \"cookies\" in str(e.value)\n \n \n def test_test_client_context_binding(app, client):\n     app.testing = False\n \n-    @app.route('/')\n+    @app.route(\"/\")\n     def index():\n         flask.g.value = 42\n-        return 'Hello World!'\n+        return \"Hello World!\"\n \n-    @app.route('/other')\n+    @app.route(\"/other\")\n     def other():\n         1 // 0\n \n     with client:\n-        resp = client.get('/')\n+        resp = client.get(\"/\")\n         assert flask.g.value == 42\n-        assert resp.data == b'Hello World!'\n+        assert resp.data == b\"Hello World!\"\n         assert resp.status_code == 200\n \n-        resp = client.get('/other')\n-        assert not hasattr(flask.g, 'value')\n-        assert b'Internal Server Error' in resp.data\n+        resp = client.get(\"/other\")\n+        assert not hasattr(flask.g, \"value\")\n+        assert b\"Internal Server Error\" in resp.data\n         assert resp.status_code == 500\n         flask.g.value = 23\n \n@@ -239,17 +239,17 @@ def test_test_client_context_binding(app, client):\n     except (AttributeError, RuntimeError):\n         pass\n     else:\n-        raise AssertionError('some kind of exception expected')\n+        raise AssertionError(\"some kind of exception expected\")\n \n \n def test_reuse_client(client):\n     c = client\n \n     with c:\n-        assert client.get('/').status_code == 404\n+        assert client.get(\"/\").status_code == 404\n \n     with c:\n-        assert client.get('/').status_code == 404\n+        assert client.get(\"/\").status_code == 404\n \n \n def test_test_client_calls_teardown_handlers(app, client):\n@@ -261,40 +261,40 @@ def test_test_client_calls_teardown_handlers(app, client):\n \n     with client:\n         assert called == []\n-        client.get('/')\n+        client.get(\"/\")\n         assert called == []\n     assert called == [None]\n \n     del called[:]\n     with client:\n         assert called == []\n-        client.get('/')\n+        client.get(\"/\")\n         assert called == []\n-        client.get('/')\n+        client.get(\"/\")\n         assert called == [None]\n     assert called == [None, None]\n \n \n def test_full_url_request(app, client):\n-    @app.route('/action', methods=['POST'])\n+    @app.route(\"/action\", methods=[\"POST\"])\n     def action():\n-        return 'x'\n+        return \"x\"\n \n     with client:\n-        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n+        rv = client.post(\"http://domain.com/action?vodka=42\", data={\"gin\": 43})\n         assert rv.status_code == 200\n-        assert 'gin' in flask.request.form\n-        assert 'vodka' in flask.request.args\n+        assert \"gin\" in flask.request.form\n+        assert \"vodka\" in flask.request.args\n \n \n def test_json_request_and_response(app, client):\n-    @app.route('/echo', methods=['POST'])\n+    @app.route(\"/echo\", methods=[\"POST\"])\n     def echo():\n         return jsonify(flask.request.get_json())\n \n     with client:\n-        json_data = {'drink': {'gin': 1, 'tonic': True}, 'price': 10}\n-        rv = client.post('/echo', json=json_data)\n+        json_data = {\"drink\": {\"gin\": 1, \"tonic\": True}, \"price\": 10}\n+        rv = client.post(\"/echo\", json=json_data)\n \n         # Request should be in JSON\n         assert flask.request.is_json\n@@ -308,38 +308,38 @@ def test_json_request_and_response(app, client):\n \n def test_subdomain():\n     app = flask.Flask(__name__, subdomain_matching=True)\n-    app.config['SERVER_NAME'] = 'example.com'\n+    app.config[\"SERVER_NAME\"] = \"example.com\"\n     client = app.test_client()\n \n-    @app.route('/', subdomain='<company_id>')\n+    @app.route(\"/\", subdomain=\"<company_id>\")\n     def view(company_id):\n         return company_id\n \n     with app.test_request_context():\n-        url = flask.url_for('view', company_id='xxx')\n+        url = flask.url_for(\"view\", company_id=\"xxx\")\n \n     with client:\n         response = client.get(url)\n \n     assert 200 == response.status_code\n-    assert b'xxx' == response.data\n+    assert b\"xxx\" == response.data\n \n \n def test_nosubdomain(app, client):\n-    app.config['SERVER_NAME'] = 'example.com'\n+    app.config[\"SERVER_NAME\"] = \"example.com\"\n \n-    @app.route('/<company_id>')\n+    @app.route(\"/<company_id>\")\n     def view(company_id):\n         return company_id\n \n     with app.test_request_context():\n-        url = flask.url_for('view', company_id='xxx')\n+        url = flask.url_for(\"view\", company_id=\"xxx\")\n \n     with client:\n         response = client.get(url)\n \n     assert 200 == response.status_code\n-    assert b'xxx' == response.data\n+    assert b\"xxx\" == response.data\n \n \n def test_cli_runner_class(app):\n@@ -355,17 +355,17 @@ def test_cli_runner_class(app):\n \n \n def test_cli_invoke(app):\n-    @app.cli.command('hello')\n+    @app.cli.command(\"hello\")\n     def hello_command():\n-        click.echo('Hello, World!')\n+        click.echo(\"Hello, World!\")\n \n     runner = app.test_cli_runner()\n     # invoke with command name\n-    result = runner.invoke(args=['hello'])\n-    assert 'Hello' in result.output\n+    result = runner.invoke(args=[\"hello\"])\n+    assert \"Hello\" in result.output\n     # invoke with command object\n     result = runner.invoke(hello_command)\n-    assert 'Hello' in result.output\n+    assert \"Hello\" in result.output\n \n \n def test_cli_custom_obj(app):\n@@ -376,9 +376,9 @@ def test_cli_custom_obj(app):\n         NS.called = True\n         return app\n \n-    @app.cli.command('hello')\n+    @app.cli.command(\"hello\")\n     def hello_command():\n-        click.echo('Hello, World!')\n+        click.echo(\"Hello, World!\")\n \n     script_info = ScriptInfo(create_app=create_app)\n     runner = app.test_cli_runner()\n\n@@ -7,40 +7,34 @@ tests.test_user_error_handler\n :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from werkzeug.exceptions import (\n-    Forbidden,\n-    InternalServerError,\n-    HTTPException,\n-    NotFound\n-    )\n+from werkzeug.exceptions import Forbidden, InternalServerError, HTTPException, NotFound\n import flask\n \n \n def test_error_handler_no_match(app, client):\n-\n     class CustomException(Exception):\n         pass\n \n     @app.errorhandler(CustomException)\n     def custom_exception_handler(e):\n         assert isinstance(e, CustomException)\n-        return 'custom'\n+        return \"custom\"\n \n     @app.errorhandler(500)\n     def handle_500(e):\n         return type(e).__name__\n \n-    @app.route('/custom')\n+    @app.route(\"/custom\")\n     def custom_test():\n         raise CustomException()\n \n-    @app.route('/keyerror')\n+    @app.route(\"/keyerror\")\n     def key_error():\n         raise KeyError()\n \n     app.testing = False\n-    assert client.get('/custom').data == b'custom'\n-    assert client.get('/keyerror').data == b'KeyError'\n+    assert client.get(\"/custom\").data == b\"custom\"\n+    assert client.get(\"/keyerror\").data == b\"KeyError\"\n \n \n def test_error_handler_subclass(app):\n@@ -56,30 +50,30 @@ def test_error_handler_subclass(app):\n     @app.errorhandler(ParentException)\n     def parent_exception_handler(e):\n         assert isinstance(e, ParentException)\n-        return 'parent'\n+        return \"parent\"\n \n     @app.errorhandler(ChildExceptionRegistered)\n     def child_exception_handler(e):\n         assert isinstance(e, ChildExceptionRegistered)\n-        return 'child-registered'\n+        return \"child-registered\"\n \n-    @app.route('/parent')\n+    @app.route(\"/parent\")\n     def parent_test():\n         raise ParentException()\n \n-    @app.route('/child-unregistered')\n+    @app.route(\"/child-unregistered\")\n     def unregistered_test():\n         raise ChildExceptionUnregistered()\n \n-    @app.route('/child-registered')\n+    @app.route(\"/child-registered\")\n     def registered_test():\n         raise ChildExceptionRegistered()\n \n     c = app.test_client()\n \n-    assert c.get('/parent').data == b'parent'\n-    assert c.get('/child-unregistered').data == b'parent'\n-    assert c.get('/child-registered').data == b'child-registered'\n+    assert c.get(\"/parent\").data == b\"parent\"\n+    assert c.get(\"/child-unregistered\").data == b\"parent\"\n+    assert c.get(\"/child-registered\").data == b\"child-registered\"\n \n \n def test_error_handler_http_subclass(app):\n@@ -92,78 +86,78 @@ def test_error_handler_http_subclass(app):\n     @app.errorhandler(403)\n     def code_exception_handler(e):\n         assert isinstance(e, Forbidden)\n-        return 'forbidden'\n+        return \"forbidden\"\n \n     @app.errorhandler(ForbiddenSubclassRegistered)\n     def subclass_exception_handler(e):\n         assert isinstance(e, ForbiddenSubclassRegistered)\n-        return 'forbidden-registered'\n+        return \"forbidden-registered\"\n \n-    @app.route('/forbidden')\n+    @app.route(\"/forbidden\")\n     def forbidden_test():\n         raise Forbidden()\n \n-    @app.route('/forbidden-registered')\n+    @app.route(\"/forbidden-registered\")\n     def registered_test():\n         raise ForbiddenSubclassRegistered()\n \n-    @app.route('/forbidden-unregistered')\n+    @app.route(\"/forbidden-unregistered\")\n     def unregistered_test():\n         raise ForbiddenSubclassUnregistered()\n \n     c = app.test_client()\n \n-    assert c.get('/forbidden').data == b'forbidden'\n-    assert c.get('/forbidden-unregistered').data == b'forbidden'\n-    assert c.get('/forbidden-registered').data == b'forbidden-registered'\n+    assert c.get(\"/forbidden\").data == b\"forbidden\"\n+    assert c.get(\"/forbidden-unregistered\").data == b\"forbidden\"\n+    assert c.get(\"/forbidden-registered\").data == b\"forbidden-registered\"\n \n \n def test_error_handler_blueprint(app):\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.errorhandler(500)\n     def bp_exception_handler(e):\n-        return 'bp-error'\n+        return \"bp-error\"\n \n-    @bp.route('/error')\n+    @bp.route(\"/error\")\n     def bp_test():\n         raise InternalServerError()\n \n     @app.errorhandler(500)\n     def app_exception_handler(e):\n-        return 'app-error'\n+        return \"app-error\"\n \n-    @app.route('/error')\n+    @app.route(\"/error\")\n     def app_test():\n         raise InternalServerError()\n \n-    app.register_blueprint(bp, url_prefix='/bp')\n+    app.register_blueprint(bp, url_prefix=\"/bp\")\n \n     c = app.test_client()\n \n-    assert c.get('/error').data == b'app-error'\n-    assert c.get('/bp/error').data == b'bp-error'\n+    assert c.get(\"/error\").data == b\"app-error\"\n+    assert c.get(\"/bp/error\").data == b\"bp-error\"\n \n \n def test_default_error_handler():\n-    bp = flask.Blueprint('bp', __name__)\n+    bp = flask.Blueprint(\"bp\", __name__)\n \n     @bp.errorhandler(HTTPException)\n     def bp_exception_handler(e):\n         assert isinstance(e, HTTPException)\n         assert isinstance(e, NotFound)\n-        return 'bp-default'\n+        return \"bp-default\"\n \n     @bp.errorhandler(Forbidden)\n     def bp_exception_handler(e):\n         assert isinstance(e, Forbidden)\n-        return 'bp-forbidden'\n+        return \"bp-forbidden\"\n \n-    @bp.route('/undefined')\n+    @bp.route(\"/undefined\")\n     def bp_registered_test():\n         raise NotFound()\n \n-    @bp.route('/forbidden')\n+    @bp.route(\"/forbidden\")\n     def bp_forbidden_test():\n         raise Forbidden()\n \n@@ -173,14 +167,14 @@ def test_default_error_handler():\n     def catchall_errorhandler(e):\n         assert isinstance(e, HTTPException)\n         assert isinstance(e, NotFound)\n-        return 'default'\n+        return \"default\"\n \n     @app.errorhandler(Forbidden)\n     def catchall_errorhandler(e):\n         assert isinstance(e, Forbidden)\n-        return 'forbidden'\n+        return \"forbidden\"\n \n-    @app.route('/forbidden')\n+    @app.route(\"/forbidden\")\n     def forbidden():\n         raise Forbidden()\n \n@@ -188,12 +182,12 @@ def test_default_error_handler():\n     def slash():\n         return \"slash\"\n \n-    app.register_blueprint(bp, url_prefix='/bp')\n+    app.register_blueprint(bp, url_prefix=\"/bp\")\n \n     c = app.test_client()\n-    assert c.get('/bp/undefined').data == b'bp-default'\n-    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n-    assert c.get('/undefined').data == b'default'\n-    assert c.get('/forbidden').data == b'forbidden'\n+    assert c.get(\"/bp/undefined\").data == b\"bp-default\"\n+    assert c.get(\"/bp/forbidden\").data == b\"bp-forbidden\"\n+    assert c.get(\"/undefined\").data == b\"default\"\n+    assert c.get(\"/forbidden\").data == b\"forbidden\"\n     # Don't handle RequestRedirect raised when adding slash.\n     assert c.get(\"/slash\", follow_redirects=True).data == b\"slash\"\n\n@@ -20,33 +20,33 @@ from werkzeug.http import parse_set_header\n def common_test(app):\n     c = app.test_client()\n \n-    assert c.get('/').data == b'GET'\n-    assert c.post('/').data == b'POST'\n-    assert c.put('/').status_code == 405\n-    meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n-    assert sorted(meths) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+    assert c.get(\"/\").data == b\"GET\"\n+    assert c.post(\"/\").data == b\"POST\"\n+    assert c.put(\"/\").status_code == 405\n+    meths = parse_set_header(c.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n+    assert sorted(meths) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n \n \n def test_basic_view(app):\n     class Index(flask.views.View):\n-        methods = ['GET', 'POST']\n+        methods = [\"GET\", \"POST\"]\n \n         def dispatch_request(self):\n             return flask.request.method\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n     common_test(app)\n \n \n def test_method_based_view(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n         def post(self):\n-            return 'POST'\n+            return \"POST\"\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n \n     common_test(app)\n \n@@ -61,40 +61,40 @@ def test_view_patching(app):\n \n     class Other(Index):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n         def post(self):\n-            return 'POST'\n+            return \"POST\"\n \n-    view = Index.as_view('index')\n+    view = Index.as_view(\"index\")\n     view.view_class = Other\n-    app.add_url_rule('/', view_func=view)\n+    app.add_url_rule(\"/\", view_func=view)\n     common_test(app)\n \n \n def test_view_inheritance(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n         def post(self):\n-            return 'POST'\n+            return \"POST\"\n \n     class BetterIndex(Index):\n         def delete(self):\n-            return 'DELETE'\n+            return \"DELETE\"\n \n-    app.add_url_rule('/', view_func=BetterIndex.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=BetterIndex.as_view(\"index\"))\n \n-    meths = parse_set_header(client.open('/', method='OPTIONS').headers['Allow'])\n-    assert sorted(meths) == ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST']\n+    meths = parse_set_header(client.open(\"/\", method=\"OPTIONS\").headers[\"Allow\"])\n+    assert sorted(meths) == [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n \n \n def test_view_decorators(app, client):\n     def add_x_parachute(f):\n         def new_function(*args, **kwargs):\n             resp = flask.make_response(f(*args, **kwargs))\n-            resp.headers['X-Parachute'] = 'awesome'\n+            resp.headers[\"X-Parachute\"] = \"awesome\"\n             return resp\n \n         return new_function\n@@ -103,12 +103,12 @@ def test_view_decorators(app, client):\n         decorators = [add_x_parachute]\n \n         def dispatch_request(self):\n-            return 'Awesome'\n+            return \"Awesome\"\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n-    rv = client.get('/')\n-    assert rv.headers['X-Parachute'] == 'awesome'\n-    assert rv.data == b'Awesome'\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n+    rv = client.get(\"/\")\n+    assert rv.headers[\"X-Parachute\"] == \"awesome\"\n+    assert rv.data == b\"Awesome\"\n \n \n def test_view_provide_automatic_options_attr():\n@@ -118,84 +118,82 @@ def test_view_provide_automatic_options_attr():\n         provide_automatic_options = False\n \n         def dispatch_request(self):\n-            return 'Hello World!'\n+            return \"Hello World!\"\n \n-    app.add_url_rule('/', view_func=Index1.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index1.as_view(\"index\"))\n     c = app.test_client()\n-    rv = c.open('/', method='OPTIONS')\n+    rv = c.open(\"/\", method=\"OPTIONS\")\n     assert rv.status_code == 405\n \n     app = flask.Flask(__name__)\n \n     class Index2(flask.views.View):\n-        methods = ['OPTIONS']\n+        methods = [\"OPTIONS\"]\n         provide_automatic_options = True\n \n         def dispatch_request(self):\n-            return 'Hello World!'\n+            return \"Hello World!\"\n \n-    app.add_url_rule('/', view_func=Index2.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index2.as_view(\"index\"))\n     c = app.test_client()\n-    rv = c.open('/', method='OPTIONS')\n-    assert sorted(rv.allow) == ['OPTIONS']\n+    rv = c.open(\"/\", method=\"OPTIONS\")\n+    assert sorted(rv.allow) == [\"OPTIONS\"]\n \n     app = flask.Flask(__name__)\n \n     class Index3(flask.views.View):\n         def dispatch_request(self):\n-            return 'Hello World!'\n+            return \"Hello World!\"\n \n-    app.add_url_rule('/', view_func=Index3.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index3.as_view(\"index\"))\n     c = app.test_client()\n-    rv = c.open('/', method='OPTIONS')\n-    assert 'OPTIONS' in rv.allow\n+    rv = c.open(\"/\", method=\"OPTIONS\")\n+    assert \"OPTIONS\" in rv.allow\n \n \n def test_implicit_head(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            return flask.Response('Blub', headers={\n-                'X-Method': flask.request.method\n-            })\n+            return flask.Response(\"Blub\", headers={\"X-Method\": flask.request.method})\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n-    rv = client.get('/')\n-    assert rv.data == b'Blub'\n-    assert rv.headers['X-Method'] == 'GET'\n-    rv = client.head('/')\n-    assert rv.data == b''\n-    assert rv.headers['X-Method'] == 'HEAD'\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"Blub\"\n+    assert rv.headers[\"X-Method\"] == \"GET\"\n+    rv = client.head(\"/\")\n+    assert rv.data == b\"\"\n+    assert rv.headers[\"X-Method\"] == \"HEAD\"\n \n \n def test_explicit_head(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n         def head(self):\n-            return flask.Response('', headers={'X-Method': 'HEAD'})\n+            return flask.Response(\"\", headers={\"X-Method\": \"HEAD\"})\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n-    rv = client.get('/')\n-    assert rv.data == b'GET'\n-    rv = client.head('/')\n-    assert rv.data == b''\n-    assert rv.headers['X-Method'] == 'HEAD'\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n+    rv = client.get(\"/\")\n+    assert rv.data == b\"GET\"\n+    rv = client.head(\"/\")\n+    assert rv.data == b\"\"\n+    assert rv.headers[\"X-Method\"] == \"HEAD\"\n \n \n def test_endpoint_override(app):\n     app.debug = True\n \n     class Index(flask.views.View):\n-        methods = ['GET', 'POST']\n+        methods = [\"GET\", \"POST\"]\n \n         def dispatch_request(self):\n             return flask.request.method\n \n-    app.add_url_rule('/', view_func=Index.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n \n     with pytest.raises(AssertionError):\n-        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        app.add_url_rule(\"/\", view_func=Index.as_view(\"index\"))\n \n     # But these tests should still pass. We just log a warning.\n     common_test(app)\n@@ -204,36 +202,36 @@ def test_endpoint_override(app):\n def test_multiple_inheritance(app, client):\n     class GetView(flask.views.MethodView):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n     class DeleteView(flask.views.MethodView):\n         def delete(self):\n-            return 'DELETE'\n+            return \"DELETE\"\n \n     class GetDeleteView(GetView, DeleteView):\n         pass\n \n-    app.add_url_rule('/', view_func=GetDeleteView.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=GetDeleteView.as_view(\"index\"))\n \n-    assert client.get('/').data == b'GET'\n-    assert client.delete('/').data == b'DELETE'\n-    assert sorted(GetDeleteView.methods) == ['DELETE', 'GET']\n+    assert client.get(\"/\").data == b\"GET\"\n+    assert client.delete(\"/\").data == b\"DELETE\"\n+    assert sorted(GetDeleteView.methods) == [\"DELETE\", \"GET\"]\n \n \n def test_remove_method_from_parent(app, client):\n     class GetView(flask.views.MethodView):\n         def get(self):\n-            return 'GET'\n+            return \"GET\"\n \n     class OtherView(flask.views.MethodView):\n         def post(self):\n-            return 'POST'\n+            return \"POST\"\n \n     class View(GetView, OtherView):\n-        methods = ['GET']\n+        methods = [\"GET\"]\n \n-    app.add_url_rule('/', view_func=View.as_view('index'))\n+    app.add_url_rule(\"/\", view_func=View.as_view(\"index\"))\n \n-    assert client.get('/').data == b'GET'\n-    assert client.post('/').status_code == 405\n-    assert sorted(View.methods) == ['GET']\n+    assert client.get(\"/\").data == b\"GET\"\n+    assert client.post(\"/\").status_code == 405\n+    assert sorted(View.methods) == [\"GET\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
