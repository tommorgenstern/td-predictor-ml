{"custom_id": "flask#b93ab41ed12c3dd0c37fb7a85f1aa93966b46d77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 292 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -92,7 +92,7 @@ setup(\n     description='A microframework based on Werkzeug, Jinja2 '\n                 'and good intentions',\n     long_description=__doc__,\n-    packages=['flask', 'flask.ext', 'flask.testsuite'],\n+    packages=['flask', 'flask.ext'],\n     include_package_data=True,\n     zip_safe=False,\n     platforms='any',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8d97d7143079dd862564a1e119ad44817ba176d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#df711eac90223db990eae05a60ee1f6b403443e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 36 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -344,23 +344,23 @@ class TestInstance(TestFlask):\n                 if 'site_package' in sys.modules:\n                     del sys.modules['site_package']\n \n-    def test_egg_installed_paths(self):\n+    def test_egg_installed_paths(self, monkeypatch):\n         here = os.path.abspath(os.path.dirname(__file__))\n         expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        monkeypatch.setattr(sys, 'prefix', expected_prefix)\n+\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5',\n+                                     'site-packages')\n         egg_path = os.path.join(site_packages, 'SiteEgg.egg')\n-        sys.path.append(site_packages)\n-        sys.path.append(egg_path)\n+        monkeypatch.syspath_prepend(egg_path)\n+        monkeypatch.syspath_prepend(site_packages)\n+\n         try:\n             import site_egg # in SiteEgg.egg\n             self.assert_equal(site_egg.app.instance_path,\n                               os.path.join(expected_prefix, 'var',\n                                            'site_egg-instance'))\n         finally:\n-            sys.prefix = real_prefix\n-            sys.path.remove(site_packages)\n-            sys.path.remove(egg_path)\n             if 'site_egg' in sys.modules:\n                 del sys.modules['site_egg']\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ba82bac3d80400b5520cac7d0a8915414325bcf6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 151 | Lines Deleted: 158 | Files Changed: 1 | Hunks: 24 | Methods Changed: 31 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 309 | Churn Cumulative: 345 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,11 +9,14 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import os\n import sys\n import flask\n import pkgutil\n import unittest\n+import textwrap\n from contextlib import contextmanager\n from tests import TestFlask\n from flask._compat import PY2\n@@ -178,7 +181,21 @@ class TestConfig(TestFlask):\n         self.assert_equal('bar stuff 2', bar_options['STUFF_2'])\n \n \n-class LimitedLoaderMockWrapper(object):\n+@pytest.fixture(params=(True, False))\n+def limit_loader(request, monkeypatch):\n+    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n+\n+    This provides for tests where a system has custom loaders, e.g. Google App\n+    Engine's HardenedModulesHook, which have neither the `get_filename` method\n+    nor the `archive` attribute.\n+\n+    This fixture will run the testcase twice, once with and once without the\n+    limitation/mock.\n+    \"\"\"\n+    if not request.param:\n+        return\n+\n+    class LimitedLoader(object):\n         def __init__(self, loader):\n             self.loader = loader\n \n@@ -188,178 +205,161 @@ class LimitedLoaderMockWrapper(object):\n                 raise AttributeError(msg)\n             return getattr(self.loader, name)\n \n-\n-@contextmanager\n-def patch_pkgutil_get_loader(wrapper_class=LimitedLoaderMockWrapper):\n-    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n-\n-    This provides for tests where a system has custom loaders, e.g. Google App\n-    Engine's HardenedModulesHook, which have neither the `get_filename` method\n-    nor the `archive` attribute.\n-    \"\"\"\n     old_get_loader = pkgutil.get_loader\n     def get_loader(*args, **kwargs):\n-        return wrapper_class(old_get_loader(*args, **kwargs))\n-    try:\n-        pkgutil.get_loader = get_loader\n-        yield\n-    finally:\n-        pkgutil.get_loader = old_get_loader\n-\n+        return LimitedLoader(old_get_loader(*args, **kwargs))\n+    monkeypatch.setattr(pkgutil, 'get_loader', get_loader)\n \n class TestInstance(TestFlask):\n+    @pytest.fixture\n+    def apps_tmpdir(self, tmpdir, monkeypatch):\n+        '''Test folder for all instance tests.'''\n+        rv = tmpdir.mkdir('test_apps')\n+        monkeypatch.syspath_prepend(str(rv))\n+        return rv\n \n-    def test_explicit_instance_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        try:\n+    @pytest.fixture\n+    def apps_tmpdir_prefix(self, apps_tmpdir, monkeypatch):\n+        monkeypatch.setattr(sys, 'prefix', str(apps_tmpdir))\n+        return apps_tmpdir\n+\n+    @pytest.fixture\n+    def site_packages(self, apps_tmpdir, monkeypatch):\n+        '''Create a fake site-packages'''\n+        rv = apps_tmpdir \\\n+            .mkdir('lib')\\\n+            .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info))\\\n+            .mkdir('site-packages')\n+        monkeypatch.syspath_prepend(str(rv))\n+        return rv\n+\n+    @pytest.fixture\n+    def install_egg(self, apps_tmpdir, monkeypatch):\n+        '''Generate egg from package name inside base and put the egg into\n+        sys.path'''\n+        def inner(name, base=apps_tmpdir):\n+            if not isinstance(name, str):\n+                raise ValueError(name)\n+            base.join(name).ensure_dir()\n+            base.join(name).join('__init__.py').ensure()\n+\n+            egg_setup = base.join('setup.py')\n+            egg_setup.write(textwrap.dedent(\"\"\"\n+            from setuptools import setup\n+            setup(name='{0}',\n+                  version='1.0',\n+                  packages=['site_egg'],\n+                  zip_safe=True)\n+            \"\"\".format(name)))\n+\n+            import subprocess\n+            subprocess.check_call(\n+                [sys.executable, 'setup.py', 'bdist_egg'],\n+                cwd=str(apps_tmpdir)\n+            )\n+            egg_path, = apps_tmpdir.join('dist/').listdir()\n+            monkeypatch.syspath_prepend(str(egg_path))\n+            return egg_path\n+        return inner\n+\n+    @pytest.fixture\n+    def purge_module(self, request):\n+        def inner(name):\n+            request.addfinalizer(lambda: sys.modules.pop(name, None))\n+        return inner\n+\n+    def test_explicit_instance_paths(self, apps_tmpdir):\n+        with pytest.raises(ValueError) as excinfo:\n             flask.Flask(__name__, instance_path='instance')\n-        except ValueError as e:\n-            self.assert_in('must be absolute', str(e))\n-        else:\n-            self.fail('Expected value error')\n+        assert 'must be absolute' in str(excinfo.value)\n \n-        app = flask.Flask(__name__, instance_path=here)\n-        self.assert_equal(app.instance_path, here)\n+        app = flask.Flask(__name__, instance_path=str(apps_tmpdir))\n+        self.assert_equal(app.instance_path, str(apps_tmpdir))\n+\n+    def test_main_module_paths(self, apps_tmpdir, purge_module):\n+        app = apps_tmpdir.join('main_app.py')\n+        app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n+        purge_module('main_app')\n \n-    def test_main_module_paths(self):\n-        # Test an app with '__main__' as the import name, uses cwd.\n         from main_app import app\n         here = os.path.abspath(os.getcwd())\n-        self.assert_equal(app.instance_path, os.path.join(here, 'instance'))\n-        if 'main_app' in sys.modules:\n-            del sys.modules['main_app']\n+        assert app.instance_path == os.path.join(here, 'instance')\n+\n+    def test_uninstalled_module_paths(self, apps_tmpdir, purge_module):\n+        app = apps_tmpdir.join('config_module_app.py').write(\n+            'import os\\n'\n+            'import flask\\n'\n+            'here = os.path.abspath(os.path.dirname(__file__))\\n'\n+            'app = flask.Flask(__name__)\\n'\n+        )\n+        purge_module('config_module_app')\n \n-    def test_uninstalled_module_paths(self):\n         from config_module_app import app\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n+        assert app.instance_path == str(apps_tmpdir.join('instance'))\n+\n+    def test_uninstalled_package_paths(self, apps_tmpdir, purge_module):\n+        app = apps_tmpdir.mkdir('config_package_app')\n+        init = app.join('__init__.py')\n+        init.write(\n+            'import os\\n'\n+            'import flask\\n'\n+            'here = os.path.abspath(os.path.dirname(__file__))\\n'\n+            'app = flask.Flask(__name__)\\n'\n+        )\n+        purge_module('config_package_app')\n \n-    def test_uninstalled_package_paths(self):\n         from config_package_app import app\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n+        assert app.instance_path == str(apps_tmpdir.join('instance'))\n \n-    def test_installed_module_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n-        sys.path.append(site_packages)\n-        try:\n-            import site_app\n-            self.assert_equal(site_app.app.instance_path,\n-                              os.path.join(expected_prefix, 'var',\n-                                           'site_app-instance'))\n-        finally:\n-            sys.prefix = real_prefix\n-            sys.path.remove(site_packages)\n-            if 'site_app' in sys.modules:\n-                del sys.modules['site_app']\n+    def test_installed_module_paths(self, apps_tmpdir, apps_tmpdir_prefix,\n+                                    purge_module, site_packages, limit_loader):\n+        site_packages.join('site_app.py').write(\n+            'import flask\\n'\n+            'app = flask.Flask(__name__)\\n'\n+        )\n+        purge_module('site_app')\n \n-    def test_installed_module_paths_with_limited_loader(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n-        sys.path.append(site_packages)\n-        with patch_pkgutil_get_loader():\n-            try:\n-                import site_app\n-                self.assert_equal(site_app.app.instance_path,\n-                                  os.path.join(expected_prefix, 'var',\n-                                               'site_app-instance'))\n-            finally:\n-                sys.prefix = real_prefix\n-                sys.path.remove(site_packages)\n-                if 'site_app' in sys.modules:\n-                    del sys.modules['site_app']\n+        from site_app import app\n+        assert app.instance_path == \\\n+            apps_tmpdir.join('var').join('site_app-instance')\n \n-    def test_installed_package_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        installed_path = os.path.join(expected_prefix, 'path')\n-        sys.path.append(installed_path)\n-        try:\n-            import installed_package\n-            self.assert_equal(installed_package.app.instance_path,\n-                              os.path.join(expected_prefix, 'var',\n-                                           'installed_package-instance'))\n-        finally:\n-            sys.prefix = real_prefix\n-            sys.path.remove(installed_path)\n-            if 'installed_package' in sys.modules:\n-                del sys.modules['installed_package']\n+    def test_installed_package_paths(self, limit_loader, apps_tmpdir,\n+                                     apps_tmpdir_prefix, purge_module,\n+                                     monkeypatch):\n+        installed_path = apps_tmpdir.mkdir('path')\n+        monkeypatch.syspath_prepend(installed_path)\n \n-    def test_installed_package_paths_with_limited_loader(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        installed_path = os.path.join(expected_prefix, 'path')\n-        sys.path.append(installed_path)\n-        with patch_pkgutil_get_loader():\n-            try:\n-                import installed_package\n-                self.assert_equal(installed_package.app.instance_path,\n-                                  os.path.join(expected_prefix, 'var',\n-                                               'installed_package-instance'))\n-            finally:\n-                sys.prefix = real_prefix\n-                sys.path.remove(installed_path)\n-                if 'installed_package' in sys.modules:\n-                    del sys.modules['installed_package']\n+        app = installed_path.mkdir('installed_package')\n+        init = app.join('__init__.py')\n+        init.write('import flask\\napp = flask.Flask(__name__)')\n+        purge_module('installed_package')\n+\n+        from installed_package import app\n+        assert app.instance_path == \\\n+            apps_tmpdir.join('var').join('installed_package-instance')\n+\n+    def test_prefix_package_paths(self, limit_loader, apps_tmpdir,\n+                                  apps_tmpdir_prefix, purge_module,\n+                                  site_packages):\n+        app = site_packages.mkdir('site_package')\n+        init = app.join('__init__.py')\n+        init.write('import flask\\napp = flask.Flask(__name__)')\n+        purge_module('site_package')\n \n-    def test_prefix_package_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n-        sys.path.append(site_packages)\n-        try:\n         import site_package\n-            self.assert_equal(site_package.app.instance_path,\n-                              os.path.join(expected_prefix, 'var',\n-                                           'site_package-instance'))\n-        finally:\n-            sys.prefix = real_prefix\n-            sys.path.remove(site_packages)\n-            if 'site_package' in sys.modules:\n-                del sys.modules['site_package']\n+        assert site_package.app.instance_path == \\\n+            apps_tmpdir.join('var').join('site_package-instance')\n \n-    def test_prefix_package_paths_with_limited_loader(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        real_prefix, sys.prefix = sys.prefix, expected_prefix\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n-        sys.path.append(site_packages)\n-        with patch_pkgutil_get_loader():\n+    def test_egg_installed_paths(self, install_egg, apps_tmpdir,\n+                                 apps_tmpdir_prefix):\n+        apps_tmpdir.mkdir('site_egg').join('__init__.py').write(\n+            'import flask\\n\\napp = flask.Flask(__name__)'\n+        )\n+        install_egg('site_egg')\n         try:\n-                import site_package\n-                self.assert_equal(site_package.app.instance_path,\n-                                  os.path.join(expected_prefix, 'var',\n-                                               'site_package-instance'))\n-            finally:\n-                sys.prefix = real_prefix\n-                sys.path.remove(site_packages)\n-                if 'site_package' in sys.modules:\n-                    del sys.modules['site_package']\n-\n-    def test_egg_installed_paths(self, monkeypatch):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        expected_prefix = os.path.join(here, 'test_apps')\n-        monkeypatch.setattr(sys, 'prefix', expected_prefix)\n-\n-        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                     'site-packages')\n-        egg_path = os.path.join(site_packages, 'SiteEgg.egg')\n-        monkeypatch.syspath_prepend(egg_path)\n-        monkeypatch.syspath_prepend(site_packages)\n-\n-        try:\n-            import site_egg # in SiteEgg.egg\n-            self.assert_equal(site_egg.app.instance_path,\n-                              os.path.join(expected_prefix, 'var',\n-                                           'site_egg-instance'))\n+            import site_egg\n+            assert site_egg.app.instance_path == \\\n+                str(apps_tmpdir.join('var/').join('site_egg-instance'))\n         finally:\n             if 'site_egg' in sys.modules:\n                 del sys.modules['site_egg']\n@@ -375,10 +375,3 @@ class TestInstance(TestFlask):\n                     flask.Flask(__name__)\n             finally:\n                 sys.meta_path.pop()\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestConfig))\n-    suite.addTest(unittest.makeSuite(TestInstance))\n-    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b1c0951ad690a83e49bfd005853a7b09cdb44cb0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 105 | Lines Deleted: 86 | Files Changed: 2 | Hunks: 3 | Methods Changed: 22 | Complexity Δ (Sum/Max): 0/14 | Churn Δ: 191 | Churn Cumulative: 536 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,105 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    tests.conftest\n+    ~~~~~~~~~~~~~~\n+\n+    :copyright: (c) 2014 by the Flask Team, see AUTHORS for more details.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import pkgutil\n+import pytest\n+import sys\n+import textwrap\n+\n+\n+@pytest.fixture(params=(True, False))\n+def limit_loader(request, monkeypatch):\n+    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n+\n+    This provides for tests where a system has custom loaders, e.g. Google App\n+    Engine's HardenedModulesHook, which have neither the `get_filename` method\n+    nor the `archive` attribute.\n+\n+    This fixture will run the testcase twice, once with and once without the\n+    limitation/mock.\n+    \"\"\"\n+    if not request.param:\n+        return\n+\n+    class LimitedLoader(object):\n+        def __init__(self, loader):\n+            self.loader = loader\n+\n+        def __getattr__(self, name):\n+            if name in ('archive', 'get_filename'):\n+                msg = 'Mocking a loader which does not have `%s.`' % name\n+                raise AttributeError(msg)\n+            return getattr(self.loader, name)\n+\n+    old_get_loader = pkgutil.get_loader\n+\n+    def get_loader(*args, **kwargs):\n+        return LimitedLoader(old_get_loader(*args, **kwargs))\n+    monkeypatch.setattr(pkgutil, 'get_loader', get_loader)\n+\n+\n+@pytest.fixture\n+def apps_tmpdir(tmpdir, monkeypatch):\n+    '''Test folder for all instance tests.'''\n+    rv = tmpdir.mkdir('test_apps')\n+    monkeypatch.syspath_prepend(str(rv))\n+    return rv\n+\n+\n+@pytest.fixture\n+def apps_tmpdir_prefix(apps_tmpdir, monkeypatch):\n+    monkeypatch.setattr(sys, 'prefix', str(apps_tmpdir))\n+    return apps_tmpdir\n+\n+\n+@pytest.fixture\n+def site_packages(apps_tmpdir, monkeypatch):\n+    '''Create a fake site-packages'''\n+    rv = apps_tmpdir \\\n+        .mkdir('lib')\\\n+        .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info))\\\n+        .mkdir('site-packages')\n+    monkeypatch.syspath_prepend(str(rv))\n+    return rv\n+\n+\n+@pytest.fixture\n+def install_egg(apps_tmpdir, monkeypatch):\n+    '''Generate egg from package name inside base and put the egg into\n+    sys.path'''\n+    def inner(name, base=apps_tmpdir):\n+        if not isinstance(name, str):\n+            raise ValueError(name)\n+        base.join(name).ensure_dir()\n+        base.join(name).join('__init__.py').ensure()\n+\n+        egg_setup = base.join('setup.py')\n+        egg_setup.write(textwrap.dedent(\"\"\"\n+        from setuptools import setup\n+        setup(name='{0}',\n+              version='1.0',\n+              packages=['site_egg'],\n+              zip_safe=True)\n+        \"\"\".format(name)))\n+\n+        import subprocess\n+        subprocess.check_call(\n+            [sys.executable, 'setup.py', 'bdist_egg'],\n+            cwd=str(apps_tmpdir)\n+        )\n+        egg_path, = apps_tmpdir.join('dist/').listdir()\n+        monkeypatch.syspath_prepend(str(egg_path))\n+        return egg_path\n+    return inner\n+\n+\n+@pytest.fixture\n+def purge_module(request):\n+    def inner(name):\n+        request.addfinalizer(lambda: sys.modules.pop(name, None))\n+    return inner\n\n@@ -181,93 +181,7 @@ class TestConfig(TestFlask):\n         self.assert_equal('bar stuff 2', bar_options['STUFF_2'])\n \n \n-@pytest.fixture(params=(True, False))\n-def limit_loader(request, monkeypatch):\n-    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n-\n-    This provides for tests where a system has custom loaders, e.g. Google App\n-    Engine's HardenedModulesHook, which have neither the `get_filename` method\n-    nor the `archive` attribute.\n-\n-    This fixture will run the testcase twice, once with and once without the\n-    limitation/mock.\n-    \"\"\"\n-    if not request.param:\n-        return\n-\n-    class LimitedLoader(object):\n-        def __init__(self, loader):\n-            self.loader = loader\n-\n-        def __getattr__(self, name):\n-            if name in ('archive', 'get_filename'):\n-                msg = 'Mocking a loader which does not have `%s.`' % name\n-                raise AttributeError(msg)\n-            return getattr(self.loader, name)\n-\n-    old_get_loader = pkgutil.get_loader\n-    def get_loader(*args, **kwargs):\n-        return LimitedLoader(old_get_loader(*args, **kwargs))\n-    monkeypatch.setattr(pkgutil, 'get_loader', get_loader)\n-\n class TestInstance(TestFlask):\n-    @pytest.fixture\n-    def apps_tmpdir(self, tmpdir, monkeypatch):\n-        '''Test folder for all instance tests.'''\n-        rv = tmpdir.mkdir('test_apps')\n-        monkeypatch.syspath_prepend(str(rv))\n-        return rv\n-\n-    @pytest.fixture\n-    def apps_tmpdir_prefix(self, apps_tmpdir, monkeypatch):\n-        monkeypatch.setattr(sys, 'prefix', str(apps_tmpdir))\n-        return apps_tmpdir\n-\n-    @pytest.fixture\n-    def site_packages(self, apps_tmpdir, monkeypatch):\n-        '''Create a fake site-packages'''\n-        rv = apps_tmpdir \\\n-            .mkdir('lib')\\\n-            .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info))\\\n-            .mkdir('site-packages')\n-        monkeypatch.syspath_prepend(str(rv))\n-        return rv\n-\n-    @pytest.fixture\n-    def install_egg(self, apps_tmpdir, monkeypatch):\n-        '''Generate egg from package name inside base and put the egg into\n-        sys.path'''\n-        def inner(name, base=apps_tmpdir):\n-            if not isinstance(name, str):\n-                raise ValueError(name)\n-            base.join(name).ensure_dir()\n-            base.join(name).join('__init__.py').ensure()\n-\n-            egg_setup = base.join('setup.py')\n-            egg_setup.write(textwrap.dedent(\"\"\"\n-            from setuptools import setup\n-            setup(name='{0}',\n-                  version='1.0',\n-                  packages=['site_egg'],\n-                  zip_safe=True)\n-            \"\"\".format(name)))\n-\n-            import subprocess\n-            subprocess.check_call(\n-                [sys.executable, 'setup.py', 'bdist_egg'],\n-                cwd=str(apps_tmpdir)\n-            )\n-            egg_path, = apps_tmpdir.join('dist/').listdir()\n-            monkeypatch.syspath_prepend(str(egg_path))\n-            return egg_path\n-        return inner\n-\n-    @pytest.fixture\n-    def purge_module(self, request):\n-        def inner(name):\n-            request.addfinalizer(lambda: sys.modules.pop(name, None))\n-        return inner\n-\n     def test_explicit_instance_paths(self, apps_tmpdir):\n         with pytest.raises(ValueError) as excinfo:\n             flask.Flask(__name__, instance_path='instance')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dd6b2574c9d40c4777da71d576f6e5eea1712404", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 24 | Churn Cumulative: 34 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,11 +9,22 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n+try:\n+    import blinker\n+except ImportError:\n+    blinker = None\n+\n import flask\n-import unittest\n from tests import TestFlask\n \n \n+pytestmark = pytest.mark.skipif(\n+    blinker is None,\n+    reason='Signals require the blinker library.'\n+)\n+\n class TestSignals(TestFlask):\n \n     def test_template_rendered(self):\n@@ -24,6 +35,7 @@ class TestSignals(TestFlask):\n             return flask.render_template('simple_template.html', whiskey=42)\n \n         recorded = []\n+\n         def record(sender, template, context):\n             recorded.append((template, context))\n \n@@ -99,8 +111,10 @@ class TestSignals(TestFlask):\n     def test_appcontext_signals(self):\n         app = flask.Flask(__name__)\n         recorded = []\n+\n         def record_push(sender, **kwargs):\n             recorded.append('push')\n+\n         def record_pop(sender, **kwargs):\n             recorded.append('pop')\n \n@@ -130,6 +144,7 @@ class TestSignals(TestFlask):\n             return flask.redirect('/other')\n \n         recorded = []\n+\n         def record(sender, message, category):\n             recorded.append((message, category))\n \n@@ -144,10 +159,3 @@ class TestSignals(TestFlask):\n                 self.assert_equal(category, 'notice')\n         finally:\n             flask.message_flashed.disconnect(record, app)\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    if flask.signals_available:\n-        suite.addTest(unittest.makeSuite(TestSignals))\n-    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5da2c00419d09ce2d3488263036ffd14563fb05a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 689 | Lines Deleted: 714 | Files Changed: 14 | Hunks: 403 | Methods Changed: 259 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 1403 | Churn Cumulative: 2301 | Contributors (this commit): 1 | Commits (past 90d): 47 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -78,9 +78,9 @@ def emits_module_deprecation_warning(f):\n     def new_f(self, *args, **kwargs):\n         with catch_warnings() as log:\n             f(self, *args, **kwargs)\n-            self.assert_true(log, 'expected deprecation warning')\n+            assert log, 'expected deprecation warning'\n             for entry in log:\n-                self.assert_in('Modules are deprecated', str(entry['message']))\n+                assert 'Modules are deprecated' in str(entry['message'])\n     return update_wrapper(new_f, f)\n \n \n@@ -107,7 +107,7 @@ class TestFlask(object):\n         leaks = []\n         while flask._request_ctx_stack.top is not None:\n             leaks.append(flask._request_ctx_stack.pop())\n-        self.assert_equal(leaks, [])\n+        assert leaks == []\n \n     def setup_method(self, method):\n         self.setup()\n@@ -120,31 +120,3 @@ class TestFlask(object):\n \n     def teardown(self):\n         pass\n-\n-    def assert_equal(self, x, y):\n-        assert x == y\n-\n-    def assert_raises(self, exc_type, callable=None, *args, **kwargs):\n-        if callable:\n-            return pytest.raises(exc_type, callable, *args, **kwargs)\n-        else:\n-            return pytest.raises(exc_type)\n-\n-    def assert_true(self, x, msg=None):\n-        assert x\n-    assert_ = assert_true\n-\n-    def assert_false(self, x, msg=None):\n-        assert not x\n-\n-    def assert_in(self, x, y):\n-        assert x in y\n-\n-    def assert_not_in(self, x, y):\n-        assert x not in y\n-\n-    def assert_isinstance(self, obj, cls):\n-        assert isinstance(obj, cls)\n-\n-    def fail(self, msg):\n-        raise AssertionError(msg)\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import flask\n import unittest\n from tests import TestFlask\n@@ -27,29 +29,29 @@ class TestAppContext(TestFlask):\n \n         with app.app_context():\n             rv = flask.url_for('index')\n-            self.assert_equal(rv, 'https://localhost/')\n+            assert rv == 'https://localhost/'\n \n     def test_url_generation_requires_server_name(self):\n         app = flask.Flask(__name__)\n         with app.app_context():\n-            with self.assert_raises(RuntimeError):\n+            with pytest.raises(RuntimeError):\n                 flask.url_for('index')\n \n     def test_url_generation_without_context_fails(self):\n-        with self.assert_raises(RuntimeError):\n+        with pytest.raises(RuntimeError):\n             flask.url_for('index')\n \n     def test_request_context_means_app_context(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n-            self.assert_equal(flask.current_app._get_current_object(), app)\n-        self.assert_equal(flask._app_ctx_stack.top, None)\n+            assert flask.current_app._get_current_object() == app\n+        assert flask._app_ctx_stack.top == None\n \n     def test_app_context_provides_current_app(self):\n         app = flask.Flask(__name__)\n         with app.app_context():\n-            self.assert_equal(flask.current_app._get_current_object(), app)\n-        self.assert_equal(flask._app_ctx_stack.top, None)\n+            assert flask.current_app._get_current_object() == app\n+        assert flask._app_ctx_stack.top == None\n \n     def test_app_tearing_down(self):\n         cleanup_stuff = []\n@@ -61,7 +63,7 @@ class TestAppContext(TestFlask):\n         with app.app_context():\n             pass\n \n-        self.assert_equal(cleanup_stuff, [None])\n+        assert cleanup_stuff == [None]\n \n     def test_app_tearing_down_with_previous_exception(self):\n         cleanup_stuff = []\n@@ -78,7 +80,7 @@ class TestAppContext(TestFlask):\n         with app.app_context():\n             pass\n \n-        self.assert_equal(cleanup_stuff, [None])\n+        assert cleanup_stuff == [None]\n \n     def test_custom_app_ctx_globals_class(self):\n         class CustomRequestGlobals(object):\n@@ -87,8 +89,7 @@ class TestAppContext(TestFlask):\n         app = flask.Flask(__name__)\n         app.app_ctx_globals_class = CustomRequestGlobals\n         with app.app_context():\n-            self.assert_equal(\n-                flask.render_template_string('{{ g.spam }}'), 'eggs')\n+            assert flask.render_template_string('{{ g.spam }}') == 'eggs'\n \n     def test_context_refcounts(self):\n         called = []\n@@ -104,12 +105,14 @@ class TestAppContext(TestFlask):\n             with flask._app_ctx_stack.top:\n                 with flask._request_ctx_stack.top:\n                     pass\n-            self.assert_true(flask._request_ctx_stack.top.request.environ\n-                ['werkzeug.request'] is not None)\n+            env = flask._request_ctx_stack.top.request.environ\n+            assert env['werkzeug.request'] is not None\n             return u''\n         c = app.test_client()\n-        c.get('/')\n-        self.assert_equal(called, ['request', 'app'])\n+        res = c.get('/')\n+        assert res.status_code == 200\n+        assert res.data == u''\n+        assert called == ['request', 'app']\n \n \n def suite():\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import re\n import uuid\n import time\n@@ -32,8 +34,8 @@ class TestBasicFunctionality(TestFlask):\n         def index():\n             return 'Hello World'\n         rv = app.test_client().open('/', method='OPTIONS')\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n-        self.assert_equal(rv.data, b'')\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+        assert rv.data == b''\n \n     def test_options_on_multiple_rules(self):\n         app = flask.Flask(__name__)\n@@ -44,7 +46,7 @@ class TestBasicFunctionality(TestFlask):\n         def index_put():\n             return 'Aha!'\n         rv = app.test_client().open('/', method='OPTIONS')\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'])\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n \n     def test_options_handling_disabled(self):\n         app = flask.Flask(__name__)\n@@ -53,7 +55,7 @@ class TestBasicFunctionality(TestFlask):\n         index.provide_automatic_options = False\n         app.route('/')(index)\n         rv = app.test_client().open('/', method='OPTIONS')\n-        self.assert_equal(rv.status_code, 405)\n+        assert rv.status_code == 405\n \n         app = flask.Flask(__name__)\n         def index2():\n@@ -61,7 +63,7 @@ class TestBasicFunctionality(TestFlask):\n         index2.provide_automatic_options = True\n         app.route('/', methods=['OPTIONS'])(index2)\n         rv = app.test_client().open('/', method='OPTIONS')\n-        self.assert_equal(sorted(rv.allow), ['OPTIONS'])\n+        assert sorted(rv.allow) == ['OPTIONS']\n \n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n@@ -73,22 +75,22 @@ class TestBasicFunctionality(TestFlask):\n             return flask.request.method\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'GET')\n+        assert c.get('/').data == b'GET'\n         rv = c.post('/')\n-        self.assert_equal(rv.status_code, 405)\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n         rv = c.head('/')\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_false(rv.data) # head truncates\n-        self.assert_equal(c.post('/more').data, b'POST')\n-        self.assert_equal(c.get('/more').data, b'GET')\n+        assert rv.status_code == 200\n+        assert not rv.data # head truncates\n+        assert c.post('/more').data == b'POST'\n+        assert c.get('/more').data == b'GET'\n         rv = c.delete('/more')\n-        self.assert_equal(rv.status_code, 405)\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_disallow_string_for_allowed_methods(self):\n         app = flask.Flask(__name__)\n-        with self.assert_raises(TypeError):\n+        with pytest.raises(TypeError):\n             @app.route('/', methods='GET POST')\n             def index():\n                 return \"Hey\"\n@@ -104,18 +106,18 @@ class TestBasicFunctionality(TestFlask):\n         app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'GET')\n+        assert c.get('/').data == b'GET'\n         rv = c.post('/')\n-        self.assert_equal(rv.status_code, 405)\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n         rv = c.head('/')\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_false(rv.data) # head truncates\n-        self.assert_equal(c.post('/more').data, b'POST')\n-        self.assert_equal(c.get('/more').data, b'GET')\n+        assert rv.status_code == 200\n+        assert not rv.data # head truncates\n+        assert c.post('/more').data == b'POST'\n+        assert c.get('/more').data == b'GET'\n         rv = c.delete('/more')\n-        self.assert_equal(rv.status_code, 405)\n-        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_werkzeug_routing(self):\n         from werkzeug.routing import Submount, Rule\n@@ -132,8 +134,8 @@ class TestBasicFunctionality(TestFlask):\n         app.view_functions['index'] = index\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/foo/').data, b'index')\n-        self.assert_equal(c.get('/foo/bar').data, b'bar')\n+        assert c.get('/foo/').data == b'index'\n+        assert c.get('/foo/bar').data == b'bar'\n \n     def test_endpoint_decorator(self):\n         from werkzeug.routing import Submount, Rule\n@@ -152,8 +154,8 @@ class TestBasicFunctionality(TestFlask):\n             return 'index'\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/foo/').data, b'index')\n-        self.assert_equal(c.get('/foo/bar').data, b'bar')\n+        assert c.get('/foo/').data == b'index'\n+        assert c.get('/foo/bar').data == b'bar'\n \n     def test_session(self):\n         app = flask.Flask(__name__)\n@@ -167,8 +169,8 @@ class TestBasicFunctionality(TestFlask):\n             return flask.session['value']\n \n         c = app.test_client()\n-        self.assert_equal(c.post('/set', data={'value': '42'}).data, b'value set')\n-        self.assert_equal(c.get('/get').data, b'42')\n+        assert c.post('/set', data={'value': '42'}).data == b'value set'\n+        assert c.get('/get').data == b'42'\n \n     def test_session_using_server_name(self):\n         app = flask.Flask(__name__)\n@@ -181,8 +183,8 @@ class TestBasicFunctionality(TestFlask):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com/')\n-        self.assert_in('domain=.example.com', rv.headers['set-cookie'].lower())\n-        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n \n     def test_session_using_server_name_and_port(self):\n         app = flask.Flask(__name__)\n@@ -195,8 +197,8 @@ class TestBasicFunctionality(TestFlask):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_in('domain=.example.com', rv.headers['set-cookie'].lower())\n-        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n \n     def test_session_using_server_name_port_and_path(self):\n         app = flask.Flask(__name__)\n@@ -210,9 +212,9 @@ class TestBasicFunctionality(TestFlask):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/foo')\n-        self.assert_in('domain=example.com', rv.headers['set-cookie'].lower())\n-        self.assert_in('path=/foo', rv.headers['set-cookie'].lower())\n-        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n+        assert 'domain=example.com' in rv.headers['set-cookie'].lower()\n+        assert 'path=/foo' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n \n     def test_session_using_application_root(self):\n         class PrefixPathMiddleware(object):\n@@ -234,7 +236,7 @@ class TestBasicFunctionality(TestFlask):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_in('path=/bar', rv.headers['set-cookie'].lower())\n+        assert 'path=/bar' in rv.headers['set-cookie'].lower()\n \n     def test_session_using_session_settings(self):\n         app = flask.Flask(__name__)\n@@ -253,10 +255,10 @@ class TestBasicFunctionality(TestFlask):\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n         cookie = rv.headers['set-cookie'].lower()\n-        self.assert_in('domain=.example.com', cookie)\n-        self.assert_in('path=/', cookie)\n-        self.assert_in('secure', cookie)\n-        self.assert_not_in('httponly', cookie)\n+        assert 'domain=.example.com' in cookie\n+        assert 'path=/' in cookie\n+        assert 'secure' in cookie\n+        assert 'httponly' not in cookie\n \n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n@@ -264,11 +266,11 @@ class TestBasicFunctionality(TestFlask):\n             try:\n                 f(*args, **kwargs)\n             except RuntimeError as e:\n-                self.assert_true(e.args and 'session is unavailable' in e.args[0])\n+                assert e.args and 'session is unavailable' in e.args[0]\n             else:\n-                self.assert_true(False, 'expected exception')\n+                assert False, 'expected exception'\n         with app.test_request_context():\n-            self.assert_true(flask.session.get('missing_key') is None)\n+            assert flask.session.get('missing_key') is None\n             expect_exception(flask.session.__setitem__, 'foo', 42)\n             expect_exception(flask.session.pop, 'foo')\n \n@@ -288,22 +290,22 @@ class TestBasicFunctionality(TestFlask):\n \n         client = app.test_client()\n         rv = client.get('/')\n-        self.assert_in('set-cookie', rv.headers)\n+        assert 'set-cookie' in rv.headers\n         match = re.search(r'\\bexpires=([^;]+)(?i)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n-        self.assert_equal(expires.year, expected.year)\n-        self.assert_equal(expires.month, expected.month)\n-        self.assert_equal(expires.day, expected.day)\n+        assert expires.year == expected.year\n+        assert expires.month == expected.month\n+        assert expires.day == expected.day\n \n         rv = client.get('/test')\n-        self.assert_equal(rv.data, b'True')\n+        assert rv.data == b'True'\n \n         permanent = False\n         rv = app.test_client().get('/')\n-        self.assert_in('set-cookie', rv.headers)\n+        assert 'set-cookie' in rv.headers\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n-        self.assert_true(match is None)\n+        assert match is None\n \n     def test_session_stored_last(self):\n         app = flask.Flask(__name__)\n@@ -319,8 +321,8 @@ class TestBasicFunctionality(TestFlask):\n             return repr(flask.session.get('foo'))\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'None')\n-        self.assert_equal(c.get('/').data, b'42')\n+        assert c.get('/').data == b'None'\n+        assert c.get('/').data == b'42'\n \n     def test_session_special_types(self):\n         app = flask.Flask(__name__)\n@@ -345,13 +347,13 @@ class TestBasicFunctionality(TestFlask):\n         c = app.test_client()\n         c.get('/')\n         rv = pickle.loads(c.get('/').data)\n-        self.assert_equal(rv['m'], flask.Markup('Hello!'))\n-        self.assert_equal(type(rv['m']), flask.Markup)\n-        self.assert_equal(rv['dt'], now)\n-        self.assert_equal(rv['u'], the_uuid)\n-        self.assert_equal(rv['b'], b'\\xff')\n-        self.assert_equal(type(rv['b']), bytes)\n-        self.assert_equal(rv['t'], (1, 2, 3))\n+        assert rv['m'] == flask.Markup('Hello!')\n+        assert type(rv['m']) == flask.Markup\n+        assert rv['dt'] == now\n+        assert rv['u'] == the_uuid\n+        assert rv['b'] == b'\\xff'\n+        assert type(rv['b']) == bytes\n+        assert rv['t'] == (1, 2, 3)\n \n     def test_session_cookie_setting(self):\n         app = flask.Flask(__name__)\n@@ -371,14 +373,14 @@ class TestBasicFunctionality(TestFlask):\n \n         def run_test(expect_header):\n             with app.test_client() as c:\n-                self.assert_equal(c.get('/bump').data, b'1')\n-                self.assert_equal(c.get('/bump').data, b'2')\n-                self.assert_equal(c.get('/bump').data, b'3')\n+                assert c.get('/bump').data == b'1'\n+                assert c.get('/bump').data == b'2'\n+                assert c.get('/bump').data == b'3'\n \n                 rv = c.get('/read')\n                 set_cookie = rv.headers.get('set-cookie')\n-                self.assert_equal(set_cookie is not None, expect_header)\n-                self.assert_equal(rv.data, b'3')\n+                assert (set_cookie is not None) == expect_header\n+                assert rv.data == b'3'\n \n         is_permanent = True\n         app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n@@ -401,12 +403,12 @@ class TestBasicFunctionality(TestFlask):\n         app.secret_key = 'testkey'\n \n         with app.test_request_context():\n-            self.assert_false(flask.session.modified)\n+            assert not flask.session.modified\n             flask.flash('Zap')\n             flask.session.modified = False\n             flask.flash('Zip')\n-            self.assert_true(flask.session.modified)\n-            self.assert_equal(list(flask.get_flashed_messages()), ['Zap', 'Zip'])\n+            assert flask.session.modified\n+            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n \n     def test_extended_flashing(self):\n         # Be sure app.testing=True below, else tests can fail silently.\n@@ -429,42 +431,45 @@ class TestBasicFunctionality(TestFlask):\n         @app.route('/test/')\n         def test():\n             messages = flask.get_flashed_messages()\n-            self.assert_equal(len(messages), 3)\n-            self.assert_equal(messages[0], u'Hello World')\n-            self.assert_equal(messages[1], u'Hello World')\n-            self.assert_equal(messages[2], flask.Markup(u'<em>Testing</em>'))\n+            assert list(messages) == [\n+                u'Hello World',\n+                u'Hello World',\n+                flask.Markup(u'<em>Testing</em>')\n+            ]\n             return ''\n \n         @app.route('/test_with_categories/')\n         def test_with_categories():\n             messages = flask.get_flashed_messages(with_categories=True)\n-            self.assert_equal(len(messages), 3)\n-            self.assert_equal(messages[0], ('message', u'Hello World'))\n-            self.assert_equal(messages[1], ('error', u'Hello World'))\n-            self.assert_equal(messages[2], ('warning', flask.Markup(u'<em>Testing</em>')))\n+            assert len(messages) == 3\n+            assert list(messages) == [\n+                ('message', u'Hello World'),\n+                ('error', u'Hello World'),\n+                ('warning', flask.Markup(u'<em>Testing</em>'))\n+            ]\n             return ''\n \n         @app.route('/test_filter/')\n         def test_filter():\n             messages = flask.get_flashed_messages(category_filter=['message'], with_categories=True)\n-            self.assert_equal(len(messages), 1)\n-            self.assert_equal(messages[0], ('message', u'Hello World'))\n+            assert list(messages) == [('message', u'Hello World')]\n             return ''\n \n         @app.route('/test_filters/')\n         def test_filters():\n             messages = flask.get_flashed_messages(category_filter=['message', 'warning'], with_categories=True)\n-            self.assert_equal(len(messages), 2)\n-            self.assert_equal(messages[0], ('message', u'Hello World'))\n-            self.assert_equal(messages[1], ('warning', flask.Markup(u'<em>Testing</em>')))\n+            assert list(messages) == [\n+                ('message', u'Hello World'),\n+                ('warning', flask.Markup(u'<em>Testing</em>'))\n+            ]\n             return ''\n \n         @app.route('/test_filters_without_returning_categories/')\n         def test_filters2():\n             messages = flask.get_flashed_messages(category_filter=['message', 'warning'])\n-            self.assert_equal(len(messages), 2)\n-            self.assert_equal(messages[0], u'Hello World')\n-            self.assert_equal(messages[1], flask.Markup(u'<em>Testing</em>'))\n+            assert len(messages) == 2\n+            assert messages[0] == u'Hello World'\n+            assert messages[1] == flask.Markup(u'<em>Testing</em>')\n             return ''\n \n         # Create new test client on each test to clean flashed messages.\n@@ -502,13 +507,13 @@ class TestBasicFunctionality(TestFlask):\n             return response\n         @app.route('/')\n         def index():\n-            self.assert_in('before', evts)\n-            self.assert_not_in('after', evts)\n+            assert 'before' in evts\n+            assert 'after' not in evts\n             return 'request'\n-        self.assert_not_in('after', evts)\n+        assert 'after' not in evts\n         rv = app.test_client().get('/').data\n-        self.assert_in('after', evts)\n-        self.assert_equal(rv, b'request|after')\n+        assert 'after' in evts\n+        assert rv == b'request|after'\n \n     def test_after_request_processing(self):\n         app = flask.Flask(__name__)\n@@ -522,8 +527,8 @@ class TestBasicFunctionality(TestFlask):\n             return 'Test'\n         c = app.test_client()\n         resp = c.get('/')\n-        self.assert_equal(resp.status_code, 200)\n-        self.assert_equal(resp.headers['X-Foo'], 'a header')\n+        assert resp.status_code == 200\n+        assert resp.headers['X-Foo'] == 'a header'\n \n     def test_teardown_request_handler(self):\n         called = []\n@@ -536,9 +541,9 @@ class TestBasicFunctionality(TestFlask):\n         def root():\n             return \"Response\"\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_in(b'Response', rv.data)\n-        self.assert_equal(len(called), 1)\n+        assert rv.status_code == 200\n+        assert b'Response' in rv.data\n+        assert len(called) == 1\n \n     def test_teardown_request_handler_debug_mode(self):\n         called = []\n@@ -552,9 +557,9 @@ class TestBasicFunctionality(TestFlask):\n         def root():\n             return \"Response\"\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_in(b'Response', rv.data)\n-        self.assert_equal(len(called), 1)\n+        assert rv.status_code == 200\n+        assert b'Response' in rv.data\n+        assert len(called) == 1\n \n     def test_teardown_request_handler_error(self):\n         called = []\n@@ -562,7 +567,7 @@ class TestBasicFunctionality(TestFlask):\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         @app.teardown_request\n         def teardown_request1(exc):\n-            self.assert_equal(type(exc), ZeroDivisionError)\n+            assert type(exc) == ZeroDivisionError\n             called.append(True)\n             # This raises a new error and blows away sys.exc_info(), so we can\n             # test that all teardown_requests get passed the same original\n@@ -573,7 +578,7 @@ class TestBasicFunctionality(TestFlask):\n                 pass\n         @app.teardown_request\n         def teardown_request2(exc):\n-            self.assert_equal(type(exc), ZeroDivisionError)\n+            assert type(exc) == ZeroDivisionError\n             called.append(True)\n             # This raises a new error and blows away sys.exc_info(), so we can\n             # test that all teardown_requests get passed the same original\n@@ -586,9 +591,9 @@ class TestBasicFunctionality(TestFlask):\n         def fails():\n             1 // 0\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 500)\n-        self.assert_in(b'Internal Server Error', rv.data)\n-        self.assert_equal(len(called), 2)\n+        assert rv.status_code == 500\n+        assert b'Internal Server Error' in rv.data\n+        assert len(called) == 2\n \n     def test_before_after_request_order(self):\n         called = []\n@@ -617,8 +622,8 @@ class TestBasicFunctionality(TestFlask):\n         def index():\n             return '42'\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'42')\n-        self.assert_equal(called, [1, 2, 3, 4, 5, 6])\n+        assert rv.data == b'42'\n+        assert called == [1, 2, 3, 4, 5, 6]\n \n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n@@ -643,14 +648,14 @@ class TestBasicFunctionality(TestFlask):\n             flask.abort(403)\n         c = app.test_client()\n         rv = c.get('/')\n-        self.assert_equal(rv.status_code, 404)\n-        self.assert_equal(rv.data, b'not found')\n+        assert rv.status_code == 404\n+        assert rv.data == b'not found'\n         rv = c.get('/error')\n-        self.assert_equal(rv.status_code, 500)\n-        self.assert_equal(b'internal server error', rv.data)\n+        assert rv.status_code == 500\n+        assert b'internal server error' == rv.data\n         rv = c.get('/forbidden')\n-        self.assert_equal(rv.status_code, 403)\n-        self.assert_equal(b'forbidden', rv.data)\n+        assert rv.status_code == 403\n+        assert b'forbidden' == rv.data\n \n     def test_before_request_and_routing_errors(self):\n         app = flask.Flask(__name__)\n@@ -661,8 +666,8 @@ class TestBasicFunctionality(TestFlask):\n         def return_something(error):\n             return flask.g.something, 404\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 404)\n-        self.assert_equal(rv.data, b'value')\n+        assert rv.status_code == 404\n+        assert rv.data == b'value'\n \n     def test_user_error_handling(self):\n         class MyException(Exception):\n@@ -671,14 +676,14 @@ class TestBasicFunctionality(TestFlask):\n         app = flask.Flask(__name__)\n         @app.errorhandler(MyException)\n         def handle_my_exception(e):\n-            self.assert_true(isinstance(e, MyException))\n+            assert isinstance(e, MyException)\n             return '42'\n         @app.route('/')\n         def index():\n             raise MyException()\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'42')\n+        assert c.get('/').data == b'42'\n \n     def test_http_error_subclass_handling(self):\n         class ForbiddenSubclass(Forbidden):\n@@ -687,12 +692,12 @@ class TestBasicFunctionality(TestFlask):\n         app = flask.Flask(__name__)\n         @app.errorhandler(ForbiddenSubclass)\n         def handle_forbidden_subclass(e):\n-            self.assert_true(isinstance(e, ForbiddenSubclass))\n+            assert isinstance(e, ForbiddenSubclass)\n             return 'banana'\n         @app.errorhandler(403)\n         def handle_forbidden_subclass(e):\n-            self.assert_false(isinstance(e, ForbiddenSubclass))\n-            self.assert_true(isinstance(e, Forbidden))\n+            assert not isinstance(e, ForbiddenSubclass)\n+            assert isinstance(e, Forbidden)\n             return 'apple'\n \n         @app.route('/1')\n@@ -706,9 +711,9 @@ class TestBasicFunctionality(TestFlask):\n             raise Forbidden()\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/1').data, b'banana')\n-        self.assert_equal(c.get('/2').data, b'apple')\n-        self.assert_equal(c.get('/3').data, b'apple')\n+        assert c.get('/1').data == b'banana'\n+        assert c.get('/2').data == b'apple'\n+        assert c.get('/3').data == b'apple'\n \n     def test_trapping_of_bad_request_key_errors(self):\n         app = flask.Flask(__name__)\n@@ -717,16 +722,16 @@ class TestBasicFunctionality(TestFlask):\n         def fail():\n             flask.request.form['missing_key']\n         c = app.test_client()\n-        self.assert_equal(c.get('/fail').status_code, 400)\n+        assert c.get('/fail').status_code == 400\n \n         app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n         c = app.test_client()\n         try:\n             c.get('/fail')\n         except KeyError as e:\n-            self.assert_true(isinstance(e, BadRequest))\n+            assert isinstance(e, BadRequest)\n         else:\n-            self.fail('Expected exception')\n+            assert False, 'Expected exception'\n \n     def test_trapping_of_all_http_exceptions(self):\n         app = flask.Flask(__name__)\n@@ -742,7 +747,7 @@ class TestBasicFunctionality(TestFlask):\n         except NotFound as e:\n             pass\n         else:\n-            self.fail('Expected exception')\n+            assert False, 'Expected exception'\n \n     def test_enctype_debug_helper(self):\n         from flask.debughelpers import DebugFilesKeyError\n@@ -759,10 +764,10 @@ class TestBasicFunctionality(TestFlask):\n             try:\n                 c.post('/fail', data={'foo': 'index.txt'})\n             except DebugFilesKeyError as e:\n-                self.assert_in('no file contents were transmitted', str(e))\n-                self.assert_in('This was submitted: \"index.txt\"', str(e))\n+                assert 'no file contents were transmitted' in str(e)\n+                assert 'This was submitted: \"index.txt\"' in str(e)\n             else:\n-                self.fail('Expected exception')\n+                assert False, 'Expected exception'\n \n     def test_response_creation(self):\n         app = flask.Flask(__name__)\n@@ -795,67 +800,67 @@ class TestBasicFunctionality(TestFlask):\n             }\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/unicode').data, u'Hällo Wörld'.encode('utf-8'))\n-        self.assert_equal(c.get('/string').data, u'Hällo Wörld'.encode('utf-8'))\n+        assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n+        assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n         rv = c.get('/args')\n-        self.assert_equal(rv.data, b'Meh')\n-        self.assert_equal(rv.headers['X-Foo'], 'Testing')\n-        self.assert_equal(rv.status_code, 400)\n-        self.assert_equal(rv.mimetype, 'text/plain')\n+        assert rv.data == b'Meh'\n+        assert rv.headers['X-Foo'] == 'Testing'\n+        assert rv.status_code == 400\n+        assert rv.mimetype == 'text/plain'\n         rv2 = c.get('/two_args')\n-        self.assert_equal(rv2.data, b'Hello')\n-        self.assert_equal(rv2.headers['X-Foo'], 'Test')\n-        self.assert_equal(rv2.status_code, 200)\n-        self.assert_equal(rv2.mimetype, 'text/plain')\n+        assert rv2.data == b'Hello'\n+        assert rv2.headers['X-Foo'] == 'Test'\n+        assert rv2.status_code == 200\n+        assert rv2.mimetype == 'text/plain'\n         rv3 = c.get('/args_status')\n-        self.assert_equal(rv3.data, b'Hi, status!')\n-        self.assert_equal(rv3.status_code, 400)\n-        self.assert_equal(rv3.mimetype, 'text/html')\n+        assert rv3.data == b'Hi, status!'\n+        assert rv3.status_code == 400\n+        assert rv3.mimetype == 'text/html'\n         rv4 = c.get('/args_header')\n-        self.assert_equal(rv4.data, b'Hello world')\n-        self.assert_equal(rv4.headers['X-Foo'], 'Bar')\n-        self.assert_equal(rv4.headers['X-Bar'], 'Foo')\n-        self.assert_equal(rv4.status_code, 404)\n+        assert rv4.data == b'Hello world'\n+        assert rv4.headers['X-Foo'] == 'Bar'\n+        assert rv4.headers['X-Bar'] == 'Foo'\n+        assert rv4.status_code == 404\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.make_response()\n-            self.assert_equal(rv.status_code, 200)\n-            self.assert_equal(rv.data, b'')\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.status_code == 200\n+            assert rv.data == b''\n+            assert rv.mimetype == 'text/html'\n \n             rv = flask.make_response('Awesome')\n-            self.assert_equal(rv.status_code, 200)\n-            self.assert_equal(rv.data, b'Awesome')\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.status_code == 200\n+            assert rv.data == b'Awesome'\n+            assert rv.mimetype == 'text/html'\n \n             rv = flask.make_response('W00t', 404)\n-            self.assert_equal(rv.status_code, 404)\n-            self.assert_equal(rv.data, b'W00t')\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.status_code == 404\n+            assert rv.data == b'W00t'\n+            assert rv.mimetype == 'text/html'\n \n     def test_make_response_with_response_instance(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.make_response(\n                 flask.jsonify({'msg': 'W00t'}), 400)\n-            self.assert_equal(rv.status_code, 400)\n-            self.assert_equal(rv.data, b'{\\n  \"msg\": \"W00t\"\\n}')\n-            self.assert_equal(rv.mimetype, 'application/json')\n+            assert rv.status_code == 400\n+            assert rv.data == b'{\\n  \"msg\": \"W00t\"\\n}'\n+            assert rv.mimetype == 'application/json'\n \n             rv = flask.make_response(\n                 flask.Response(''), 400)\n-            self.assert_equal(rv.status_code, 400)\n-            self.assert_equal(rv.data, b'')\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.status_code == 400\n+            assert rv.data == b''\n+            assert rv.mimetype == 'text/html'\n \n             rv = flask.make_response(\n                 flask.Response('', headers={'Content-Type': 'text/html'}),\n                 400, [('X-Foo', 'bar')])\n-            self.assert_equal(rv.status_code, 400)\n-            self.assert_equal(rv.headers['Content-Type'], 'text/html')\n-            self.assert_equal(rv.headers['X-Foo'], 'bar')\n+            assert rv.status_code == 400\n+            assert rv.headers['Content-Type'] == 'text/html'\n+            assert rv.headers['X-Foo'] == 'bar'\n \n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n@@ -863,16 +868,16 @@ class TestBasicFunctionality(TestFlask):\n         def hello():\n             pass\n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('hello', name='test x'), '/hello/test%20x')\n-            self.assert_equal(flask.url_for('hello', name='test x', _external=True),\n-                              'http://localhost/hello/test%20x')\n+            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n+            assert flask.url_for('hello', name='test x', _external=True) == \\\n+                'http://localhost/hello/test%20x'\n \n     def test_build_error_handler(self):\n         app = flask.Flask(__name__)\n \n         # Test base case, a URL which results in a BuildError.\n         with app.test_request_context():\n-            self.assert_raises(BuildError, flask.url_for, 'spam')\n+            pytest.raises(BuildError, flask.url_for, 'spam')\n \n         # Verify the error is re-raised if not the current exception.\n         try:\n@@ -883,7 +888,7 @@ class TestBasicFunctionality(TestFlask):\n         try:\n             raise RuntimeError('Test case where BuildError is not current.')\n         except RuntimeError:\n-            self.assert_raises(BuildError, app.handle_url_build_error, error, 'spam', {})\n+            pytest.raises(BuildError, app.handle_url_build_error, error, 'spam', {})\n \n         # Test a custom handler.\n         def handler(error, endpoint, values):\n@@ -891,7 +896,7 @@ class TestBasicFunctionality(TestFlask):\n             return '/test_handler/'\n         app.url_build_error_handlers.append(handler)\n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('spam'), '/test_handler/')\n+            assert flask.url_for('spam') == '/test_handler/'\n \n     def test_custom_converters(self):\n         from werkzeug.routing import BaseConverter\n@@ -907,17 +912,17 @@ class TestBasicFunctionality(TestFlask):\n         def index(args):\n             return '|'.join(args)\n         c = app.test_client()\n-        self.assert_equal(c.get('/1,2,3').data, b'1|2|3')\n+        assert c.get('/1,2,3').data == b'1|2|3'\n \n     def test_static_files(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n         rv = app.test_client().get('/static/index.html')\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_equal(rv.data.strip(), b'<h1>Hello World!</h1>')\n+        assert rv.status_code == 200\n+        assert rv.data.strip() == b'<h1>Hello World!</h1>'\n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('static', filename='index.html'),\n-                              '/static/index.html')\n+            assert flask.url_for('static', filename='index.html') == \\\n+                '/static/index.html'\n         rv.close()\n \n     def test_none_response(self):\n@@ -929,14 +934,14 @@ class TestBasicFunctionality(TestFlask):\n         try:\n             app.test_client().get('/')\n         except ValueError as e:\n-            self.assert_equal(str(e), 'View function did not return a response')\n+            assert str(e) == 'View function did not return a response'\n             pass\n         else:\n-            self.assert_true(\"Expected ValueError\")\n+            assert \"Expected ValueError\"\n \n     def test_request_locals(self):\n-        self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n-        self.assert_false(flask.g)\n+        assert repr(flask.g) == '<LocalProxy unbound>'\n+        assert not flask.g\n \n     def test_test_app_proper_environ(self):\n         app = flask.Flask(__name__)\n@@ -952,42 +957,46 @@ class TestBasicFunctionality(TestFlask):\n             return 'Foo SubDomain'\n \n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'Foo')\n+        assert rv.data == b'Foo'\n \n         rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n-        self.assert_equal(rv.data, b'Foo')\n+        assert rv.data == b'Foo'\n \n         rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n-        self.assert_equal(rv.data, b'Foo')\n+        assert rv.data == b'Foo'\n \n         app.config.update(SERVER_NAME='localhost.localdomain')\n         rv = app.test_client().get('/', 'https://localhost.localdomain')\n-        self.assert_equal(rv.data, b'Foo')\n+        assert rv.data == b'Foo'\n \n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain:443')\n             rv = app.test_client().get('/', 'https://localhost.localdomain')\n             # Werkzeug 0.8\n-            self.assert_equal(rv.status_code, 404)\n+            assert rv.status_code == 404\n         except ValueError as e:\n             # Werkzeug 0.7\n-            self.assert_equal(str(e), \"the server name provided \" +\n-                    \"('localhost.localdomain:443') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost.localdomain')\")\n+            assert str(e) == (\n+                \"the server name provided \"\n+                \"('localhost.localdomain:443') does not match the \"\n+                \"server name from the WSGI environment ('localhost.localdomain')\"\n+            )\n \n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain')\n             rv = app.test_client().get('/', 'http://foo.localhost')\n             # Werkzeug 0.8\n-            self.assert_equal(rv.status_code, 404)\n+            assert rv.status_code == 404\n         except ValueError as e:\n             # Werkzeug 0.7\n-            self.assert_equal(str(e), \"the server name provided \" + \\\n-                    \"('localhost.localdomain') does not match the \" + \\\n-                    \"server name from the WSGI environment ('foo.localhost')\")\n+            assert str(e) == (\n+                \"the server name provided \"\n+                \"('localhost.localdomain') does not match the \"\n+                \"server name from the WSGI environment ('foo.localhost')\"\n+            )\n \n         rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n-        self.assert_equal(rv.data, b'Foo SubDomain')\n+        assert rv.data == b'Foo SubDomain'\n \n     def test_exception_propagation(self):\n         def apprunner(configkey):\n@@ -1004,9 +1013,9 @@ class TestBasicFunctionality(TestFlask):\n                 except Exception:\n                     pass\n                 else:\n-                    self.fail('expected exception')\n+                    assert False, 'expected exception'\n             else:\n-                self.assert_equal(c.get('/').status_code, 500)\n+                assert c.get('/').status_code == 500\n \n         # we have to run this test in an isolated thread because if the\n         # debug flag is set to true and an exception happens the context is\n@@ -1023,18 +1032,18 @@ class TestBasicFunctionality(TestFlask):\n         @app.before_request\n         def always_first():\n             flask.request.form['myfile']\n-            self.assert_true(False)\n+            assert False\n         @app.route('/accept', methods=['POST'])\n         def accept_file():\n             flask.request.form['myfile']\n-            self.assert_true(False)\n+            assert False\n         @app.errorhandler(413)\n         def catcher(error):\n             return '42'\n \n         c = app.test_client()\n         rv = c.post('/accept', data={'myfile': 'foo' * 100})\n-        self.assert_equal(rv.data, b'42')\n+        assert rv.data == b'42'\n \n     def test_url_processors(self):\n         app = flask.Flask(__name__)\n@@ -1063,9 +1072,9 @@ class TestBasicFunctionality(TestFlask):\n \n         c = app.test_client()\n \n-        self.assert_equal(c.get('/de/').data, b'/de/about')\n-        self.assert_equal(c.get('/de/about').data, b'/foo')\n-        self.assert_equal(c.get('/foo').data, b'/en/about')\n+        assert c.get('/de/').data == b'/de/about'\n+        assert c.get('/de/about').data == b'/foo'\n+        assert c.get('/foo').data == b'/en/about'\n \n     def test_inject_blueprint_url_defaults(self):\n         app = flask.Flask(__name__)\n@@ -1083,12 +1092,12 @@ class TestBasicFunctionality(TestFlask):\n         values = dict()\n         app.inject_url_defaults('foo.bar.baz.view', values)\n         expected = dict(page='login')\n-        self.assert_equal(values, expected)\n+        assert values == expected\n \n         with app.test_request_context('/somepage'):\n             url = flask.url_for('foo.bar.baz.view')\n         expected = '/login'\n-        self.assert_equal(url, expected)\n+        assert url == expected\n \n     def test_nonascii_pathinfo(self):\n         app = flask.Flask(__name__)\n@@ -1100,7 +1109,7 @@ class TestBasicFunctionality(TestFlask):\n \n         c = app.test_client()\n         rv = c.get(u'/киртест')\n-        self.assert_equal(rv.data, b'Hello World!')\n+        assert rv.data == b'Hello World!'\n \n     def test_debug_mode_complains_after_first_request(self):\n         app = flask.Flask(__name__)\n@@ -1108,23 +1117,23 @@ class TestBasicFunctionality(TestFlask):\n         @app.route('/')\n         def index():\n             return 'Awesome'\n-        self.assert_false(app.got_first_request)\n-        self.assert_equal(app.test_client().get('/').data, b'Awesome')\n+        assert not app.got_first_request\n+        assert app.test_client().get('/').data == b'Awesome'\n         try:\n             @app.route('/foo')\n             def broken():\n                 return 'Meh'\n         except AssertionError as e:\n-            self.assert_in('A setup function was called', str(e))\n+            assert 'A setup function was called' in str(e)\n         else:\n-            self.fail('Expected exception')\n+            assert False, 'Expected exception'\n \n         app.debug = False\n         @app.route('/foo')\n         def working():\n             return 'Meh'\n-        self.assert_equal(app.test_client().get('/foo').data, b'Meh')\n-        self.assert_true(app.got_first_request)\n+        assert app.test_client().get('/foo').data == b'Meh'\n+        assert app.got_first_request\n \n     def test_before_first_request_functions(self):\n         got = []\n@@ -1134,10 +1143,10 @@ class TestBasicFunctionality(TestFlask):\n             got.append(42)\n         c = app.test_client()\n         c.get('/')\n-        self.assert_equal(got, [42])\n+        assert got == [42]\n         c.get('/')\n-        self.assert_equal(got, [42])\n-        self.assert_true(app.got_first_request)\n+        assert got == [42]\n+        assert app.got_first_request\n \n     def test_before_first_request_functions_concurrent(self):\n         got = []\n@@ -1151,13 +1160,13 @@ class TestBasicFunctionality(TestFlask):\n         c = app.test_client()\n         def get_and_assert():\n             c.get(\"/\")\n-            self.assert_equal(got, [42])\n+            assert got == [42]\n \n         t = Thread(target=get_and_assert)\n         t.start()\n         get_and_assert()\n         t.join()\n-        self.assert_true(app.got_first_request)\n+        assert app.got_first_request\n \n     def test_routing_redirect_debugging(self):\n         app = flask.Flask(__name__)\n@@ -1169,19 +1178,19 @@ class TestBasicFunctionality(TestFlask):\n             try:\n                 c.post('/foo', data={})\n             except AssertionError as e:\n-                self.assert_in('http://localhost/foo/', str(e))\n-                self.assert_in('Make sure to directly send your POST-request '\n-                               'to this URL', str(e))\n+                assert 'http://localhost/foo/' in str(e)\n+                assert ('Make sure to directly send '\n+                        'your POST-request to this URL') in str(e)\n             else:\n-                self.fail('Expected exception')\n+                assert False, 'Expected exception'\n \n             rv = c.get('/foo', data={}, follow_redirects=True)\n-            self.assert_equal(rv.data, b'success')\n+            assert rv.data == b'success'\n \n         app.debug = False\n         with app.test_client() as c:\n             rv = c.post('/foo', data={}, follow_redirects=True)\n-            self.assert_equal(rv.data, b'success')\n+            assert rv.data == b'success'\n \n     def test_route_decorator_custom_endpoint(self):\n         app = flask.Flask(__name__)\n@@ -1205,9 +1214,9 @@ class TestBasicFunctionality(TestFlask):\n             assert flask.url_for('123') == '/bar/123'\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/foo/').data, b'foo')\n-        self.assert_equal(c.get('/bar/').data, b'bar')\n-        self.assert_equal(c.get('/bar/123').data, b'123')\n+        assert c.get('/foo/').data == b'foo'\n+        assert c.get('/bar/').data == b'bar'\n+        assert c.get('/bar/123').data == b'123'\n \n     def test_preserve_only_once(self):\n         app = flask.Flask(__name__)\n@@ -1219,15 +1228,15 @@ class TestBasicFunctionality(TestFlask):\n \n         c = app.test_client()\n         for x in range(3):\n-            with self.assert_raises(ZeroDivisionError):\n+            with pytest.raises(ZeroDivisionError):\n                 c.get('/fail')\n \n-        self.assert_true(flask._request_ctx_stack.top is not None)\n-        self.assert_true(flask._app_ctx_stack.top is not None)\n+        assert flask._request_ctx_stack.top is not None\n+        assert flask._app_ctx_stack.top is not None\n         # implicit appctx disappears too\n         flask._request_ctx_stack.top.pop()\n-        self.assert_true(flask._request_ctx_stack.top is None)\n-        self.assert_true(flask._app_ctx_stack.top is None)\n+        assert flask._request_ctx_stack.top is None\n+        assert flask._app_ctx_stack.top is None\n \n     def test_preserve_remembers_exception(self):\n         app = flask.Flask(__name__)\n@@ -1249,30 +1258,30 @@ class TestBasicFunctionality(TestFlask):\n         c = app.test_client()\n \n         # After this failure we did not yet call the teardown handler\n-        with self.assert_raises(ZeroDivisionError):\n+        with pytest.raises(ZeroDivisionError):\n             c.get('/fail')\n-        self.assert_equal(errors, [])\n+        assert errors == []\n \n         # But this request triggers it, and it's an error\n         c.get('/success')\n-        self.assert_equal(len(errors), 2)\n-        self.assert_true(isinstance(errors[0], ZeroDivisionError))\n+        assert len(errors) == 2\n+        assert isinstance(errors[0], ZeroDivisionError)\n \n         # At this point another request does nothing.\n         c.get('/success')\n-        self.assert_equal(len(errors), 3)\n-        self.assert_equal(errors[1], None)\n+        assert len(errors) == 3\n+        assert errors[1] == None\n \n     def test_get_method_on_g(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n \n         with app.app_context():\n-            self.assert_equal(flask.g.get('x'), None)\n-            self.assert_equal(flask.g.get('x', 11), 11)\n+            assert flask.g.get('x') == None\n+            assert flask.g.get('x', 11) == 11\n             flask.g.x = 42\n-            self.assert_equal(flask.g.get('x'), 42)\n-            self.assert_equal(flask.g.x, 42)\n+            assert flask.g.get('x') == 42\n+            assert flask.g.x == 42\n \n     def test_g_iteration_protocol(self):\n         app = flask.Flask(__name__)\n@@ -1281,9 +1290,9 @@ class TestBasicFunctionality(TestFlask):\n         with app.app_context():\n             flask.g.foo = 23\n             flask.g.bar = 42\n-            self.assert_equal('foo' in flask.g, True)\n-            self.assert_equal('foos' in flask.g, False)\n-            self.assert_equal(sorted(flask.g), ['bar', 'foo'])\n+            assert 'foo' in flask.g\n+            assert 'foos' not in flask.g\n+            assert sorted(flask.g) == ['bar', 'foo']\n \n \n class TestSubdomain(TestFlask):\n@@ -1300,10 +1309,10 @@ class TestSubdomain(TestFlask):\n \n         c = app.test_client()\n         rv = c.get('/', 'http://localhost/')\n-        self.assert_equal(rv.data, b'normal index')\n+        assert rv.data == b'normal index'\n \n         rv = c.get('/', 'http://test.localhost/')\n-        self.assert_equal(rv.data, b'test index')\n+        assert rv.data == b'test index'\n \n     def test_subdomain_matching(self):\n         app = flask.Flask(__name__)\n@@ -1314,7 +1323,7 @@ class TestSubdomain(TestFlask):\n \n         c = app.test_client()\n         rv = c.get('/', 'http://mitsuhiko.localhost/')\n-        self.assert_equal(rv.data, b'index for mitsuhiko')\n+        assert rv.data == b'index for mitsuhiko'\n \n     def test_subdomain_matching_with_ports(self):\n         app = flask.Flask(__name__)\n@@ -1325,7 +1334,7 @@ class TestSubdomain(TestFlask):\n \n         c = app.test_client()\n         rv = c.get('/', 'http://mitsuhiko.localhost:3000/')\n-        self.assert_equal(rv.data, b'index for mitsuhiko')\n+        assert rv.data == b'index for mitsuhiko'\n \n     def test_multi_route_rules(self):\n         app = flask.Flask(__name__)\n@@ -1336,9 +1345,9 @@ class TestSubdomain(TestFlask):\n             return test\n \n         rv = app.test_client().open('/')\n-        self.assert_equal(rv.data, b'a')\n+        assert rv.data == b'a'\n         rv = app.test_client().open('/b/')\n-        self.assert_equal(rv.data, b'b')\n+        assert rv.data == b'b'\n \n     def test_multi_route_class_views(self):\n         class View(object):\n@@ -1352,6 +1361,6 @@ class TestSubdomain(TestFlask):\n         app = flask.Flask(__name__)\n         _ = View(app)\n         rv = app.test_client().open('/')\n-        self.assert_equal(rv.data, b'a')\n+        assert rv.data == b'a'\n         rv = app.test_client().open('/b/')\n-        self.assert_equal(rv.data, b'b')\n+        assert rv.data == b'b'\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import flask\n import unittest\n from tests import TestFlask\n@@ -55,9 +57,9 @@ class TestBlueprint(TestFlask):\n \n         c = app.test_client()\n \n-        self.assert_equal(c.get('/frontend-no').data, b'frontend says no')\n-        self.assert_equal(c.get('/backend-no').data, b'backend says no')\n-        self.assert_equal(c.get('/what-is-a-sideend').data, b'application itself says no')\n+        assert c.get('/frontend-no').data == b'frontend says no'\n+        assert c.get('/backend-no').data == b'backend says no'\n+        assert c.get('/what-is-a-sideend').data == b'application itself says no'\n \n     def test_blueprint_specific_user_error_handling(self):\n         class MyDecoratorException(Exception):\n@@ -69,11 +71,11 @@ class TestBlueprint(TestFlask):\n \n         @blue.errorhandler(MyDecoratorException)\n         def my_decorator_exception_handler(e):\n-            self.assert_true(isinstance(e, MyDecoratorException))\n+            assert isinstance(e, MyDecoratorException)\n             return 'boom'\n \n         def my_function_exception_handler(e):\n-            self.assert_true(isinstance(e, MyFunctionException))\n+            assert isinstance(e, MyFunctionException)\n             return 'bam'\n         blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n \n@@ -89,8 +91,8 @@ class TestBlueprint(TestFlask):\n \n         c = app.test_client()\n \n-        self.assert_equal(c.get('/decorator').data, b'boom')\n-        self.assert_equal(c.get('/function').data, b'bam')\n+        assert c.get('/decorator').data == b'boom'\n+        assert c.get('/function').data == b'bam'\n \n     def test_blueprint_url_definitions(self):\n         bp = flask.Blueprint('test', __name__)\n@@ -108,10 +110,10 @@ class TestBlueprint(TestFlask):\n         app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/1/foo').data, b'23/42')\n-        self.assert_equal(c.get('/2/foo').data, b'19/42')\n-        self.assert_equal(c.get('/1/bar').data, b'23')\n-        self.assert_equal(c.get('/2/bar').data, b'19')\n+        assert c.get('/1/foo').data == b'23/42'\n+        assert c.get('/2/foo').data == b'19/42'\n+        assert c.get('/1/bar').data == b'23'\n+        assert c.get('/2/bar').data == b'19'\n \n     def test_blueprint_url_processors(self):\n         bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n@@ -137,24 +139,24 @@ class TestBlueprint(TestFlask):\n \n         c = app.test_client()\n \n-        self.assert_equal(c.get('/de/').data, b'/de/about')\n-        self.assert_equal(c.get('/de/about').data, b'/de/')\n+        assert c.get('/de/').data == b'/de/about'\n+        assert c.get('/de/about').data == b'/de/'\n \n     def test_templates_and_static(self):\n         from blueprintapp import app\n         c = app.test_client()\n \n         rv = c.get('/')\n-        self.assert_equal(rv.data, b'Hello from the Frontend')\n+        assert rv.data == b'Hello from the Frontend'\n         rv = c.get('/admin/')\n-        self.assert_equal(rv.data, b'Hello from the Admin')\n+        assert rv.data == b'Hello from the Admin'\n         rv = c.get('/admin/index2')\n-        self.assert_equal(rv.data, b'Hello from the Admin')\n+        assert rv.data == b'Hello from the Admin'\n         rv = c.get('/admin/static/test.txt')\n-        self.assert_equal(rv.data.strip(), b'Admin File')\n+        assert rv.data.strip() == b'Admin File'\n         rv.close()\n         rv = c.get('/admin/static/css/test.css')\n-        self.assert_equal(rv.data.strip(), b'/* nested file */')\n+        assert rv.data.strip() == b'/* nested file */'\n         rv.close()\n \n         # try/finally, in case other tests use this app for Blueprint tests.\n@@ -166,25 +168,24 @@ class TestBlueprint(TestFlask):\n             app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n             rv = c.get('/admin/static/css/test.css')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, expected_max_age)\n+            assert cc.max_age == expected_max_age\n             rv.close()\n         finally:\n             app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n-                              '/admin/static/test.txt')\n+            assert flask.url_for('admin.static', filename='test.txt') == '/admin/static/test.txt'\n \n         with app.test_request_context():\n             try:\n                 flask.render_template('missing.html')\n             except TemplateNotFound as e:\n-                self.assert_equal(e.name, 'missing.html')\n+                assert e.name == 'missing.html'\n             else:\n-                self.assert_true(0, 'expected exception')\n+                assert 0, 'expected exception'\n \n         with flask.Flask(__name__).test_request_context():\n-            self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n+            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n     def test_default_static_cache_timeout(self):\n         app = flask.Flask(__name__)\n@@ -205,7 +206,7 @@ class TestBlueprint(TestFlask):\n                 app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n                 rv = blueprint.send_static_file('index.html')\n                 cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-                self.assert_equal(cc.max_age, 100)\n+                assert cc.max_age == 100\n                 rv.close()\n         finally:\n             app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n@@ -213,8 +214,7 @@ class TestBlueprint(TestFlask):\n     def test_templates_list(self):\n         from blueprintapp import app\n         templates = sorted(app.jinja_env.list_templates())\n-        self.assert_equal(templates, ['admin/index.html',\n-                                     'frontend/index.html'])\n+        assert templates == ['admin/index.html', 'frontend/index.html']\n \n     def test_dotted_names(self):\n         frontend = flask.Blueprint('myapp.frontend', __name__)\n@@ -237,9 +237,9 @@ class TestBlueprint(TestFlask):\n         app.register_blueprint(backend)\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/fe').data.strip(), b'/be')\n-        self.assert_equal(c.get('/fe2').data.strip(), b'/fe')\n-        self.assert_equal(c.get('/be').data.strip(), b'/fe')\n+        assert c.get('/fe').data.strip() == b'/be'\n+        assert c.get('/fe2').data.strip() == b'/fe'\n+        assert c.get('/be').data.strip() == b'/fe'\n \n     def test_dotted_names_from_app(self):\n         app = flask.Flask(__name__)\n@@ -258,7 +258,7 @@ class TestBlueprint(TestFlask):\n \n         with app.test_client() as c:\n             rv = c.get('/')\n-            self.assert_equal(rv.data, b'/test/')\n+            assert rv.data == b'/test/'\n \n     def test_empty_url_defaults(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -272,8 +272,8 @@ class TestBlueprint(TestFlask):\n         app.register_blueprint(bp)\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'1')\n-        self.assert_equal(c.get('/page/2').data, b'2')\n+        assert c.get('/').data == b'1'\n+        assert c.get('/page/2').data == b'2'\n \n     def test_route_decorator_custom_endpoint(self):\n \n@@ -303,11 +303,11 @@ class TestBlueprint(TestFlask):\n             return flask.request.endpoint\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/').data, b'index')\n-        self.assert_equal(c.get('/py/foo').data, b'bp.foo')\n-        self.assert_equal(c.get('/py/bar').data, b'bp.bar')\n-        self.assert_equal(c.get('/py/bar/123').data, b'bp.123')\n-        self.assert_equal(c.get('/py/bar/foo').data, b'bp.bar_foo')\n+        assert c.get('/').data == b'index'\n+        assert c.get('/py/foo').data == b'bp.foo'\n+        assert c.get('/py/bar').data == b'bp.bar'\n+        assert c.get('/py/bar/123').data == b'bp.123'\n+        assert c.get('/py/bar/foo').data == b'bp.bar_foo'\n \n     def test_route_decorator_custom_endpoint_with_dots(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -337,14 +337,14 @@ class TestBlueprint(TestFlask):\n         def foo_foo_foo():\n             pass\n \n-        self.assert_raises(\n+        pytest.raises(\n             AssertionError,\n             lambda: bp.add_url_rule(\n                 '/bar/123', endpoint='bar.123', view_func=foo_foo_foo\n             )\n         )\n \n-        self.assert_raises(\n+        pytest.raises(\n             AssertionError,\n             bp.route('/bar/123', endpoint='bar.123'),\n             lambda: None\n@@ -354,7 +354,7 @@ class TestBlueprint(TestFlask):\n         app.register_blueprint(bp, url_prefix='/py')\n \n         c = app.test_client()\n-        self.assert_equal(c.get('/py/foo').data, b'bp.foo')\n+        assert c.get('/py/foo').data == b'bp.foo'\n         # The rule's didn't actually made it through\n         rv = c.get('/py/bar')\n         assert rv.status_code == 404\n@@ -368,9 +368,9 @@ class TestBlueprint(TestFlask):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+        assert 'my_reverse' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n     def test_add_template_filter(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -379,9 +379,9 @@ class TestBlueprint(TestFlask):\n         bp.add_app_template_filter(my_reverse)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+        assert 'my_reverse' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n     def test_template_filter_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -390,9 +390,9 @@ class TestBlueprint(TestFlask):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('strrev', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+        assert 'strrev' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n     def test_add_template_filter_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -401,9 +401,9 @@ class TestBlueprint(TestFlask):\n         bp.add_app_template_filter(my_reverse, 'strrev')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('strrev', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+        assert 'strrev' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n     def test_template_filter_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -416,7 +416,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_template_filter_after_route_with_template(self):\n         app = flask.Flask(__name__)\n@@ -429,7 +429,7 @@ class TestBlueprint(TestFlask):\n             return s[::-1]\n         app.register_blueprint(bp, url_prefix='/py')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_add_template_filter_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -442,7 +442,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_template_filter_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -455,7 +455,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_add_template_filter_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -468,7 +468,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_template_test(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -477,9 +477,9 @@ class TestBlueprint(TestFlask):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('is_boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['is_boolean'](False))\n+        assert 'is_boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['is_boolean'] == is_boolean\n+        assert app.jinja_env.tests['is_boolean'](False)\n \n     def test_add_template_test(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -488,9 +488,9 @@ class TestBlueprint(TestFlask):\n         bp.add_app_template_test(is_boolean)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('is_boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['is_boolean'](False))\n+        assert 'is_boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['is_boolean'] == is_boolean\n+        assert app.jinja_env.tests['is_boolean'](False)\n \n     def test_template_test_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -499,9 +499,9 @@ class TestBlueprint(TestFlask):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == is_boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_add_template_test_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -510,9 +510,9 @@ class TestBlueprint(TestFlask):\n         bp.add_app_template_test(is_boolean, 'boolean')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == is_boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_template_test_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -525,7 +525,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_template_test_after_route_with_template(self):\n         app = flask.Flask(__name__)\n@@ -538,7 +538,7 @@ class TestBlueprint(TestFlask):\n             return isinstance(value, bool)\n         app.register_blueprint(bp, url_prefix='/py')\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_add_template_test_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -551,7 +551,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -564,7 +564,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_add_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -577,7 +577,7 @@ class TestBlueprint(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -30,9 +30,9 @@ SECRET_KEY = 'devkey'\n class TestConfig(TestFlask):\n \n     def common_object_test(self, app):\n-        self.assert_equal(app.secret_key, 'devkey')\n-        self.assert_equal(app.config['TEST_KEY'], 'foo')\n-        self.assert_not_in('TestConfig', app.config)\n+        assert app.secret_key == 'devkey'\n+        assert app.config['TEST_KEY'] == 'foo'\n+        assert 'TestConfig' not in app.config\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n@@ -73,7 +73,7 @@ class TestConfig(TestFlask):\n         self.common_object_test(app)\n \n         app = flask.Flask(__name__)\n-        with self.assert_raises(TypeError):\n+        with pytest.raises(TypeError):\n             app.config.from_mapping(\n                 {}, {}\n             )\n@@ -95,13 +95,13 @@ class TestConfig(TestFlask):\n             try:\n                 app.config.from_envvar('FOO_SETTINGS')\n             except RuntimeError as e:\n-                self.assert_true(\"'FOO_SETTINGS' is not set\" in str(e))\n+                assert \"'FOO_SETTINGS' is not set\" in str(e)\n             else:\n-                self.assert_true(0, 'expected exception')\n-            self.assert_false(app.config.from_envvar('FOO_SETTINGS', silent=True))\n+                assert 0, 'expected exception'\n+            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n \n             os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n-            self.assert_true(app.config.from_envvar('FOO_SETTINGS'))\n+            assert app.config.from_envvar('FOO_SETTINGS')\n             self.common_object_test(app)\n         finally:\n             os.environ = env\n@@ -115,12 +115,12 @@ class TestConfig(TestFlask):\n                 app.config.from_envvar('FOO_SETTINGS')\n             except IOError as e:\n                 msg = str(e)\n-                self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n-                                            'file (No such file or directory):'))\n-                self.assert_true(msg.endswith(\"missing.cfg'\"))\n+                assert msg.startswith('[Errno 2] Unable to load configuration '\n+                                      'file (No such file or directory):')\n+                assert msg.endswith(\"missing.cfg'\")\n             else:\n-                self.fail('expected IOError')\n-            self.assert_false(app.config.from_envvar('FOO_SETTINGS', silent=True))\n+                assert False, 'expected IOError'\n+            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n         finally:\n             os.environ = env\n \n@@ -130,12 +130,12 @@ class TestConfig(TestFlask):\n             app.config.from_pyfile('missing.cfg')\n         except IOError as e:\n             msg = str(e)\n-            self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n-                                        'file (No such file or directory):'))\n-            self.assert_true(msg.endswith(\"missing.cfg'\"))\n+            assert msg.startswith('[Errno 2] Unable to load configuration '\n+                                  'file (No such file or directory):')\n+            assert msg.endswith(\"missing.cfg'\")\n         else:\n-            self.assert_true(0, 'expected config')\n-        self.assert_false(app.config.from_pyfile('missing.cfg', silent=True))\n+            assert 0, 'expected config'\n+        assert not app.config.from_pyfile('missing.cfg', silent=True)\n \n     def test_config_missing_json(self):\n         app = flask.Flask(__name__)\n@@ -143,12 +143,12 @@ class TestConfig(TestFlask):\n             app.config.from_json('missing.json')\n         except IOError as e:\n             msg = str(e)\n-            self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n-                                            'file (No such file or directory):'))\n-            self.assert_true(msg.endswith(\"missing.json'\"))\n+            assert msg.startswith('[Errno 2] Unable to load configuration '\n+                                  'file (No such file or directory):')\n+            assert msg.endswith(\"missing.json'\")\n         else:\n-            self.assert_true(0, 'expected config')\n-        self.assert_false(app.config.from_json('missing.json', silent=True))\n+            assert 0, 'expected config'\n+        assert not app.config.from_json('missing.json', silent=True)\n \n     def test_custom_config_class(self):\n         class Config(flask.Config):\n@@ -156,14 +156,14 @@ class TestConfig(TestFlask):\n         class Flask(flask.Flask):\n             config_class = Config\n         app = Flask(__name__)\n-        self.assert_isinstance(app.config, Config)\n+        assert isinstance(app.config, Config)\n         app.config.from_object(__name__)\n         self.common_object_test(app)\n \n     def test_session_lifetime(self):\n         app = flask.Flask(__name__)\n         app.config['PERMANENT_SESSION_LIFETIME'] = 42\n-        self.assert_equal(app.permanent_session_lifetime.seconds, 42)\n+        assert app.permanent_session_lifetime.seconds == 42\n \n     def test_get_namespace(self):\n         app = flask.Flask(__name__)\n@@ -172,13 +172,13 @@ class TestConfig(TestFlask):\n         app.config['BAR_STUFF_1'] = 'bar stuff 1'\n         app.config['BAR_STUFF_2'] = 'bar stuff 2'\n         foo_options = app.config.get_namespace('FOO_')\n-        self.assert_equal(2, len(foo_options))\n-        self.assert_equal('foo option 1', foo_options['option_1'])\n-        self.assert_equal('foo option 2', foo_options['option_2'])\n+        assert 2 == len(foo_options)\n+        assert 'foo option 1' == foo_options['option_1']\n+        assert 'foo option 2' == foo_options['option_2']\n         bar_options = app.config.get_namespace('BAR_', lowercase=False)\n-        self.assert_equal(2, len(bar_options))\n-        self.assert_equal('bar stuff 1', bar_options['STUFF_1'])\n-        self.assert_equal('bar stuff 2', bar_options['STUFF_2'])\n+        assert 2 == len(bar_options)\n+        assert 'bar stuff 1' == bar_options['STUFF_1']\n+        assert 'bar stuff 2' == bar_options['STUFF_2']\n \n \n class TestInstance(TestFlask):\n@@ -188,7 +188,7 @@ class TestInstance(TestFlask):\n         assert 'must be absolute' in str(excinfo.value)\n \n         app = flask.Flask(__name__, instance_path=str(apps_tmpdir))\n-        self.assert_equal(app.instance_path, str(apps_tmpdir))\n+        assert app.instance_path == str(apps_tmpdir)\n \n     def test_main_module_paths(self, apps_tmpdir, purge_module):\n         app = apps_tmpdir.join('main_app.py')\n@@ -285,7 +285,7 @@ class TestInstance(TestFlask):\n                     return self\n             sys.meta_path.append(Loader())\n             try:\n-                with self.assert_raises(AttributeError):\n+                with pytest.raises(AttributeError):\n                     flask.Flask(__name__)\n             finally:\n                 sys.meta_path.pop()\n\n@@ -11,6 +11,8 @@\n \n import sys\n import unittest\n+import pytest\n+\n try:\n     from imp import reload as reload_module\n except ImportError:\n@@ -41,70 +43,70 @@ class TestExtImportHook(TestFlask):\n             if cls.__module__ == 'flask.exthook' and \\\n                cls.__name__ == 'ExtensionImporter':\n                 import_hooks += 1\n-        self.assert_equal(import_hooks, 1)\n+        assert import_hooks == 1\n \n     def teardown(self):\n         from flask import ext\n         for key in ext.__dict__:\n-            self.assert_not_in('.', key)\n+            assert '.' not in key\n \n     def test_flaskext_new_simple_import_normal(self):\n         from flask.ext.newext_simple import ext_id\n-        self.assert_equal(ext_id, 'newext_simple')\n+        assert ext_id == 'newext_simple'\n \n     def test_flaskext_new_simple_import_module(self):\n         from flask.ext import newext_simple\n-        self.assert_equal(newext_simple.ext_id, 'newext_simple')\n-        self.assert_equal(newext_simple.__name__, 'flask_newext_simple')\n+        assert newext_simple.ext_id == 'newext_simple'\n+        assert newext_simple.__name__ == 'flask_newext_simple'\n \n     def test_flaskext_new_package_import_normal(self):\n         from flask.ext.newext_package import ext_id\n-        self.assert_equal(ext_id, 'newext_package')\n+        assert ext_id == 'newext_package'\n \n     def test_flaskext_new_package_import_module(self):\n         from flask.ext import newext_package\n-        self.assert_equal(newext_package.ext_id, 'newext_package')\n-        self.assert_equal(newext_package.__name__, 'flask_newext_package')\n+        assert newext_package.ext_id == 'newext_package'\n+        assert newext_package.__name__ == 'flask_newext_package'\n \n     def test_flaskext_new_package_import_submodule_function(self):\n         from flask.ext.newext_package.submodule import test_function\n-        self.assert_equal(test_function(), 42)\n+        assert test_function() == 42\n \n     def test_flaskext_new_package_import_submodule(self):\n         from flask.ext.newext_package import submodule\n-        self.assert_equal(submodule.__name__, 'flask_newext_package.submodule')\n-        self.assert_equal(submodule.test_function(), 42)\n+        assert submodule.__name__ == 'flask_newext_package.submodule'\n+        assert submodule.test_function() == 42\n \n     def test_flaskext_old_simple_import_normal(self):\n         from flask.ext.oldext_simple import ext_id\n-        self.assert_equal(ext_id, 'oldext_simple')\n+        assert ext_id == 'oldext_simple'\n \n     def test_flaskext_old_simple_import_module(self):\n         from flask.ext import oldext_simple\n-        self.assert_equal(oldext_simple.ext_id, 'oldext_simple')\n-        self.assert_equal(oldext_simple.__name__, 'flaskext.oldext_simple')\n+        assert oldext_simple.ext_id == 'oldext_simple'\n+        assert oldext_simple.__name__ == 'flaskext.oldext_simple'\n \n     def test_flaskext_old_package_import_normal(self):\n         from flask.ext.oldext_package import ext_id\n-        self.assert_equal(ext_id, 'oldext_package')\n+        assert ext_id == 'oldext_package'\n \n     def test_flaskext_old_package_import_module(self):\n         from flask.ext import oldext_package\n-        self.assert_equal(oldext_package.ext_id, 'oldext_package')\n-        self.assert_equal(oldext_package.__name__, 'flaskext.oldext_package')\n+        assert oldext_package.ext_id == 'oldext_package'\n+        assert oldext_package.__name__ == 'flaskext.oldext_package'\n \n     def test_flaskext_old_package_import_submodule(self):\n         from flask.ext.oldext_package import submodule\n-        self.assert_equal(submodule.__name__, 'flaskext.oldext_package.submodule')\n-        self.assert_equal(submodule.test_function(), 42)\n+        assert submodule.__name__ == 'flaskext.oldext_package.submodule'\n+        assert submodule.test_function() == 42\n \n     def test_flaskext_old_package_import_submodule_function(self):\n         from flask.ext.oldext_package.submodule import test_function\n-        self.assert_equal(test_function(), 42)\n+        assert test_function() == 42\n \n     def test_flaskext_broken_package_no_module_caching(self):\n         for x in range(2):\n-            with self.assert_raises(ImportError):\n+            with pytest.raises(ImportError):\n                 import flask.ext.broken\n \n     def test_no_error_swallowing(self):\n@@ -112,13 +114,13 @@ class TestExtImportHook(TestFlask):\n             import flask.ext.broken\n         except ImportError:\n             exc_type, exc_value, tb = sys.exc_info()\n-            self.assert_true(exc_type is ImportError)\n+            assert exc_type is ImportError\n             if PY2:\n                 message = 'No module named missing_module'\n             else:\n                 message = 'No module named \\'missing_module\\''\n-            self.assert_equal(str(exc_value), message)\n-            self.assert_true(tb.tb_frame.f_globals is globals())\n+            assert str(exc_value) == message\n+            assert tb.tb_frame.f_globals is globals()\n \n             # reraise() adds a second frame so we need to skip that one too.\n             # On PY3 we even have another one :(\n@@ -127,7 +129,8 @@ class TestExtImportHook(TestFlask):\n                 next = next.tb_next\n             \n             import os.path\n-            self.assert_in(os.path.join('flask_broken', '__init__.py'), next.tb_frame.f_code.co_filename)\n+            assert os.path.join('flask_broken', '__init__.py') in \\\n+                next.tb_frame.f_code.co_filename\n \n \n def suite():\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import os\n import flask\n import unittest\n@@ -36,7 +38,7 @@ class TestJSON(TestFlask):\n             return flask.jsonify(foo=text_type(flask.request.get_json()))\n         c = app.test_client()\n         rv = c.post('/json', data='malformed', content_type='application/json')\n-        self.assert_equal(rv.status_code, 400)\n+        assert rv.status_code == 400\n \n     def test_json_custom_mimetypes(self):\n         app = flask.Flask(__name__)\n@@ -45,7 +47,7 @@ class TestJSON(TestFlask):\n             return flask.request.get_json()\n         c = app.test_client()\n         rv = c.post('/json', data='\"foo\"', content_type='application/x+json')\n-        self.assert_equal(rv.data, b'foo')\n+        assert rv.data == b'foo'\n \n     def test_json_body_encoding(self):\n         app = flask.Flask(__name__)\n@@ -57,7 +59,7 @@ class TestJSON(TestFlask):\n         c = app.test_client()\n         resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n                      content_type='application/json; charset=iso-8859-15')\n-        self.assert_equal(resp.data, u'Hällo Wörld'.encode('utf-8'))\n+        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n \n     def test_jsonify(self):\n         d = dict(a=23, b=42, c=[1, 2, 3])\n@@ -71,8 +73,8 @@ class TestJSON(TestFlask):\n         c = app.test_client()\n         for url in '/kw', '/dict':\n             rv = c.get(url)\n-            self.assert_equal(rv.mimetype, 'application/json')\n-            self.assert_equal(flask.json.loads(rv.data), d)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data) == d\n \n     def test_json_as_unicode(self):\n         app = flask.Flask(__name__)\n@@ -80,12 +82,12 @@ class TestJSON(TestFlask):\n         app.config['JSON_AS_ASCII'] = True\n         with app.app_context():\n             rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            self.assert_equal(rv, '\"\\\\u2603\"')\n+            assert rv == '\"\\\\u2603\"'\n \n         app.config['JSON_AS_ASCII'] = False\n         with app.app_context():\n             rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            self.assert_equal(rv, u'\"\\u2603\"')\n+            assert rv == u'\"\\u2603\"'\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n@@ -96,29 +98,28 @@ class TestJSON(TestFlask):\n         c = app.test_client()\n         rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n                             content_type='application/json')\n-        self.assert_equal(rv.data, b'3')\n+        assert rv.data == b'3'\n \n     def test_template_escaping(self):\n         app = flask.Flask(__name__)\n         render = flask.render_template_string\n         with app.test_request_context():\n             rv = flask.json.htmlsafe_dumps('</script>')\n-            self.assert_equal(rv, u'\"\\\\u003c/script\\\\u003e\"')\n-            self.assert_equal(type(rv), text_type)\n+            assert rv == u'\"\\\\u003c/script\\\\u003e\"'\n+            assert type(rv) == text_type\n             rv = render('{{ \"</script>\"|tojson }}')\n-            self.assert_equal(rv, '\"\\\\u003c/script\\\\u003e\"')\n+            assert rv == '\"\\\\u003c/script\\\\u003e\"'\n             rv = render('{{ \"<\\0/script>\"|tojson }}')\n-            self.assert_equal(rv, '\"\\\\u003c\\\\u0000/script\\\\u003e\"')\n+            assert rv == '\"\\\\u003c\\\\u0000/script\\\\u003e\"'\n             rv = render('{{ \"<!--<script>\"|tojson }}')\n-            self.assert_equal(rv, '\"\\\\u003c!--\\\\u003cscript\\\\u003e\"')\n+            assert rv == '\"\\\\u003c!--\\\\u003cscript\\\\u003e\"'\n             rv = render('{{ \"&\"|tojson }}')\n-            self.assert_equal(rv, '\"\\\\u0026\"')\n+            assert rv == '\"\\\\u0026\"'\n             rv = render('{{ \"\\'\"|tojson }}')\n-            self.assert_equal(rv, '\"\\\\u0027\"')\n+            assert rv == '\"\\\\u0027\"'\n             rv = render(\"<a ng-data='{{ data|tojson }}'></a>\",\n                 data={'x': [\"foo\", \"bar\", \"baz'\"]})\n-            self.assert_equal(rv,\n-                '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>')\n+            assert rv == '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>'\n \n     def test_json_customization(self):\n         class X(object):\n@@ -148,7 +149,7 @@ class TestJSON(TestFlask):\n         rv = c.post('/', data=flask.json.dumps({\n             'x': {'_foo': 42}\n         }), content_type='application/json')\n-        self.assert_equal(rv.data, b'\"<42>\"')\n+        assert rv.data == b'\"<42>\"'\n \n     def test_modified_url_encoding(self):\n         class ModifiedRequest(flask.Request):\n@@ -163,8 +164,8 @@ class TestJSON(TestFlask):\n             return flask.request.args['foo']\n \n         rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n-        self.assert_equal(rv.status_code, 200)\n-        self.assert_equal(rv.data, u'정상처리'.encode('utf-8'))\n+        assert rv.status_code == 200\n+        assert rv.data == u'정상처리'.encode('utf-8')\n \n     if not has_encoding('euc-kr'):\n         test_modified_url_encoding = None\n@@ -172,7 +173,7 @@ class TestJSON(TestFlask):\n     def test_json_key_sorting(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n-        self.assert_equal(app.config['JSON_SORT_KEYS'], True)\n+        assert app.config['JSON_SORT_KEYS'] == True\n         d = dict.fromkeys(range(20), 'foo')\n \n         @app.route('/')\n@@ -236,9 +237,9 @@ class TestJSON(TestFlask):\n         ]\n \n         try:\n-            self.assert_equal(lines, sorted_by_int)\n+            assert lines == sorted_by_int\n         except AssertionError:\n-            self.assert_equal(lines, sorted_by_str)\n+            assert lines == sorted_by_str\n \n class TestSendfile(TestFlask):\n \n@@ -246,11 +247,11 @@ class TestSendfile(TestFlask):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            self.assert_true(rv.direct_passthrough)\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.direct_passthrough\n+            assert rv.mimetype == 'text/html'\n             with app.open_resource('static/index.html') as f:\n                 rv.direct_passthrough = False\n-                self.assert_equal(rv.data, f.read())\n+                assert rv.data == f.read()\n             rv.close()\n \n     def test_send_file_xsendfile(self):\n@@ -258,11 +259,11 @@ class TestSendfile(TestFlask):\n         app.use_x_sendfile = True\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            self.assert_true(rv.direct_passthrough)\n-            self.assert_in('x-sendfile', rv.headers)\n-            self.assert_equal(rv.headers['x-sendfile'],\n-                os.path.join(app.root_path, 'static/index.html'))\n-            self.assert_equal(rv.mimetype, 'text/html')\n+            assert rv.direct_passthrough\n+            assert 'x-sendfile' in rv.headers\n+            assert rv.headers['x-sendfile'] == \\\n+                os.path.join(app.root_path, 'static/index.html')\n+            assert rv.mimetype == 'text/html'\n             rv.close()\n \n     def test_send_file_object(self):\n@@ -273,24 +274,24 @@ class TestSendfile(TestFlask):\n                 rv = flask.send_file(f)\n                 rv.direct_passthrough = False\n                 with app.open_resource('static/index.html') as f:\n-                    self.assert_equal(rv.data, f.read())\n-                self.assert_equal(rv.mimetype, 'text/html')\n+                    assert rv.data == f.read()\n+                assert rv.mimetype == 'text/html'\n                 rv.close()\n             # mimetypes + etag\n-            self.assert_equal(len(captured), 2)\n+            assert len(captured) == 2\n \n         app.use_x_sendfile = True\n         with catch_warnings() as captured:\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n-                self.assert_equal(rv.mimetype, 'text/html')\n-                self.assert_in('x-sendfile', rv.headers)\n-                self.assert_equal(rv.headers['x-sendfile'],\n-                    os.path.join(app.root_path, 'static/index.html'))\n+                assert rv.mimetype == 'text/html'\n+                assert 'x-sendfile' in rv.headers\n+                assert rv.headers['x-sendfile'] == \\\n+                    os.path.join(app.root_path, 'static/index.html')\n                 rv.close()\n             # mimetypes + etag\n-            self.assert_equal(len(captured), 2)\n+            assert len(captured) == 2\n \n         app.use_x_sendfile = False\n         with app.test_request_context():\n@@ -298,11 +299,11 @@ class TestSendfile(TestFlask):\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n                 rv.direct_passthrough = False\n-                self.assert_equal(rv.data, b'Test')\n-                self.assert_equal(rv.mimetype, 'application/octet-stream')\n+                assert rv.data == b'Test'\n+                assert rv.mimetype == 'application/octet-stream'\n                 rv.close()\n             # etags\n-            self.assert_equal(len(captured), 1)\n+            assert len(captured) == 1\n             with catch_warnings() as captured:\n                 class PyStringIO(object):\n                     def __init__(self, *args, **kwargs):\n@@ -313,30 +314,30 @@ class TestSendfile(TestFlask):\n                 f.name = 'test.txt'\n                 rv = flask.send_file(f)\n                 rv.direct_passthrough = False\n-                self.assert_equal(rv.data, b'Test')\n-                self.assert_equal(rv.mimetype, 'text/plain')\n+                assert rv.data == b'Test'\n+                assert rv.mimetype == 'text/plain'\n                 rv.close()\n             # attachment_filename and etags\n-            self.assert_equal(len(captured), 3)\n+            assert len(captured) == 3\n             with catch_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f, mimetype='text/plain')\n                 rv.direct_passthrough = False\n-                self.assert_equal(rv.data, b'Test')\n-                self.assert_equal(rv.mimetype, 'text/plain')\n+                assert rv.data == b'Test'\n+                assert rv.mimetype == 'text/plain'\n                 rv.close()\n             # etags\n-            self.assert_equal(len(captured), 1)\n+            assert len(captured) == 1\n \n         app.use_x_sendfile = True\n         with catch_warnings() as captured:\n             with app.test_request_context():\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n-                self.assert_not_in('x-sendfile', rv.headers)\n+                assert 'x-sendfile' not in rv.headers\n                 rv.close()\n             # etags\n-            self.assert_equal(len(captured), 1)\n+            assert len(captured) == 1\n \n     def test_attachment(self):\n         app = flask.Flask(__name__)\n@@ -345,27 +346,27 @@ class TestSendfile(TestFlask):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f, as_attachment=True)\n                 value, options = parse_options_header(rv.headers['Content-Disposition'])\n-                self.assert_equal(value, 'attachment')\n+                assert value == 'attachment'\n                 rv.close()\n             # mimetypes + etag\n-            self.assert_equal(len(captured), 2)\n+            assert len(captured) == 2\n \n         with app.test_request_context():\n-            self.assert_equal(options['filename'], 'index.html')\n+            assert options['filename'] == 'index.html'\n             rv = flask.send_file('static/index.html', as_attachment=True)\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            self.assert_equal(value, 'attachment')\n-            self.assert_equal(options['filename'], 'index.html')\n+            assert value == 'attachment'\n+            assert options['filename'] == 'index.html'\n             rv.close()\n \n         with app.test_request_context():\n             rv = flask.send_file(StringIO('Test'), as_attachment=True,\n                                  attachment_filename='index.txt',\n                                  add_etags=False)\n-            self.assert_equal(rv.mimetype, 'text/plain')\n+            assert rv.mimetype == 'text/plain'\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            self.assert_equal(value, 'attachment')\n-            self.assert_equal(options['filename'], 'index.txt')\n+            assert value == 'attachment'\n+            assert options['filename'] == 'index.txt'\n             rv.close()\n \n     def test_static_file(self):\n@@ -375,24 +376,24 @@ class TestSendfile(TestFlask):\n             # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 12 * 60 * 60)\n+            assert cc.max_age == 12 * 60 * 60\n             rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 12 * 60 * 60)\n+            assert cc.max_age == 12 * 60 * 60\n             rv.close()\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n         with app.test_request_context():\n             # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 3600)\n+            assert cc.max_age == 3600\n             rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 3600)\n+            assert cc.max_age == 3600\n             rv.close()\n         class StaticFileApp(flask.Flask):\n             def get_send_file_max_age(self, filename):\n@@ -402,12 +403,12 @@ class TestSendfile(TestFlask):\n             # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 10)\n+            assert cc.max_age == 10\n             rv.close()\n             # Test again with direct use of send_file utility.\n             rv = flask.send_file('static/index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n-            self.assert_equal(cc.max_age, 10)\n+            assert cc.max_age == 10\n             rv.close()\n \n     def test_send_from_directory(self):\n@@ -418,7 +419,7 @@ class TestSendfile(TestFlask):\n         with app.test_request_context():\n             rv = flask.send_from_directory('static', 'hello.txt')\n             rv.direct_passthrough = False\n-            self.assert_equal(rv.data.strip(), b'Hello Subdomain')\n+            assert rv.data.strip() == b'Hello Subdomain'\n             rv.close()\n \n \n@@ -427,10 +428,10 @@ class TestLogging(TestFlask):\n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n         logger1 = app.logger\n-        self.assert_true(app.logger is logger1)\n-        self.assert_equal(logger1.name, __name__)\n+        assert app.logger is logger1\n+        assert logger1.name == __name__\n         app.logger_name = __name__ + '/test_logger_cache'\n-        self.assert_true(app.logger is not logger1)\n+        assert app.logger is not logger1\n \n     def test_debug_log(self):\n         app = flask.Flask(__name__)\n@@ -450,10 +451,10 @@ class TestLogging(TestFlask):\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n-                self.assert_in('WARNING in test_helpers [', out)\n-                self.assert_in(os.path.basename(__file__.rsplit('.', 1)[0] + '.py'), out)\n-                self.assert_in('the standard library is dead', out)\n-                self.assert_in('this is a debug statement', out)\n+                assert 'WARNING in test_helpers [' in out\n+                assert os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out\n+                assert 'the standard library is dead' in out\n+                assert 'this is a debug statement' in out\n \n             with catch_stderr() as err:\n                 try:\n@@ -461,14 +462,14 @@ class TestLogging(TestFlask):\n                 except ZeroDivisionError:\n                     pass\n                 else:\n-                    self.assert_true(False, 'debug log ate the exception')\n+                    assert False, 'debug log ate the exception'\n \n     def test_debug_log_override(self):\n         app = flask.Flask(__name__)\n         app.debug = True\n         app.logger_name = 'flask_tests/test_debug_log_override'\n         app.logger.level = 10\n-        self.assert_equal(app.logger.level, 10)\n+        assert app.logger.level == 10\n \n     def test_exception_logging(self):\n         out = StringIO()\n@@ -482,14 +483,14 @@ class TestLogging(TestFlask):\n             1 // 0\n \n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 500)\n-        self.assert_in(b'Internal Server Error', rv.data)\n+        assert rv.status_code == 500\n+        assert b'Internal Server Error' in rv.data\n \n         err = out.getvalue()\n-        self.assert_in('Exception on / [GET]', err)\n-        self.assert_in('Traceback (most recent call last):', err)\n-        self.assert_in('1 // 0', err)\n-        self.assert_in('ZeroDivisionError:', err)\n+        assert 'Exception on / [GET]' in err\n+        assert 'Traceback (most recent call last):' in err\n+        assert '1 // 0' in err\n+        assert 'ZeroDivisionError:' in err\n \n     def test_processor_exceptions(self):\n         app = flask.Flask(__name__)\n@@ -511,8 +512,8 @@ class TestLogging(TestFlask):\n             return 'Hello Server Error', 500\n         for trigger in 'before', 'after':\n             rv = app.test_client().get('/')\n-            self.assert_equal(rv.status_code, 500)\n-            self.assert_equal(rv.data, b'Hello Server Error')\n+            assert rv.status_code == 500\n+            assert rv.data == b'Hello Server Error'\n \n     def test_url_for_with_anchor(self):\n         app = flask.Flask(__name__)\n@@ -520,8 +521,7 @@ class TestLogging(TestFlask):\n         def index():\n             return '42'\n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('index', _anchor='x y'),\n-                              '/#x%20y')\n+            assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n \n     def test_url_for_with_scheme(self):\n         app = flask.Flask(__name__)\n@@ -529,10 +529,7 @@ class TestLogging(TestFlask):\n         def index():\n             return '42'\n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('index',\n-                                            _external=True,\n-                                            _scheme='https'),\n-                              'https://localhost/')\n+            assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n \n     def test_url_for_with_scheme_not_external(self):\n         app = flask.Flask(__name__)\n@@ -540,7 +537,7 @@ class TestLogging(TestFlask):\n         def index():\n             return '42'\n         with app.test_request_context():\n-            self.assert_raises(ValueError,\n+            pytest.raises(ValueError,\n                                flask.url_for,\n                                'index',\n                                _scheme='https')\n@@ -564,12 +561,9 @@ class TestLogging(TestFlask):\n                          view_func=myview)\n \n         with app.test_request_context():\n-            self.assert_equal(flask.url_for('myview', _method='GET'),\n-                              '/myview/')\n-            self.assert_equal(flask.url_for('myview', id=42, _method='GET'),\n-                              '/myview/42')\n-            self.assert_equal(flask.url_for('myview', _method='POST'),\n-                              '/myview/create')\n+            assert flask.url_for('myview', _method='GET') == '/myview/'\n+            assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n+            assert flask.url_for('myview', _method='POST') == '/myview/create'\n \n \n class TestNoImports(TestFlask):\n@@ -587,7 +581,7 @@ class TestNoImports(TestFlask):\n         try:\n             flask.Flask('importerror')\n         except NotImplementedError:\n-            self.fail('Flask(import_name) is importing import_name.')\n+            assert False, 'Flask(import_name) is importing import_name.'\n \n \n class TestStreaming(TestFlask):\n@@ -604,7 +598,7 @@ class TestStreaming(TestFlask):\n             return flask.Response(flask.stream_with_context(generate()))\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assert_equal(rv.data, b'Hello World!')\n+        assert rv.data == b'Hello World!'\n \n     def test_streaming_with_context_as_decorator(self):\n         app = flask.Flask(__name__)\n@@ -619,7 +613,7 @@ class TestStreaming(TestFlask):\n             return flask.Response(generate())\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assert_equal(rv.data, b'Hello World!')\n+        assert rv.data == b'Hello World!'\n \n     def test_streaming_with_context_and_custom_close(self):\n         app = flask.Flask(__name__)\n@@ -645,8 +639,8 @@ class TestStreaming(TestFlask):\n                 Wrapper(generate())))\n         c = app.test_client()\n         rv = c.get('/?name=World')\n-        self.assert_equal(rv.data, b'Hello World!')\n-        self.assert_equal(called, [42])\n+        assert rv.data == b'Hello World!'\n+        assert called == [42]\n \n \n def suite():\n\n@@ -69,8 +69,8 @@ class TestMemory(TestFlask):\n         def fire():\n             with app.test_client() as c:\n                 rv = c.get('/')\n-                self.assert_equal(rv.status_code, 200)\n-                self.assert_equal(rv.data, b'<h1>42</h1>')\n+                assert rv.status_code == 200\n+                assert rv.data == b'<h1>42</h1>'\n \n         # Trigger caches\n         fire()\n@@ -84,7 +84,7 @@ class TestMemory(TestFlask):\n \n     def test_safe_join_toplevel_pardir(self):\n         from flask.helpers import safe_join\n-        with self.assert_raises(NotFound):\n+        with pytest.raises(NotFound):\n             safe_join('/foo', '..')\n \n \n@@ -110,6 +110,6 @@ class TestException(TestFlask):\n \n         with app.test_client() as c:\n             rv = c.get('/')\n-            self.assert_equal(rv.headers['Location'], 'http://localhost/test')\n+            assert rv.headers['Location'] == 'http://localhost/test'\n             rv = c.get('/test')\n-            self.assert_equal(rv.data, b'42')\n+            assert rv.data == b'42'\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import flask\n import unittest\n try:\n@@ -29,9 +31,9 @@ class TestRequestContext(TestFlask):\n \n         ctx = app.test_request_context()\n         ctx.push()\n-        self.assert_equal(buffer, [])\n+        assert buffer == []\n         ctx.pop()\n-        self.assert_equal(buffer, [None])\n+        assert buffer == [None]\n \n     def test_teardown_with_previous_exception(self):\n         buffer = []\n@@ -46,8 +48,8 @@ class TestRequestContext(TestFlask):\n             pass\n \n         with app.test_request_context():\n-            self.assert_equal(buffer, [])\n-        self.assert_equal(buffer, [None])\n+            assert buffer == []\n+        assert buffer == [None]\n \n     def test_proper_test_request_context(self):\n         app = flask.Flask(__name__)\n@@ -64,37 +66,30 @@ class TestRequestContext(TestFlask):\n             return None\n \n         with app.test_request_context('/'):\n-            self.assert_equal(flask.url_for('index', _external=True), 'http://localhost.localdomain:5000/')\n+            assert flask.url_for('index', _external=True) == \\\n+                'http://localhost.localdomain:5000/'\n \n         with app.test_request_context('/'):\n-            self.assert_equal(flask.url_for('sub', _external=True), 'http://foo.localhost.localdomain:5000/')\n+            assert flask.url_for('sub', _external=True) == \\\n+                'http://foo.localhost.localdomain:5000/'\n \n         try:\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n-        except Exception as e:\n-            self.assert_true(isinstance(e, ValueError))\n-            self.assert_equal(str(e), \"the server name provided \" +\n-                    \"('localhost.localdomain:5000') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost')\")\n+        except ValueError as e:\n+            assert str(e) == (\n+                \"the server name provided \"\n+                \"('localhost.localdomain:5000') does not match the \"\n+                \"server name from the WSGI environment ('localhost')\"\n+            )\n \n-        try:\n         app.config.update(SERVER_NAME='localhost')\n         with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n             pass\n-        except ValueError as e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n-        try:\n         app.config.update(SERVER_NAME='localhost:80')\n         with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n             pass\n-        except ValueError as e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n \n     def test_context_binding(self):\n         app = flask.Flask(__name__)\n@@ -106,20 +101,20 @@ class TestRequestContext(TestFlask):\n             return flask.request.url\n \n         with app.test_request_context('/?name=World'):\n-            self.assert_equal(index(), 'Hello World!')\n+            assert index() == 'Hello World!'\n         with app.test_request_context('/meh'):\n-            self.assert_equal(meh(), 'http://localhost/meh')\n-        self.assert_true(flask._request_ctx_stack.top is None)\n+            assert meh() == 'http://localhost/meh'\n+        assert flask._request_ctx_stack.top is None\n \n     def test_context_test(self):\n         app = flask.Flask(__name__)\n-        self.assert_false(flask.request)\n-        self.assert_false(flask.has_request_context())\n+        assert not flask.request\n+        assert not flask.has_request_context()\n         ctx = app.test_request_context()\n         ctx.push()\n         try:\n-            self.assert_true(flask.request)\n-            self.assert_true(flask.has_request_context())\n+            assert flask.request\n+            assert flask.has_request_context()\n         finally:\n             ctx.pop()\n \n@@ -131,14 +126,14 @@ class TestRequestContext(TestFlask):\n \n         ctx = app.test_request_context('/?name=World')\n         ctx.push()\n-        self.assert_equal(index(), 'Hello World!')\n+        assert index() == 'Hello World!'\n         ctx.pop()\n         try:\n             index()\n         except RuntimeError:\n             pass\n         else:\n-            self.assert_true(0, 'expected runtime error')\n+            assert 0, 'expected runtime error'\n \n     def test_greenlet_context_copying(self):\n         app = flask.Flask(__name__)\n@@ -148,23 +143,23 @@ class TestRequestContext(TestFlask):\n         def index():\n             reqctx = flask._request_ctx_stack.top.copy()\n             def g():\n-                self.assert_false(flask.request)\n-                self.assert_false(flask.current_app)\n+                assert not flask.request\n+                assert not flask.current_app\n                 with reqctx:\n-                    self.assert_true(flask.request)\n-                    self.assert_equal(flask.current_app, app)\n-                    self.assert_equal(flask.request.path, '/')\n-                    self.assert_equal(flask.request.args['foo'], 'bar')\n-                self.assert_false(flask.request)\n+                    assert flask.request\n+                    assert flask.current_app == app\n+                    assert flask.request.path == '/'\n+                    assert flask.request.args['foo'] == 'bar'\n+                assert not flask.request\n                 return 42\n             greenlets.append(greenlet(g))\n             return 'Hello World!'\n \n         rv = app.test_client().get('/?foo=bar')\n-        self.assert_equal(rv.data, b'Hello World!')\n+        assert rv.data == b'Hello World!'\n \n         result = greenlets[0].run()\n-        self.assert_equal(result, 42)\n+        assert result == 42\n \n     def test_greenlet_context_copying_api(self):\n         app = flask.Flask(__name__)\n@@ -175,19 +170,19 @@ class TestRequestContext(TestFlask):\n             reqctx = flask._request_ctx_stack.top.copy()\n             @flask.copy_current_request_context\n             def g():\n-                self.assert_true(flask.request)\n-                self.assert_equal(flask.current_app, app)\n-                self.assert_equal(flask.request.path, '/')\n-                self.assert_equal(flask.request.args['foo'], 'bar')\n+                assert flask.request\n+                assert flask.current_app == app\n+                assert flask.request.path == '/'\n+                assert flask.request.args['foo'] == 'bar'\n                 return 42\n             greenlets.append(greenlet(g))\n             return 'Hello World!'\n \n         rv = app.test_client().get('/?foo=bar')\n-        self.assert_equal(rv.data, b'Hello World!')\n+        assert rv.data == b'Hello World!'\n \n         result = greenlets[0].run()\n-        self.assert_equal(result, 42)\n+        assert result == 42\n \n     # Disable test if we don't have greenlets available\n     if greenlet is None:\n\n@@ -42,10 +42,10 @@ class TestSignals(TestFlask):\n         flask.template_rendered.connect(record, app)\n         try:\n             app.test_client().get('/')\n-            self.assert_equal(len(recorded), 1)\n+            assert len(recorded) == 1\n             template, context = recorded[0]\n-            self.assert_equal(template.name, 'simple_template.html')\n-            self.assert_equal(context['whiskey'], 42)\n+            assert template.name == 'simple_template.html'\n+            assert context['whiskey'] == 42\n         finally:\n             flask.template_rendered.disconnect(record, app)\n \n@@ -57,7 +57,7 @@ class TestSignals(TestFlask):\n             calls.append('before-signal')\n \n         def after_request_signal(sender, response):\n-            self.assert_equal(response.data, b'stuff')\n+            assert response.data == b'stuff'\n             calls.append('after-signal')\n \n         @app.before_request\n@@ -80,11 +80,10 @@ class TestSignals(TestFlask):\n \n         try:\n             rv = app.test_client().get('/')\n-            self.assert_equal(rv.data, b'stuff')\n+            assert rv.data == b'stuff'\n \n-            self.assert_equal(calls, ['before-signal', 'before-handler',\n-                                      'handler', 'after-handler',\n-                                      'after-signal'])\n+            assert calls == ['before-signal', 'before-handler', 'handler',\n+                             'after-handler', 'after-signal']\n         finally:\n             flask.request_started.disconnect(before_request_signal, app)\n             flask.request_finished.disconnect(after_request_signal, app)\n@@ -102,9 +101,9 @@ class TestSignals(TestFlask):\n \n         flask.got_request_exception.connect(record, app)\n         try:\n-            self.assert_equal(app.test_client().get('/').status_code, 500)\n-            self.assert_equal(len(recorded), 1)\n-            self.assert_true(isinstance(recorded[0], ZeroDivisionError))\n+            assert app.test_client().get('/').status_code == 500\n+            assert len(recorded) == 1\n+            assert isinstance(recorded[0], ZeroDivisionError)\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n \n@@ -127,9 +126,9 @@ class TestSignals(TestFlask):\n         try:\n             with app.test_client() as c:\n                 rv = c.get('/')\n-                self.assert_equal(rv.data, b'Hello')\n-                self.assert_equal(recorded, ['push'])\n-            self.assert_equal(recorded, ['push', 'pop'])\n+                assert rv.data == b'Hello'\n+                assert recorded == ['push']\n+            assert recorded == ['push', 'pop']\n         finally:\n             flask.appcontext_pushed.disconnect(record_push, app)\n             flask.appcontext_popped.disconnect(record_pop, app)\n@@ -153,9 +152,9 @@ class TestSignals(TestFlask):\n             client = app.test_client()\n             with client.session_transaction():\n                 client.get('/')\n-                self.assert_equal(len(recorded), 1)\n+                assert len(recorded) == 1\n                 message, category = recorded[0]\n-                self.assert_equal(message, 'This is a flash message')\n-                self.assert_equal(category, 'notice')\n+                assert message == 'This is a flash message'\n+                assert category == 'notice'\n         finally:\n             flask.message_flashed.disconnect(record, app)\n\n@@ -33,11 +33,11 @@ class TestFlaskSubclassing(TestFlask):\n             1 // 0\n \n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.status_code, 500)\n-        self.assert_in(b'Internal Server Error', rv.data)\n+        assert rv.status_code == 500\n+        assert b'Internal Server Error' in rv.data\n \n         err = out.getvalue()\n-        self.assert_equal(err, '')\n+        assert err == ''\n \n \n def suite():\n\n@@ -28,7 +28,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('context_template.html', value=23)\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'<p>23|42')\n+        assert rv.data == b'<p>23|42'\n \n     def test_original_win(self):\n         app = flask.Flask(__name__)\n@@ -36,7 +36,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template_string('{{ config }}', config=42)\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'42')\n+        assert rv.data == b'42'\n \n     def test_request_less_rendering(self):\n         app = flask.Flask(__name__)\n@@ -48,7 +48,7 @@ class TestTemplating(TestFlask):\n         with app.app_context():\n             rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} '\n                                               '{{ foo }}')\n-            self.assert_equal(rv, 'Hello Special World 42')\n+            assert rv == 'Hello Special World 42'\n \n     def test_standard_context(self):\n         app = flask.Flask(__name__)\n@@ -64,7 +64,7 @@ class TestTemplating(TestFlask):\n                 {{ session.test }}\n             ''')\n         rv = app.test_client().get('/?foo=42')\n-        self.assert_equal(rv.data.split(), [b'42', b'23', b'False', b'aha'])\n+        assert rv.data.split() == [b'42', b'23', b'False', b'aha']\n \n     def test_escaping(self):\n         text = '<p>Hello World!'\n@@ -74,64 +74,64 @@ class TestTemplating(TestFlask):\n             return flask.render_template('escaping_template.html', text=text,\n                                          html=flask.Markup(text))\n         lines = app.test_client().get('/').data.splitlines()\n-        self.assert_equal(lines, [\n+        assert lines == [\n             b'&lt;p&gt;Hello World!',\n             b'<p>Hello World!',\n             b'<p>Hello World!',\n             b'<p>Hello World!',\n             b'&lt;p&gt;Hello World!',\n             b'<p>Hello World!'\n-        ])\n+        ]\n \n     def test_no_escaping(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n-            self.assert_equal(flask.render_template_string('{{ foo }}',\n-                              foo='<test>'), '<test>')\n-            self.assert_equal(flask.render_template('mail.txt', foo='<test>'),\n-                              '<test> Mail')\n+            assert flask.render_template_string(\n+                '{{ foo }}', foo='<test>') == '<test>'\n+            assert flask.render_template('mail.txt', foo='<test>') == \\\n+                '<test> Mail'\n \n     def test_macros(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             macro = flask.get_template_attribute('_macro.html', 'hello')\n-            self.assert_equal(macro('World'), 'Hello World!')\n+            assert macro('World') == 'Hello World!'\n \n     def test_template_filter(self):\n         app = flask.Flask(__name__)\n         @app.template_filter()\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+        assert 'my_reverse' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n     def test_add_template_filter(self):\n         app = flask.Flask(__name__)\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse)\n-        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+        assert 'my_reverse' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n     def test_template_filter_with_name(self):\n         app = flask.Flask(__name__)\n         @app.template_filter('strrev')\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_in('strrev', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+        assert 'strrev' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n     def test_add_template_filter_with_name(self):\n         app = flask.Flask(__name__)\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse, 'strrev')\n-        self.assert_in('strrev', app.jinja_env.filters.keys())\n-        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n-        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+        assert 'strrev' in app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n     def test_template_filter_with_template(self):\n         app = flask.Flask(__name__)\n@@ -142,7 +142,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_add_template_filter_with_template(self):\n         app = flask.Flask(__name__)\n@@ -153,7 +153,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_template_filter_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -164,7 +164,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_add_template_filter_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -175,43 +175,43 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'dcba')\n+        assert rv.data == b'dcba'\n \n     def test_template_test(self):\n         app = flask.Flask(__name__)\n         @app.template_test()\n         def boolean(value):\n             return isinstance(value, bool)\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_add_template_test(self):\n         app = flask.Flask(__name__)\n         def boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(boolean)\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_template_test_with_name(self):\n         app = flask.Flask(__name__)\n         @app.template_test('boolean')\n         def is_boolean(value):\n             return isinstance(value, bool)\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == is_boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_add_template_test_with_name(self):\n         app = flask.Flask(__name__)\n         def is_boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(is_boolean, 'boolean')\n-        self.assert_in('boolean', app.jinja_env.tests.keys())\n-        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_true(app.jinja_env.tests['boolean'](False))\n+        assert 'boolean' in app.jinja_env.tests.keys()\n+        assert app.jinja_env.tests['boolean'] == is_boolean\n+        assert app.jinja_env.tests['boolean'](False)\n \n     def test_template_test_with_template(self):\n         app = flask.Flask(__name__)\n@@ -222,7 +222,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_add_template_test_with_template(self):\n         app = flask.Flask(__name__)\n@@ -233,7 +233,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -244,7 +244,7 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_add_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -255,19 +255,19 @@ class TestTemplating(TestFlask):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_in(b'Success!', rv.data)\n+        assert b'Success!' in rv.data\n \n     def test_add_template_global(self):\n         app = flask.Flask(__name__)\n         @app.template_global()\n         def get_stuff():\n             return 42\n-        self.assert_in('get_stuff', app.jinja_env.globals.keys())\n-        self.assert_equal(app.jinja_env.globals['get_stuff'], get_stuff)\n-        self.assert_true(app.jinja_env.globals['get_stuff'](), 42)\n+        assert 'get_stuff' in app.jinja_env.globals.keys()\n+        assert app.jinja_env.globals['get_stuff'] == get_stuff\n+        assert app.jinja_env.globals['get_stuff'](), 42\n         with app.app_context():\n             rv = flask.render_template_string('{{ get_stuff() }}')\n-            self.assert_equal(rv, '42')\n+            assert rv == '42'\n \n     def test_custom_template_loader(self):\n         class MyFlask(flask.Flask):\n@@ -280,7 +280,7 @@ class TestTemplating(TestFlask):\n             return flask.render_template('index.html')\n         c = app.test_client()\n         rv = c.get('/')\n-        self.assert_equal(rv.data, b'Hello Custom World!')\n+        assert rv.data == b'Hello Custom World!'\n \n     def test_iterable_loader(self):\n         app = flask.Flask(__name__)\n@@ -296,15 +296,15 @@ class TestTemplating(TestFlask):\n                 value=23)\n \n         rv = app.test_client().get('/')\n-        self.assert_equal(rv.data, b'<h1>Jameson</h1>')\n+        assert rv.data == b'<h1>Jameson</h1>'\n \n     def test_templates_auto_reload(self):\n         app = flask.Flask(__name__)\n-        self.assert_true(app.config['TEMPLATES_AUTO_RELOAD'])\n-        self.assert_true(app.jinja_env.auto_reload)\n+        assert app.config['TEMPLATES_AUTO_RELOAD']\n+        assert app.jinja_env.auto_reload\n         app = flask.Flask(__name__)\n         app.config['TEMPLATES_AUTO_RELOAD'] = False\n-        self.assert_false(app.jinja_env.auto_reload)\n+        assert not app.jinja_env.auto_reload\n \n     def test_template_loader_debugging(self):\n         from blueprintapp import app\n@@ -314,17 +314,15 @@ class TestTemplating(TestFlask):\n             def handle(x, record):\n                 called.append(True)\n                 text = str(record.msg)\n-                self.assert_('1: trying loader of application '\n-                             '\"blueprintapp\"' in text)\n-                self.assert_('2: trying loader of blueprint \"admin\" '\n-                             '(blueprintapp.apps.admin)' in text)\n-                self.assert_('trying loader of blueprint \"frontend\" '\n-                             '(blueprintapp.apps.frontend)' in text)\n-                self.assert_('Error: the template could not be found' in text)\n-                self.assert_('looked up from an endpoint that belongs to '\n-                             'the blueprint \"frontend\"' in text)\n-                self.assert_(\n-                    'See http://flask.pocoo.org/docs/blueprints/#templates' in text)\n+                assert '1: trying loader of application \"blueprintapp\"' in text\n+                assert ('2: trying loader of blueprint \"admin\" '\n+                        '(blueprintapp.apps.admin)') in text\n+                assert ('trying loader of blueprint \"frontend\" '\n+                        '(blueprintapp.apps.frontend)') in text\n+                assert 'Error: the template could not be found' in text\n+                assert ('looked up from an endpoint that belongs to '\n+                        'the blueprint \"frontend\"') in text\n+                assert 'See http://flask.pocoo.org/docs/blueprints/#templates' in text\n \n         with app.test_client() as c:\n             try:\n@@ -336,14 +334,14 @@ class TestTemplating(TestFlask):\n                 try:\n                     c.get('/missing')\n                 except TemplateNotFound as e:\n-                    self.assert_('missing_template.html' in str(e))\n+                    assert 'missing_template.html' in str(e)\n                 else:\n                     self.fail('Expected template not found exception.')\n             finally:\n                 app.logger.handlers[:] = old_handlers\n                 app.config['EXPLAIN_TEMPLATE_LOADING'] = old_load_setting\n \n-        self.assert_equal(len(called), 1)\n+        assert len(called) == 1\n \n \n def suite():\n\n@@ -28,10 +28,10 @@ class TestTestTools(TestFlask):\n             return flask.request.url\n \n         ctx = app.test_request_context()\n-        self.assert_equal(ctx.request.url, 'http://example.com:1234/foo/')\n+        assert ctx.request.url == 'http://example.com:1234/foo/'\n         with app.test_client() as c:\n             rv = c.get('/')\n-            self.assert_equal(rv.data, b'http://example.com:1234/foo/')\n+            assert rv.data == b'http://example.com:1234/foo/'\n \n     def test_environ_defaults(self):\n         app = flask.Flask(__name__)\n@@ -41,10 +41,10 @@ class TestTestTools(TestFlask):\n             return flask.request.url\n \n         ctx = app.test_request_context()\n-        self.assert_equal(ctx.request.url, 'http://localhost/')\n+        assert ctx.request.url == 'http://localhost/'\n         with app.test_client() as c:\n             rv = c.get('/')\n-            self.assert_equal(rv.data, b'http://localhost/')\n+            assert rv.data == b'http://localhost/'\n \n     def test_redirect_keep_session(self):\n         app = flask.Flask(__name__)\n@@ -89,14 +89,14 @@ class TestTestTools(TestFlask):\n \n         with app.test_client() as c:\n             with c.session_transaction() as sess:\n-                self.assert_equal(len(sess), 0)\n+                assert len(sess) == 0\n                 sess['foo'] = [42]\n-                self.assert_equal(len(sess), 1)\n+                assert len(sess) == 1\n             rv = c.get('/')\n-            self.assert_equal(rv.data, b'[42]')\n+            assert rv.data == b'[42]'\n             with c.session_transaction() as sess:\n-                self.assert_equal(len(sess), 1)\n-                self.assert_equal(sess['foo'], [42])\n+                assert len(sess) == 1\n+                assert sess['foo'] == [42]\n \n     def test_session_transactions_no_null_sessions(self):\n         app = flask.Flask(__name__)\n@@ -107,9 +107,9 @@ class TestTestTools(TestFlask):\n                 with c.session_transaction() as sess:\n                     pass\n             except RuntimeError as e:\n-                self.assert_in('Session backend did not open a session', str(e))\n+                assert 'Session backend did not open a session' in str(e)\n             else:\n-                self.fail('Expected runtime error')\n+                assert False, 'Expected runtime error'\n \n     def test_session_transactions_keep_context(self):\n         app = flask.Flask(__name__)\n@@ -119,9 +119,9 @@ class TestTestTools(TestFlask):\n         with app.test_client() as c:\n             rv = c.get('/')\n             req = flask.request._get_current_object()\n-            self.assert_true(req is not None)\n+            assert req is not None\n             with c.session_transaction():\n-                self.assert_true(req is flask.request._get_current_object())\n+                assert req is flask.request._get_current_object()\n \n     def test_session_transaction_needs_cookies(self):\n         app = flask.Flask(__name__)\n@@ -131,9 +131,9 @@ class TestTestTools(TestFlask):\n             with c.session_transaction() as s:\n                 pass\n         except RuntimeError as e:\n-            self.assert_in('cookies', str(e))\n+            assert 'cookies' in str(e)\n         else:\n-            self.fail('Expected runtime error')\n+            assert False, 'Expected runtime error'\n \n     def test_test_client_context_binding(self):\n         app = flask.Flask(__name__)\n@@ -149,14 +149,14 @@ class TestTestTools(TestFlask):\n \n         with app.test_client() as c:\n             resp = c.get('/')\n-            self.assert_equal(flask.g.value, 42)\n-            self.assert_equal(resp.data, b'Hello World!')\n-            self.assert_equal(resp.status_code, 200)\n+            assert flask.g.value == 42\n+            assert resp.data == b'Hello World!'\n+            assert resp.status_code == 200\n \n             resp = c.get('/other')\n-            self.assert_false(hasattr(flask.g, 'value'))\n-            self.assert_in(b'Internal Server Error', resp.data)\n-            self.assert_equal(resp.status_code, 500)\n+            assert not hasattr(flask.g, 'value')\n+            assert b'Internal Server Error' in resp.data\n+            assert resp.status_code == 500\n             flask.g.value = 23\n \n         try:\n@@ -171,10 +171,10 @@ class TestTestTools(TestFlask):\n         c = app.test_client()\n \n         with c:\n-            self.assert_equal(c.get('/').status_code, 404)\n+            assert c.get('/').status_code == 404\n \n         with c:\n-            self.assert_equal(c.get('/').status_code, 404)\n+            assert c.get('/').status_code == 404\n \n     def test_test_client_calls_teardown_handlers(self):\n         app = flask.Flask(__name__)\n@@ -184,19 +184,19 @@ class TestTestTools(TestFlask):\n             called.append(error)\n \n         with app.test_client() as c:\n-            self.assert_equal(called, [])\n+            assert called == []\n             c.get('/')\n-            self.assert_equal(called, [])\n-        self.assert_equal(called, [None])\n+            assert called == []\n+        assert called == [None]\n \n         del called[:]\n         with app.test_client() as c:\n-            self.assert_equal(called, [])\n+            assert called == []\n             c.get('/')\n-            self.assert_equal(called, [])\n+            assert called == []\n             c.get('/')\n-            self.assert_equal(called, [None])\n-        self.assert_equal(called, [None, None])\n+            assert called == [None]\n+        assert called == [None, None]\n \n     def test_full_url_request(self):\n         app = flask.Flask(__name__)\n@@ -208,9 +208,9 @@ class TestTestTools(TestFlask):\n \n         with app.test_client() as c:\n             rv = c.post('http://domain.com/action?vodka=42', data={'gin': 43})\n-            self.assert_equal(rv.status_code, 200)\n-            self.assert_true('gin' in flask.request.form)\n-            self.assert_true('vodka' in flask.request.args)\n+            assert rv.status_code == 200\n+            assert 'gin' in flask.request.form\n+            assert 'vodka' in flask.request.args\n \n \n class TestSubdomain(TestFlask):\n@@ -241,8 +241,8 @@ class TestSubdomain(TestFlask):\n         url = flask.url_for('view', company_id='xxx')\n         response = client.get(url)\n \n-        self.assert_equal(200, response.status_code)\n-        self.assert_equal(b'xxx', response.data)\n+        assert 200 == response.status_code\n+        assert b'xxx' == response.data\n \n \n     def test_nosubdomain(self, app, client):\n@@ -253,5 +253,5 @@ class TestSubdomain(TestFlask):\n         url = flask.url_for('view', company_id='xxx')\n         response = client.get(url)\n \n-        self.assert_equal(200, response.status_code)\n-        self.assert_equal(b'xxx', response.data)\n+        assert 200 == response.status_code\n+        assert b'xxx' == response.data\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import flask\n import flask.views\n import unittest\n@@ -20,11 +22,11 @@ class TestView(TestFlask):\n     def common_test(self, app):\n         c = app.test_client()\n \n-        self.assert_equal(c.get('/').data, b'GET')\n-        self.assert_equal(c.post('/').data, b'POST')\n-        self.assert_equal(c.put('/').status_code, 405)\n+        assert c.get('/').data == b'GET'\n+        assert c.post('/').data == b'POST'\n+        assert c.put('/').status_code == 405\n         meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n-        self.assert_equal(sorted(meths), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+        assert sorted(meths) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_basic_view(self):\n         app = flask.Flask(__name__)\n@@ -87,7 +89,7 @@ class TestView(TestFlask):\n         c = app.test_client()\n \n         meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n-        self.assert_equal(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n+        assert sorted(meths) == ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_view_decorators(self):\n         app = flask.Flask(__name__)\n@@ -107,8 +109,8 @@ class TestView(TestFlask):\n         app.add_url_rule('/', view_func=Index.as_view('index'))\n         c = app.test_client()\n         rv = c.get('/')\n-        self.assert_equal(rv.headers['X-Parachute'], 'awesome')\n-        self.assert_equal(rv.data, b'Awesome')\n+        assert rv.headers['X-Parachute'] == 'awesome'\n+        assert rv.data == b'Awesome'\n \n     def test_implicit_head(self):\n         app = flask.Flask(__name__)\n@@ -122,11 +124,11 @@ class TestView(TestFlask):\n         app.add_url_rule('/', view_func=Index.as_view('index'))\n         c = app.test_client()\n         rv = c.get('/')\n-        self.assert_equal(rv.data, b'Blub')\n-        self.assert_equal(rv.headers['X-Method'], 'GET')\n+        assert rv.data == b'Blub'\n+        assert rv.headers['X-Method'] == 'GET'\n         rv = c.head('/')\n-        self.assert_equal(rv.data, b'')\n-        self.assert_equal(rv.headers['X-Method'], 'HEAD')\n+        assert rv.data == b''\n+        assert rv.headers['X-Method'] == 'HEAD'\n \n     def test_explicit_head(self):\n         app = flask.Flask(__name__)\n@@ -140,10 +142,10 @@ class TestView(TestFlask):\n         app.add_url_rule('/', view_func=Index.as_view('index'))\n         c = app.test_client()\n         rv = c.get('/')\n-        self.assert_equal(rv.data, b'GET')\n+        assert rv.data == b'GET'\n         rv = c.head('/')\n-        self.assert_equal(rv.data, b'')\n-        self.assert_equal(rv.headers['X-Method'], 'HEAD')\n+        assert rv.data == b''\n+        assert rv.headers['X-Method'] == 'HEAD'\n \n     def test_endpoint_override(self):\n         app = flask.Flask(__name__)\n@@ -156,7 +158,7 @@ class TestView(TestFlask):\n \n         app.add_url_rule('/', view_func=Index.as_view('index'))\n \n-        with self.assert_raises(AssertionError):\n+        with pytest.raises(AssertionError):\n             app.add_url_rule('/', view_func=Index.as_view('index'))\n \n         # But these tests should still pass. We just log a warning.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
