{"custom_id": "keras#b63f572cdb0c7b6b498607de3084ca0b847aaa9f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 44 | Churn Cumulative: 1815 | Contributors (this commit): 9 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -146,6 +146,7 @@ class Bidirectional(Wrapper):\n             )\n         else:\n             self.backward_layer = backward_layer\n+\n             # Keep the custom backward layer config, so that we can save it\n             # later. The layer's name might be updated below with prefix\n             # 'backward_', and we want to preserve the original config.\n@@ -175,7 +176,7 @@ class Bidirectional(Wrapper):\n         self.return_sequences = layer.return_sequences\n         self.return_state = layer.return_state\n         self.supports_masking = True\n-        self._trainable = kwargs.get('trainable', True)\n+        self._trainable = kwargs.get(\"trainable\", layer.trainable)\n         self._num_constants = 0\n         self.input_spec = layer.input_spec\n \n\n@@ -1022,17 +1022,44 @@ class BidirectionalTest(tf.test.TestCase, parameterized.TestCase):\n \n     def test_trainable_parameter_argument(self):\n         inp = keras.layers.Input([None, 3])\n-        rnn = keras.layers.SimpleRNN(units=3)\n-        bid = keras.layers.Bidirectional(rnn)\n+\n+        def test(fwd, bwd, **kwargs):\n+            bid = keras.layers.Bidirectional(fwd, backward_layer=bwd, **kwargs)\n+\n             model = keras.Model(inp, bid(inp))\n \n-        clone_trainable = keras.models.clone_model(model)\n-        assert clone_trainable.get_config() == model.get_config()\n+            clone = keras.models.clone_model(model)\n+            self.assertEqual(clone.get_config(), model.get_config())\n \n-        bid.trainable = False\n+        # test fetching trainable from `layer`\n+        fwd = keras.layers.SimpleRNN(units=3)\n+        bwd = keras.layers.SimpleRNN(units=3, go_backwards=True)\n \n-        clone_untrainable = keras.models.clone_model(model)\n-        assert clone_untrainable.get_config() == model.get_config()\n+        fwd.trainable = True\n+        test(fwd, None)\n+\n+        fwd.trainable = False\n+        test(fwd, None)\n+\n+        fwd.trainable = True\n+        bwd.trainable = False\n+        test(fwd, bwd)\n+\n+        fwd.trainable = False\n+        bwd.trainable = True\n+        test(fwd, bwd)\n+\n+        fwd.trainable = True\n+        bwd.trainable = True\n+        test(fwd, bwd)\n+\n+        fwd.trainable = False\n+        bwd.trainable = False\n+        test(fwd, bwd)\n+\n+        # test fetching trainable from `kwargs`\n+        test(fwd, None, trainable=True)\n+        test(fwd, None, trainable=False)\n \n \n def _to_list(ls):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#41fe49bfaaace3bc482bac7a2598c5db8d4385c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 14 | Files Changed: 8 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 33 | Churn Cumulative: 10089 | Contributors (this commit): 15 | Commits (past 90d): 19 | Contributors (cumulative): 64 | DMM Complexity: None\n\nDIFF:\n@@ -489,7 +489,7 @@ class ConvLSTM(ConvRNN):\n             bias_constraint=bias_constraint,\n             dropout=dropout,\n             recurrent_dropout=recurrent_dropout,\n-            name='cell',\n+            name=\"lstm_cell\",\n             dtype=kwargs.get(\"dtype\"),\n         )\n         super().__init__(\n\n@@ -583,7 +583,7 @@ class GRU(DropoutRNNCellMixin, RNN, base_layer.BaseRandomLayer):\n             reset_after=reset_after,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n-            name='cell',\n+            name=\"gru_cell\",\n             **cell_kwargs,\n         )\n         super().__init__(\n\n@@ -987,9 +987,11 @@ class GRULayerTest(test_combinations.TestCase):\n         rnn = keras.layers.GRU(units=3)\n         model = keras.Model(inp, rnn(inp))\n         clone = keras.models.clone_model(model)\n-        assert len(model.weights) == len(clone.weights)\n-        for a, b in zip(model.weights, clone.weights):\n-            assert a.name == b.name\n+\n+        model_names = [x.name for x in model.weights]\n+        clone_names = [x.name for x in clone.weights]\n+        self.assertEqual(model_names, clone_names)\n+\n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n class GRULayerGenericTest(tf.test.TestCase):\n\n@@ -556,7 +556,7 @@ class LSTM(DropoutRNNCellMixin, RNN, base_layer.BaseRandomLayer):\n             implementation=implementation,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n-            name='cell',\n+            name=\"lstm_cell\",\n             **cell_kwargs,\n         )\n         super().__init__(\n\n@@ -1418,9 +1418,10 @@ class LSTMLayerTest(test_combinations.TestCase):\n         rnn = keras.layers.LSTM(units=3)\n         model = keras.Model(inp, rnn(inp))\n         clone = keras.models.clone_model(model)\n-        assert len(model.weights) == len(clone.weights)\n-        for a, b in zip(model.weights, clone.weights):\n-            assert a.name == b.name\n+\n+        model_names = [x.name for x in model.weights]\n+        clone_names = [x.name for x in clone.weights]\n+        self.assertEqual(model_names, clone_names)\n \n \n if __name__ == \"__main__\":\n\n@@ -269,7 +269,7 @@ class LSTM(RNN):\n             implementation=implementation,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n-            name='cell',\n+            name=\"lstm_cell\",\n             **cell_kwargs\n         )\n         super().__init__(\n\n@@ -392,7 +392,7 @@ class SimpleRNN(RNN):\n             recurrent_dropout=recurrent_dropout,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n-            name='cell',\n+            name=\"simple_rnn_cell\",\n             **cell_kwargs,\n         )\n         super().__init__(\n\n@@ -243,9 +243,11 @@ class SimpleRNNLayerTest(tf.test.TestCase, parameterized.TestCase):\n         rnn = keras.layers.SimpleRNN(units=3)\n         model = keras.Model(inp, rnn(inp))\n         clone = keras.models.clone_model(model)\n-        assert len(model.weights) == len(clone.weights)\n-        for a, b in zip(model.weights, clone.weights):\n-            assert a.name == b.name\n+\n+        model_names = [x.name for x in model.weights]\n+        clone_names = [x.name for x in clone.weights]\n+        self.assertEqual(model_names, clone_names)\n+\n \n if __name__ == \"__main__\":\n     tf.test.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c645d7a7482f064b77c63aeed2b3b4784a5d6ab6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9551 | Contributors (this commit): 116 | Commits (past 90d): 10 | Contributors (cumulative): 116 | DMM Complexity: None\n\nDIFF:\n@@ -1897,7 +1897,7 @@ class BackupAndRestore(Callback):\n             self._batches_count += 1\n             if self._batches_count >= self.save_freq:\n                 self._batches_count = 0\n-                self._back_up(epoch=self._current_epoch, batch=batch)\n+                self._backup(epoch=self._current_epoch, batch=batch)\n \n     def _implements_train_batch_hooks(self):\n         return self.save_freq != \"epoch\"\n@@ -1918,9 +1918,9 @@ class BackupAndRestore(Callback):\n     def on_epoch_end(self, epoch, logs=None):\n         # Back up the model and current epoch for possible future recovery.\n         if self.save_freq == \"epoch\":\n-            self._back_up(epoch=epoch)\n+            self._backup(epoch=epoch)\n \n-    def _back_up(self, epoch, batch=0):\n+    def _backup(self, epoch, batch=0):\n         self._training_state.back_up(epoch=epoch, batch=batch)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#77ad9ae4adc563e803210c578f0fbb44560cdce1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 102 | Lines Deleted: 24 | Files Changed: 3 | Hunks: 14 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 126 | Churn Cumulative: 1446 | Contributors (this commit): 33 | Commits (past 90d): 14 | Contributors (cumulative): 46 | DMM Complexity: 1.0\n\nDIFF:\n@@ -58,6 +58,7 @@ from keras.utils.layer_utils import get_source_inputs\n # Deprecated\n from keras.utils.np_utils import normalize\n from keras.utils.np_utils import to_categorical\n+from keras.utils.np_utils import to_ordinal\n from keras.utils.data_utils import pad_sequences\n \n # Evaluation related\n\n@@ -34,19 +34,17 @@ def to_categorical(y, num_classes=None, dtype=\"float32\"):\n         dtype: The data type expected by the input. Default: `'float32'`.\n \n     Returns:\n-        A binary matrix representation of the input. The class axis is placed\n-        last.\n+        A binary matrix representation of the input as a NumPy array. The class\n+        axis is placed last.\n \n     Example:\n \n     >>> a = tf.keras.utils.to_categorical([0, 1, 2, 3], num_classes=4)\n-    >>> a = tf.constant(a, shape=[4, 4])\n     >>> print(a)\n-    tf.Tensor(\n     [[1. 0. 0. 0.]\n      [0. 1. 0. 0.]\n      [0. 0. 1. 0.]\n-       [0. 0. 0. 1.]], shape=(4, 4), dtype=float32)\n+     [0. 0. 0. 1.]]\n \n     >>> b = tf.constant([.9, .04, .03, .03,\n     ...                  .3, .45, .15, .13,\n@@ -63,9 +61,12 @@ def to_categorical(y, num_classes=None, dtype=\"float32\"):\n     \"\"\"\n     y = np.array(y, dtype=\"int\")\n     input_shape = y.shape\n+\n+    # Shrink the last dimension if the shape is (..., 1).\n     if input_shape and input_shape[-1] == 1 and len(input_shape) > 1:\n         input_shape = tuple(input_shape[:-1])\n-    y = y.ravel()\n+\n+    y = y.reshape(-1)\n     if not num_classes:\n         num_classes = np.max(y) + 1\n     n = y.shape[0]\n@@ -76,6 +77,51 @@ def to_categorical(y, num_classes=None, dtype=\"float32\"):\n     return categorical\n \n \n+@keras_export(\"keras.utils.to_ordinal\")\n+def to_ordinal(y, num_classes=None, dtype=\"float32\"):\n+    \"\"\"Converts a class vector (integers) to an ordinal class matrix for ordinal\n+        regression/classification.\n+\n+    Args:\n+        y: Array-like with class values to be converted into a matrix\n+            (integers from 0 to `num_classes - 1`).\n+        num_classes: Total number of classes. If `None`, this would be inferred\n+            as `max(y) + 1`.\n+        dtype: The data type expected by the input. Default: `'float32'`.\n+\n+    Returns:\n+        A ordinal regression matrix representation of the input as a NumPy\n+        array. The class axis is placed last.\n+\n+    Example:\n+\n+    >>> a = tf.keras.utils.to_ordinal([0, 1, 2, 3], num_classes=4)\n+    >>> print(a)\n+    [[0. 0. 0.]\n+     [1. 0. 0.]\n+     [1. 1. 0.]\n+     [1. 1. 1.]]\n+    \"\"\"\n+    y = np.array(y, dtype=\"int\")\n+    input_shape = y.shape\n+\n+    # Shrink the last dimension if the shape is (..., 1).\n+    if input_shape and input_shape[-1] == 1 and len(input_shape) > 1:\n+        input_shape = tuple(input_shape[:-1])\n+\n+    y = y.reshape(-1)\n+    if not num_classes:\n+        num_classes = np.max(y) + 1\n+    n = y.shape[0]\n+    range_values = np.arange(num_classes - 1)\n+    range_values = np.tile(np.expand_dims(range_values, 0), [n, 1])\n+    ordinal = np.zeros((n, num_classes - 1), dtype=dtype)\n+    ordinal[range_values < np.expand_dims(y, -1)] = 1\n+    output_shape = input_shape + (num_classes - 1,)\n+    ordinal = np.reshape(ordinal, output_shape)\n+    return ordinal\n+\n+\n @keras_export(\"keras.utils.normalize\")\n def normalize(x, axis=-1, order=2):\n     \"\"\"Normalizes a Numpy array.\n\n@@ -16,29 +16,28 @@\n \n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n+from keras.testing_infra import test_combinations\n from keras.utils import np_utils\n \n+NUM_CLASSES = 5\n \n-class TestNPUtils(tf.test.TestCase):\n-    def test_to_categorical(self):\n-        num_classes = 5\n-        shapes = [(1,), (3,), (4, 3), (5, 4, 3), (3, 1), (3, 2, 1)]\n-        expected_shapes = [\n-            (1, num_classes),\n-            (3, num_classes),\n-            (4, 3, num_classes),\n-            (5, 4, 3, num_classes),\n-            (3, num_classes),\n-            (3, 2, num_classes),\n+\n+class TestNPUtils(test_combinations.TestCase):\n+    @parameterized.parameters(\n+        [\n+            ((1,), (1, NUM_CLASSES)),\n+            ((3,), (3, NUM_CLASSES)),\n+            ((4, 3), (4, 3, NUM_CLASSES)),\n+            ((5, 4, 3), (5, 4, 3, NUM_CLASSES)),\n+            ((3, 1), (3, NUM_CLASSES)),\n+            ((3, 2, 1), (3, 2, NUM_CLASSES)),\n         ]\n-        labels = [np.random.randint(0, num_classes, shape) for shape in shapes]\n-        one_hots = [\n-            np_utils.to_categorical(label, num_classes) for label in labels\n-        ]\n-        for label, one_hot, expected_shape in zip(\n-            labels, one_hots, expected_shapes\n-        ):\n+    )\n+    def test_to_categorical(self, shape, expected_shape):\n+        label = np.random.randint(0, NUM_CLASSES, shape)\n+        one_hot = np_utils.to_categorical(label, NUM_CLASSES)\n         # Check shape\n         self.assertEqual(one_hot.shape, expected_shape)\n         # Make sure there is only one 1 in a row\n@@ -48,6 +47,38 @@ class TestNPUtils(tf.test.TestCase):\n             np.all(np.argmax(one_hot, -1).reshape(label.shape) == label)\n         )\n \n+    def test_to_categorial_without_num_classes(self):\n+        label = [0, 2, 5]\n+        one_hot = np_utils.to_categorical(label)\n+        self.assertEqual(one_hot.shape, (3, 5 + 1))\n+\n+    @parameterized.parameters(\n+        [\n+            ((1,), (1, NUM_CLASSES - 1)),\n+            ((3,), (3, NUM_CLASSES - 1)),\n+            ((4, 3), (4, 3, NUM_CLASSES - 1)),\n+            ((5, 4, 3), (5, 4, 3, NUM_CLASSES - 1)),\n+            ((3, 1), (3, NUM_CLASSES - 1)),\n+            ((3, 2, 1), (3, 2, NUM_CLASSES - 1)),\n+        ]\n+    )\n+    def test_to_ordinal(self, shape, expected_shape):\n+        label = np.random.randint(0, NUM_CLASSES, shape)\n+        ordinal = np_utils.to_ordinal(label, NUM_CLASSES)\n+        # Check shape\n+        self.assertEqual(ordinal.shape, expected_shape)\n+        # Make sure all the values are either 0 or 1\n+        self.assertTrue(np.all(np.logical_or(ordinal == 0, ordinal == 1)))\n+        # Get original labels back from ordinal matrix\n+        self.assertTrue(\n+            np.all(ordinal.cumprod(-1).sum(-1).reshape(label.shape) == label)\n+        )\n+\n+    def test_to_ordinal_without_num_classes(self):\n+        label = [0, 2, 5]\n+        one_hot = np_utils.to_ordinal(label)\n+        self.assertEqual(one_hot.shape, (3, 5))\n+\n \n if __name__ == \"__main__\":\n     tf.test.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f7d863c92c07804377114e9aabd4ed13f5cc698e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 920 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -602,7 +602,7 @@ class NormalizationLayersGraphModeOnlyTest(\n             self.assertAllClose(x1, x2, atol=1e-7)\n \n     def test_batchnorm_trainable(self, layer):\n-        \"\"\"Tests that batchnorm layer is trainable when learning phase is enabled.\n+        \"\"\"Tests that batchnorm layer is trainable when learning phase enabled.\n \n         Computes mean and std for current inputs then\n         applies batch normalization using them.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#98c7bede0aa77d51f844d82a08f148f61a98881c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1984 | Contributors (this commit): 6 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -489,7 +489,7 @@ class ConvLSTM(ConvRNN):\n             bias_constraint=bias_constraint,\n             dropout=dropout,\n             recurrent_dropout=recurrent_dropout,\n-            name=\"lstm_cell\",\n+            name=\"conv_lstm_cell\",\n             dtype=kwargs.get(\"dtype\"),\n         )\n         super().__init__(\n\n@@ -269,6 +269,7 @@ class GRU(RNN):\n             reset_after=reset_after,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n+\t\t\tname='gru_cell',\n             **cell_kwargs\n         )\n         super().__init__(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#839ee9414b8de67c791bf48bd424172bdc6234e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1032 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -269,7 +269,7 @@ class GRU(RNN):\n             reset_after=reset_after,\n             dtype=kwargs.get(\"dtype\"),\n             trainable=kwargs.get(\"trainable\", True),\n-\t\t\tname='gru_cell',\n+            name=\"gru_cell\",\n             **cell_kwargs\n         )\n         super().__init__(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0ce535b5cb79677b672e141ee635d0190183e10b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 155 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,6 +30,7 @@ from keras.utils import generic_utils\n \n # isort: off\n from tensorflow.python.util import tf_export\n+from tensorflow.python.util.tf_export import keras_export\n \n PLAIN_TYPES = (str, int, float, bool)\n SHARED_OBJECTS = threading.local()\n@@ -58,6 +59,12 @@ class SafeModeScope:\n         SAFE_MODE.safe_mode = self.original_value\n \n \n+@keras_export(\"keras.__internal__.enable_unsafe_deserialization\")\n+def enable_unsafe_deserialization():\n+    \"\"\"Disables safe mode globally, allowing deserialization of lambdas.\"\"\"\n+    SAFE_MODE.safe_mode = False\n+\n+\n def in_safe_mode():\n     return getattr(SAFE_MODE, \"safe_mode\", None)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#541177c71887172d11514cda24067f7ab8d8440e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1475 | Contributors (this commit): 34 | Commits (past 90d): 2 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -282,8 +282,8 @@ def model_to_dot(\n                 return (\n                     str(shape)\n                     .replace(str(None), \"None\")\n-                    .replace(\"{\", \"/{\")\n-                    .replace(\"}\", \"/}\")\n+                    .replace(\"{\", \"\\{\")\n+                    .replace(\"}\", \"\\}\")\n                 )\n \n             try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#db1ec98f1510547b0272b568f27fbb57814afba8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 952 | Contributors (this commit): 24 | Commits (past 90d): 5 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,7 @@ def to_ordinal(y, num_classes=None, dtype=\"float32\"):\n         dtype: The data type expected by the input. Default: `'float32'`.\n \n     Returns:\n-        A ordinal regression matrix representation of the input as a NumPy\n+        An ordinal regression matrix representation of the input as a NumPy\n         array. The class axis is placed last.\n \n     Example:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#bc8929c4a73dad4c8ac8942540b09c69bebd0c4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 955 | Contributors (this commit): 24 | Commits (past 90d): 6 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -79,8 +79,7 @@ def to_categorical(y, num_classes=None, dtype=\"float32\"):\n \n @keras_export(\"keras.utils.to_ordinal\")\n def to_ordinal(y, num_classes=None, dtype=\"float32\"):\n-    \"\"\"Converts a class vector (integers) to an ordinal class matrix for ordinal\n-        regression/classification.\n+    \"\"\"Converts a class vector (integers) to an ordinal regression matrix.\n \n     Args:\n         y: Array-like with class values to be converted into a matrix\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3ab1d2e441b83ab0d4de194e08857b945f6a981c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 959 | Contributors (this commit): 24 | Commits (past 90d): 7 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -81,6 +81,10 @@ def to_categorical(y, num_classes=None, dtype=\"float32\"):\n def to_ordinal(y, num_classes=None, dtype=\"float32\"):\n     \"\"\"Converts a class vector (integers) to an ordinal regression matrix.\n \n+    This utility encodes class vector to ordinal regression/classification\n+    matrix where each sample is indicated by a row and rank of that sample is\n+    indicated by number of ones in that row.\n+\n     Args:\n         y: Array-like with class values to be converted into a matrix\n             (integers from 0 to `num_classes - 1`).\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1f54c7c2119d1920c94165b1a8aeac5ce4683e0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 49 | Churn Cumulative: 1864 | Contributors (this commit): 9 | Commits (past 90d): 8 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -454,7 +454,8 @@ class Bidirectional(Wrapper):\n             self.backward_layer.reset_states()\n         else:\n             if not isinstance(states, (list, tuple)):\n-                raise ValueError(\"Unrecognized value for `states`. \"\n+                raise ValueError(\n+                    \"Unrecognized value for `states`. \"\n                     f\"Received: {states}\"\n                     \"Expected `states` to be list or tuple\"\n                 )\n\n@@ -1032,26 +1032,46 @@ class BidirectionalTest(tf.test.TestCase, parameterized.TestCase):\n         bid_stateless = keras.layers.Bidirectional(stateless)\n         bid_stateful = keras.layers.Bidirectional(stateful)\n \n-        model = keras.Model(inp, [\n+        _ = keras.Model(\n+            inp,\n+            [\n                 bid_stateless(inp),\n                 bid_stateful(inp),\n-        ])\n+            ],\n+        )\n \n-        try:\n-            bid_stateless.reset_states()\n-            assert False, \"Expected AttributeError\"\n-        except AttributeError:\n-            pass\n-\n-        try:\n-            bid_stateless.reset_states([])\n-            assert False, \"Expected AttributeError\"\n-        except AttributeError:\n-            pass\n+        self.assertRaisesRegex(\n+            AttributeError,\n+            \"Layer must be stateful.\",\n+            bid_stateless.reset_states,\n+        )\n+        self.assertRaisesRegex(\n+            AttributeError,\n+            \"Layer must be stateful.\",\n+            bid_stateless.reset_states,\n+            [],\n+        )\n \n         bid_stateful.reset_states()\n         bid_stateful.reset_states([ref_state, ref_state])\n \n+        self.assertRaisesRegex(\n+            ValueError,\n+            \"Unrecognized value for `states`. Received: {}Expected `states` \"\n+            \"to be list or tuple\",\n+            bid_stateful.reset_states,\n+            {},\n+        )\n+\n+\n+def test(states):\n+    raise ValueError(\n+        \"Unrecognized value for `states`. \"\n+        f\"Received: {states}\"\n+        \"Expected `states` to be list or tuple\"\n+    )\n+\n+\n def _to_list(ls):\n     if isinstance(ls, list):\n         return ls\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#8e5776c612df5431e00ee469e6b7c8eddfc10e4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 17 | Files Changed: 4 | Hunks: 20 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 51 | Churn Cumulative: 22097 | Contributors (this commit): 140 | Commits (past 90d): 22 | Contributors (cumulative): 143 | DMM Complexity: None\n\nDIFF:\n@@ -3417,6 +3417,10 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n         reloaded_artifact = tf.saved_model.load(\"path/to/location\")\n         predictions = reloaded_artifact.serve(input_data)\n         ```\n+\n+        If you would like to customize your serving endpoints, you can\n+        use the lower-level `keras.saving.ExportArchive` class. The `export()`\n+        method relies on `ExportArchive` internally.\n         \"\"\"\n         from keras.saving import export_lib\n \n\n@@ -15,6 +15,7 @@\n \"\"\"Library for exporting inference-only Keras models/layers.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.engine import base_layer\n from keras.engine import functional\n@@ -22,13 +23,15 @@ from keras.engine import sequential\n from keras.utils import io_utils\n \n \n+@keras_export(\"keras.saving.ExportArchive\")\n class ExportArchive(tf.__internal__.tracking.AutoTrackable):\n     \"\"\"ExportArchive is used to write SavedModel artifacts (e.g. for inference).\n \n     If you have a Keras model or layer that you want to export as SavedModel for\n-    serving (e.g. via TensorFlow-Serving), you can use ExportArchive\n+    serving (e.g. via TensorFlow-Serving), you can use `ExportArchive`\n     to configure the different serving endpoints you need to make available,\n-    as well as their signatures. Simply instantiate an ExportArchive,\n+    as well as their signatures. Simply instantiate an `ExportArchive`,\n+    use `track()` to register the layer(s) or model(s) to be used,\n     then use the `add_endpoint()` method to register a new serving endpoint.\n     When done, use the `write_out()` method to save the artifact.\n \n@@ -110,7 +113,7 @@ class ExportArchive(tf.__internal__.tracking.AutoTrackable):\n             fn: A function. It should only leverage resources\n                 (e.g. `tf.Variable` objects or `tf.lookup.StaticHashTable`\n                 objects) that are available on the models/layers\n-                tracked by the ExportArchive (you can call `.track(model)`\n+                tracked by the `ExportArchive` (you can call `.track(model)`\n                 to track a new model).\n                 The shape and dtype of the inputs to the function must be\n                 known. For that purpose, you can either 1) make sure that\n\n@@ -27,6 +27,7 @@ _THREAD_LOCAL_CUSTOM_OBJECTS = threading.local()\n \n \n @keras_export(\n+    \"keras.saving.custom_object_scope\",\n     \"keras.utils.custom_object_scope\",\n     \"keras.utils.CustomObjectScope\",\n )\n@@ -71,7 +72,9 @@ class CustomObjectScope:\n         _THREAD_LOCAL_CUSTOM_OBJECTS.__dict__.update(self.backup)\n \n \n-@keras_export(\"keras.utils.get_custom_objects\")\n+@keras_export(\n+    \"keras.saving.get_custom_objects\", \"keras.utils.get_custom_objects\"\n+)\n def get_custom_objects():\n     \"\"\"Retrieves a live reference to the global dictionary of custom objects.\n \n@@ -92,7 +95,10 @@ def get_custom_objects():\n     return _GLOBAL_CUSTOM_OBJECTS\n \n \n-@keras_export(\"keras.utils.register_keras_serializable\")\n+@keras_export(\n+    \"keras.saving.register_keras_serializable\",\n+    \"keras.utils.register_keras_serializable\",\n+)\n def register_keras_serializable(package=\"Custom\", name=None):\n     \"\"\"Registers an object with the Keras serialization framework.\n \n@@ -112,12 +118,12 @@ def register_keras_serializable(package=\"Custom\", name=None):\n     ```python\n     # Note that `'my_package'` is used as the `package` argument here, and since\n     # the `name` argument is not provided, `'MyDense'` is used as the `name`.\n-    @keras.utils.register_keras_serializable('my_package')\n+    @keras.saving.register_keras_serializable('my_package')\n     class MyDense(keras.layers.Dense):\n       pass\n \n-    assert keras.utils.get_registered_object('my_package>MyDense') == MyDense\n-    assert keras.utils.get_registered_name(MyDense) == 'my_package>MyDense'\n+    assert keras.saving.get_registered_object('my_package>MyDense') == MyDense\n+    assert keras.saving.get_registered_name(MyDense) == 'my_package>MyDense'\n     ```\n \n     Args:\n@@ -163,7 +169,9 @@ def register_keras_serializable(package=\"Custom\", name=None):\n     return decorator\n \n \n-@keras_export(\"keras.utils.get_registered_name\")\n+@keras_export(\n+    \"keras.saving.get_registered_name\", \"keras.utils.get_registered_name\"\n+)\n def get_registered_name(obj):\n     \"\"\"Returns the name registered to an object within the Keras framework.\n \n@@ -184,7 +192,9 @@ def get_registered_name(obj):\n         return obj.__name__\n \n \n-@keras_export(\"keras.utils.get_registered_object\")\n+@keras_export(\n+    \"keras.saving.get_registered_object\", \"keras.utils.get_registered_object\"\n+)\n def get_registered_object(name, custom_objects=None, module_objects=None):\n     \"\"\"Returns the class associated with `name` if it is registered with Keras.\n \n@@ -197,7 +207,7 @@ def get_registered_object(name, custom_objects=None, module_objects=None):\n     ```python\n     def from_config(cls, config, custom_objects=None):\n       if 'my_custom_object_name' in config:\n-        config['hidden_cls'] = tf.keras.utils.get_registered_object(\n+        config['hidden_cls'] = tf.keras.saving.get_registered_object(\n             config['my_custom_object_name'], custom_objects=custom_objects)\n     ```\n \n\n@@ -30,7 +30,7 @@ except ImportError:\n     h5py = None\n \n \n-@keras_export(\"keras.models.save_model\")\n+@keras_export(\"keras.saving.save_model\", \"keras.models.save_model\")\n def save_model(model, filepath, overwrite=True, save_format=None, **kwargs):\n     \"\"\"Saves a model as a TensorFlow SavedModel or HDF5 file.\n \n@@ -72,12 +72,12 @@ def save_model(model, filepath, overwrite=True, save_format=None, **kwargs):\n         tf.keras.layers.Dense(5, input_shape=(3,)),\n         tf.keras.layers.Softmax()])\n     model.save(\"model.keras\")\n-    loaded_model = tf.keras.models.load_model(\"model.keras\")\n+    loaded_model = tf.keras.saving.load_model(\"model.keras\")\n     x = tf.random.uniform((10, 3))\n     assert np.allclose(model.predict(x), loaded_model.predict(x))\n     ```\n \n-    Note that `model.save()` is an alias for `tf.keras.models.save_model()`.\n+    Note that `model.save()` is an alias for `tf.keras.saving.save_model()`.\n \n     The SavedModel or HDF5 file contains:\n \n@@ -113,7 +113,7 @@ def save_model(model, filepath, overwrite=True, save_format=None, **kwargs):\n     and the amount of disk space occupied by the output SavedModel. If you\n     enable this option, then you _must_ provide all custom class definitions\n     when loading the model. See the `custom_objects` argument in\n-    `tf.keras.models.load_model`.\n+    `tf.keras.saving.load_model`.\n     \"\"\"\n     save_format = get_save_format(filepath, save_format)\n     if save_format not in (\"keras\", \"tf\", \"h5\", \"keras_v3\"):\n@@ -151,7 +151,7 @@ def save_model(model, filepath, overwrite=True, save_format=None, **kwargs):\n         )\n \n \n-@keras_export(\"keras.models.load_model\")\n+@keras_export(\"keras.saving.load_model\", \"keras.models.load_model\")\n def load_model(\n     filepath, custom_objects=None, compile=True, safe_mode=True, **kwargs\n ):\n@@ -185,7 +185,7 @@ def load_model(\n         tf.keras.layers.Dense(5, input_shape=(3,)),\n         tf.keras.layers.Softmax()])\n     model.save(\"model.keras\")\n-    loaded_model = tf.keras.models.load_model(\"model.keras\")\n+    loaded_model = tf.keras.saving.load_model(\"model.keras\")\n     x = tf.random.uniform((10, 3))\n     assert np.allclose(model.predict(x), loaded_model.predict(x))\n     ```\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#8f1327566d708f0a0164ec9d0d03adc06c885ed8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 999 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -31,6 +31,7 @@ from keras.utils import tf_contextlib\n # isort: off\n from tensorflow.python.framework import ops\n from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python import pywrap_tfe\n \n \n @keras_export(\"keras.utils.set_random_seed\", v1=[])\n@@ -696,8 +697,15 @@ def can_jit_compile(warn=False):\n     if platform.system() == \"Darwin\" and \"arm\" in platform.processor().lower():\n         if warn:\n             logging.warning(\n-                \"Tensorflow is not compiled with XLA on Mac M1 Arm processors, \"\n-                \"so cannot set `jit_compile` to True.\"\n+                \"XLA (`jit_compile`) is not yet supported on Apple M1/M2 ARM \"\n+                \"processors. Falling back to `jit_compile=False`.\"\n+            )\n+        return False\n+    if pywrap_tfe.TF_ListPluggablePhysicalDevices():\n+        if warn:\n+            logging.warning(\n+                \"XLA (`jit_compile`) is not supported on your system. \"\n+                \"Falling back to `jit_compile=False`.\"\n             )\n         return False\n     return True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5c0e0d4433a47e68a84652954cf322e4e2a4dc99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 630 | Contributors (this commit): 13 | Commits (past 90d): 5 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -187,8 +187,8 @@ class MultiHeadAttention(Layer):\n         dropout: Dropout probability.\n         use_bias: Boolean, whether the dense layers use bias vectors/matrices.\n         output_shape: The expected shape of an output tensor, besides the batch\n-            and sequence dims. If not specified, projects back to the query feature\n-            dim (the query input's last dimension).\n+            and sequence dims. If not specified, projects back to the query\n+            feature dim (the query input's last dimension).\n         attention_axes: axes over which the attention is applied. `None` means\n             attention over all axes, but batch, heads, and features.\n         kernel_initializer: Initializer for dense layer kernels.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5b931e64e262c3b44125fdb2534fb4a940cd6e79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 1527 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -364,7 +364,9 @@ def EfficientNet(\n         # original implementation.\n         # See https://github.com/tensorflow/tensorflow/issues/49930 for more\n         # details\n-        x = layers.Rescaling(1.0 / tf.math.sqrt(IMAGENET_STDDEV_RGB))(x)\n+        x = layers.Rescaling(\n+            [1.0 / math.sqrt(stddev) for stddev in IMAGENET_STDDEV_RGB]\n+        )(x)\n \n     x = layers.ZeroPadding2D(\n         padding=imagenet_utils.correct_pad(x, 3), name=\"stem_conv_pad\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2a1607bc0e90797b0ab087343f91489ef05b63ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 214/212 | Churn Δ: 24 | Churn Cumulative: 42 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,6 +19,7 @@ import abc\n import contextlib\n import functools\n import warnings\n+from copy import deepcopy\n \n import tensorflow.compat.v2 as tf\n \n@@ -441,6 +442,18 @@ class OptimizerV2(tf.__internal__.tracking.Trackable):\n             )\n         self.clipvalue = kwargs.pop(\"clipvalue\", None)\n \n+    def __deepcopy__(self, memo):\n+        cls = self.__class__\n+        result = cls.__new__(cls)\n+        memo[id(self)] = result\n+        for k, v in self.__dict__.items():\n+            # DistributionStrategy singleton cannot be serialized\n+            if k == \"_distribution_strategy\":\n+                continue\n+            setattr(result, k, deepcopy(v, memo))\n+        result._distribution_strategy = self._distribution_strategy\n+        return result\n+\n     @property\n     def clipnorm(self):\n         \"\"\"`float` or `None`. If set, clips gradients to a maximum norm.\"\"\"\n\n@@ -15,6 +15,7 @@\n \"\"\"Functional test for OptimizerV2.\"\"\"\n \n import collections\n+from copy import deepcopy\n \n import numpy as np\n import tensorflow.compat.v2 as tf\n@@ -1459,5 +1460,15 @@ class OptimizerCoefficientTest(test_combinations.TestCase):\n                 optimizer.apply_gradients(zip(grads, trainable_variables))\n \n \n+class DeepcopyTests(tf.test.TestCase):\n+    def setUp(self):\n+        self.optimizer = adam.Adam(0.42)\n+        super().setUp()\n+\n+    def test_deepcopy(self):\n+        clone = deepcopy(self.optimizer)\n+        assert clone.get_config()[\"learning_rate\"] == 0.42, \"wrong lr\"\n+\n+\n if __name__ == \"__main__\":\n     tf.test.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f5452d540ba0bd8887c6b35f21f99f6849faf63c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1426 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -373,6 +373,7 @@ class Normalization(base_preprocessing_layer.PreprocessingLayer):\n         config.update(\n             {\n                 \"axis\": self.axis,\n+                \"invert\": self.invert,\n                 \"mean\": utils.listify_tensors(self.input_mean),\n                 \"variance\": utils.listify_tensors(self.input_variance),\n             }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a2cf8c94b2226f4c4a6c6e3273a25adfd2914d8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 36 | Churn Cumulative: 1428 | Contributors (this commit): 13 | Commits (past 90d): 1 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -456,6 +456,42 @@ class NormalizationAdaptTest(\n         new_output_data = loaded_model.predict(input_data)\n         self.assertAllClose(new_output_data, expected_output)\n         \n+    @parameterized.product(\n+        save_format=[\"tf\", \"h5\"],\n+        adapt=[True, False],\n+    )\n+    def test_saved_model_keras_invert(self, save_format, adapt):\n+        expected_output = [[0.0], [2.0], [0.0], [2.0]]\n+        input_data = [[-1.0], [1.0], [-1.0], [1.0]]\n+\n+        cls = normalization.Normalization\n+        cls.invert = True\n+        inputs = keras.Input(shape=(1,), dtype=tf.float32)\n+        if adapt:\n+            layer = cls(axis=-1)\n+            layer.adapt(expected_output)\n+        else:\n+            layer = cls(mean=1.0, variance=1.0)\n+        outputs = layer(inputs)\n+        model = keras.Model(inputs=inputs, outputs=outputs)\n+\n+        output_data = model.predict(input_data)\n+        self.assertAllClose(output_data, expected_output)\n+\n+        # Save the model to disk.\n+        output_path = os.path.join(self.get_temp_dir(), \"tf_keras_saved_model_invert\")\n+        model.save(output_path, save_format=save_format)\n+        loaded_model = keras.models.load_model(\n+            output_path, custom_objects={\"Normalization\": cls}\n+        )\n+\n+        # Ensure that the loaded model is unique (so that the save/load is real)\n+        self.assertIsNot(model, loaded_model)\n+\n+        # Validate correctness of the new model.\n+        new_output_data = loaded_model.predict(input_data)\n+        self.assertAllClose(new_output_data, expected_output)\n+\n     @parameterized.parameters(\n         {\"adapted\": True},\n         {\"adapted\": False},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a05c578699b7fa9358b91437322adc1ebd76f126", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 30 | Churn Cumulative: 4464 | Contributors (this commit): 45 | Commits (past 90d): 6 | Contributors (cumulative): 45 | DMM Complexity: 0.35\n\nDIFF:\n@@ -102,6 +102,29 @@ def is_generator_or_sequence(x):\n     )\n \n \n+def _resolve_path(path):\n+    return os.path.realpath(os.path.abspath(path))\n+\n+\n+def _is_path_in_dir(path, base_dir):\n+    return _resolve_path(os.path.join(base_dir, path)).startswith(base_dir)\n+\n+\n+def _is_link_in_dir(info, base):\n+    tip = _resolve_path(os.path.join(base, os.path.dirname(info.name)))\n+    return _is_path_in_dir(info.linkname, base_dir=tip)\n+\n+\n+def _filter_safe_paths(members):\n+    base_dir = _resolve_path(\".\")\n+    for finfo in members:\n+        if _is_path_in_dir(finfo.name, base_dir):\n+            yield finfo\n+        if finfo.issym() or finfo.islnk():\n+            if _is_link_in_dir(finfo, base_dir):\n+                yield finfo\n+\n+\n def _extract_archive(file_path, path=\".\", archive_format=\"auto\"):\n     \"\"\"Extracts an archive if it matches tar, tar.gz, tar.bz, or zip formats.\n \n@@ -139,7 +162,14 @@ def _extract_archive(file_path, path=\".\", archive_format=\"auto\"):\n         if is_match_fn(file_path):\n             with open_fn(file_path) as archive:\n                 try:\n+                    if zipfile.is_zipfile(file_path):\n+                        # Zip archive.\n                         archive.extractall(path)\n+                    else:\n+                        # Tar archive, perhaps unsafe. Filter paths.\n+                        archive.extractall(\n+                            path, members=_filter_safe_paths(archive)\n+                        )\n                 except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n                     if os.path.exists(path):\n                         if os.path.isfile(path):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e52370bb58b7325ac90d4bd7e2a6a0d2a73404e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 13 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 45 | Churn Cumulative: 4509 | Contributors (this commit): 45 | Commits (past 90d): 7 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -28,6 +28,7 @@ import threading\n import time\n import typing\n import urllib\n+import warnings\n import weakref\n import zipfile\n from abc import abstractmethod\n@@ -118,24 +119,32 @@ def _is_link_in_dir(info, base):\n def _filter_safe_paths(members):\n     base_dir = _resolve_path(\".\")\n     for finfo in members:\n+        valid_path = False\n         if _is_path_in_dir(finfo.name, base_dir):\n+            valid_path = True\n             yield finfo\n-        if finfo.issym() or finfo.islnk():\n+        elif finfo.issym() or finfo.islnk():\n             if _is_link_in_dir(finfo, base_dir):\n+                valid_path = True\n                 yield finfo\n+        if not valid_path:\n+            warnings.warn(\n+                \"Skipping invalid path during archive extraction: \"\n+                f\"'{finfo.name}'.\"\n+            )\n \n \n def _extract_archive(file_path, path=\".\", archive_format=\"auto\"):\n     \"\"\"Extracts an archive if it matches tar, tar.gz, tar.bz, or zip formats.\n \n     Args:\n-        file_path: path to the archive file\n-        path: path to extract the archive file\n+        file_path: Path to the archive file.\n+        path: Where to extract the archive file.\n         archive_format: Archive format to try for extracting the file.\n-            Options are 'auto', 'tar', 'zip', and None.\n-            'tar' includes tar, tar.gz, and tar.bz files.\n-            The default 'auto' is ['tar', 'zip'].\n-            None or an empty list will return no matches found.\n+            Options are `'auto'`, `'tar'`, `'zip'`, and `None`.\n+            `'tar'` includes tar, tar.gz, and tar.bz files.\n+            The default 'auto' is `['tar', 'zip']`.\n+            `None` or an empty list will return no matches found.\n \n     Returns:\n         True if a match was found and an archive extraction was completed,\n@@ -209,9 +218,9 @@ def get_file(\n \n     ```python\n     path_to_downloaded_file = tf.keras.utils.get_file(\n-        \"flower_photos\",\n-        \"https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz\",\n-        untar=True)\n+        origin=\"https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz\",\n+        extract=True,\n+    )\n     ```\n \n     Args:\n@@ -241,7 +250,7 @@ def get_file(\n             defaults to the default directory `~/.keras/`.\n \n     Returns:\n-        Path to the downloaded file\n+        Path to the downloaded file.\n \n     **/!\\ Warning on malicious downloads /!\\ **\n     Downloading something from the Internet carries a risk.\n@@ -249,14 +258,6 @@ def get_file(\n     We recommend that you specify the `file_hash` argument\n     (if the hash of the source file is known) to make sure that the file you\n     are getting is the one you expect.\n-\n-    **/!\\ Warning on file extraction /!\\**\n-    Extracting a compressed archive carries a risk.\n-    NEVER extract archives from untrusted sources without prior inspection.\n-    If you set `extract=True`, and the archive is in `tar` format,\n-    it is possible that files will be created outside of the target `cache_dir`,\n-    e.g. archive members may have absolute filenames\n-    starting with `\"/\"` or filenames with two dots, `\"..\"`.\n     \"\"\"\n     if origin is None:\n         raise ValueError(\n@@ -402,13 +403,13 @@ def _hash_file(fpath, algorithm=\"sha256\", chunk_size=65535):\n     ```\n \n     Args:\n-        fpath: path to the file being validated\n-        algorithm: hash algorithm, one of `'auto'`, `'sha256'`, or `'md5'`.\n+        fpath: Path to the file being validated.\n+        algorithm: Hash algorithm, one of `'auto'`, `'sha256'`, or `'md5'`.\n             The default `'auto'` detects the hash algorithm in use.\n         chunk_size: Bytes to read at a time, important for large files.\n \n     Returns:\n-        The file hash\n+        The file hash.\n     \"\"\"\n     if isinstance(algorithm, str):\n         hasher = _resolve_hasher(algorithm)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
