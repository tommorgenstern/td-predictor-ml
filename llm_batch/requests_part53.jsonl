{"custom_id": "requests#400046f9116ccee8baff0c5936a2ede530589fec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 361 | Contributors (this commit): 9 | Commits (past 90d): 8 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -14,8 +14,6 @@ if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n \n-os.environ['PYTHONDONTWRITEBYTECODE'] = '1'\n-\n packages = [\n     'requests',\n     'requests.packages',\n@@ -58,5 +56,3 @@ setup(\n         'Programming Language :: Python :: 3.3',\n     ),\n )\n-\n-del os.environ['PYTHONDONTWRITEBYTECODE']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#95a03532c36f1afd38c395f7160c7f7086557b7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 5813 | Contributors (this commit): 87 | Commits (past 90d): 22 | Contributors (cumulative): 87 | DMM Complexity: 1.0\n\nDIFF:\n@@ -271,9 +271,7 @@ class Request(object):\n                 else:\n                     method = self.method\n \n-                # Do what the browsers do if strict_mode is off...\n-                if (not self.config.get('strict_mode')):\n-\n+                # Do what the browsers do, despite standards...\n                 if r.status_code in (codes.moved, codes.found) and self.method == 'POST':\n                     method = 'GET'\n                     data = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1607a6a3e2565c329945c6e05576f27597be7549", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 5816 | Contributors (this commit): 87 | Commits (past 90d): 23 | Contributors (cumulative): 87 | DMM Complexity: 1.0\n\nDIFF:\n@@ -670,9 +670,6 @@ class Request(object):\n                 # Save the response.\n                 self.response.content\n \n-            if self.config.get('danger_mode'):\n-                self.response.raise_for_status()\n-\n             return self.sent\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f553857beb4424786f8d665019686551905483d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 45 | Files Changed: 3 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 45 | Churn Cumulative: 1427 | Contributors (this commit): 25 | Commits (past 90d): 10 | Contributors (cumulative): 32 | DMM Complexity: 0.8125\n\nDIFF:\n@@ -39,9 +39,6 @@ defaults['max_redirects'] = 30\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 10\n defaults['max_retries'] = 0\n-defaults['danger_mode'] = False\n-defaults['safe_mode'] = False\n-defaults['strict_mode'] = False\n defaults['keep_alive'] = True\n defaults['encode_uri'] = True\n defaults['trust_env'] = True\n\n@@ -1,40 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.safe_mode\n-~~~~~~~~~~~~\n-\n-This module contains a decorator that implements safe_mode.\n-\n-:copyright: (c) 2012 by Kenneth Reitz.\n-:license: ISC, see LICENSE for more details.\n-\n-\"\"\"\n-\n-from .models import Response\n-from .packages.urllib3.response import HTTPResponse\n-from .exceptions import RequestException, ConnectionError, HTTPError\n-import socket\n-\n-\n-def catch_exceptions_if_in_safe_mode(function):\n-    \"\"\"New implementation of safe_mode. We catch all exceptions at the Session level\n-    and then return a blank Response object with the error field filled. This decorator\n-    wraps Session._send_request() in sessions.py.\n-    \"\"\"\n-\n-    def wrapped(*args, **kwargs):\n-        # if save_mode, we catch exceptions and fill error field\n-        if (kwargs.get('config') and kwargs.get('config').get('safe_mode')) or (kwargs.get('session')\n-                                            and kwargs.get('session').config.get('safe_mode')):\n-            try:\n-                return function(*args, **kwargs)\n-            except (RequestException, ConnectionError, HTTPError,\n-                    socket.timeout, socket.gaierror) as e:\n-                r = Response()\n-                r.error = e\n-                r.raw = HTTPResponse()  # otherwise, tests fail\n-                r.status_code = 0  # with this status_code, content returns None\n-                return r\n-        return function(*args, **kwargs)\n-    return wrapped\n\n@@ -17,7 +17,6 @@ from .models import Request\n from .hooks import dispatch_hook\n from .utils import header_expand, from_key_val_list\n from .packages.urllib3.poolmanager import PoolManager\n-from .safe_mode import catch_exceptions_if_in_safe_mode\n \n \n def merge_kwargs(local_kwarg, default_kwarg):\n@@ -268,7 +267,6 @@ class Session(object):\n         # Send the HTTP Request.\n         return self._send_request(r, **args)\n \n-    @catch_exceptions_if_in_safe_mode\n     def _send_request(self, r, **kwargs):\n         # Send the request.\n         r.send(prefetch=kwargs.get(\"prefetch\"))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0af19a05ce54bbb9e306771710e6eac15506d4c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 150 | Contributors (this commit): 10 | Commits (past 90d): 6 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -81,6 +81,11 @@ except ImportError:\n # Specifics\n # ---------\n \n+try:\n+    import cchardet as chardet\n+except ImportError:\n+    from .packages import chardet\n+\n \n if is_py2:\n     from urllib import quote, unquote, quote_plus, unquote_plus, urlencode\n@@ -89,10 +94,6 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n-    try:\n-        import cchardet as chardet\n-    except ImportError:\n-        from .packages import chardet\n     from .packages.urllib3.packages.ordered_dict import OrderedDict\n \n     builtin_str = str\n@@ -109,7 +110,6 @@ elif is_py3:\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n     from io import StringIO\n-    from .packages import chardet2 as chardet\n     from collections import OrderedDict\n \n     builtin_str = str\n\n@@ -1,4 +1,3 @@\n-from __future__ import print_function\r\n import sys, glob\r\n sys.path.insert(0, '..')\r\n from chardet.universaldetector import UniversalDetector\r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ccd14ddc81bbc23afa33c10643e24dfa07513f2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 7 | Churn Cumulative: 328 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -41,6 +41,9 @@ class CodingStateMachine:\n         # for each byte we get its class\r\n         # if it is first byte, we also get byte length\r\n         # PY3K: aBuf is a byte stream, so c is an int, not a byte\r\n+        if hasattr(c, 'encode'):\r\n+            c = int(c.encode('hex'), 16)\r\n+\r\n         byteCls = self._mModel['classTable'][c]\r\n         if self._mCurrentState == eStart:\r\n             self._mCurrentBytePos = 0\r\n\n@@ -108,6 +108,8 @@ class Latin1Prober(CharSetProber):\n     def feed(self, aBuf):\r\n         aBuf = self.filter_with_english_letters(aBuf)\r\n         for c in aBuf:\r\n+            if hasattr(c, 'encode'):\r\n+                c = int(c.encode('hex'), 16)\r\n             charClass = Latin1_CharToClass[c]\r\n             freq = Latin1ClassModel[(self._mLastCharClass * CLASS_NUM) + charClass]\r\n             if freq == 0:\r\n\n@@ -68,6 +68,8 @@ class SingleByteCharSetProber(CharSetProber):\n         if not aLen:\r\n             return self.get_state()\r\n         for c in aBuf:\r\n+            if hasattr(c, 'encode'):\r\n+                c = int(c.encode('hex'), 16)\r\n             order = self._mModel['charToOrderMap'][c]\r\n             if order < SYMBOL_CAT_ORDER:\r\n                 self._mTotalChar += 1\r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fd6b1f0c4e7fc4c7236faf5c0debff8222c08af2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 363 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n-    'requests.packages.chardet'\n+    'requests.packages.chardet',\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.packages.ssl_match_hostname'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b69854e96e0486be287431896a6ae61f36150661", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 151 | Contributors (this commit): 11 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -109,7 +109,7 @@ elif is_py3:\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n     from io import StringIO\n-    from .packages import chardet2 as chardet\n+    from .packages import chardet\n     from collections import OrderedDict\n \n     builtin_str = str\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ead850065189a094687894168abcf99cabe7f02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 365 | Contributors (this commit): 9 | Commits (past 90d): 10 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n-    'requests.packages.chardet'\n+    'requests.packages.charade'\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.packages.ssl_match_hostname'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2eb63be19ae9496193fd6d70aef09442f1840c74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 30 | Files Changed: 6 | Hunks: 13 | Methods Changed: 7 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 57 | Churn Cumulative: 1059 | Contributors (this commit): 11 | Commits (past 90d): 16 | Contributors (cumulative): 16 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,6 +4,7 @@\n pythoncompat\n \"\"\"\n \n+from .packages import charade as chardet\n \n import sys\n \n\n@@ -50,11 +50,11 @@ class CharSetProber:\n         return 0.0\n \n     def filter_high_bit_only(self, aBuf):\n-        aBuf = re.sub(b'([\\x00-\\x7F])+', ' ', aBuf)\n+        aBuf = re.sub(b'([\\x00-\\x7F])+', b' ', aBuf)\n         return aBuf\n \n     def filter_without_english_letters(self, aBuf):\n-        aBuf = re.sub(b'([A-Za-z])+', ' ', aBuf)\n+        aBuf = re.sub(b'([A-Za-z])+', b' ', aBuf)\n         return aBuf\n \n     def filter_with_english_letters(self, aBuf):\n\n@@ -19,20 +19,11 @@\n ######################### END LICENSE BLOCK #########################\n \n \n-from sys import verion_info\n+from sys import version_info\n \n \n def wrap_ord(a):\n-    if isinstance(a, 'str') and version_info < (3, 0):\n+    if isinstance(a, str) and version_info < (3, 0):\n         return ord(a)\n     elif isinstance(a, int) and version_info >= (3, 0):\n         return a\n-\n-\n-def cmp_corrector(s):\n-    if version_info >= (3, 0):\n-        if s.startswith('\\x'):\n-            return ord(s)\n-        elif s.startswith('\\\\'):\n-            return int(s[1:])\n-    return s\n\n@@ -25,7 +25,6 @@\n # 02110-1301  USA\n ######################### END LICENSE BLOCK #########################\n \n-from . import constants\n from .compat import wrap_ord\n \n NUM_OF_CATEGORY = 6\n@@ -494,7 +493,7 @@ class JapaneseContextAnalysis:\n                 if (order != -1) and (self._mLastCharOrder != -1):\n                     self._mTotalRel += 1\n                     if self._mTotalRel > MAX_REL_THRESHOLD:\n-                        self._mDone = constants.True\n+                        self._mDone = True\n                         break\n                     self._mRelSample[\n                         jp2CharContext[self._mLastCharOrder][order]\n\n@@ -86,7 +86,8 @@ class SingleByteCharSetProber(CharSetProber):\n                         i = (self._mLastOrder * SAMPLE_SIZE) + order\n                     else:  # reverse the order of the letters in the lookup\n                         i = (order * SAMPLE_SIZE) + self._mLastOrder\n-                    self._mSeqCounters[self.mModel['precedenceMatrix'][i]] += 1\n+                    model = self._mModel['precedenceMatrix'][i]\n+                    self._mSeqCounters[model] += 1\n             self._mLastOrder = order\n \n         if self.get_state() == constants.eDetecting:\n\n@@ -26,21 +26,23 @@\n # 02110-1301  USA\n ######################### END LICENSE BLOCK #########################\n \n-import constants, sys\n-from charsetgroupprober import CharSetGroupProber\n-from sbcharsetprober import SingleByteCharSetProber\n-from langcyrillicmodel import Win1251CyrillicModel, Koi8rModel, Latin5CyrillicModel, MacCyrillicModel, Ibm866Model, Ibm855Model\n-from langgreekmodel import Latin7GreekModel, Win1253GreekModel\n-from langbulgarianmodel import Latin5BulgarianModel, Win1251BulgarianModel\n-from langhungarianmodel import Latin2HungarianModel, Win1250HungarianModel\n-from langthaimodel import TIS620ThaiModel\n-from langhebrewmodel import Win1255HebrewModel\n-from hebrewprober import HebrewProber\n+from .charsetgroupprober import CharSetGroupProber\n+from .sbcharsetprober import SingleByteCharSetProber\n+from .langcyrillicmodel import (Win1251CyrillicModel, Koi8rModel,\n+                                Latin5CyrillicModel, MacCyrillicModel,\n+                                Ibm866Model, Ibm855Model)\n+from .langgreekmodel import Latin7GreekModel, Win1253GreekModel\n+from .langbulgarianmodel import Latin5BulgarianModel, Win1251BulgarianModel\n+from .langhungarianmodel import Latin2HungarianModel, Win1250HungarianModel\n+from .langthaimodel import TIS620ThaiModel\n+from .langhebrewmodel import Win1255HebrewModel\n+from .hebrewprober import HebrewProber\n+\n \n class SBCSGroupProber(CharSetGroupProber):\n     def __init__(self):\n         CharSetGroupProber.__init__(self)\n-        self._mProbers = [ \\\n+        self._mProbers = [\n             SingleByteCharSetProber(Win1251CyrillicModel),\n             SingleByteCharSetProber(Koi8rModel),\n             SingleByteCharSetProber(Latin5CyrillicModel),\n@@ -56,9 +58,12 @@ class SBCSGroupProber(CharSetGroupProber):\n             SingleByteCharSetProber(TIS620ThaiModel),\n         ]\n         hebrewProber = HebrewProber()\n-        logicalHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, constants.False, hebrewProber)\n-        visualHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, constants.True, hebrewProber)\n+        logicalHebrewProber = SingleByteCharSetProber(Win1255HebrewModel,\n+                                                      False, hebrewProber)\n+        visualHebrewProber = SingleByteCharSetProber(Win1255HebrewModel, True,\n+                                                     hebrewProber)\n         hebrewProber.set_model_probers(logicalHebrewProber, visualHebrewProber)\n-        self._mProbers.extend([hebrewProber, logicalHebrewProber, visualHebrewProber])\n+        self._mProbers.extend([hebrewProber, logicalHebrewProber,\n+                               visualHebrewProber])\n \n         self.reset()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5eb78876e19a7cd0b04965281273dc5ae25962d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 24 | Churn Cumulative: 5840 | Contributors (this commit): 88 | Commits (past 90d): 24 | Contributors (cumulative): 88 | DMM Complexity: 1.0\n\nDIFF:\n@@ -557,7 +557,7 @@ class Request(object):\n         proxy = self.proxies.get(_p.scheme)\n \n         if proxy and not any(map(_p.hostname.endswith, no_proxy)):\n-            conn = poolmanager.proxy_from_url(proxy)\n+            conn = poolmanager.ProxyManager(self.get_connection_for_url(proxy))\n             _proxy = urlparse(proxy)\n             if '@' in _proxy.netloc:\n                 auth, url = _proxy.netloc.split('@', 1)\n@@ -565,15 +565,10 @@ class Request(object):\n                 r = self.proxy_auth(self)\n                 self.__dict__.update(r.__dict__)\n         else:\n-            # Check to see if keep_alive is allowed.\n-            try:\n-                if self.config.get('keep_alive'):\n-                    conn = self._poolmanager.connection_from_url(url)\n-                else:\n-                    conn = connectionpool.connection_from_url(url)\n+            conn = self.get_connection_for_url(url)\n+\n+        if not self.config.get('keep_alive'):\n             self.headers['Connection'] = 'close'\n-            except LocationParseError as e:\n-                raise InvalidURL(e)\n \n         if url.startswith('https') and self.verify:\n \n@@ -672,6 +667,17 @@ class Request(object):\n \n             return self.sent\n \n+    def get_connection_for_url(self, url):\n+        # Check to see if keep_alive is allowed.\n+        try:\n+            if self.config.get('keep_alive'):\n+                conn = self._poolmanager.connection_from_url(url)\n+            else:\n+                conn = connectionpool.connection_from_url(url)\n+            return conn\n+        except LocationParseError as e:\n+            raise InvalidURL(e)\n+\n \n class Response(object):\n     \"\"\"The core :class:`Response <Response>` object. All\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ad311497fa100a7f4b11ca3df9c7a84b6084602e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 441 | Lines Deleted: 794 | Files Changed: 39 | Hunks: 137 | Methods Changed: 32 | Complexity Δ (Sum/Max): -14/4 | Churn Δ: 1235 | Churn Cumulative: 9040 | Contributors (this commit): 1 | Commits (past 90d): 80 | Contributors (cumulative): 39 | DMM Complexity: 0.8\n\nDIFF:\n@@ -15,8 +15,7 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-__version__ = \"1.1\"\n-\n+__version__ = \"1.0.0\"\r\n \r\n def detect(aBuf):\r\n     from . import universaldetector\r\n\n@@ -45,7 +45,7 @@ BIG5_TYPICAL_DISTRIBUTION_RATIO = 0.75\n #Char to FreqOrder table\n BIG5_TABLE_SIZE = 5376\n \n-Big5CharToFreqOrder = ( \\\n+Big5CharToFreqOrder = (\n    1,1801,1506, 255,1431, 198,   9,  82,   6,5008, 177, 202,3681,1256,2821, 110, #   16\n 3814,  33,3274, 261,  76,  44,2114,  16,2946,2187,1176, 659,3971,  26,3451,2653, #   32\n 1198,3972,3350,4202, 410,2215, 302, 590, 361,1964,   8, 204,  58,4510,5009,1932, #   48\n@@ -921,3 +921,5 @@ Big5CharToFreqOrder = ( \\\n 13936,13937,13938,13939,13940,13941,13942,13943,13944,13945,13946,13947,13948,13949,13950,13951, #13952\n 13952,13953,13954,13955,13956,13957,13958,13959,13960,13961,13962,13963,13964,13965,13966,13967, #13968\n 13968,13969,13970,13971,13972) #13973\n+\n+# flake8: noqa\n\n\n@@ -47,8 +47,7 @@ class CharDistributionAnalysis:\n         # Mapping table to get frequency order from char order (get from\r\n         # GetOrder())\r\n         self._mCharToFreqOrder = None\r\n-        # Size of above table\n-        self._mTableSize = None\n+        self._mTableSize = None  # Size of above table\r\n         # This is a constant value which varies from language to language,\r\n         # used in calculating confidence.  See\r\n         # http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html\r\n@@ -58,19 +57,18 @@ class CharDistributionAnalysis:\n \r\n     def reset(self):\r\n         \"\"\"reset analyser, clear any state\"\"\"\r\n-        # If this flag is set to constants.True, detection is done and\n-        # conclusion has been made\n+        # If this flag is set to True, detection is done and conclusion has\r\n+        # been made\r\n         self._mDone = False\r\n-        # Total characters encountered\n-        self._mTotalChars = 0\n+        self._mTotalChars = 0  # Total characters encountered\r\n         # The number of characters whose frequency order is less than 512\r\n         self._mFreqChars = 0\r\n \r\n-    def feed(self, aStr, aCharLen):\n+    def feed(self, aBuf, aCharLen):\r\n         \"\"\"feed a character with known length\"\"\"\r\n         if aCharLen == 2:\r\n             # we only care about 2-bytes character in our distribution analysis\r\n-            order = self.get_order(aStr)\n+            order = self.get_order(aBuf)\r\n         else:\r\n             order = -1\r\n         if order >= 0:\r\n@@ -82,14 +80,14 @@ class CharDistributionAnalysis:\n \r\n     def get_confidence(self):\r\n         \"\"\"return confidence based on existing data\"\"\"\r\n-        # if we didn't receive any character in our consideration range, return\n-        # negative answer\n+        # if we didn't receive any character in our consideration range,\r\n+        # return negative answer\r\n         if self._mTotalChars <= 0:\r\n             return SURE_NO\r\n \r\n         if self._mTotalChars != self._mFreqChars:\r\n-            r = self._mFreqChars / ((self._mTotalChars - self._mFreqChars)\n-                                    * self._mTypicalDistributionRatio)\n+            r = (self._mFreqChars / ((self._mTotalChars - self._mFreqChars)\r\n+                 * self._mTypicalDistributionRatio))\r\n             if r < SURE_YES:\r\n                 return r\r\n \r\n@@ -101,7 +99,7 @@ class CharDistributionAnalysis:\n         # For charset detection, certain amount of data is enough\r\n         return self._mTotalChars > ENOUGH_DATA_THRESHOLD\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # We do not handle characters based on the original encoding string,\r\n         # but convert this encoding string to a number, here called order.\r\n         # This allows multiple encodings of a language to share one frequency\r\n@@ -116,13 +114,14 @@ class EUCTWDistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = EUCTW_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = EUCTW_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for euc-TW encoding, we are interested\r\n         #   first  byte range: 0xc4 -- 0xfe\r\n         #   second byte range: 0xa1 -- 0xfe\r\n         # no validation needed here. State machine has done that\r\n-        if aStr[0] >= '\\xC4':\n-            return 94 * (wrap_ord(aStr[0]) - 0xC4) + wrap_ord(aStr[1]) - 0xA1\n+        first_char = wrap_ord(aBuf[0])\r\n+        if first_char >= 0xC4:\r\n+            return 94 * (first_char - 0xC4) + wrap_ord(aBuf[1]) - 0xA1\r\n         else:\r\n             return -1\r\n \r\n@@ -134,13 +133,14 @@ class EUCKRDistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = EUCKR_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = EUCKR_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for euc-KR encoding, we are interested\r\n         #   first  byte range: 0xb0 -- 0xfe\r\n         #   second byte range: 0xa1 -- 0xfe\r\n         # no validation needed here. State machine has done that\r\n-        if aStr[0] >= '\\xB0':\n-            return 94 * (wrap_ord(aStr[0]) - 0xB0) + wrap_ord(aStr[1]) - 0xA1\n+        first_char = wrap_ord(aBuf[0])\r\n+        if first_char >= 0xB0:\r\n+            return 94 * (first_char - 0xB0) + wrap_ord(aBuf[1]) - 0xA1\r\n         else:\r\n             return -1\r\n \r\n@@ -152,13 +152,14 @@ class GB2312DistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = GB2312_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = GB2312_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for GB2312 encoding, we are interested\r\n         #  first  byte range: 0xb0 -- 0xfe\r\n         #  second byte range: 0xa1 -- 0xfe\r\n         # no validation needed here. State machine has done that\r\n-        if (aStr[0] >= '\\xB0') and (aStr[1] >= '\\xA1'):\n-            return 94 * (wrap_ord(aStr[0]) - 0xB0) + wrap_ord(aStr[1]) - 0xA1\n+        first_char, second_char = wrap_ord(aBuf[0]), wrap_ord(aBuf[1])\r\n+        if (first_char >= 0xB0) and (second_char >= 0xA1):\r\n+            return 94 * (first_char - 0xB0) + second_char - 0xA1\r\n         else:\r\n             return -1\r\n \r\n@@ -170,18 +171,17 @@ class Big5DistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = BIG5_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = BIG5_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for big5 encoding, we are interested\r\n         #   first  byte range: 0xa4 -- 0xfe\r\n         #   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe\r\n         # no validation needed here. State machine has done that\r\n-        if aStr[0] >= '\\xA4':\n-            if aStr[1] >= '\\xA1':\n-                return (157 * (wrap_ord(aStr[0]) - 0xA4) + wrap_ord(aStr[1])\n-                        - 0xA1 + 63)\n+        first_char, second_char = wrap_ord(aBuf[0]), wrap_ord(aBuf[1])\r\n+        if first_char >= 0xA4:\r\n+            if second_char >= 0xA1:\r\n+                return 157 * (first_char - 0xA4) + second_char - 0xA1 + 63\r\n             else:\r\n-                return (157 * (wrap_ord(aStr[0]) - 0xA4) + wrap_ord(aStr[1])\n-                        - 0x40)\n+                return 157 * (first_char - 0xA4) + second_char - 0x40\r\n         else:\r\n             return -1\r\n \r\n@@ -193,19 +193,20 @@ class SJISDistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = JIS_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for sjis encoding, we are interested\r\n         #   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xfe\r\n         #   second byte range: 0x40 -- 0x7e,  0x81 -- oxfe\r\n         # no validation needed here. State machine has done that\r\n-        if (aStr[0] >= '\\x81') and (aStr[0] <= '\\x9F'):\n-            order = 188 * (wrap_ord(aStr[0]) - 0x81)\n-        elif (aStr[0] >= '\\xE0') and (aStr[0] <= '\\xEF'):\n-            order = 188 * (wrap_ord(aStr[0]) - 0xE0 + 31)\n+        first_char, second_char = wrap_ord(aBuf[0]), wrap_ord(aBuf[1])\r\n+        if (first_char >= 0x81) and (first_char <= 0x9F):\r\n+            order = 188 * (first_char - 0x81)\r\n+        elif (first_char >= 0xE0) and (first_char <= 0xEF):\r\n+            order = 188 * (first_char - 0xE0 + 31)\r\n         else:\r\n             return -1\r\n-        order = order + wrap_ord(aStr[1]) - 0x40\n-        if aStr[1] > '\\x7F':\n+        order = order + second_char - 0x40\r\n+        if second_char > 0x7F:\r\n             order = -1\r\n         return order\r\n \r\n@@ -217,12 +218,13 @@ class EUCJPDistributionAnalysis(CharDistributionAnalysis):\n         self._mTableSize = JIS_TABLE_SIZE\r\n         self._mTypicalDistributionRatio = JIS_TYPICAL_DISTRIBUTION_RATIO\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         # for euc-JP encoding, we are interested\r\n         #   first  byte range: 0xa0 -- 0xfe\r\n         #   second byte range: 0xa1 -- 0xfe\r\n         # no validation needed here. State machine has done that\r\n-        if aStr[0] >= '\\xA0':\n-            return 94 * (wrap_ord(aStr[0]) - 0xA1) + wrap_ord(aStr[1]) - 0xa1\n+        char = wrap_ord(aBuf[0])\r\n+        if char >= 0xA0:\r\n+            return 94 * (char - 0xA1) + wrap_ord(aBuf[1]) - 0xa1\r\n         else:\r\n             return -1\r\n\n@@ -25,8 +25,8 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-import sys\n from . import constants\r\n+import sys\r\n from .charsetprober import CharSetProber\r\n \r\n \r\n@@ -88,8 +88,8 @@ class CharSetGroupProber(CharSetProber):\n                 continue\r\n             if not prober.active:\r\n                 if constants._debug:\r\n-                    sys.stderr.write(prober.get_charset_name() + ' not '\n-                                     'active\\n')\n+                    sys.stderr.write(prober.get_charset_name()\r\n+                                     + ' not active\\n')\r\n                 continue\r\n             cf = prober.get_confidence()\r\n             if constants._debug:\r\n@@ -98,7 +98,6 @@ class CharSetGroupProber(CharSetProber):\n             if bestConf < cf:\r\n                 bestConf = cf\r\n                 self._mBestGuessProber = prober\r\n-\n         if not self._mBestGuessProber:\r\n             return 0.0\r\n         return bestConf\r\n\n\n@@ -25,7 +25,7 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-from .constants import eStart, eError\n+from .constants import eStart\r\n from .compat import wrap_ord\r\n \r\n \r\n@@ -42,18 +42,15 @@ class CodingStateMachine:\n     def next_state(self, c):\r\n         # for each byte we get its class\r\n         # if it is first byte, we also get byte length\r\n-        try:\n+        # PY3K: aBuf is a byte stream, so c is an int, not a byte\r\n         byteCls = self._mModel['classTable'][wrap_ord(c)]\r\n-        except IndexError:\n-            return eError\n         if self._mCurrentState == eStart:\r\n             self._mCurrentBytePos = 0\r\n             self._mCurrentCharLen = self._mModel['charLenTable'][byteCls]\r\n-\n         # from byte's class and stateTable, we get its next state\r\n-        next_state = (self._mCurrentState + self._mModel['classFactor'] +\n-                      byteCls)\n-        self._mCurrentState = self._mModel['stateTable'][next_state]\n+        curr_state = (self._mCurrentState * self._mModel['classFactor']\r\n+                      + byteCls)\r\n+        self._mCurrentState = self._mModel['stateTable'][curr_state]\r\n         self._mCurrentBytePos += 1\r\n         return self._mCurrentState\r\n \r\n\n@@ -19,11 +19,8 @@\n ######################### END LICENSE BLOCK #########################\n \n \n-from sys import version_info\n-\n-\n def wrap_ord(a):\n-    if isinstance(a, str) and version_info < (3, 0):\n+    if isinstance(a, str):\n         return ord(a)\n-    elif isinstance(a, int) and version_info >= (3, 0):\n+    elif isinstance(a, int):\n         return a\n\n\n@@ -30,6 +30,7 @@ from .escsm import (HZSMModel, ISO2022CNSMModel, ISO2022JPSMModel,\n                     ISO2022KRSMModel)\r\n from .charsetprober import CharSetProber\r\n from .codingstatemachine import CodingStateMachine\r\n+from .compat import wrap_ord\r\n \r\n \r\n class EscCharSetProber(CharSetProber):\r\n@@ -64,12 +65,13 @@ class EscCharSetProber(CharSetProber):\n \r\n     def feed(self, aBuf):\r\n         for c in aBuf:\r\n+            # PY3K: aBuf is a byte array, so c is an int, not a byte\r\n             for codingSM in self._mCodingSM:\r\n                 if not codingSM:\r\n                     continue\r\n                 if not codingSM.active:\r\n                     continue\r\n-                codingState = codingSM.next_state(c)\n+                codingState = codingSM.next_state(wrap_ord(c))\r\n                 if codingState == constants.eError:\r\n                     codingSM.active = False\r\n                     self._mActiveSM -= 1\r\n@@ -78,7 +80,7 @@ class EscCharSetProber(CharSetProber):\n                         return self.get_state()\r\n                 elif codingState == constants.eItsMe:\r\n                     self._mState = constants.eFoundIt\r\n-                    self._mDetectedCharset = codingSM.get_coding_state_machine()\n+                    self._mDetectedCharset = codingSM.get_coding_state_machine()  # nopep8\r\n                     return self.get_state()\r\n \r\n         return self.get_state()\r\n\n@@ -238,3 +238,5 @@ ISO2022KRSMModel = {'classTable': ISO2022KR_cls,\n                     'stateTable': ISO2022KR_st,\r\n                     'charLenTable': ISO2022KRCharLenTable,\r\n                     'name': \"ISO-2022-KR\"}\r\n+\r\n+# flake8: noqa\r\n\n@@ -52,12 +52,13 @@ class EUCJPProber(MultiByteCharSetProber):\n     def feed(self, aBuf):\r\n         aLen = len(aBuf)\r\n         for i in range(0, aLen):\r\n+            # PY3K: aBuf is a byte array, so aBuf[i] is an int, not a byte\r\n             codingState = self._mCodingSM.next_state(aBuf[i])\r\n             if codingState == constants.eError:\r\n                 if constants._debug:\r\n-                    sys.stderr.write(self.get_charset_name() +\n-                                     ' prober hit error at byte ' + str(i) +\n-                                     '\\n')\n+                    sys.stderr.write(self.get_charset_name()\r\n+                                     + ' prober hit error at byte ' + str(i)\r\n+                                     + '\\n')\r\n                 self._mState = constants.eNotMe\r\n                 break\r\n             elif codingState == constants.eItsMe:\r\n\n@@ -592,3 +592,5 @@ EUCKRCharToFreqOrder = ( \\\n 8704,8705,8706,8707,8708,8709,8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,\n 8720,8721,8722,8723,8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,\n 8736,8737,8738,8739,8740,8741)\n+\n+# flake8: noqa\n\n\n@@ -46,7 +46,7 @@ EUCTW_TYPICAL_DISTRIBUTION_RATIO = 0.75\n # Char to FreqOrder table ,\n EUCTW_TABLE_SIZE = 8102\n \n-EUCTWCharToFreqOrder = ( \\\n+EUCTWCharToFreqOrder = (\n    1,1800,1506, 255,1431, 198,   9,  82,   6,7310, 177, 202,3615,1256,2808, 110, # 2742\n 3735,  33,3241, 261,  76,  44,2113,  16,2931,2184,1176, 659,3868,  26,3404,2643, # 2758\n 1198,3869,3313,4060, 410,2211, 302, 590, 361,1963,   8, 204,  58,4296,7311,1931, # 2774\n@@ -424,3 +424,5 @@ EUCTWCharToFreqOrder = ( \\\n 8694,8695,8696,8697,8698,8699,8700,8701,8702,8703,8704,8705,8706,8707,8708,8709, # 8710\n 8710,8711,8712,8713,8714,8715,8716,8717,8718,8719,8720,8721,8722,8723,8724,8725, # 8726\n 8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741) # 8742\n+\n+# flake8: noqa\n\n@@ -30,7 +30,6 @@ from .codingstatemachine import CodingStateMachine\n from .chardistribution import EUCTWDistributionAnalysis\r\n from .mbcssm import EUCTWSMModel\r\n \r\n-\n class EUCTWProber(MultiByteCharSetProber):\r\n     def __init__(self):\r\n         MultiByteCharSetProber.__init__(self)\r\n\n@@ -43,7 +43,7 @@ GB2312_TYPICAL_DISTRIBUTION_RATIO = 0.9\n \n GB2312_TABLE_SIZE = 3760\n \n-GB2312CharToFreqOrder = ( \\\n+GB2312CharToFreqOrder = (\n 1671, 749,1443,2364,3924,3807,2330,3921,1704,3463,2691,1511,1515, 572,3191,2205,\n 2361, 224,2558, 479,1711, 963,3162, 440,4060,1905,2966,2947,3580,2647,3961,3842,\n 2204, 869,4207, 970,2678,5626,2944,2956,1479,4048, 514,3595, 588,1346,2820,3409,\n@@ -469,3 +469,4 @@ GB2312CharToFreqOrder = ( \\\n 5867,5507,6273,4206,6274,4789,6098,6764,3619,3646,3833,3804,2394,3788,4936,3978,\n 4866,4899,6099,6100,5559,6478,6765,3599,5868,6101,5869,5870,6275,6766,4527,6767)\n \n+# flake8: noqa\n\n@@ -30,7 +30,6 @@ from .codingstatemachine import CodingStateMachine\n from .chardistribution import GB2312DistributionAnalysis\r\n from .mbcssm import GB2312SMModel\r\n \r\n-\n class GB2312Prober(MultiByteCharSetProber):\r\n     def __init__(self):\r\n         MultiByteCharSetProber.__init__(self)\r\n\n@@ -26,7 +26,8 @@\n ######################### END LICENSE BLOCK #########################\r\n \r\n from .charsetprober import CharSetProber\r\n-from . import constants\n+from .constants import eNotMe, eDetecting\r\n+from .compat import wrap_ord\r\n \r\n # This prober doesn't actually recognize a language or a charset.\r\n # It is a helper prober for the use of the Hebrew model probers\r\n@@ -126,16 +127,16 @@ from . import constants\n # charset identified, either \"windows-1255\" or \"ISO-8859-8\".\r\n \r\n # windows-1255 / ISO-8859-8 code points of interest\r\n-FINAL_KAF = '\\xea'\n-NORMAL_KAF = '\\xeb'\n-FINAL_MEM = '\\xed'\n-NORMAL_MEM = '\\xee'\n-FINAL_NUN = '\\xef'\n-NORMAL_NUN = '\\xf0'\n-FINAL_PE = '\\xf3'\n-NORMAL_PE = '\\xf4'\n-FINAL_TSADI = '\\xf5'\n-NORMAL_TSADI = '\\xf6'\n+FINAL_KAF = 0xea\r\n+NORMAL_KAF = 0xeb\r\n+FINAL_MEM = 0xed\r\n+NORMAL_MEM = 0xee\r\n+FINAL_NUN = 0xef\r\n+NORMAL_NUN = 0xf0\r\n+FINAL_PE = 0xf3\r\n+NORMAL_PE = 0xf4\r\n+FINAL_TSADI = 0xf5\r\n+NORMAL_TSADI = 0xf6\r\n \r\n # Minimum Visual vs Logical final letter score difference.\r\n # If the difference is below this, don't rely solely on the final letter score\r\n@@ -162,8 +163,8 @@ class HebrewProber(CharSetProber):\n         self._mFinalCharLogicalScore = 0\r\n         self._mFinalCharVisualScore = 0\r\n         # The two last characters seen in the previous buffer,\r\n-        # mPrev and mBeforePrev are initialized to space in order to simulate a\n-        # word delimiter at the beginning of the data\n+        # mPrev and mBeforePrev are initialized to space in order to simulate\r\n+        # a word delimiter at the beginning of the data\r\n         self._mPrev = ' '\r\n         self._mBeforePrev = ' '\r\n         # These probers are owned by the group prober.\r\n@@ -173,7 +174,8 @@ class HebrewProber(CharSetProber):\n         self._mVisualProber = visualProber\r\n \r\n     def is_final(self, c):\r\n-        return c in [FINAL_KAF, FINAL_MEM, FINAL_NUN, FINAL_PE, FINAL_TSADI]\n+        return wrap_ord(c) in [FINAL_KAF, FINAL_MEM, FINAL_NUN, FINAL_PE,\r\n+                               FINAL_TSADI]\r\n \r\n     def is_non_final(self, c):\r\n         # The normal Tsadi is not a good Non-Final letter due to words like\r\n@@ -186,7 +188,7 @@ class HebrewProber(CharSetProber):\n         # for example legally end with a Non-Final Pe or Kaf. However, the\r\n         # benefit of these letters as Non-Final letters outweighs the damage\r\n         # since these words are quite rare.\r\n-        return c in [NORMAL_KAF, NORMAL_MEM, NORMAL_NUN, NORMAL_PE]\n+        return wrap_ord(c) in [NORMAL_KAF, NORMAL_MEM, NORMAL_NUN, NORMAL_PE]\r\n \r\n     def feed(self, aBuf):\r\n         # Final letter analysis for logical-visual decision.\r\n@@ -194,8 +196,8 @@ class HebrewProber(CharSetProber):\n         # or visual Hebrew.\r\n         # The following cases are checked:\r\n         # 1) A word longer than 1 letter, ending with a final letter. This is\r\n-        # an indication that the text is laid out \"naturally\" since the final\n-        # letter really appears at the end. +1 for logical score.\n+        #    an indication that the text is laid out \"naturally\" since the\r\n+        #    final letter really appears at the end. +1 for logical score.\r\n         # 2) A word longer than 1 letter, ending with a Non-Final letter. In\r\n         #    normal Hebrew, words ending with Kaf, Mem, Nun, Pe or Tsadi,\r\n         #    should not end with the Non-Final form of that letter. Exceptions\r\n@@ -215,9 +217,9 @@ class HebrewProber(CharSetProber):\n         # We automatically filter out all 7-bit characters (replace them with\r\n         # spaces) so the word boundary detection works properly. [MAP]\r\n \r\n-        if self.get_state() == constants.eNotMe:\n+        if self.get_state() == eNotMe:\r\n             # Both model probers say it's not them. No reason to continue.\r\n-            return constants.eNotMe\n+            return eNotMe\r\n \r\n         aBuf = self.filter_high_bit_only(aBuf)\r\n \r\n@@ -231,8 +233,8 @@ class HebrewProber(CharSetProber):\n                         # case (1) [-2:not space][-1:final letter][cur:space]\r\n                         self._mFinalCharLogicalScore += 1\r\n                     elif self.is_non_final(self._mPrev):\r\n-                        # case (2) [-2:not space]\n-                        #     [-1:Non-Final letter][cur:space]\n+                        # case (2) [-2:not space][-1:Non-Final letter][\r\n+                        #  cur:space]\r\n                         self._mFinalCharVisualScore += 1\r\n             else:\r\n                 # Not standing on a space\r\n@@ -245,7 +247,7 @@ class HebrewProber(CharSetProber):\n \r\n         # Forever detecting, till the end or until both model probers return\r\n         # eNotMe (handled above)\r\n-        return constants.eDetecting\n+        return eDetecting\r\n \r\n     def get_charset_name(self):\r\n         # Make the decision: is it Logical or Visual?\r\n@@ -264,8 +266,8 @@ class HebrewProber(CharSetProber):\n         if modelsub < -MIN_MODEL_DISTANCE:\r\n             return VISUAL_HEBREW_NAME\r\n \r\n-        # Still no good, back to final letter distance, maybe it'll save\n-        # the day.\n+        # Still no good, back to final letter distance, maybe it'll save the\r\n+        # day.\r\n         if finalsub < 0.0:\r\n             return VISUAL_HEBREW_NAME\r\n \r\n@@ -275,7 +277,7 @@ class HebrewProber(CharSetProber):\n \r\n     def get_state(self):\r\n         # Remain active as long as any of the model probers are active.\r\n-        if (self._mLogicalProber.get_state() == constants.eNotMe) and \\\n-           (self._mVisualProber.get_state() == constants.eNotMe):\n-            return constants.eNotMe\n-        return constants.eDetecting\n+        if (self._mLogicalProber.get_state() == eNotMe) and \\\r\n+           (self._mVisualProber.get_state() == eNotMe):\r\n+            return eNotMe\r\n+        return eDetecting\r\n\n@@ -46,7 +46,7 @@ JIS_TYPICAL_DISTRIBUTION_RATIO = 3.0\n # Char to FreqOrder table ,\n JIS_TABLE_SIZE = 4368\n \n-JISCharToFreqOrder = ( \\\n+JISCharToFreqOrder = (\n   40,   1,   6, 182, 152, 180, 295,2127, 285, 381,3295,4304,3068,4606,3165,3510, #   16\n 3511,1822,2785,4607,1193,2226,5070,4608, 171,2996,1247,  18, 179,5071, 856,1661, #   32\n 1262,5072, 619, 127,3431,3512,3230,1899,1700, 232, 228,1294,1298, 284, 283,2041, #   48\n@@ -565,3 +565,5 @@ JISCharToFreqOrder = ( \\\n 8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239, # 8240\n 8240,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8254,8255, # 8256\n 8256,8257,8258,8259,8260,8261,8262,8263,8264,8265,8266,8267,8268,8269,8270,8271) # 8272\n+\n+# flake8: noqa\n\n@@ -33,454 +33,119 @@ ENOUGH_REL_THRESHOLD = 100\n MAX_REL_THRESHOLD = 1000\r\n MINIMUM_DATA_THRESHOLD = 4\r\n \r\n-# This is hiragana 2-char sequence table, the number in each cell represents\n-# its frequency category\n+# This is hiragana 2-char sequence table, the number in each cell represents its frequency category\r\n jp2CharContext = (\r\n-    (0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 1),\n-\n-    (2, 4, 0, 4, 0, 3, 0, 4, 0, 3, 4, 4, 4, 2, 4, 3, 3, 4, 3, 2, 3, 3, 4, 2,\n-     3, 3, 3, 2, 4, 1, 4, 3, 3, 1, 5, 4, 3, 4, 3, 4, 3, 5, 3, 0, 3, 5, 4,\n-     2, 0, 3, 1, 0, 3, 3, 0, 3, 3, 0, 1, 1, 0, 4, 3, 0, 3, 3, 0, 4, 0, 2,\n-     0, 3, 5, 5, 5, 5, 4, 0, 4, 1, 0, 3, 4),\n-\n-    (0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2),\n-\n-    (0, 4, 0, 5, 0, 5, 0, 4, 0, 4, 5, 4, 4, 3, 5, 3, 5, 1, 5, 3, 4, 3, 4, 4,\n-     3, 4, 3, 3, 4, 3, 5, 4, 4, 3, 5, 5, 3, 5, 5, 5, 3, 5, 5, 3, 4, 5, 5,\n-     3, 1, 3, 2, 0, 3, 4, 0, 4, 2, 0, 4, 2, 1, 5, 3, 2, 3, 5, 0, 4, 0, 2,\n-     0, 5, 4, 4, 5, 4, 5, 0, 4, 0, 0, 4, 4),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n-\n-    (0, 3, 0, 4, 0, 3, 0, 3, 0, 4, 5, 4, 3, 3, 3, 3, 4, 3, 5, 4, 4, 3, 5, 4,\n-     4, 3, 4, 3, 4, 4, 4, 4, 5, 3, 4, 4, 3, 4, 5, 5, 4, 5, 5, 1, 4, 5, 4,\n-     3, 0, 3, 3, 1, 3, 3, 0, 4, 4, 0, 3, 3, 1, 5, 3, 3, 3, 5, 0, 4, 0, 3,\n-     0, 4, 4, 3, 4, 3, 3, 0, 4, 1, 1, 3, 4),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n-\n-    (0, 4, 0, 3, 0, 3, 0, 4, 0, 3, 4, 4, 3, 2, 2, 1, 2, 1, 3, 1, 3, 3, 3, 3,\n-     3, 4, 3, 1, 3, 3, 5, 3, 3, 0, 4, 3, 0, 5, 4, 3, 3, 5, 4, 4, 3, 4, 4,\n-     5, 0, 1, 2, 0, 1, 2, 0, 2, 2, 0, 1, 0, 0, 5, 2, 2, 1, 4, 0, 3, 0, 1,\n-     0, 4, 4, 3, 5, 4, 3, 0, 2, 1, 0, 4, 3),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n-\n-    (0, 3, 0, 5, 0, 4, 0, 2, 1, 4, 4, 2, 4, 1, 4, 2, 4, 2, 4, 3, 3, 3, 4, 3,\n-     3, 3, 3, 1, 4, 2, 3, 3, 3, 1, 4, 4, 1, 1, 1, 4, 3, 3, 2, 0, 2, 4, 3,\n-     2, 0, 3, 3, 0, 3, 1, 1, 0, 0, 0, 3, 3, 0, 4, 2, 2, 3, 4, 0, 4, 0, 3,\n-     0, 4, 4, 5, 3, 4, 4, 0, 3, 0, 0, 1, 4),\n-\n-    (1, 4, 0, 4, 0, 4, 0, 4, 0, 3, 5, 4, 4, 3, 4, 3, 5, 4, 3, 3, 4, 3, 5, 4,\n-     4, 4, 4, 3, 4, 2, 4, 3, 3, 1, 5, 4, 3, 2, 4, 5, 4, 5, 5, 4, 4, 5,\n-     4, 4, 0, 3, 2, 2, 3, 3, 0, 4, 3, 1, 3, 2, 1, 4, 3, 3, 4, 5, 0, 3,\n-     0, 2, 0, 4, 5, 5, 4, 5, 4, 0, 4, 0, 0, 5, 4),\n-\n-    (0, 5, 0, 5, 0, 4, 0, 3, 0, 4, 4, 3, 4, 3, 3, 3, 4, 0, 4, 4, 4, 3, 4, 3,\n-     4, 3, 3, 1, 4, 2, 4, 3, 4, 0, 5, 4, 1, 4, 5, 4, 4, 5, 3, 2, 4, 3,\n-     4, 3, 2, 4, 1, 3, 3, 3, 2, 3, 2, 0, 4, 3, 3, 4, 3, 3, 3, 4, 0, 4,\n-     0, 3, 0, 4, 5, 4, 4, 4, 3, 0, 4, 1, 0, 1, 3),\n-\n-    (0, 3, 1, 4, 0, 3, 0, 2, 0, 3, 4, 4, 3, 1, 4, 2, 3, 3, 4, 3, 4, 3, 4, 3,\n-     4, 4, 3, 2, 3, 1, 5, 4, 4, 1, 4, 4, 3, 5, 4, 4, 3, 5, 5, 4, 3, 4,\n-     4, 3, 1, 2, 3, 1, 2, 2, 0, 3, 2, 0, 3, 1, 0, 5, 3, 3, 3, 4, 3, 3,\n-     3, 3, 4, 4, 4, 4, 5, 4, 2, 0, 3, 3, 2, 4, 3),\n-\n-    (0, 2, 0, 3, 0, 1, 0, 1, 0, 0, 3, 2, 0, 0, 2, 0, 1, 0, 2, 1, 3, 3, 3, 1,\n-     2, 3, 1, 0, 1, 0, 4, 2, 1, 1, 3, 3, 0, 4, 3, 3, 1, 4, 3, 3, 0, 3,\n-     3, 2, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 4, 1, 0, 2, 3, 2, 2,\n-     2, 1, 3, 3, 3, 4, 4, 3, 2, 0, 3, 1, 0, 3, 3),\n-\n-    (0, 4, 0, 4, 0, 3, 0, 3, 0, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 3, 4, 2, 4, 3,\n-     4, 3, 3, 2, 4, 3, 4, 5, 4, 1, 4, 5, 3, 5, 4, 5, 3, 5, 4, 0, 3, 5,\n-     5, 3, 1, 3, 3, 2, 2, 3, 0, 3, 4, 1, 3, 3, 2, 4, 3, 3, 3, 4, 0, 4,\n-     0, 3, 0, 4, 5, 4, 4, 5, 3, 0, 4, 1, 0, 3, 4),\n-\n-    (0, 2, 0, 3, 0, 3, 0, 0, 0, 2, 2, 2, 1, 0, 1, 0, 0, 0, 3, 0, 3, 0, 3, 0,\n-     1, 3, 1, 0, 3, 1, 3, 3, 3, 1, 3, 3, 3, 0, 1, 3, 1, 3, 4, 0, 0, 3,\n-     1, 1, 0, 3, 2, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 3, 3, 2, 0, 3, 0, 0,\n-     0, 0, 0, 3, 4, 3, 4, 3, 3, 0, 3, 0, 0, 2, 3),\n-\n-    (2, 3, 0, 3, 0, 2, 0, 1, 0, 3, 3, 4, 3, 1, 3, 1, 1, 1, 3, 1, 4, 3, 4, 3,\n-     3, 3, 0, 0, 3, 1, 5, 4, 3, 1, 4, 3, 2, 5, 5, 4, 4, 4, 4, 3, 3, 4,\n-     4, 4, 0, 2, 1, 1, 3, 2, 0, 1, 2, 0, 0, 1, 0, 4, 1, 3, 3, 3, 0, 3,\n-     0, 1, 0, 4, 4, 4, 5, 5, 3, 0, 2, 0, 0, 4, 4),\n-\n-    (0, 2, 0, 1, 0, 3, 1, 3, 0, 2, 3, 3, 3, 0, 3, 1, 0, 0, 3, 0, 3, 2, 3, 1,\n-     3, 2, 1, 1, 0, 0, 4, 2, 1, 0, 2, 3, 1, 4, 3, 2, 0, 4, 4, 3, 1, 3,\n-     1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 1, 1, 2, 0, 3,\n-     0, 0, 0, 3, 4, 2, 4, 3, 2, 0, 1, 0, 0, 3, 3),\n-\n-    (0, 1, 0, 4, 0, 5, 0, 4, 0, 2, 4, 4, 2, 3, 3, 2, 3, 3, 5, 3, 3, 3, 4, 3,\n-     4, 2, 3, 0, 4, 3, 3, 3, 4, 1, 4, 3, 2, 1, 5, 5, 3, 4, 5, 1, 3, 5,\n-     4, 2, 0, 3, 3, 0, 1, 3, 0, 4, 2, 0, 1, 3, 1, 4, 3, 3, 3, 3, 0, 3,\n-     0, 1, 0, 3, 4, 4, 4, 5, 5, 0, 3, 0, 1, 4, 5),\n-\n-    (0, 2, 0, 3, 0, 3, 0, 0, 0, 2, 3, 1, 3, 0, 4, 0, 1, 1, 3, 0, 3, 4, 3, 2,\n-     3, 1, 0, 3, 3, 2, 3, 1, 3, 0, 2, 3, 0, 2, 1, 4, 1, 2, 2, 0, 0, 3,\n-     3, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0, 3, 2, 1, 3, 3, 0, 2,\n-     0, 2, 0, 0, 3, 3, 1, 2, 4, 0, 3, 0, 2, 2, 3),\n-\n-    (2, 4, 0, 5, 0, 4, 0, 4, 0, 2, 4, 4, 4, 3, 4, 3, 3, 3, 1, 2, 4, 3, 4, 3,\n-     4, 4, 5, 0, 3, 3, 3, 3, 2, 0, 4, 3, 1, 4, 3, 4, 1, 4, 4, 3, 3, 4,\n-     4, 3, 1, 2, 3, 0, 4, 2, 0, 4, 1, 0, 3, 3, 0, 4, 3, 3, 3, 4, 0, 4,\n-     0, 2, 0, 3, 5, 3, 4, 5, 2, 0, 3, 0, 0, 4, 5),\n-\n-    (0, 3, 0, 4, 0, 1, 0, 1, 0, 1, 3, 2, 2, 1, 3, 0, 3, 0, 2, 0, 2, 0, 3, 0,\n-     2, 0, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 0, 0, 4, 0, 3, 1, 0, 2, 1,\n-     3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 3, 1, 0, 3,\n-     0, 0, 0, 1, 4, 4, 4, 3, 0, 0, 4, 0, 0, 1, 4),\n-\n-    (1, 4, 1, 5, 0, 3, 0, 3, 0, 4, 5, 4, 4, 3, 5, 3, 3, 4, 4, 3, 4, 1, 3, 3,\n-     3, 3, 2, 1, 4, 1, 5, 4, 3, 1, 4, 4, 3, 5, 4, 4, 3, 5, 4, 3, 3, 4,\n-     4, 4, 0, 3, 3, 1, 2, 3, 0, 3, 1, 0, 3, 3, 0, 5, 4, 4, 4, 4, 4, 4,\n-     3, 3, 5, 4, 4, 3, 3, 5, 4, 0, 3, 2, 0, 4, 4),\n-\n-    (0, 2, 0, 3, 0, 1, 0, 0, 0, 1, 3, 3, 3, 2, 4, 1, 3, 0, 3, 1, 3, 0, 2, 2,\n-     1, 1, 0, 0, 2, 0, 4, 3, 1, 0, 4, 3, 0, 4, 4, 4, 1, 4, 3, 1, 1, 3,\n-     3, 1, 0, 2, 0, 0, 1, 3, 0, 0, 0, 0, 2, 0, 0, 4, 3, 2, 4, 3, 5, 4,\n-     3, 3, 3, 4, 3, 3, 4, 3, 3, 0, 2, 1, 0, 3, 3),\n-\n-    (0, 2, 0, 4, 0, 3, 0, 2, 0, 2, 5, 5, 3, 4, 4, 4, 4, 1, 4, 3, 3, 0, 4, 3,\n-     4, 3, 1, 3, 3, 2, 4, 3, 0, 3, 4, 3, 0, 3, 4, 4, 2, 4, 4, 0, 4, 5,\n-     3, 3, 2, 2, 1, 1, 1, 2, 0, 1, 5, 0, 3, 3, 2, 4, 3, 3, 3, 4, 0, 3,\n-     0, 2, 0, 4, 4, 3, 5, 5, 0, 0, 3, 0, 2, 3, 3),\n-\n-    (0, 3, 0, 4, 0, 3, 0, 1, 0, 3, 4, 3, 3, 1, 3, 3, 3, 0, 3, 1, 3, 0, 4, 3,\n-     3, 1, 1, 0, 3, 0, 3, 3, 0, 0, 4, 4, 0, 1, 5, 4, 3, 3, 5, 0, 3, 3,\n-     4, 3, 0, 2, 0, 1, 1, 1, 0, 1, 3, 0, 1, 2, 1, 3, 3, 2, 3, 3, 0, 3,\n-     0, 1, 0, 1, 3, 3, 4, 4, 1, 0, 1, 2, 2, 1, 3),\n-\n-    (0, 1, 0, 4, 0, 4, 0, 3, 0, 1, 3, 3, 3, 2, 3, 1, 1, 0, 3, 0, 3, 3, 4, 3,\n-     2, 4, 2, 0, 1, 0, 4, 3, 2, 0, 4, 3, 0, 5, 3, 3, 2, 4, 4, 4, 3, 3,\n-     3, 4, 0, 1, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 2, 3, 3, 3, 0, 3,\n-     0, 0, 0, 4, 4, 4, 5, 3, 2, 0, 3, 3, 0, 3, 5),\n-\n-    (0, 2, 0, 3, 0, 0, 0, 3, 0, 1, 3, 0, 2, 0, 0, 0, 1, 0, 3, 1, 1, 3, 3, 0,\n-     0, 3, 0, 0, 3, 0, 2, 3, 1, 0, 3, 1, 0, 3, 3, 2, 0, 4, 2, 2, 0, 2,\n-     0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 0, 1,\n-     0, 0, 0, 1, 3, 1, 2, 0, 0, 0, 1, 0, 0, 1, 4),\n-\n-    (0, 3, 0, 3, 0, 5, 0, 1, 0, 2, 4, 3, 1, 3, 3, 2, 1, 1, 5, 2, 1, 0, 5, 1,\n-     2, 0, 0, 0, 3, 3, 2, 2, 3, 2, 4, 3, 0, 0, 3, 3, 1, 3, 3, 0, 2, 5,\n-     3, 4, 0, 3, 3, 0, 1, 2, 0, 2, 2, 0, 3, 2, 0, 2, 2, 3, 3, 3, 0, 2,\n-     0, 1, 0, 3, 4, 4, 2, 5, 4, 0, 3, 0, 0, 3, 5),\n-\n-    (0, 3, 0, 3, 0, 3, 0, 1, 0, 3, 3, 3, 3, 0, 3, 0, 2, 0, 2, 1, 1, 0, 2, 0,\n-     1, 0, 0, 0, 2, 1, 0, 0, 1, 0, 3, 2, 0, 0, 3, 3, 1, 2, 3, 1, 0, 3,\n-     3, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 3, 1, 2, 3, 0, 3,\n-     0, 1, 0, 3, 2, 1, 0, 4, 3, 0, 1, 1, 0, 3, 3),\n-\n-    (0, 4, 0, 5, 0, 3, 0, 3, 0, 4, 5, 5, 4, 3, 5, 3, 4, 3, 5, 3, 3, 2, 5, 3,\n-     4, 4, 4, 3, 4, 3, 4, 5, 5, 3, 4, 4, 3, 4, 4, 5, 4, 4, 4, 3, 4, 5,\n-     5, 4, 2, 3, 4, 2, 3, 4, 0, 3, 3, 1, 4, 3, 2, 4, 3, 3, 5, 5, 0, 3,\n-     0, 3, 0, 5, 5, 5, 5, 4, 4, 0, 4, 0, 1, 4, 4),\n-\n-    (0, 4, 0, 4, 0, 3, 0, 3, 0, 3, 5, 4, 4, 2, 3, 2, 5, 1, 3, 2, 5, 1, 4, 2,\n-     3, 2, 3, 3, 4, 3, 3, 3, 3, 2, 5, 4, 1, 3, 3, 5, 3, 4, 4, 0, 4, 4,\n-     3, 1, 1, 3, 1, 0, 2, 3, 0, 2, 3, 0, 3, 0, 0, 4, 3, 1, 3, 4, 0, 3,\n-     0, 2, 0, 4, 4, 4, 3, 4, 5, 0, 4, 0, 0, 3, 4),\n-\n-    (0, 3, 0, 3, 0, 3, 1, 2, 0, 3, 4, 4, 3, 3, 3, 0, 2, 2, 4, 3, 3, 1, 3, 3,\n-     3, 1, 1, 0, 3, 1, 4, 3, 2, 3, 4, 4, 2, 4, 4, 4, 3, 4, 4, 3, 2, 4,\n-     4, 3, 1, 3, 3, 1, 3, 3, 0, 4, 1, 0, 2, 2, 1, 4, 3, 2, 3, 3, 5, 4,\n-     3, 3, 5, 4, 4, 3, 3, 0, 4, 0, 3, 2, 2, 4, 4),\n-\n-    (0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1, 3, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 0,\n-     0, 1, 0, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 3, 1, 0, 0, 0, 1, 1, 0, 1,\n-     1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 0, 3, 4,\n-     0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1),\n-\n-    (0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 4, 1, 4, 0, 3, 0, 4, 0, 3, 0, 4, 0,\n-     3, 0, 3, 0, 4, 1, 5, 1, 4, 0, 0, 3, 0, 5, 0, 5, 2, 0, 1, 0, 0, 0,\n-     2, 1, 4, 0, 1, 3, 0, 0, 3, 0, 0, 3, 1, 1, 4, 1, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0),\n-\n-    (1, 4, 0, 5, 0, 3, 0, 2, 0, 3, 5, 4, 4, 3, 4, 3, 5, 3, 4, 3, 3, 0, 4, 3,\n-     3, 3, 3, 3, 3, 2, 4, 4, 3, 1, 3, 4, 4, 5, 4, 4, 3, 4, 4, 1, 3, 5,\n-     4, 3, 3, 3, 1, 2, 2, 3, 3, 1, 3, 1, 3, 3, 3, 5, 3, 3, 4, 5, 0, 3,\n-     0, 3, 0, 3, 4, 3, 4, 4, 3, 0, 3, 0, 2, 4, 3),\n-\n-    (0, 1, 0, 4, 0, 0, 0, 0, 0, 1, 4, 0, 4, 1, 4, 2, 4, 0, 3, 0, 1, 0, 1, 0,\n-     0, 0, 0, 0, 2, 0, 3, 1, 1, 1, 0, 3, 0, 0, 0, 1, 2, 1, 0, 0, 1, 1,\n-     1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 3, 2, 0, 2, 2, 0, 1,\n-     0, 0, 0, 2, 3, 2, 3, 3, 0, 0, 0, 0, 2, 1, 0),\n-\n-    (0, 5, 1, 5, 0, 3, 0, 3, 0, 5, 4, 4, 5, 1, 5, 3, 3, 0, 4, 3, 4, 3, 5, 3,\n-     4, 3, 3, 2, 4, 3, 4, 3, 3, 0, 3, 3, 1, 4, 4, 3, 4, 4, 4, 3, 4, 5,\n-     5, 3, 2, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 3, 2, 4, 5, 3, 3, 5, 0, 4,\n-     0, 3, 0, 4, 4, 3, 5, 3, 3, 0, 3, 4, 0, 4, 3),\n-\n-    (0, 5, 0, 5, 0, 3, 0, 2, 0, 4, 4, 3, 5, 2, 4, 3, 3, 3, 4, 4, 4, 3, 5, 3,\n-     5, 3, 3, 1, 4, 0, 4, 3, 3, 0, 3, 3, 0, 4, 4, 4, 4, 5, 4, 3, 3, 5,\n-     5, 3, 2, 3, 1, 2, 3, 2, 0, 1, 0, 0, 3, 2, 2, 4, 4, 3, 1, 5, 0, 4,\n-     0, 3, 0, 4, 3, 1, 3, 2, 1, 0, 3, 3, 0, 3, 3),\n-\n-    (0, 4, 0, 5, 0, 5, 0, 4, 0, 4, 5, 5, 5, 3, 4, 3, 3, 2, 5, 4, 4, 3, 5, 3,\n-     5, 3, 4, 0, 4, 3, 4, 4, 3, 2, 4, 4, 3, 4, 5, 4, 4, 5, 5, 0, 3, 5,\n-     5, 4, 1, 3, 3, 2, 3, 3, 1, 3, 1, 0, 4, 3, 1, 4, 4, 3, 4, 5, 0, 4,\n-     0, 2, 0, 4, 3, 4, 4, 3, 3, 0, 4, 0, 0, 5, 5),\n-\n-    (0, 4, 0, 4, 0, 5, 0, 1, 1, 3, 3, 4, 4, 3, 4, 1, 3, 0, 5, 1, 3, 0, 3, 1,\n-     3, 1, 1, 0, 3, 0, 3, 3, 4, 0, 4, 3, 0, 4, 4, 4, 3, 4, 4, 0, 3, 5,\n-     4, 1, 0, 3, 0, 0, 2, 3, 0, 3, 1, 0, 3, 1, 0, 3, 2, 1, 3, 5, 0, 3,\n-     0, 1, 0, 3, 2, 3, 3, 4, 4, 0, 2, 2, 0, 4, 4),\n-\n-    (2, 4, 0, 5, 0, 4, 0, 3, 0, 4, 5, 5, 4, 3, 5, 3, 5, 3, 5, 3, 5, 2, 5, 3,\n-     4, 3, 3, 4, 3, 4, 5, 3, 2, 1, 5, 4, 3, 2, 3, 4, 5, 3, 4, 1, 2, 5,\n-     4, 3, 0, 3, 3, 0, 3, 2, 0, 2, 3, 0, 4, 1, 0, 3, 4, 3, 3, 5, 0, 3,\n-     0, 1, 0, 4, 5, 5, 5, 4, 3, 0, 4, 2, 0, 3, 5),\n-\n-    (0, 5, 0, 4, 0, 4, 0, 2, 0, 5, 4, 3, 4, 3, 4, 3, 3, 3, 4, 3, 4, 2, 5, 3,\n-     5, 3, 4, 1, 4, 3, 4, 4, 4, 0, 3, 5, 0, 4, 4, 4, 4, 5, 3, 1, 3, 4,\n-     5, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 2, 4, 3, 3, 3, 5, 3, 4,\n-     1, 3, 3, 5, 3, 2, 0, 0, 0, 0, 4, 3, 1, 3, 3),\n-\n-    (0, 1, 0, 3, 0, 3, 0, 1, 0, 1, 3, 3, 3, 2, 3, 3, 3, 0, 3, 0, 0, 0, 3, 1,\n-     3, 0, 0, 0, 2, 2, 2, 3, 0, 0, 3, 2, 0, 1, 2, 4, 1, 3, 3, 0, 0, 3,\n-     3, 3, 0, 1, 0, 0, 2, 1, 0, 0, 3, 0, 3, 1, 0, 3, 0, 0, 1, 3, 0, 2,\n-     0, 1, 0, 3, 3, 1, 3, 3, 0, 0, 1, 1, 0, 3, 3),\n-\n-    (0, 2, 0, 3, 0, 2, 1, 4, 0, 2, 2, 3, 1, 1, 3, 1, 1, 0, 2, 0, 3, 1, 2, 3,\n-     1, 3, 0, 0, 1, 0, 4, 3, 2, 3, 3, 3, 1, 4, 2, 3, 3, 3, 3, 1, 0, 3,\n-     1, 4, 0, 1, 1, 0, 1, 2, 0, 1, 1, 0, 1, 1, 0, 3, 1, 3, 2, 2, 0, 1,\n-     0, 0, 0, 2, 3, 3, 3, 1, 0, 0, 0, 0, 0, 2, 3),\n-\n-    (0, 5, 0, 4, 0, 5, 0, 2, 0, 4, 5, 5, 3, 3, 4, 3, 3, 1, 5, 4, 4, 2, 4, 4,\n-     4, 3, 4, 2, 4, 3, 5, 5, 4, 3, 3, 4, 3, 3, 5, 5, 4, 5, 5, 1, 3, 4,\n-     5, 3, 1, 4, 3, 1, 3, 3, 0, 3, 3, 1, 4, 3, 1, 4, 5, 3, 3, 5, 0, 4,\n-     0, 3, 0, 5, 3, 3, 1, 4, 3, 0, 4, 0, 1, 5, 3),\n-\n-    (0, 5, 0, 5, 0, 4, 0, 2, 0, 4, 4, 3, 4, 3, 3, 3, 3, 3, 5, 4, 4, 4, 4, 4,\n-     4, 5, 3, 3, 5, 2, 4, 4, 4, 3, 4, 4, 3, 3, 4, 4, 5, 5, 3, 3, 4, 3,\n-     4, 3, 3, 4, 3, 3, 3, 3, 1, 2, 2, 1, 4, 3, 3, 5, 4, 4, 3, 4, 0, 4,\n-     0, 3, 0, 4, 4, 4, 4, 4, 1, 0, 4, 2, 0, 2, 4),\n-\n-    (0, 4, 0, 4, 0, 3, 0, 1, 0, 3, 5, 2, 3, 0, 3, 0, 2, 1, 4, 2, 3, 3, 4, 1,\n-     4, 3, 3, 2, 4, 1, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3, 3, 5, 3, 3, 3, 3,\n-     3, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 3, 1, 2, 2, 3, 0, 3,\n-     0, 2, 0, 4, 4, 3, 3, 4, 1, 0, 3, 0, 0, 2, 4),\n-\n-    (0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 2, 0,\n-     1, 0, 0, 0, 0, 0, 3, 1, 3, 0, 3, 2, 0, 0, 0, 1, 0, 3, 2, 0, 0, 2,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 3, 4, 0, 2, 0, 0, 0, 0, 0, 0, 2),\n-\n-    (0, 2, 1, 3, 0, 2, 0, 2, 0, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 4, 2,\n-     2, 1, 2, 1, 4, 0, 4, 3, 1, 3, 3, 3, 2, 4, 3, 5, 4, 3, 3, 3, 3, 3,\n-     3, 3, 0, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 4, 2, 0, 2, 3, 0, 3,\n-     3, 0, 3, 3, 4, 2, 3, 1, 4, 0, 1, 2, 0, 2, 3),\n-\n-    (0, 3, 0, 3, 0, 1, 0, 3, 0, 2, 3, 3, 3, 0, 3, 1, 2, 0, 3, 3, 2, 3, 3, 2,\n-     3, 2, 3, 1, 3, 0, 4, 3, 2, 0, 3, 3, 1, 4, 3, 3, 2, 3, 4, 3, 1, 3,\n-     3, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 4, 1, 1, 0, 3, 0, 3,\n-     1, 0, 2, 3, 3, 3, 3, 3, 1, 0, 0, 2, 0, 3, 3),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n-     0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     3, 0, 2, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3),\n-\n-    (0, 2, 0, 3, 1, 3, 0, 3, 0, 2, 3, 3, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1,\n-     3, 0, 2, 3, 1, 1, 4, 3, 3, 2, 3, 3, 1, 2, 2, 4, 1, 3, 3, 0, 1, 4,\n-     2, 3, 0, 1, 3, 0, 3, 0, 0, 1, 3, 0, 2, 0, 0, 3, 3, 2, 1, 3, 0, 3,\n-     0, 2, 0, 3, 4, 4, 4, 3, 1, 0, 3, 0, 0, 3, 3),\n-\n-    (0, 2, 0, 1, 0, 2, 0, 0, 0, 1, 3, 2, 2, 1, 3, 0, 1, 1, 3, 0, 3, 2, 3, 1,\n-     2, 0, 2, 0, 1, 1, 3, 3, 3, 0, 3, 3, 1, 1, 2, 3, 2, 3, 3, 1, 2, 3,\n-     2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 2, 1, 2, 1, 3, 0, 3,\n-     0, 0, 0, 3, 4, 4, 4, 3, 2, 0, 2, 0, 0, 2, 4),\n-\n-    (0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n-     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n-     0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 3),\n-\n-    (0, 3, 0, 3, 0, 2, 0, 3, 0, 3, 3, 3, 2, 3, 2, 2, 2, 0, 3, 1, 3, 3, 3, 2,\n-     3, 3, 0, 0, 3, 0, 3, 2, 2, 0, 2, 3, 1, 4, 3, 4, 3, 3, 2, 3, 1, 5,\n-     4, 4, 0, 3, 1, 2, 1, 3, 0, 3, 1, 1, 2, 0, 2, 3, 1, 3, 1, 3, 0, 3,\n-     0, 1, 0, 3, 3, 4, 4, 2, 1, 0, 2, 1, 0, 2, 4),\n-\n-    (0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 4, 2, 5, 1, 4, 0, 2, 0, 2, 1, 3, 1, 4, 0,\n-     2, 1, 0, 0, 2, 1, 4, 1, 1, 0, 3, 3, 0, 5, 1, 3, 2, 3, 3, 1, 0, 3,\n-     2, 3, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 1, 0, 3, 0, 2,\n-     0, 1, 0, 3, 3, 3, 4, 3, 3, 0, 0, 0, 0, 2, 3),\n-\n-    (0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 3),\n-\n-    (0, 1, 0, 3, 0, 4, 0, 3, 0, 2, 4, 3, 1, 0, 3, 2, 2, 1, 3, 1, 2, 2, 3, 1,\n-     1, 1, 2, 1, 3, 0, 1, 2, 0, 1, 3, 2, 1, 3, 0, 5, 5, 1, 0, 0, 1, 3,\n-     2, 1, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 3, 4, 0, 1, 1, 1, 3, 2, 0, 2,\n-     0, 1, 0, 2, 3, 3, 1, 2, 3, 0, 1, 0, 1, 0, 4),\n-\n-    (0, 0, 0, 1, 0, 3, 0, 3, 0, 2, 2, 1, 0, 0, 4, 0, 3, 0, 3, 1, 3, 0, 3, 0,\n-     3, 0, 1, 0, 3, 0, 3, 1, 3, 0, 3, 3, 0, 0, 1, 2, 1, 1, 1, 0, 1, 2,\n-     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 0, 2,\n-     0, 0, 0, 0, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1, 4),\n-\n-    (0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 3, 1, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 0, 0,\n-     0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 3, 0, 0, 2, 2, 3, 1, 2, 0, 0, 1,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 2, 3),\n-\n-    (2, 4, 0, 5, 0, 5, 0, 4, 0, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 5, 4,\n-     5, 5, 5, 2, 3, 0, 5, 5, 4, 1, 5, 4, 3, 1, 5, 4, 3, 4, 4, 3, 3, 4,\n-     3, 3, 0, 3, 2, 0, 2, 3, 0, 3, 0, 0, 3, 3, 0, 5, 3, 2, 3, 3, 0, 3,\n-     0, 3, 0, 3, 4, 5, 4, 5, 3, 0, 4, 3, 0, 3, 4),\n-\n-    (0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 4, 3, 2, 3, 2, 3, 0, 4, 3, 3, 3, 3, 3,\n-     3, 3, 3, 0, 3, 2, 4, 3, 3, 1, 3, 4, 3, 4, 4, 4, 3, 4, 4, 3, 2, 4,\n-     4, 1, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 3, 1, 0, 5, 3, 2, 1, 3, 0, 3,\n-     0, 1, 2, 4, 3, 2, 4, 3, 3, 0, 3, 2, 0, 4, 4),\n-\n-    (0, 3, 0, 3, 0, 1, 0, 0, 0, 1, 4, 3, 3, 2, 3, 1, 3, 1, 4, 2, 3, 2, 4, 2,\n-     3, 4, 3, 0, 2, 2, 3, 3, 3, 0, 3, 3, 3, 0, 3, 4, 1, 3, 3, 0, 3, 4,\n-     3, 3, 0, 1, 1, 0, 1, 0, 0, 0, 4, 0, 3, 0, 0, 3, 1, 2, 1, 3, 0, 4,\n-     0, 1, 0, 4, 3, 3, 4, 3, 3, 0, 2, 0, 0, 3, 3),\n-\n-    (0, 3, 0, 4, 0, 1, 0, 3, 0, 3, 4, 3, 3, 0, 3, 3, 3, 1, 3, 1, 3, 3, 4, 3,\n-     3, 3, 0, 0, 3, 1, 5, 3, 3, 1, 3, 3, 2, 5, 4, 3, 3, 4, 5, 3, 2, 5,\n-     3, 4, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0, 4, 2, 2, 1, 3, 0, 3,\n-     0, 2, 0, 4, 4, 3, 5, 3, 2, 0, 1, 1, 0, 3, 4),\n-\n-    (0, 5, 0, 4, 0, 5, 0, 2, 0, 4, 4, 3, 3, 2, 3, 3, 3, 1, 4, 3, 4, 1, 5, 3,\n-     4, 3, 4, 0, 4, 2, 4, 3, 4, 1, 5, 4, 0, 4, 4, 4, 4, 5, 4, 1, 3, 5,\n-     4, 2, 1, 4, 1, 1, 3, 2, 0, 3, 1, 0, 3, 2, 1, 4, 3, 3, 3, 4, 0, 4,\n-     0, 3, 0, 4, 4, 4, 3, 3, 3, 0, 4, 2, 0, 3, 4),\n-\n-    (1, 4, 0, 4, 0, 3, 0, 1, 0, 3, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 0, 3, 2,\n-     2, 1, 2, 0, 3, 1, 2, 1, 2, 0, 3, 2, 0, 2, 2, 3, 3, 4, 3, 0, 3, 3,\n-     1, 2, 0, 1, 1, 3, 1, 2, 0, 0, 3, 0, 1, 1, 0, 3, 2, 2, 3, 3, 0, 3,\n-     0, 0, 0, 2, 3, 3, 4, 3, 3, 0, 1, 0, 0, 1, 4),\n-\n-    (0, 4, 0, 4, 0, 4, 0, 0, 0, 3, 4, 4, 3, 1, 4, 2, 3, 2, 3, 3, 3, 1, 4, 3,\n-     4, 0, 3, 0, 4, 2, 3, 3, 2, 2, 5, 4, 2, 1, 3, 4, 3, 4, 3, 1, 3, 3,\n-     4, 2, 0, 2, 1, 0, 3, 3, 0, 0, 2, 0, 3, 1, 0, 4, 4, 3, 4, 3, 0, 4,\n-     0, 1, 0, 2, 4, 4, 4, 4, 4, 0, 3, 2, 0, 3, 3),\n-\n-    (0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n-     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2),\n-\n-    (0, 2, 0, 3, 0, 4, 0, 4, 0, 1, 3, 3, 3, 0, 4, 0, 2, 1, 2, 1, 1, 1, 2, 0,\n-     3, 1, 1, 0, 1, 0, 3, 1, 0, 0, 3, 3, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n-     0, 2, 0, 2, 2, 0, 3, 1, 0, 0, 1, 0, 1, 1, 0, 1, 2, 0, 3, 0, 0, 0,\n-     0, 1, 0, 0, 3, 3, 4, 3, 1, 0, 1, 0, 3, 0, 2),\n-\n-    (0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 1, 0, 2, 0, 3, 1, 0, 1, 3, 0, 0, 0, 2, 0,\n-     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0, 0, 2, 3, 0, 1, 4, 1, 0, 2,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0,\n-     0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 3),\n-\n-    (0, 2, 0, 5, 0, 5, 0, 1, 0, 2, 4, 3, 3, 2, 5, 1, 3, 2, 3, 3, 3, 0, 4, 1,\n-     2, 0, 3, 0, 4, 0, 2, 2, 1, 1, 5, 3, 0, 0, 1, 4, 2, 3, 2, 0, 3, 3,\n-     3, 2, 0, 2, 4, 1, 1, 2, 0, 1, 1, 0, 3, 1, 0, 1, 3, 1, 2, 3, 0, 2,\n-     0, 0, 0, 1, 3, 5, 4, 4, 4, 0, 3, 0, 0, 1, 3),\n-\n-    (0, 4, 0, 5, 0, 4, 0, 4, 0, 4, 5, 4, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 5, 3,\n-     4, 5, 4, 2, 4, 2, 3, 4, 3, 1, 4, 4, 1, 3, 5, 4, 4, 5, 5, 4, 4, 5,\n-     5, 5, 2, 3, 3, 1, 4, 3, 1, 3, 3, 0, 3, 3, 1, 4, 3, 4, 4, 4, 0, 3,\n-     0, 4, 0, 3, 3, 4, 4, 5, 0, 0, 4, 3, 0, 4, 5),\n-\n-    (0, 4, 0, 4, 0, 3, 0, 3, 0, 3, 4, 4, 4, 3, 3, 2, 4, 3, 4, 3, 4, 3, 5, 3,\n-     4, 3, 2, 1, 4, 2, 4, 4, 3, 1, 3, 4, 2, 4, 5, 5, 3, 4, 5, 4, 1, 5,\n-     4, 3, 0, 3, 2, 2, 3, 2, 1, 3, 1, 0, 3, 3, 3, 5, 3, 3, 3, 5, 4, 4,\n-     2, 3, 3, 4, 3, 3, 3, 2, 1, 0, 3, 2, 1, 4, 3),\n-\n-    (0, 4, 0, 5, 0, 4, 0, 3, 0, 3, 5, 5, 3, 2, 4, 3, 4, 0, 5, 4, 4, 1, 4, 4,\n-     4, 3, 3, 3, 4, 3, 5, 5, 2, 3, 3, 4, 1, 2, 5, 5, 3, 5, 5, 2, 3, 5,\n-     5, 4, 0, 3, 2, 0, 3, 3, 1, 1, 5, 1, 4, 1, 0, 4, 3, 2, 3, 5, 0, 4,\n-     0, 3, 0, 5, 4, 3, 4, 3, 0, 0, 4, 1, 0, 4, 4),\n-\n-    (1, 3, 0, 4, 0, 2, 0, 2, 0, 2, 5, 5, 3, 3, 3, 3, 3, 0, 4, 2, 3, 4, 4, 4,\n-     3, 4, 0, 0, 3, 4, 5, 4, 3, 3, 3, 3, 2, 5, 5, 4, 5, 5, 5, 4, 3, 5,\n-     5, 5, 1, 3, 1, 0, 1, 0, 0, 3, 2, 0, 4, 2, 0, 5, 2, 3, 2, 4, 1, 3,\n-     0, 3, 0, 4, 5, 4, 5, 4, 3, 0, 4, 2, 0, 5, 4),\n-\n-    (0, 3, 0, 4, 0, 5, 0, 3, 0, 3, 4, 4, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 4, 3,\n-     3, 2, 2, 0, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 4, 4, 3, 4, 4, 1, 1, 4,\n-     4, 2, 0, 3, 1, 0, 1, 1, 0, 4, 1, 0, 2, 3, 1, 3, 3, 1, 3, 4, 0, 3,\n-     0, 1, 0, 3, 1, 3, 0, 0, 1, 0, 2, 0, 0, 4, 4),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n-\n-    (0, 3, 0, 3, 0, 2, 0, 3, 0, 1, 5, 4, 3, 3, 3, 1, 4, 2, 1, 2, 3, 4, 4, 2,\n-     4, 4, 5, 0, 3, 1, 4, 3, 4, 0, 4, 3, 3, 3, 2, 3, 2, 5, 3, 4, 3, 2,\n-     2, 3, 0, 0, 3, 0, 2, 1, 0, 1, 2, 0, 0, 0, 0, 2, 1, 1, 3, 1, 0, 2,\n-     0, 4, 0, 3, 4, 4, 4, 5, 2, 0, 2, 0, 0, 1, 3),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,\n-     0, 1, 1, 0, 0, 0, 4, 2, 1, 1, 0, 1, 0, 3, 2, 0, 0, 3, 1, 1, 1, 2,\n-     2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 2,\n-     0, 0, 0, 1, 4, 0, 4, 2, 1, 0, 0, 0, 0, 0, 1),\n-\n-    (0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n-     0, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 2, 0, 2, 1, 0, 0, 1, 2, 1, 0, 1,\n-     1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0,\n-     0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2),\n-\n-    (0, 4, 0, 4, 0, 4, 0, 3, 0, 4, 4, 3, 4, 2, 4, 3, 2, 0, 4, 4, 4, 3, 5, 3,\n-     5, 3, 3, 2, 4, 2, 4, 3, 4, 3, 1, 4, 0, 2, 3, 4, 4, 4, 3, 3, 3, 4,\n-     4, 4, 3, 4, 1, 3, 4, 3, 2, 1, 2, 1, 3, 3, 3, 4, 4, 3, 3, 5, 0, 4,\n-     0, 3, 0, 4, 3, 3, 3, 2, 1, 0, 3, 0, 0, 3, 3),\n-\n-    (0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 5, 5, 3, 3, 3, 3, 4, 3, 4, 3, 3, 3, 4, 4,\n-     4, 3, 3, 3, 3, 4, 3, 5, 3, 3, 1, 3, 2, 4, 5, 5, 5, 5, 4, 3, 4, 5,\n-     5, 3, 2, 2, 3, 3, 3, 3, 2, 3, 3, 1, 2, 3, 2, 4, 3, 3, 3, 4, 0, 4,\n-     0, 2, 0, 4, 3, 2, 2, 1, 2, 0, 3, 0, 0, 4, 1),\n+(0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1),\r\n+(2,4,0,4,0,3,0,4,0,3,4,4,4,2,4,3,3,4,3,2,3,3,4,2,3,3,3,2,4,1,4,3,3,1,5,4,3,4,3,4,3,5,3,0,3,5,4,2,0,3,1,0,3,3,0,3,3,0,1,1,0,4,3,0,3,3,0,4,0,2,0,3,5,5,5,5,4,0,4,1,0,3,4),\r\n+(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2),\r\n+(0,4,0,5,0,5,0,4,0,4,5,4,4,3,5,3,5,1,5,3,4,3,4,4,3,4,3,3,4,3,5,4,4,3,5,5,3,5,5,5,3,5,5,3,4,5,5,3,1,3,2,0,3,4,0,4,2,0,4,2,1,5,3,2,3,5,0,4,0,2,0,5,4,4,5,4,5,0,4,0,0,4,4),\r\n+(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\r\n+(0,3,0,4,0,3,0,3,0,4,5,4,3,3,3,3,4,3,5,4,4,3,5,4,4,3,4,3,4,4,4,4,5,3,4,4,3,4,5,5,4,5,5,1,4,5,4,3,0,3,3,1,3,3,0,4,4,0,3,3,1,5,3,3,3,5,0,4,0,3,0,4,4,3,4,3,3,0,4,1,1,3,4),\r\n+(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\r\n+(0,4,0,3,0,3,0,4,0,3,4,4,3,2,2,1,2,1,3,1,3,3,3,3,3,4,3,1,3,3,5,3,3,0,4,3,0,5,4,3,3,5,4,4,3,4,4,5,0,1,2,0,1,2,0,2,2,0,1,0,0,5,2,2,1,4,0,3,0,1,0,4,4,3,5,4,3,0,2,1,0,4,3),\r\n+(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\r\n+(0,3,0,5,0,4,0,2,1,4,4,2,4,1,4,2,4,2,4,3,3,3,4,3,3,3,3,1,4,2,3,3,3,1,4,4,1,1,1,4,3,3,2,0,2,4,3,2,0,3,3,0,3,1,1,0,0,0,3,3,0,4,2,2,3,4,0,4,0,3,0,4,4,5,3,4,4,0,3,0,0,1,4),\r\n+(1,4,0,4,0,4,0,4,0,3,5,4,4,3,4,3,5,4,3,3,4,3,5,4,4,4,4,3,4,2,4,3,3,1,5,4,3,2,4,5,4,5,5,4,4,5,4,4,0,3,2,2,3,3,0,4,3,1,3,2,1,4,3,3,4,5,0,3,0,2,0,4,5,5,4,5,4,0,4,0,0,5,4),\r\n+(0,5,0,5,0,4,0,3,0,4,4,3,4,3,3,3,4,0,4,4,4,3,4,3,4,3,3,1,4,2,4,3,4,0,5,4,1,4,5,4,4,5,3,2,4,3,4,3,2,4,1,3,3,3,2,3,2,0,4,3,3,4,3,3,3,4,0,4,0,3,0,4,5,4,4,4,3,0,4,1,0,1,3),\r\n+(0,3,1,4,0,3,0,2,0,3,4,4,3,1,4,2,3,3,4,3,4,3,4,3,4,4,3,2,3,1,5,4,4,1,4,4,3,5,4,4,3,5,5,4,3,4,4,3,1,2,3,1,2,2,0,3,2,0,3,1,0,5,3,3,3,4,3,3,3,3,4,4,4,4,5,4,2,0,3,3,2,4,3),\r\n+(0,2,0,3,0,1,0,1,0,0,3,2,0,0,2,0,1,0,2,1,3,3,3,1,2,3,1,0,1,0,4,2,1,1,3,3,0,4,3,3,1,4,3,3,0,3,3,2,0,0,0,0,1,0,0,2,0,0,0,0,0,4,1,0,2,3,2,2,2,1,3,3,3,4,4,3,2,0,3,1,0,3,3),\r\n+(0,4,0,4,0,3,0,3,0,4,4,4,3,3,3,3,3,3,4,3,4,2,4,3,4,3,3,2,4,3,4,5,4,1,4,5,3,5,4,5,3,5,4,0,3,5,5,3,1,3,3,2,2,3,0,3,4,1,3,3,2,4,3,3,3,4,0,4,0,3,0,4,5,4,4,5,3,0,4,1,0,3,4),\r\n+(0,2,0,3,0,3,0,0,0,2,2,2,1,0,1,0,0,0,3,0,3,0,3,0,1,3,1,0,3,1,3,3,3,1,3,3,3,0,1,3,1,3,4,0,0,3,1,1,0,3,2,0,0,0,0,1,3,0,1,0,0,3,3,2,0,3,0,0,0,0,0,3,4,3,4,3,3,0,3,0,0,2,3),\r\n+(2,3,0,3,0,2,0,1,0,3,3,4,3,1,3,1,1,1,3,1,4,3,4,3,3,3,0,0,3,1,5,4,3,1,4,3,2,5,5,4,4,4,4,3,3,4,4,4,0,2,1,1,3,2,0,1,2,0,0,1,0,4,1,3,3,3,0,3,0,1,0,4,4,4,5,5,3,0,2,0,0,4,4),\r\n+(0,2,0,1,0,3,1,3,0,2,3,3,3,0,3,1,0,0,3,0,3,2,3,1,3,2,1,1,0,0,4,2,1,0,2,3,1,4,3,2,0,4,4,3,1,3,1,3,0,1,0,0,1,0,0,0,1,0,0,0,0,4,1,1,1,2,0,3,0,0,0,3,4,2,4,3,2,0,1,0,0,3,3),\r\n+(0,1,0,4,0,5,0,4,0,2,4,4,2,3,3,2,3,3,5,3,3,3,4,3,4,2,3,0,4,3,3,3,4,1,4,3,2,1,5,5,3,4,5,1,3,5,4,2,0,3,3,0,1,3,0,4,2,0,1,3,1,4,3,3,3,3,0,3,0,1,0,3,4,4,4,5,5,0,3,0,1,4,5),\r\n+(0,2,0,3,0,3,0,0,0,2,3,1,3,0,4,0,1,1,3,0,3,4,3,2,3,1,0,3,3,2,3,1,3,0,2,3,0,2,1,4,1,2,2,0,0,3,3,0,0,2,0,0,0,1,0,0,0,0,2,2,0,3,2,1,3,3,0,2,0,2,0,0,3,3,1,2,4,0,3,0,2,2,3),\r\n+(2,4,0,5,0,4,0,4,0,2,4,4,4,3,4,3,3,3,1,2,4,3,4,3,4,4,5,0,3,3,3,3,2,0,4,3,1,4,3,4,1,4,4,3,3,4,4,3,1,2,3,0,4,2,0,4,1,0,3,3,0,4,3,3,3,4,0,4,0,2,0,3,5,3,4,5,2,0,3,0,0,4,5),\r\n+(0,3,0,4,0,1,0,1,0,1,3,2,2,1,3,0,3,0,2,0,2,0,3,0,2,0,0,0,1,0,1,1,0,0,3,1,0,0,0,4,0,3,1,0,2,1,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,2,2,3,1,0,3,0,0,0,1,4,4,4,3,0,0,4,0,0,1,4),\r\n+(1,4,1,5,0,3,0,3,0,4,5,4,4,3,5,3,3,4,4,3,4,1,3,3,3,3,2,1,4,1,5,4,3,1,4,4,3,5,4,4,3,5,4,3,3,4,4,4,0,3,3,1,2,3,0,3,1,0,3,3,0,5,4,4,4,4,4,4,3,3,5,4,4,3,3,5,4,0,3,2,0,4,4),\r\n+(0,2,0,3,0,1,0,0,0,1,3,3,3,2,4,1,3,0,3,1,3,0,2,2,1,1,0,0,2,0,4,3,1,0,4,3,0,4,4,4,1,4,3,1,1,3,3,1,0,2,0,0,1,3,0,0,0,0,2,0,0,4,3,2,4,3,5,4,3,3,3,4,3,3,4,3,3,0,2,1,0,3,3),\r\n+(0,2,0,4,0,3,0,2,0,2,5,5,3,4,4,4,4,1,4,3,3,0,4,3,4,3,1,3,3,2,4,3,0,3,4,3,0,3,4,4,2,4,4,0,4,5,3,3,2,2,1,1,1,2,0,1,5,0,3,3,2,4,3,3,3,4,0,3,0,2,0,4,4,3,5,5,0,0,3,0,2,3,3),\r\n+(0,3,0,4,0,3,0,1,0,3,4,3,3,1,3,3,3,0,3,1,3,0,4,3,3,1,1,0,3,0,3,3,0,0,4,4,0,1,5,4,3,3,5,0,3,3,4,3,0,2,0,1,1,1,0,1,3,0,1,2,1,3,3,2,3,3,0,3,0,1,0,1,3,3,4,4,1,0,1,2,2,1,3),\r\n+(0,1,0,4,0,4,0,3,0,1,3,3,3,2,3,1,1,0,3,0,3,3,4,3,2,4,2,0,1,0,4,3,2,0,4,3,0,5,3,3,2,4,4,4,3,3,3,4,0,1,3,0,0,1,0,0,1,0,0,0,0,4,2,3,3,3,0,3,0,0,0,4,4,4,5,3,2,0,3,3,0,3,5),\r\n+(0,2,0,3,0,0,0,3,0,1,3,0,2,0,0,0,1,0,3,1,1,3,3,0,0,3,0,0,3,0,2,3,1,0,3,1,0,3,3,2,0,4,2,2,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,1,2,0,1,0,1,0,0,0,1,3,1,2,0,0,0,1,0,0,1,4),\r\n+(0,3,0,3,0,5,0,1,0,2,4,3,1,3,3,2,1,1,5,2,1,0,5,1,2,0,0,0,3,3,2,2,3,2,4,3,0,0,3,3,1,3,3,0,2,5,3,4,0,3,3,0,1,2,0,2,2,0,3,2,0,2,2,3,3,3,0,2,0,1,0,3,4,4,2,5,4,0,3,0,0,3,5),\r\n+(0,3,0,3,0,3,0,1,0,3,3,3,3,0,3,0,2,0,2,1,1,0,2,0,1,0,0,0,2,1,0,0,1,0,3,2,0,0,3,3,1,2,3,1,0,3,3,0,0,1,0,0,0,0,0,2,0,0,0,0,0,2,3,1,2,3,0,3,0,1,0,3,2,1,0,4,3,0,1,1,0,3,3),\r\n+(0,4,0,5,0,3,0,3,0,4,5,5,4,3,5,3,4,3,5,3,3,2,5,3,4,4,4,3,4,3,4,5,5,3,4,4,3,4,4,5,4,4,4,3,4,5,5,4,2,3,4,2,3,4,0,3,3,1,4,3,2,4,3,3,5,5,0,3,0,3,0,5,5,5,5,4,4,0,4,0,1,4,4),\r\n+(0,4,0,4,0,3,0,3,0,3,5,4,4,2,3,2,5,1,3,2,5,1,4,2,3,2,3,3,4,3,3,3,3,2,5,4,1,3,3,5,3,4,4,0,4,4,3,1,1,3,1,0,2,3,0,2,3,0,3,0,0,4,3,1,3,4,0,3,0,2,0,4,4,4,3,4,5,0,4,0,0,3,4),\r\n+(0,3,0,3,0,3,1,2,0,3,4,4,3,3,3,0,2,2,4,3,3,1,3,3,3,1,1,0,3,1,4,3,2,3,4,4,2,4,4,4,3,4,4,3,2,4,4,3,1,3,3,1,3,3,0,4,1,0,2,2,1,4,3,2,3,3,5,4,3,3,5,4,4,3,3,0,4,0,3,2,2,4,4),\r\n+(0,2,0,1,0,0,0,0,0,1,2,1,3,0,0,0,0,0,2,0,1,2,1,0,0,1,0,0,0,0,3,0,0,1,0,1,1,3,1,0,0,0,1,1,0,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,2,2,0,3,4,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1),\r\n+(0,1,0,0,0,1,0,0,0,0,4,0,4,1,4,0,3,0,4,0,3,0,4,0,3,0,3,0,4,1,5,1,4,0,0,3,0,5,0,5,2,0,1,0,0,0,2,1,4,0,1,3,0,0,3,0,0,3,1,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),\r\n+(1,4,0,5,0,3,0,2,0,3,5,4,4,3,4,3,5,3,4,3,3,0,4,3,3,3,3,3,3,2,4,4,3,1,3,4,4,5,4,4,3,4,4,1,3,5,4,3,3,3,1,2,2,3,3,1,3,1,3,3,3,5,3,3,4,5,0,3,0,3,0,3,4,3,4,4,3,0,3,0,2,4,3),\r\n+(0,1,0,4,0,0,0,0,0,1,4,0,4,1,4,2,4,0,3,0,1,0,1,0,0,0,0,0,2,0,3,1,1,1,0,3,0,0,0,1,2,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,3,0,0,0,0,3,2,0,2,2,0,1,0,0,0,2,3,2,3,3,0,0,0,0,2,1,0),\r\n+(0,5,1,5,0,3,0,3,0,5,4,4,5,1,5,3,3,0,4,3,4,3,5,3,4,3,3,2,4,3,4,3,3,0,3,3,1,4,4,3,4,4,4,3,4,5,5,3,2,3,1,1,3,3,1,3,1,1,3,3,2,4,5,3,3,5,0,4,0,3,0,4,4,3,5,3,3,0,3,4,0,4,3),\r\n+(0,5,0,5,0,3,0,2,0,4,4,3,5,2,4,3,3,3,4,4,4,3,5,3,5,3,3,1,4,0,4,3,3,0,3,3,0,4,4,4,4,5,4,3,3,5,5,3,2,3,1,2,3,2,0,1,0,0,3,2,2,4,4,3,1,5,0,4,0,3,0,4,3,1,3,2,1,0,3,3,0,3,3),\r\n+(0,4,0,5,0,5,0,4,0,4,5,5,5,3,4,3,3,2,5,4,4,3,5,3,5,3,4,0,4,3,4,4,3,2,4,4,3,4,5,4,4,5,5,0,3,5,5,4,1,3,3,2,3,3,1,3,1,0,4,3,1,4,4,3,4,5,0,4,0,2,0,4,3,4,4,3,3,0,4,0,0,5,5),\r\n+(0,4,0,4,0,5,0,1,1,3,3,4,4,3,4,1,3,0,5,1,3,0,3,1,3,1,1,0,3,0,3,3,4,0,4,3,0,4,4,4,3,4,4,0,3,5,4,1,0,3,0,0,2,3,0,3,1,0,3,1,0,3,2,1,3,5,0,3,0,1,0,3,2,3,3,4,4,0,2,2,0,4,4),\r\n+(2,4,0,5,0,4,0,3,0,4,5,5,4,3,5,3,5,3,5,3,5,2,5,3,4,3,3,4,3,4,5,3,2,1,5,4,3,2,3,4,5,3,4,1,2,5,4,3,0,3,3,0,3,2,0,2,3,0,4,1,0,3,4,3,3,5,0,3,0,1,0,4,5,5,5,4,3,0,4,2,0,3,5),\r\n+(0,5,0,4,0,4,0,2,0,5,4,3,4,3,4,3,3,3,4,3,4,2,5,3,5,3,4,1,4,3,4,4,4,0,3,5,0,4,4,4,4,5,3,1,3,4,5,3,3,3,3,3,3,3,0,2,2,0,3,3,2,4,3,3,3,5,3,4,1,3,3,5,3,2,0,0,0,0,4,3,1,3,3),\r\n+(0,1,0,3,0,3,0,1,0,1,3,3,3,2,3,3,3,0,3,0,0,0,3,1,3,0,0,0,2,2,2,3,0,0,3,2,0,1,2,4,1,3,3,0,0,3,3,3,0,1,0,0,2,1,0,0,3,0,3,1,0,3,0,0,1,3,0,2,0,1,0,3,3,1,3,3,0,0,1,1,0,3,3),\r\n+(0,2,0,3,0,2,1,4,0,2,2,3,1,1,3,1,1,0,2,0,3,1,2,3,1,3,0,0,1,0,4,3,2,3,3,3,1,4,2,3,3,3,3,1,0,3,1,4,0,1,1,0,1,2,0,1,1,0,1,1,0,3,1,3,2,2,0,1,0,0,0,2,3,3,3,1,0,0,0,0,0,2,3),\r\n+(0,5,0,4,0,5,0,2,0,4,5,5,3,3,4,3,3,1,5,4,4,2,4,4,4,3,4,2,4,3,5,5,4,3,3,4,3,3,5,5,4,5,5,1,3,4,5,3,1,4,3,1,3,3,0,3,3,1,4,3,1,4,5,3,3,5,0,4,0,3,0,5,3,3,1,4,3,0,4,0,1,5,3),\r\n+(0,5,0,5,0,4,0,2,0,4,4,3,4,3,3,3,3,3,5,4,4,4,4,4,4,5,3,3,5,2,4,4,4,3,4,4,3,3,4,4,5,5,3,3,4,3,4,3,3,4,3,3,3,3,1,2,2,1,4,3,3,5,4,4,3,4,0,4,0,3,0,4,4,4,4,4,1,0,4,2,0,2,4),\r\n+(0,4,0,4,0,3,0,1,0,3,5,2,3,0,3,0,2,1,4,2,3,3,4,1,4,3,3,2,4,1,3,3,3,0,3,3,0,0,3,3,3,5,3,3,3,3,3,2,0,2,0,0,2,0,0,2,0,0,1,0,0,3,1,2,2,3,0,3,0,2,0,4,4,3,3,4,1,0,3,0,0,2,4),\r\n+(0,0,0,4,0,0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,3,1,3,0,3,2,0,0,0,1,0,3,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,2,0,0,0,0,0,0,2),\r\n+(0,2,1,3,0,2,0,2,0,3,3,3,3,1,3,1,3,3,3,3,3,3,4,2,2,1,2,1,4,0,4,3,1,3,3,3,2,4,3,5,4,3,3,3,3,3,3,3,0,1,3,0,2,0,0,1,0,0,1,0,0,4,2,0,2,3,0,3,3,0,3,3,4,2,3,1,4,0,1,2,0,2,3),\r\n+(0,3,0,3,0,1,0,3,0,2,3,3,3,0,3,1,2,0,3,3,2,3,3,2,3,2,3,1,3,0,4,3,2,0,3,3,1,4,3,3,2,3,4,3,1,3,3,1,1,0,1,1,0,1,0,1,0,1,0,0,0,4,1,1,0,3,0,3,1,0,2,3,3,3,3,3,1,0,0,2,0,3,3),\r\n+(0,0,0,0,0,0,0,0,0,0,3,0,2,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,3,0,3,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,2,3,0,0,0,0,0,0,0,0,3),\r\n+(0,2,0,3,1,3,0,3,0,2,3,3,3,1,3,1,3,1,3,1,3,3,3,1,3,0,2,3,1,1,4,3,3,2,3,3,1,2,2,4,1,3,3,0,1,4,2,3,0,1,3,0,3,0,0,1,3,0,2,0,0,3,3,2,1,3,0,3,0,2,0,3,4,4,4,3,1,0,3,0,0,3,3),\r\n+(0,2,0,1,0,2,0,0,0,1,3,2,2,1,3,0,1,1,3,0,3,2,3,1,2,0,2,0,1,1,3,3,3,0,3,3,1,1,2,3,2,3,3,1,2,3,2,0,0,1,0,0,0,0,0,0,3,0,1,0,0,2,1,2,1,3,0,3,0,0,0,3,4,4,4,3,2,0,2,0,0,2,4),\r\n+(0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,3,1,0,0,0,0,0,0,0,3),\r\n+(0,3,0,3,0,2,0,3,0,3,3,3,2,3,2,2,2,0,3,1,3,3,3,2,3,3,0,0,3,0,3,2,2,0,2,3,1,4,3,4,3,3,2,3,1,5,4,4,0,3,1,2,1,3,0,3,1,1,2,0,2,3,1,3,1,3,0,3,0,1,0,3,3,4,4,2,1,0,2,1,0,2,4),\r\n+(0,1,0,3,0,1,0,2,0,1,4,2,5,1,4,0,2,0,2,1,3,1,4,0,2,1,0,0,2,1,4,1,1,0,3,3,0,5,1,3,2,3,3,1,0,3,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0,4,0,1,0,3,0,2,0,1,0,3,3,3,4,3,3,0,0,0,0,2,3),\r\n+(0,0,0,1,0,0,0,0,0,0,2,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,3),\r\n+(0,1,0,3,0,4,0,3,0,2,4,3,1,0,3,2,2,1,3,1,2,2,3,1,1,1,2,1,3,0,1,2,0,1,3,2,1,3,0,5,5,1,0,0,1,3,2,1,0,3,0,0,1,0,0,0,0,0,3,4,0,1,1,1,3,2,0,2,0,1,0,2,3,3,1,2,3,0,1,0,1,0,4),\r\n+(0,0,0,1,0,3,0,3,0,2,2,1,0,0,4,0,3,0,3,1,3,0,3,0,3,0,1,0,3,0,3,1,3,0,3,3,0,0,1,2,1,1,1,0,1,2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,2,1,2,0,0,2,0,0,0,0,2,3,3,3,3,0,0,0,0,1,4),\r\n+(0,0,0,3,0,3,0,0,0,0,3,1,1,0,3,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,3,0,2,0,2,3,0,0,2,2,3,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,2,0,0,0,0,2,3),\r\n+(2,4,0,5,0,5,0,4,0,3,4,3,3,3,4,3,3,3,4,3,4,4,5,4,5,5,5,2,3,0,5,5,4,1,5,4,3,1,5,4,3,4,4,3,3,4,3,3,0,3,2,0,2,3,0,3,0,0,3,3,0,5,3,2,3,3,0,3,0,3,0,3,4,5,4,5,3,0,4,3,0,3,4),\r\n+(0,3,0,3,0,3,0,3,0,3,3,4,3,2,3,2,3,0,4,3,3,3,3,3,3,3,3,0,3,2,4,3,3,1,3,4,3,4,4,4,3,4,4,3,2,4,4,1,0,2,0,0,1,1,0,2,0,0,3,1,0,5,3,2,1,3,0,3,0,1,2,4,3,2,4,3,3,0,3,2,0,4,4),\r\n+(0,3,0,3,0,1,0,0,0,1,4,3,3,2,3,1,3,1,4,2,3,2,4,2,3,4,3,0,2,2,3,3,3,0,3,3,3,0,3,4,1,3,3,0,3,4,3,3,0,1,1,0,1,0,0,0,4,0,3,0,0,3,1,2,1,3,0,4,0,1,0,4,3,3,4,3,3,0,2,0,0,3,3),\r\n+(0,3,0,4,0,1,0,3,0,3,4,3,3,0,3,3,3,1,3,1,3,3,4,3,3,3,0,0,3,1,5,3,3,1,3,3,2,5,4,3,3,4,5,3,2,5,3,4,0,1,0,0,0,0,0,2,0,0,1,1,0,4,2,2,1,3,0,3,0,2,0,4,4,3,5,3,2,0,1,1,0,3,4),\r\n+(0,5,0,4,0,5,0,2,0,4,4,3,3,2,3,3,3,1,4,3,4,1,5,3,4,3,4,0,4,2,4,3,4,1,5,4,0,4,4,4,4,5,4,1,3,5,4,2,1,4,1,1,3,2,0,3,1,0,3,2,1,4,3,3,3,4,0,4,0,3,0,4,4,4,3,3,3,0,4,2,0,3,4),\r\n+(1,4,0,4,0,3,0,1,0,3,3,3,1,1,3,3,2,2,3,3,1,0,3,2,2,1,2,0,3,1,2,1,2,0,3,2,0,2,2,3,3,4,3,0,3,3,1,2,0,1,1,3,1,2,0,0,3,0,1,1,0,3,2,2,3,3,0,3,0,0,0,2,3,3,4,3,3,0,1,0,0,1,4),\r\n+(0,4,0,4,0,4,0,0,0,3,4,4,3,1,4,2,3,2,3,3,3,1,4,3,4,0,3,0,4,2,3,3,2,2,5,4,2,1,3,4,3,4,3,1,3,3,4,2,0,2,1,0,3,3,0,0,2,0,3,1,0,4,4,3,4,3,0,4,0,1,0,2,4,4,4,4,4,0,3,2,0,3,3),\r\n+(0,0,0,1,0,4,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,3,2,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2),\r\n+(0,2,0,3,0,4,0,4,0,1,3,3,3,0,4,0,2,1,2,1,1,1,2,0,3,1,1,0,1,0,3,1,0,0,3,3,2,0,1,1,0,0,0,0,0,1,0,2,0,2,2,0,3,1,0,0,1,0,1,1,0,1,2,0,3,0,0,0,0,1,0,0,3,3,4,3,1,0,1,0,3,0,2),\r\n+(0,0,0,3,0,5,0,0,0,0,1,0,2,0,3,1,0,1,3,0,0,0,2,0,0,0,1,0,0,0,1,1,0,0,4,0,0,0,2,3,0,1,4,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,3),\r\n+(0,2,0,5,0,5,0,1,0,2,4,3,3,2,5,1,3,2,3,3,3,0,4,1,2,0,3,0,4,0,2,2,1,1,5,3,0,0,1,4,2,3,2,0,3,3,3,2,0,2,4,1,1,2,0,1,1,0,3,1,0,1,3,1,2,3,0,2,0,0,0,1,3,5,4,4,4,0,3,0,0,1,3),\r\n+(0,4,0,5,0,4,0,4,0,4,5,4,3,3,4,3,3,3,4,3,4,4,5,3,4,5,4,2,4,2,3,4,3,1,4,4,1,3,5,4,4,5,5,4,4,5,5,5,2,3,3,1,4,3,1,3,3,0,3,3,1,4,3,4,4,4,0,3,0,4,0,3,3,4,4,5,0,0,4,3,0,4,5),\r\n+(0,4,0,4,0,3,0,3,0,3,4,4,4,3,3,2,4,3,4,3,4,3,5,3,4,3,2,1,4,2,4,4,3,1,3,4,2,4,5,5,3,4,5,4,1,5,4,3,0,3,2,2,3,2,1,3,1,0,3,3,3,5,3,3,3,5,4,4,2,3,3,4,3,3,3,2,1,0,3,2,1,4,3),\r\n+(0,4,0,5,0,4,0,3,0,3,5,5,3,2,4,3,4,0,5,4,4,1,4,4,4,3,3,3,4,3,5,5,2,3,3,4,1,2,5,5,3,5,5,2,3,5,5,4,0,3,2,0,3,3,1,1,5,1,4,1,0,4,3,2,3,5,0,4,0,3,0,5,4,3,4,3,0,0,4,1,0,4,4),\r\n+(1,3,0,4,0,2,0,2,0,2,5,5,3,3,3,3,3,0,4,2,3,4,4,4,3,4,0,0,3,4,5,4,3,3,3,3,2,5,5,4,5,5,5,4,3,5,5,5,1,3,1,0,1,0,0,3,2,0,4,2,0,5,2,3,2,4,1,3,0,3,0,4,5,4,5,4,3,0,4,2,0,5,4),\r\n+(0,3,0,4,0,5,0,3,0,3,4,4,3,2,3,2,3,3,3,3,3,2,4,3,3,2,2,0,3,3,3,3,3,1,3,3,3,0,4,4,3,4,4,1,1,4,4,2,0,3,1,0,1,1,0,4,1,0,2,3,1,3,3,1,3,4,0,3,0,1,0,3,1,3,0,0,1,0,2,0,0,4,4),\r\n+(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\r\n+(0,3,0,3,0,2,0,3,0,1,5,4,3,3,3,1,4,2,1,2,3,4,4,2,4,4,5,0,3,1,4,3,4,0,4,3,3,3,2,3,2,5,3,4,3,2,2,3,0,0,3,0,2,1,0,1,2,0,0,0,0,2,1,1,3,1,0,2,0,4,0,3,4,4,4,5,2,0,2,0,0,1,3),\r\n+(0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,4,2,1,1,0,1,0,3,2,0,0,3,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,2,0,0,0,1,4,0,4,2,1,0,0,0,0,0,1),\r\n+(0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,3,1,0,0,0,2,0,2,1,0,0,1,2,1,0,1,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,3,1,0,0,0,0,0,1,0,0,2,1,0,0,0,0,0,0,0,0,2),\r\n+(0,4,0,4,0,4,0,3,0,4,4,3,4,2,4,3,2,0,4,4,4,3,5,3,5,3,3,2,4,2,4,3,4,3,1,4,0,2,3,4,4,4,3,3,3,4,4,4,3,4,1,3,4,3,2,1,2,1,3,3,3,4,4,3,3,5,0,4,0,3,0,4,3,3,3,2,1,0,3,0,0,3,3),\r\n+(0,4,0,3,0,3,0,3,0,3,5,5,3,3,3,3,4,3,4,3,3,3,4,4,4,3,3,3,3,4,3,5,3,3,1,3,2,4,5,5,5,5,4,3,4,5,5,3,2,2,3,3,3,3,2,3,3,1,2,3,2,4,3,3,3,4,0,4,0,2,0,4,3,2,2,1,2,0,3,0,0,4,1),\r\n )\r\n \r\n-\n class JapaneseContextAnalysis:\r\n     def __init__(self):\r\n         self.reset()\r\n \r\n     def reset(self):\r\n-        # total sequence received\n-        self._mTotalRel = 0\n+        self._mTotalRel = 0  # total sequence received\r\n         # category counters, each interger counts sequence in its category\r\n         self._mRelSample = [0] * NUM_OF_CATEGORY\r\n         # if last byte in current buffer is not the last byte of a character,\r\n         # we need to know how many bytes to skip in next buffer\r\n         self._mNeedToSkipCharNum = 0\r\n-        # The order of previous char\n-        self._mLastCharOrder = -1\n-        # If this flag is set to constants.True, detection is done and\n-        # conclusion has been made\n+        self._mLastCharOrder = -1  # The order of previous char\r\n+        # If this flag is set to True, detection is done and conclusion has\r\n+        # been made\r\n         self._mDone = False\r\n \r\n     def feed(self, aBuf, aLen):\r\n         if self._mDone:\r\n             return\r\n \r\n-        # The buffer we got is byte oriented, and a character may span in more\n-        # than one buffers. In case the last one or two byte in last buffer is\n-        # not complete, we record how many byte needed to complete that\n-        # character and skip these bytes here.  We can choose to record those\n-        # bytes as well and analyse the character once it is complete, but\n-        # since a character will not make much difference, by simply skipping\n+        # The buffer we got is byte oriented, and a character may span in more than one\r\n+        # buffers. In case the last one or two byte in last buffer is not\r\n+        # complete, we record how many byte needed to complete that character\r\n+        # and skip these bytes here.  We can choose to record those bytes as\r\n+        # well and analyse the character once it is complete, but since a\r\n+        # character will not make much difference, by simply skipping\r\n         # this character will simply our logic and improve performance.\r\n         i = self._mNeedToSkipCharNum\r\n         while i < aLen:\r\n@@ -495,9 +160,7 @@ class JapaneseContextAnalysis:\n                     if self._mTotalRel > MAX_REL_THRESHOLD:\r\n                         self._mDone = True\r\n                         break\r\n-                    self._mRelSample[\n-                        jp2CharContext[self._mLastCharOrder][order]\n-                    ] += 1\n+                    self._mRelSample[jp2CharContext[self._mLastCharOrder][order]] += 1\r\n                 self._mLastCharOrder = order\r\n \r\n     def got_enough_data(self):\r\n@@ -510,54 +173,47 @@ class JapaneseContextAnalysis:\n         else:\r\n             return DONT_KNOW\r\n \r\n-    def get_order(self, aStr):\n+    def get_order(self, aBuf):\r\n         return -1, 1\r\n \r\n-\n class SJISContextAnalysis(JapaneseContextAnalysis):\r\n-    def get_order(self, aStr):\n-        if not aStr:\n+    def get_order(self, aBuf):\r\n+        if not aBuf:\r\n             return -1, 1\r\n         # find out current char's byte length\r\n-        char = wrap_ord(aStr[0])\n-        try:\n-            if (((char >= 0x81) and (char <= 0x9F)) or\n-               ((char >= 0xE0) and (char <= 0xFC))):\n+        first_char = wrap_ord(aBuf[0])\r\n+        if ((0x81 <= first_char <= 0x9F) or (0xE0 <= first_char <= 0xFC)):\r\n             charLen = 2\r\n         else:\r\n             charLen = 1\r\n-        except UnicodeDecodeError:\n-            return -1, 1\n \r\n         # return its order if it is hiragana\r\n-        if len(aStr) > 1:\n-            char_1 = wrap_ord(aStr[1])\n-            if ((char == 202) and (0x9F <= char_1 <= 0xF1)):\n-                return char_1 - 0x9F, charLen\n+        if len(aBuf) > 1:\r\n+            second_char = wrap_ord(aBuf[1])\r\n+            if (first_char == 202) and (0x9F <= second_char <= 0xF1):\r\n+                return second_char - 0x9F, charLen\r\n \r\n         return -1, charLen\r\n \r\n-\n class EUCJPContextAnalysis(JapaneseContextAnalysis):\r\n-    def get_order(self, aStr):\n-        if not aStr:\n+    def get_order(self, aBuf):\r\n+        if not aBuf:\r\n             return -1, 1\r\n         # find out current char's byte length\r\n-        char = wrap_ord(aStr[0])\n-        try:\n-            if (char == 0x8E) or (0xA1 <= char <= 0xFE):\n+        first_char = wrap_ord(aBuf[0])\r\n+        if (first_char == 0x8E) or (0xA1 <= first_char <= 0xFE):\r\n             charLen = 2\r\n-            elif aStr[0] == 0x8F:\n+        elif first_char == 0x8F:\r\n             charLen = 3\r\n         else:\r\n             charLen = 1\r\n-        except UnicodeDecodeError:\n-            return -1, 1\n \r\n         # return its order if it is hiragana\r\n-        if len(aStr) > 1:\n-            char_1 = wrap_ord(aStr[1])\n-            if (char == 0xA4) and (0xA1 <= char_1 <= 0xF3):\n-                return char_1 - 0xA1, charLen\n+        if len(aBuf) > 1:\r\n+            second_char = wrap_ord(aBuf[1])\r\n+            if (first_char == 0xA4) and (0xA1 <= second_char <= 0xF3):\r\n+                return second_char - 0xA1, charLen\r\n \r\n         return -1, charLen\r\n+\r\n+# flake8: noqa\r\n\n@@ -79,170 +79,134 @@ win1251BulgarianCharToOrderMap = (\n # rest  sequences:     0.2992%\r\n # negative sequences:  0.0020%\r\n BulgarianLangModel = (\r\n-    0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3,\n-    3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-    3, 3, 0, 3, 3, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3,\n-    3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 1, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3,\n-    3, 3, 3, 3, 3, 3, 0, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n-    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 2, 2, 2, 3, 3, 3, 3,\n-    3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3,\n-    2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n-    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3,\n-    3, 3, 3, 3, 3, 3, 2, 3, 2, 2, 1, 3, 3, 3, 3, 2, 2, 2, 1, 1, 2, 0, 1, 0, 1,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 2, 3, 3, 1, 1, 2,\n-    3, 3, 2, 3, 3, 3, 3, 2, 1, 2, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n-    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3,\n-    3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 1, 3, 0,\n-    3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 2, 3,\n-    3, 3, 1, 3, 3, 2, 3, 2, 2, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 2, 2, 3, 3, 3, 1, 2, 2, 3, 2, 1,\n-    1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1,\n-    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3,\n-    1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1, 2, 0, 2, 1, 2, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 2,\n-    2, 2, 3, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3,\n-    3, 3, 3, 3, 1, 1, 1, 2, 2, 1, 3, 1, 3, 2, 2, 3, 0, 0, 1, 0, 1, 0, 1, 0, 0,\n-    0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 1, 2, 1, 1, 1, 2, 3,\n-    1, 3, 1, 2, 2, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3,\n-    3, 1, 3, 2, 2, 3, 3, 1, 2, 3, 1, 1, 3, 3, 3, 3, 1, 2, 2, 1, 1, 1, 0, 2, 0,\n-    2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-    1, 2, 2, 3, 3, 3, 2, 2, 1, 1, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3,\n-    0, 1, 2, 1, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 2, 1, 0, 3, 1, 2, 1, 2, 1, 2, 3,\n-    2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3,\n-    3, 3, 3, 3, 0, 0, 3, 1, 3, 3, 2, 3, 3, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 2, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 1, 1, 2, 1, 3, 3, 0, 3, 1, 1, 1,\n-    1, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 2, 2, 3, 3, 3, 3,\n-    3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 3, 3, 2, 3, 2, 2, 2, 3, 0, 2, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 3, 1, 3,\n-    1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2,\n-    3, 2, 0, 3, 2, 0, 3, 0, 2, 0, 0, 2, 1, 3, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2,\n-    2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3,\n-    3, 2, 1, 3, 1, 1, 2, 1, 3, 2, 1, 1, 0, 1, 2, 3, 2, 1, 1, 1, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 2, 1, 0, 1, 0, 0, 1, 0,\n-    0, 0, 2, 1, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n-    3, 3, 3, 2, 3, 2, 3, 3, 1, 3, 2, 1, 1, 1, 2, 1, 1, 2, 1, 3, 0, 1, 0, 0, 0,\n-    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 2, 3, 3, 2, 3, 2, 2,\n-    2, 3, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 0, 1, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 1, 0, 2, 2, 1, 3, 2, 1, 0, 0, 2, 0, 2, 0, 1,\n-    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 2,\n-    0, 2, 3, 1, 2, 3, 2, 0, 1, 3, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 2, 2, 2, 3, 2,\n-    2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0,\n-    0, 0, 1, 1, 0, 1, 3, 3, 3, 3, 3, 2, 1, 2, 2, 1, 2, 0, 2, 0, 1, 0, 1, 2, 1,\n-    2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 3, 3,\n-    1, 1, 3, 1, 0, 3, 2, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 2, 1,\n-    2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1,\n-    0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 0, 1, 0, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2,\n-    1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1,\n-    1, 0, 1, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 2, 3,\n-    2, 3, 3, 0, 0, 2, 1, 0, 2, 1, 0, 0, 0, 0, 2, 3, 0, 2, 0, 0, 0, 0, 0, 1, 0,\n-    0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 0, 1, 2, 2, 1, 1, 1,\n-    1, 1, 0, 1, 1, 1, 0, 0, 1, 2, 0, 0, 3, 3, 2, 2, 3, 0, 2, 3, 1, 1, 2, 0, 0,\n-    0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 1, 2, 0, 2, 2, 1, 1, 1, 1, 2, 1,\n-    0, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,\n-    0, 2, 3, 2, 3, 3, 0, 0, 3, 0, 1, 1, 0, 1, 0, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0,\n-    0, 0, 0, 0, 2, 0, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 0, 2, 0, 1, 0, 1,\n-    0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0,\n-    2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 1, 1, 1,\n-    1, 1, 1, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0,\n-    1, 1, 0, 0, 2, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1,\n-    0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 0,\n-    1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2, 3, 3, 3, 3, 0, 2,\n-    2, 0, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 2, 2,\n-    1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 2, 1,\n-    0, 0, 0, 1, 1, 0, 0, 2, 3, 3, 3, 3, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2,\n-    0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2,\n-    0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 3, 2, 2,\n-    3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n-    0, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n-    0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 1, 0, 1, 0, 2, 2, 2, 2, 3, 2, 1, 1, 1, 2,\n-    3, 0, 0, 1, 0, 2, 1, 1, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2,\n-    1, 1, 0, 1, 2, 1, 2, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 0, 0, 0, 2,\n-    1, 0, 1, 0, 3, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 0, 2, 1, 2, 2, 1, 1, 2, 1,\n-    1, 0, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1,\n-    1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2,\n-    2, 1, 2, 2, 1, 1, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 2, 2, 2, 3, 2, 0, 1, 2, 0, 1, 2, 1, 1, 0, 1, 0, 1, 2, 1, 2, 0, 0, 0,\n-    1, 1, 0, 0, 0, 1, 0, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 2, 0, 1, 1,\n-    1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 2, 2,\n-    2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n-    2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0,\n-    1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n-    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 2, 0,\n-    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n-    2, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,\n-    1, 0, 0, 0, 1, 1, 0, 1, 2, 3, 1, 2, 1, 0, 1, 1, 0, 2, 2, 2, 0, 0, 1, 0, 0,\n-    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n-    1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2,\n-    2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n-    2, 0, 2, 2, 1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 0, 0, 0,\n-    1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n-    1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1, 2, 2, 3, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0,\n-    0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0,\n-    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1,\n-    1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1,\n-    1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,\n-    0, 0, 0, 1, 0, 0, 1, 3, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 1,\n-    0, 2, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0,\n-    2, 0, 1, 0, 0, 1, 1, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 1, 1, 0, 0, 1, 0,\n-    2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,\n-    1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2,\n-    0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1,\n-    0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 0, 0,\n-    0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,\n-    1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,\n-    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1,\n-    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0,\n-    0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0,\n-    2, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n-    1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,\r\n+3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,3,2,2,1,2,2,\r\n+3,1,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,0,1,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,0,3,1,0,\r\n+0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,3,3,3,3,3,3,3,3,3,3,2,3,2,2,1,3,3,3,3,2,2,2,1,1,2,0,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,2,3,2,2,3,3,1,1,2,3,3,2,3,3,3,3,2,1,2,0,2,0,3,0,0,\r\n+0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,1,3,3,3,3,3,2,3,2,3,3,3,3,3,2,3,3,1,3,0,3,0,2,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,3,1,3,3,2,3,3,3,1,3,3,2,3,2,2,2,0,0,2,0,2,0,2,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,3,3,3,1,2,2,3,2,1,1,2,0,2,0,0,0,0,\r\n+1,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,2,3,3,1,2,3,2,2,2,3,3,3,3,3,2,2,3,1,2,0,2,1,2,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,1,3,3,3,3,3,2,3,3,3,2,3,3,2,3,2,2,2,3,1,2,0,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,3,3,3,3,1,1,1,2,2,1,3,1,3,2,2,3,0,0,1,0,1,0,1,0,0,\r\n+0,0,0,1,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,2,2,3,2,2,3,1,2,1,1,1,2,3,1,3,1,2,2,0,1,1,1,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,1,3,2,2,3,3,1,2,3,1,1,3,3,3,3,1,2,2,1,1,1,0,2,0,2,0,1,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,3,3,3,2,2,1,1,2,0,2,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,0,1,2,1,3,3,2,3,3,3,3,3,2,3,2,1,0,3,1,2,1,2,1,2,3,2,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,1,3,3,2,3,3,2,2,2,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,3,3,3,3,0,3,3,3,3,3,2,1,1,2,1,3,3,0,3,1,1,1,1,3,2,0,1,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,1,1,3,1,3,3,2,3,2,2,2,3,0,2,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,3,3,3,3,2,3,3,2,2,3,2,1,1,1,1,1,3,1,3,1,1,0,0,0,1,0,0,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,3,3,3,3,2,3,2,0,3,2,0,3,0,2,0,0,2,1,3,1,0,0,1,0,0,0,1,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,2,1,1,1,1,2,1,1,2,1,1,1,2,2,1,2,1,1,1,0,1,1,0,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,2,1,3,1,1,2,1,3,2,1,1,0,1,2,3,2,1,1,1,0,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,3,3,3,3,2,2,1,0,1,0,0,1,0,0,0,2,1,0,3,0,0,1,0,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,2,3,2,3,3,1,3,2,1,1,1,2,1,1,2,1,3,0,1,0,0,0,1,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,1,1,2,2,3,3,2,3,2,2,2,3,1,2,2,1,1,2,1,1,2,2,0,1,1,0,1,0,2,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,3,3,3,2,1,3,1,0,2,2,1,3,2,1,0,0,2,0,2,0,1,0,0,0,0,0,0,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,3,3,3,3,1,2,0,2,3,1,2,3,2,0,1,3,1,2,1,1,1,0,0,1,0,0,2,2,2,3,\r\n+2,2,2,2,1,2,1,1,2,2,1,1,2,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,0,1,\r\n+3,3,3,3,3,2,1,2,2,1,2,0,2,0,1,0,1,2,1,2,1,1,0,0,0,1,0,1,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,\r\n+3,3,2,3,3,1,1,3,1,0,3,2,1,0,0,0,1,2,0,2,0,1,0,0,0,1,0,1,2,1,2,2,\r\n+1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,0,1,2,1,1,1,0,0,0,0,0,1,1,0,0,\r\n+3,1,0,1,0,2,3,2,2,2,3,2,2,2,2,2,1,0,2,1,2,1,1,1,0,1,2,1,2,2,2,1,\r\n+1,1,2,2,2,2,1,2,1,1,0,1,2,1,2,2,2,1,1,1,0,1,1,1,1,2,0,1,0,0,0,0,\r\n+2,3,2,3,3,0,0,2,1,0,2,1,0,0,0,0,2,3,0,2,0,0,0,0,0,1,0,0,2,0,1,2,\r\n+2,1,2,1,2,2,1,1,1,2,1,1,1,0,1,2,2,1,1,1,1,1,0,1,1,1,0,0,1,2,0,0,\r\n+3,3,2,2,3,0,2,3,1,1,2,0,0,0,1,0,0,2,0,2,0,0,0,1,0,1,0,1,2,0,2,2,\r\n+1,1,1,1,2,1,0,1,2,2,2,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,\r\n+2,3,2,3,3,0,0,3,0,1,1,0,1,0,0,0,2,2,1,2,0,0,0,0,0,0,0,0,2,0,1,2,\r\n+2,2,1,1,1,1,1,2,2,2,1,0,2,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,\r\n+3,3,3,3,2,2,2,2,2,0,2,1,1,1,1,2,1,2,1,1,0,2,0,1,0,1,0,0,2,0,1,2,\r\n+1,1,1,1,1,1,1,2,2,1,1,0,2,0,1,0,2,0,0,1,1,1,0,0,2,0,0,0,1,1,0,0,\r\n+2,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0,0,0,1,2,0,1,2,\r\n+2,2,2,1,1,2,1,1,2,2,2,1,2,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,\r\n+2,3,3,3,3,0,2,2,0,2,1,0,0,0,1,1,1,2,0,2,0,0,0,3,0,0,0,0,2,0,2,2,\r\n+1,1,1,2,1,2,1,1,2,2,2,1,2,0,1,1,1,0,1,1,1,1,0,2,1,0,0,0,1,1,0,0,\r\n+2,3,3,3,3,0,2,1,0,0,2,0,0,0,0,0,1,2,0,2,0,0,0,0,0,0,0,0,2,0,1,2,\r\n+1,1,1,2,1,1,1,1,2,2,2,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,\r\n+3,3,2,2,3,0,1,0,1,0,0,0,0,0,0,0,1,1,0,3,0,0,0,0,0,0,0,0,1,0,2,2,\r\n+1,1,1,1,1,2,1,1,2,2,1,2,2,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,\r\n+3,1,0,1,0,2,2,2,2,3,2,1,1,1,2,3,0,0,1,0,2,1,1,0,1,1,1,1,2,1,1,1,\r\n+1,2,2,1,2,1,2,2,1,1,0,1,2,1,2,2,1,1,1,0,0,1,1,1,2,1,0,1,0,0,0,0,\r\n+2,1,0,1,0,3,1,2,2,2,2,1,2,2,1,1,1,0,2,1,2,2,1,1,2,1,1,0,2,1,1,1,\r\n+1,2,2,2,2,2,2,2,1,2,0,1,1,0,2,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,\r\n+2,1,1,1,1,2,2,2,2,1,2,2,2,1,2,2,1,1,2,1,2,3,2,2,1,1,1,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,2,2,3,2,0,1,2,0,1,2,1,1,0,1,0,1,2,1,2,0,0,0,1,1,0,0,0,1,0,0,2,\r\n+1,1,0,0,1,1,0,1,1,1,1,0,2,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,\r\n+2,0,0,0,0,1,2,2,2,2,2,2,2,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,\r\n+1,2,2,2,2,1,1,2,1,2,1,1,1,0,2,1,2,1,1,1,0,2,1,1,1,1,0,1,0,0,0,0,\r\n+3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,\r\n+1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,2,2,3,2,0,0,0,0,1,0,0,0,0,0,0,1,1,0,2,0,0,0,0,0,0,0,0,1,0,1,2,\r\n+1,1,1,1,1,1,0,0,2,2,2,2,2,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,\r\n+2,3,1,2,1,0,1,1,0,2,2,2,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,2,\r\n+1,1,1,1,2,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,\r\n+2,2,2,2,2,0,0,2,0,0,2,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,2,0,2,2,\r\n+1,1,1,1,1,0,0,1,2,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,2,2,2,2,0,0,2,0,1,1,0,0,0,1,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,1,1,\r\n+0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,2,2,3,2,0,0,1,0,0,1,0,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,0,0,0,0,2,\r\n+1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,1,2,2,2,1,2,1,2,2,1,1,2,1,1,1,0,1,1,1,1,2,0,1,0,1,1,1,1,0,1,1,\r\n+1,1,2,1,1,1,1,1,1,0,0,1,2,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,\r\n+1,0,0,1,3,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,2,2,2,1,0,0,1,0,2,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,2,0,0,1,\r\n+0,2,0,1,0,0,1,1,2,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,2,2,2,2,0,1,1,0,2,1,0,1,1,1,0,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,1,\r\n+0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,2,2,2,2,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,0,1,0,0,1,2,1,1,1,1,1,1,2,2,1,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,\r\n+1,1,2,1,1,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+2,2,1,2,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,\r\n+0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,\r\n+0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,\r\n+1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,2,0,0,2,0,1,0,0,1,0,0,1,\r\n+1,1,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,\r\n+1,1,1,1,1,1,1,2,0,0,0,0,0,0,2,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,\r\n+2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n+1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,\r\n+0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\r\n )\r\n \r\n Latin5BulgarianModel = {\r\n@@ -260,3 +224,6 @@ Win1251BulgarianModel = {\n   'keepEnglishLetter': False,\r\n   'charsetName': \"windows-1251\"\r\n }\r\n+\r\n+\r\n+# flake8: noqa\r\n\n@@ -25,6 +25,8 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n+from . import constants\r\n+\r\n # KOI8-R language model\r\n # Character Mapping Table:\r\n KOI8R_CharToOrderMap = (\r\n\n@@ -25,6 +25,8 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n+from . import constants\r\n+\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n@@ -27,6 +27,8 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n+from . import constants\r\n+\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n@@ -25,6 +25,8 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n+from . import constants\r\n+\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n\n@@ -27,7 +27,7 @@\n ######################### END LICENSE BLOCK #########################\r\n \r\n from .charsetprober import CharSetProber\r\n-from .constants import eError, eNotMe\n+from .constants import eNotMe\r\n from .compat import wrap_ord\r\n \r\n FREQ_CAT_NUM = 4\r\n@@ -110,10 +110,7 @@ class Latin1Prober(CharSetProber):\n     def feed(self, aBuf):\r\n         aBuf = self.filter_with_english_letters(aBuf)\r\n         for c in aBuf:\r\n-            try:\n             charClass = Latin1_CharToClass[wrap_ord(c)]\r\n-            except IndexError:\n-                return eError\n             freq = Latin1ClassModel[(self._mLastCharClass * CLASS_NUM)\r\n                                     + charClass]\r\n             if freq == 0:\r\n@@ -136,7 +133,7 @@ class Latin1Prober(CharSetProber):\n                           - (self._mFreqCounter[1] * 20.0 / total))\r\n         if confidence < 0.0:\r\n             confidence = 0.0\r\n-        # lower the confidence of latin1 so that other more accurate detector\n-        # can take priority.\n+        # lower the confidence of latin1 so that other more accurate\r\n+        # detector can take priority.\r\n         confidence = confidence * 0.5\r\n         return confidence\r\n\n@@ -37,7 +37,7 @@ class MultiByteCharSetProber(CharSetProber):\n         CharSetProber.__init__(self)\r\n         self._mDistributionAnalyzer = None\r\n         self._mCodingSM = None\r\n-        self._mLastChar = ['\\x00', '\\x00']\n+        self._mLastChar = [0, 0]\r\n \r\n     def reset(self):\r\n         CharSetProber.reset(self)\r\n@@ -45,7 +45,7 @@ class MultiByteCharSetProber(CharSetProber):\n             self._mCodingSM.reset()\r\n         if self._mDistributionAnalyzer:\r\n             self._mDistributionAnalyzer.reset()\r\n-        self._mLastChar = ['\\x00', '\\x00']\n+        self._mLastChar = [0, 0]\r\n \r\n     def get_charset_name(self):\r\n         pass\r\n@@ -56,9 +56,9 @@ class MultiByteCharSetProber(CharSetProber):\n             codingState = self._mCodingSM.next_state(aBuf[i])\r\n             if codingState == constants.eError:\r\n                 if constants._debug:\r\n-                    sys.stderr.write(self.get_charset_name() +\n-                                     ' prober hit error at byte ' + str(i) +\n-                                     '\\n')\n+                    sys.stderr.write(self.get_charset_name()\r\n+                                     + ' prober hit error at byte ' + str(i)\r\n+                                     + '\\n')\r\n                 self._mState = constants.eNotMe\r\n                 break\r\n             elif codingState == constants.eItsMe:\r\n\n\n@@ -61,12 +61,13 @@ BIG5_cls = (\n     3,3,3,3,3,3,3,3,  # e0 - e7\r\n     3,3,3,3,3,3,3,3,  # e8 - ef\r\n     3,3,3,3,3,3,3,3,  # f0 - f7\r\n-    3, 3, 3, 3, 3, 3, 3, 0)  # f8 - ff\n+    3,3,3,3,3,3,3,0  # f8 - ff\r\n+)\r\n \r\n BIG5_st = (\r\n     eError,eStart,eStart,     3,eError,eError,eError,eError,#00-07\r\n     eError,eError,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eError,#08-0f\r\n-    eError, eStart, eStart, eStart, eStart, eStart, eStart, eStart,  # 10-17\n+    eError,eStart,eStart,eStart,eStart,eStart,eStart,eStart#10-17\r\n )\r\n \r\n Big5CharLenTable = (0, 1, 1, 2, 0)\r\n@@ -111,14 +112,15 @@ EUCJP_cls = (\n     0,0,0,0,0,0,0,0,  # e0 - e7\r\n     0,0,0,0,0,0,0,0,  # e8 - ef\r\n     0,0,0,0,0,0,0,0,  # f0 - f7\r\n-    0, 0, 0, 0, 0, 0, 0, 5)  # f8 - ff\n+    0,0,0,0,0,0,0,5  # f8 - ff\r\n+)\r\n \r\n EUCJP_st = (\r\n           3,     4,     3,     5,eStart,eError,eError,eError,#00-07\r\n      eError,eError,eError,eError,eItsMe,eItsMe,eItsMe,eItsMe,#08-0f\r\n      eItsMe,eItsMe,eStart,eError,eStart,eError,eError,eError,#10-17\r\n      eError,eError,eStart,eError,eError,eError,     3,eError,#18-1f\r\n-    3, eError, eError, eError, eStart, eStart, eStart, eStart,  # 20-27\n+          3,eError,eError,eError,eStart,eStart,eStart,eStart#20-27\r\n )\r\n \r\n EUCJPCharLenTable = (2, 2, 2, 3, 1, 0)\r\n@@ -163,12 +165,12 @@ EUCKR_cls = (\n     2,2,2,2,2,2,2,2,  # e0 - e7\r\n     2,2,2,2,2,2,2,2,  # e8 - ef\r\n     2,2,2,2,2,2,2,2,  # f0 - f7\r\n-    2, 2, 2, 2, 2, 2, 2, 0,  # f8 - ff\n+    2,2,2,2,2,2,2,0   # f8 - ff\r\n )\r\n \r\n EUCKR_st = (\r\n     eError,eStart,     3,eError,eError,eError,eError,eError,#00-07\r\n-    eItsMe, eItsMe, eItsMe, eItsMe, eError, eError, eStart, eStart,  # 08-0f\n+    eItsMe,eItsMe,eItsMe,eItsMe,eError,eError,eStart,eStart #08-0f\r\n )\r\n \r\n EUCKRCharLenTable = (0, 1, 2, 0)\r\n@@ -213,7 +215,7 @@ EUCTW_cls = (\n     3,3,3,3,3,3,3,3,  # e0 - e7\r\n     3,3,3,3,3,3,3,3,  # e8 - ef\r\n     3,3,3,3,3,3,3,3,  # f0 - f7\r\n-    3, 3, 3, 3, 3, 3, 3, 0,  # f8 - ff\n+    3,3,3,3,3,3,3,0   # f8 - ff\r\n )\r\n \r\n EUCTW_st = (\r\n@@ -222,7 +224,7 @@ EUCTW_st = (\n     eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eError,eStart,eError,#10-17\r\n     eStart,eStart,eStart,eError,eError,eError,eError,eError,#18-1f\r\n          5,eError,eError,eError,eStart,eError,eStart,eStart,#20-27\r\n-    eStart, eError, eStart, eStart, eStart, eStart, eStart, eStart,  # 28-2f\n+    eStart,eError,eStart,eStart,eStart,eStart,eStart,eStart #28-2f\r\n )\r\n \r\n EUCTWCharLenTable = (0, 0, 1, 2, 2, 2, 3)\r\n@@ -267,7 +269,7 @@ GB2312_cls = (\n     6,6,6,6,6,6,6,6,  # e0 - e7\r\n     6,6,6,6,6,6,6,6,  # e8 - ef\r\n     6,6,6,6,6,6,6,6,  # f0 - f7\r\n-    6, 6, 6, 6, 6, 6, 6, 0,  # f8 - ff\n+    6,6,6,6,6,6,6,0   # f8 - ff\r\n )\r\n \r\n GB2312_st = (\r\n@@ -276,7 +278,7 @@ GB2312_st = (\n     eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eError,eError,eStart,#10-17\r\n          4,eError,eStart,eStart,eError,eError,eError,eError,#18-1f\r\n     eError,eError,     5,eError,eError,eError,eItsMe,eError,#20-27\r\n-    eError, eError, eStart, eStart, eStart, eStart, eStart, eStart,  # 28-2f\n+    eError,eError,eStart,eStart,eStart,eStart,eStart,eStart #28-2f\r\n )\r\n \r\n # To be accurate, the length of class 6 can be either 2 or 4.\r\n@@ -328,12 +330,14 @@ SJIS_cls = (\n     3,3,3,3,3,3,3,3,  # e0 - e7\r\n     3,3,3,3,3,4,4,4,  # e8 - ef\r\n     4,4,4,4,4,4,4,4,  # f0 - f7\r\n-    4, 4, 4, 4, 4, 0, 0, 0)  # f8 - ff\n+    4,4,4,4,4,0,0,0   # f8 - ff\r\n+)\r\n+\r\n \r\n SJIS_st = (\r\n     eError,eStart,eStart,     3,eError,eError,eError,eError,#00-07\r\n     eError,eError,eError,eError,eItsMe,eItsMe,eItsMe,eItsMe,#08-0f\r\n-    eItsMe, eItsMe, eError, eError, eStart, eStart, eStart, eStart,  # 10-17\n+    eItsMe,eItsMe,eError,eError,eStart,eStart,eStart,eStart #10-17\r\n )\r\n \r\n SJISCharLenTable = (0, 1, 1, 2, 0, 0)\r\n@@ -378,7 +382,7 @@ UCS2BE_cls = (\n     0,0,0,0,0,0,0,0,  # e0 - e7\r\n     0,0,0,0,0,0,0,0,  # e8 - ef\r\n     0,0,0,0,0,0,0,0,  # f0 - f7\r\n-    0, 0, 0, 0, 0, 0, 4, 5,  # f8 - ff\n+    0,0,0,0,0,0,4,5   # f8 - ff\r\n )\r\n \r\n UCS2BE_st  = (\r\n@@ -388,7 +392,7 @@ UCS2BE_st = (\n           6,     6,     6,     6,     6,eItsMe,     6,     6,#18-1f\r\n           6,     6,     6,     6,     5,     7,     7,eError,#20-27\r\n           5,     8,     6,     6,eError,     6,     6,     6,#28-2f\r\n-    6,      6,      6,      6, eError, eError, eStart, eStart,  # 30-37\n+          6,     6,     6,     6,eError,eError,eStart,eStart #30-37\r\n )\r\n \r\n UCS2BECharLenTable = (2, 2, 2, 0, 2, 2)\r\n@@ -433,7 +437,7 @@ UCS2LE_cls = (\n     0,0,0,0,0,0,0,0,  # e0 - e7\r\n     0,0,0,0,0,0,0,0,  # e8 - ef\r\n     0,0,0,0,0,0,0,0,  # f0 - f7\r\n-    0, 0, 0, 0, 0, 0, 4, 5,  # f8 - ff\n+    0,0,0,0,0,0,4,5   # f8 - ff\r\n )\r\n \r\n UCS2LE_st = (\r\n@@ -443,7 +447,7 @@ UCS2LE_st = (\n           5,     5,     5,eError,     5,eError,     6,     6,#18-1f\r\n           7,     6,     8,     8,     5,     5,     5,eError,#20-27\r\n           5,     5,     5,eError,eError,eError,     5,     5,#28-2f\r\n-    5,      5,      5, eError,      5, eError, eStart, eStart,  # 30-37\n+          5,     5,     5,eError,     5,eError,eStart,eStart #30-37\r\n )\r\n \r\n UCS2LECharLenTable = (2, 2, 2, 2, 2, 2)\r\n@@ -488,7 +492,7 @@ UTF8_cls = (\n     7,8,8,8,8,8,8,8,  # e0 - e7\r\n     8,8,8,8,8,9,8,8,  # e8 - ef\r\n     10,11,11,11,11,11,11,11,  # f0 - f7\r\n-    12, 13, 13, 13, 14, 15, 0, 0,   # f8 - ff\n+    12,13,13,13,14,15,0,0    # f8 - ff\r\n )\r\n \r\n UTF8_st = (\r\n@@ -517,7 +521,7 @@ UTF8_st = (\n     eError,eError,    12,    12,    12,eError,eError,eError,#b0-b7\r\n     eError,eError,eError,eError,eError,eError,eError,eError,#b8-bf\r\n     eError,eError,eStart,eStart,eStart,eStart,eError,eError,#c0-c7\r\n-    eError, eError, eError, eError, eError, eError, eError, eError,  # c8-cf\n+    eError,eError,eError,eError,eError,eError,eError,eError #c8-cf\r\n )\r\n \r\n UTF8CharLenTable = (0, 1, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6)\r\n@@ -527,3 +531,5 @@ UTF8SMModel = {'classTable': UTF8_cls,\n                'stateTable': UTF8_st,\r\n                'charLenTable': UTF8CharLenTable,\r\n                'name': 'UTF-8'}\r\n+\r\n+# flake8: noqa\r\n\n@@ -53,11 +53,13 @@ class SingleByteCharSetProber(CharSetProber):\n \r\n     def reset(self):\r\n         CharSetProber.reset(self)\r\n-        self._mLastOrder = 255  # char order of last character\n+        # char order of last character\r\n+        self._mLastOrder = 255\r\n         self._mSeqCounters = [0] * NUMBER_OF_SEQ_CAT\r\n         self._mTotalSeqs = 0\r\n         self._mTotalChar = 0\r\n-        self._mFreqChar = 0  # characters that fall in our sampling range\n+        # characters that fall in our sampling range\r\n+        self._mFreqChar = 0\r\n \r\n     def get_charset_name(self):\r\n         if self._mNameProber:\r\n@@ -72,10 +74,7 @@ class SingleByteCharSetProber(CharSetProber):\n         if not aLen:\r\n             return self.get_state()\r\n         for c in aBuf:\r\n-            try:\n             order = self._mModel['charToOrderMap'][wrap_ord(c)]\r\n-            except IndexError:\n-                return constants.eError\n             if order < SYMBOL_CAT_ORDER:\r\n                 self._mTotalChar += 1\r\n             if order < SAMPLE_SIZE:\r\n@@ -84,6 +83,7 @@ class SingleByteCharSetProber(CharSetProber):\n                     self._mTotalSeqs += 1\r\n                     if not self._mReversed:\r\n                         i = (self._mLastOrder * SAMPLE_SIZE) + order\r\n+                        model = self._mModel['precedenceMatrix'][i]\r\n                     else:  # reverse the order of the letters in the lookup\r\n                         i = (order * SAMPLE_SIZE) + self._mLastOrder\r\n                         model = self._mModel['precedenceMatrix'][i]\r\n@@ -97,8 +97,7 @@ class SingleByteCharSetProber(CharSetProber):\n                     if constants._debug:\r\n                         sys.stderr.write('%s confidence = %s, we have a'\r\n                                          'winner\\n' %\r\n-                                         (self._mModel['charsetName'],\n-                                          cf))\n+                                         (self._mModel['charsetName'], cf))\r\n                     self._mState = constants.eFoundIt\r\n                 elif cf < NEGATIVE_SHORTCUT_THRESHOLD:\r\n                     if constants._debug:\r\n@@ -113,11 +112,8 @@ class SingleByteCharSetProber(CharSetProber):\n     def get_confidence(self):\r\n         r = 0.01\r\n         if self._mTotalSeqs > 0:\r\n-            #print(self._mSeqCounters[POSITIVE_CAT], self._mTotalSeqs,\n-            #      self._mModel['mTypicalPositiveRatio'])\n             r = ((1.0 * self._mSeqCounters[POSITIVE_CAT]) / self._mTotalSeqs\r\n                  / self._mModel['mTypicalPositiveRatio'])\r\n-            #print(r, self._mFreqChar, self._mTotalChar)\n             r = r * self._mFreqChar / self._mTotalChar\r\n             if r >= 1.0:\r\n                 r = 0.99\r\n\n\n@@ -55,8 +55,9 @@ class SJISProber(MultiByteCharSetProber):\n             codingState = self._mCodingSM.next_state(aBuf[i])\r\n             if codingState == constants.eError:\r\n                 if constants._debug:\r\n-                    sys.stderr.write(self.get_charset_name() + ' prober hit'\n-                                     'error at byte ' + str(i) + '\\n')\n+                    sys.stderr.write(self.get_charset_name()\r\n+                                     + ' prober hit error at byte ' + str(i)\r\n+                                     + '\\n')\r\n                 self._mState = constants.eNotMe\r\n                 break\r\n             elif codingState == constants.eItsMe:\r\n@@ -70,8 +71,8 @@ class SJISProber(MultiByteCharSetProber):\n                                                 charLen)\r\n                     self._mDistributionAnalyzer.feed(self._mLastChar, charLen)\r\n                 else:\r\n-                    self._mContextAnalyzer.feed(aBuf[i + 1 - charLen:i + 3 -\n-                                                     charLen], charLen)\n+                    self._mContextAnalyzer.feed(aBuf[i + 1 - charLen:i + 3\r\n+                                                     - charLen], charLen)\r\n                     self._mDistributionAnalyzer.feed(aBuf[i - 1:i + 1],\r\n                                                      charLen)\r\n \r\n\n@@ -26,16 +26,13 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-import sys\n from . import constants\r\n+import sys\r\n from .latin1prober import Latin1Prober  # windows-1252\r\n from .mbcsgroupprober import MBCSGroupProber  # multi-byte character sets\r\n from .sbcsgroupprober import SBCSGroupProber  # single-byte character sets\r\n from .escprober import EscCharSetProber  # ISO-2122, etc.\r\n import re\r\n-import logging\n-\n-logger = logging.getLogger(__name__)\n \r\n MINIMUM_THRESHOLD = 0.20\r\n ePureAscii = 0\r\n@@ -67,35 +64,39 @@ class UniversalDetector:\n         if self.done:\r\n             return\r\n \r\n-        charmap = (\n-            # EF BB BF  UTF-8 with BOM\n-            ('\\xEF\\xBB\\xBF', {'encoding': \"UTF-8\", 'confidence': 1.0}),\n-            # FF FE 00 00  UTF-32, little-endian BOM\n-            ('\\xFF\\xFE\\x00\\x00', {'encoding': \"UTF-32LE\", 'confidence': 1.0}),\n-            # 00 00 FE FF  UTF-32, big-endian BOM\n-            ('\\x00\\x00\\xFE\\xFF', {'encoding': \"UTF-32BE\", 'confidence': 1.0}),\n-            # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\n-            ('\\xFE\\xFF\\x00\\x00', {'encoding': \"X-ISO-10646-UCS-4-3412\",\n-                                  'confidence': 1.0}),\n-            # 00 00 FF FE  UCS-4, unusual octet order BOM (2143)\n-            ('\\x00\\x00\\xFF\\xFE', {'encoding': \"X-ISO-10646-UCS-4-2143\",\n-                                  'confidence': 1.0}),\n-            # FF FE  UTF-16, little endian BOM\n-            ('\\xFF\\xFE', {'encoding': \"UTF-16LE\", 'confidence': 1.0}),\n-            # FE FF  UTF-16, big endian BOM\n-            ('\\xFE\\xFF', {'encoding': \"UTF-16BE\", 'confidence': 1.0}),\n-        )\n-\n         aLen = len(aBuf)\r\n         if not aLen:\r\n             return\r\n \r\n         if not self._mGotData:\r\n             # If the data starts with BOM, we know it is UTF\r\n-            for chunk, result in charmap:\n-                if aBuf[:len(chunk)] == chunk:\n-                    self.result = result\n-                    break\n+            if aBuf[:3] == '\\xEF\\xBB\\xBF':\r\n+                # EF BB BF  UTF-8 with BOM\r\n+                self.result = {'encoding': \"UTF-8\", 'confidence': 1.0}\r\n+            elif aBuf[:4] == '\\xFF\\xFE\\x00\\x00':\r\n+                # FF FE 00 00  UTF-32, little-endian BOM\r\n+                self.result = {'encoding': \"UTF-32LE\", 'confidence': 1.0}\r\n+            elif aBuf[:4] == '\\x00\\x00\\xFE\\xFF':\r\n+                # 00 00 FE FF  UTF-32, big-endian BOM\r\n+                self.result = {'encoding': \"UTF-32BE\", 'confidence': 1.0}\r\n+            elif aBuf[:4] == '\\xFE\\xFF\\x00\\x00':\r\n+                # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\r\n+                self.result = {\r\n+                    'encoding': \"X-ISO-10646-UCS-4-3412\",\r\n+                    'confidence': 1.0\r\n+                }\r\n+            elif aBuf[:4] == '\\x00\\x00\\xFF\\xFE':\r\n+                # 00 00 FF FE  UCS-4, unusual octet order BOM (2143)\r\n+                self.result = {\r\n+                    'encoding': \"X-ISO-10646-UCS-4-2143\",\r\n+                    'confidence': 1.0\r\n+                }\r\n+            elif aBuf[:2] == '\\xFF\\xFE':\r\n+                # FF FE  UTF-16, little endian BOM\r\n+                self.result = {'encoding': \"UTF-16LE\", 'confidence': 1.0}\r\n+            elif aBuf[:2] == '\\xFE\\xFF':\r\n+                # FE FF  UTF-16, big endian BOM\r\n+                self.result = {'encoding': \"UTF-16BE\", 'confidence': 1.0}\r\n \r\n         self._mGotData = True\r\n         if self.result['encoding'] and (self.result['confidence'] > 0.0):\r\n@@ -117,7 +118,7 @@ class UniversalDetector:\n             if self._mEscCharSetProber.feed(aBuf) == constants.eFoundIt:\r\n                 self.result = {\r\n                     'encoding': self._mEscCharSetProber.get_charset_name(),\r\n-                    'confidence': self._mEscCharSetProber.get_confidence(),\n+                    'confidence': self._mEscCharSetProber.get_confidence()\r\n                 }\r\n                 self.done = True\r\n         elif self._mInputState == eHighbyte:\r\n@@ -125,14 +126,11 @@ class UniversalDetector:\n                 self._mCharSetProbers = [MBCSGroupProber(), SBCSGroupProber(),\r\n                                          Latin1Prober()]\r\n             for prober in self._mCharSetProbers:\r\n-                try:\n                 if prober.feed(aBuf) == constants.eFoundIt:\r\n                     self.result = {'encoding': prober.get_charset_name(),\r\n                                    'confidence': prober.get_confidence()}\r\n                     self.done = True\r\n                     break\r\n-                except (UnicodeDecodeError, UnicodeEncodeError) as e:\n-                    logger.exception(e)\n \r\n     def close(self):\r\n         if self.done:\r\n\n\n\n@@ -0,0 +1,4 @@\n+from requests.packages import chardet\n+\n+with open('test', 'rb') as f:\n+    print(chardet.detect(f.read()))\n\\ No newline at end of file\n\n@@ -0,0 +1,6 @@\n+import requests\n+\n+r = requests.get('http://readability.com')\n+r.encoding = None\n+\n+print(r.text)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
