{"custom_id": "flask#1ed756a5238f38163cd04b152975a7d4ea945c7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 48 | Churn Cumulative: 9325 | Contributors (this commit): 115 | Commits (past 90d): 91 | Contributors (cumulative): 140 | DMM Complexity: 1.0\n\nDIFF:\n@@ -305,6 +305,7 @@ class Flask(_PackageBoundObject):\n         'JSONIFY_PRETTYPRINT_REGULAR':          False,\n         'JSONIFY_MIMETYPE':                     'application/json',\n         'TEMPLATES_AUTO_RELOAD':                None,\n+        'MAX_COOKIE_SIZE': 4093,\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n\n@@ -191,9 +191,26 @@ class Response(ResponseBase, JSONMixin):\n     .. versionchanged:: 1.0\n         JSON support is added to the response, like the request. This is useful\n         when testing to get the test client response data as JSON.\n+\n+    .. versionchanged:: 1.0\n+\n+        Added :attr:`max_cookie_size`.\n     \"\"\"\n \n     default_mimetype = 'text/html'\n \n     def _get_data_for_json(self, cache):\n         return self.get_data()\n+\n+    @property\n+    def max_cookie_size(self):\n+        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n+\n+        See :attr:`~werkzeug.wrappers.BaseResponse.max_cookie_size` in\n+        Werkzeug's docs.\n+        \"\"\"\n+        if current_app:\n+            return current_app.config['MAX_COOKIE_SIZE']\n+\n+        # return Werkzeug's default when not in an app context\n+        return super(Response, self).max_cookie_size\n\n@@ -1917,3 +1917,33 @@ def test_run_from_config(monkeypatch, host, port, expect_host, expect_port, app)\n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n     app.config['SERVER_NAME'] = 'pocoo.org:8080'\n     app.run(host, port)\n+\n+\n+def test_max_cookie_size(app, client, recwarn):\n+    app.config['MAX_COOKIE_SIZE'] = 100\n+\n+    # outside app context, default to Werkzeug static value,\n+    # which is also the default config\n+    response = flask.Response()\n+    default = flask.Flask.default_config['MAX_COOKIE_SIZE']\n+    assert response.max_cookie_size == default\n+\n+    # inside app context, use app config\n+    with app.app_context():\n+        assert flask.Response().max_cookie_size == 100\n+\n+    @app.route('/')\n+    def index():\n+        r = flask.Response('', status=204)\n+        r.set_cookie('foo', 'bar' * 100)\n+        return r\n+\n+    client.get('/')\n+    assert len(recwarn) == 1\n+    w = recwarn.pop()\n+    assert 'cookie is too large' in str(w.message)\n+\n+    app.config['MAX_COOKIE_SIZE'] = 0\n+\n+    client.get('/')\n+    assert len(recwarn) == 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#18c9db47940c1195809a0c82fcb85601c3f4df46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -64/0 | Churn Δ: 16 | Churn Cumulative: 2570 | Contributors (this commit): 28 | Commits (past 90d): 37 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -494,19 +494,19 @@ Example usage:\n \n \n def main(as_module=False):\n-    this_module = __package__ + '.cli'\n     args = sys.argv[1:]\n \n     if as_module:\n-        if sys.version_info >= (2, 7):\n-            name = 'python -m ' + this_module.rsplit('.', 1)[0]\n-        else:\n+        this_module = 'flask'\n+\n+        if sys.version_info < (2, 7):\n+            this_module += '.cli'\n+\n         name = 'python -m ' + this_module\n \n-        # This module is always executed as \"python -m flask.run\" and as such\n-        # we need to ensure that we restore the actual command line so that\n-        # the reloader can properly operate.\n-        sys.argv = ['-m', this_module] + sys.argv[1:]\n+        # Python rewrites \"python -m flask\" to the path to the file in argv.\n+        # Restore the original command so that the reloader works.\n+        sys.argv = ['-m', this_module] + args\n     else:\n         name = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0e1e9a04aaf29ab78f721cfc79ac2a691f6e3929", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 22 | Files Changed: 3 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): -4/6 | Churn Δ: 88 | Churn Cumulative: 3552 | Contributors (this commit): 52 | Commits (past 90d): 9 | Contributors (cumulative): 74 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,6 +8,7 @@\n     :copyright: (c) 2015 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import codecs\n import io\n import uuid\n from datetime import date\n@@ -108,6 +109,49 @@ def _load_arg_defaults(kwargs):\n         kwargs.setdefault('cls', JSONDecoder)\n \n \n+def detect_encoding(data):\n+    \"\"\"Detect which UTF codec was used to encode the given bytes.\n+\n+    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n+    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n+    or little endian. Some editors or libraries may prepend a BOM.\n+\n+    :param data: Bytes in unknown UTF encoding.\n+    :return: UTF encoding name\n+    \"\"\"\n+    head = data[:4]\n+\n+    if head[:3] == codecs.BOM_UTF8:\n+        return 'utf-8-sig'\n+\n+    if b'\\x00' not in head:\n+        return 'utf-8'\n+\n+    if head in (codecs.BOM_UTF32_BE, codecs.BOM_UTF32_LE):\n+        return 'utf-32'\n+\n+    if head[:2] in (codecs.BOM_UTF16_BE, codecs.BOM_UTF16_LE):\n+        return 'utf-16'\n+\n+    if len(head) == 4:\n+        if head[:3] == b'\\x00\\x00\\x00':\n+            return 'utf-32-be'\n+\n+        if head[::2] == b'\\x00\\x00':\n+            return 'utf-16-be'\n+\n+        if head[1:] == b'\\x00\\x00\\x00':\n+            return 'utf-32-le'\n+\n+        if head[1::2] == b'\\x00\\x00':\n+            return 'utf-16-le'\n+\n+    if len(head) == 2:\n+        return 'utf-16-be' if head.startswith(b'\\x00') else 'utf-16-le'\n+\n+    return 'utf-8'\n+\n+\n def dumps(obj, **kwargs):\n     \"\"\"Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n     configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n@@ -142,7 +186,10 @@ def loads(s, **kwargs):\n     \"\"\"\n     _load_arg_defaults(kwargs)\n     if isinstance(s, bytes):\n-        s = s.decode(kwargs.pop('encoding', None) or 'utf-8')\n+        encoding = kwargs.pop('encoding', None)\n+        if encoding is None:\n+            encoding = detect_encoding(s)\n+        s = s.decode(encoding)\n     return _json.loads(s, **kwargs)\n \n \n\n@@ -144,16 +144,9 @@ class Request(RequestBase):\n         if not (force or self.is_json):\n             return None\n \n-        # We accept a request charset against the specification as\n-        # certain clients have been using this in the past.  This\n-        # fits our general approach of being nice in what we accept\n-        # and strict in what we send out.\n-        request_charset = self.mimetype_params.get('charset')\n-        try:\n         data = _get_data(self, cache)\n-            if request_charset is not None:\n-                rv = json.loads(data, encoding=request_charset)\n-            else:\n+\n+        try:\n             rv = json.loads(data)\n         except ValueError as e:\n             if silent:\n\n@@ -21,6 +21,8 @@ from werkzeug.datastructures import Range\n from werkzeug.exceptions import BadRequest, NotFound\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n+\n+from flask import json\n from flask._compat import StringIO, text_type\n \n \n@@ -34,6 +36,20 @@ def has_encoding(name):\n \n \n class TestJSON(object):\n+    @pytest.mark.parametrize('value', (\n+        1, 't', True, False, None,\n+        [], [1, 2, 3],\n+        {}, {'foo': u'🐍'},\n+    ))\n+    @pytest.mark.parametrize('encoding', (\n+        'utf-8', 'utf-8-sig',\n+        'utf-16-le', 'utf-16-be', 'utf-16',\n+        'utf-32-le', 'utf-32-be', 'utf-32',\n+    ))\n+    def test_detect_encoding(self, value, encoding):\n+        data = json.dumps(value).encode(encoding)\n+        assert json.detect_encoding(data) == encoding\n+        assert json.loads(data) == value\n \n     def test_ignore_cached_json(self):\n         app = flask.Flask(__name__)\n@@ -85,18 +101,6 @@ class TestJSON(object):\n         rv = c.post('/json', data='\"foo\"', content_type='application/x+json')\n         assert rv.data == b'foo'\n \n-    def test_json_body_encoding(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/')\n-        def index():\n-            return flask.request.get_json()\n-\n-        c = app.test_client()\n-        resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n-                     content_type='application/json; charset=iso-8859-15')\n-        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n-\n     def test_json_as_unicode(self):\n         app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fce1885f7614c60c7cd8e4a4eadc5b99fe036264", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 1 | Files Changed: 7 | Hunks: 7 | Methods Changed: 8 | Complexity Δ (Sum/Max): 7/3 | Churn Δ: 102 | Churn Cumulative: 233 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,5 @@\n+from flask import Flask\n+\n+app = Flask(__name__)\n+\n+from js_example import views\n\n@@ -0,0 +1,16 @@\n+from flask import jsonify, render_template, request\n+\n+from js_example import app\n+\n+\n+@app.route('/', defaults={'js': 'plain'})\n+@app.route('/<any(plain, jquery, fetch):js>')\n+def index(js):\n+    return render_template('{0}.html'.format(js), js=js)\n+\n+\n+@app.route('/add', methods=['POST'])\n+def add():\n+    a = request.form.get('a', 0, type=float)\n+    b = request.form.get('b', 0, type=float)\n+    return jsonify(result=a + b)\n\n@@ -0,0 +1,30 @@\n+import io\n+\n+from setuptools import find_packages, setup\n+\n+with io.open('README.rst', 'rt', encoding='utf8') as f:\n+    readme = f.read()\n+\n+setup(\n+    name='js_example',\n+    version='1.0.0',\n+    url='http://flask.pocoo.org/docs/patterns/jquery/',\n+    license='BSD',\n+    maintainer='Pallets team',\n+    maintainer_email='contact@palletsprojects.com',\n+    description='Demonstrates making Ajax requests to Flask.',\n+    long_description=readme,\n+    packages=find_packages(),\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        'flask',\n+    ],\n+    extras_require={\n+        'test': [\n+            'pytest',\n+            'coverage',\n+            'blinker',\n+        ],\n+    },\n+)\n\n@@ -0,0 +1,15 @@\n+import pytest\n+\n+from js_example import app\n+\n+\n+@pytest.fixture(name='app')\n+def fixture_app():\n+    app.testing = True\n+    yield app\n+    app.testing = False\n+\n+\n+@pytest.fixture\n+def client(app):\n+    return app.test_client()\n\n@@ -0,0 +1,28 @@\n+import pytest\n+\n+from flask import template_rendered\n+\n+\n+@pytest.mark.parametrize(('path', 'template_name'), (\n+    ('/', 'plain.html'),\n+    ('/plain', 'plain.html'),\n+    ('/fetch', 'fetch.html'),\n+    ('/jquery', 'jquery.html'),\n+))\n+def test_index(app, client, path, template_name):\n+    def check(sender, template, context):\n+        assert template.name == template_name\n+\n+    with template_rendered.connected_to(check, app):\n+        client.get(path)\n+\n+\n+@pytest.mark.parametrize(('a', 'b', 'result'), (\n+    (2, 3, 5),\n+    (2.5, 3, 5.5),\n+    (2, None, 2),\n+    (2, 'b', 2),\n+))\n+def test_add(client, a, b, result):\n+    response = client.post('/add', data={'a': a, 'b': b})\n+    assert response.get_json()['result'] == result\n\n@@ -56,7 +56,7 @@ def register():\n         elif db.execute(\n             'SELECT id FROM user WHERE username = ?', (username,)\n         ).fetchone() is not None:\n-            error = 'User {} is already registered.'.format(username)\n+            error = 'User {0} is already registered.'.format(username)\n \n         if error is None:\n             # the name is available, store it in the database and go to\n\n@@ -20,4 +20,10 @@ setup(\n     install_requires=[\n         'flask',\n     ],\n+    extras_require={\n+        'test': [\n+            'pytest',\n+            'coverage',\n+        ],\n+    },\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8f5168cb31a34c54c9a751cb386b8615e03fb148", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 65/65 | Churn Δ: 9 | Churn Cumulative: 2579 | Contributors (this commit): 29 | Commits (past 90d): 6 | Contributors (cumulative): 29 | DMM Complexity: 0.0\n\nDIFF:\n@@ -614,7 +614,7 @@ def load_dotenv(path=None):\n     return new_dir is not None  # at least one file was located and loaded\n \n \n-def show_server_banner(env, debug, app_import_path):\n+def show_server_banner(env, debug, app_import_path, eager_loading=True):\n     \"\"\"Show extra startup messages the first time the server is run,\n     ignoring the reloader.\n     \"\"\"\n@@ -622,7 +622,10 @@ def show_server_banner(env, debug, app_import_path):\n         return\n \n     if app_import_path is not None:\n-        print(' * Serving Flask app \"{0}\"'.format(app_import_path))\n+        message = ' * Serving Flask app \"{0}\"'.format(app_import_path)\n+        if not eager_loading:\n+            message += ' (lazy loading)'\n+        print(message)\n \n     print(' * Environment: {0}'.format(env))\n \n@@ -759,7 +762,7 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n     if eager_loading is None:\n         eager_loading = not reload\n \n-    show_server_banner(get_env(), debug, info.app_import_path)\n+    show_server_banner(get_env(), debug, info.app_import_path, eager_loading)\n     app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n \n     from werkzeug.serving import run_simple\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#49a38ed9995c5fa8fd07fde732845cbc08e890b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 97 | Lines Deleted: 278 | Files Changed: 5 | Hunks: 22 | Methods Changed: 8 | Complexity Δ (Sum/Max): -1/4 | Churn Δ: 375 | Churn Cumulative: 6401 | Contributors (this commit): 92 | Commits (past 90d): 18 | Contributors (cumulative): 121 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,269 +1,28 @@\n # -*- coding: utf-8 -*-\n-#\n-# Flask documentation build configuration file, created by\n-# sphinx-quickstart on Tue Apr  6 15:24:58 2010.\n-#\n-# This file is execfile()d with the current directory set to its containing dir.\n-#\n-# Note that not all possible configuration values are present in this\n-# autogenerated file.\n-#\n-# All configuration values have a default; values that are commented out\n-# serve to show the default.\n from __future__ import print_function\n \n-import datetime\n-import os\n-import sys\n-import time\n+import inspect\n+import re\n \n-import pkg_resources\n+from pallets_sphinx_themes import DocVersion, ProjectLink, get_version\n \n-BUILD_DATE = datetime.datetime.utcfromtimestamp(int(os.environ.get('SOURCE_DATE_EPOCH', time.time())))\n+# Project --------------------------------------------------------------\n \n-# If extensions (or modules to document with autodoc) are in another directory,\n-# add these directories to sys.path here. If the directory is relative to the\n-# documentation root, use os.path.abspath to make it absolute, like shown here.\n-sys.path.append(os.path.dirname(__file__))\n+project = 'Flask'\n+copyright = '2010 Pallets Team'\n+author = 'Pallets Team'\n+release, version = get_version('Flask')\n \n-# -- General configuration -----------------------------------------------------\n+# General --------------------------------------------------------------\n \n-# If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = '1.0'\n+master_doc = 'index'\n \n-# Add any Sphinx extension module names here, as strings. They can be extensions\n-# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\n extensions = [\n     'sphinx.ext.autodoc',\n     'sphinx.ext.intersphinx',\n-    'flaskdocext'\n+    'sphinxcontrib.log_cabinet',\n ]\n \n-try:\n-    __import__('sphinxcontrib.log_cabinet')\n-except ImportError:\n-    print('sphinxcontrib-log-cabinet is not installed.')\n-    print('Changelog directives will not be re-organized.')\n-else:\n-    extensions.append('sphinxcontrib.log_cabinet')\n-\n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = ['_templates']\n-\n-# The suffix of source filenames.\n-source_suffix = '.rst'\n-\n-# The encoding of source files.\n-#source_encoding = 'utf-8-sig'\n-\n-# The master toctree document.\n-master_doc = 'index'\n-\n-# General information about the project.\n-project = u'Flask'\n-copyright = u'2010 - {0}, Armin Ronacher'.format(BUILD_DATE.year)\n-\n-# The version info for the project you're documenting, acts as replacement for\n-# |version| and |release|, also used in various other places throughout the\n-# built documents.\n-try:\n-    release = pkg_resources.get_distribution('Flask').version\n-except pkg_resources.DistributionNotFound:\n-    print('Flask must be installed to build the documentation.')\n-    print('Install from source using `pip install -e .` in a virtualenv.')\n-    sys.exit(1)\n-\n-if 'dev' in release:\n-    release = ''.join(release.partition('dev')[:2])\n-\n-version = '.'.join(release.split('.')[:2])\n-\n-# The language for content autogenerated by Sphinx. Refer to documentation\n-# for a list of supported languages.\n-#language = None\n-\n-# There are two options for replacing |today|: either, you set today to some\n-# non-false value, then it is used:\n-#today = ''\n-# Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = '%B %d, %Y'\n-\n-# List of patterns, relative to source directory, that match files and\n-# directories to ignore when looking for source files.\n-exclude_patterns = ['_build']\n-\n-# The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n-\n-# If true, '()' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-#add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-#show_authors = False\n-\n-# A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n-\n-\n-# -- Options for HTML output ---------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  Major themes that come with\n-# Sphinx are currently 'default' and 'sphinxdoc'.\n-# html_theme = 'default'\n-\n-# Theme options are theme-specific and customize the look and feel of a theme\n-# further.  For a list of options available for each theme, see the\n-# documentation.\n-# html_theme_options = {}\n-\n-# Add any paths that contain custom themes here, relative to this directory.\n-# html_theme_path = ['_themes']\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# \"<project> v<release> documentation\".\n-#html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n-\n-# The name of an image file (relative to this directory) to place at the top\n-# of the sidebar.  Do not set, template magic!\n-#html_logo = None\n-\n-# The name of an image file (within the static path) to use as favicon of the\n-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n-# pixels large.\n-html_favicon = '_static/flask-favicon.ico'\n-\n-# Add any paths that contain custom static files (such as style sheets) here,\n-# relative to this directory. They are copied after the builtin static files,\n-# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n-html_static_path = ['_static']\n-\n-# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n-# using the given strftime format.\n-#html_last_updated_fmt = '%b %d, %Y'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-#html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-html_sidebars = {\n-    'index': [\n-        'sidebarintro.html',\n-        'sourcelink.html',\n-        'searchbox.html'\n-    ],\n-    '**': [\n-        'sidebarlogo.html',\n-        'localtoc.html',\n-        'relations.html',\n-        'sourcelink.html',\n-        'searchbox.html'\n-    ]\n-}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-#html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-html_use_modindex = False\n-\n-# If false, no index is generated.\n-#html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n-\n-# If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n-\n-# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n-html_show_sphinx = False\n-\n-# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n-\n-# If true, an OpenSearch description file will be output, and all pages will\n-# contain a <link> tag referring to it.  The value of this option must be the\n-# base URL from which the finished HTML is served.\n-#html_use_opensearch = ''\n-\n-# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n-#html_file_suffix = ''\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = 'Flaskdoc'\n-\n-\n-# -- Options for LaTeX output --------------------------------------------------\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title, author, documentclass [howto/manual]).\n-latex_documents = [\n-  ('latexindex', 'Flask.tex', u'Flask Documentation', u'Armin Ronacher', 'manual'),\n-]\n-\n-# Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n-\n-# If false, no module index is generated.\n-latex_use_modindex = False\n-\n-latex_elements = {\n-    'fontpkg': r'\\usepackage{mathpazo}',\n-    'papersize': 'a4paper',\n-    'pointsize': '12pt',\n-    'preamble': r'\\usepackage{flaskstyle}'\n-}\n-latex_use_parts = True\n-\n-latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n-\n-\n-# -- Options for Epub output ---------------------------------------------------\n-\n-# Bibliographic Dublin Core info.\n-#epub_title = ''\n-#epub_author = ''\n-#epub_publisher = ''\n-#epub_copyright = ''\n-\n-# The language of the text. It defaults to the language option\n-# or en if the language is not set.\n-#epub_language = ''\n-\n-# The scheme of the identifier. Typical schemes are ISBN or URL.\n-#epub_scheme = ''\n-\n-# The unique identifier of the text. This can be an ISBN number\n-# or the project homepage.\n-#epub_identifier = ''\n-\n-# A unique identification for the text.\n-#epub_uid = ''\n-\n-# HTML files that should be inserted before the pages created by sphinx.\n-# The format is a list of tuples containing the path and title.\n-#epub_pre_files = []\n-\n-# HTML files shat should be inserted after the pages created by sphinx.\n-# The format is a list of tuples containing the path and title.\n-#epub_post_files = []\n-\n-# A list of files that should not be packed into the epub file.\n-#epub_exclude_files = []\n-\n-# The depth of the table of contents in toc.ncx.\n-#epub_tocdepth = 3\n-\n intersphinx_mapping = {\n     'python': ('https://docs.python.org/3/', None),\n     'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n@@ -275,11 +34,68 @@ intersphinx_mapping = {\n     'blinker': ('https://pythonhosted.org/blinker/', None),\n }\n \n-html_theme_options = {\n-    'touch_icon': 'touch-icon.png'\n-}\n+# HTML -----------------------------------------------------------------\n+\n+html_theme = 'flask'\n+html_context = {\n+    'project_links': [\n+        ProjectLink('Flask Website', 'https://palletsprojects.com/p/flask/'),\n+        ProjectLink('PyPI releases', 'https://pypi.org/project/Flask/'),\n+        ProjectLink('Source Code', 'https://github.com/pallets/flask/'),\n+        ProjectLink(\n+            'Issue Tracker', 'https://github.com/pallets/flask/issues/'),\n+    ],\n+    'versions': [\n+        DocVersion('dev', 'Development', 'unstable'),\n+        DocVersion('1.0', 'Flask 1.0', 'stable'),\n+        DocVersion('0.12', 'Flask 0.12'),\n+    ],\n+    'canonical_url': 'http://flask.pocoo.org/docs/{}/'.format(version),\n+    'carbon_ads_args': 'zoneid=1673&serve=C6AILKT&placement=pocooorg',\n+}\n+html_sidebars = {\n+    'index': [\n+        'project.html',\n+        'versions.html',\n+        'searchbox.html',\n+    ],\n+    '**': [\n+        'localtoc.html',\n+        'relations.html',\n+        'versions.html',\n+        'carbon_ads.html',\n+        'searchbox.html',\n+    ]\n+}\n+html_static_path = ['_static']\n+html_favicon = '_static/flask-favicon.ico'\n+html_logo = '_static/flask.png'\n+html_additional_pages = {\n+    '404': '404.html',\n+}\n+html_show_sourcelink = False\n+\n+# LaTeX ----------------------------------------------------------------\n+\n+latex_documents = [\n+    (master_doc, 'Flask.tex', 'Flask Documentation', 'Pallets Team', 'manual'),\n+]\n+latex_use_modindex = False\n+latex_elements = {\n+    'papersize': 'a4paper',\n+    'pointsize': '12pt',\n+    'fontpkg': r'\\usepackage{mathpazo}',\n+    'preamble': r'\\usepackage{flaskstyle}',\n+}\n+latex_use_parts = True\n+latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n+\n+# linkcheck ------------------------------------------------------------\n+\n+linkcheck_anchors = False\n+\n+# Local Extensions -----------------------------------------------------\n \n-# unwrap decorators\n def unwrap_decorators():\n     import sphinx.util.inspect as inspect\n     import functools\n@@ -296,11 +112,21 @@ def unwrap_decorators():\n         return rv\n     functools.update_wrapper = update_wrapper\n \n+\n unwrap_decorators()\n del unwrap_decorators\n \n \n-def setup(app):\n+_internal_mark_re = re.compile(r'^\\s*:internal:\\s*$(?m)', re.M)\n+\n+\n+def skip_internal(app, what, name, obj, skip, options):\n+    docstring = inspect.getdoc(obj) or ''\n+\n+    if skip or _internal_mark_re.search(docstring) is not None:\n+        return True\n+\n+\n def cut_module_meta(app, what, name, obj, options, lines):\n     \"\"\"Remove metadata from autodoc output.\"\"\"\n     if what != 'module':\n@@ -311,11 +137,9 @@ def setup(app):\n         if not line.startswith((':copyright:', ':license:'))\n     ]\n \n-    app.connect('autodoc-process-docstring', cut_module_meta)\n \n def github_link(\n-        name, rawtext, text, lineno, inliner,\n-        options=None, content=None\n+    name, rawtext, text, lineno, inliner, options=None, content=None\n ):\n     app = inliner.document.settings.env.app\n     release = app.config.release\n@@ -342,4 +166,8 @@ def setup(app):\n     node = reference(rawtext, words, refuri=url, **options)\n     return [node], []\n \n+\n+def setup(app):\n+    app.connect('autodoc-skip-member', skip_internal)\n+    app.connect('autodoc-process-docstring', cut_module_meta)\n     app.add_role('gh', github_link)\n\n@@ -1,16 +0,0 @@\n-import re\n-import inspect\n-\n-\n-_internal_mark_re = re.compile(r'^\\s*:internal:\\s*$(?m)')\n-\n-\n-def skip_member(app, what, name, obj, skip, options):\n-    docstring = inspect.getdoc(obj)\n-    if skip:\n-        return True\n-    return _internal_mark_re.search(docstring or '') is not None\n-\n-\n-def setup(app):\n-    app.connect('autodoc-skip-member', skip_member)\n\n@@ -243,7 +243,7 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n             )\n         elif raise_if_not_found:\n             raise NoAppException(\n-                'Could not import \"{name}\".\"'.format(name=module_name)\n+                'Could not import \"{name}\".'.format(name=module_name)\n             )\n         else:\n             return\n\n@@ -486,7 +486,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n        The `attachment_filename` is preferred over `filename` for MIME-type\n        detection.\n \n-    .. versionchanged:: 0.13\n+    .. versionchanged:: 1.0\n         UTF-8 filenames, as specified in `RFC 2231`_, are supported.\n \n     .. _RFC 2231: https://tools.ietf.org/html/rfc2231#section-4\n\n@@ -38,7 +38,14 @@ setup(\n             'coverage',\n             'tox',\n             'sphinx',\n+            'pallets-sphinx-themes',\n+            'sphinxcontrib-log-cabinet',\n         ],\n+        'docs': [\n+            'sphinx',\n+            'pallets-sphinx-themes',\n+            'sphinxcontrib-log-cabinet',\n+        ]\n     },\n     classifiers=[\n         'Development Status :: 5 - Production/Stable',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#679bf0014f298a1ab8f989989fa430f69d9e28c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 132 | Lines Deleted: 365 | Files Changed: 3 | Hunks: 18 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 497 | Churn Cumulative: 1680 | Contributors (this commit): 14 | Commits (past 90d): 7 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,284 +1,96 @@\n # -*- coding: utf-8 -*-\n-#\n-# Flask documentation build configuration file, created by\n-# sphinx-quickstart on Tue Apr  6 15:24:58 2010.\n-#\n-# This file is execfile()d with the current directory set to its containing dir.\n-#\n-# Note that not all possible configuration values are present in this\n-# autogenerated file.\n-#\n-# All configuration values have a default; values that are commented out\n-# serve to show the default.\n from __future__ import print_function\n-from datetime import datetime\n-import os\n-import sys\n-import pkg_resources\n \n-# If extensions (or modules to document with autodoc) are in another directory,\n-# add these directories to sys.path here. If the directory is relative to the\n-# documentation root, use os.path.abspath to make it absolute, like shown here.\n-sys.path.append(os.path.join(os.path.dirname(__file__), '_themes'))\n-sys.path.append(os.path.dirname(__file__))\n+import inspect\n+import re\n \n-# -- General configuration -----------------------------------------------------\n+from pallets_sphinx_themes import ProjectLink, get_version\n \n-# If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = '1.0'\n+# Project --------------------------------------------------------------\n+\n+project = 'Flask'\n+copyright = '2010 Pallets Team'\n+author = 'Pallets Team'\n+release, version = get_version('Flask')\n+\n+# General --------------------------------------------------------------\n+\n+master_doc = 'index'\n \n-# Add any Sphinx extension module names here, as strings. They can be extensions\n-# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\n extensions = [\n     'sphinx.ext.autodoc',\n     'sphinx.ext.intersphinx',\n-    'flaskdocext'\n+    'sphinxcontrib.log_cabinet',\n ]\n \n-# Add any paths that contain templates here, relative to this directory.\n-templates_path = ['_templates']\n-\n-# The suffix of source filenames.\n-source_suffix = '.rst'\n-\n-# The encoding of source files.\n-#source_encoding = 'utf-8-sig'\n-\n-# The master toctree document.\n-master_doc = 'index'\n-\n-# General information about the project.\n-project = u'Flask'\n-copyright = u'2010 - {0}, Armin Ronacher'.format(datetime.utcnow().year)\n-\n-# The version info for the project you're documenting, acts as replacement for\n-# |version| and |release|, also used in various other places throughout the\n-# built documents.\n-try:\n-    release = pkg_resources.get_distribution('Flask').version\n-except pkg_resources.DistributionNotFound:\n-    print('Flask must be installed to build the documentation.')\n-    print('Install from source using `pip install -e .` in a virtualenv.')\n-    sys.exit(1)\n-\n-if 'dev' in release:\n-    release = ''.join(release.partition('dev')[:2])\n-\n-version = '.'.join(release.split('.')[:2])\n-\n-# The language for content autogenerated by Sphinx. Refer to documentation\n-# for a list of supported languages.\n-#language = None\n-\n-# There are two options for replacing |today|: either, you set today to some\n-# non-false value, then it is used:\n-#today = ''\n-# Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = '%B %d, %Y'\n-\n-# List of patterns, relative to source directory, that match files and\n-# directories to ignore when looking for source files.\n-exclude_patterns = ['_build']\n-\n-# The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n-\n-# If true, '()' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n-\n-# If true, the current module name will be prepended to all description\n-# unit titles (such as .. function::).\n-#add_module_names = True\n-\n-# If true, sectionauthor and moduleauthor directives will be shown in the\n-# output. They are ignored by default.\n-#show_authors = False\n-\n-# A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n-\n-\n-# -- Options for HTML output ---------------------------------------------------\n-\n-# The theme to use for HTML and HTML Help pages.  Major themes that come with\n-# Sphinx are currently 'default' and 'sphinxdoc'.\n-# html_theme = 'default'\n-\n-# Theme options are theme-specific and customize the look and feel of a theme\n-# further.  For a list of options available for each theme, see the\n-# documentation.\n-# html_theme_options = {}\n-\n-# Add any paths that contain custom themes here, relative to this directory.\n-html_theme_path = ['_themes']\n-\n-# The name for this set of Sphinx documents.  If None, it defaults to\n-# \"<project> v<release> documentation\".\n-#html_title = None\n-\n-# A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n-\n-# The name of an image file (relative to this directory) to place at the top\n-# of the sidebar.  Do not set, template magic!\n-#html_logo = None\n-\n-# The name of an image file (within the static path) to use as favicon of the\n-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n-# pixels large.\n-html_favicon = '_static/flask-favicon.ico'\n-\n-# Add any paths that contain custom static files (such as style sheets) here,\n-# relative to this directory. They are copied after the builtin static files,\n-# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n-html_static_path = ['_static']\n-\n-# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n-# using the given strftime format.\n-#html_last_updated_fmt = '%b %d, %Y'\n-\n-# If true, SmartyPants will be used to convert quotes and dashes to\n-# typographically correct entities.\n-#html_use_smartypants = True\n-\n-# Custom sidebar templates, maps document names to template names.\n-html_sidebars = {\n-    'index': [\n-        'sidebarintro.html',\n-        'sourcelink.html',\n-        'searchbox.html'\n-    ],\n-    '**': [\n-        'sidebarlogo.html',\n-        'localtoc.html',\n-        'relations.html',\n-        'sourcelink.html',\n-        'searchbox.html'\n-    ]\n-}\n-\n-# Additional templates that should be rendered to pages, maps page names to\n-# template names.\n-#html_additional_pages = {}\n-\n-# If false, no module index is generated.\n-html_use_modindex = False\n-\n-# If false, no index is generated.\n-#html_use_index = True\n-\n-# If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n-\n-# If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n-\n-# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n-html_show_sphinx = False\n-\n-# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n-\n-# If true, an OpenSearch description file will be output, and all pages will\n-# contain a <link> tag referring to it.  The value of this option must be the\n-# base URL from which the finished HTML is served.\n-#html_use_opensearch = ''\n-\n-# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n-#html_file_suffix = ''\n-\n-# Output file base name for HTML help builder.\n-htmlhelp_basename = 'Flaskdoc'\n-\n-\n-# -- Options for LaTeX output --------------------------------------------------\n-\n-# Grouping the document tree into LaTeX files. List of tuples\n-# (source start file, target name, title, author, documentclass [howto/manual]).\n-latex_documents = [\n-  ('latexindex', 'Flask.tex', u'Flask Documentation', u'Armin Ronacher', 'manual'),\n-]\n-\n-# Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n-\n-# If false, no module index is generated.\n-latex_use_modindex = False\n-\n-latex_elements = {\n-    'fontpkg': r'\\usepackage{mathpazo}',\n-    'papersize': 'a4paper',\n-    'pointsize': '12pt',\n-    'preamble': r'\\usepackage{flaskstyle}'\n-}\n-latex_use_parts = True\n-\n-latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n-\n-\n-# -- Options for Epub output ---------------------------------------------------\n-\n-# Bibliographic Dublin Core info.\n-#epub_title = ''\n-#epub_author = ''\n-#epub_publisher = ''\n-#epub_copyright = ''\n-\n-# The language of the text. It defaults to the language option\n-# or en if the language is not set.\n-#epub_language = ''\n-\n-# The scheme of the identifier. Typical schemes are ISBN or URL.\n-#epub_scheme = ''\n-\n-# The unique identifier of the text. This can be a ISBN number\n-# or the project homepage.\n-#epub_identifier = ''\n-\n-# A unique identification for the text.\n-#epub_uid = ''\n-\n-# HTML files that should be inserted before the pages created by sphinx.\n-# The format is a list of tuples containing the path and title.\n-#epub_pre_files = []\n-\n-# HTML files shat should be inserted after the pages created by sphinx.\n-# The format is a list of tuples containing the path and title.\n-#epub_post_files = []\n-\n-# A list of files that should not be packed into the epub file.\n-#epub_exclude_files = []\n-\n-# The depth of the table of contents in toc.ncx.\n-#epub_tocdepth = 3\n-\n intersphinx_mapping = {\n-    'python': ('https://docs.python.org/3/', None),\n-    'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n-    'click': ('http://click.pocoo.org/', None),\n-    'jinja': ('http://jinja.pocoo.org/docs/', None),\n-    'sqlalchemy': ('http://docs.sqlalchemy.org/en/latest/', None),\n-    'wtforms': ('https://wtforms.readthedocs.io/en/latest/', None),\n-    'blinker': ('https://pythonhosted.org/blinker/', None)\n+    # 'python': ('https://docs.python.org/3/', None),\n+    # 'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n+    # 'click': ('http://click.pocoo.org/', None),\n+    # 'jinja': ('http://jinja.pocoo.org/docs/', None),\n+    # 'itsdangerous': ('https://pythonhosted.org/itsdangerous', None),\n+    # 'sqlalchemy': ('https://docs.sqlalchemy.org/en/latest/', None),\n+    # 'wtforms': ('https://wtforms.readthedocs.io/en/latest/', None),\n+    # 'blinker': ('https://pythonhosted.org/blinker/', None),\n }\n \n-try:\n-    __import__('flask_theme_support')\n-    pygments_style = 'flask_theme_support.FlaskyStyle'\n+# HTML -----------------------------------------------------------------\n+\n html_theme = 'flask'\n-    html_theme_options = {\n-        'touch_icon': 'touch-icon.png'\n+html_context = {\n+    'project_links': [\n+        ProjectLink('Flask Website', 'https://palletsprojects.com/p/flask/'),\n+        ProjectLink('PyPI releases', 'https://pypi.org/project/Flask/'),\n+        ProjectLink('Source Code', 'https://github.com/pallets/flask/'),\n+        ProjectLink(\n+            'Issue Tracker', 'https://github.com/pallets/flask/issues/'),\n+    ],\n+    'canonical_url': 'http://flask.pocoo.org/docs/{}/'.format(version),\n+    'carbon_ads_args': 'zoneid=1673&serve=C6AILKT&placement=pocooorg',\n }\n-except ImportError:\n-    print('-' * 74)\n-    print('Warning: Flask themes unavailable.  Building with default theme')\n-    print('If you want the Flask themes, run this command and build again:')\n-    print()\n-    print('  git submodule update --init')\n-    print('-' * 74)\n+html_sidebars = {\n+    'index': [\n+        'project.html',\n+        'versions.html',\n+        'searchbox.html',\n+    ],\n+    '**': [\n+        'localtoc.html',\n+        'relations.html',\n+        'versions.html',\n+        'carbon_ads.html',\n+        'searchbox.html',\n+    ]\n+}\n+html_static_path = ['_static']\n+html_favicon = '_static/flask-favicon.ico'\n+html_logo = '_static/flask.png'\n+html_additional_pages = {\n+    '404': '404.html',\n+}\n+html_show_sourcelink = False\n \n+# LaTeX ----------------------------------------------------------------\n+\n+latex_documents = [\n+    (master_doc, 'Flask.tex', 'Flask Documentation', 'Pallets Team', 'manual'),\n+]\n+latex_use_modindex = False\n+latex_elements = {\n+    'papersize': 'a4paper',\n+    'pointsize': '12pt',\n+    'fontpkg': r'\\usepackage{mathpazo}',\n+    'preamble': r'\\usepackage{flaskstyle}',\n+}\n+latex_use_parts = True\n+latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n+\n+# linkcheck ------------------------------------------------------------\n+\n+linkcheck_anchors = False\n+\n+# Local Extensions -----------------------------------------------------\n \n-# unwrap decorators\n def unwrap_decorators():\n     import sphinx.util.inspect as inspect\n     import functools\n@@ -295,5 +107,62 @@ def unwrap_decorators():\n         return rv\n     functools.update_wrapper = update_wrapper\n \n+\n unwrap_decorators()\n del unwrap_decorators\n+\n+\n+_internal_mark_re = re.compile(r'^\\s*:internal:\\s*$(?m)', re.M)\n+\n+\n+def skip_internal(app, what, name, obj, skip, options):\n+    docstring = inspect.getdoc(obj) or ''\n+\n+    if skip or _internal_mark_re.search(docstring) is not None:\n+        return True\n+\n+\n+def cut_module_meta(app, what, name, obj, options, lines):\n+    \"\"\"Remove metadata from autodoc output.\"\"\"\n+    if what != 'module':\n+        return\n+\n+    lines[:] = [\n+        line for line in lines\n+        if not line.startswith((':copyright:', ':license:'))\n+    ]\n+\n+\n+def github_link(\n+    name, rawtext, text, lineno, inliner, options=None, content=None\n+):\n+    app = inliner.document.settings.env.app\n+    release = app.config.release\n+    base_url = 'https://github.com/pallets/flask/tree/'\n+\n+    if text.endswith('>'):\n+        words, text = text[:-1].rsplit('<', 1)\n+        words = words.strip()\n+    else:\n+        words = None\n+\n+    if release.endswith('dev'):\n+        url = '{0}master/{1}'.format(base_url, text)\n+    else:\n+        url = '{0}{1}/{2}'.format(base_url, release, text)\n+\n+    if words is None:\n+        words = url\n+\n+    from docutils.nodes import reference\n+    from docutils.parsers.rst.roles import set_classes\n+    options = options or {}\n+    set_classes(options)\n+    node = reference(rawtext, words, refuri=url, **options)\n+    return [node], []\n+\n+\n+def setup(app):\n+    app.connect('autodoc-skip-member', skip_internal)\n+    app.connect('autodoc-process-docstring', cut_module_meta)\n+    app.add_role('gh', github_link)\n\n@@ -1,16 +0,0 @@\n-import re\n-import inspect\n-\n-\n-_internal_mark_re = re.compile(r'^\\s*:internal:\\s*$(?m)')\n-\n-\n-def skip_member(app, what, name, obj, skip, options):\n-    docstring = inspect.getdoc(obj)\n-    if skip:\n-        return True\n-    return _internal_mark_re.search(docstring or '') is not None\n-\n-\n-def setup(app):\n-    app.connect('autodoc-skip-member', skip_member)\n\n@@ -1,86 +0,0 @@\n-# flasky extensions.  flasky pygments style based on tango style\n-from pygments.style import Style\n-from pygments.token import Keyword, Name, Comment, String, Error, \\\n-     Number, Operator, Generic, Whitespace, Punctuation, Other, Literal\n-\n-\n-class FlaskyStyle(Style):\n-    background_color = \"#f8f8f8\"\n-    default_style = \"\"\n-\n-    styles = {\n-        # No corresponding class for the following:\n-        #Text:                     \"\", # class:  ''\n-        Whitespace:                \"underline #f8f8f8\",      # class: 'w'\n-        Error:                     \"#a40000 border:#ef2929\", # class: 'err'\n-        Other:                     \"#000000\",                # class 'x'\n-\n-        Comment:                   \"italic #8f5902\", # class: 'c'\n-        Comment.Preproc:           \"noitalic\",       # class: 'cp'\n-\n-        Keyword:                   \"bold #004461\",   # class: 'k'\n-        Keyword.Constant:          \"bold #004461\",   # class: 'kc'\n-        Keyword.Declaration:       \"bold #004461\",   # class: 'kd'\n-        Keyword.Namespace:         \"bold #004461\",   # class: 'kn'\n-        Keyword.Pseudo:            \"bold #004461\",   # class: 'kp'\n-        Keyword.Reserved:          \"bold #004461\",   # class: 'kr'\n-        Keyword.Type:              \"bold #004461\",   # class: 'kt'\n-\n-        Operator:                  \"#582800\",   # class: 'o'\n-        Operator.Word:             \"bold #004461\",   # class: 'ow' - like keywords\n-\n-        Punctuation:               \"bold #000000\",   # class: 'p'\n-\n-        # because special names such as Name.Class, Name.Function, etc.\n-        # are not recognized as such later in the parsing, we choose them\n-        # to look the same as ordinary variables.\n-        Name:                      \"#000000\",        # class: 'n'\n-        Name.Attribute:            \"#c4a000\",        # class: 'na' - to be revised\n-        Name.Builtin:              \"#004461\",        # class: 'nb'\n-        Name.Builtin.Pseudo:       \"#3465a4\",        # class: 'bp'\n-        Name.Class:                \"#000000\",        # class: 'nc' - to be revised\n-        Name.Constant:             \"#000000\",        # class: 'no' - to be revised\n-        Name.Decorator:            \"#888\",           # class: 'nd' - to be revised\n-        Name.Entity:               \"#ce5c00\",        # class: 'ni'\n-        Name.Exception:            \"bold #cc0000\",   # class: 'ne'\n-        Name.Function:             \"#000000\",        # class: 'nf'\n-        Name.Property:             \"#000000\",        # class: 'py'\n-        Name.Label:                \"#f57900\",        # class: 'nl'\n-        Name.Namespace:            \"#000000\",        # class: 'nn' - to be revised\n-        Name.Other:                \"#000000\",        # class: 'nx'\n-        Name.Tag:                  \"bold #004461\",   # class: 'nt' - like a keyword\n-        Name.Variable:             \"#000000\",        # class: 'nv' - to be revised\n-        Name.Variable.Class:       \"#000000\",        # class: 'vc' - to be revised\n-        Name.Variable.Global:      \"#000000\",        # class: 'vg' - to be revised\n-        Name.Variable.Instance:    \"#000000\",        # class: 'vi' - to be revised\n-\n-        Number:                    \"#990000\",        # class: 'm'\n-\n-        Literal:                   \"#000000\",        # class: 'l'\n-        Literal.Date:              \"#000000\",        # class: 'ld'\n-\n-        String:                    \"#4e9a06\",        # class: 's'\n-        String.Backtick:           \"#4e9a06\",        # class: 'sb'\n-        String.Char:               \"#4e9a06\",        # class: 'sc'\n-        String.Doc:                \"italic #8f5902\", # class: 'sd' - like a comment\n-        String.Double:             \"#4e9a06\",        # class: 's2'\n-        String.Escape:             \"#4e9a06\",        # class: 'se'\n-        String.Heredoc:            \"#4e9a06\",        # class: 'sh'\n-        String.Interpol:           \"#4e9a06\",        # class: 'si'\n-        String.Other:              \"#4e9a06\",        # class: 'sx'\n-        String.Regex:              \"#4e9a06\",        # class: 'sr'\n-        String.Single:             \"#4e9a06\",        # class: 's1'\n-        String.Symbol:             \"#4e9a06\",        # class: 'ss'\n-\n-        Generic:                   \"#000000\",        # class: 'g'\n-        Generic.Deleted:           \"#a40000\",        # class: 'gd'\n-        Generic.Emph:              \"italic #000000\", # class: 'ge'\n-        Generic.Error:             \"#ef2929\",        # class: 'gr'\n-        Generic.Heading:           \"bold #000080\",   # class: 'gh'\n-        Generic.Inserted:          \"#00A000\",        # class: 'gi'\n-        Generic.Output:            \"#888\",           # class: 'go'\n-        Generic.Prompt:            \"#745334\",        # class: 'gp'\n-        Generic.Strong:            \"bold #000000\",   # class: 'gs'\n-        Generic.Subheading:        \"bold #800080\",   # class: 'gu'\n-        Generic.Traceback:         \"bold #a40000\",   # class: 'gt'\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
