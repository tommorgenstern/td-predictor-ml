{"custom_id": "requests#461497f5be722fa010a691bb6951d13d8df63688", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 270 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2011. A <a href=\"http://kennethreitz.com\">Kenneth Reitz</a> Project'\n+copyright = u'2011. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8ffb2462f99a51dd5d2d5c4054da9e986e669899", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -30,7 +30,7 @@ setup(\n                      open('HISTORY.rst').read(),\n     author='Kenneth Reitz',\n     author_email='me@kennethreitz.com',\n-    url='https://github.com/kennethreitz/requests',\n+    url='http://python-requests.org',\n     packages= [\n         'requests',\n         'requests.packages',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec5f227381ae3911e0cd979b24564064c5a11efd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 30 | Churn Cumulative: 85 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,22 +10,26 @@ from core import __version__\n timeout = None\n \n class settings:\n-    \"\"\"Context manager for settings.\"\"\"\n     \n-    cache = {}\n-    \n-    def __init__(self, timeout):\n-        self.module = inspect.getmodule(self)\n-        \n-        # Cache settings\n-        self.cache['timeout'] = self.module.timeout\n-        \n-        self.module.timeout = timeout\n+    def __init__(self, **settings):\n+        self._cache_settings(**settings)\n+        self._alter_settings(**settings)\n         \n     def __enter__(self):\n         pass\n         \n     def __exit__(self, type, value, traceback):\n-        # Restore settings \n-        for key in self.cache:\n-            setattr(self.module, key, self.cache[key])\n+        self._restore_settings()\n+        \n+    def _cache_settings(self, **settings):\n+        self.cache = {}\n+        for setting in settings:\n+            self.cache[setting] = globals()[setting]\n+        \n+    def _alter_settings(self, **settings):\n+        for setting, value in settings.items():\n+            globals()[setting] = value\n+        \n+    def _restore_settings(self):\n+        for setting, value in self.cache.items():\n+            globals()[setting] = value\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#21e2d0c34a7f3e7b661ca93cb6afd3c0fcffa3c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 305 | Contributors (this commit): 5 | Commits (past 90d): 20 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -156,6 +156,16 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('https://convore.com/api/account/verify.json', auth=conv_auth)\n         self.assertEquals(r.status_code, 401)\n         \n+    def test_settings(self):\n+        import urllib2\n+        \n+        with requests.settings(timeout=0):\n+            self.assertRaises(urllib2.URLError, requests.get, 'http://google.com')\n+            \n+        with requests.settings(timeout=10):\n+            requests.get('http://google.com')\n+        \n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#637d0330c2e0ed96da4d2458847a3fc811aa4006", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 308 | Contributors (this commit): 5 | Commits (past 90d): 21 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -165,6 +165,9 @@ class RequestsTestSuite(unittest.TestCase):\n         with requests.settings(timeout=10):\n             requests.get('http://google.com')\n             \n+    def test_nonurlencoded_post_data(self):\n+        requests.post('http://google.com', data='foo')\n+        \n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#baddc5b6adc72ad1cd1f0500344569ffef04cdf7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 573 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -48,19 +48,15 @@ class Request(object):\n         #: and HTTPError storage).\n         self.redirect = redirect\n         \n-        # self.data = {}\n         if hasattr(data, 'items'):\n             for (k, v) in data.items():\n                 self.data.update({\n                     k.encode('utf-8') if isinstance(k, unicode) else k:\n                     v.encode('utf-8') if isinstance(v, unicode) else v\n                 })\n-\n-        # url encode data if it's a dict\n-        if hasattr(data, 'items'):\n             self._enc_data = urllib.urlencode(self.data)\n         else:\n-            self._enc_data = data\n+            self._enc_data = self.data = data\n \n         #: :class:`Response <models.Response>` instance, containing\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59c747b793cd84589edece4e905fd175af16686a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 694 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,7 @@ __all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n \n \n def request(method, url, **kwargs):\n-    \"\"\"Sends a Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n+    \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-requests.system\n+requests.models\n ~~~~~~~~~~~~~~~\n \n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a00dc1abf37a0348e963d4e061c3f820bddca09d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 5 | Churn Cumulative: 580 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -238,6 +238,8 @@ class Request(object):\n                 self._build_response(why)\n                 if not self.redirect:\n                     self.response.error = why\n+            except urllib2.URLError, error:\n+                raise Timeout if isinstance(error.reason, socket.timeout) else error\n             else:\n                 self._build_response(resp)\n                 self.response.ok = True\n@@ -492,6 +494,9 @@ class RequestException(Exception):\n class AuthenticationError(RequestException):\n     \"\"\"The authentication credentials provided were invalid.\"\"\"\n     \n+class Timeout(RequestException):\n+    \"\"\"The request timed out.\"\"\"\n+\n class URLRequired(RequestException):\n     \"\"\"A valid URL is required to make a request.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8cc2d0421a35e8001b8ddd584777dc0d1b30963", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 22 | Files Changed: 3 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 47 | Churn Cumulative: 3239 | Contributors (this commit): 7 | Commits (past 90d): 50 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -22,3 +22,4 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n from models import HTTPError, auth_manager\n from api import *\n+from exceptions import *\n\n@@ -0,0 +1,23 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.models\n+~~~~~~~~~~~~~~~\n+\n+\"\"\"\n+\n+class RequestException(Exception):\n+    \"\"\"There was an ambiguous exception that occured while handling your\n+    request.\"\"\"\n+\n+class AuthenticationError(RequestException):\n+    \"\"\"The authentication credentials provided were invalid.\"\"\"\n+    \n+class Timeout(RequestException):\n+    \"\"\"The request timed out.\"\"\"\n+\n+class URLRequired(RequestException):\n+    \"\"\"A valid URL is required to make a request.\"\"\"\n+\n+class InvalidMethod(RequestException):\n+    \"\"\"An inappropriate method was attempted.\"\"\"\n\n@@ -19,6 +19,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHa\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n+from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod\n \n \n \n@@ -480,25 +481,3 @@ class AuthObject(object):\n             self.handler = self._handlers.get(handler.lower(), urllib2.HTTPBasicAuthHandler)\n         else:\n             self.handler = handler\n-\n-\n-# ----------\n-# Exceptions\n-# ----------\n-\n-\n-class RequestException(Exception):\n-    \"\"\"There was an ambiguous exception that occured while handling your\n-    request.\"\"\"\n-\n-class AuthenticationError(RequestException):\n-    \"\"\"The authentication credentials provided were invalid.\"\"\"\n-    \n-class Timeout(RequestException):\n-    \"\"\"The request timed out.\"\"\"\n-\n-class URLRequired(RequestException):\n-    \"\"\"A valid URL is required to make a request.\"\"\"\n-\n-class InvalidMethod(RequestException):\n-    \"\"\"An inappropriate method was attempted.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#da26f1f37729b614db68cef4c968e99009210a51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 314 | Contributors (this commit): 5 | Commits (past 90d): 18 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -157,10 +157,8 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(r.status_code, 401)\n         \n     def test_settings(self):\n-        import urllib2\n-        \n-        with requests.settings(timeout=0):\n-            self.assertRaises(urllib2.URLError, requests.get, 'http://google.com')\n+        with requests.settings(timeout=0.0001):\n+            self.assertRaises(requests.Timeout, requests.get, 'http://google.com')\n             \n         with requests.settings(timeout=10):\n             requests.get('http://google.com')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ef81c166114c3e11502b96ce344bfdaa7292d9ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 25 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-requests.models\n+requests.exceptions\n ~~~~~~~~~~~~~~~\n \n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ba79a2eb97f87e883af6871c2b59b7b00501d0a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 41 | Churn Cumulative: 2654 | Contributors (this commit): 7 | Commits (past 90d): 41 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,7 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n-\n from models import HTTPError, auth_manager\n from api import *\n from exceptions import *\n+from settings import *\n\\ No newline at end of file\n\n@@ -0,0 +1,39 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.settings\n+~~~~~~~~~~~~~~~~~\n+\n+This module provides the Requests settings feature set.\n+\n+\"\"\"\n+\n+\n+class Settings(object):\n+\n+    def __init__(self, **settings):\n+        self._cache_settings(**settings)\n+        self._alter_settings(**settings)\n+\n+    def __enter__(self):\n+        pass\n+\n+    def __exit__(self, type, value, traceback):\n+        self._restore_settings()\n+\n+    def _cache_settings(self, **settings):\n+        self.cache = {}\n+        for setting in settings:\n+            self.cache[setting] = globals()[setting]\n+\n+    def _alter_settings(self, **settings):\n+        for setting, value in settings.items():\n+            globals()[setting] = value\n+\n+    def _restore_settings(self):\n+        for setting, value in self.cache.items():\n+            globals()[setting] = value\n+\n+\n+settings = Settings\n+timeout = None\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bbd58b922bb1e5268206aa266cddfb1293c6f959", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 30 | Files Changed: 3 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 34 | Churn Cumulative: 2853 | Contributors (this commit): 7 | Commits (past 90d): 48 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -6,30 +6,3 @@ import packages\n from core import *\n \n from core import __version__\n-\n-timeout = None\n-\n-class settings:\n-    \n-    def __init__(self, **settings):\n-        self._cache_settings(**settings)\n-        self._alter_settings(**settings)\n-        \n-    def __enter__(self):\n-        pass\n-        \n-    def __exit__(self, type, value, traceback):\n-        self._restore_settings()\n-        \n-    def _cache_settings(self, **settings):\n-        self.cache = {}\n-        for setting in settings:\n-            self.cache[setting] = globals()[setting]\n-        \n-    def _alter_settings(self, **settings):\n-        for setting, value in settings.items():\n-            globals()[setting] = value\n-        \n-    def _restore_settings(self):\n-        for setting, value in self.cache.items():\n-            globals()[setting] = value\n\\ No newline at end of file\n\n@@ -11,7 +11,7 @@ This module impliments the Requests API.\n \n \"\"\"\n \n-import requests\n+import settings\n from .models import Request, Response, AuthManager, AuthObject, auth_manager\n \n \n@@ -37,7 +37,8 @@ def request(method, url, **kwargs):\n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n                 cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n                 auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-                timeout=kwargs.pop('timeout', requests.timeout))\n+                timeout=kwargs.pop('timeout', settings.timeout))\n+    \n     r.send()\n \n     return r.response\n\n@@ -22,4 +22,4 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from models import HTTPError, auth_manager\n from api import *\n from exceptions import *\n-from settings import *\n\\ No newline at end of file\n+from settings import settings\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f60748c7340c0f1b034998677115d465d470f0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 114 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,5 @@\n # -*- coding: utf-8 -*-\n \n-import inspect\n-\n import packages\n from core import *\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7d0374df2f478b0a93af2d8ca317f38b556ba486", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 2665 | Contributors (this commit): 7 | Commits (past 90d): 41 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -22,4 +22,4 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from models import HTTPError, auth_manager\n from api import *\n from exceptions import *\n-from settings import settings\n\\ No newline at end of file\n+from settings import Settings as settings\n\\ No newline at end of file\n\n@@ -8,6 +8,9 @@ This module provides the Requests settings feature set.\n \n \"\"\"\n \n+# Time (in seconds) to allow the request to connect to\n+# the remote host before timing it out.\n+timeout = None\n \n class Settings(object):\n \n@@ -33,7 +36,3 @@ class Settings(object):\n     def _restore_settings(self):\n         for setting, value in self.cache.items():\n             globals()[setting] = value\n-\n-\n-settings = Settings\n-timeout = None\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e153b94190359f9d7dbdd0753d182bf672baab9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 18 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 47 | Churn Cumulative: 1088 | Contributors (this commit): 5 | Commits (past 90d): 34 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -31,13 +31,16 @@ def request(method, url, **kwargs):\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     \"\"\"\n     data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n                 cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n                 auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-                timeout=kwargs.pop('timeout', requests.timeout))\n+                timeout=kwargs.pop('timeout', requests.timeout),\n+                allow_redirects=kwargs.pop('allow_redirects', requests.timeout)\n+                )\n     r.send()\n \n     return r.response\n\n@@ -31,7 +31,8 @@ class Request(object):\n     _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n-                 data=dict(), auth=None, cookiejar=None, timeout=None, redirect=True):\n+                 data=dict(), auth=None, cookiejar=None, timeout=None,\n+                 redirect=True, allow_redirects=False):\n \n         socket.setdefaulttimeout(timeout)\n \n@@ -48,6 +49,8 @@ class Request(object):\n         #: True if :class:`Request <models.Request>` is part of a redirect chain (disables history\n         #: and HTTPError storage).\n         self.redirect = redirect\n+        #: Set to True if full redirects are allowed (e.g. re-POST-ing of data at new ``Location``)\n+        self.allow_redirects = allow_redirects\n \n         if hasattr(data, 'items'):\n             for (k, v) in data.items():\n@@ -163,14 +166,25 @@ class Request(object):\n \n         if self.redirect:\n \n-            while 'location' in r.headers:\n+            while (\n+                ('location' in r.headers) and\n+                ((self.method in ('GET', 'HEAD')) or\n+                (r.status_code is 303) or\n+                (self.allow_redirects))\n+            ):\n \n                 history.append(r)\n \n                 url = r.headers['location']\n \n+                # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n+                if r.status_code is 303:\n+                    method = 'GET'\n+                else:\n+                    method = self.method\n+\n                 request = Request(\n-                    url, self.headers, self.files, self.method,\n+                    url, self.headers, self.files, method,\n                     self.data, self.auth, self.cookiejar, redirect=False\n                 )\n                 request.send()\n\n@@ -71,35 +71,41 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_POSTBIN_GET_POST_FILES(self):\n         bin = requests.post('http://www.postbin.org/')\n-        self.assertEqual(bin.status_code, 200)\n+        self.assertEqual(bin.status_code, 302)\n \n-        post = requests.post(bin.url, data={'some': 'data'})\n+        post_url = bin.headers['location']\n+        post = requests.post(post_url, data={'some': 'data'})\n         self.assertEqual(post.status_code, 201)\n \n-        post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n+        post2 = requests.post(post_url, files={'some': open('test_requests.py')})\n         self.assertEqual(post2.status_code, 201)\n \n-        post3 = requests.post(bin.url, data='[{\"some\": \"json\"}]')\n+        post3 = requests.post(post_url, data='[{\"some\": \"json\"}]')\n         self.assertEqual(post.status_code, 201)\n \n+\n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n         bin = requests.post('http://www.postbin.org/')\n+        self.assertEqual(bin.status_code, 302)\n \n-        self.assertEqual(bin.status_code, 200)\n+        post_url = bin.headers['location']\n \n-        post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n+        post2 = requests.post(post_url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n         self.assertEqual(post2.status_code, 201)\n \n \n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n         bin = requests.post('http://www.postbin.org/')\n-        self.assertEqual(bin.status_code, 200)\n+        self.assertEqual(bin.status_code, 302)\n \n-        post2 = requests.post(bin.url, files={'some': open('test_requests.py')},\n+        post_url = bin.headers['location']\n+\n+        post2 = requests.post(post_url, files={'some': open('test_requests.py')},\n         headers = {'User-Agent': 'requests-tests'})\n \n         self.assertEqual(post2.status_code, 201)\n \n+\n     def test_nonzero_evaluation(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertEqual(bool(r), False)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#06e662be86d0cd383373e9714c2eb8f1fb96a461", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 338 | Contributors (this commit): 5 | Commits (past 90d): 19 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,8 @@\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n \n+from __future__ import with_statement\n+\n import unittest\n import cookielib\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8aa6fabd4d57ca0f9a5efc4a7d70fec338c94e2a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 629 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -177,6 +177,12 @@ class Request(object):\n \n                 url = r.headers['location']\n \n+                # Facilitate for non-RFC2616-compliant 'location' headers\n+                # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n+                if not urlparse(url).netloc:\n+                    parent_url_components = urlparse(self.url)\n+                    url = '%s://%s/%s' % (parent_url_components.scheme, parent_url_components.netloc, url)\n+\n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is 303:\n                     method = 'GET'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3cdb777c234a1511c959083ff25847166158cdd3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 136 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -37,9 +37,12 @@ def request(method, url, **kwargs):\n     data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n+        cookiejar=kwargs.pop('cookies', None),\n+        files=kwargs.pop('files', None),\n         auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-                timeout=kwargs.pop('timeout', settings.timeout))\n+        timeout=kwargs.pop('timeout', settings.timeout),\n+        allow_redirects=kwargs.pop('allow_redirects', None)\n+    )\n \n     r.send()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8a4d5c4683304bc6f6bd9fcd09a1852957dafb64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 352 | Contributors (this commit): 5 | Commits (past 90d): 20 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -44,12 +44,22 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n-        heads = {'User-agent':\n-                 'Mozilla/5.0 (github.com/kennethreitz/requests)'}\n+        heads = {\n+            'User-agent':\n+                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n+        }\n \n         r = requests.get('http://whatsmyua.com', headers=heads);\n         self.assertTrue(heads['User-agent'] in r.content)\n \n+        heads = {\n+            'user-agent':\n+                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n+        }\n+\n+        r = requests.get('http://whatsmyua.com', headers=heads);\n+        self.assertTrue(heads['user-agent'] in r.content)\n+\n     def test_HTTP_200_OK_HEAD(self):\n         r = requests.head('http://google.com')\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49f1ec1efbd2ac934754b8fa974a2d9a0a083cbd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 2 | Methods Changed: 11 | Complexity Δ (Sum/Max): -2/7 | Churn Δ: 90 | Churn Cumulative: 136 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,52 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.config\n+~~~~~~~~~~~~~~~\n+\n+This module provides the Requests settings feature set.\n+\n+\"\"\"\n+\n+# Time (in seconds) to allow the request to connect to\n+# the remote host before timing it out.\n+\n+# timeout = None\n+\n+\n+class Settings(object):\n+    _singleton = {}\n+    __attrs__ = ('timeout',)\n+\n+    def __init__(self, **kwargs):\n+        super(Settings, self).__init__()\n+\n+        self.__dict__ = self._singleton\n+\n+    def __getattribute__(self, key):\n+        if key in object.__getattribute__(self, '__attrs__'):\n+            try:\n+                return object.__getattribute__(self, key)\n+            except AttributeError:\n+                return None\n+        return object.__getattribute__(self, key)\n+\n+\n+    def __enter__(self):\n+        pass\n+\n+    def __exit__(self, *args):\n+\n+        self.__dict__.update(self.__cache.copy())\n+        del self.__cache\n+\n+\n+    def __call__(self, *args, **kwargs):\n+        r = self.__class__()\n+        r.__cache = self.__dict__.copy()\n+        self.__dict__.update(*args, **kwargs)\n+\n+        return r\n+\n+\n+settings = Settings()\n\\ No newline at end of file\n\n@@ -1,38 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.settings\n-~~~~~~~~~~~~~~~~~\n-\n-This module provides the Requests settings feature set.\n-\n-\"\"\"\n-\n-# Time (in seconds) to allow the request to connect to\n-# the remote host before timing it out.\n-timeout = None\n-\n-class Settings(object):\n-\n-    def __init__(self, **settings):\n-        self._cache_settings(**settings)\n-        self._alter_settings(**settings)\n-\n-    def __enter__(self):\n-        pass\n-\n-    def __exit__(self, type, value, traceback):\n-        self._restore_settings()\n-\n-    def _cache_settings(self, **settings):\n-        self.cache = {}\n-        for setting in settings:\n-            self.cache[setting] = globals()[setting]\n-\n-    def _alter_settings(self, **settings):\n-        for setting, value in settings.items():\n-            globals()[setting] = value\n-\n-    def _restore_settings(self):\n-        for setting, value in self.cache.items():\n-            globals()[setting] = value\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d64bf501d023c3f13999dddecc7e77ecf29f47e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 116 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n \n-import packages\n from core import *\n-\n from core import __version__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#982fd9d8032385b1ee4ed97737d100077ab799c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 140 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ This module impliments the Requests API.\n \"\"\"\n \n import requests\n-import settings\n+import config\n from .models import Request, Response, AuthManager, AuthObject, auth_manager\n \n \n@@ -40,7 +40,7 @@ def request(method, url, **kwargs):\n         cookiejar=kwargs.pop('cookies', None),\n         files=kwargs.pop('files', None),\n         auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-        timeout=kwargs.pop('timeout', settings.timeout),\n+        timeout=kwargs.pop('timeout', config.settings.timeout),\n         allow_redirects=kwargs.pop('allow_redirects', None)\n     )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f887906ec3def9d96b622f2da737f7b1cb13b3ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 51 | Churn Cumulative: 103 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -8,14 +8,10 @@ This module provides the Requests settings feature set.\n \n \"\"\"\n \n-# Time (in seconds) to allow the request to connect to\n-# the remote host before timing it out.\n-\n-# timeout = None\n-\n-\n class Settings(object):\n     _singleton = {}\n+\n+    # attributes with defaults\n     __attrs__ = ('timeout',)\n \n     def __init__(self, **kwargs):\n@@ -23,6 +19,31 @@ class Settings(object):\n \n         self.__dict__ = self._singleton\n \n+\n+    def __call__(self, *args, **kwargs):\n+        # new instance of class to call\n+        r = self.__class__()\n+\n+        # cache previous settings for __exit__\n+        r.__cache = self.__dict__.copy()\n+\n+        # set new settings\n+        self.__dict__.update(*args, **kwargs)\n+\n+        return r\n+\n+\n+    def __enter__(self):\n+        pass\n+\n+\n+    def __exit__(self, *args):\n+\n+        # restore cached copy\n+        self.__dict__.update(self.__cache.copy())\n+        del self.__cache\n+\n+\n     def __getattribute__(self, key):\n         if key in object.__getattribute__(self, '__attrs__'):\n             try:\n@@ -31,22 +52,4 @@ class Settings(object):\n                 return None\n         return object.__getattribute__(self, key)\n \n-\n-    def __enter__(self):\n-        pass\n-\n-    def __exit__(self, *args):\n-\n-        self.__dict__.update(self.__cache.copy())\n-        del self.__cache\n-\n-\n-    def __call__(self, *args, **kwargs):\n-        r = self.__class__()\n-        r.__cache = self.__dict__.copy()\n-        self.__dict__.update(*args, **kwargs)\n-\n-        return r\n-\n-\n settings = Settings()\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c0faa9e79c24a9d37ff6a061780a0821b29eded7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2621 | Contributors (this commit): 7 | Commits (past 90d): 40 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -22,4 +22,4 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from models import HTTPError, auth_manager\n from api import *\n from exceptions import *\n-from settings import Settings as settings\n\\ No newline at end of file\n+from config import settings\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bc290f62d7f17392ac30e57cc213c5034c48b9da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 257 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,12 +36,12 @@ def request(method, url, **kwargs):\n     \"\"\"\n     data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n-    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-        cookiejar=kwargs.pop('cookies', None),\n-        files=kwargs.pop('files', None),\n-        auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-        timeout=kwargs.pop('timeout', config.settings.timeout),\n-        allow_redirects=kwargs.pop('allow_redirects', None)\n+    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', dict()),\n+        cookiejar=kwargs.get('cookies', None),\n+        files=kwargs.get('files', None),\n+        auth=kwargs.get('auth', auth_manager.get_auth(url)),\n+        timeout=kwargs.get('timeout', config.settings.timeout),\n+        allow_redirects=kwargs.get('allow_redirects', None)\n     )\n \n     r.send()\n\n@@ -26,6 +26,7 @@ class Settings(object):\n \n         # cache previous settings for __exit__\n         r.__cache = self.__dict__.copy()\n+        map(self.__cache.setdefault, self.__attrs__)\n \n         # set new settings\n         self.__dict__.update(*args, **kwargs)\n@@ -40,6 +41,7 @@ class Settings(object):\n     def __exit__(self, *args):\n \n         # restore cached copy\n+        print '>>> {0}'.format(self.__cache)\n         self.__dict__.update(self.__cache.copy())\n         del self.__cache\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0b36d925f653b10e62c8653f3918ffffb3d1a954", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 106 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -41,7 +41,6 @@ class Settings(object):\n     def __exit__(self, *args):\n \n         # restore cached copy\n-        print '>>> {0}'.format(self.__cache)\n         self.__dict__.update(self.__cache.copy())\n         del self.__cache\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#215d3984cc72fe617a9d52e9420050fb93a3ccda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#670c4aecdde6232f2f487564a4ccac70f9cc7002", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2625 | Contributors (this commit): 7 | Commits (past 90d): 41 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.4.0'\n-__build__ = 0x000400\n+__version__ = '0.4.1'\n+__build__ = 0x000401\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#82f1320ed54abd2676a2c09abb6d4c6e7723794d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 26 | Churn Cumulative: 178 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,9 +18,8 @@ from .models import Request, Response, AuthManager, AuthObject, auth_manager\n \n __all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n \n-\n-\n-def request(method, url, **kwargs):\n+def request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n+            timeout=config.settings.timeout, allow_redirects=False):\n     \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n@@ -34,21 +33,26 @@ def request(method, url, **kwargs):\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     \"\"\"\n-    data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n-    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-        cookiejar=kwargs.pop('cookies', None),\n-        files=kwargs.pop('files', None),\n-        auth=kwargs.pop('auth', auth_manager.get_auth(url)),\n-        timeout=kwargs.pop('timeout', config.settings.timeout),\n-        allow_redirects=kwargs.pop('allow_redirects', None)\n+    if params and data:\n+        raise StandardError('You may provide either params or data to a request, but not both.')\n+\n+    r = Request(\n+        method = method,\n+        url = url,\n+        data = params or data,\n+        headers = headers,\n+        cookiejar = cookies,\n+        files = files,\n+        auth = auth or auth_manager.get_auth(url),\n+        timeout = timeout,\n+        allow_redirects = allow_redirects\n     )\n \n     r.send()\n \n     return r.response\n \n-\n def get(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3189d8690e5b6a90d1921e9697e9231269f806e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 182 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,7 +19,7 @@ from .models import Request, Response, AuthManager, AuthObject, auth_manager\n __all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n \n def request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-            timeout=config.settings.timeout, allow_redirects=False):\n+            timeout=None, allow_redirects=False):\n     \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n@@ -45,7 +45,7 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n         cookiejar = cookies,\n         files = files,\n         auth = auth or auth_manager.get_auth(url),\n-        timeout = timeout,\n+        timeout = timeout or config.settings.timeout,\n         allow_redirects = allow_redirects\n     )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9b2d7382bfc8656630b70fd68831fc47ae1c5eee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 13 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 208 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -53,7 +53,7 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n \n     return r.response\n \n-def get(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n+def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -64,10 +64,10 @@ def get(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n     :param timeout: (optional) Float describing the timeout of the request.\n     \"\"\"\n \n-    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, **kwargs)\n+    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n \n \n-def head(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n+def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -78,10 +78,10 @@ def head(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n     :param timeout: (optional) Float describing the timeout of the request.\n     \"\"\"\n \n-    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, **kwargs)\n+    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n \n \n-def post(url, data={}, headers={}, files=None, cookies=None, auth=None, **kwargs):\n+def post(url, data=None, headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -91,12 +91,14 @@ def post(url, data={}, headers={}, files=None, cookies=None, auth=None, **kwargs\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n     \"\"\"\n \n-    return request('POST', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth, **kwargs)\n+    return request('POST', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth,\n+                   timeout=timeout, allow_redirects=allow_redirects)\n \n \n-def put(url, data='', headers={}, files={}, cookies=None, auth=None, **kwargs):\n+def put(url, data=None, headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -106,12 +108,14 @@ def put(url, data='', headers={}, files={}, cookies=None, auth=None, **kwargs):\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n     \"\"\"\n \n-    return request('PUT', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth, **kwargs)\n+    return request('PUT', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth,\n+                   timeout=timeout, allow_redirects=allow_redirects)\n \n \n-def delete(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n+def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -120,6 +124,8 @@ def delete(url, params={}, headers={}, cookies=None, auth=None, **kwargs):\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n     \"\"\"\n \n-    return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth, **kwargs)\n+    return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth,\n+                    timeout=timeout, allow_redirects=allow_redirects)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
