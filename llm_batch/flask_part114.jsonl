{"custom_id": "flask#72c85e80c8ef9e6d5b5644f7bb23cdc175ca3873", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 62 | Churn Cumulative: 74 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -329,37 +329,7 @@ class Blueprint(Scaffold):\n \n         # Merge blueprint data into parent.\n         if first_bp_registration or first_name_registration:\n-\n-            def extend(bp_dict, parent_dict):\n-                for key, values in bp_dict.items():\n-                    key = name if key is None else f\"{name}.{key}\"\n-                    parent_dict[key].extend(values)\n-\n-            for key, value in self.error_handler_spec.items():\n-                key = name if key is None else f\"{name}.{key}\"\n-                value = defaultdict(\n-                    dict,\n-                    {\n-                        code: {\n-                            exc_class: func for exc_class, func in code_values.items()\n-                        }\n-                        for code, code_values in value.items()\n-                    },\n-                )\n-                app.error_handler_spec[key] = value\n-\n-            for endpoint, func in self.view_functions.items():\n-                app.view_functions[endpoint] = func\n-\n-            extend(self.before_request_funcs, app.before_request_funcs)\n-            extend(self.after_request_funcs, app.after_request_funcs)\n-            extend(\n-                self.teardown_request_funcs,\n-                app.teardown_request_funcs,\n-            )\n-            extend(self.url_default_functions, app.url_default_functions)\n-            extend(self.url_value_preprocessors, app.url_value_preprocessors)\n-            extend(self.template_context_processors, app.template_context_processors)\n+            self._merge_blueprint_funcs(app, name)\n \n         for deferred in self.deferred_functions:\n             deferred(state)\n@@ -406,6 +376,36 @@ class Blueprint(Scaffold):\n             bp_options[\"name_prefix\"] = name\n             blueprint.register(app, bp_options)\n \n+    def _merge_blueprint_funcs(self, app: App, name: str) -> None:\n+        def extend(bp_dict, parent_dict):\n+            for key, values in bp_dict.items():\n+                key = name if key is None else f\"{name}.{key}\"\n+                parent_dict[key].extend(values)\n+\n+        for key, value in self.error_handler_spec.items():\n+            key = name if key is None else f\"{name}.{key}\"\n+            value = defaultdict(\n+                dict,\n+                {\n+                    code: {exc_class: func for exc_class, func in code_values.items()}\n+                    for code, code_values in value.items()\n+                },\n+            )\n+            app.error_handler_spec[key] = value\n+\n+        for endpoint, func in self.view_functions.items():\n+            app.view_functions[endpoint] = func\n+\n+        extend(self.before_request_funcs, app.before_request_funcs)\n+        extend(self.after_request_funcs, app.after_request_funcs)\n+        extend(\n+            self.teardown_request_funcs,\n+            app.teardown_request_funcs,\n+        )\n+        extend(self.url_default_functions, app.url_default_functions)\n+        extend(self.url_value_preprocessors, app.url_value_preprocessors)\n+        extend(self.template_context_processors, app.template_context_processors)\n+\n     @setupmethod\n     def add_url_rule(\n         self,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3f6b243cec6859185ea4064e84b33c07cc7febf6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 4932 | Contributors (this commit): 31 | Commits (past 90d): 9 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -478,7 +478,7 @@ class Flask(App):\n         for name in names:\n             if name in self.template_context_processors:\n                 for func in self.template_context_processors[name]:\n-                    context.update(func())\n+                    context.update(self.ensure_sync(func)())\n \n         context.update(orig_ctx)\n \n\n@@ -61,7 +61,10 @@ TeardownCallable = t.Union[\n     t.Callable[[t.Optional[BaseException]], None],\n     t.Callable[[t.Optional[BaseException]], t.Awaitable[None]],\n ]\n-TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n+TemplateContextProcessorCallable = t.Union[\n+    t.Callable[[], t.Dict[str, t.Any]],\n+    t.Callable[[], t.Awaitable[t.Dict[str, t.Any]]],\n+]\n TemplateFilterCallable = t.Callable[..., t.Any]\n TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cc80a47f5be6c60e53c42ef9378e6db3b0e183b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 187 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -5,7 +5,7 @@ import typing as t\n if t.TYPE_CHECKING:  # pragma: no cover\n     from _typeshed.wsgi import WSGIApplication  # noqa: F401\n     from werkzeug.datastructures import Headers  # noqa: F401\n-    from werkzeug.wrappers import Response  # noqa: F401\n+    from werkzeug.sansio.response import Response  # noqa: F401\n \n # The possible types that are directly convertible or are a Response object.\n ResponseValue = t.Union[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#80cf589a26d792820f135591eb8007bca891bf4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 192 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -77,7 +77,10 @@ URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], N\n # https://github.com/pallets/flask/issues/4095\n # https://github.com/pallets/flask/issues/4295\n # https://github.com/pallets/flask/issues/4297\n-ErrorHandlerCallable = t.Callable[[t.Any], ResponseReturnValue]\n+ErrorHandlerCallable = t.Union[\n+    t.Callable[[t.Any], ResponseReturnValue],\n+    t.Callable[[t.Any], t.Awaitable[ResponseReturnValue]],\n+]\n \n RouteCallable = t.Union[\n     t.Callable[..., ResponseReturnValue],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5bb30270d2e68d8d9278ac6f5abf67049acba662", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 31 | Files Changed: 4 | Hunks: 20 | Methods Changed: 10 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 76 | Churn Cumulative: 4711 | Contributors (this commit): 48 | Commits (past 90d): 5 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n from __future__ import annotations\n \n import ast\n+import importlib.metadata\n import inspect\n import os\n import platform\n@@ -241,13 +242,13 @@ def get_version(ctx, param, value):\n     if not value or ctx.resilient_parsing:\n         return\n \n-    import werkzeug\n-    from . import __version__\n+    flask_version = importlib.metadata.version(\"flask\")\n+    werkzeug_version = importlib.metadata.version(\"werkzeug\")\n \n     click.echo(\n         f\"Python {platform.python_version()}\\n\"\n-        f\"Flask {__version__}\\n\"\n-        f\"Werkzeug {werkzeug.__version__}\",\n+        f\"Flask {flask_version}\\n\"\n+        f\"Werkzeug {werkzeug_version}\",\n         color=ctx.color,\n     )\n     ctx.exit()\n\n@@ -1,5 +1,6 @@\n from __future__ import annotations\n \n+import importlib.metadata\n import typing as t\n from contextlib import contextmanager\n from contextlib import ExitStack\n@@ -92,6 +93,18 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n         return self.app.json.dumps(obj, **kwargs)\n \n \n+_werkzeug_version = \"\"\n+\n+\n+def _get_werkzeug_version() -> str:\n+    global _werkzeug_version\n+\n+    if not _werkzeug_version:\n+        _werkzeug_version = importlib.metadata.version(\"werkzeug\")\n+\n+    return _werkzeug_version\n+\n+\n class FlaskClient(Client):\n     \"\"\"Works like a regular Werkzeug test client but has knowledge about\n     Flask's contexts to defer the cleanup of the request context until\n@@ -115,7 +128,7 @@ class FlaskClient(Client):\n         self._context_stack = ExitStack()\n         self.environ_base = {\n             \"REMOTE_ADDR\": \"127.0.0.1\",\n-            \"HTTP_USER_AGENT\": f\"werkzeug/{werkzeug.__version__}\",\n+            \"HTTP_USER_AGENT\": f\"Werkzeug/{_get_werkzeug_version()}\",\n         }\n \n     @contextmanager\n\n@@ -1,6 +1,8 @@\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n+import importlib.metadata\n import os\n+import platform\n import ssl\n import sys\n import types\n@@ -227,10 +229,6 @@ def test_locate_app_suppress_raise(test_apps):\n \n \n def test_get_version(test_apps, capsys):\n-    from flask import __version__ as flask_version\n-    from werkzeug import __version__ as werkzeug_version\n-    from platform import python_version\n-\n     class MockCtx:\n         resilient_parsing = False\n         color = None\n@@ -241,9 +239,9 @@ def test_get_version(test_apps, capsys):\n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n     out, err = capsys.readouterr()\n-    assert f\"Python {python_version()}\" in out\n-    assert f\"Flask {flask_version}\" in out\n-    assert f\"Werkzeug {werkzeug_version}\" in out\n+    assert f\"Python {platform.python_version()}\" in out\n+    assert f\"Flask {importlib.metadata.version('flask')}\" in out\n+    assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out\n \n \n def test_scriptinfo(test_apps, monkeypatch):\n\n@@ -1,6 +1,7 @@\n+import importlib.metadata\n+\n import click\n import pytest\n-import werkzeug\n \n import flask\n from flask import appcontext_popped\n@@ -38,34 +39,35 @@ def test_environ_defaults(app, client, app_ctx, req_ctx):\n         assert rv.data == b\"http://localhost/\"\n \n \n-def test_environ_base_default(app, client, app_ctx):\n+def test_environ_base_default(app, client):\n     @app.route(\"/\")\n     def index():\n-        flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n-        return flask.request.remote_addr\n+        flask.g.remote_addr = flask.request.remote_addr\n+        flask.g.user_agent = flask.request.user_agent.string\n+        return \"\"\n \n-    rv = client.get(\"/\")\n-    assert rv.data == b\"127.0.0.1\"\n-    assert flask.g.user_agent == f\"werkzeug/{werkzeug.__version__}\"\n+    with client:\n+        client.get(\"/\")\n+        assert flask.g.remote_addr == \"127.0.0.1\"\n+        assert flask.g.user_agent == (\n+            f\"Werkzeug/{importlib.metadata.version('werkzeug')}\"\n+        )\n \n \n-def test_environ_base_modified(app, client, app_ctx):\n+def test_environ_base_modified(app, client):\n     @app.route(\"/\")\n     def index():\n-        flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n-        return flask.request.remote_addr\n+        flask.g.remote_addr = flask.request.remote_addr\n+        flask.g.user_agent = flask.request.user_agent.string\n+        return \"\"\n \n-    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.0\"\n+    client.environ_base[\"REMOTE_ADDR\"] = \"192.168.0.22\"\n     client.environ_base[\"HTTP_USER_AGENT\"] = \"Foo\"\n-    rv = client.get(\"/\")\n-    assert rv.data == b\"0.0.0.0\"\n-    assert flask.g.user_agent == \"Foo\"\n \n-    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.1\"\n-    client.environ_base[\"HTTP_USER_AGENT\"] = \"Bar\"\n-    rv = client.get(\"/\")\n-    assert rv.data == b\"0.0.0.1\"\n-    assert flask.g.user_agent == \"Bar\"\n+    with client:\n+        client.get(\"/\")\n+        assert flask.g.remote_addr == \"192.168.0.22\"\n+        assert flask.g.user_agent == \"Foo\"\n \n \n def test_client_open_environ(app, client, request):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f9550247a2798b9dcc28081c15e266442f4e28a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 31 | Files Changed: 4 | Hunks: 20 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 76 | Churn Cumulative: 4787 | Contributors (this commit): 48 | Commits (past 90d): 9 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n from __future__ import annotations\n \n import ast\n+import importlib.metadata\n import inspect\n import os\n import platform\n@@ -241,13 +242,13 @@ def get_version(ctx, param, value):\n     if not value or ctx.resilient_parsing:\n         return\n \n-    import werkzeug\n-    from . import __version__\n+    flask_version = importlib.metadata.version(\"flask\")\n+    werkzeug_version = importlib.metadata.version(\"werkzeug\")\n \n     click.echo(\n         f\"Python {platform.python_version()}\\n\"\n-        f\"Flask {__version__}\\n\"\n-        f\"Werkzeug {werkzeug.__version__}\",\n+        f\"Flask {flask_version}\\n\"\n+        f\"Werkzeug {werkzeug_version}\",\n         color=ctx.color,\n     )\n     ctx.exit()\n\n@@ -1,5 +1,6 @@\n from __future__ import annotations\n \n+import importlib.metadata\n import typing as t\n from contextlib import contextmanager\n from contextlib import ExitStack\n@@ -92,6 +93,18 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n         return self.app.json.dumps(obj, **kwargs)\n \n \n+_werkzeug_version = \"\"\n+\n+\n+def _get_werkzeug_version() -> str:\n+    global _werkzeug_version\n+\n+    if not _werkzeug_version:\n+        _werkzeug_version = importlib.metadata.version(\"werkzeug\")\n+\n+    return _werkzeug_version\n+\n+\n class FlaskClient(Client):\n     \"\"\"Works like a regular Werkzeug test client but has knowledge about\n     Flask's contexts to defer the cleanup of the request context until\n@@ -115,7 +128,7 @@ class FlaskClient(Client):\n         self._context_stack = ExitStack()\n         self.environ_base = {\n             \"REMOTE_ADDR\": \"127.0.0.1\",\n-            \"HTTP_USER_AGENT\": f\"werkzeug/{werkzeug.__version__}\",\n+            \"HTTP_USER_AGENT\": f\"Werkzeug/{_get_werkzeug_version()}\",\n         }\n \n     @contextmanager\n\n@@ -1,6 +1,8 @@\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n+import importlib.metadata\n import os\n+import platform\n import ssl\n import sys\n import types\n@@ -227,10 +229,6 @@ def test_locate_app_suppress_raise(test_apps):\n \n \n def test_get_version(test_apps, capsys):\n-    from flask import __version__ as flask_version\n-    from werkzeug import __version__ as werkzeug_version\n-    from platform import python_version\n-\n     class MockCtx:\n         resilient_parsing = False\n         color = None\n@@ -241,9 +239,9 @@ def test_get_version(test_apps, capsys):\n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n     out, err = capsys.readouterr()\n-    assert f\"Python {python_version()}\" in out\n-    assert f\"Flask {flask_version}\" in out\n-    assert f\"Werkzeug {werkzeug_version}\" in out\n+    assert f\"Python {platform.python_version()}\" in out\n+    assert f\"Flask {importlib.metadata.version('flask')}\" in out\n+    assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out\n \n \n def test_scriptinfo(test_apps, monkeypatch):\n\n@@ -1,6 +1,7 @@\n+import importlib.metadata\n+\n import click\n import pytest\n-import werkzeug\n \n import flask\n from flask import appcontext_popped\n@@ -38,34 +39,35 @@ def test_environ_defaults(app, client, app_ctx, req_ctx):\n         assert rv.data == b\"http://localhost/\"\n \n \n-def test_environ_base_default(app, client, app_ctx):\n+def test_environ_base_default(app, client):\n     @app.route(\"/\")\n     def index():\n-        flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n-        return flask.request.remote_addr\n+        flask.g.remote_addr = flask.request.remote_addr\n+        flask.g.user_agent = flask.request.user_agent.string\n+        return \"\"\n \n-    rv = client.get(\"/\")\n-    assert rv.data == b\"127.0.0.1\"\n-    assert flask.g.user_agent == f\"werkzeug/{werkzeug.__version__}\"\n+    with client:\n+        client.get(\"/\")\n+        assert flask.g.remote_addr == \"127.0.0.1\"\n+        assert flask.g.user_agent == (\n+            f\"Werkzeug/{importlib.metadata.version('werkzeug')}\"\n+        )\n \n \n-def test_environ_base_modified(app, client, app_ctx):\n+def test_environ_base_modified(app, client):\n     @app.route(\"/\")\n     def index():\n-        flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n-        return flask.request.remote_addr\n+        flask.g.remote_addr = flask.request.remote_addr\n+        flask.g.user_agent = flask.request.user_agent.string\n+        return \"\"\n \n-    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.0\"\n+    client.environ_base[\"REMOTE_ADDR\"] = \"192.168.0.22\"\n     client.environ_base[\"HTTP_USER_AGENT\"] = \"Foo\"\n-    rv = client.get(\"/\")\n-    assert rv.data == b\"0.0.0.0\"\n-    assert flask.g.user_agent == \"Foo\"\n \n-    client.environ_base[\"REMOTE_ADDR\"] = \"0.0.0.1\"\n-    client.environ_base[\"HTTP_USER_AGENT\"] = \"Bar\"\n-    rv = client.get(\"/\")\n-    assert rv.data == b\"0.0.0.1\"\n-    assert flask.g.user_agent == \"Bar\"\n+    with client:\n+        client.get(\"/\")\n+        assert flask.g.remote_addr == \"192.168.0.22\"\n+        assert flask.g.user_agent == \"Foo\"\n \n \n def test_client_open_environ(app, client, request):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3205b53c7cf69d17fee49cac6b84978175b7dd73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 2 | Churn Cumulative: 437 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -38,7 +38,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.3.3.dev\"\n+__version__ = \"2.3.3\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#65271c105f7c247ecffc9a7121815276e092bd10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 4748 | Contributors (this commit): 27 | Commits (past 90d): 4 | Contributors (cumulative): 27 | DMM Complexity: 0.0\n\nDIFF:\n@@ -409,7 +409,6 @@ class Flask(App):\n             else:\n                 subdomain = None\n \n-            print(self.config[\"SERVER_NAME\"], subdomain)\n             return self.url_map.bind_to_environ(\n                 request.environ,\n                 server_name=self.config[\"SERVER_NAME\"],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#293041a290178dc1d526075372960c3ca589d366", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 21 | Churn Cumulative: 458 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,7 @@\n+from __future__ import annotations\n+\n+import typing as t\n+\n from . import json as json\n from .app import Flask as Flask\n from .blueprints import Blueprint as Blueprint\n@@ -38,4 +42,19 @@ from .templating import stream_template_string as stream_template_string\n from .wrappers import Request as Request\n from .wrappers import Response as Response\n \n-__version__ = \"3.0.0.dev\"\n+\n+def __getattr__(name: str) -> t.Any:\n+    if name == \"__version__\":\n+        import importlib.metadata\n+        import warnings\n+\n+        warnings.warn(\n+            \"The '__version__' attribute is deprecated and will be removed in\"\n+            \" Flask 3.1. Use feature detection or\"\n+            \" 'importlib.metadata.version(\\\"flask\\\")' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return importlib.metadata.version(\"flask\")\n+\n+    raise AttributeError(name)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#438edcdf01c392619449a6bdbb18f6cf72ef7bb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 8677 | Contributors (this commit): 63 | Commits (past 90d): 5 | Contributors (cumulative): 68 | DMM Complexity: 0.8571428571428571\n\nDIFF:\n@@ -952,6 +952,7 @@ class Flask(App):\n \n     def url_for(\n         self,\n+        /,\n         endpoint: str,\n         *,\n         _anchor: str | None = None,\n\n@@ -161,6 +161,13 @@ class TestUrlFor:\n         assert flask.url_for(\"myview\", id=42, _method=\"GET\") == \"/myview/42\"\n         assert flask.url_for(\"myview\", _method=\"POST\") == \"/myview/create\"\n \n+    def test_url_for_with_self(self, app, req_ctx):\n+        @app.route(\"/<self>\")\n+        def index(self):\n+            return \"42\"\n+\n+        assert flask.url_for(\"index\", self=\"2\") == \"/2\"\n+\n \n def test_redirect_no_app():\n     response = flask.redirect(\"https://localhost\", 307)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#54ff9b297276a3add08c8faf1557b5e359b3ab99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 54 | Files Changed: 19 | Hunks: 44 | Methods Changed: 42 | Complexity Δ (Sum/Max): -7/1 | Churn Δ: 106 | Churn Cumulative: 19230 | Contributors (this commit): 94 | Commits (past 90d): 27 | Contributors (cumulative): 180 | DMM Complexity: 0.5\n\nDIFF:\n@@ -2,7 +2,7 @@ from flask import jsonify\n from flask import render_template\n from flask import request\n \n-from js_example import app\n+from . import app\n \n \n @app.route(\"/\", defaults={\"js\": \"fetch\"})\n\n@@ -31,12 +31,13 @@ def create_app(test_config=None):\n         return \"Hello, World!\"\n \n     # register the database commands\n-    from flaskr import db\n+    from . import db\n \n     db.init_app(app)\n \n     # apply the blueprints to the app\n-    from flaskr import auth, blog\n+    from . import auth\n+    from . import blog\n \n     app.register_blueprint(auth.bp)\n     app.register_blueprint(blog.bp)\n\n@@ -11,7 +11,7 @@ from flask import url_for\n from werkzeug.security import check_password_hash\n from werkzeug.security import generate_password_hash\n \n-from flaskr.db import get_db\n+from .db import get_db\n \n bp = Blueprint(\"auth\", __name__, url_prefix=\"/auth\")\n \n\n@@ -7,8 +7,8 @@ from flask import request\n from flask import url_for\n from werkzeug.exceptions import abort\n \n-from flaskr.auth import login_required\n-from flaskr.db import get_db\n+from .auth import login_required\n+from .db import get_db\n \n bp = Blueprint(\"blog\", __name__)\n \n\n@@ -1183,7 +1183,8 @@ class Flask(App):\n                 # class to the correct type\n                 try:\n                     rv = self.response_class.force_type(\n-                        rv, request.environ  # type: ignore[arg-type]\n+                        rv,  # type: ignore[arg-type]\n+                        request.environ,\n                     )\n                 except TypeError as e:\n                     raise TypeError(\n@@ -1272,7 +1273,8 @@ class Flask(App):\n         return response\n \n     def do_teardown_request(\n-        self, exc: BaseException | None = _sentinel  # type: ignore\n+        self,\n+        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n     ) -> None:\n         \"\"\"Called after the request is dispatched and the response is\n         returned, right before the request context is popped.\n@@ -1305,7 +1307,8 @@ class Flask(App):\n         request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)\n \n     def do_teardown_appcontext(\n-        self, exc: BaseException | None = _sentinel  # type: ignore\n+        self,\n+        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n     ) -> None:\n         \"\"\"Called right before the application context is popped.\n \n\n@@ -21,6 +21,7 @@ from .signals import message_flashed\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from werkzeug.wrappers import Response as BaseResponse\n+\n     from .wrappers import Response\n \n \n@@ -48,9 +49,7 @@ def get_load_dotenv(default: bool = True) -> bool:\n \n \n def stream_with_context(\n-    generator_or_function: (\n-        t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n-    )\n+    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n ) -> t.Iterator[t.AnyStr]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n\n@@ -134,9 +134,7 @@ class DefaultJSONProvider(JSONProvider):\n         method) will call the ``__html__`` method to get a string.\n     \"\"\"\n \n-    default: t.Callable[[t.Any], t.Any] = staticmethod(\n-        _default\n-    )  # type: ignore[assignment]\n+    default: t.Callable[[t.Any], t.Any] = staticmethod(_default)  # type: ignore[assignment]\n     \"\"\"Apply this function to any object that :meth:`json.dumps` does\n     not know how to serialize. It should return a valid JSON type or\n     raise a ``TypeError``.\n\n@@ -35,9 +35,10 @@ from .scaffold import setupmethod\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from werkzeug.wrappers import Response as BaseResponse\n-    from .blueprints import Blueprint\n+\n     from ..testing import FlaskClient\n     from ..testing import FlaskCliRunner\n+    from .blueprints import Blueprint\n \n T_shell_context_processor = t.TypeVar(\n     \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n@@ -905,7 +906,9 @@ class App(Scaffold):\n             Moved from ``flask.redirect``, which calls this method.\n         \"\"\"\n         return _wz_redirect(\n-            location, code=code, Response=self.response_class  # type: ignore[arg-type]\n+            location,\n+            code=code,\n+            Response=self.response_class,  # type: ignore[arg-type]\n         )\n \n     def inject_url_defaults(self, endpoint: str, values: dict) -> None:\n\n@@ -14,7 +14,8 @@ from .json.tag import TaggedJSONSerializer\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from .app import Flask\n-    from .wrappers import Request, Response\n+    from .wrappers import Request\n+    from .wrappers import Response\n \n \n class SessionMixin(MutableMapping):\n\n@@ -6,7 +6,6 @@ from . import typing as ft\n from .globals import current_app\n from .globals import request\n \n-\n http_method_funcs = frozenset(\n     [\"get\", \"post\", \"head\", \"options\", \"delete\", \"put\", \"trace\", \"patch\"]\n )\n\n@@ -196,17 +196,14 @@ def test_clean_pop(app):\n \n     @app.teardown_request\n     def teardown_req(error=None):\n-        1 / 0\n+        raise ZeroDivisionError\n \n     @app.teardown_appcontext\n     def teardown_app(error=None):\n         called.append(\"TEARDOWN\")\n \n-    try:\n-        with app.test_request_context():\n+    with app.app_context():\n         called.append(flask.current_app.name)\n-    except ZeroDivisionError:\n-        pass\n \n     assert called == [\"flask_test\", \"TEARDOWN\"]\n     assert not flask.current_app\n\n@@ -1,4 +1,3 @@\n from flask import Module\n \n-\n mod = Module(__name__, \"foo\", subdomain=\"foo\")\n\n@@ -19,7 +19,6 @@ from werkzeug.routing import RequestRedirect\n \n import flask\n \n-\n require_cpython_gc = pytest.mark.skipif(\n     python_implementation() != \"CPython\",\n     reason=\"Requires CPython GC behavior\",\n@@ -190,7 +189,8 @@ def test_url_mapping(app, client):\n \n \n def test_werkzeug_routing(app, client):\n-    from werkzeug.routing import Submount, Rule\n+    from werkzeug.routing import Rule\n+    from werkzeug.routing import Submount\n \n     app.url_map.add(\n         Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n@@ -210,7 +210,8 @@ def test_werkzeug_routing(app, client):\n \n \n def test_endpoint_decorator(app, client):\n-    from werkzeug.routing import Submount, Rule\n+    from werkzeug.routing import Rule\n+    from werkzeug.routing import Submount\n \n     app.url_map.add(\n         Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n@@ -431,9 +432,9 @@ def test_session_special_types(app, client):\n         client.get(\"/\")\n         s = flask.session\n         assert s[\"t\"] == (1, 2, 3)\n-        assert type(s[\"b\"]) is bytes\n+        assert type(s[\"b\"]) is bytes  # noqa: E721\n         assert s[\"b\"] == b\"\\xff\"\n-        assert type(s[\"m\"]) is Markup\n+        assert type(s[\"m\"]) is Markup  # noqa: E721\n         assert s[\"m\"] == Markup(\"<html>\")\n         assert s[\"u\"] == the_uuid\n         assert s[\"d\"] == now\n@@ -784,7 +785,7 @@ def test_teardown_request_handler_error(app, client):\n \n     @app.route(\"/\")\n     def fails():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     rv = client.get(\"/\")\n     assert rv.status_code == 500\n@@ -851,7 +852,7 @@ def test_error_handling(app, client):\n \n     @app.route(\"/error\")\n     def error():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     @app.route(\"/forbidden\")\n     def error2():\n@@ -877,7 +878,7 @@ def test_error_handling_processing(app, client):\n \n     @app.route(\"/\")\n     def broken_func():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     @app.after_request\n     def after_request(resp):\n@@ -1047,12 +1048,13 @@ def test_error_handler_after_processor_error(app, client):\n     @app.before_request\n     def before_request():\n         if _trigger == \"before\":\n-            1 // 0\n+            raise ZeroDivisionError\n \n     @app.after_request\n     def after_request(response):\n         if _trigger == \"after\":\n-            1 // 0\n+            raise ZeroDivisionError\n+\n         return response\n \n     @app.route(\"/\")\n@@ -1507,7 +1509,7 @@ def test_exception_propagation(app, client, key):\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     if key is not None:\n         app.config[key] = True\n\n@@ -634,7 +634,8 @@ def test_add_template_test_with_name_and_template(app, client):\n def test_context_processing(app, client):\n     answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n \n-    template_string = lambda: flask.render_template_string(  # noqa: E731\n+    def template_string():\n+        return flask.render_template_string(\n             \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n             \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n         )\n\n@@ -98,7 +98,7 @@ def test_request_exception_signal():\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     def record(sender, exception):\n         recorded.append(exception)\n@@ -169,7 +169,7 @@ def test_appcontext_tearing_down_signal(app, client):\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     flask.appcontext_tearing_down.connect(record_teardown, app)\n     try:\n\n@@ -219,7 +219,7 @@ def test_test_client_context_binding(app, client):\n \n     @app.route(\"/other\")\n     def other():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     with client:\n         resp = client.get(\"/\")\n@@ -227,18 +227,15 @@ def test_test_client_context_binding(app, client):\n         assert resp.data == b\"Hello World!\"\n         assert resp.status_code == 200\n \n+    with client:\n         resp = client.get(\"/other\")\n         assert not hasattr(flask.g, \"value\")\n         assert b\"Internal Server Error\" in resp.data\n         assert resp.status_code == 500\n         flask.g.value = 23\n \n-    try:\n-        flask.g.value\n-    except (AttributeError, RuntimeError):\n-        pass\n-    else:\n-        raise AssertionError(\"some kind of exception expected\")\n+    with pytest.raises(RuntimeError):\n+        flask.g.value  # noqa: B018\n \n \n def test_reuse_client(client):\n\n@@ -41,10 +41,10 @@ def test_method_based_view(app):\n def test_view_patching(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            1 // 0\n+            raise ZeroDivisionError\n \n         def post(self):\n-            1 // 0\n+            raise ZeroDivisionError\n \n     class Other(Index):\n         def get(self):\n\n@@ -1,7 +1,5 @@\n from __future__ import annotations\n \n-import typing as t\n-\n from flask import Flask\n from flask import Response\n \n@@ -29,10 +27,10 @@ async def before_async() -> None:\n \n \n @app.teardown_appcontext\n-def teardown_sync(exc: t.Optional[BaseException]) -> None:\n+def teardown_sync(exc: BaseException | None) -> None:\n     ...\n \n \n @app.teardown_appcontext\n-async def teardown_async(exc: t.Optional[BaseException]) -> None:\n+async def teardown_async(exc: BaseException | None) -> None:\n     ...\n\n@@ -29,12 +29,12 @@ def hello_json() -> Response:\n \n \n @app.route(\"/json/dict\")\n-def hello_json_dict() -> t.Dict[str, t.Any]:\n+def hello_json_dict() -> dict[str, t.Any]:\n     return {\"response\": \"Hello, World!\"}\n \n \n @app.route(\"/json/dict\")\n-def hello_json_list() -> t.List[t.Any]:\n+def hello_json_list() -> list[t.Any]:\n     return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#54e05a282428e9a44dbd414ca70231a83ebd710d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 54 | Files Changed: 19 | Hunks: 44 | Methods Changed: 42 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 106 | Churn Cumulative: 19336 | Contributors (this commit): 94 | Commits (past 90d): 46 | Contributors (cumulative): 180 | DMM Complexity: 0.5\n\nDIFF:\n@@ -2,7 +2,7 @@ from flask import jsonify\n from flask import render_template\n from flask import request\n \n-from js_example import app\n+from . import app\n \n \n @app.route(\"/\", defaults={\"js\": \"fetch\"})\n\n@@ -31,12 +31,13 @@ def create_app(test_config=None):\n         return \"Hello, World!\"\n \n     # register the database commands\n-    from flaskr import db\n+    from . import db\n \n     db.init_app(app)\n \n     # apply the blueprints to the app\n-    from flaskr import auth, blog\n+    from . import auth\n+    from . import blog\n \n     app.register_blueprint(auth.bp)\n     app.register_blueprint(blog.bp)\n\n@@ -11,7 +11,7 @@ from flask import url_for\n from werkzeug.security import check_password_hash\n from werkzeug.security import generate_password_hash\n \n-from flaskr.db import get_db\n+from .db import get_db\n \n bp = Blueprint(\"auth\", __name__, url_prefix=\"/auth\")\n \n\n@@ -7,8 +7,8 @@ from flask import request\n from flask import url_for\n from werkzeug.exceptions import abort\n \n-from flaskr.auth import login_required\n-from flaskr.db import get_db\n+from .auth import login_required\n+from .db import get_db\n \n bp = Blueprint(\"blog\", __name__)\n \n\n@@ -1183,7 +1183,8 @@ class Flask(App):\n                 # class to the correct type\n                 try:\n                     rv = self.response_class.force_type(\n-                        rv, request.environ  # type: ignore[arg-type]\n+                        rv,  # type: ignore[arg-type]\n+                        request.environ,\n                     )\n                 except TypeError as e:\n                     raise TypeError(\n@@ -1272,7 +1273,8 @@ class Flask(App):\n         return response\n \n     def do_teardown_request(\n-        self, exc: BaseException | None = _sentinel  # type: ignore\n+        self,\n+        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n     ) -> None:\n         \"\"\"Called after the request is dispatched and the response is\n         returned, right before the request context is popped.\n@@ -1305,7 +1307,8 @@ class Flask(App):\n         request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)\n \n     def do_teardown_appcontext(\n-        self, exc: BaseException | None = _sentinel  # type: ignore\n+        self,\n+        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n     ) -> None:\n         \"\"\"Called right before the application context is popped.\n \n\n@@ -21,6 +21,7 @@ from .signals import message_flashed\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from werkzeug.wrappers import Response as BaseResponse\n+\n     from .wrappers import Response\n \n \n@@ -48,9 +49,7 @@ def get_load_dotenv(default: bool = True) -> bool:\n \n \n def stream_with_context(\n-    generator_or_function: (\n-        t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n-    )\n+    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n ) -> t.Iterator[t.AnyStr]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n\n@@ -134,9 +134,7 @@ class DefaultJSONProvider(JSONProvider):\n         method) will call the ``__html__`` method to get a string.\n     \"\"\"\n \n-    default: t.Callable[[t.Any], t.Any] = staticmethod(\n-        _default\n-    )  # type: ignore[assignment]\n+    default: t.Callable[[t.Any], t.Any] = staticmethod(_default)  # type: ignore[assignment]\n     \"\"\"Apply this function to any object that :meth:`json.dumps` does\n     not know how to serialize. It should return a valid JSON type or\n     raise a ``TypeError``.\n\n@@ -35,9 +35,10 @@ from .scaffold import setupmethod\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from werkzeug.wrappers import Response as BaseResponse\n-    from .blueprints import Blueprint\n+\n     from ..testing import FlaskClient\n     from ..testing import FlaskCliRunner\n+    from .blueprints import Blueprint\n \n T_shell_context_processor = t.TypeVar(\n     \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n@@ -905,7 +906,9 @@ class App(Scaffold):\n             Moved from ``flask.redirect``, which calls this method.\n         \"\"\"\n         return _wz_redirect(\n-            location, code=code, Response=self.response_class  # type: ignore[arg-type]\n+            location,\n+            code=code,\n+            Response=self.response_class,  # type: ignore[arg-type]\n         )\n \n     def inject_url_defaults(self, endpoint: str, values: dict) -> None:\n\n@@ -14,7 +14,8 @@ from .json.tag import TaggedJSONSerializer\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from .app import Flask\n-    from .wrappers import Request, Response\n+    from .wrappers import Request\n+    from .wrappers import Response\n \n \n class SessionMixin(MutableMapping):\n\n@@ -6,7 +6,6 @@ from . import typing as ft\n from .globals import current_app\n from .globals import request\n \n-\n http_method_funcs = frozenset(\n     [\"get\", \"post\", \"head\", \"options\", \"delete\", \"put\", \"trace\", \"patch\"]\n )\n\n@@ -196,17 +196,14 @@ def test_clean_pop(app):\n \n     @app.teardown_request\n     def teardown_req(error=None):\n-        1 / 0\n+        raise ZeroDivisionError\n \n     @app.teardown_appcontext\n     def teardown_app(error=None):\n         called.append(\"TEARDOWN\")\n \n-    try:\n-        with app.test_request_context():\n+    with app.app_context():\n         called.append(flask.current_app.name)\n-    except ZeroDivisionError:\n-        pass\n \n     assert called == [\"flask_test\", \"TEARDOWN\"]\n     assert not flask.current_app\n\n@@ -1,4 +1,3 @@\n from flask import Module\n \n-\n mod = Module(__name__, \"foo\", subdomain=\"foo\")\n\n@@ -19,7 +19,6 @@ from werkzeug.routing import RequestRedirect\n \n import flask\n \n-\n require_cpython_gc = pytest.mark.skipif(\n     python_implementation() != \"CPython\",\n     reason=\"Requires CPython GC behavior\",\n@@ -190,7 +189,8 @@ def test_url_mapping(app, client):\n \n \n def test_werkzeug_routing(app, client):\n-    from werkzeug.routing import Submount, Rule\n+    from werkzeug.routing import Rule\n+    from werkzeug.routing import Submount\n \n     app.url_map.add(\n         Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n@@ -210,7 +210,8 @@ def test_werkzeug_routing(app, client):\n \n \n def test_endpoint_decorator(app, client):\n-    from werkzeug.routing import Submount, Rule\n+    from werkzeug.routing import Rule\n+    from werkzeug.routing import Submount\n \n     app.url_map.add(\n         Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n@@ -431,9 +432,9 @@ def test_session_special_types(app, client):\n         client.get(\"/\")\n         s = flask.session\n         assert s[\"t\"] == (1, 2, 3)\n-        assert type(s[\"b\"]) is bytes\n+        assert type(s[\"b\"]) is bytes  # noqa: E721\n         assert s[\"b\"] == b\"\\xff\"\n-        assert type(s[\"m\"]) is Markup\n+        assert type(s[\"m\"]) is Markup  # noqa: E721\n         assert s[\"m\"] == Markup(\"<html>\")\n         assert s[\"u\"] == the_uuid\n         assert s[\"d\"] == now\n@@ -784,7 +785,7 @@ def test_teardown_request_handler_error(app, client):\n \n     @app.route(\"/\")\n     def fails():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     rv = client.get(\"/\")\n     assert rv.status_code == 500\n@@ -851,7 +852,7 @@ def test_error_handling(app, client):\n \n     @app.route(\"/error\")\n     def error():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     @app.route(\"/forbidden\")\n     def error2():\n@@ -877,7 +878,7 @@ def test_error_handling_processing(app, client):\n \n     @app.route(\"/\")\n     def broken_func():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     @app.after_request\n     def after_request(resp):\n@@ -1047,12 +1048,13 @@ def test_error_handler_after_processor_error(app, client):\n     @app.before_request\n     def before_request():\n         if _trigger == \"before\":\n-            1 // 0\n+            raise ZeroDivisionError\n \n     @app.after_request\n     def after_request(response):\n         if _trigger == \"after\":\n-            1 // 0\n+            raise ZeroDivisionError\n+\n         return response\n \n     @app.route(\"/\")\n@@ -1507,7 +1509,7 @@ def test_exception_propagation(app, client, key):\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     if key is not None:\n         app.config[key] = True\n\n@@ -634,7 +634,8 @@ def test_add_template_test_with_name_and_template(app, client):\n def test_context_processing(app, client):\n     answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n \n-    template_string = lambda: flask.render_template_string(  # noqa: E731\n+    def template_string():\n+        return flask.render_template_string(\n             \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n             \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n         )\n\n@@ -98,7 +98,7 @@ def test_request_exception_signal():\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     def record(sender, exception):\n         recorded.append(exception)\n@@ -169,7 +169,7 @@ def test_appcontext_tearing_down_signal(app, client):\n \n     @app.route(\"/\")\n     def index():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     flask.appcontext_tearing_down.connect(record_teardown, app)\n     try:\n\n@@ -219,7 +219,7 @@ def test_test_client_context_binding(app, client):\n \n     @app.route(\"/other\")\n     def other():\n-        1 // 0\n+        raise ZeroDivisionError\n \n     with client:\n         resp = client.get(\"/\")\n@@ -227,18 +227,15 @@ def test_test_client_context_binding(app, client):\n         assert resp.data == b\"Hello World!\"\n         assert resp.status_code == 200\n \n+    with client:\n         resp = client.get(\"/other\")\n         assert not hasattr(flask.g, \"value\")\n         assert b\"Internal Server Error\" in resp.data\n         assert resp.status_code == 500\n         flask.g.value = 23\n \n-    try:\n-        flask.g.value\n-    except (AttributeError, RuntimeError):\n-        pass\n-    else:\n-        raise AssertionError(\"some kind of exception expected\")\n+    with pytest.raises(RuntimeError):\n+        flask.g.value  # noqa: B018\n \n \n def test_reuse_client(client):\n\n@@ -41,10 +41,10 @@ def test_method_based_view(app):\n def test_view_patching(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n-            1 // 0\n+            raise ZeroDivisionError\n \n         def post(self):\n-            1 // 0\n+            raise ZeroDivisionError\n \n     class Other(Index):\n         def get(self):\n\n@@ -1,7 +1,5 @@\n from __future__ import annotations\n \n-import typing as t\n-\n from flask import Flask\n from flask import Response\n \n@@ -29,10 +27,10 @@ async def before_async() -> None:\n \n \n @app.teardown_appcontext\n-def teardown_sync(exc: t.Optional[BaseException]) -> None:\n+def teardown_sync(exc: BaseException | None) -> None:\n     ...\n \n \n @app.teardown_appcontext\n-async def teardown_async(exc: t.Optional[BaseException]) -> None:\n+async def teardown_async(exc: BaseException | None) -> None:\n     ...\n\n@@ -29,12 +29,12 @@ def hello_json() -> Response:\n \n \n @app.route(\"/json/dict\")\n-def hello_json_dict() -> t.Dict[str, t.Any]:\n+def hello_json_dict() -> dict[str, t.Any]:\n     return {\"response\": \"Hello, World!\"}\n \n \n @app.route(\"/json/dict\")\n-def hello_json_list() -> t.List[t.Any]:\n+def hello_json_list() -> list[t.Any]:\n     return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4104f29956b16f3e351462651ec3c6cc5a0dd069", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2142 | Contributors (this commit): 17 | Commits (past 90d): 4 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -387,7 +387,7 @@ def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n \n \n def send_file(\n-    path_or_file: os.PathLike | str | t.BinaryIO,\n+    path_or_file: os.PathLike[t.AnyStr] | str | t.BinaryIO,\n     mimetype: str | None = None,\n     as_attachment: bool = False,\n     download_name: str | None = None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
