{"custom_id": "flask#2ae740dd4903bbe5f3864384bcdf2ab2d4638bce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 190 | Lines Deleted: 210 | Files Changed: 22 | Hunks: 114 | Methods Changed: 76 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 400 | Churn Cumulative: 16152 | Contributors (this commit): 112 | Commits (past 90d): 83 | Contributors (cumulative): 204 | DMM Complexity: 0.42857142857142855\n\nDIFF:\n@@ -585,7 +585,7 @@ class Flask(_PackageBoundObject):\n                 bool(static_host) == host_matching\n             ), \"Invalid static_host/host_matching combination\"\n             self.add_url_rule(\n-                self.static_url_path + \"/<path:filename>\",\n+                f\"{self.static_url_path}/<path:filename>\",\n                 endpoint=\"static\",\n                 host=static_host,\n                 view_func=self.send_static_file,\n@@ -711,7 +711,7 @@ class Flask(_PackageBoundObject):\n         prefix, package_path = find_package(self.import_name)\n         if prefix is None:\n             return os.path.join(package_path, \"instance\")\n-        return os.path.join(prefix, \"var\", self.name + \"-instance\")\n+        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")\n \n     def open_instance_resource(self, resource, mode=\"rb\"):\n         \"\"\"Opens a resource from the application's instance folder\n@@ -1084,10 +1084,11 @@ class Flask(_PackageBoundObject):\n \n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, (\n-                \"A name collision occurred between blueprints %r and %r. Both\"\n-                ' share the same name \"%s\". Blueprints that are created on the'\n-                \" fly need unique names.\"\n-                % (blueprint, self.blueprints[blueprint.name], blueprint.name)\n+                \"A name collision occurred between blueprints\"\n+                f\" {blueprint!r} and {self.blueprints[blueprint.name]!r}.\"\n+                f\" Both share the same name {blueprint.name!r}.\"\n+                f\" Blueprints that are created on the fly need unique\"\n+                f\" names.\"\n             )\n         else:\n             self.blueprints[blueprint.name] = blueprint\n@@ -1209,8 +1210,8 @@ class Flask(_PackageBoundObject):\n             old_func = self.view_functions.get(endpoint)\n             if old_func is not None and old_func != view_func:\n                 raise AssertionError(\n-                    \"View function mapping is overwriting an \"\n-                    \"existing endpoint function: %s\" % endpoint\n+                    \"View function mapping is overwriting an existing\"\n+                    f\" endpoint function: {endpoint}\"\n                 )\n             self.view_functions[endpoint] = view_func\n \n@@ -1341,17 +1342,18 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         if isinstance(code_or_exception, HTTPException):  # old broken behavior\n             raise ValueError(\n-                \"Tried to register a handler for an exception instance {!r}.\"\n-                \" Handlers can only be registered for exception classes or\"\n-                \" HTTP error codes.\".format(code_or_exception)\n+                \"Tried to register a handler for an exception instance\"\n+                f\" {code_or_exception!r}. Handlers can only be\"\n+                \" registered for exception classes or HTTP error codes.\"\n             )\n \n         try:\n             exc_class, code = self._get_exc_class_and_code(code_or_exception)\n         except KeyError:\n             raise KeyError(\n-                \"'{}' is not a recognized HTTP error code. Use a subclass of\"\n-                \" HTTPException with that code instead.\".format(code_or_exception)\n+                f\"'{code_or_exception}' is not a recognized HTTP error\"\n+                \" code. Use a subclass of HTTPException with that code\"\n+                \" instead.\"\n             )\n \n         handlers = self.error_handler_spec.setdefault(key, {}).setdefault(code, {})\n@@ -1730,7 +1732,7 @@ class Flask(_PackageBoundObject):\n                 # message, add it in manually.\n                 # TODO: clean up once Werkzeug >= 0.15.5 is required\n                 if e.args[0] not in e.get_description():\n-                    e.description = \"KeyError: '{}'\".format(*e.args)\n+                    e.description = f\"KeyError: {e.args[0]!r}\"\n             elif not hasattr(BadRequestKeyError, \"show_exception\"):\n                 e.args = ()\n \n@@ -2006,9 +2008,9 @@ class Flask(_PackageBoundObject):\n         # the body must not be None\n         if rv is None:\n             raise TypeError(\n-                'The view function for \"{}\" did not return a valid response. The'\n-                \" function either returned None or ended without a return\"\n-                \" statement.\".format(request.endpoint)\n+                f\"The view function for {request.endpoint!r} did not\"\n+                \" return a valid response. The function either returned\"\n+                \" None or ended without a return statement.\"\n             )\n \n         # make sure the body is an instance of the response class\n@@ -2028,17 +2030,17 @@ class Flask(_PackageBoundObject):\n                     rv = self.response_class.force_type(rv, request.environ)\n                 except TypeError as e:\n                     raise TypeError(\n-                        \"{e}\\nThe view function did not return a valid\"\n-                        \" response. The return type must be a string, dict, tuple,\"\n-                        \" Response instance, or WSGI callable, but it was a\"\n-                        \" {rv.__class__.__name__}.\".format(e=e, rv=rv)\n+                        f\"{e}\\nThe view function did not return a valid\"\n+                        \" response. The return type must be a string,\"\n+                        \" dict, tuple, Response instance, or WSGI\"\n+                        f\" callable, but it was a {type(rv).__name__}.\"\n                     ).with_traceback(sys.exc_info()[2])\n             else:\n                 raise TypeError(\n                     \"The view function did not return a valid\"\n-                    \" response. The return type must be a string, dict, tuple,\"\n-                    \" Response instance, or WSGI callable, but it was a\"\n-                    \" {rv.__class__.__name__}.\".format(rv=rv)\n+                    \" response. The return type must be a string,\"\n+                    \" dict, tuple, Response instance, or WSGI\"\n+                    f\" callable, but it was a {type(rv).__name__}.\"\n                 )\n \n         # prefer the status if it was provided\n@@ -2375,4 +2377,4 @@ class Flask(_PackageBoundObject):\n         return self.wsgi_app(environ, start_response)\n \n     def __repr__(self):\n-        return f\"<{self.__class__.__name__} {self.name!r}>\"\n+        return f\"<{type(self).__name__} {self.name!r}>\"\n\n@@ -246,7 +246,7 @@ class Blueprint(_PackageBoundObject):\n \n         if self.has_static_folder:\n             state.add_url_rule(\n-                self.static_url_path + \"/<path:filename>\",\n+                f\"{self.static_url_path}/<path:filename>\",\n                 view_func=self.send_static_file,\n                 endpoint=\"static\",\n             )\n\n@@ -62,13 +62,13 @@ def find_best_app(script_info, module):\n         return matches[0]\n     elif len(matches) > 1:\n         raise NoAppException(\n-            'Detected multiple Flask applications in module \"{module}\". Use '\n-            '\"FLASK_APP={module}:name\" to specify the correct '\n-            \"one.\".format(module=module.__name__)\n+            \"Detected multiple Flask applications in module\"\n+            f\" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'\"\n+            f\" to specify the correct one.\"\n         )\n \n     # Search for app factory functions.\n-    for attr_name in (\"create_app\", \"make_app\"):\n+    for attr_name in {\"create_app\", \"make_app\"}:\n         app_factory = getattr(module, attr_name, None)\n \n         if inspect.isfunction(app_factory):\n@@ -81,15 +81,16 @@ def find_best_app(script_info, module):\n                 if not _called_with_wrong_args(app_factory):\n                     raise\n                 raise NoAppException(\n-                    'Detected factory \"{factory}\" in module \"{module}\", but '\n-                    \"could not call it without arguments. Use \"\n-                    \"\\\"FLASK_APP='{module}:{factory}(args)'\\\" to specify \"\n-                    \"arguments.\".format(factory=attr_name, module=module.__name__)\n+                    f\"Detected factory {attr_name!r} in module {module.__name__!r},\"\n+                    \" but could not call it without arguments. Use\"\n+                    f\" \\\"FLASK_APP='{module.__name__}:{attr_name}(args)'\\\"\"\n+                    \" to specify arguments.\"\n                 )\n \n     raise NoAppException(\n-        'Failed to find Flask application or factory in module \"{module}\". '\n-        'Use \"FLASK_APP={module}:name to specify one.'.format(module=module.__name__)\n+        \"Failed to find Flask application or factory in module\"\n+        f\" {module.__name__!r}. Use 'FLASK_APP={module.__name__}:name'\"\n+        \" to specify one.\"\n     )\n \n \n@@ -150,8 +151,7 @@ def find_app_by_string(script_info, module, app_name):\n \n     if not match:\n         raise NoAppException(\n-            '\"{name}\" is not a valid variable name or function '\n-            \"expression.\".format(name=app_name)\n+            f\"{app_name!r} is not a valid variable name or function expression.\"\n         )\n \n     name, args = match.groups()\n@@ -165,11 +165,8 @@ def find_app_by_string(script_info, module, app_name):\n         if args:\n             try:\n                 args = ast.literal_eval(f\"({args},)\")\n-            except (ValueError, SyntaxError) as e:\n-                raise NoAppException(\n-                    \"Could not parse the arguments in \"\n-                    '\"{app_name}\".'.format(e=e, app_name=app_name)\n-                )\n+            except (ValueError, SyntaxError):\n+                raise NoAppException(f\"Could not parse the arguments in {app_name!r}.\")\n         else:\n             args = ()\n \n@@ -180,10 +177,9 @@ def find_app_by_string(script_info, module, app_name):\n                 raise\n \n             raise NoAppException(\n-                '{e}\\nThe factory \"{app_name}\" in module \"{module}\" could not '\n-                \"be called with the specified arguments.\".format(\n-                    e=e, app_name=app_name, module=module.__name__\n-                )\n+                f\"{e}\\nThe factory {app_name!r} in module\"\n+                f\" {module.__name__!r} could not be called with the\"\n+                \" specified arguments.\"\n             )\n     else:\n         app = attr\n@@ -193,7 +189,7 @@ def find_app_by_string(script_info, module, app_name):\n \n     raise NoAppException(\n         \"A valid Flask application was not obtained from\"\n-        '\"{module}:{app_name}\".'.format(module=module.__name__, app_name=app_name)\n+        f\" '{module.__name__}:{app_name}'.\"\n     )\n \n \n@@ -236,11 +232,11 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n         # Determine this by checking whether the trace has a depth > 1.\n         if sys.exc_info()[2].tb_next:\n             raise NoAppException(\n-                'While importing \"{name}\", an ImportError was raised:'\n-                \"\\n\\n{tb}\".format(name=module_name, tb=traceback.format_exc())\n+                f\"While importing {module_name!r}, an ImportError was\"\n+                f\" raised:\\n\\n{traceback.format_exc()}\"\n             )\n         elif raise_if_not_found:\n-            raise NoAppException(f'Could not import \"{module_name}\".')\n+            raise NoAppException(f\"Could not import {module_name!r}.\")\n         else:\n             return\n \n@@ -259,14 +255,10 @@ def get_version(ctx, param, value):\n     import werkzeug\n     from . import __version__\n \n-    message = \"Python %(python)s\\nFlask %(flask)s\\nWerkzeug %(werkzeug)s\"\n     click.echo(\n-        message\n-        % {\n-            \"python\": platform.python_version(),\n-            \"flask\": __version__,\n-            \"werkzeug\": werkzeug.__version__,\n-        },\n+        f\"Python {platform.python_version()}\\n\"\n+        f\"Flask {__version__}\\n\"\n+        f\"Werkzeug {werkzeug.__version__}\",\n         color=ctx.color,\n     )\n     ctx.exit()\n@@ -659,7 +651,7 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n         return\n \n     if app_import_path is not None:\n-        message = f' * Serving Flask app \"{app_import_path}\"'\n+        message = f\" * Serving Flask app {app_import_path!r}\"\n \n         if not eager_loading:\n             message += \" (lazy loading)\"\n@@ -670,14 +662,14 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n \n     if env == \"production\":\n         click.secho(\n-            \"   WARNING: This is a development server. \"\n-            \"Do not use it in a production deployment.\",\n+            \"   WARNING: This is a development server. Do not use it in\"\n+            \" a production deployment.\",\n             fg=\"red\",\n         )\n         click.secho(\"   Use a production WSGI server instead.\", dim=True)\n \n     if debug is not None:\n-        click.echo(\" * Debug mode: {}\".format(\"on\" if debug else \"off\"))\n+        click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")\n \n \n class CertParamType(click.ParamType):\n@@ -809,7 +801,7 @@ class SeparatedPathType(click.Path):\n     type=SeparatedPathType(),\n     help=(\n         \"Extra files that trigger a reload on change. Multiple paths\"\n-        \" are separated by '{}'.\".format(os.path.pathsep)\n+        f\" are separated by {os.path.pathsep!r}.\"\n     ),\n )\n @pass_script_info\n@@ -863,8 +855,10 @@ def shell_command():\n     from .globals import _app_ctx_stack\n \n     app = _app_ctx_stack.top.app\n-    banner = \"Python {} on {}\\nApp: {} [{}]\\nInstance: {}\".format(\n-        sys.version, sys.platform, app.import_name, app.env, app.instance_path,\n+    banner = (\n+        f\"Python {sys.version} on {sys.platform}\\n\"\n+        f\"App: {app.import_name} [{app.env}]\\n\"\n+        f\"Instance: {app.instance_path}\"\n     )\n     ctx = {}\n \n\n@@ -98,10 +98,10 @@ class Config(dict):\n             if silent:\n                 return False\n             raise RuntimeError(\n-                \"The environment variable %r is not set \"\n-                \"and as such configuration could not be \"\n-                \"loaded.  Set this variable and make it \"\n-                \"point to a configuration file\" % variable_name\n+                f\"The environment variable {variable_name!r} is not set\"\n+                \" and as such configuration could not be loaded. Set\"\n+                \" this variable and make it point to a configuration\"\n+                \" file\"\n             )\n         return self.from_pyfile(rv, silent=silent)\n \n@@ -128,7 +128,7 @@ class Config(dict):\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                 return False\n-            e.strerror = \"Unable to load configuration file (%s)\" % e.strerror\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n             raise\n         self.from_object(d)\n         return True\n@@ -200,7 +200,7 @@ class Config(dict):\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                 return False\n \n-            e.strerror = \"Unable to load configuration file (%s)\" % e.strerror\n+            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n             raise\n \n         return self.from_mapping(obj)\n@@ -219,7 +219,7 @@ class Config(dict):\n                 mappings.append(mapping[0])\n         elif len(mapping) > 1:\n             raise TypeError(\n-                \"expected at most 1 positional argument, got %d\" % len(mapping)\n+                f\"expected at most 1 positional argument, got {len(mapping)}\"\n             )\n         mappings.append(kwargs.items())\n         for mapping in mappings:\n@@ -270,4 +270,4 @@ class Config(dict):\n         return rv\n \n     def __repr__(self):\n-        return \"<{} {}>\".format(self.__class__.__name__, dict.__repr__(self))\n+        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"\n\n@@ -88,7 +88,7 @@ class _AppCtxGlobals:\n     def __repr__(self):\n         top = _app_ctx_stack.top\n         if top is not None:\n-            return \"<flask.g of %r>\" % top.app.name\n+            return f\"<flask.g of {top.app.name!r}>\"\n         return object.__repr__(self)\n \n \n@@ -445,9 +445,7 @@ class RequestContext:\n         self.auto_pop(exc_value)\n \n     def __repr__(self):\n-        return \"<{} '{}' [{}] of {}>\".format(\n-            self.__class__.__name__,\n-            self.request.url,\n-            self.request.method,\n-            self.app.name,\n+        return (\n+            f\"<{type(self).__name__} {self.request.url!r}\"\n+            f\" [{self.request.method}] of {self.app.name}>\"\n         )\n\n@@ -29,17 +29,18 @@ class DebugFilesKeyError(KeyError, AssertionError):\n     def __init__(self, request, key):\n         form_matches = request.form.getlist(key)\n         buf = [\n-            'You tried to access the file \"%s\" in the request.files '\n-            \"dictionary but it does not exist.  The mimetype for the request \"\n-            'is \"%s\" instead of \"multipart/form-data\" which means that no '\n-            \"file contents were transmitted.  To fix this error you should \"\n-            'provide enctype=\"multipart/form-data\" in your form.'\n-            % (key, request.mimetype)\n+            f\"You tried to access the file {key!r} in the request.files\"\n+            \" dictionary but it does not exist. The mimetype for the\"\n+            f\" request is {request.mimetype!r} instead of\"\n+            \" 'multipart/form-data' which means that no file contents\"\n+            \" were transmitted. To fix this error you should provide\"\n+            ' enctype=\"multipart/form-data\" in your form.'\n         ]\n         if form_matches:\n+            names = \", \".join(repr(x) for x in form_matches)\n             buf.append(\n                 \"\\n\\nThe browser instead transmitted some file names. \"\n-                \"This was submitted: %s\" % \", \".join('\"%s\"' % x for x in form_matches)\n+                f\"This was submitted: {names}\"\n             )\n         self.msg = \"\".join(buf)\n \n@@ -56,24 +57,24 @@ class FormDataRoutingRedirect(AssertionError):\n     def __init__(self, request):\n         exc = request.routing_exception\n         buf = [\n-            \"A request was sent to this URL (%s) but a redirect was \"\n-            'issued automatically by the routing system to \"%s\".'\n-            % (request.url, exc.new_url)\n+            f\"A request was sent to this URL ({request.url}) but a\"\n+            \" redirect was issued automatically by the routing system\"\n+            f\" to {exc.new_url!r}.\"\n         ]\n \n         # In case just a slash was appended we can be extra helpful\n-        if request.base_url + \"/\" == exc.new_url.split(\"?\")[0]:\n+        if f\"{request.base_url}/\" == exc.new_url.split(\"?\")[0]:\n             buf.append(\n-                \"  The URL was defined with a trailing slash so \"\n-                \"Flask will automatically redirect to the URL \"\n-                \"with the trailing slash if it was accessed \"\n-                \"without one.\"\n+                \"  The URL was defined with a trailing slash so Flask\"\n+                \" will automatically redirect to the URL with the\"\n+                \" trailing slash if it was accessed without one.\"\n             )\n \n         buf.append(\n-            \"  Make sure to directly send your %s-request to this URL \"\n-            \"since we can't make browsers or HTTP clients redirect \"\n-            \"with form data reliably or without user interaction.\" % request.method\n+            \"  Make sure to directly send your\"\n+            f\" {request.method}-request to this URL since we can't make\"\n+            \" browsers or HTTP clients redirect with form data reliably\"\n+            \" or without user interaction.\"\n         )\n         buf.append(\"\\n\\nNote: this exception is only raised in debug mode\")\n         AssertionError.__init__(self, \"\".join(buf).encode(\"utf-8\"))\n@@ -101,16 +102,16 @@ def attach_enctype_error_multidict(request):\n \n \n def _dump_loader_info(loader):\n-    yield \"class: {}.{}\".format(type(loader).__module__, type(loader).__name__)\n+    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"\n     for key, value in sorted(loader.__dict__.items()):\n         if key.startswith(\"_\"):\n             continue\n         if isinstance(value, (tuple, list)):\n             if not all(isinstance(x, str) for x in value):\n                 continue\n-            yield \"%s:\" % key\n+            yield f\"{key}:\"\n             for item in value:\n-                yield \"  - %s\" % item\n+                yield f\"  - {item}\"\n             continue\n         elif not isinstance(value, (str, int, float, bool)):\n             continue\n@@ -119,7 +120,7 @@ def _dump_loader_info(loader):\n \n def explain_template_loading_attempts(app, template, attempts):\n     \"\"\"This should help developers understand what failed\"\"\"\n-    info = ['Locating template \"%s\":' % template]\n+    info = [f\"Locating template {template!r}:\"]\n     total_found = 0\n     blueprint = None\n     reqctx = _request_ctx_stack.top\n@@ -128,23 +129,23 @@ def explain_template_loading_attempts(app, template, attempts):\n \n     for idx, (loader, srcobj, triple) in enumerate(attempts):\n         if isinstance(srcobj, Flask):\n-            src_info = 'application \"%s\"' % srcobj.import_name\n+            src_info = f\"application {srcobj.import_name!r}\"\n         elif isinstance(srcobj, Blueprint):\n-            src_info = f'blueprint \"{srcobj.name}\" ({srcobj.import_name})'\n+            src_info = f\"blueprint {srcobj.name!r} ({srcobj.import_name})\"\n         else:\n             src_info = repr(srcobj)\n \n-        info.append(\"% 5d: trying loader of %s\" % (idx + 1, src_info))\n+        info.append(f\"{idx + 1:5}: trying loader of {src_info}\")\n \n         for line in _dump_loader_info(loader):\n-            info.append(\"       %s\" % line)\n+            info.append(f\"       {line}\")\n \n         if triple is None:\n             detail = \"no match\"\n         else:\n-            detail = \"found (%r)\" % (triple[1] or \"<string>\")\n+            detail = f\"found ({triple[1] or '<string>'!r})\"\n             total_found += 1\n-        info.append(\"       -> %s\" % detail)\n+        info.append(f\"       -> {detail}\")\n \n     seems_fishy = False\n     if total_found == 0:\n@@ -156,8 +157,8 @@ def explain_template_loading_attempts(app, template, attempts):\n \n     if blueprint is not None and seems_fishy:\n         info.append(\n-            \"  The template was looked up from an endpoint that \"\n-            'belongs to the blueprint \"%s\".' % blueprint\n+            \"  The template was looked up from an endpoint that belongs\"\n+            f\" to the blueprint {blueprint!r}.\"\n         )\n         info.append(\"  Maybe you did not place a template in the right folder?\")\n         info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")\n@@ -169,11 +170,10 @@ def explain_ignored_app_run():\n     if os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\":\n         warn(\n             Warning(\n-                \"Silently ignoring app.run() because the \"\n-                \"application is run from the flask command line \"\n-                \"executable.  Consider putting app.run() behind an \"\n-                'if __name__ == \"__main__\" guard to silence this '\n-                \"warning.\"\n+                \"Silently ignoring app.run() because the application is\"\n+                \" run from the flask command line executable. Consider\"\n+                ' putting app.run() behind an if __name__ == \"__main__\"'\n+                \" guard to silence this warning.\"\n             ),\n             stacklevel=3,\n         )\n\n@@ -311,7 +311,7 @@ def url_for(endpoint, **values):\n \n         if endpoint[:1] == \".\":\n             if blueprint_name is not None:\n-                endpoint = blueprint_name + endpoint\n+                endpoint = f\"{blueprint_name}{endpoint}\"\n             else:\n                 endpoint = endpoint[1:]\n \n@@ -364,7 +364,7 @@ def url_for(endpoint, **values):\n         return appctx.app.handle_url_build_error(error, endpoint, values)\n \n     if anchor is not None:\n-        rv += \"#\" + url_quote(anchor)\n+        rv += f\"#{url_quote(anchor)}\"\n     return rv\n \n \n@@ -608,11 +608,12 @@ def send_file(\n         try:\n             attachment_filename = attachment_filename.encode(\"ascii\")\n         except UnicodeEncodeError:\n+            quoted = url_quote(attachment_filename, safe=\"\")\n             filenames = {\n                 \"filename\": unicodedata.normalize(\"NFKD\", attachment_filename).encode(\n                     \"ascii\", \"ignore\"\n                 ),\n-                \"filename*\": \"UTF-8''%s\" % url_quote(attachment_filename, safe=\"\"),\n+                \"filename*\": f\"UTF-8''{quoted}\",\n             }\n         else:\n             filenames = {\"filename\": attachment_filename}\n@@ -661,23 +662,19 @@ def send_file(\n         from warnings import warn\n \n         try:\n-            rv.set_etag(\n-                \"%s-%s-%s\"\n-                % (\n-                    os.path.getmtime(filename),\n-                    os.path.getsize(filename),\n+            check = (\n                 adler32(\n-                        filename.encode(\"utf-8\")\n-                        if isinstance(filename, str)\n-                        else filename\n+                    filename.encode(\"utf-8\") if isinstance(filename, str) else filename\n                 )\n-                    & 0xFFFFFFFF,\n+                & 0xFFFFFFFF\n             )\n+            rv.set_etag(\n+                f\"{os.path.getmtime(filename)}-{os.path.getsize(filename)}-{check}\"\n             )\n         except OSError:\n             warn(\n-                \"Access %s failed, maybe it does not exist, so ignore etags in \"\n-                \"headers\" % filename,\n+                f\"Access {filename} failed, maybe it does not exist, so\"\n+                \" ignore etags in headers\",\n                 stacklevel=2,\n             )\n \n@@ -806,13 +803,12 @@ def get_root_path(import_name):\n         # first module that is contained in our package.\n         if filepath is None:\n             raise RuntimeError(\n-                \"No root path can be found for the provided \"\n-                'module \"%s\".  This can happen because the '\n-                \"module came from an import hook that does \"\n-                \"not provide file name information or because \"\n-                \"it's a namespace package.  In this case \"\n-                \"the root path needs to be explicitly \"\n-                \"provided.\" % import_name\n+                \"No root path can be found for the provided module\"\n+                f\" {import_name!r}. This can happen because the module\"\n+                \" came from an import hook that does not provide file\"\n+                \" name information or because it's a namespace package.\"\n+                \" In this case the root path needs to be explicitly\"\n+                \" provided.\"\n             )\n \n     # filepath is import_name.py for a module, or __init__.py for a package.\n@@ -823,6 +819,7 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):\n     \"\"\"Given the loader that loaded a module and the module this function\n     attempts to figure out if the given module is actually a package.\n     \"\"\"\n+    cls = type(loader)\n     # If the loader can tell us if something is a package, we can\n     # directly ask the loader.\n     if hasattr(loader, \"is_package\"):\n@@ -830,20 +827,13 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):\n     # importlib's namespace loaders do not have this functionality but\n     # all the modules it loads are packages, so we can take advantage of\n     # this information.\n-    elif (\n-        loader.__class__.__module__ == \"_frozen_importlib\"\n-        and loader.__class__.__name__ == \"NamespaceLoader\"\n-    ):\n+    elif cls.__module__ == \"_frozen_importlib\" and cls.__name__ == \"NamespaceLoader\":\n         return True\n     # Otherwise we need to fail with an error that explains what went\n     # wrong.\n     raise AttributeError(\n-        (\n-            \"%s.is_package() method is missing but is required by Flask of \"\n-            \"PEP 302 import hooks.  If you do not use import hooks and \"\n-            \"you encounter this error please file a bug against Flask.\"\n-        )\n-        % loader.__class__.__name__\n+        f\"{cls.__name__}.is_package() method is missing but is required\"\n+        \" for PEP 302 import hooks.\"\n     )\n \n \n@@ -1014,7 +1004,7 @@ class _PackageBoundObject:\n \n         if self.static_folder is not None:\n             basename = os.path.basename(self.static_folder)\n-            return (\"/\" + basename).rstrip(\"/\")\n+            return f\"/{basename}\".rstrip(\"/\")\n \n     @static_url_path.setter\n     def static_url_path(self, value):\n\n@@ -364,7 +364,7 @@ def jsonify(*args, **kwargs):\n         data = args or kwargs\n \n     return current_app.response_class(\n-        dumps(data, indent=indent, separators=separators) + \"\\n\",\n+        f\"{dumps(data, indent=indent, separators=separators)}\\n\",\n         mimetype=current_app.config[\"JSONIFY_MIMETYPE\"],\n     )\n \n\n@@ -105,7 +105,7 @@ class TagDict(JSONTag):\n \n     def to_json(self, value):\n         key = next(iter(value))\n-        return {key + \"__\": self.serializer.tag(value[key])}\n+        return {f\"{key}__\": self.serializer.tag(value[key])}\n \n     def to_python(self, value):\n         key = next(iter(value))\n\n@@ -208,13 +208,13 @@ class SessionInterface:\n         rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")\n \n         if \".\" not in rv:\n-            # Chrome doesn't allow names without a '.'\n-            # this should only come up with localhost\n-            # hack around this by not setting the name, and show a warning\n+            # Chrome doesn't allow names without a '.'. This should only\n+            # come up with localhost. Hack around this by not setting\n+            # the name, and show a warning.\n             warnings.warn(\n-                '\"{rv}\" is not a valid cookie domain, it must contain a \".\".'\n-                \" Add an entry to your hosts file, for example\"\n-                ' \"{rv}.localdomain\", and use that instead.'.format(rv=rv)\n+                f\"{rv!r} is not a valid cookie domain, it must contain\"\n+                \" a '.'. Add an entry to your hosts file, for example\"\n+                f\" '{rv}.localdomain', and use that instead.\"\n             )\n             app.config[\"SESSION_COOKIE_DOMAIN\"] = False\n             return None\n@@ -232,7 +232,7 @@ class SessionInterface:\n         # if this is not an ip and app is mounted at the root, allow subdomain\n         # matching by adding a '.' prefix\n         if self.get_cookie_path(app) == \"/\" and not ip:\n-            rv = \".\" + rv\n+            rv = f\".{rv}\"\n \n         app.config[\"SESSION_COOKIE_DOMAIN\"] = rv\n         return rv\n\n@@ -69,10 +69,9 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n                 url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n \n             url = url_parse(path)\n-            base_url = \"{scheme}://{netloc}/{path}\".format(\n-                scheme=url.scheme or url_scheme,\n-                netloc=url.netloc or http_host,\n-                path=app_root.lstrip(\"/\"),\n+            base_url = (\n+                f\"{url.scheme or url_scheme}://{url.netloc or http_host}\"\n+                f\"/{app_root.lstrip('/')}\"\n             )\n             path = url.path\n \n@@ -114,7 +113,7 @@ class FlaskClient(Client):\n         super().__init__(*args, **kwargs)\n         self.environ_base = {\n             \"REMOTE_ADDR\": \"127.0.0.1\",\n-            \"HTTP_USER_AGENT\": \"werkzeug/\" + werkzeug.__version__,\n+            \"HTTP_USER_AGENT\": f\"werkzeug/{werkzeug.__version__}\",\n         }\n \n     @contextmanager\n\n@@ -26,7 +26,7 @@ class View:\n             methods = ['GET']\n \n             def dispatch_request(self, name):\n-                return 'Hello %s!' % name\n+                return f\"Hello {name}!\"\n \n         app.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))\n \n@@ -157,5 +157,5 @@ class MethodView(View, metaclass=MethodViewType):\n         if meth is None and request.method == \"HEAD\":\n             meth = getattr(self, \"get\", None)\n \n-        assert meth is not None, \"Unimplemented method %r\" % request.method\n+        assert meth is not None, f\"Unimplemented method {request.method!r}\"\n         return meth(*args, **kwargs)\n\n@@ -116,9 +116,8 @@ def limit_loader(request, monkeypatch):\n             self.loader = loader\n \n         def __getattr__(self, name):\n-            if name in (\"archive\", \"get_filename\"):\n-                msg = \"Mocking a loader which does not have `%s.`\" % name\n-                raise AttributeError(msg)\n+            if name in {\"archive\", \"get_filename\"}:\n+                raise AttributeError(f\"Mocking a loader which does not have {name!r}.\")\n             return getattr(self.loader, name)\n \n     old_get_loader = pkgutil.get_loader\n@@ -148,7 +147,7 @@ def site_packages(modules_tmpdir, monkeypatch):\n     \"\"\"Create a fake site-packages.\"\"\"\n     rv = (\n         modules_tmpdir.mkdir(\"lib\")\n-        .mkdir(\"python{x[0]}.{x[1]}\".format(x=sys.version_info))\n+        .mkdir(f\"python{sys.version_info.major}.{sys.version_info.minor}\")\n         .mkdir(\"site-packages\")\n     )\n     monkeypatch.syspath_prepend(str(rv))\n@@ -161,23 +160,21 @@ def install_egg(modules_tmpdir, monkeypatch):\n     sys.path.\"\"\"\n \n     def inner(name, base=modules_tmpdir):\n-        if not isinstance(name, str):\n-            raise ValueError(name)\n         base.join(name).ensure_dir()\n         base.join(name).join(\"__init__.py\").ensure()\n \n         egg_setup = base.join(\"setup.py\")\n         egg_setup.write(\n             textwrap.dedent(\n-                \"\"\"\n+                f\"\"\"\n                 from setuptools import setup\n-        setup(name='{}',\n-              version='1.0',\n-              packages=['site_egg'],\n-              zip_safe=True)\n-        \"\"\".format(\n-                    name\n+                setup(\n+                    name=\"{name}\",\n+                    version=\"1.0\",\n+                    packages=[\"site_egg\"],\n+                    zip_safe=True,\n                 )\n+                \"\"\"\n             )\n         )\n \n\n@@ -361,7 +361,7 @@ def test_session_localhost_warning(recwarn, app, client):\n     rv = client.get(\"/\", \"http://localhost:5000/\")\n     assert \"domain\" not in rv.headers[\"set-cookie\"].lower()\n     w = recwarn.pop(UserWarning)\n-    assert '\"localhost\" is not a valid cookie domain' in str(w.message)\n+    assert \"'localhost' is not a valid cookie domain\" in str(w.message)\n \n \n def test_session_ip_warning(recwarn, app, client):\n@@ -1095,7 +1095,7 @@ def test_enctype_debug_helper(app, client):\n         with pytest.raises(DebugFilesKeyError) as e:\n             client.post(\"/fail\", data={\"foo\": \"index.txt\"})\n         assert \"no file contents were transmitted\" in str(e.value)\n-        assert 'This was submitted: \"index.txt\"' in str(e.value)\n+        assert \"This was submitted: 'index.txt'\" in str(e.value)\n \n \n def test_response_types(app, client):\n@@ -1821,7 +1821,7 @@ def test_subdomain_matching():\n \n     @app.route(\"/\", subdomain=\"<user>\")\n     def index(user):\n-        return \"index for %s\" % user\n+        return f\"index for {user}\"\n \n     rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain/\")\n     assert rv.data == b\"index for mitsuhiko\"\n@@ -1834,7 +1834,7 @@ def test_subdomain_matching_with_ports():\n \n     @app.route(\"/\", subdomain=\"<user>\")\n     def index(user):\n-        return \"index for %s\" % user\n+        return f\"index for {user}\"\n \n     rv = client.get(\"/\", \"http://mitsuhiko.localhost.localdomain:3000/\")\n     assert rv.data == b\"index for mitsuhiko\"\n\n@@ -144,7 +144,7 @@ def test_blueprint_url_defaults(app, client):\n \n     @bp.route(\"/foo\", defaults={\"baz\": 42})\n     def foo(bar, baz):\n-        return \"%s/%d\" % (bar, baz)\n+        return f\"{bar}/{baz:d}\"\n \n     @bp.route(\"/bar\")\n     def bar(bar):\n\n@@ -268,9 +268,9 @@ def test_get_version(test_apps, capsys):\n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n     out, err = capsys.readouterr()\n-    assert \"Python \" + python_version() in out\n-    assert \"Flask \" + flask_version in out\n-    assert \"Werkzeug \" + werkzeug_version in out\n+    assert f\"Python {python_version()}\" in out\n+    assert f\"Flask {flask_version}\" in out\n+    assert f\"Werkzeug {werkzeug_version}\" in out\n \n \n def test_scriptinfo(test_apps, monkeypatch):\n@@ -288,7 +288,7 @@ def test_scriptinfo(test_apps, monkeypatch):\n     app = obj.load_app()\n     assert app.name == \"testapp\"\n     assert obj.load_app() is app\n-    obj = ScriptInfo(app_import_path=cli_app_path + \":testapp\")\n+    obj = ScriptInfo(app_import_path=f\"{cli_app_path}:testapp\")\n     app = obj.load_app()\n     assert app.name == \"testapp\"\n     assert obj.load_app() is app\n@@ -406,7 +406,7 @@ def test_flaskgroup_debug(runner, set_debug_flag):\n \n     result = runner.invoke(cli, [\"test\"])\n     assert result.exit_code == 0\n-    assert result.output == \"%s\\n\" % str(not set_debug_flag)\n+    assert result.output == f\"{not set_debug_flag}\\n\"\n \n \n def test_print_exceptions(runner):\n@@ -656,4 +656,4 @@ def test_cli_empty(app):\n     app.register_blueprint(bp)\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n-    assert result.exit_code == 2, \"Unexpected success:\\n\\n\" + result.output\n+    assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n\n@@ -28,7 +28,7 @@ def common_object_test(app):\n \n def test_config_from_pyfile():\n     app = flask.Flask(__name__)\n-    app.config.from_pyfile(__file__.rsplit(\".\", 1)[0] + \".py\")\n+    app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n \n \n@@ -84,7 +84,7 @@ def test_config_from_envvar(monkeypatch):\n     assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n \n     monkeypatch.setattr(\n-        \"os.environ\", {\"FOO_SETTINGS\": __file__.rsplit(\".\", 1)[0] + \".py\"}\n+        \"os.environ\", {\"FOO_SETTINGS\": f\"{__file__.rsplit('.', 1)[0]}.py\"}\n     )\n     assert app.config.from_envvar(\"FOO_SETTINGS\")\n     common_object_test(app)\n@@ -185,12 +185,10 @@ def test_from_pyfile_weird_encoding(tmpdir, encoding):\n     f = tmpdir.join(\"my_config.py\")\n     f.write_binary(\n         textwrap.dedent(\n-            \"\"\"\n-    # -*- coding: {} -*-\n+            f\"\"\"\n+            # -*- coding: {encoding} -*-\n             TEST_VALUE = \"föö\"\n-    \"\"\".format(\n-                encoding\n-            )\n+            \"\"\"\n         ).encode(encoding)\n     )\n     app = flask.Flask(__name__)\n\n@@ -286,7 +286,7 @@ class TestJSON:\n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n-                    return \"<%d>\" % o.val\n+                    return f\"<{o.val}>\"\n                 return flask.json.JSONEncoder.default(self, o)\n \n         class MyDecoder(flask.json.JSONDecoder):\n@@ -314,14 +314,16 @@ class TestJSON:\n         assert rv.data == b'\"<42>\"'\n \n     def test_blueprint_json_customization(self, app, client):\n-        class X:  # noqa: B903, for Python2 compatibility\n+        class X:\n+            __slots__ = (\"val\",)\n+\n             def __init__(self, val):\n                 self.val = val\n \n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n-                    return \"<%d>\" % o.val\n+                    return f\"<{o.val}>\"\n \n                 return flask.json.JSONEncoder.default(self, o)\n \n@@ -687,9 +689,9 @@ class TestSendfile:\n         )\n         rv.close()\n         content_disposition = rv.headers[\"Content-Disposition\"]\n-        assert \"filename=%s\" % ascii in content_disposition\n+        assert f\"filename={ascii}\" in content_disposition\n         if utf8:\n-            assert \"filename*=UTF-8''\" + utf8 in content_disposition\n+            assert f\"filename*=UTF-8''{utf8}\" in content_disposition\n         else:\n             assert \"filename*=UTF-8''\" not in content_disposition\n \n@@ -818,7 +820,7 @@ class TestUrlFor:\n             def get(self, id=None):\n                 if id is None:\n                     return \"List\"\n-                return \"Get %d\" % id\n+                return f\"Get {id:d}\"\n \n             def post(self):\n                 return \"Create\"\n\n@@ -110,7 +110,7 @@ def test_proper_test_request_context(app):\n def test_context_binding(app):\n     @app.route(\"/\")\n     def index():\n-        return \"Hello %s!\" % flask.request.args[\"name\"]\n+        return f\"Hello {flask.request.args['name']}!\"\n \n     @app.route(\"/meh\")\n     def meh():\n@@ -138,7 +138,7 @@ def test_context_test(app):\n def test_manual_context_binding(app):\n     @app.route(\"/\")\n     def index():\n-        return \"Hello %s!\" % flask.request.args[\"name\"]\n+        return f\"Hello {flask.request.args['name']}!\"\n \n     ctx = app.test_request_context(\"/?name=World\")\n     ctx.push()\n\n@@ -414,16 +414,16 @@ def test_template_loader_debugging(test_apps, monkeypatch):\n         def handle(self, record):\n             called.append(True)\n             text = str(record.msg)\n-            assert '1: trying loader of application \"blueprintapp\"' in text\n+            assert \"1: trying loader of application 'blueprintapp'\" in text\n             assert (\n-                '2: trying loader of blueprint \"admin\" (blueprintapp.apps.admin)'\n+                \"2: trying loader of blueprint 'admin' (blueprintapp.apps.admin)\"\n             ) in text\n             assert (\n-                'trying loader of blueprint \"frontend\" (blueprintapp.apps.frontend)'\n+                \"trying loader of blueprint 'frontend' (blueprintapp.apps.frontend)\"\n             ) in text\n             assert \"Error: the template could not be found\" in text\n             assert (\n-                'looked up from an endpoint that belongs to the blueprint \"frontend\"'\n+                \"looked up from an endpoint that belongs to the blueprint 'frontend'\"\n             ) in text\n             assert \"See https://flask.palletsprojects.com/blueprints/#templates\" in text\n \n\n@@ -59,7 +59,7 @@ def test_environ_base_default(app, client, app_ctx):\n \n     rv = client.get(\"/\")\n     assert rv.data == b\"127.0.0.1\"\n-    assert flask.g.user_agent == \"werkzeug/\" + werkzeug.__version__\n+    assert flask.g.user_agent == f\"werkzeug/{werkzeug.__version__}\"\n \n \n def test_environ_base_modified(app, client, app_ctx):\n@@ -321,7 +321,7 @@ def test_json_request_and_response(app, client):\n def test_client_json_no_app_context(app, client):\n     @app.route(\"/hello\", methods=[\"POST\"])\n     def hello():\n-        return \"Hello, {}!\".format(flask.request.json[\"name\"])\n+        return f\"Hello, {flask.request.json['name']}!\"\n \n     class Namespace:\n         count = 0\n\n@@ -29,7 +29,7 @@ def test_error_handler_no_match(app, client):\n         original = getattr(e, \"original_exception\", None)\n \n         if original is not None:\n-            return \"wrapped \" + type(original).__name__\n+            return f\"wrapped {type(original).__name__}\"\n \n         return \"direct\"\n \n@@ -238,9 +238,9 @@ class TestGenericHandlers:\n         original = getattr(e, \"original_exception\", None)\n \n         if original is not None:\n-            return \"wrapped \" + type(original).__name__\n+            return f\"wrapped {type(original).__name__}\"\n \n-        return \"direct \" + type(e).__name__\n+        return f\"direct {type(e).__name__}\"\n \n     @pytest.mark.parametrize(\"to_handle\", (InternalServerError, 500))\n     def test_handle_class_or_code(self, app, client, to_handle):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f2f027d1fbc12f3ff24f3e471e11ac56e1a5d869", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 329 | Files Changed: 37 | Hunks: 39 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 342 | Churn Cumulative: 18657 | Contributors (this commit): 123 | Commits (past 90d): 147 | Contributors (cumulative): 263 | DMM Complexity: None\n\nDIFF:\n@@ -1,15 +1,3 @@\n-\"\"\"\n-    flask\n-    ~~~~~\n-\n-    A microframework based on Werkzeug.  It's extensively documented\n-    and follows best practice patterns.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n-# utilities we import from Werkzeug and Jinja2 that are unused\n-# in the module but are exported as public interface.\n from jinja2 import escape\n from jinja2 import Markup\n from werkzeug.exceptions import abort\n\n@@ -1,14 +1,3 @@\n-\"\"\"\n-    flask.__main__\n-    ~~~~~~~~~~~~~~\n-\n-    Alias for flask.run for the command line.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n-\n-if __name__ == \"__main__\":\n from .cli import main\n \n main(as_module=True)\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.app\n-    ~~~~~~~~~\n-\n-    This module implements the central WSGI application object.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import os\n import sys\n from datetime import timedelta\n\n@@ -1,13 +1,3 @@\n-\"\"\"\n-    flask.blueprints\n-    ~~~~~~~~~~~~~~~~\n-\n-    Blueprints are the recommended way to implement larger or more\n-    pluggable applications in Flask 0.7 and later.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from functools import update_wrapper\n \n from .helpers import _endpoint_from_view_func\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.cli\n-    ~~~~~~~~~\n-\n-    A simple command line application to run flask apps.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import ast\n import inspect\n import os\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.config\n-    ~~~~~~~~~~~~\n-\n-    Implements the configuration related objects.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import errno\n import os\n import types\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.ctx\n-    ~~~~~~~~~\n-\n-    Implements the objects required to keep the context.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import sys\n from functools import update_wrapper\n \n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.debughelpers\n-    ~~~~~~~~~~~~~~~~~~\n-\n-    Various helpers to make the development experience better.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import os\n from warnings import warn\n \n\n@@ -1,13 +1,3 @@\n-\"\"\"\n-    flask.globals\n-    ~~~~~~~~~~~~~\n-\n-    Defines all the global objects that are proxies to the current\n-    active context.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from functools import partial\n \n from werkzeug.local import LocalProxy\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.helpers\n-    ~~~~~~~~~~~~~\n-\n-    Implements various helpers.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import io\n import mimetypes\n import os\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-flask.json\n-~~~~~~~~~~\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n-\"\"\"\n import codecs\n import io\n import uuid\n\n@@ -2,10 +2,10 @@\n Tagged JSON\n ~~~~~~~~~~~\n \n-A compact representation for lossless serialization of non-standard JSON types.\n-:class:`~flask.sessions.SecureCookieSessionInterface` uses this to serialize\n-the session data, but it may be useful in other places. It can be extended to\n-support other types.\n+A compact representation for lossless serialization of non-standard JSON\n+types. :class:`~flask.sessions.SecureCookieSessionInterface` uses this\n+to serialize the session data, but it may be useful in other places. It\n+can be extended to support other types.\n \n .. autoclass:: TaggedJSONSerializer\n     :members:\n@@ -13,12 +13,15 @@ support other types.\n .. autoclass:: JSONTag\n     :members:\n \n-Let's seen an example that adds support for :class:`~collections.OrderedDict`.\n-Dicts don't have an order in Python or JSON, so to handle this we will dump\n-the items as a list of ``[key, value]`` pairs. Subclass :class:`JSONTag` and\n-give it the new key ``' od'`` to identify the type. The session serializer\n-processes dicts first, so insert the new tag at the front of the order since\n-``OrderedDict`` must be processed before ``dict``. ::\n+Let's see an example that adds support for\n+:class:`~collections.OrderedDict`. Dicts don't have an order in JSON, so\n+to handle this we will dump the items as a list of ``[key, value]``\n+pairs. Subclass :class:`JSONTag` and give it the new key ``' od'`` to\n+identify the type. The session serializer processes dicts first, so\n+insert the new tag at the front of the order since ``OrderedDict`` must\n+be processed before ``dict``.\n+\n+.. code-block:: python\n \n     from flask.json.tag import JSONTag\n \n@@ -36,9 +39,6 @@ processes dicts first, so insert the new tag at the front of the order since\n             return OrderedDict(value)\n \n     app.session_interface.serializer.register(TagOrderedDict, index=0)\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n \"\"\"\n from base64 import b64decode\n from base64 import b64encode\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-flask.logging\n-~~~~~~~~~~~~~\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n-\"\"\"\n import logging\n import sys\n \n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.sessions\n-    ~~~~~~~~~~~~~~\n-\n-    Implements cookie based sessions based on itsdangerous.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import hashlib\n import warnings\n from collections.abc import MutableMapping\n\n@@ -1,13 +1,3 @@\n-\"\"\"\n-    flask.signals\n-    ~~~~~~~~~~~~~\n-\n-    Implements signals based on blinker if available, otherwise\n-    falls silently back to a noop.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n try:\n     from blinker import Namespace\n \n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.templating\n-    ~~~~~~~~~~~~~~~~\n-\n-    Implements the bridge to Jinja2.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from jinja2 import BaseLoader\n from jinja2 import Environment as BaseEnvironment\n from jinja2 import TemplateNotFound\n\n@@ -1,13 +1,3 @@\n-\"\"\"\n-    flask.testing\n-    ~~~~~~~~~~~~~\n-\n-    Implements test support helpers.  This module is lazily imported\n-    and usually not used in production environments.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from contextlib import contextmanager\n \n import werkzeug.test\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.views\n-    ~~~~~~~~~~~\n-\n-    This module provides class-based views inspired by the ones in Django.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from .globals import request\n \n \n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    flask.wrappers\n-    ~~~~~~~~~~~~~~\n-\n-    Implements the WSGI wrappers (request and response).\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from werkzeug.exceptions import BadRequest\n from werkzeug.wrappers import Request as RequestBase\n from werkzeug.wrappers import Response as ResponseBase\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-    tests.conftest\n-    ~~~~~~~~~~~~~~\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import os\n import pkgutil\n import sys\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.appctx\n-    ~~~~~~~~~~~~\n-\n-    Tests the application context.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import pytest\n \n import flask\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.basic\n-    ~~~~~~~~~~~~~~~~~~~~~\n-\n-    The basic functionality.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import re\n import sys\n import time\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.blueprints\n-    ~~~~~~~~~~~~~~~~\n-\n-    Blueprints (and currently modules)\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import functools\n \n import pytest\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-    tests.test_cli\n-    ~~~~~~~~~~~~~~\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n import os\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-    tests.test_config\n-    ~~~~~~~~~~~~~~~~~\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import json\n import os\n import textwrap\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.helpers\n-    ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-    Various helpers.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import datetime\n import io\n import os\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-    tests.test_instance\n-    ~~~~~~~~~~~~~~~~~~~\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import os\n import sys\n \n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-tests.test_json_tag\n-~~~~~~~~~~~~~~~~~~~\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n-\"\"\"\n from datetime import datetime\n from uuid import uuid4\n \n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-tests.test_logging\n-~~~~~~~~~~~~~~~~~~~\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n-\"\"\"\n import logging\n import sys\n from io import StringIO\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.regression\n-    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-    Tests regressions.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import gc\n import platform\n import threading\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.reqctx\n-    ~~~~~~~~~~~~\n-\n-    Tests the request context.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import pytest\n \n import flask\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.signals\n-    ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-    Signalling.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import pytest\n \n try:\n\n@@ -1,13 +1,3 @@\n-\"\"\"\n-    tests.subclassing\n-    ~~~~~~~~~~~~~~~~~\n-\n-    Test that certain behavior of flask can be customized by\n-    subclasses.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n from io import StringIO\n \n import flask\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.templating\n-    ~~~~~~~~~~~~~~~~\n-\n-    Template functionality\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import logging\n \n import pytest\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.testing\n-    ~~~~~~~~~~~~~\n-\n-    Test client and more.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import click\n import pytest\n import werkzeug\n\n@@ -1,10 +1,3 @@\n-\"\"\"\n-tests.test_user_error_handler\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-:copyright: 2010 Pallets\n-:license: BSD-3-Clause\n-\"\"\"\n import pytest\n from werkzeug.exceptions import Forbidden\n from werkzeug.exceptions import HTTPException\n\n@@ -1,12 +1,3 @@\n-\"\"\"\n-    tests.views\n-    ~~~~~~~~~~~\n-\n-    Pluggable views.\n-\n-    :copyright: 2010 Pallets\n-    :license: BSD-3-Clause\n-\"\"\"\n import pytest\n from werkzeug.http import parse_set_header\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
