{"custom_id": "requests#a8fdba15b12550a9bb08b1fa1e4d78b5d9508c1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5363 | Contributors (this commit): 99 | Commits (past 90d): 14 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -1136,8 +1136,8 @@ class TestRequests(object):\n         with contextlib.closing(s.get(httpbin('stream/4'), stream=True)) as response:\n             pass\n \n-        self.assertFalse(response._content_consumed)\n-        self.assertTrue(response.raw.closed)\n+        assert not response._content_consumed is False\n+        assert response.raw.closed\n \n     @pytest.mark.xfail\n     def test_response_iter_lines_reentrant(self, httpbin):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#70d7b134c806cf75c5c4343f9cefa92f9345635a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5365 | Contributors (this commit): 99 | Commits (past 90d): 15 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -1734,7 +1734,7 @@ def test_urllib3_pool_connection_closed(httpbin):\n     try:\n         s.get(httpbin('status/200'))\n     except ConnectionError as e:\n-        assert u\"HTTPConnectionPool(host='httpbin.org', port=80): Pool is closed.\" in str(e)\n+        assert u\"Pool is closed.\" in str(e)\n \n def test_vendor_aliases():\n     from requests.packages import urllib3\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be564e500cdebff5c0325808adb9ff33610b7c78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5367 | Contributors (this commit): 99 | Commits (past 90d): 16 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -1136,7 +1136,7 @@ class TestRequests(object):\n         with contextlib.closing(s.get(httpbin('stream/4'), stream=True)) as response:\n             pass\n \n-        assert not response._content_consumed is False\n+        assert response._content_consumed is False\n         assert response.raw.closed\n \n     @pytest.mark.xfail\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c91e27d0142c177add6a1f726712f58914d4f52", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 15 | Churn Cumulative: 5382 | Contributors (this commit): 99 | Commits (past 90d): 16 | Contributors (cumulative): 99 | DMM Complexity: 0.0\n\nDIFF:\n@@ -448,21 +448,6 @@ class TestRequests(object):\n         r = requests.get(url, auth=auth)\n         assert '\"auth\"' in r.request.headers['Authorization']\n \n-    def test_DIGESTAUTH_THREADED(self, httpbin):\n-\n-        auth = HTTPDigestAuth('user', 'pass')\n-        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n-        session = requests.Session()\n-        session.auth=auth\n-\n-        def do_request(i):\n-            r = session.get(url)\n-            assert '\"auth\"' in r.request.headers['Authorization']\n-            return 1\n-        if ThreadPool is not None:\n-            pool = ThreadPool(processes=50)\n-            pool.map(do_request, range(100))\n-\n     def test_POSTBIN_GET_POST_FILES(self, httpbin):\n \n         url = httpbin('post')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#43b90d7f72c4793aa538dd7eac2ac126da2a3aaf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5384 | Contributors (this commit): 99 | Commits (past 90d): 17 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -341,7 +341,7 @@ class TestRequests(object):\n     def test_connection_error_invalid_port(self):\n         \"\"\"Connecting to an invalid port should raise a ConnectionError\"\"\"\n         with pytest.raises(ConnectionError):\n-            requests.get(\"http://httpbin.org:1\", timeout=1)\n+            requests.get(\"http://localhost:1\", timeout=1)\n \n     def test_LocationParseError(self):\n         \"\"\"Inputing a URL that cannot be parsed should raise an InvalidURL error\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e67cd15bc81943cba10786cb3f5de0473d9e8550", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 11 | Churn Cumulative: 6378 | Contributors (this commit): 115 | Commits (past 90d): 31 | Contributors (cumulative): 130 | DMM Complexity: 1.0\n\nDIFF:\n@@ -398,10 +398,10 @@ class HTTPAdapter(BaseAdapter):\n                     try:\n                         # For Python 2.7+ versions, use buffering of HTTP\n                         # responses\n-                        r = conn.getresponse(buffering=True)\n+                        r = low_conn.getresponse(buffering=True)\n                     except TypeError:\n                         # For compatibility with Python 2.6 versions and back\n-                        r = conn.getresponse()\n+                        r = low_conn.getresponse()\n \n                     resp = HTTPResponse.from_httplib(\n                         r,\n\n@@ -1133,6 +1133,13 @@ class TestRequests(object):\n         next(r.iter_lines())\n         assert len(list(r.iter_lines())) == 3\n \n+    def test_chunked_upload(self, httpbin):\n+        \"\"\"Can safely send generators.\"\"\"\n+        data = (c for c in 'abc')\n+        r = requests.post(httpbin('post'), data=data, stream=True)\n+        assert r.status_code == 200\n+        assert r.request.headers['Transfer-Encoding'] == 'chunked'\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1ced0040bdc7da87b9fb05c57fc2443be012caf9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 1164 | Contributors (this commit): 35 | Commits (past 90d): 2 | Contributors (cumulative): 35 | DMM Complexity: 0.0\n\nDIFF:\n@@ -46,13 +46,11 @@ def request(method, url, **kwargs):\n       <Response [200]>\n     \"\"\"\n \n-    session = sessions.Session()\n-    response = session.request(method=method, url=url, **kwargs)\n-    # By explicitly closing the session, we avoid leaving sockets open which\n-    # can trigger a ResourceWarning in some cases, and look like a memory leak\n-    # in others.\n-    session.close()\n-    return response\n+    # By using the 'with' statement we are sure the session is closed, thus we\n+    # avoid leaving sockets open which can trigger a ResourceWarning in some\n+    # cases, and look like a memory leak in others.\n+    with sessions.Session() as session:\n+        return session.request(method=method, url=url, **kwargs)\n \n \n def get(url, params=None, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c1c164ba80a35e63e13f00d20bd32f2f08c4fc51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 5398 | Contributors (this commit): 99 | Commits (past 90d): 19 | Contributors (cumulative): 99 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1133,13 +1133,6 @@ class TestRequests(object):\n         next(r.iter_lines())\n         assert len(list(r.iter_lines())) == 3\n \n-    def test_chunked_upload(self, httpbin):\n-        \"\"\"Can safely send generators.\"\"\"\n-        data = (c for c in 'abc')\n-        r = requests.post(httpbin('post'), data=data, stream=True)\n-        assert r.status_code == 200\n-        assert r.request.headers['Transfer-Encoding'] == 'chunked'\n-\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a25a641fb479b17e582effa4142f21701a958805", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 958 | Contributors (this commit): 20 | Commits (past 90d): 1 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -143,7 +143,8 @@ def remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n     \"\"\"\n     clearables = []\n     for cookie in cookiejar:\n-        if cookie.name == name:\n+        if cookie.name != name:\n+            continue\n         if domain is None or domain == cookie.domain:\n             if path is None or path == cookie.path:\n                 clearables.append((cookie.domain, cookie.path, cookie.name))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#89178ebcdca2d83f7fa43c766f44f4a60248400f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 964 | Contributors (this commit): 20 | Commits (past 90d): 2 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -145,8 +145,10 @@ def remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n     for cookie in cookiejar:\n         if cookie.name != name:\n             continue\n-        if domain is None or domain == cookie.domain:\n-            if path is None or path == cookie.path:\n+        if domain and domain != cookie.domain:\n+            continue\n+        if path and path != cookie.path:\n+            continue\n         clearables.append((cookie.domain, cookie.path, cookie.name))\n \n     for domain, path, name in clearables:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d849d6e90753cf76425d75fd3cb35631f1a5c5b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 968 | Contributors (this commit): 20 | Commits (past 90d): 3 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -145,9 +145,9 @@ def remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n     for cookie in cookiejar:\n         if cookie.name != name:\n             continue\n-        if domain and domain != cookie.domain:\n+        if domain is not None and domain != cookie.domain:\n             continue\n-        if path and path != cookie.path:\n+        if path is not None and path != cookie.path:\n             continue\n         clearables.append((cookie.domain, cookie.path, cookie.name))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0a1aaca024f34cc3b2d411f56905f9cfb7a3003b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 5407 | Contributors (this commit): 99 | Commits (past 90d): 20 | Contributors (cumulative): 99 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1351,6 +1351,13 @@ class UtilsTestCase(unittest.TestCase):\n             assert super_len(\n                 cStringIO.StringIO('but some how, some way...')) == 25\n \n+    def test_super_len_correctly_calculates_len_of_partially_read_file(self):\n+        \"\"\"Ensure that we handle partially consumed file like objects.\"\"\"\n+        from requests.utils import super_len\n+        s = StringIO.StringIO()\n+        s.write('foobarbogus')\n+        assert super_len(s) == 0\n+\n     def test_get_environ_proxies_ip_ranges(self):\n         \"\"\"Ensures that IP addresses are correctly matches with ranges\n         in no_proxy variable.\"\"\"\n@@ -1721,6 +1728,7 @@ def test_urllib3_pool_connection_closed(httpbin):\n     except ConnectionError as e:\n         assert u\"Pool is closed.\" in str(e)\n \n+\n def test_vendor_aliases():\n     from requests.packages import urllib3\n     from requests.packages import chardet\n@@ -1728,5 +1736,6 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5397ef71b37ebe1fdf8af95a9a3b561baffe9dd8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 2333 | Contributors (this commit): 57 | Commits (past 90d): 7 | Contributors (cumulative): 57 | DMM Complexity: 0.0\n\nDIFF:\n@@ -48,19 +48,26 @@ def dict_to_sequence(d):\n \n \n def super_len(o):\n+    total_length = 0\n+    current_position = 0\n+\n     if hasattr(o, '__len__'):\n-        return len(o)\n+        total_length = len(o)\n \n-    if hasattr(o, 'len'):\n-        return o.len\n+    elif hasattr(o, 'len'):\n+        total_length = o.len\n \n-    if hasattr(o, 'fileno'):\n+    elif hasattr(o, 'getvalue'):\n+        # e.g. BytesIO, cStringIO.StringIO\n+        total_length = len(o.getvalue())\n+\n+    elif hasattr(o, 'fileno'):\n         try:\n             fileno = o.fileno()\n         except io.UnsupportedOperation:\n             pass\n         else:\n-            filesize = os.fstat(fileno).st_size\n+            total_length = os.fstat(fileno).st_size\n \n             # Having used fstat to determine the file length, we need to\n             # confirm that this file was opened up in binary mode.\n@@ -75,11 +82,10 @@ def super_len(o):\n                     FileModeWarning\n                 )\n \n-            return filesize\n+    if hasattr(o, 'tell'):\n+        current_position = o.tell()\n \n-    if hasattr(o, 'getvalue'):\n-        # e.g. BytesIO, cStringIO.StringIO\n-        return len(o.getvalue())\n+    return max(0, total_length - current_position)\n \n \n def get_netrc_auth(url, raise_errors=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6597b5383485c8ffd06f5593c338d4793b7b8e82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 449 | Contributors (this commit): 18 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -69,6 +69,6 @@ setup(\n         'Programming Language :: Python :: 3.5',\n     ),\n     extras_require={\n-        'security': ['pyOpenSSL', 'ndg-httpsclient', 'pyasn1'],\n+        'security': ['pyOpenSSL>=0.13', 'ndg-httpsclient', 'pyasn1'],\n     },\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f6b2fd1d5ca6b281a841e8a31e32eb6c34c429b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 9411 | Contributors (this commit): 153 | Commits (past 90d): 9 | Contributors (cumulative): 153 | DMM Complexity: 0.0\n\nDIFF:\n@@ -446,6 +446,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 if data:\n                     body = self._encode_params(data)\n                     if isinstance(data, basestring) or hasattr(data, 'read'):\n+                        if hasattr(data, 'fileno') and length == 0:\n+                            self.headers['Transfer-Encoding'] = 'chunked'\n                         content_type = None\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c82dbab6fc3ad4b66babb1b01d21a26db602579", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 9415 | Contributors (this commit): 153 | Commits (past 90d): 10 | Contributors (cumulative): 153 | DMM Complexity: 1.0\n\nDIFF:\n@@ -434,7 +434,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             if files:\n                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n \n-            if length is not None:\n+            if length:\n                 self.headers['Content-Length'] = builtin_str(length)\n             else:\n                 self.headers['Transfer-Encoding'] = 'chunked'\n@@ -446,8 +446,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 if data:\n                     body = self._encode_params(data)\n                     if isinstance(data, basestring) or hasattr(data, 'read'):\n-                        if hasattr(data, 'fileno') and length == 0:\n-                            self.headers['Transfer-Encoding'] = 'chunked'\n                         content_type = None\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#99825de025fe47372ce8fc09f1461a7f0576f4f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 57 | Churn Cumulative: 5464 | Contributors (this commit): 100 | Commits (past 90d): 22 | Contributors (cumulative): 102 | DMM Complexity: 1.0\n\nDIFF:\n\n@@ -0,0 +1,38 @@\n+#!/usr/bin/python\n+\n+import threading, socket\n+\n+\n+\n+\"\"\"\n+Dummy server using for unit testing\n+\"\"\"\n+\n+class Server(threading.Thread):\n+    def __init__(self, handler, host='localhost', port=8021):\n+        threading.Thread.__init__(self)\n+        self.handler = handler\n+        self.host = host\n+        self.port = port\n+        self.ready_event = threading.Event()\n+        self.stop_event = threading.Event()\n+\n+    def run(self):\n+        sock = socket.socket()\n+        sock.bind((self.host, self.port))\n+        sock.listen(0)\n+        self.ready_event.set()\n+        self.handler(sock)\n+        self.stop_event.set()\n+        sock.close()\n+\n+    def __enter__(self):\n+       self.start()\n+       self.ready_event.wait()\n+       return self.host, self.port\n+      \n+    def __exit__(self, exc_type, exc_value, traceback):\n+        if exc_type is None:\n+            self.stop_event.wait()\n+        return False # allow exceptions to propagate \n+    \n\n@@ -29,6 +29,8 @@ from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n+from dummyserver.server import Server\n+import socket\n \n try:\n     import StringIO\n@@ -1736,6 +1738,23 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n+class TestDummyServer(unittest.TestCase):\n+    def test_basic(self):\n+        question = \"sucess?\"\n+        answer = \"yeah, success\"\n+        def handler(server_sock):\n+            sock, _ = server_sock.accept()\n+            text = sock.recv(1000)\n+            assert text == question \n+            sock.send(answer)\n+        \n+        with Server(handler) as (host, port):\n+            sock = socket.socket()\n+            sock.connect((host, port))\n+            sock.send(question)\n+            text = sock.recv(1000)\n+            assert text == answer\n+            sock.close()\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#68db4132e36d23dc371219dd99ac51b1c1b1f852", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 989 | Contributors (this commit): 32 | Commits (past 90d): 10 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -108,7 +108,7 @@ class HTTPAdapter(BaseAdapter):\n \n     def __setstate__(self, state):\n         # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n-        # because self.poolmanager uses a lambda function, which isn't pickleable.\n+        # self.poolmanager uses a lambda function, which isn't pickleable.\n         self.proxy_manager = {}\n         self.config = {}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9a2cc99b068b2aaa572f52b4516852b239577c34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 43 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -4,11 +4,10 @@ import threading, socket\n \n \n \n-\"\"\"\n-Dummy server using for unit testing\n-\"\"\"\n \n class Server(threading.Thread):\n+    \"\"\" Dummy server using for unit testing \"\"\"\n+\n     def __init__(self, handler, host='localhost', port=8021):\n         threading.Thread.__init__(self)\n         self.handler = handler\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b806ce15ba5d726f94f58aa247fe40b6e2972fb7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5430 | Contributors (this commit): 100 | Commits (past 90d): 21 | Contributors (cumulative): 100 | DMM Complexity: None\n\nDIFF:\n@@ -1740,8 +1740,8 @@ def test_vendor_aliases():\n \n class TestDummyServer(unittest.TestCase):\n     def test_basic(self):\n-        question = \"sucess?\"\n-        answer = \"yeah, success\"\n+        question = b\"sucess?\"\n+        answer = b\"yeah, success\"\n         def handler(server_sock):\n             sock, _ = server_sock.accept()\n             text = sock.recv(1000)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47e96c4e57964dd2db4806b2c24e02a89f3ae8bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 9 | Churn Cumulative: 5439 | Contributors (this commit): 100 | Commits (past 90d): 24 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n-from dummyserver.server import Server\n+from testserver.server import Server\n import socket\n \n try:\n@@ -1738,7 +1738,7 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n-class TestDummyServer(unittest.TestCase):\n+class TestTestServer(unittest.TestCase):\n     def test_basic(self):\n         question = b\"sucess?\"\n         answer = b\"yeah, success\"\n\n\n@@ -2,11 +2,8 @@\n \n import threading, socket\n \n-\n-\n-\n class Server(threading.Thread):\n-    \"\"\" Dummy server using for unit testing \"\"\"\n+    \"\"\" Basic socket server used for unit testing \"\"\"\n \n     def __init__(self, handler, host='localhost', port=8021):\n         threading.Thread.__init__(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ab0f063d85d01a707516c84881c0a698edc526cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 12 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,9 +3,9 @@\n import threading, socket\n \n class Server(threading.Thread):\n-    \"\"\" Basic socket server used for unit testing \"\"\"\n+    \"\"\" Dummy server using for unit testing \"\"\"\n \n-    def __init__(self, handler, host='localhost', port=8021):\n+    def __init__(self, handler, host='localhost', port=0):\n         threading.Thread.__init__(self)\n         self.handler = handler\n         self.host = host\n@@ -16,6 +16,9 @@ class Server(threading.Thread):\n     def run(self):\n         sock = socket.socket()\n         sock.bind((self.host, self.port))\n+        \n+        # update port in case self.port = 0\n+        self.port = sock.getsockname()[1]\n         sock.listen(0)\n         self.ready_event.set()\n         self.handler(sock)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ad3f079821769062ad6b8e91c927b1b345895d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 29 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,17 +14,24 @@ class Server(threading.Thread):\n         self.stop_event = threading.Event()\n \n     def run(self):\n-        sock = socket.socket()\n-        sock.bind((self.host, self.port))\n-        \n-        # update port in case self.port = 0\n+        try:\n+            sock = self._create_socket_and_bind()\n+            # in case self.port = 0\n             self.port = sock.getsockname()[1]\n-        sock.listen(0)\n             self.ready_event.set()\n             self.handler(sock)\n+            \n+        finally:\n+            self.ready_event.set() # just in case of exception\n             self.stop_event.set()\n             sock.close()\n \n+    def _create_socket_and_bind(self):\n+        sock = socket.socket()\n+        sock.bind((self.host, self.port))\n+        sock.listen(0)\n+        return sock\n+\n     def __enter__(self):\n        self.start()\n        self.ready_event.wait()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#11ad502b80a10d3c4fe5631509f893a7bd20c2e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 20 | Churn Cumulative: 5483 | Contributors (this commit): 100 | Commits (past 90d): 26 | Contributors (cumulative): 101 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1756,5 +1756,12 @@ class TestTestServer(unittest.TestCase):\n             assert text == answer\n             sock.close()\n \n+    def test_basic_response(self):\n+        with Server.basic_response_server() as (host, port):\n+            r = requests.get('http://{}:{}'.format(host, port))\n+            assert r.status_code == 200\n+            assert r.text == ''\n+            assert r.headers['Content-Length'] == '0'\n+\n if __name__ == '__main__':\n     unittest.main()\n\n@@ -13,6 +13,19 @@ class Server(threading.Thread):\n         self.ready_event = threading.Event()\n         self.stop_event = threading.Event()\n \n+    @classmethod\n+    def basic_response_server(cls, host='localhost', port=0):\n+        def basic_response_handler(server_sock):\n+            sock, _ = server_sock.accept()\n+            sock.send(\n+                b'HTTP/1.1 200 OK\\r\\n'\n+                b'Content-Length: 0\\r\\n'\n+                b'\\r\\n'\n+            )\n+\n+        server = Server(basic_response_handler, host=host, port=port)\n+        return server\n+\n     def run(self):\n         try:\n             sock = self._create_socket_and_bind()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7917c305a4f05a86a3ae058036e2205dc0f47e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 44 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -36,8 +36,8 @@ class Server(threading.Thread):\n             \n         finally:\n             self.ready_event.set() # just in case of exception\n-            self.stop_event.set()\n             sock.close()\n+            self.stop_event.set()\n \n     def _create_socket_and_bind(self):\n         sock = socket.socket()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4b4661f461a132c6815daa3719a3200553464a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 5451 | Contributors (this commit): 100 | Commits (past 90d): 23 | Contributors (cumulative): 100 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1756,6 +1756,16 @@ class TestTestServer(unittest.TestCase):\n             assert text == answer\n             sock.close()\n \n+    def test_server_closes(self):\n+        with Server.basic_response_server() as (host, port):\n+            sock = socket.socket()\n+            sock.connect((host, port))\n+\n+        with pytest.raises(socket.error):\n+            new_sock = socket.socket()\n+            new_sock.connect((host, port))\n+        sock.close()\n+            \n     def test_basic_response(self):\n         with Server.basic_response_server() as (host, port):\n             r = requests.get('http://{}:{}'.format(host, port))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6adabacd81d8e453c3915f8a98692c9891df022b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5453 | Contributors (this commit): 100 | Commits (past 90d): 24 | Contributors (cumulative): 100 | DMM Complexity: None\n\nDIFF:\n@@ -1760,11 +1760,11 @@ class TestTestServer(unittest.TestCase):\n         with Server.basic_response_server() as (host, port):\n             sock = socket.socket()\n             sock.connect((host, port))\n+            sock.close()\n \n         with pytest.raises(socket.error):\n             new_sock = socket.socket()\n             new_sock.connect((host, port))\n-        sock.close()\n             \n     def test_basic_response(self):\n         with Server.basic_response_server() as (host, port):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#23d9b077d8b2db9d13c1edd97ffb65b0582631d0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 12 | Churn Cumulative: 18910 | Contributors (this commit): 226 | Commits (past 90d): 44 | Contributors (cumulative): 344 | DMM Complexity: None\n\nDIFF:\n@@ -368,7 +368,7 @@ def _copy_cookie_jar(jar):\n         return None\n \n     if hasattr(jar, 'copy'):\n-        # We're dealing with an instane of RequestsCookieJar\n+        # We're dealing with an instance of RequestsCookieJar\n         return jar.copy()\n     # We're dealing with a generic CookieJar instance\n     new_jar = copy.copy(jar)\n\n@@ -324,7 +324,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_url(self, url, params):\n         \"\"\"Prepares the given HTTP URL.\"\"\"\n         #: Accept objects that have string representations.\n-        #: We're unable to blindy call unicode/str functions\n+        #: We're unable to blindly call unicode/str functions\n         #: as this will include the bytestring indicator (b'')\n         #: on python 3.x.\n         #: https://github.com/kennethreitz/requests/pull/2238\n@@ -631,7 +631,7 @@ class Response(object):\n \n     @property\n     def is_permanent_redirect(self):\n-        \"\"\"True if this Response one of the permanant versions of redirect\"\"\"\n+        \"\"\"True if this Response one of the permanent versions of redirect\"\"\"\n         return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n \n     @property\n\n@@ -325,7 +325,7 @@ class Session(SessionRedirectMixin):\n         #: limit, a :class:`TooManyRedirects` exception is raised.\n         self.max_redirects = DEFAULT_REDIRECT_LIMIT\n \n-        #: Trust environement settings for proxy configuration, default\n+        #: Trust environment settings for proxy configuration, default\n         #: authentication and similar.\n         self.trust_env = True\n \n@@ -634,7 +634,7 @@ class Session(SessionRedirectMixin):\n                 'cert': cert}\n \n     def get_adapter(self, url):\n-        \"\"\"Returns the appropriate connnection adapter for the given URL.\"\"\"\n+        \"\"\"Returns the appropriate connection adapter for the given URL.\"\"\"\n         for (prefix, adapter) in self.adapters.items():\n \n             if url.lower().startswith(prefix):\n\n@@ -612,7 +612,7 @@ class TestRequests(object):\n         assert prep.hooks['response'] != []\n         assert prep.hooks['response'] == [hook]\n \n-    def test_session_hooks_are_overriden_by_request_hooks(self, httpbin):\n+    def test_session_hooks_are_overridden_by_request_hooks(self, httpbin):\n         hook1 = lambda x, *args, **kwargs: x\n         hook2 = lambda x, *args, **kwargs: x\n         assert hook1 is not hook2\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6551c290fdbf0b29e4534abef1b04f7485a88aad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 9 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 32 | Churn Cumulative: 76 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,39 +1,47 @@\n #!/usr/bin/python\n \n-import threading, socket\n+import threading \n+import socket\n+\n+def consume_socket(sock, chunks=65536):\n+    while not sock.recv(chunks).endswith(b'\\r\\n\\r\\n'):\n+            pass\n+\n \n class Server(threading.Thread):\n     \"\"\" Dummy server using for unit testing \"\"\"\n \n-    def __init__(self, handler, host='localhost', port=0):\n+    def __init__(self, handler, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):\n         threading.Thread.__init__(self)\n         self.handler = handler\n         self.host = host\n         self.port = port\n+        self.requests_to_handle = requests_to_handle\n+ \n+        self.wait_to_close_event = wait_to_close_event\n         self.ready_event = threading.Event()\n         self.stop_event = threading.Event()\n \n     @classmethod\n-    def basic_response_server(cls, host='localhost', port=0):\n-        def basic_response_handler(server_sock):\n-            sock, _ = server_sock.accept()\n+    def basic_response_server(cls, **kwargs):\n+        def basic_response_handler(sock):\n             sock.send(\n                 b'HTTP/1.1 200 OK\\r\\n'\n                 b'Content-Length: 0\\r\\n'\n                 b'\\r\\n'\n             )\n \n-        server = Server(basic_response_handler, host=host, port=port)\n+        server = Server(basic_response_handler, **kwargs)\n         return server\n \n+\n     def run(self):\n         try:\n             sock = self._create_socket_and_bind()\n             # in case self.port = 0\n             self.port = sock.getsockname()[1]\n             self.ready_event.set()\n-            self.handler(sock)\n-            \n+            self._handle_requests_and_close_server(sock)\n         finally:\n             self.ready_event.set() # just in case of exception\n             sock.close()\n@@ -45,6 +53,14 @@ class Server(threading.Thread):\n         sock.listen(0)\n         return sock\n \n+    def _handle_requests_and_close_server(self, server_sock):\n+        for _ in range(self.requests_to_handle):\n+            sock = server_sock.accept()[0]\n+            self.handler(sock)\n+        \n+        if self.wait_to_close_event:\n+            self.wait_to_close_event.wait()\n+        \n     def __enter__(self):\n        self.start()\n        self.ready_event.wait()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aac32ac56e60ac220a15c33d207306806c193d1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 34 | Churn Cumulative: 5489 | Contributors (this commit): 101 | Commits (past 90d): 26 | Contributors (cumulative): 101 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,6 +31,8 @@ from requests.models import urlencode\n from requests.hooks import default_hooks\n from testserver.server import Server\n import socket\n+import threading\n+import time\n \n try:\n     import StringIO\n@@ -1179,6 +1181,24 @@ class TestContentEncodingDetection(unittest.TestCase):\n         encodings = requests.utils.get_encodings_from_content(content)\n         assert encodings == ['HTML5', 'HTML4', 'XML']\n \n+    def test_chunked_upload(self):\n+        \"\"\" can safely send generators \"\"\"\n+        block_server = threading.Event()\n+        server = Server.basic_response_server(wait_to_close_event=block_server)\n+        data = (i for i in [b'a', b'b', b'c']) \n+\n+        with server as (host, port):\n+            url = 'http://{}:{}/'.format(host, port)\n+            r = requests.post(url, data=data, stream=True)\n+            block_server.set() # release server block\n+\n+            assert r.status_code == 200\n+            assert r.request.headers['Transfer-Encoding'] == 'chunked'\n+\n+            \n+        \n+\n+\n \n class TestCaseInsensitiveDict(unittest.TestCase):\n \n@@ -1742,8 +1762,7 @@ class TestTestServer(unittest.TestCase):\n     def test_basic(self):\n         question = b\"sucess?\"\n         answer = b\"yeah, success\"\n-        def handler(server_sock):\n-            sock, _ = server_sock.accept()\n+        def handler(sock):\n             text = sock.recv(1000)\n             assert text == question \n             sock.send(answer)\n@@ -1773,5 +1792,16 @@ class TestTestServer(unittest.TestCase):\n             assert r.text == ''\n             assert r.headers['Content-Length'] == '0'\n \n+    def test_basic_waiting_server(self):\n+        block_server = threading.Event()\n+\n+        with Server.basic_response_server(wait_to_close_event=block_server) as (host, port):\n+            sock = socket.socket()\n+            sock.connect((host, port))\n+            sock.send(b'send something')\n+            time.sleep(2.5)\n+            sock.send(b'still alive')\n+            block_server.set() # release server block\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ecf789a6f2c50a69854e2663083aeea1a0ff683", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 81 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -69,5 +69,10 @@ class Server(threading.Thread):\n     def __exit__(self, exc_type, exc_value, traceback):\n         if exc_type is None:\n             self.stop_event.wait()\n+        else:\n+            if self.wait_to_close_event:\n+                # avoid server from blocking if an exception is found\n+                # in the main thread\n+                self.wait_to_close_event.set() \n         return False # allow exceptions to propagate \n     \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e903de0680856ca1dc2c0e80eae97457e3ea29a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 299 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,8 @@ sys.path.insert(0, os.path.abspath('..'))\n import requests\n from requests import __version__\n \n+import alabaster\n+\n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n@@ -30,6 +32,7 @@ from requests import __version__\n extensions = [\n     'sphinx.ext.autodoc',\n     'sphinx.ext.intersphinx',\n+    'alabaster'\n ]\n \n # Add any paths that contain templates here, relative to this directory.\n@@ -101,7 +104,9 @@ html_theme = 'default'\n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+html_theme_options = {\n+  'show_powered_by': False\n+}\n \n # Add any paths that contain custom themes here, relative to this directory.\n #html_theme_path = []\n@@ -242,7 +247,7 @@ texinfo_documents = [\n texinfo_appendices = []\n \n sys.path.append(os.path.abspath('_themes'))\n-html_theme_path = ['_themes']\n-html_theme = 'kr'\n+html_theme_path =[alabaster.get_path()]\n+html_theme = 'alabaster'\n \n intersphinx_mapping = {'urllib3': ('http://urllib3.readthedocs.org/en/latest', None)}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5c19d3e07b68145c7af9ad70dcaa2e48dd06b0b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 1429 | Contributors (this commit): 36 | Commits (past 90d): 1 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -136,7 +136,7 @@ class HTTPDigestAuth(AuthBase):\n         if _algorithm == 'MD5-SESS':\n             HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))\n \n-        if qop is None:\n+        if not qop:\n             respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\n         elif qop == 'auth' or 'auth' in qop.split(','):\n             noncebit = \"%s:%s:%s:%s:%s\" % (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b2a489e13a2dc3c9d1ef919ad35e14cc5189f10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 21 | Churn Cumulative: 102 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,17 +23,22 @@ class Server(threading.Thread):\n         self.stop_event = threading.Event()\n \n     @classmethod\n-    def basic_response_server(cls, **kwargs):\n-        def basic_response_handler(sock):\n-            sock.send(\n-                b'HTTP/1.1 200 OK\\r\\n'\n-                b'Content-Length: 0\\r\\n'\n-                b'\\r\\n'\n-            )\n+    def text_response_server(cls, text, **kwargs):\n+        def text_response_handler(sock):\n+            sock.send(text.encode())\n+\n+        server = Server(text_response_handler, **kwargs)\n \n-        server = Server(basic_response_handler, **kwargs)\n         return server\n \n+    @classmethod\n+    def basic_response_server(cls, **kwargs):\n+        server = cls.text_response_server(\n+            \"HTTP/1.1 200 OK\\r\\n\" +\n+            \"Content-Length: 0\\r\\n\\r\\n\", **kwargs\n+        )\n+\n+        return server\n \n     def run(self):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
