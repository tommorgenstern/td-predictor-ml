{"custom_id": "flask#c9002569c9abfa715e491aa636555e51ddf85d50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 13 | Methods Changed: 19 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 1762 | Contributors (this commit): 7 | Commits (past 90d): 47 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -15,11 +15,10 @@ import re\n import sys\n import flask\n import unittest\n-import tempfile\n from logging import StreamHandler\n from contextlib import contextmanager\n from datetime import datetime\n-from werkzeug import parse_date, parse_options_header, http_date\n+from werkzeug import parse_date, parse_options_header\n from werkzeug.exceptions import NotFound\n from jinja2 import TemplateNotFound\n from cStringIO import StringIO\n@@ -352,7 +351,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             called.append(4)\n             return response\n         @app.after_request\n-        def after1(response):\n+        def after2(response):\n             called.append(3)\n             return response\n         @app.route('/')\n@@ -638,13 +637,13 @@ class ModuleTestCase(unittest.TestCase):\n         app = flask.Flask(__name__)\n         admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n         @admin.route('/')\n-        def index():\n+        def admin_index():\n             return 'admin index'\n         @admin.route('/login')\n-        def login():\n+        def admin_login():\n             return 'admin login'\n         @admin.route('/logout')\n-        def logout():\n+        def admin_logout():\n             return 'admin logout'\n         @app.route('/')\n         def index():\n@@ -680,7 +679,7 @@ class ModuleTestCase(unittest.TestCase):\n             catched.append('after-admin')\n             return response\n         @admin.route('/')\n-        def index():\n+        def admin_index():\n             return 'the admin'\n         @app.before_request\n         def before_request():\n@@ -719,7 +718,7 @@ class ModuleTestCase(unittest.TestCase):\n         def index():\n             return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n         @admin.route('/')\n-        def index():\n+        def admin_index():\n             return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n         app.register_module(admin)\n         c = app.test_client()\n@@ -794,13 +793,13 @@ class ModuleTestCase(unittest.TestCase):\n             f = app.view_functions['admin.static']\n \n             try:\n-                rv = f('/etc/passwd')\n+                f('/etc/passwd')\n             except NotFound:\n                 pass\n             else:\n                 assert 0, 'expected exception'\n             try:\n-                rv = f('../__init__.py')\n+                f('../__init__.py')\n             except NotFound:\n                 pass\n             else:\n@@ -914,7 +913,7 @@ class LoggingTestCase(unittest.TestCase):\n         c = app.test_client()\n \n         with catch_stderr() as err:\n-            rv = c.get('/')\n+            c.get('/')\n             out = err.getvalue()\n             assert 'WARNING in flask_tests [' in out\n             assert 'flask_tests.py' in out\n@@ -1098,7 +1097,7 @@ class TestSignals(unittest.TestCase):\n \n         flask.template_rendered.connect(record, app)\n         try:\n-            rv = app.test_client().get('/')\n+            app.test_client().get('/')\n             assert len(recorded) == 1\n             template, context = recorded[0]\n             assert template.name == 'simple_template.html'\n\n@@ -18,7 +18,6 @@ import urllib2\n import tempfile\n import subprocess\n import argparse\n-from cStringIO import StringIO\n \n from flask import json\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#faa1c71e455a99e9b098aa9bb4667c07a1bab6aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 21 | Churn Cumulative: 1397 | Contributors (this commit): 6 | Commits (past 90d): 42 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,11 +10,18 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from functools import partial\n from werkzeug import LocalStack, LocalProxy\n \n+def _lookup_object(name):\n+    top = _request_ctx_stack.top\n+    if top is None:\n+        raise RuntimeError('working outside of request context')\n+    return getattr(top, name)\n+\n # context locals\n _request_ctx_stack = LocalStack()\n-current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n-request = LocalProxy(lambda: _request_ctx_stack.top.request)\n-session = LocalProxy(lambda: _request_ctx_stack.top.session)\n-g = LocalProxy(lambda: _request_ctx_stack.top.g)\n+current_app = LocalProxy(partial(_lookup_object, 'app'))\n+request = LocalProxy(partial(_lookup_object, 'request'))\n+session = LocalProxy(partial(_lookup_object, 'session'))\n+g = LocalProxy(partial(_lookup_object, 'g'))\n\n@@ -72,7 +72,7 @@ class ContextTestCase(unittest.TestCase):\n         ctx.pop()\n         try:\n             index()\n-        except AttributeError:\n+        except RuntimeError:\n             pass\n         else:\n             assert 0, 'expected runtime error'\n@@ -469,6 +469,10 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         else:\n             assert \"Expected ValueError\"\n \n+    def test_request_locals(self):\n+        self.assertEqual(repr(flask.g), '<LocalProxy unbound>')\n+        self.assertFalse(flask.g)\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a3a843999b8f98a96fb44f573515d44648d72bab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 1554 | Contributors (this commit): 7 | Commits (past 90d): 52 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,6 +8,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import posixpath\n from jinja2 import BaseLoader, TemplateNotFound\n \n from .globals import _request_ctx_stack\n@@ -36,6 +37,9 @@ class _DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n+        template = posixpath.normpath(template)\n+        if template.startswith('../'):\n+            raise TemplateNotFound(template)\n         loader = None\n         try:\n             module, name = template.split('/', 1)\n\n@@ -789,6 +789,8 @@ class ModuleTestCase(unittest.TestCase):\n         assert rv.data == 'Hello from the Frontend'\n         rv = c.get('/admin/')\n         assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/index2')\n+        assert rv.data == 'Hello from the Admin'\n         rv = c.get('/admin/static/test.txt')\n         assert rv.data.strip() == 'Admin File'\n         rv = c.get('/admin/static/css/test.css')\n\n@@ -7,3 +7,8 @@ admin = Module(__name__, url_prefix='/admin')\n @admin.route('/')\n def index():\n     return render_template('admin/index.html')\n+\n+\n+@admin.route('/index2')\n+def index2():\n+    return render_template('./admin/index.html')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9a21c34bb63c2343b7c8c6bcfc51fc72030909ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 1415 | Contributors (this commit): 6 | Commits (past 90d): 41 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -248,7 +248,13 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             flask.session['test'] = 42\n             flask.session.permanent = permanent\n             return ''\n-        rv = app.test_client().get('/')\n+\n+        @app.route('/test')\n+        def test():\n+            return unicode(flask.session.permanent)\n+\n+        client = app.test_client()\n+        rv = client.get('/')\n         assert 'set-cookie' in rv.headers\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n@@ -257,6 +263,9 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert expires.month == expected.month\n         assert expires.day == expected.day\n \n+        rv = client.get('/test')\n+        assert rv.data == 'True'\n+\n         permanent = False\n         rv = app.test_client().get('/')\n         assert 'set-cookie' in rv.headers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6fca662c841797a2006999c699a6738b20af1d4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 272 | Contributors (this commit): 5 | Commits (past 90d): 16 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,7 +31,8 @@ def _register_module(module, static_path):\n             path = state.url_prefix + path\n         state.app.add_url_rule(path + '/<path:filename>',\n                                endpoint='%s.static' % module.name,\n-                               view_func=module.send_static_file)\n+                               view_func=module.send_static_file,\n+                               subdomain=module.subdomain)\n     return _register\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a73bbc436041875f81aeffd5b8f13c6da8fcf19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 1428 | Contributors (this commit): 6 | Commits (past 90d): 37 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1102,6 +1102,15 @@ class SubdomainTestCase(unittest.TestCase):\n         rv = c.get('/', 'http://test.localhost/')\n         assert rv.data == 'test index'\n \n+    def test_module_static_path_subdomain(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'example.com'\n+        from subdomaintestmodule import mod\n+        app.register_module(mod)\n+        c = app.test_client()\n+        rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n+        assert rv.data.strip() == 'Hello Subdomain'\n+\n     def test_subdomain_matching(self):\n         app = flask.Flask(__name__)\n         app.config['SERVER_NAME'] = 'localhost'\n\n@@ -0,0 +1,4 @@\n+from flask import Module\n+\n+\n+mod = Module(__name__, 'foo', subdomain='foo')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb67242e1cb08566a1cd2489933479368a48b4a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1345 | Contributors (this commit): 4 | Commits (past 90d): 38 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -238,7 +238,7 @@ class Flask(_PackageBoundObject):\n         #: this function is active for, `None` for all requests.  This can for\n         #: example be used to open database connections or getting hold of the\n         #: currently logged in user.  To register a function here, use the\n-        #: :meth:`before_request` decorator.\n+        #: :meth:`after_request` decorator.\n         self.after_request_funcs = {}\n \n         #: A dictionary with list of functions that are called without argument\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1e4e578d73b78e2e11696b2e2d0763fd00367521", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 1361 | Contributors (this commit): 4 | Commits (past 90d): 39 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -256,6 +256,22 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.5\n         self.modules = {}\n \n+        #: a place where extensions can store application specific state.  For\n+        #: example this is where an extension could store database engines and\n+        #: similar things.  For backwards compatibility extensions should register\n+        #: themselves like this::\n+        #:\n+        #:      if not hasattr(app, 'extensions'):\n+        #:          app.extensions = {}\n+        #:      app.extensions['extensionname'] = SomeObject()\n+        #:\n+        #: The key must match the name of the `flaskext` module.  For example in\n+        #: case of a \"Flask-Foo\" extension in `flaskext.foo`, the key would be\n+        #: ``'foo'``.\n+        #:\n+        #: .. versionadded:: 0.7\n+        self.extensions = {}\n+\n         #: The :class:`~werkzeug.routing.Map` for this instance.  You can use\n         #: this to change the routing converters after the class was created\n         #: but before any routes are connected.  Example::\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d2a308c202f401446fa1f092fe0af904ac0230d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 407 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -201,6 +201,7 @@ envlist=%(env)s\n [testenv]\n deps=\n   %(deps)s\n+  distribute\n   py\n commands=bash flaskext-runtest.sh {envlogdir}/test.log\n downloadcache=%(cache)s\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#405c2992f8de441789a1ed82045ab77cefbbedfc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 20 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,6 +11,7 @@\n \n from __future__ import with_statement\n \n+import imp\n import os\n import sys\n \n@@ -114,7 +115,7 @@ class Config(dict):\n                          root path.\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n-        d = type(sys)('config')\n+        d = imp.new_module('config')\n         d.__file__ = filename\n         try:\n             execfile(filename, d.__dict__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#88883aa6db3b27f132000a4cf2a99c1fbbe941c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 26 | Churn Cumulative: 2811 | Contributors (this commit): 8 | Commits (past 90d): 16 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -863,6 +863,15 @@ class Flask(_PackageBoundObject):\n         function accepts the same arguments).\n         \"\"\"\n         from werkzeug import create_environ\n+        environ_overrides = kwargs.setdefault('environ_overrides', {})\n+        if self.config.get('SERVER_NAME'):\n+            server_name = self.config.get('SERVER_NAME')\n+            if ':' not in server_name:\n+                server_name += ':80'\n+            http_host, http_port = server_name.split(':')\n+            environ_overrides.setdefault('SERVER_NAME', server_name)\n+            environ_overrides.setdefault('HTTP_HOST', server_name)\n+            environ_overrides.setdefault('SERVER_PORT', http_port)\n         return self.request_context(create_environ(*args, **kwargs))\n \n     def wsgi_app(self, environ, start_response):\n\n@@ -501,6 +501,23 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         self.assertEqual(repr(flask.g), '<LocalProxy unbound>')\n         self.assertFalse(flask.g)\n \n+    def test_proper_test_request_context(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SERVER_NAME='localhost.localdomain:5000'\n+        )\n+        @app.route('/')\n+        def index():\n+            return None\n+\n+        with app.test_request_context('/'):\n+            assert flask.url_for('index', _external=True) == 'http://localhost.localdomain:5000/'\n+\n+        def testit():\n+            with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n+                pass\n+        self.assertRaises(ValueError, testit)\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a327452540bbcffe73207f8164504115b6c9e856", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 131 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 7 | Methods Changed: 8 | Complexity Δ (Sum/Max): 17/13 | Churn Δ: 137 | Churn Cumulative: 2993 | Contributors (this commit): 9 | Commits (past 90d): 19 | Contributors (cumulative): 16 | DMM Complexity: 0.17592592592592593\n\nDIFF:\n@@ -867,8 +867,10 @@ class Flask(_PackageBoundObject):\n         if self.config.get('SERVER_NAME'):\n             server_name = self.config.get('SERVER_NAME')\n             if ':' not in server_name:\n-                server_name += ':80'\n-            http_host, http_port = server_name.split(':')\n+                http_host, http_port = server_name, '80'\n+            else:\n+                http_host, http_port = server_name.split(':', 1)\n+\n             environ_overrides.setdefault('SERVER_NAME', server_name)\n             environ_overrides.setdefault('HTTP_HOST', server_name)\n             environ_overrides.setdefault('SERVER_PORT', http_port)\n\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from werkzeug import Client\n+from werkzeug import Client, EnvironBuilder\n from flask import _request_ctx_stack\n \n \n@@ -29,9 +29,31 @@ class FlaskClient(Client):\n             self.context_preserved = False\n         kwargs.setdefault('environ_overrides', {}) \\\n             ['flask._preserve_context'] = self.preserve_context\n+\n+        as_tuple = kwargs.pop('as_tuple', False)\n+        buffered = kwargs.pop('buffered', False)\n+        follow_redirects = kwargs.pop('follow_redirects', False)\n+\n+        builder = EnvironBuilder(*args, **kwargs)\n+\n+        if self.application.config.get('SERVER_NAME'):\n+            server_name = self.application.config.get('SERVER_NAME')\n+            if ':' not in server_name:\n+                http_host, http_port = server_name, None\n+            else:\n+                http_host, http_port = server_name.split(':', 1)\n+            if builder.base_url == 'http://localhost/':\n+                # Default Generated Base URL\n+                if http_port != None:\n+                    builder.host = http_host + ':' + http_port\n+                else:\n+                    builder.host = http_host\n         old = _request_ctx_stack.top\n         try:\n-            return Client.open(self, *args, **kwargs)\n+            return Client.open(self, builder,\n+                               as_tuple=as_tuple,\n+                               buffered=buffered,\n+                               follow_redirects=follow_redirects)\n         finally:\n             self.context_preserved = _request_ctx_stack.top is not old\n \n\n@@ -510,13 +510,114 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         def index():\n             return None\n \n+        @app.route('/', subdomain='foo')\n+        def sub():\n+            return None\n+\n         with app.test_request_context('/'):\n             assert flask.url_for('index', _external=True) == 'http://localhost.localdomain:5000/'\n \n-        def testit():\n+        with app.test_request_context('/'):\n+            assert flask.url_for('sub', _external=True) == 'http://foo.localhost.localdomain:5000/'\n+\n+        try:\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n-        self.assertRaises(ValueError, testit)\n+        except Exception, e:\n+            assert isinstance(e, ValueError)\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain:5000') does not match the \" + \\\n+                    \"server name from the WSGI environment ('localhost')\", str(e)\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost:80')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+\n+    def test_test_app_proper_environ(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SERVER_NAME='localhost.localdomain:5000'\n+        )\n+        @app.route('/')\n+        def index():\n+            return 'Foo'\n+\n+        @app.route('/', subdomain='foo')\n+        def subdomain():\n+            return 'Foo SubDomain'\n+\n+        try:\n+            rv = app.test_client().get('/')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain')\n+            rv = app.test_client().get('/', 'https://localhost.localdomain')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain:443')\n+            rv = app.test_client().get('/', 'https://localhost.localdomain')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain:443') does not match the \" + \\\n+                    \"server name from the WSGI environment ('localhost.localdomain')\", str(e)\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain')\n+            app.test_client().get('/', 'http://foo.localhost')\n+        except ValueError, e:\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain') does not match the \" + \\\n+                    \"server name from the WSGI environment ('foo.localhost')\", str(e)\n+\n+        try:\n+            rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n+            assert rv.data == 'Foo SubDomain'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n \n \n class JSONTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d4c44a7d8c1554dfafc240f6a1714bc58fdc05f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1378 | Contributors (this commit): 7 | Commits (past 90d): 8 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -276,7 +276,7 @@ class Flask(_PackageBoundObject):\n         #: this to change the routing converters after the class was created\n         #: but before any routes are connected.  Example::\n         #:\n-        #:    from werkzeug import BaseConverter\n+        #:    from werkzeug.routing import BaseConverter\n         #:\n         #:    class ListConverter(BaseConverter):\n         #:        def to_python(self, value):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#94a7312d5ac5e2f949c4e27ecf2a273cec3d8c0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 100 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -66,7 +66,7 @@ class FlaskrTestCase(unittest.TestCase):\n             text='<strong>HTML</strong> allowed here'\n         ), follow_redirects=True)\n         assert 'No entries here so far' not in rv.data\n-        assert '&lt;Hello&gt' in rv.data\n+        assert '&lt;Hello&gt;' in rv.data\n         assert '<strong>HTML</strong> allowed here' in rv.data\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#858806da69f9f46eb4abaf67bf78d864ea104760", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 642 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -287,7 +287,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                            relative path is specified.\n                            Alternatively a file object might be provided\n                            in which case `X-Sendfile` might not work and\n-                           fall back to the traditional method.\n+                           fall back to the traditional method.  Make sure\n+                           that the file pointer is positioned at the start\n+                           of data to send before calling :func:`send_file`.\n     :param mimetype: the mimetype of the file if provided, otherwise\n                      auto detection happens.\n     :param as_attachment: set to `True` if you want to send this file with\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8569dfee6136bfda4a5fa2297aed3d82700bb1a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 9/6 | Churn Δ: 44 | Churn Cumulative: 2968 | Contributors (this commit): 10 | Commits (past 90d): 9 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -189,6 +189,7 @@ class Flask(_PackageBoundObject):\n     default_config = ImmutableDict({\n         'DEBUG':                                False,\n         'TESTING':                              False,\n+        'PROPAGATE_EXCEPTIONS':                 None,\n         'SECRET_KEY':                           None,\n         'SESSION_COOKIE_NAME':                  'session',\n         'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n@@ -303,6 +304,18 @@ class Flask(_PackageBoundObject):\n         self.jinja_env = self.create_jinja_environment()\n         self.init_jinja_globals()\n \n+    @property\n+    def propagate_exceptions(self):\n+        \"\"\"Returns the value of the `PROPAGATE_EXCEPTIONS` configuration\n+        value in case it's set, otherwise a sensible default is returned.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        rv = self.config['PROPAGATE_EXCEPTIONS']\n+        if rv is not None:\n+            return rv\n+        return self.testing or self.debug\n+\n     @property\n     def logger(self):\n         \"\"\"A :class:`logging.Logger` object for this application.  The\n@@ -682,7 +695,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         got_request_exception.send(self, exception=e)\n         handler = self.error_handlers.get(500)\n-        if self.debug:\n+        if self.propagate_exceptions:\n             raise\n         self.logger.exception('Exception on %s [%s]' % (\n             request.path,\n\n@@ -15,6 +15,7 @@ import re\n import sys\n import flask\n import unittest\n+from threading import Thread\n from logging import StreamHandler\n from contextlib import contextmanager\n from datetime import datetime\n@@ -547,7 +548,6 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n             )\n \n-\n     def test_test_app_proper_environ(self):\n         app = flask.Flask(__name__)\n         app.config.update(\n@@ -619,6 +619,33 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n             )\n \n+    def test_exception_propagation(self):\n+        def apprunner(configkey):\n+            app = flask.Flask(__name__)\n+            @app.route('/')\n+            def index():\n+                1/0\n+            c = app.test_client()\n+            if config_key is not None:\n+                app.config[config_key] = True\n+                try:\n+                    resp = c.get('/')\n+                except Exception:\n+                    pass\n+                else:\n+                    self.fail('expected exception')\n+            else:\n+                assert c.get('/').status_code == 500\n+\n+        # we have to run this test in an isolated thread because if the\n+        # debug flag is set to true and an exception happens the context is\n+        # not torn down.  This causes other tests that run after this fail\n+        # when they expect no exception on the stack.\n+        for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n+            t = Thread(target=apprunner, args=(config_key,))\n+            t.start()\n+            t.join()\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#164067920ba7832e587a24725384789ab92bd55f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 16 | Churn Cumulative: 2041 | Contributors (this commit): 9 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n-import sqlite3\n+from sqlite3 import dbapi2 as sqlite3\n from contextlib import closing\n from flask import Flask, request, session, g, redirect, url_for, abort, \\\n      render_template, flash\n\n@@ -10,7 +10,7 @@\n \"\"\"\n from __future__ import with_statement\n import time\n-import sqlite3\n+from sqlite3 import dbapi2 as sqlite3\n from hashlib import md5\n from datetime import datetime\n from contextlib import closing\n\n@@ -29,6 +29,15 @@ sys.path.append(os.path.join(example_path, 'flaskr'))\n sys.path.append(os.path.join(example_path, 'minitwit'))\n \n \n+def has_encoding(name):\n+    try:\n+        import codecs\n+        codecs.lookup(name)\n+        return True\n+    except LookupError:\n+        return False\n+\n+\n # config keys used for the ConfigTestCase\n TEST_KEY = 'foo'\n SECRET_KEY = 'devkey'\n@@ -698,6 +707,9 @@ class JSONTestCase(unittest.TestCase):\n         assert rv.status_code == 200\n         assert rv.data == u'정상처리'.encode('utf-8')\n \n+    if not has_encoding('euc-kr'):\n+        test_modified_url_encoding = None\n+\n \n class TemplatingTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4b65c7ed5a31d56e194817231eb88e1083ba285d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 1411 | Contributors (this commit): 7 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -199,6 +199,11 @@ class Flask(_PackageBoundObject):\n         'MAX_CONTENT_LENGTH':                   None\n     })\n \n+    #: the test client that is used with when `test_client` is used.\n+    #: \n+    #: .. versionadded:: 0.7\n+    test_client_class = None\n+\n     def __init__(self, import_name, static_path=None):\n         _PackageBoundObject.__init__(self, import_name)\n         if static_path is not None:\n@@ -429,7 +434,7 @@ class Flask(_PackageBoundObject):\n         options.setdefault('use_debugger', self.debug)\n         return run_simple(host, port, self, **options)\n \n-    def test_client(self):\n+    def test_client(self, use_cookies=True):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n \n@@ -443,9 +448,16 @@ class Flask(_PackageBoundObject):\n \n         .. versionchanged:: 0.4\n            added support for `with` block usage for the client.\n+\n+        .. versionadded:: 0.7\n+           The `use_cookies` parameter was added as well as the ability\n+           to override the client to be used by setting the\n+           :attr:`test_client_class` attribute.\n         \"\"\"\n-        from flask.testing import FlaskClient\n-        return FlaskClient(self, self.response_class, use_cookies=True)\n+        cls = self.test_client_class\n+        if cls is None:\n+            from flask.testing import FlaskClient as cls\n+        return cls(self, self.response_class, use_cookies=use_cookies)\n \n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed70b42798a31bce951917ff22b996c810e2c3a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 12 | Churn Cumulative: 654 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -58,6 +58,13 @@ else:\n     _tojson_filter = json.dumps\n \n \n+# what separators does this operating system provide that are not a slash?\n+# this is used by the send_from_directory function to ensure that nobody is\n+# able to access files from outside the filesystem.\n+_os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n+                    if sep not in (None, '/'))\n+\n+\n def _endpoint_from_view_func(view_func):\n     \"\"\"Internal helper that returns the default endpoint for a given\n     function.  This always is the function name.\n@@ -413,7 +420,10 @@ def send_from_directory(directory, filename, **options):\n                     forwarded to :func:`send_file`.\n     \"\"\"\n     filename = posixpath.normpath(filename)\n-    if filename.startswith(('/', '../')):\n+    for sep in _os_alt_seps:\n+        if sep in filename:\n+            raise NotFound()\n+    if os.path.isabs(filename) or filename.startswith('../'):\n         raise NotFound()\n     filename = os.path.join(directory, filename)\n     if not os.path.isfile(filename):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#11c66be80e3e249c5f14dd9a23f49a073cd03903", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 15 | Churn Cumulative: 1602 | Contributors (this commit): 8 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -996,6 +996,21 @@ class ModuleTestCase(unittest.TestCase):\n             else:\n                 assert 0, 'expected exception'\n \n+            # testcase for a security issue that may exist on windows systems\n+            import os\n+            import ntpath\n+            old_path = os.path\n+            os.path = ntpath\n+            try:\n+                try:\n+                    f('..\\\\__init__.py')\n+                except NotFound:\n+                    pass\n+                else:\n+                    assert 0, 'expected exception'\n+            finally:\n+                os.path = old_path\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9ae4eba9861bfa959bac6adfaf5842ef7d937eb6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 274 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -32,7 +32,7 @@ def _register_module(module, static_path):\n         state.app.add_url_rule(path + '/<path:filename>',\n                                endpoint='%s.static' % module.name,\n                                view_func=module.send_static_file,\n-                               subdomain=module.subdomain)\n+                               subdomain=state.subdomain)\n     return _register\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#402f12bb6d578b767dfd637400f9194736458795", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 359 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -243,7 +243,7 @@ latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n \n intersphinx_mapping = {\n     'http://docs.python.org/dev': None,\n-    'http://werkzeug.pocoo.org/documentation/dev/': None,\n+    'http://werkzeug.pocoo.org/docs/': None,\n     'http://www.sqlalchemy.org/docs/': None,\n     'http://wtforms.simplecodes.com/docs/0.5/': None,\n     'http://discorporate.us/projects/Blinker/docs/1.1/': None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#07688d7b9302fd47cfd0ea053171ad6561c3f9b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 656 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -480,7 +480,7 @@ class _PackageBoundObject(object):\n         how this works, consider the following folder structure::\n \n             /myapplication.py\n-            /schemal.sql\n+            /schema.sql\n             /static\n                 /style.css\n             /templates\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#99be2ec022e2ceb1c21527c8278a7179630430d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 3034 | Contributors (this commit): 10 | Commits (past 90d): 12 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -730,7 +730,8 @@ class Flask(_PackageBoundObject):\n             rule = req.url_rule\n             # if we provide automatic options for this URL and the\n             # request came with the OPTIONS method, reply automatically\n-            if rule.provide_automatic_options and req.method == 'OPTIONS':\n+            if getattr(rule, 'provide_automatic_options', False) \\\n+               and req.method == 'OPTIONS':\n                 return self.make_default_options_response()\n             # otherwise dispatch to the handler for that endpoint\n             return self.view_functions[rule.endpoint](**req.view_args)\n\n@@ -206,6 +206,24 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.status_code == 405\n         assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n+    def test_werkzeug_routing(self):\n+        from werkzeug.routing import Submount, Rule\n+        app = flask.Flask(__name__)\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+        def bar():\n+            return 'bar'\n+        def index():\n+            return 'index'\n+        app.view_functions['bar'] = bar\n+        app.view_functions['index'] = index\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n     def test_session(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4a45345fc44f60275b91c47031dd44abce02f596", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 658 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -266,7 +266,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     By default it will try to guess the mimetype for you, but you can\n     also explicitly provide one.  For extra security you probably want\n-    to sent certain files as attachment (HTML for instance).  The mimetype\n+    to send certain files as attachment (HTML for instance).  The mimetype\n     guessing requires a `filename` or an `attachment_filename` to be\n     provided.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8a73097fe528430eb77ac26c81ba85229a8af553", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 45 | Churn Cumulative: 1665 | Contributors (this commit): 9 | Commits (past 90d): 5 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -224,6 +224,26 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.get('/foo/').data == 'index'\n         assert c.get('/foo/bar').data == 'bar'\n \n+    def test_endpoint_decorator(self):\n+        from werkzeug.routing import Submount, Rule\n+        app = flask.Flask(__name__)\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+\n+        @app.endpoint('bar')\n+        def bar():\n+            return 'bar'\n+\n+        @app.endpoint('index')\n+        def index():\n+            return 'index'\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n     def test_session(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n@@ -1029,6 +1049,31 @@ class ModuleTestCase(unittest.TestCase):\n             finally:\n                 os.path = old_path\n \n+    def test_endpoint_decorator(self):\n+        from werkzeug.routing import Submount, Rule\n+        from flask import Module\n+\n+        app = flask.Flask(__name__)\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+        module = Module(__name__, __name__)\n+\n+        @module.endpoint('bar')\n+        def bar():\n+            return 'bar'\n+\n+        @module.endpoint('index')\n+        def index():\n+            return 'index'\n+\n+        app.register_module(module)\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b0ca7e5af15ef2218b9726aba1d8948a409dedb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 25 | Churn Cumulative: 1713 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -496,6 +496,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         options.setdefault('url_prefix', module.url_prefix)\n         options.setdefault('subdomain', module.subdomain)\n+        self.view_functions.update(module.view_functions)\n         state = _ModuleSetupState(self, **options)\n         for func in module._register_events:\n             func(state)\n@@ -629,6 +630,22 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n+\n+    def endpoint(self, endpoint):\n+        \"\"\"A decorator to register a function as an endpoint.\n+        Example::\n+\n+            @app.endpoint('example.endpoint')\n+            def example():\n+                return \"example\"\n+\n+        :param endpoint: the name of the endpoint\n+        \"\"\"\n+        def decorator(f):\n+            self.view_functions[endpoint] = f\n+            return f\n+        return decorator\n+\n     def errorhandler(self, code):\n         \"\"\"A decorator that is used to register a function give a given\n         error code.  Example::\n\n@@ -124,6 +124,7 @@ class Module(_PackageBoundObject):\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n+        self.view_functions = {}\n         self._register_events = [_register_module(self, static_path)]\n \n     def route(self, rule, **options):\n@@ -157,6 +158,13 @@ class Module(_PackageBoundObject):\n                                    view_func, **options)\n         self._record(register_rule)\n \n+    def endpoint(self, endpoint):\n+        \"\"\"Like :meth:`Flask.endpoint` but for a module.\"\"\"\n+        def decorator(f):\n+            self.view_functions[endpoint] = f\n+            return f\n+        return decorator\n+\n     def before_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request` but for a module.  This function\n         is only executed before each request that is handled by a function of\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
