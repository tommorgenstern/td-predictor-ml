{"custom_id": "requests#9d33629b6d3f4ed3a2ee0f413090b48fa10e8560", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 1 | Churn Cumulative: 1820 | Contributors (this commit): 27 | Commits (past 90d): 41 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -112,7 +112,6 @@ class SessionRedirectMixin(object):\n                     url=url,\n                     method=method,\n                     headers=headers,\n-                    params=req.params,\n                     auth=req.auth,\n                     cookies=req.cookies,\n                     allow_redirects=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#41687c8fa8e77830a8ff3f2cefa05d8a586c5132", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 479 | Contributors (this commit): 5 | Commits (past 90d): 10 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -36,17 +36,17 @@ usage:\n The other HTTP methods are supported - see `requests.api`. Full documentation\n is at <http://python-requests.org>.\n \n-:copyright: (c) 2012 by Kenneth Reitz.\n+:copyright: (c) 2013 by Kenneth Reitz.\n :license: Apache 2.0, see LICENSE for more details.\n \n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.0.4'\n-__build__ = 0x01004\n+__version__ = '1.1.0'\n+__build__ = 0x010100\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2012 Kenneth Reitz'\n+__copyright__ = 'Copyright 2013 Kenneth Reitz'\n \n \n from . import utils\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#34917618d80580fafec98641b213c453d7f3fb39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 276 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2012. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'2013. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#628e393b9a251c3d2b9910c697b9e4ac4f3d8d6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 18 | Churn Cumulative: 8516 | Contributors (this commit): 95 | Commits (past 90d): 68 | Contributors (cumulative): 95 | DMM Complexity: 1.0\n\nDIFF:\n@@ -375,6 +375,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n \n+            self.prepare_content_length(body)\n+\n+            # Add content-type if it wasn't explicitly provided.\n+            if (content_type) and (not 'content-type' in self.headers):\n+                self.headers['Content-Type'] = content_type\n+\n+        self.body = body\n+\n+    def prepare_content_length(self, body):\n         self.headers['Content-Length'] = '0'\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n@@ -383,12 +392,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\n \n-            # Add content-type if it wasn't explicitly provided.\n-            if (content_type) and (not 'content-type' in self.headers):\n-                self.headers['Content-Type'] = content_type\n-\n-        self.body = body\n-\n     def prepare_auth(self, auth):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n         if auth:\n@@ -402,6 +405,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             # Update self to reflect the auth changes.\n             self.__dict__.update(r.__dict__)\n \n+            # Recompute Content-Length\n+            self.prepare_content_length(self.body)\n+\n     def prepare_cookies(self, cookies):\n         \"\"\"Prepares the given HTTP cookie data.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a721d590b4e13b641b3171a081e7d6a7b3d8b6f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 12/5 | Churn Δ: 36 | Churn Cumulative: 12973 | Contributors (this commit): 114 | Commits (past 90d): 122 | Contributors (cumulative): 151 | DMM Complexity: 0.5238095238095238\n\nDIFF:\n@@ -11,7 +11,7 @@ import collections\n import logging\n \n from io import BytesIO\n-from .hooks import default_hooks\n+from .hooks import default_hooks, HOOKS\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n \n@@ -225,6 +225,7 @@ class Request(RequestHooksMixin):\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n         p.prepare_auth(self.auth)\n+        p.prepare_hooks(self.hooks)\n \n         return p\n \n@@ -415,6 +416,21 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             if cookie_header is not None:\n                 self.headers['Cookie'] = cookie_header\n \n+    def prepare_hooks(self, hooks):\n+        \"\"\"Prepares the given hooks.\"\"\"\n+        for event in HOOKS:\n+            if event not in self.hooks:\n+                self.hooks[event] = []\n+            if event not in hooks:\n+                hooks[event] = []\n+\n+            if not hasattr(self.hooks[event], '__iter__'):\n+                self.hooks[event] = [self.hooks[event]]\n+            if not hasattr(hooks[event], '__iter__'):\n+                hooks[event] = [hooks[event]]\n+\n+            self.hooks[event].extend(hooks[event])\n+\n \n class Response(object):\n     \"\"\"The :class:`Response <Response>` object, which contains a\n\n@@ -13,7 +13,7 @@ import os\n from .compat import cookielib\n from .cookies import cookiejar_from_dict\n from .models import Request\n-from .hooks import dispatch_hook, default_hooks\n+from .hooks import default_hooks\n from .utils import from_key_val_list, default_headers\n from .exceptions import TooManyRedirects, InvalidSchema\n \n@@ -294,9 +294,6 @@ class Session(SessionRedirectMixin):\n             resp = history.pop()\n             resp.history = tuple(history)\n \n-        # Response manipulation hook.\n-        self.response = dispatch_hook('response', hooks, resp)\n-\n         return resp\n \n     def get(self, url, **kwargs):\n\n@@ -264,6 +264,19 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n         self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n+    def test_prepared_request_hook(self):\n+        def hook(resp):\n+            resp.hook_working = True\n+            return resp\n+\n+        req = requests.Request('GET', HTTPBIN, hooks={'response': hook})\n+        prep = req.prepare()\n+\n+        s = requests.Session()\n+        resp = s.send(prep)\n+\n+        self.assertTrue(hasattr(resp, 'hook_working'))\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35d4a47cb1f841c7bd207f5ae35061f4239711d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 1 | Churn Cumulative: 8535 | Contributors (this commit): 97 | Commits (past 90d): 70 | Contributors (cumulative): 97 | DMM Complexity: 0.0\n\nDIFF:\n@@ -342,6 +342,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         is_stream = all([\n             hasattr(data, '__iter__'),\n             not isinstance(data, basestring),\n+            not isinstance(data, list),\n             not isinstance(data, dict)\n         ])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#985a906c6c078356cddedd0b3331031a6a84960c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 12 | Churn Cumulative: 1813 | Contributors (this commit): 37 | Commits (past 90d): 16 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,17 +14,9 @@ packaged CA bundle.\n \n import os.path\n \n-certifi = None\n-try:\n-    import certifi\n-except ImportError:\n-    pass\n-\n def where():\n     \"\"\"Return the preferred certificate bundle.\"\"\"\n-    if certifi:\n-        return certifi.where()\n-\n+    # vendored bundle inside Requests\n     return os.path.join(os.path.dirname(__file__), 'cacert.pem')\n \n if __name__ == '__main__':\n\n@@ -28,8 +28,6 @@ _hush_pyflakes = (RequestsCookieJar,)\n \n NETRC_FILES = ('.netrc', '_netrc')\n \n-# if certifi is installed, use its CA bundle;\n-# otherwise, try and use the OS bundle\n DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n def dict_to_sequence(d):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#347a52aa5ced6ff3fec8723ccfb8531fdbcf8d9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 380 | Contributors (this commit): 4 | Commits (past 90d): 30 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ and maintain connections.\n import socket\n \n from .models import Response\n-from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n+from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n from .packages.urllib3.response import HTTPResponse\n from .hooks import dispatch_hook\n from .compat import urlparse, basestring, urldefrag\n@@ -120,7 +120,7 @@ class HTTPAdapter(BaseAdapter):\n \n         if proxy:\n             proxy = prepend_scheme_if_needed(proxy, urlparse(url).scheme)\n-            conn = proxy_from_url(proxy)\n+            conn = ProxyManager(self.poolmanager.connection_from_url(proxy))\n         else:\n             conn = self.poolmanager.connection_from_url(url)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#89c8cbbe0c8e1db50746ca0f5e68c754ec2d50b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 11164 | Contributors (this commit): 104 | Commits (past 90d): 83 | Contributors (cumulative): 125 | DMM Complexity: 1.0\n\nDIFF:\n@@ -346,7 +346,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         ])\n \n         try:\n-            length = super_len(data)\n+            length = str(super_len(data))\n         except (TypeError, AttributeError):\n             length = False\n \n\n@@ -9,6 +9,12 @@ import unittest\n \n import requests\n from requests.auth import HTTPDigestAuth\n+from requests.compat import str\n+\n+try:\n+    import StringIO\n+except ImportError:\n+    import io as StringIO\n \n HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n \n@@ -131,8 +137,6 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):\n-\n-\n         auth = ('user', 'pass')\n         url = httpbin('basic-auth', 'user', 'pass')\n \n@@ -264,6 +268,11 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n         self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n+    def test_content_length_is_string_for_file_objects(self):\n+        r = requests.Request(url='http://httpbin.org/post',\n+                             data=StringIO.StringIO('abc')).prepare()\n+        self.assertTrue(type(r.headers['Content-Length']) == str)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1c4fe21d47df1ec10ef8a46aecdcb0ecfeac67e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2210 | Contributors (this commit): 29 | Commits (past 90d): 74 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,7 +13,6 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, ProxyManager\n from .packages.urllib3.response import HTTPResponse\n-from .hooks import dispatch_hook\n from .compat import urlparse, basestring, urldefrag\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed)\n@@ -109,8 +108,6 @@ class HTTPAdapter(BaseAdapter):\n         response.request = req\n         response.connection = self\n \n-        # Run the Response hook.\n-        response = dispatch_hook('response', req.hooks, response)\n         return response\n \n     def get_connection(self, url, proxies=None):\n\n@@ -295,7 +295,7 @@ class Session(SessionRedirectMixin):\n             resp.history = tuple(history)\n \n         # Response manipulation hook.\n-        self.response = dispatch_hook('response', hooks, resp)\n+        resp = dispatch_hook('response', hooks, resp)\n \n         return resp\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#de32f1774f5e6491aa58075a5e8baad1a85ba330", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 2632 | Contributors (this commit): 28 | Commits (past 90d): 13 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -268,11 +268,6 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n         self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n-    def test_content_length_is_string_for_file_objects(self):\n-        r = requests.Request(url='http://httpbin.org/post',\n-                             data=StringIO.StringIO('abc')).prepare()\n-        self.assertTrue(type(r.headers['Content-Length']) == str)\n-\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#297aa04beaee5e80845841f257723fc472fd6fd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8539 | Contributors (this commit): 97 | Commits (past 90d): 72 | Contributors (cumulative): 97 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ from .compat import (\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n-ITER_CHUNK_SIZE = 10 * 1024\n+ITER_CHUNK_SIZE = 512\n \n log = logging.getLogger(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#03893d9b7fffb4c679f9e104c29c8fb1d9cc9ec6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1040 | Contributors (this commit): 17 | Commits (past 90d): 7 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -139,8 +139,7 @@ class HTTPDigestAuth(AuthBase):\n \n     def handle_401(self, r):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n-\n-        num_401_calls = r.request.hooks['response'].count(self.handle_401)\n+        num_401_calls = getattr(r.request, 'num_401_calls', 1)  \n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n@@ -153,6 +152,7 @@ class HTTPDigestAuth(AuthBase):\n             r.raw.release_conn()\n \n             r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)\n+            r.request.num_401_calls = num_401_calls + 1\n             _r = r.connection.send(r.request)\n             _r.history.append(r)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#27e814ad7682c2bd7ae8af503a9dcca7840cde64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1831 | Contributors (this commit): 28 | Commits (past 90d): 44 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -275,6 +275,10 @@ class Session(SessionRedirectMixin):\n         # Prepare the Request.\n         prep = req.prepare()\n \n+        # If auth hooks are present, they aren't passed to `dispatch_hook`\n+        # As such, we need to update the original hooks dictionary with them\n+        hooks.update(prep.hooks)\n+\n         # Send the request.\n         resp = self.send(prep, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a6360ca134623a9faecfe64b51e86f42bffb4dd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 16 | Churn Cumulative: 1056 | Contributors (this commit): 18 | Commits (past 90d): 8 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -68,18 +68,21 @@ class HTTPDigestAuth(AuthBase):\n         realm = self.chal['realm']\n         nonce = self.chal['nonce']\n         qop = self.chal.get('qop')\n-        algorithm = self.chal.get('algorithm', 'MD5')\n-        opaque = self.chal.get('opaque', None)\n+        algorithm = self.chal.get('algorithm')\n+        opaque = self.chal.get('opaque')\n \n-        algorithm = algorithm.upper()\n+        if algorithm is None:\n+            _algorithm = 'MD5'\n+        else:\n+            _algorithm = algorithm.upper()\n         # lambdas assume digest modules are imported at the top level\n-        if algorithm == 'MD5':\n+        if _algorithm == 'MD5':\n             def md5_utf8(x):\n                 if isinstance(x, str):\n                     x = x.encode('utf-8')\n                 return hashlib.md5(x).hexdigest()\n             hash_utf8 = md5_utf8\n-        elif algorithm == 'SHA':\n+        elif _algorithm == 'SHA':\n             def sha_utf8(x):\n                 if isinstance(x, str):\n                     x = x.encode('utf-8')\n@@ -129,9 +132,10 @@ class HTTPDigestAuth(AuthBase):\n            'response=\"%s\"' % (self.username, realm, nonce, path, respdig)\n         if opaque:\n             base += ', opaque=\"%s\"' % opaque\n+        if algorithm:\n+            base += ', algorithm=\"%s\"' % algorithm\n         if entdig:\n             base += ', digest=\"%s\"' % entdig\n-            base += ', algorithm=\"%s\"' % algorithm\n         if qop:\n             base += ', qop=auth, nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca85b4ec6ce2428891d2e1ae72dad2b873c87bbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 8541 | Contributors (this commit): 97 | Commits (past 90d): 73 | Contributors (cumulative): 97 | DMM Complexity: None\n\nDIFF:\n@@ -283,7 +283,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         # Support for unicode domain names and paths.\n         scheme, netloc, path, _params, query, fragment = urlparse(url)\n \n-        if not scheme:\n+        if not (scheme and netloc):\n             raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e53290acd02085424c548c6e149c3811325d314", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 80 | Lines Deleted: 25 | Files Changed: 4 | Hunks: 21 | Methods Changed: 13 | Complexity Δ (Sum/Max): 10/8 | Churn Δ: 105 | Churn Cumulative: 3744 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 9 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -9,6 +9,7 @@ import socket\n import errno\n \n from socket import error as SocketError, timeout as SocketTimeout\n+from .util import resolve_cert_reqs, resolve_ssl_version\n \n try: # Python 3\n     from http.client import HTTPConnection, HTTPException\n@@ -80,31 +81,29 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n     ssl_version = None\n \n     def set_cert(self, key_file=None, cert_file=None,\n-                 cert_reqs='CERT_NONE', ca_certs=None):\n-        ssl_req_scheme = {\n-            'CERT_NONE': ssl.CERT_NONE,\n-            'CERT_OPTIONAL': ssl.CERT_OPTIONAL,\n-            'CERT_REQUIRED': ssl.CERT_REQUIRED\n-        }\n+                 cert_reqs=None, ca_certs=None):\n \n         self.key_file = key_file\n         self.cert_file = cert_file\n-        self.cert_reqs = ssl_req_scheme.get(cert_reqs) or ssl.CERT_NONE\n+        self.cert_reqs = cert_reqs\n         self.ca_certs = ca_certs\n \n     def connect(self):\n         # Add certificate verification\n         sock = socket.create_connection((self.host, self.port), self.timeout)\n \n+        resolved_cert_reqs = resolve_cert_reqs(self.cert_reqs)\n+        resolved_ssl_version = resolve_ssl_version(self.ssl_version)\n+\n         # Wrap socket using verification with the root certs in\n         # trusted_root_certs\n         self.sock = ssl_wrap_socket(sock, self.key_file, self.cert_file,\n-                                    cert_reqs=self.cert_reqs,\n+                                    cert_reqs=resolved_cert_reqs,\n                                     ca_certs=self.ca_certs,\n                                     server_hostname=self.host,\n-                                    ssl_version=self.ssl_version)\n+                                    ssl_version=resolved_ssl_version)\n \n-        if self.ca_certs:\n+        if resolved_cert_reqs != ssl.CERT_NONE:\n             match_hostname(self.sock.getpeercert(), self.host)\n \n \n@@ -514,7 +513,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n                  strict=False, timeout=None, maxsize=1,\n                  block=False, headers=None,\n                  key_file=None, cert_file=None,\n-                 cert_reqs='CERT_NONE', ca_certs=None, ssl_version=None):\n+                 cert_reqs=None, ca_certs=None, ssl_version=None):\n \n         HTTPConnectionPool.__init__(self, host, port,\n                                     strict, timeout, maxsize,\n@@ -548,9 +547,6 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         connection.set_cert(key_file=self.key_file, cert_file=self.cert_file,\n                             cert_reqs=self.cert_reqs, ca_certs=self.ca_certs)\n \n-        if self.ssl_version is None:\n-            connection.ssl_version = ssl.PROTOCOL_SSLv23\n-        else:\n         connection.ssl_version = self.ssl_version\n \n         return connection\n\n@@ -58,6 +58,17 @@ class PoolManager(RequestMethods):\n         self.pools = RecentlyUsedContainer(num_pools,\n                                            dispose_func=lambda p: p.close())\n \n+    def _new_pool(self, scheme, host, port):\n+        \"\"\"\n+        Create a new :class:`ConnectionPool` based on host, port and scheme.\n+\n+        This method is used to actually create the connection pools handed out\n+        by :meth:`connection_from_url` and companion methods. It is intended\n+        to be overridden for customization.\n+        \"\"\"\n+        pool_cls = pool_classes_by_scheme[scheme]\n+        return pool_cls(host, port, **self.connection_pool_kw)\n+\n     def clear(self):\n         \"\"\"\n         Empty our store of pools and direct them all to close.\n@@ -74,6 +85,7 @@ class PoolManager(RequestMethods):\n         If ``port`` isn't given, it will be derived from the ``scheme`` using\n         ``urllib3.connectionpool.port_by_scheme``.\n         \"\"\"\n+        scheme = scheme or 'http'\n         port = port or port_by_scheme.get(scheme, 80)\n \n         pool_key = (scheme, host, port)\n@@ -85,11 +97,8 @@ class PoolManager(RequestMethods):\n             return pool\n \n         # Make a fresh ConnectionPool of the desired type\n-        pool_cls = pool_classes_by_scheme[scheme]\n-        pool = pool_cls(host, port, **self.connection_pool_kw)\n-\n+        pool = self._new_pool(scheme, host, port)\n         self.pools[pool_key] = pool\n-\n         return pool\n \n     def connection_from_url(self, url):\n\n@@ -145,7 +145,17 @@ class HTTPResponse(object):\n                 # cStringIO doesn't like amt=None\n                 data = self._fp.read()\n             else:\n-                return self._fp.read(amt)\n+                data = self._fp.read(amt)\n+                if amt != 0 and not data:  # Platform-specific: Buggy versions of Python.\n+                    # Close the connection when no data is returned\n+                    #\n+                    # This is redundant to what httplib/http.client _should_\n+                    # already do.  However, versions of python released before\n+                    # December 15, 2012 (http://bugs.python.org/issue16298) do not\n+                    # properly close the connection in all cases. There is no harm\n+                    # in redundantly calling close.\n+                    self._fp.close()\n+                return data\n \n             try:\n                 if decode_content and decoder:\n\n@@ -22,6 +22,7 @@ try:  # Test for SSL features\n     SSLContext = None\n     HAS_SNI = False\n \n+    import ssl\n     from ssl import wrap_socket, CERT_NONE, SSLError, PROTOCOL_SSLv23\n     from ssl import SSLContext  # Modern SSL?\n     from ssl import HAS_SNI  # Has SNI?\n@@ -263,10 +264,48 @@ def is_connection_dropped(conn):\n             return True\n \n \n+def resolve_cert_reqs(candidate):\n+    \"\"\"\n+    Resolves the argument to a numeric constant, which can be passed to\n+    the wrap_socket function/method from the ssl module.\n+    Defaults to :data:`ssl.CERT_NONE`.\n+    If given a string it is assumed to be the name of the constant in the\n+    :mod:`ssl` module or its abbrevation.\n+    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.\n+    If it's neither `None` nor a string we assume it is already the numeric\n+    constant which can directly be passed to wrap_socket.\n+    \"\"\"\n+    if candidate is None:\n+        return CERT_NONE\n+\n+    if isinstance(candidate, str):\n+        res = getattr(ssl, candidate, None)\n+        if res is None:\n+            res = getattr(ssl, 'CERT_' + candidate)\n+        return res\n+\n+    return candidate\n+\n+\n+def resolve_ssl_version(candidate):\n+    \"\"\"\n+    like resolve_cert_reqs\n+    \"\"\"\n+    if candidate is None:\n+        return PROTOCOL_SSLv23\n+\n+    if isinstance(candidate, str):\n+        res = getattr(ssl, candidate, None)\n+        if res is None:\n+            res = getattr(ssl, 'PROTOCOL_' + candidate)\n+        return res\n+\n+    return candidate\n+\n if SSLContext is not None:  # Python 3.2+\n-    def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=CERT_NONE,\n+    def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                         ca_certs=None, server_hostname=None,\n-                        ssl_version=PROTOCOL_SSLv23):\n+                        ssl_version=None):\n         \"\"\"\n         All arguments except `server_hostname` have the same meaning as for\n         :func:`ssl.wrap_socket`\n@@ -279,8 +318,9 @@ if SSLContext is not None:  # Python 3.2+\n         if ca_certs:\n             try:\n                 context.load_verify_locations(ca_certs)\n-            except TypeError as e:  # Reraise as SSLError\n-                # FIXME: This block needs a test.\n+            # Py32 raises IOError\n+            # Py33 raises FileNotFoundError\n+            except Exception as e:  # Reraise as SSLError\n                 raise SSLError(e)\n         if certfile:\n             # FIXME: This block needs a test.\n@@ -290,9 +330,9 @@ if SSLContext is not None:  # Python 3.2+\n         return context.wrap_socket(sock)\n \n else:  # Python 3.1 and earlier\n-    def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=CERT_NONE,\n+    def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,\n                         ca_certs=None, server_hostname=None,\n-                        ssl_version=PROTOCOL_SSLv23):\n+                        ssl_version=None):\n         return wrap_socket(sock, keyfile=keyfile, certfile=certfile,\n                            ca_certs=ca_certs, cert_reqs=cert_reqs,\n                            ssl_version=ssl_version)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#088f908d581eb3a51370eff017ff6000802e5340", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1833 | Contributors (this commit): 28 | Commits (past 90d): 45 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ import os\n from .compat import cookielib\n from .cookies import cookiejar_from_dict\n from .models import Request\n-from .hooks import default_hooks\n+from .hooks import default_hooks, dispatch_hook\n from .utils import from_key_val_list, default_headers\n from .exceptions import TooManyRedirects, InvalidSchema\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cc7bee19f0f1490d3bfd321bf94f6367c4ed3c7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 8555 | Contributors (this commit): 97 | Commits (past 90d): 74 | Contributors (cumulative): 97 | DMM Complexity: 1.0\n\nDIFF:\n@@ -424,18 +424,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare_hooks(self, hooks):\n         \"\"\"Prepares the given hooks.\"\"\"\n-        for event in HOOKS:\n-            if event not in self.hooks:\n-                self.hooks[event] = []\n-            if event not in hooks:\n-                hooks[event] = []\n-\n-            if not hasattr(self.hooks[event], '__iter__'):\n-                self.hooks[event] = [self.hooks[event]]\n-            if not hasattr(hooks[event], '__iter__'):\n-                hooks[event] = [hooks[event]]\n-\n-            self.hooks[event].extend(hooks[event])\n+        for event in hooks:\n+            self.register_hook(event, hooks[event])\n \n \n class Response(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e771aa93861355a704fa6650d59e14256ea0ee89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 10392 | Contributors (this commit): 109 | Commits (past 90d): 120 | Contributors (cumulative): 125 | DMM Complexity: 0.0\n\nDIFF:\n@@ -225,6 +225,7 @@ class Request(RequestHooksMixin):\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n         p.prepare_auth(self.auth)\n+        # This MUST go after prepare_auth. Authenticators could add a hook\n         p.prepare_hooks(self.hooks)\n \n         return p\n\n@@ -130,7 +130,8 @@ class SessionRedirectMixin(object):\n                     timeout=timeout,\n                     verify=verify,\n                     cert=cert,\n-                    proxies=proxies\n+                    proxies=proxies,\n+                    hooks=req.hooks,\n             )\n \n             i += 1\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1cfe59299b1f81a070704a6a519f1329b4393a7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 10404 | Contributors (this commit): 109 | Commits (past 90d): 122 | Contributors (cumulative): 125 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ import collections\n import logging\n \n from io import BytesIO\n-from .hooks import default_hooks, HOOKS\n+from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n \n\n@@ -276,10 +276,6 @@ class Session(SessionRedirectMixin):\n         # Prepare the Request.\n         prep = req.prepare()\n \n-        # If auth hooks are present, they aren't passed to `dispatch_hook`\n-        # As such, we need to update the original hooks dictionary with them\n-        hooks.update(prep.hooks)\n-\n         # Send the request.\n         resp = self.send(prep, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n \n@@ -299,9 +295,6 @@ class Session(SessionRedirectMixin):\n             resp = history.pop()\n             resp.history = tuple(history)\n \n-        # Response manipulation hook.\n-        resp = dispatch_hook('response', hooks, resp)\n-\n         return resp\n \n     def get(self, url, **kwargs):\n@@ -375,8 +368,11 @@ class Session(SessionRedirectMixin):\n \n     def send(self, request, **kwargs):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n+        hooks = request.hooks\n         adapter = self.get_adapter(url=request.url)\n         r = adapter.send(request, **kwargs)\n+        # Response manipulation hooks\n+        r = dispatch_hook('response', hooks, r)\n         return r\n \n     def get_adapter(self, url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#34268b16c397682be38f4147aa181f3ebf112e42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 1062 | Contributors (this commit): 18 | Commits (past 90d): 9 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -139,11 +139,13 @@ class HTTPDigestAuth(AuthBase):\n \n     def handle_401(self, r):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n-        num_401_calls = getattr(r.request, 'num_401_calls', 1)  \n+\n+        num_401_calls =  getattr(self, 'num_401_calls', 1)\n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n \n+            setattr(self, 'num_401_calls', num_401_calls + 1)\n             self.chal = parse_dict_header(s_auth.replace('Digest ', ''))\n \n             # Consume content and release the original connection\n@@ -152,12 +154,12 @@ class HTTPDigestAuth(AuthBase):\n             r.raw.release_conn()\n             \n             r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)\n-            r.request.num_401_calls = num_401_calls + 1\n             _r = r.connection.send(r.request)\n             _r.history.append(r)\n \n             return _r\n \n+        setattr(self, 'num_401_calls', 1)  \n         return r\n \n     def __call__(self, r):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2bcc4a774a8ca1556bd95c32f044d818f3547a40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 11 | Churn Cumulative: 8569 | Contributors (this commit): 98 | Commits (past 90d): 76 | Contributors (cumulative): 98 | DMM Complexity: None\n\nDIFF:\n@@ -596,8 +596,11 @@ class Response(object):\n \n         return content\n \n-    def json(self):\n-        \"\"\"Returns the json-encoded content of a response, if any.\"\"\"\n+    def json(self, **kwargs):\n+        \"\"\"Returns the json-encoded content of a response, if any.\n+\n+        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n+        \"\"\"\n \n         if not self.encoding and len(self.content) > 3:\n             # No encoding set. JSON RFC 4627 section 3 states we should expect\n@@ -606,8 +609,8 @@ class Response(object):\n             # a best guess).\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n-                return json.loads(self.content.decode(encoding))\n-        return json.loads(self.text or self.content)\n+                return json.loads(self.content.decode(encoding), **kwargs)\n+        return json.loads(self.text or self.content, **kwargs)\n \n     @property\n     def links(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0af8ff940538357d3357814430be78dfdbdc4a94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 2635 | Contributors (this commit): 29 | Commits (past 90d): 14 | Contributors (cumulative): 29 | DMM Complexity: 0.0\n\nDIFF:\n@@ -34,9 +34,6 @@ class RequestsTestCase(unittest.TestCase):\n         \"\"\"Teardown.\"\"\"\n         pass\n \n-    def test_assertion(self):\n-        assert 1\n-\n     def test_entry_points(self):\n \n         requests.session\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ccea28db071e057d161567329d0844357789a5c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 2640 | Contributors (this commit): 29 | Commits (past 90d): 15 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -265,6 +265,11 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n         self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n+    def test_links(self):\n+        url = 'https://api.github.com/users/kennethreitz/repos?page=1&per_page=10'\n+        r = requests.head(url=url)\n+        self.assertEqual(r.links['next']['rel'], 'next')\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ef52044c5f0411307ef2200fcb950bd84879266f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 2644 | Contributors (this commit): 30 | Commits (past 90d): 16 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -76,10 +76,6 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(request.url,\n             \"http://example.com/path?key=value&a=b#fragment\")\n \n-    def test_HTTP_200_OK_GET(self):\n-        r = requests.get(httpbin('get'))\n-        self.assertEqual(r.status_code, 200)\n-\n     def test_HTTP_200_OK_GET_ALTERNATIVE(self):\n         r = requests.Request('GET', httpbin('get'))\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5861254d8f5df33820b333be8d7ee28b40da99a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 2661 | Contributors (this commit): 31 | Commits (past 90d): 17 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -266,6 +266,23 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.head(url=url)\n         self.assertEqual(r.links['next']['rel'], 'next')\n \n+    def test_cookie_parameters(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+        secure = True\n+        domain = 'test.com'\n+        rest = {'HttpOnly': True}\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value, secure=secure, domain=domain, rest=rest)\n+\n+        self.assertEqual(len(jar), 1)\n+        self.assertIn('some_cookie', jar)\n+\n+        cookie = list(jar)[0]\n+        self.assertEqual(cookie.secure, secure)\n+        self.assertEqual(cookie.domain, domain)\n+        self.assertEqual(cookie._rest['HttpOnly'], rest['HttpOnly'])\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4ce644079570de42d0166c019b4c9bdf42349bca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2663 | Contributors (this commit): 31 | Commits (past 90d): 18 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -277,7 +277,7 @@ class RequestsTestCase(unittest.TestCase):\n         jar.set(key, value, secure=secure, domain=domain, rest=rest)\n \n         self.assertEqual(len(jar), 1)\n-        self.assertIn('some_cookie', jar)\n+        self.assertTrue('some_cookie' in jar)\n \n         cookie = list(jar)[0]\n         self.assertEqual(cookie.secure, secure)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#44b1e7ebeabdf28ad1abccca1ef06eefe84d334c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 8 | Churn Cumulative: 11240 | Contributors (this commit): 109 | Commits (past 90d): 96 | Contributors (cumulative): 131 | DMM Complexity: 1.0\n\nDIFF:\n@@ -386,13 +386,14 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.body = body\n \n     def prepare_content_length(self, body):\n-        self.headers['Content-Length'] = '0'\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n             body.seek(0, 0)\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\n+        elif self.method in ('POST', 'PUT'):\n+            self.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n\n@@ -58,6 +58,11 @@ class RequestsTestCase(unittest.TestCase):\n         assert pr.body == 'life=42'\n \n \n+    def test_no_content_length(self):\n+        req = requests.Request('GET', httpbin('get')).prepare()\n+        self.assertNotIn('Content-Length', req.headers)\n+\n+\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request('GET', \"http://0.0.0.0/get/test case\").prepare()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f453892960dded53add21f3132a22f992ba6e6a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2670 | Contributors (this commit): 32 | Commits (past 90d): 20 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -60,7 +60,7 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_no_content_length(self):\n         req = requests.Request('GET', httpbin('get')).prepare()\n-        self.assertNotIn('Content-Length', req.headers)\n+        self.assertTrue('Content-Length' not in req.headers)\n \n \n     def test_path_is_not_double_encoded(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
