{"custom_id": "keras#9096546ae4a8be9daee5a3353e3f8de8fd207675", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 1048 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,10 @@ def is_ipython_notebook():\n class KerasFileEditor:\n     \"\"\"Utility to inspect, edit, and resave Keras weights files.\n \n+    You will find this class useful when adapting\n+    an old saved weights file after having made\n+    architecture changes to a model.\n+\n     Args:\n         filepath: The path to a local file to inspect and edit.\n \n@@ -43,12 +47,16 @@ class KerasFileEditor:\n \n     ```python\n     editor = KerasFileEditor(\"my_model.weights.h5\")\n+\n     # Displays current contents\n     editor.summary()\n+\n     # Remove the weights of an existing layer\n     editor.delete_object(\"layers/dense_2\")\n+\n     # Add the weights of a new layer\n     editor.add_object(\"layers/einsum_dense\", weights={\"0\": ..., \"1\": ...})\n+\n     # Save the weights of the edited model\n     editor.resave_weights(\"edited_model.weights.h5\")\n     ```\n@@ -90,6 +98,7 @@ class KerasFileEditor:\n         weights_dict, object_metadata = self._extract_weights_from_store(\n             weights_store.h5_file\n         )\n+        weights_store.close()\n         self.weights_dict = weights_dict\n         self.object_metadata = object_metadata  # {path: object_name}\n         self.console.print(self._generate_filepath_info(rich_style=True))\n@@ -170,7 +179,7 @@ class KerasFileEditor:\n                             f\"[color(160)]...Weight shape mismatch \"\n                             f\"for [bold]{inner_path}[/][/]\\n\"\n                             f\"    In {ref_name}: \"\n-                            f\"shape={tuple(ref_val[0])}\\n\"\n+                            f\"shape={ref_val.shape}\\n\"\n                             f\"    In {target_name}: \"\n                             f\"shape={target[ref_key].shape}\"\n                         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#36a01f16729cca97876019954f1329b5145a8a3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1050 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -466,7 +466,7 @@ class KerasFileEditor:\n                         value, metadata=metadata, inner_path=inner_path\n                     )\n             else:\n-                result[key] = value\n+                result[key] = value[:]\n         return result, metadata\n \n     def _generate_filepath_info(self, rich_style=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0acd57524b80d08f0c89743b564ced6911236bd0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 27 | Churn Cumulative: 1153 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -138,13 +138,18 @@ class KerasFileEditor:\n             ref_name,\n             error_count,\n             match_count,\n+            checked_paths,\n         ):\n             base_inner_path = inner_path\n             for ref_key, ref_val in ref_spec.items():\n                 inner_path = base_inner_path + \"/\" + ref_key\n+                if inner_path in checked_paths:\n+                    continue\n+\n                 if ref_key not in target:\n-                    if isinstance(ref_val, dict):\n                     error_count += 1\n+                    checked_paths.add(inner_path)\n+                    if isinstance(ref_val, dict):\n                         self.console.print(\n                             f\"[color(160)]...Object [bold]{inner_path}[/] \"\n                             f\"present in {ref_name}, \"\n@@ -169,12 +174,14 @@ class KerasFileEditor:\n                         ref_name,\n                         error_count=error_count,\n                         match_count=match_count,\n+                        checked_paths=checked_paths,\n                     )\n                     error_count += _error_count\n                     match_count += _match_count\n                 else:\n                     if target[ref_key].shape != ref_val.shape:\n                         error_count += 1\n+                        checked_paths.add(inner_path)\n                         self.console.print(\n                             f\"[color(160)]...Weight shape mismatch \"\n                             f\"for [bold]{inner_path}[/][/]\\n\"\n@@ -187,6 +194,7 @@ class KerasFileEditor:\n                         match_count += 1\n             return error_count, match_count\n \n+        checked_paths = set()\n         error_count, match_count = _compare(\n             self.weights_dict,\n             ref_spec,\n@@ -195,6 +203,7 @@ class KerasFileEditor:\n             ref_name=\"reference model\",\n             error_count=0,\n             match_count=0,\n+            checked_paths=checked_paths,\n         )\n         _error_count, _ = _compare(\n             ref_spec,\n@@ -204,6 +213,7 @@ class KerasFileEditor:\n             ref_name=\"saved file\",\n             error_count=0,\n             match_count=0,\n+            checked_paths=checked_paths,\n         )\n         error_count += _error_count\n         self.console.print(\"─────────────────────\")\n\n@@ -74,3 +74,18 @@ class SavingTest(testing.TestCase):\n         editor.summary()\n         out = editor.compare_to(target_model)  # Succeeds\n         self.assertEqual(out[\"status\"], \"success\")\n+\n+        editor.delete_weight(\"dense_2\", \"1\")\n+        out = editor.compare_to(target_model)  # Fails\n+        self.assertEqual(out[\"status\"], \"error\")\n+        self.assertEqual(out[\"error_count\"], 1)\n+\n+        editor.add_weights(\"dense_2\", {\"1\": np.zeros((7,))})\n+        out = editor.compare_to(target_model)  # Fails\n+        self.assertEqual(out[\"status\"], \"error\")\n+        self.assertEqual(out[\"error_count\"], 1)\n+\n+        editor.delete_weight(\"dense_2\", \"1\")\n+        editor.add_weights(\"dense_2\", {\"1\": np.zeros((3,))})\n+        out = editor.compare_to(target_model)  # Succeeds\n+        self.assertEqual(out[\"status\"], \"success\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f3fa48a433d0759394c472075258e208eaa02ee9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 32 | Churn Cumulative: 853 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2443,29 +2443,17 @@ def sum(x, axis=None, keepdims=False):\n \n def eye(N, M=None, k=0, dtype=None):\n     dtype = dtype or config.floatx()\n-    if not M:\n-        M = N\n-    # Making sure N, M and k are `int`\n-    N, M, k = int(N), int(M), int(k)\n-    if k >= M or -k >= N:\n-        # tf.linalg.diag will raise an error in this case\n-        return zeros([N, M], dtype=dtype)\n-    if k == 0:\n+    M = N if M is None else M\n+    if isinstance(k, int) and k == 0:\n         return tf.eye(N, M, dtype=dtype)\n-    # We need the precise length, otherwise tf.linalg.diag will raise an error\n-    diag_len = builtins.min(N, M)\n-    if k > 0:\n-        if N >= M:\n-            diag_len -= k\n-        elif N + k > M:\n-            diag_len = M - k\n-    elif k <= 0:\n-        if M >= N:\n-            diag_len += k\n-        elif M - k > N:\n-            diag_len = N + k\n-    diagonal_ = tf.ones([diag_len], dtype=dtype)\n-    return tf.linalg.diag(diagonal=diagonal_, num_rows=N, num_cols=M, k=k)\n+    # Create a smaller square eye and pad appropriately.\n+    return tf.pad(\n+        tf.eye(tf.minimum(M - k, N + k), dtype=dtype),\n+        paddings=(\n+            (tf.maximum(-k, 0), tf.maximum(N - M + k, 0)),\n+            (tf.maximum(k, 0), tf.maximum(M - N - k, 0)),\n+        ),\n+    )\n \n \n def floor_divide(x1, x2):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#56e37f5e59236c9a5ccee7a22ddf50ccd7c59e2c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 151 | Lines Deleted: 54 | Files Changed: 6 | Hunks: 51 | Methods Changed: 30 | Complexity Δ (Sum/Max): 28/31 | Churn Δ: 205 | Churn Cumulative: 782 | Contributors (this commit): 13 | Commits (past 90d): 28 | Contributors (cumulative): 29 | DMM Complexity: 0.7666666666666667\n\nDIFF:\n@@ -436,11 +436,12 @@ class JAXTrainer(base_trainer.Trainer):\n                     \"optimizer_variables\": optimizer_variables,\n                     \"metrics_variables\": metrics_variables,\n                 }\n-\n-                # Callbacks\n-                logs = self._pythonify_logs(logs)\n+                # Dispatch callbacks. This takes care of async dispatch.\n                 callbacks.on_train_batch_end(step, logs)\n+\n                 if self.stop_training:\n+                    # Stop training if a callback has set\n+                    # this flag in on_(train_)batch_end.\n                     break\n \n             # Reattach state to the model (if not already done by a callback).\n@@ -587,8 +588,10 @@ class JAXTrainer(base_trainer.Trainer):\n                 \"non_trainable_variables\": non_trainable_variables,\n                 \"metrics_variables\": metrics_variables,\n             }\n-            logs = self._pythonify_logs(logs)\n+\n+            # Dispatch callbacks. This takes care of async dispatch.\n             callbacks.on_test_batch_end(step, logs)\n+\n             if self.stop_evaluating:\n                 break\n \n@@ -679,7 +682,10 @@ class JAXTrainer(base_trainer.Trainer):\n                 state, x\n             )\n             outputs = append_to_outputs(batch_outputs, outputs)\n+\n+            # Dispatch callbacks. This takes care of async dispatch.\n             callbacks.on_predict_batch_end(step, {\"outputs\": batch_outputs})\n+\n             if self.stop_predicting:\n                 break\n \n\n@@ -318,7 +318,6 @@ class TensorFlowTrainer(base_trainer.Trainer):\n                 for step, iterator in epoch_iterator.enumerate_epoch():\n                     callbacks.on_train_batch_begin(step)\n                     logs = self.train_function(iterator)\n-                    logs = self._pythonify_logs(logs)\n                     callbacks.on_train_batch_end(step, logs)\n                     if self.stop_training:\n                         break\n@@ -431,7 +430,6 @@ class TensorFlowTrainer(base_trainer.Trainer):\n             for step, iterator in epoch_iterator.enumerate_epoch():\n                 callbacks.on_test_batch_begin(step)\n                 logs = self.test_function(iterator)\n-                logs = self._pythonify_logs(logs)\n                 callbacks.on_test_batch_end(step, logs)\n                 if self.stop_evaluating:\n                     break\n\n@@ -254,7 +254,6 @@ class TorchTrainer(base_trainer.Trainer):\n                 callbacks.on_train_batch_begin(step)\n \n                 logs = self.train_function(data)\n-                logs = self._pythonify_logs(logs)\n \n                 # Callbacks\n                 callbacks.on_train_batch_end(step, logs)\n@@ -371,7 +370,6 @@ class TorchTrainer(base_trainer.Trainer):\n         for step, data in epoch_iterator.enumerate_epoch():\n             callbacks.on_test_batch_begin(step)\n             logs = self.test_function(data)\n-            logs = self._pythonify_logs(logs)\n             callbacks.on_test_batch_end(step, logs)\n             if self.stop_evaluating:\n                 break\n\n@@ -1,4 +1,5 @@\n from keras.src import backend\n+from keras.src import utils\n from keras.src.api_export import keras_export\n \n \n@@ -85,12 +86,15 @@ class Callback:\n             self._model.jax_state_sync()\n         return self._model\n \n+    @utils.default\n     def on_batch_begin(self, batch, logs=None):\n         \"\"\"A backwards compatibility alias for `on_train_batch_begin`.\"\"\"\n \n+    @utils.default\n     def on_batch_end(self, batch, logs=None):\n         \"\"\"A backwards compatibility alias for `on_train_batch_end`.\"\"\"\n \n+    @utils.default\n     def on_epoch_begin(self, epoch, logs=None):\n         \"\"\"Called at the start of an epoch.\n \n@@ -103,6 +107,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_epoch_end(self, epoch, logs=None):\n         \"\"\"Called at the end of an epoch.\n \n@@ -118,6 +123,7 @@ class Callback:\n               `{'loss': 0.2, 'accuracy': 0.7}`.\n         \"\"\"\n \n+    @utils.default\n     def on_train_batch_begin(self, batch, logs=None):\n         \"\"\"Called at the beginning of a training batch in `fit` methods.\n \n@@ -135,6 +141,7 @@ class Callback:\n         # For backwards compatibility.\n         self.on_batch_begin(batch, logs=logs)\n \n+    @utils.default\n     def on_train_batch_end(self, batch, logs=None):\n         \"\"\"Called at the end of a training batch in `fit` methods.\n \n@@ -151,6 +158,7 @@ class Callback:\n         # For backwards compatibility.\n         self.on_batch_end(batch, logs=logs)\n \n+    @utils.default\n     def on_test_batch_begin(self, batch, logs=None):\n         \"\"\"Called at the beginning of a batch in `evaluate` methods.\n \n@@ -169,6 +177,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_test_batch_end(self, batch, logs=None):\n         \"\"\"Called at the end of a batch in `evaluate` methods.\n \n@@ -186,6 +195,7 @@ class Callback:\n             logs: Dict. Aggregated metric results up until this batch.\n         \"\"\"\n \n+    @utils.default\n     def on_predict_batch_begin(self, batch, logs=None):\n         \"\"\"Called at the beginning of a batch in `predict` methods.\n \n@@ -201,6 +211,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_predict_batch_end(self, batch, logs=None):\n         \"\"\"Called at the end of a batch in `predict` methods.\n \n@@ -215,6 +226,7 @@ class Callback:\n             logs: Dict. Aggregated metric results up until this batch.\n         \"\"\"\n \n+    @utils.default\n     def on_train_begin(self, logs=None):\n         \"\"\"Called at the beginning of training.\n \n@@ -225,6 +237,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_train_end(self, logs=None):\n         \"\"\"Called at the end of training.\n \n@@ -236,6 +249,7 @@ class Callback:\n               that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_test_begin(self, logs=None):\n         \"\"\"Called at the beginning of evaluation or validation.\n \n@@ -246,6 +260,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_test_end(self, logs=None):\n         \"\"\"Called at the end of evaluation or validation.\n \n@@ -257,6 +272,7 @@ class Callback:\n               but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_predict_begin(self, logs=None):\n         \"\"\"Called at the beginning of prediction.\n \n@@ -267,6 +283,7 @@ class Callback:\n               method but that may change in the future.\n         \"\"\"\n \n+    @utils.default\n     def on_predict_end(self, logs=None):\n         \"\"\"Called at the end of prediction.\n \n\n@@ -1,4 +1,7 @@\n+import concurrent.futures\n+\n from keras.src import tree\n+from keras.src import utils\n from keras.src.api_export import keras_export\n from keras.src.callbacks.callback import Callback\n from keras.src.callbacks.history import History\n@@ -34,13 +37,43 @@ class CallbackList(Callback):\n                 via `Callback.set_params`.\n         \"\"\"\n         self.callbacks = tree.flatten(callbacks) if callbacks else []\n+        self._executor = None\n+        self._futures = []\n+        self._configure_async_dispatch(callbacks)\n         self._add_default_callbacks(add_history, add_progbar)\n-\n-        if model:\n         self.set_model(model)\n-        if params:\n         self.set_params(params)\n \n+    def set_params(self, params):\n+        self.params = params\n+        if params:\n+            for callback in self.callbacks:\n+                callback.set_params(params)\n+\n+    def _configure_async_dispatch(self, callbacks):\n+        # Determine whether callbacks can be dispatched asynchronously.\n+        async_train = True\n+        async_test = True\n+        async_predict = True\n+        if callbacks:\n+            if isinstance(callbacks, (list, tuple)):\n+                for cbk in callbacks:\n+                    if not utils.is_default(cbk.on_batch_end):\n+                        async_train = False\n+                    if not utils.is_default(cbk.on_train_batch_end):\n+                        async_train = False\n+                    if not utils.is_default(cbk.on_test_batch_end):\n+                        async_test = False\n+                    if not utils.is_default(cbk.on_predict_batch_end):\n+                        async_predict = False\n+\n+        if async_train or async_test or async_predict:\n+            self._executor = concurrent.futures.ThreadPoolExecutor()\n+\n+        self._async_train = async_train\n+        self._async_test = async_test\n+        self._async_predict = async_predict\n+\n     def _add_default_callbacks(self, add_history, add_progbar):\n         \"\"\"Adds `Callback`s that are always present.\"\"\"\n         self._progbar = None\n@@ -60,37 +93,55 @@ class CallbackList(Callback):\n             self._progbar = ProgbarLogger()\n             self.callbacks.append(self._progbar)\n \n-    def append(self, callback):\n-        self.callbacks.append(callback)\n-\n-    def set_params(self, params):\n-        self.params = params\n-        for callback in self.callbacks:\n-            callback.set_params(params)\n-\n     def set_model(self, model):\n+        if not model:\n+            return\n         super().set_model(model)\n         if self._history:\n             model.history = self._history\n         for callback in self.callbacks:\n             callback.set_model(model)\n \n+    def _async_dispatch(self, fn, *args):\n+        for future in self._futures:\n+            if future.done():\n+                future.result()\n+                self._futures.remove(future)\n+        future = self._executor.submit(fn, *args)\n+        self._futures.append(future)\n+\n+    def _pythonify_logs(self, logs):\n+        result = {}\n+        for key, value in sorted(logs.items()):\n+            if isinstance(value, dict):\n+                result.update(self._pythonify_logs(value))\n+            else:\n+                try:\n+                    value = float(value)\n+                except:\n+                    pass\n+                result[key] = value\n+        return result\n+\n+    def _clear_futures(self):\n+        for future in self._futures:\n+            future.result()\n+        self._futures = []\n+\n     def on_batch_begin(self, batch, logs=None):\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_batch_begin(batch, logs=logs)\n \n-    def on_batch_end(self, batch, logs=None):\n-        logs = logs or {}\n-        for callback in self.callbacks:\n-            callback.on_batch_end(batch, logs=logs)\n-\n     def on_epoch_begin(self, epoch, logs=None):\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_epoch_begin(epoch, logs)\n \n     def on_epoch_end(self, epoch, logs=None):\n+        if self._async_train:\n+            self._clear_futures()\n+\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_epoch_end(epoch, logs)\n@@ -100,27 +151,59 @@ class CallbackList(Callback):\n         for callback in self.callbacks:\n             callback.on_train_batch_begin(batch, logs=logs)\n \n-    def on_train_batch_end(self, batch, logs=None):\n-        logs = logs or {}\n-        for callback in self.callbacks:\n-            callback.on_train_batch_end(batch, logs=logs)\n-\n     def on_test_batch_begin(self, batch, logs=None):\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_test_batch_begin(batch, logs=logs)\n \n-    def on_test_batch_end(self, batch, logs=None):\n-        logs = logs or {}\n-        for callback in self.callbacks:\n-            callback.on_test_batch_end(batch, logs=logs)\n-\n     def on_predict_batch_begin(self, batch, logs=None):\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_predict_batch_begin(batch, logs=logs)\n \n+    def on_batch_end(self, batch, logs=None):\n+        if self._async_train:\n+            self._async_dispatch(self._on_batch_end, batch, logs)\n+        else:\n+            self._on_batch_end(batch, logs)\n+\n+    def on_train_batch_end(self, batch, logs=None):\n+        if self._async_train:\n+            self._async_dispatch(self._on_train_batch_end, batch, logs)\n+        else:\n+            self._on_train_batch_end(batch, logs)\n+\n+    def on_test_batch_end(self, batch, logs=None):\n+        if self._async_test:\n+            self._async_dispatch(self._on_test_batch_end, batch, logs)\n+        else:\n+            self._on_test_batch_end(batch, logs)\n+\n     def on_predict_batch_end(self, batch, logs=None):\n+        if self._async_predict:\n+            self._async_dispatch(self._on_predict_batch_end, batch, logs)\n+        else:\n+            self._on_predict_batch_end(batch, logs)\n+\n+    def _on_batch_end(self, batch, logs=None):\n+        logs = logs or {}\n+        logs = self._pythonify_logs(logs)\n+        for callback in self.callbacks:\n+            callback.on_batch_end(batch, logs=logs)\n+\n+    def _on_train_batch_end(self, batch, logs=None):\n+        logs = logs or {}\n+        logs = self._pythonify_logs(logs)\n+        for callback in self.callbacks:\n+            callback.on_train_batch_end(batch, logs=logs)\n+\n+    def _on_test_batch_end(self, batch, logs=None):\n+        logs = logs or {}\n+        logs = self._pythonify_logs(logs)\n+        for callback in self.callbacks:\n+            callback.on_test_batch_end(batch, logs=logs)\n+\n+    def _on_predict_batch_end(self, batch, logs=None):\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_predict_batch_end(batch, logs=logs)\n@@ -131,6 +214,9 @@ class CallbackList(Callback):\n             callback.on_train_begin(logs)\n \n     def on_train_end(self, logs=None):\n+        if self._async_train:\n+            self._clear_futures()\n+\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_train_end(logs)\n@@ -141,6 +227,9 @@ class CallbackList(Callback):\n             callback.on_test_begin(logs)\n \n     def on_test_end(self, logs=None):\n+        if self._async_test:\n+            self._clear_futures()\n+\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_test_end(logs)\n@@ -151,6 +240,9 @@ class CallbackList(Callback):\n             callback.on_predict_begin(logs)\n \n     def on_predict_end(self, logs=None):\n+        if self._async_predict:\n+            self._clear_futures()\n+\n         logs = logs or {}\n         for callback in self.callbacks:\n             callback.on_predict_end(logs)\n\n@@ -1,4 +1,3 @@\n-import concurrent.futures\n import inspect\n import platform\n import warnings\n@@ -967,21 +966,16 @@ class Trainer:\n             )\n \n     def _pythonify_logs(self, logs):\n-        with concurrent.futures.ThreadPoolExecutor() as executor:\n-            result = self._pythonify_logs_inner(logs, executor)\n-            for key, future_value in result.items():\n-                result[key] = future_value.result()\n-        return result\n-\n-    def _pythonify_logs_inner(self, logs, executor):\n         result = {}\n         for key, value in sorted(logs.items()):\n             if isinstance(value, dict):\n-                result.update(\n-                    self._pythonify_logs_inner(value, executor=executor)\n-                )\n+                result.update(self._pythonify_logs(value))\n             else:\n-                result[key] = executor.submit(_async_float_cast, value)\n+                try:\n+                    value = float(value)\n+                except:\n+                    pass\n+                result[key] = value\n         return result\n \n     def _get_metrics_result_or_logs(self, logs):\n@@ -1130,11 +1124,3 @@ def model_supports_jit(model):\n     if all(x.supports_jit for x in model._flatten_layers()):\n         return True\n     return False\n-\n-\n-def _async_float_cast(value):\n-    try:\n-        value = float(value)\n-    except:\n-        pass\n-    return value\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#38db71acb207fb1dda380a40df68636e45d46174", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 158 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -58,6 +58,10 @@ class CallbackList(Callback):\n         if callbacks:\n             if isinstance(callbacks, (list, tuple)):\n                 for cbk in callbacks:\n+                    if getattr(cbk, \"async_safe\", False):\n+                        # Callbacks that expose self.async_safe == True\n+                        # will be assumed safe for async dispatch.\n+                        continue\n                     if not utils.is_default(cbk.on_batch_end):\n                         async_train = False\n                     if not utils.is_default(cbk.on_train_batch_end):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c512128caf133a55d9565b2f39e8f646990abe2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 18 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n from keras.src.api_export import keras_export\n \n # Unique source of truth for the version number.\n-__version__ = \"3.5.0\"\n+__version__ = \"3.6.0\"\n \n \n @keras_export(\"keras.version\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#28983331be0935c4f412aab0b6f20afd27f012ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 164 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 9 | Methods Changed: 14 | Complexity Δ (Sum/Max): 19/19 | Churn Δ: 175 | Churn Cumulative: 1237 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,6 +4,7 @@ import pprint\n import zipfile\n \n import h5py\n+import numpy as np\n import rich.console\n \n from keras.src import backend\n@@ -547,7 +548,7 @@ class KerasFileEditor:\n         self.console.print(\"Weights structure\")\n         self._print_weights_structure(self.weights_dict, prefix=\" \" * 2)\n \n-    def _weights_summary_iteractive(self):\n+    def _weights_summary_interactive(self):\n \n         def _generate_html_weights(dictionary, margin_left=0, font_size=20):\n             html = \"\"\n@@ -563,29 +564,28 @@ class KerasFileEditor:\n                         + \"</details>\"\n                     )\n                 else:\n-                    if isinstance(value, h5py.Dataset):\n                     html += (\n                         f'<details style=\"margin-left: {margin_left}px;\">'\n                         + f'<summary style=\"font-size: {font_size}px;\">'\n                         + f\"{key} : shape={value.shape}\"\n                         + f\", dtype={value.dtype}</summary>\"\n-                            + \"</details>\"\n-                        )\n-                    else:\n-                        html += (\n-                            f'<details style=\"margin-left: {margin_left}px;\">'\n-                            + f'<summary style=\"font-size: {font_size}px;\">'\n-                            + f\"{key} </summary>\"\n+                        + f\"<div style=\"\n+                        f'\"margin-left: {margin_left}px;'\n+                        f'\"margin-top: {margin_left}px;\">'\n+                        + f\"{display_weight(value)}\"\n+                        + \"</div>\"\n                         + \"</details>\"\n                     )\n             return html\n \n         output = \"Weights structure\"\n+\n+        initialize_id_counter()\n         output += _generate_html_weights(self.weights_dict)\n+        ipython.display.display(ipython.display.HTML(output))\n \n \n def get_weight_spec_of_saveable(saveable, spec, visited_saveables=None):\n-\n     from keras.src.saving.keras_saveable import KerasSaveable\n \n     visited_saveables = visited_saveables or set()\n@@ -627,7 +627,6 @@ def get_weight_spec_of_saveable(saveable, spec, visited_saveables=None):\n \n \n def get_weight_spec_of_container(container, spec, visited_saveables):\n-\n     from keras.src.saving.keras_saveable import KerasSaveable\n \n     used_names = {}\n@@ -650,3 +649,157 @@ def get_weight_spec_of_container(container, spec, visited_saveables):\n             )\n             if sub_spec:\n                 spec[name] = sub_spec\n+\n+\n+def initialize_id_counter():\n+    global div_id_counter\n+    div_id_counter = 0\n+\n+\n+def increment_id_counter():\n+    global div_id_counter\n+    div_id_counter += 1\n+\n+\n+def get_id_counter():\n+    return div_id_counter\n+\n+\n+def display_weight(weight, axis=-1, threshold=16):\n+    def _find_factors_closest_to_sqrt(num):\n+        sqrt_num = int(np.sqrt(num))\n+\n+        for i in range(sqrt_num, 0, -1):\n+            if num % i == 0:\n+                M = i\n+                N = num // i\n+\n+                if M > N:\n+                    return N, M\n+                return M, N\n+\n+    def _color_from_value(value):\n+        scaled_value = (value + 3) / 6\n+        scaled_value = np.clip(scaled_value, 0, 1)\n+\n+        gray_value = int(255 * (1 - scaled_value))\n+\n+        return f\"rgba({gray_value}, {gray_value}, {gray_value}, 1)\"\n+\n+    def _reduce_3d_array_by_mean(arr, n, axis):\n+        if axis == 2:\n+            trimmed_arr = arr[:, :, : arr.shape[2] - (arr.shape[2] % n)]\n+            reshaped = np.reshape(\n+                trimmed_arr, (arr.shape[0], arr.shape[1], -1, n)\n+            )\n+            mean_values = np.mean(reshaped, axis=3)\n+\n+        elif axis == 1:\n+            trimmed_arr = arr[:, : arr.shape[1] - (arr.shape[1] % n), :]\n+            reshaped = np.reshape(\n+                trimmed_arr, (arr.shape[0], -1, n, arr.shape[2])\n+            )\n+            mean_values = np.mean(reshaped, axis=2)\n+\n+        elif axis == 0:\n+            trimmed_arr = arr[: arr.shape[0] - (arr.shape[0] % n), :, :]\n+            reshaped = np.reshape(\n+                trimmed_arr, (-1, n, arr.shape[1], arr.shape[2])\n+            )\n+            mean_values = np.mean(reshaped, axis=1)\n+\n+        else:\n+            raise ValueError(\"Axis must be 0, 1, or 2.\")\n+\n+        return mean_values\n+\n+    def _create_matrix_html(matrix, subplot_size=840):\n+        rows, cols, num_slices = matrix.shape\n+\n+        M, N = _find_factors_closest_to_sqrt(num_slices)\n+\n+        subplot_html = \"\"\n+        for i in range(num_slices):\n+            cell_html = \"\"\n+            for row in matrix[..., i]:\n+                for value in row:\n+                    color = _color_from_value(value)\n+                    cell_html += (\n+                        f'<div class=\"cell\" '\n+                        f'style=\"background-color: {color};\">'\n+                        f\"</div>\"\n+                    )\n+            subplot_html += f\"\"\"\n+                        <div class=\"matrix\">\n+                          {cell_html}\n+                        </div>\n+                        \"\"\"\n+\n+        cell_size = subplot_size // (N * cols)\n+\n+        increment_id_counter()\n+        div_id = get_id_counter()\n+\n+        html_code = f\"\"\"\n+            <div class=\"unique-container_{div_id}\">\n+                  <style>\n+                      .unique-container_{div_id} .subplots {{\n+                      display: inline-grid;\n+                      grid-template-columns: repeat({N}, 1fr);\n+                      column-gap: 5px;  /* Minimal horizontal gap */\n+                      row-gap: 5px;     /* Small vertical gap */\n+                      margin: 0;\n+                      padding: 0;\n+                    }}\n+                    .unique-container_{div_id} .matrix {{\n+                      display: inline-grid;\n+                      grid-template-columns: repeat({cols}, {cell_size}px);\n+                      grid-template-rows: repeat({rows}, {cell_size}px);\n+                      gap: 1px;\n+                      margin: 0;\n+                      padding: 0;\n+                    }}\n+                    .unique-container_{div_id} .cell {{\n+                      width: {cell_size}px;\n+                      height: {cell_size}px;\n+                      display: flex;\n+                      justify-content: center;\n+                      align-items: center;\n+                      font-size: 5px;\n+                      font-weight: bold;\n+                      color: white;\n+                    }}\n+                     .unique-container_{div_id} {{\n+                      margin-top: 20px;\n+                      margin-bottom: 20px;\n+                    }}\n+                  </style>\n+                  <div class=\"subplots\">\n+                    {subplot_html}\n+                  </div>\n+                  </div>\n+                \"\"\"\n+\n+        return html_code\n+\n+    if weight.ndim == 1:\n+        weight = weight[..., np.newaxis]\n+\n+    weight = np.swapaxes(weight, axis, -1)\n+    weight = weight.reshape(-1, weight.shape[-1])\n+\n+    M, N = _find_factors_closest_to_sqrt(weight.shape[0])\n+    weight = weight.reshape(M, N, weight.shape[-1])\n+\n+    for reduce_axis in [0, 1, 2]:\n+        if weight.shape[reduce_axis] > threshold:\n+            weight = _reduce_3d_array_by_mean(\n+                weight,\n+                weight.shape[reduce_axis] // threshold,\n+                axis=reduce_axis,\n+            )\n+\n+    weight = (weight - weight.min()) / (weight.max() - weight.min() + 1e-5)\n+\n+    html_code = _create_matrix_html(weight)\n+    return html_code\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#568ca05ee95104ab34ccdd9e469ee7c68140baa9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 1240 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -109,6 +109,9 @@ class KerasFileEditor:\n \n     def summary(self):\n         \"\"\"Prints the weight structure of the opened file.\"\"\"\n+        if is_ipython_notebook():\n+            self._weights_summary_interactive()\n+        else:\n             self._weights_summary_cli()\n \n     def compare_to(self, reference_model):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#09a85a226a78da3c00ff0be9db141227d64371b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 22 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -31,6 +31,10 @@ class ModelCheckpointTest(testing.TestCase):\n         h5py is None,\n         reason=\"`h5py` is a required dependency for `ModelCheckpoint` tests.\",\n     )\n+    @pytest.mark.skipif(\n+        testing.jax_uses_gpu(),\n+        reason=\"Mysterious core dump on CI after upgrading JAX\",\n+    )\n     @pytest.mark.requires_trainable_backend\n     def test_model_checkpoint_options(self):\n         def get_model():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#cbe0bea2f6c9a64e696664253d32617f142622b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 392 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,6 +11,7 @@ from keras.src.dtype_policies.dtype_policy import set_dtype_policy\n from keras.src.dtype_policies.dtype_policy_map import DTypePolicyMap\n \n \n+@pytest.mark.skipif(testing.jax_uses_gpu(), reason=\"Leads to core dumps on CI\")\n class DTypePolicyMapTest(testing.TestCase):\n     def setUp(self):\n         super().setUp()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ef407dbdc4b2d827a4509572904d6a6c539064e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 169 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -53,6 +53,7 @@ def get_model(type=\"sequential\", input_shape=(10,), layer_list=None):\n     backend.backend() not in (\"tensorflow\", \"jax\"),\n     reason=\"Export only currently supports the TF and JAX backends.\",\n )\n+@pytest.mark.skipif(testing.jax_uses_gpu(), reason=\"Leads to core dumps on CI\")\n class ExportArchiveTest(testing.TestCase):\n     @parameterized.named_parameters(\n         named_product(model_type=[\"sequential\", \"functional\", \"subclass\"])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#93cb95443d9150f3e26c5540d2313e3014649138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 62 | Churn Cumulative: 758 | Contributors (this commit): 8 | Commits (past 90d): 13 | Contributors (cumulative): 11 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -389,6 +389,49 @@ class ModelTest(testing.TestCase):\n         )\n         self.assertListEqual(hist_keys, ref_keys)\n \n+    def test_functional_dict_outputs_dict_losses_with_undefined_loss(self):\n+        model = _get_model_multi_outputs_dict()\n+        self.assertIsInstance(model, Functional)\n+        x = np.random.rand(8, 3)\n+        y1 = np.random.rand(8, 1)\n+        y2 = np.random.randint(0, 2, (8, 1))\n+        model.compile(\n+            optimizer=\"sgd\",\n+            loss={\n+                \"output_b\": [\"binary_crossentropy\"],\n+            },\n+            metrics={\n+                \"output_b\": [\"mean_squared_error\", \"accuracy\"],\n+            },\n+            weighted_metrics={\n+                \"output_b\": [\"mean_squared_error\", \"accuracy\"],\n+            },\n+        )\n+        # Check dict outputs.\n+        outputs = model.predict(x)\n+        self.assertIsInstance(outputs, dict)\n+        self.assertEqual(outputs[\"output_a\"].shape, (8, 1))\n+        self.assertEqual(outputs[\"output_b\"].shape, (8, 1))\n+        # Fit the model to make sure compile_metrics are built\n+        hist = model.fit(\n+            x,\n+            {\"output_a\": y1, \"output_b\": y2},\n+            batch_size=2,\n+            epochs=1,\n+            verbose=0,\n+        )\n+        hist_keys = sorted(hist.history.keys())\n+        ref_keys = sorted(\n+            [\n+                \"loss\",\n+                \"output_b_accuracy\",\n+                \"output_b_mean_squared_error\",\n+                \"output_b_weighted_accuracy\",\n+                \"output_b_weighted_mean_squared_error\",\n+            ]\n+        )\n+        self.assertListEqual(hist_keys, ref_keys)\n+\n     def test_functional_list_outputs_dict_losses_metrics(self):\n         model = _get_model_multi_outputs_list()\n         self.assertIsInstance(model, Functional)\n\n@@ -591,14 +591,21 @@ class CompileLoss(losses_module.Loss):\n         filtered_y_pred_keys,\n         output_names,\n     ):\n-        if len(filtered_y_true_keys) > 0:\n-            if isinstance(y_true, dict):\n-                for k in filtered_y_true_keys:\n-                    y_true.pop(k)\n+        if len(filtered_y_true_keys) > 0 and isinstance(y_true, dict):\n+            # Modifying data in-place can cause errors in TF's graph.\n+            filtered_y_true = {}\n+            for k, v in y_true.items():\n+                if k not in filtered_y_true_keys:\n+                    filtered_y_true[k] = v\n+            y_true = filtered_y_true\n         if len(filtered_y_pred_keys) > 0:\n             if isinstance(y_pred, dict):\n-                for k in filtered_y_pred_keys:\n-                    y_pred.pop(k)\n+                # Modifying data in-place can cause errors in TF's graph.\n+                filtered_y_pred = {}\n+                for k, v in y_pred.items():\n+                    if k not in filtered_y_pred_keys:\n+                        filtered_y_pred[k] = v\n+                y_pred = filtered_y_pred\n             elif output_names is not None:\n                 y_pred = []\n                 for x, output_name in zip(tree.flatten(y_pred), output_names):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3fb091f6c37271cfe453d30c6797b62e88e7e319", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 12 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -40,19 +40,19 @@ class DeviceTest(testing.TestCase):\n \n         with backend.device_scope(\"cpu:0\"):\n             t = backend.numpy.ones((2, 1))\n-            self.assertEqual(t.device(), jax.devices(\"cpu\")[0])\n+            self.assertEqual(t.device, jax.devices(\"cpu\")[0])\n         with backend.device_scope(\"CPU:0\"):\n             t = backend.numpy.ones((2, 1))\n-            self.assertEqual(t.device(), jax.devices(\"cpu\")[0])\n+            self.assertEqual(t.device, jax.devices(\"cpu\")[0])\n \n         # When leaving the scope, the device should be back with gpu:0\n         t = backend.numpy.ones((2, 1))\n-        self.assertEqual(t.device(), jax.devices(\"gpu\")[0])\n+        self.assertEqual(t.device, jax.devices(\"gpu\")[0])\n \n         # Also verify the explicit gpu device\n         with backend.device_scope(\"gpu:0\"):\n             t = backend.numpy.ones((2, 1))\n-            self.assertEqual(t.device(), jax.devices(\"gpu\")[0])\n+            self.assertEqual(t.device, jax.devices(\"gpu\")[0])\n \n     @pytest.mark.skipif(backend.backend() != \"jax\", reason=\"jax only\")\n     def test_invalid_jax_device(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#57677d85bb3962fff1f8b9ae611f4151a1416382", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1250 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -553,14 +553,16 @@ class KerasFileEditor:\n \n     def _weights_summary_interactive(self):\n \n-        def _generate_html_weights(dictionary, margin_left=0, font_size=20):\n+        def _generate_html_weights(dictionary, margin_left=0, font_size=1):\n             html = \"\"\n             for key, value in dictionary.items():\n                 if isinstance(value, dict) and value:\n                     html += (\n                         f'<details style=\"margin-left: {margin_left}px;\">'\n-                        + f'<summary style=\"font-size: {font_size}px;\">'\n-                        + f\"{key}</summary>\"\n+                        + '<summary style=\"'\n+                        + f'font-size: {font_size}em; '\n+                        + \"font-weight: 'bold';\"\n+                        + f'\">{key}</summary>'\n                         + _generate_html_weights(\n                             value, margin_left + 20, font_size - 1\n                         )\n@@ -569,7 +571,7 @@ class KerasFileEditor:\n                 else:\n                     html += (\n                         f'<details style=\"margin-left: {margin_left}px;\">'\n-                        + f'<summary style=\"font-size: {font_size}px;\">'\n+                        + f'<summary style=\"font-size: {font_size}em;\">'\n                         + f\"{key} : shape={value.shape}\"\n                         + f\", dtype={value.dtype}</summary>\"\n                         + f\"<div style=\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#aeca580209f99e49df9a4a2fbf4f7442bf74f7c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 31 | Churn Cumulative: 1372 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -560,7 +560,7 @@ class KerasFileEditor:\n                     html += (\n                         f'<details style=\"margin-left: {margin_left}px;\">'\n                         + '<summary style=\"'\n-                        + f'font-size: {font_size}em; '\n+                        + f\"font-size: {font_size}em; \"\n                         + \"font-weight: 'bold';\"\n                         + f'\">{key}</summary>'\n                         + _generate_html_weights(\n@@ -683,13 +683,8 @@ def display_weight(weight, axis=-1, threshold=16):\n                     return N, M\n                 return M, N\n \n-    def _color_from_value(value):\n-        scaled_value = (value + 3) / 6\n-        scaled_value = np.clip(scaled_value, 0, 1)\n-\n-        gray_value = int(255 * (1 - scaled_value))\n-\n-        return f\"rgba({gray_value}, {gray_value}, {gray_value}, 1)\"\n+    def _color_from_rbg(value):\n+        return f\"rgba({value[0]}, {value[1]}, {value[2]}, 1)\"\n \n     def _reduce_3d_array_by_mean(arr, n, axis):\n         if axis == 2:\n@@ -723,12 +718,25 @@ def display_weight(weight, axis=-1, threshold=16):\n \n         M, N = _find_factors_closest_to_sqrt(num_slices)\n \n+        try:\n+            from matplotlib import cm\n+        except ImportError:\n+            cm = None\n+        if cm:\n+            rgb_matrix = cm.jet(matrix)\n+        else:\n+            rgb_matrix = (matrix - np.min(matrix)) / (\n+                np.max(matrix) - np.min(matrix)\n+            )\n+            rgb_matrix = np.stack([rgb_matrix, rgb_matrix, rgb_matrix], axis=-1)\n+        rgb_matrix = (rgb_matrix[..., :3] * 255).astype(\"uint8\")\n+\n         subplot_html = \"\"\n         for i in range(num_slices):\n             cell_html = \"\"\n-            for row in matrix[..., i]:\n-                for value in row:\n-                    color = _color_from_value(value)\n+            for row in rgb_matrix[..., i, :]:\n+                for rgb in row:\n+                    color = _color_from_rbg(rgb)\n                     cell_html += (\n                         f'<div class=\"cell\" '\n                         f'style=\"background-color: {color};\">'\n\n@@ -34,6 +34,7 @@ class SavingTest(testing.TestCase):\n \n         editor = KerasFileEditor(temp_filepath)\n         editor.summary()\n+        editor._weights_summary_interactive()\n \n         target_model = get_target_model()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
