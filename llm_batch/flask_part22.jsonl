{"custom_id": "flask#c3844d11026f84400d5a088dd5c24c6a4a04dcd1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 909 | Contributors (this commit): 12 | Commits (past 90d): 14 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -466,8 +466,12 @@ def send_from_directory(directory, filename, **options):\n     return send_file(filename, conditional=True, **options)\n \n \n-def get_package_path(name):\n-    \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n+def get_root_path(name):\n+    \"\"\"Returns the path to a package or cwd if that cannot be found.  This\n+    returns the path of a package or the folder that contains a module.\n+\n+    Not to be confused with the package path returned by :func:`find_package`.\n+    \"\"\"\n     try:\n         return os.path.abspath(os.path.dirname(sys.modules[name].__file__))\n     except (KeyError, AttributeError):\n@@ -549,7 +553,7 @@ class _PackageBoundObject(object):\n         self.template_folder = template_folder\n \n         #: Where is the app root located?\n-        self.root_path = get_package_path(self.import_name)\n+        self.root_path = get_root_path(self.import_name)\n \n         self._static_folder = None\n         self._static_url_path = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d6f86bc87253c1dc1cf0c156f421214c38c3202", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 923 | Contributors (this commit): 12 | Commits (past 90d): 15 | Contributors (cumulative): 12 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -466,23 +466,29 @@ def send_from_directory(directory, filename, **options):\n     return send_file(filename, conditional=True, **options)\n \n \n-def get_root_path(name):\n+def get_root_path(import_name):\n     \"\"\"Returns the path to a package or cwd if that cannot be found.  This\n     returns the path of a package or the folder that contains a module.\n \n     Not to be confused with the package path returned by :func:`find_package`.\n     \"\"\"\n+    __import__(import_name)\n     try:\n-        return os.path.abspath(os.path.dirname(sys.modules[name].__file__))\n-    except (KeyError, AttributeError):\n+        directory = os.path.dirname(sys.modules[import_name].__file__)\n+        return os.path.abspath(directory)\n+    except AttributeError:\n         return os.getcwd()\n \n \n def find_package(import_name):\n     \"\"\"Finds a package and returns the prefix (or None if the package is\n     not installed) as well as the folder that contains the package or\n-    module as a tuple.\n+    module as a tuple.  The package path returned is the module that would\n+    have to be added to the pythonpath in order to make it possible to\n+    import the module.  The prefix is the path below which a UNIX like\n+    folder structure exists (lib, share etc.).\n     \"\"\"\n+    __import__(import_name)\n     root_mod = sys.modules[import_name.split('.')[0]]\n     package_path = getattr(root_mod, '__file__', None)\n     if package_path is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb9a14e1581fd379f25986bb206fe0d8fdc6b1a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 2501 | Contributors (this commit): 11 | Commits (past 90d): 31 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1008,14 +1008,8 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n \n class InstanceTestCase(unittest.TestCase):\n \n-    def test_uninstalled_module_paths(self):\n+    def test_explicit_instance_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n-        app = flask.Flask(__name__)\n-        self.assertEqual(app.instance_path, os.path.join(here, 'instance'))\n-\n-        app = flask.Flask(__name__, instance_path=here)\n-        self.assertEqual(app.instance_path, here)\n-\n         try:\n             flask.Flask(__name__, instance_path='instance')\n         except ValueError, e:\n@@ -1023,6 +1017,14 @@ class InstanceTestCase(unittest.TestCase):\n         else:\n             self.fail('Expected value error')\n \n+        app = flask.Flask(__name__, instance_path=here)\n+        self.assertEqual(app.instance_path, here)\n+\n+    def test_uninstalled_module_paths(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        app = flask.Flask(__name__)\n+        self.assertEqual(app.instance_path, os.path.join(here, 'instance'))\n+\n     def test_uninstalled_package_paths(self):\n         from blueprintapp import app\n         here = os.path.abspath(os.path.dirname(__file__))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#45d963d6daa4315388530d58c777b838d5465c65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2442 | Contributors (this commit): 14 | Commits (past 90d): 40 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -255,7 +255,7 @@ class Flask(_PackageBoundObject):\n     #: the session interface to use.  By default an instance of\n     #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n     #:\n-    #: .. versionadded:: 0.7\n+    #: .. versionadded:: 0.8\n     session_interface = SecureCookieSessionInterface()\n \n     def __init__(self, import_name, static_path=None, static_url_path=None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#68ec5a30687a89a56406d8abd603b51a6645856e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 4 | Methods Changed: 12 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 66 | Churn Cumulative: 5459 | Contributors (this commit): 17 | Commits (past 90d): 85 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -942,7 +942,8 @@ class Flask(_PackageBoundObject):\n                         :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n         def decorator(f):\n-            self.add_url_rule(rule, None, f, **options)\n+            endpoint = options.pop(\"endpoint\", None)\n+            self.add_url_rule(rule, endpoint, f, **options)\n             return f\n         return decorator\n \n\n@@ -157,7 +157,8 @@ class Blueprint(_PackageBoundObject):\n         :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n         def decorator(f):\n-            self.add_url_rule(rule, f.__name__, f, **options)\n+            endpoint = options.pop(\"endpoint\", f.__name__)\n+            self.add_url_rule(rule, endpoint, f, **options)\n             return f\n         return decorator\n \n\n@@ -1005,6 +1005,32 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             rv = c.post('/foo', data={}, follow_redirects=True)\n             self.assertEqual(rv.data, 'success')\n \n+    def test_route_decorator_custom_endpoint(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+\n+        @app.route('/foo/')\n+        def foo():\n+            return flask.request.endpoint\n+\n+        @app.route('/bar/', endpoint='bar')\n+        def for_bar():\n+            return flask.request.endpoint\n+\n+        @app.route('/bar/123', endpoint='123')\n+        def for_bar_foo():\n+            return flask.request.endpoint\n+\n+        with app.test_request_context():\n+            assert flask.url_for('foo') == '/foo/'\n+            assert flask.url_for('bar') == '/bar/'\n+            assert flask.url_for('123') == '/bar/123'\n+\n+        c = app.test_client()\n+        self.assertEqual(c.get('/foo/').data, 'foo')\n+        self.assertEqual(c.get('/bar/').data, 'bar')\n+        self.assertEqual(c.get('/bar/123').data, '123')\n+\n \n class InstanceTestCase(unittest.TestCase):\n \n@@ -1687,6 +1713,40 @@ class BlueprintTestCase(unittest.TestCase):\n         self.assertEqual(c.get('/').data, '1')\n         self.assertEqual(c.get('/page/2').data, '2')\n \n+    def test_route_decorator_custom_endpoint(self):\n+\n+        bp = flask.Blueprint('bp', __name__)\n+\n+        @bp.route('/foo')\n+        def foo():\n+            return flask.request.endpoint\n+\n+        @bp.route('/bar', endpoint='bar')\n+        def foo_bar():\n+            return flask.request.endpoint\n+\n+        @bp.route('/bar/123', endpoint='123')\n+        def foo_bar_foo():\n+            return flask.request.endpoint\n+\n+        @bp.route('/bar/foo')\n+        def bar_foo():\n+            return flask.request.endpoint\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+\n+        @app.route('/')\n+        def index():\n+            return flask.request.endpoint\n+\n+        c = app.test_client()\n+        self.assertEqual(c.get('/').data, 'index')\n+        self.assertEqual(c.get('/py/foo').data, 'bp.foo')\n+        self.assertEqual(c.get('/py/bar').data, 'bp.bar')\n+        self.assertEqual(c.get('/py/bar/123').data, 'bp.123')\n+        self.assertEqual(c.get('/py/bar/foo').data, 'bp.bar_foo')\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#04e87a93def1593dd886931e0f9e1d4f37f8d243", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2448 | Contributors (this commit): 14 | Commits (past 90d): 42 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -938,6 +938,9 @@ class Flask(_PackageBoundObject):\n                           subdomain matching is in use.\n         :param strict_slashes: can be used to disable the strict slashes\n                                setting for this rule.  See above.\n+        :param endpoint: Since version 0.8 you can also pass the enpoint,\n+                         it will be used instead of generating the endpoint\n+                         from the function name.\n         :param options: other options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c844d02f1c7558e959891de75494cffd22dc323f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): -4/2 | Churn Δ: 35 | Churn Cumulative: 5235 | Contributors (this commit): 17 | Commits (past 90d): 82 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -236,6 +236,7 @@ class Flask(_PackageBoundObject):\n         'USE_X_SENDFILE':                       False,\n         'LOGGER_NAME':                          None,\n         'SERVER_NAME':                          None,\n+        'APPLICATION_ROOT':                     None,\n         'MAX_CONTENT_LENGTH':                   None,\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False\n\n@@ -127,6 +127,13 @@ class SessionInterface(object):\n             # chop of the port which is usually not supported by browsers\n             return '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n \n+    def get_cookie_path(self, app):\n+        \"\"\"Returns the path for which the cookie should be valid.  The\n+        default implementation uses the value from the ``APPLICATION_ROOT``\n+        configuration variable or uses ``/`` if it's `None`.\n+        \"\"\"\n+        return app.config['APPLICATION_ROOT'] or '/'\n+\n     def get_expiration_time(self, app, session):\n         \"\"\"A helper method that returns an expiration date for the session\n         or `None` if the session is linked to the browser session.  The\n@@ -169,9 +176,10 @@ class SecureCookieSessionInterface(SessionInterface):\n     def save_session(self, app, session, response):\n         expires = self.get_expiration_time(app, session)\n         domain = self.get_cookie_domain(app)\n+        path = self.get_cookie_path(app)\n         if session.modified and not session:\n-            response.delete_cookie(app.session_cookie_name,\n+            response.delete_cookie(app.session_cookie_name, path=path,\n                                    domain=domain)\n         else:\n-            session.save_cookie(response, app.session_cookie_name,\n+            session.save_cookie(response, app.session_cookie_name, path=path,\n                                 expires=expires, httponly=True, domain=domain)\n\n@@ -339,6 +339,28 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n         assert 'httponly' in rv.headers['set-cookie'].lower()\n \n+    def test_session_using_application_root(self):\n+        class PrefixPathMiddleware(object):\n+            def __init__(self, app, prefix):\n+                self.app = app\n+                self.prefix = prefix\n+            def __call__(self, environ, start_response):\n+                environ['SCRIPT_NAME'] = self.prefix\n+                return self.app(environ, start_response)\n+\n+        app = flask.Flask(__name__)\n+        app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, '/bar')\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            APPLICATION_ROOT='/bar'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com:8080/')\n+        assert 'path=/bar' in rv.headers['set-cookie'].lower()\n+\n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n         def expect_exception(f, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a5da2c98f3ed2f9fe254e3b61799b06fa230a175", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 11/6 | Churn Δ: 105 | Churn Cumulative: 5210 | Contributors (this commit): 17 | Commits (past 90d): 78 | Contributors (cumulative): 27 | DMM Complexity: 0.6206896551724138\n\nDIFF:\n@@ -706,6 +706,8 @@ class Flask(_PackageBoundObject):\n                 rv = c.get('/?vodka=42')\n                 assert request.args['vodka'] == '42'\n \n+        See :class:`~flask.testing.TestClient` for more information.\n+\n         .. versionchanged:: 0.4\n            added support for `with` block usage for the client.\n \n\n@@ -10,19 +10,69 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n \n \n class FlaskClient(Client):\n-    \"\"\"Works like a regular Werkzeug test client but has some\n-    knowledge about how Flask works to defer the cleanup of the\n-    request context stack to the end of a with body when used\n-    in a with statement.\n+    \"\"\"Works like a regular Werkzeug test client but has some knowledge about\n+    how Flask works to defer the cleanup of the request context stack to the\n+    end of a with body when used in a with statement.  For general information\n+    about how to use this class refer to :class:`werkzeug.test.Client`.\n+\n+    Basic usage is outlined in the :ref:`testing` chapter.\n     \"\"\"\n \n     preserve_context = context_preserved = False\n \n+    @contextmanager\n+    def session_transaction(self, *args, **kwargs):\n+        \"\"\"When used in combination with a with statement this opens a\n+        session transaction.  This can be used to modify the session that\n+        the test client uses.  Once the with block is left the session is\n+        stored back.\n+\n+            with client.session_transaction() as session:\n+                session['value'] = 42\n+\n+        Internally this is implemented by going through a temporary test\n+        request context and since session handling could depend on\n+        request variables this function accepts the same arguments as\n+        :meth:`~flask.Flask.test_request_context` which are directly\n+        passed through.\n+        \"\"\"\n+        app = self.application\n+        environ_overrides = kwargs.pop('environ_overrides', {})\n+        if self.cookie_jar is not None:\n+            self.cookie_jar.inject_wsgi(environ_overrides)\n+        outer_reqctx = _request_ctx_stack.top\n+        with app.test_request_context(*args, **kwargs) as c:\n+            sess = app.open_session(c.request)\n+            if sess is None:\n+                raise RuntimeError('Session backend did not open a session. '\n+                                   'Check the configuration')\n+\n+            # Since we have to open a new request context for the session\n+            # handling we want to make sure that we hide out own context\n+            # from the caller.  By pushing the original request context\n+            # (or None) on top of this and popping it we get exactly that\n+            # behavior.  It's important to not use the push and pop\n+            # methods of the actual request context object since that would\n+            # mean that cleanup handlers are called\n+            _request_ctx_stack.push(outer_reqctx)\n+            try:\n+                yield sess\n+            finally:\n+                _request_ctx_stack.pop()\n+\n+            resp = app.response_class()\n+            if not app.session_interface.is_null_session(sess):\n+                app.save_session(sess, resp)\n+            if self.cookie_jar is not None:\n+                headers = resp.get_wsgi_headers(c.request.environ)\n+                self.cookie_jar.extract_wsgi(c.request.environ, headers)\n+\n     def open(self, *args, **kwargs):\n         if self.context_preserved:\n             _request_ctx_stack.pop()\n\n@@ -1028,6 +1028,50 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             self.assertEqual(rv.data, 'success')\n \n \n+class TestToolsTestCase(unittest.TestCase):\n+\n+    def test_session_transactions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.secret_key = 'testing'\n+\n+        @app.route('/')\n+        def index():\n+            return unicode(flask.session['foo'])\n+\n+        with app.test_client() as c:\n+            with c.session_transaction() as sess:\n+                self.assertEqual(len(sess), 0)\n+                sess['foo'] = [42]\n+                self.assertEqual(len(sess), 1)\n+            rv = c.get('/')\n+            self.assertEqual(rv.data, '[42]')\n+\n+    def test_session_transactions_no_null_sessions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        with app.test_client() as c:\n+            try:\n+                with c.session_transaction() as sess:\n+                    pass\n+            except RuntimeError, e:\n+                self.assert_('Session backend did not open a session' in str(e))\n+            else:\n+                self.fail('Expected runtime error')\n+\n+    def test_session_transactions_keep_context(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.secret_key = 'testing'\n+\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            req = flask.request._get_current_object()\n+            with c.session_transaction():\n+                self.assert_(req is flask.request._get_current_object())\n+\n+\n class InstanceTestCase(unittest.TestCase):\n \n     def test_explicit_instance_paths(self):\n@@ -2209,6 +2253,7 @@ def suite():\n     suite.addTest(unittest.makeSuite(SubdomainTestCase))\n     suite.addTest(unittest.makeSuite(ViewTestCase))\n     suite.addTest(unittest.makeSuite(DeprecationsTestCase))\n+    suite.addTest(unittest.makeSuite(TestToolsTestCase))\n     suite.addTest(unittest.makeSuite(InstanceTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#001a5128d87e2cb934d14244d901d47e01980873", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 15 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 34 | Churn Cumulative: 2662 | Contributors (this commit): 11 | Commits (past 90d): 33 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -95,7 +95,11 @@ def emits_module_deprecation_warning(f):\n     return update_wrapper(new_f, f)\n \n \n-class ContextTestCase(unittest.TestCase):\n+class FlaskTestCase(unittest.TestCase):\n+    pass\n+\n+\n+class ContextTestCase(FlaskTestCase):\n \n     def test_context_binding(self):\n         app = flask.Flask(__name__)\n@@ -172,7 +176,7 @@ class ContextTestCase(unittest.TestCase):\n             raise AssertionError('some kind of exception expected')\n \n \n-class BasicFunctionalityTestCase(unittest.TestCase):\n+class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_options_work(self):\n         app = flask.Flask(__name__)\n@@ -1028,7 +1032,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             self.assertEqual(rv.data, 'success')\n \n \n-class TestToolsTestCase(unittest.TestCase):\n+class TestToolsTestCase(FlaskTestCase):\n \n     def test_session_transactions(self):\n         app = flask.Flask(__name__)\n@@ -1072,7 +1076,7 @@ class TestToolsTestCase(unittest.TestCase):\n                 self.assert_(req is flask.request._get_current_object())\n \n \n-class InstanceTestCase(unittest.TestCase):\n+class InstanceTestCase(FlaskTestCase):\n \n     def test_explicit_instance_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n@@ -1163,7 +1167,7 @@ class InstanceTestCase(unittest.TestCase):\n             sys.modules['myapp'] = None\n \n \n-class JSONTestCase(unittest.TestCase):\n+class JSONTestCase(FlaskTestCase):\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n@@ -1239,7 +1243,7 @@ class JSONTestCase(unittest.TestCase):\n         test_modified_url_encoding = None\n \n \n-class TemplatingTestCase(unittest.TestCase):\n+class TemplatingTestCase(FlaskTestCase):\n \n     def test_context_processing(self):\n         app = flask.Flask(__name__)\n@@ -1361,7 +1365,7 @@ class TemplatingTestCase(unittest.TestCase):\n         assert rv.data == 'Hello Custom World!'\n \n \n-class ModuleTestCase(unittest.TestCase):\n+class ModuleTestCase(FlaskTestCase):\n \n     @emits_module_deprecation_warning\n     def test_basic_module(self):\n@@ -1587,7 +1591,7 @@ class ModuleTestCase(unittest.TestCase):\n         assert c.get('/foo/bar').data == 'bar'\n \n \n-class BlueprintTestCase(unittest.TestCase):\n+class BlueprintTestCase(FlaskTestCase):\n \n     def test_blueprint_specific_error_handling(self):\n         frontend = flask.Blueprint('frontend', __name__)\n@@ -1754,7 +1758,7 @@ class BlueprintTestCase(unittest.TestCase):\n         self.assertEqual(c.get('/page/2').data, '2')\n \n \n-class SendfileTestCase(unittest.TestCase):\n+class SendfileTestCase(FlaskTestCase):\n \n     def test_send_file_regular(self):\n         app = flask.Flask(__name__)\n@@ -1854,7 +1858,7 @@ class SendfileTestCase(unittest.TestCase):\n             assert options['filename'] == 'index.txt'\n \n \n-class LoggingTestCase(unittest.TestCase):\n+class LoggingTestCase(FlaskTestCase):\n \n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n@@ -1938,7 +1942,7 @@ class LoggingTestCase(unittest.TestCase):\n             assert rv.data == 'Hello Server Error'\n \n \n-class ConfigTestCase(unittest.TestCase):\n+class ConfigTestCase(FlaskTestCase):\n \n     def common_object_test(self, app):\n         assert app.secret_key == 'devkey'\n@@ -1998,7 +2002,7 @@ class ConfigTestCase(unittest.TestCase):\n         assert not app.config.from_pyfile('missing.cfg', silent=True)\n \n \n-class SubdomainTestCase(unittest.TestCase):\n+class SubdomainTestCase(FlaskTestCase):\n \n     def test_basic_support(self):\n         app = flask.Flask(__name__)\n@@ -2061,7 +2065,7 @@ class SubdomainTestCase(unittest.TestCase):\n         assert rv.data == 'Outside'\n \n \n-class TestSignals(unittest.TestCase):\n+class TestSignals(FlaskTestCase):\n \n     def test_template_rendered(self):\n         app = flask.Flask(__name__)\n@@ -2144,7 +2148,7 @@ class TestSignals(unittest.TestCase):\n             flask.got_request_exception.disconnect(record, app)\n \n \n-class ViewTestCase(unittest.TestCase):\n+class ViewTestCase(FlaskTestCase):\n \n     def common_test(self, app):\n         c = app.test_client()\n@@ -2219,7 +2223,7 @@ class ViewTestCase(unittest.TestCase):\n         self.assertEqual(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n \n \n-class DeprecationsTestCase(unittest.TestCase):\n+class DeprecationsTestCase(FlaskTestCase):\n \n     def test_init_jinja_globals(self):\n         class MyFlask(flask.Flask):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f051939d8ba1c5ec585fd4db1f83237a66020c0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 2674 | Contributors (this commit): 11 | Commits (past 90d): 34 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -96,7 +96,15 @@ def emits_module_deprecation_warning(f):\n \n \n class FlaskTestCase(unittest.TestCase):\n-    pass\n+\n+    def ensure_clean_request_context(self):\n+        # make sure we're not leaking a request context since we are\n+        # testing flask internally in debug mode in a few cases\n+        self.assertEqual(flask._request_ctx_stack.top, None)\n+\n+    def tearDown(self):\n+        unittest.TestCase.tearDown(self)\n+        self.ensure_clean_request_context()\n \n \n class ContextTestCase(FlaskTestCase):\n@@ -1881,8 +1889,8 @@ class LoggingTestCase(FlaskTestCase):\n         @app.route('/exc')\n         def exc():\n             1/0\n-        c = app.test_client()\n \n+        with app.test_client() as c:\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#311ac0f533bf5a308200a51b861a9728b9223276", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 133 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -108,6 +108,8 @@ class FlaskClient(Client):\n             self.context_preserved = _request_ctx_stack.top is not old\n \n     def __enter__(self):\n+        if self.preserve_context:\n+            raise RuntimeError('Cannot nest client invocations')\n         self.preserve_context = True\n         return self\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#03a71e022919a0e1bff6606400e9d5ae234b8244", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 53 | Churn Cumulative: 3180 | Contributors (this commit): 12 | Commits (past 90d): 49 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -166,6 +166,8 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n         the :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n+        if endpoint:\n+            assert '.' not in endpoint, \"Blueprint endpoint's should not contain dot's\"\n         self.record(lambda s:\n             s.add_url_rule(rule, endpoint, view_func, **options))\n \n\n@@ -1747,6 +1747,57 @@ class BlueprintTestCase(unittest.TestCase):\n         self.assertEqual(c.get('/py/bar/123').data, 'bp.123')\n         self.assertEqual(c.get('/py/bar/foo').data, 'bp.bar_foo')\n \n+    def test_route_decorator_custom_endpoint_with_dots(self):\n+        bp = flask.Blueprint('bp', __name__)\n+\n+        @bp.route('/foo')\n+        def foo():\n+            return flask.request.endpoint\n+\n+        try:\n+            @bp.route('/bar', endpoint='bar.bar')\n+            def foo_bar():\n+                return flask.request.endpoint\n+        except AssertionError:\n+            pass\n+        else:\n+            raise AssertionError('expected AssertionError not raised')\n+\n+        try:\n+            @bp.route('/bar/123', endpoint='bar.123')\n+            def foo_bar_foo():\n+                return flask.request.endpoint\n+        except AssertionError:\n+            pass\n+        else:\n+            raise AssertionError('expected AssertionError not raised')\n+\n+        def foo_foo_foo():\n+            pass\n+\n+        self.assertRaises(\n+            AssertionError,\n+            lambda: bp.add_url_rule(\n+                '/bar/123', endpoint='bar.123', view_func=foo_foo_foo\n+            )\n+        )\n+\n+        self.assertRaises(\n+            AssertionError,\n+            bp.route('/bar/123', endpoint='bar.123'),\n+            lambda: None\n+        )\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+\n+        c = app.test_client()\n+        self.assertEqual(c.get('/py/foo').data, 'bp.foo')\n+        # The rule's din't actually made it through\n+        rv = c.get('/py/bar')\n+        assert rv.status_code == 404\n+        rv = c.get('/py/bar/123')\n+        assert rv.status_code == 404\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e853a0f73959ad12cdabc2d74324cdc9329ae794", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 28 | Files Changed: 3 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 62 | Churn Cumulative: 5371 | Contributors (this commit): 17 | Commits (past 90d): 81 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -706,7 +706,7 @@ class Flask(_PackageBoundObject):\n                 rv = c.get('/?vodka=42')\n                 assert request.args['vodka'] == '42'\n \n-        See :class:`~flask.testing.TestClient` for more information.\n+        See :class:`~flask.testing.FlaskClient` for more information.\n \n         .. versionchanged:: 0.4\n            added support for `with` block usage for the client.\n@@ -1481,19 +1481,12 @@ class Flask(_PackageBoundObject):\n         :func:`werkzeug.test.EnvironBuilder` for more information, this\n         function accepts the same arguments).\n         \"\"\"\n-        from werkzeug.test import create_environ\n-        environ_overrides = kwargs.setdefault('environ_overrides', {})\n-        if self.config.get('SERVER_NAME'):\n-            server_name = self.config.get('SERVER_NAME')\n-            if ':' not in server_name:\n-                http_host, http_port = server_name, '80'\n-            else:\n-                http_host, http_port = server_name.split(':', 1)\n-\n-            environ_overrides.setdefault('SERVER_NAME', server_name)\n-            environ_overrides.setdefault('HTTP_HOST', server_name)\n-            environ_overrides.setdefault('SERVER_PORT', http_port)\n-        return self.request_context(create_environ(*args, **kwargs))\n+        from flask.testing import make_test_environ_builder\n+        builder = make_test_environ_builder(self, *args, **kwargs)\n+        try:\n+            return self.request_context(builder.get_environ())\n+        finally:\n+            builder.close()\n \n     def wsgi_app(self, environ, start_response):\n         \"\"\"The actual WSGI application.  This is not implemented in\n\n@@ -15,6 +15,17 @@ from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n \n \n+def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n+    \"\"\"Creates a new test builder with some application defaults thrown in.\"\"\"\n+    http_host = app.config.get('SERVER_NAME')\n+    app_root = app.config.get('APPLICATION_ROOT')\n+    if base_url is None:\n+        base_url = 'http://%s/' % (http_host or 'localhost')\n+        if app_root:\n+            base_url += app_root.lstrip('/')\n+    return EnvironBuilder(path, base_url, *args, **kwargs)\n+\n+\n class FlaskClient(Client):\n     \"\"\"Works like a regular Werkzeug test client but has some knowledge about\n     how Flask works to defer the cleanup of the request context stack to the\n@@ -83,21 +94,8 @@ class FlaskClient(Client):\n         as_tuple = kwargs.pop('as_tuple', False)\n         buffered = kwargs.pop('buffered', False)\n         follow_redirects = kwargs.pop('follow_redirects', False)\n+        builder = make_test_environ_builder(self.application, *args, **kwargs)\n \n-        builder = EnvironBuilder(*args, **kwargs)\n-\n-        if self.application.config.get('SERVER_NAME'):\n-            server_name = self.application.config.get('SERVER_NAME')\n-            if ':' not in server_name:\n-                http_host, http_port = server_name, None\n-            else:\n-                http_host, http_port = server_name.split(':', 1)\n-            if builder.base_url == 'http://localhost/':\n-                # Default Generated Base URL\n-                if http_port != None:\n-                    builder.host = http_host + ':' + http_port\n-                else:\n-                    builder.host = http_host\n         old = _request_ctx_stack.top\n         try:\n             return Client.open(self, builder,\n\n@@ -1042,6 +1042,21 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n class TestToolsTestCase(FlaskTestCase):\n \n+    def test_environ_defaults_from_config(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.config['SERVER_NAME'] = 'example.com:1234'\n+        app.config['APPLICATION_ROOT'] = '/foo'\n+        @app.route('/')\n+        def index():\n+            return flask.request.url\n+\n+        ctx = app.test_request_context()\n+        self.assertEqual(ctx.request.url, 'http://example.com:1234/foo/')\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assertEqual(rv.data, 'http://example.com:1234/foo/')\n+\n     def test_session_transactions(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8dbd71ef8e16ce64cfcf7c526d584ea2771a28d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 2753 | Contributors (this commit): 11 | Commits (past 90d): 35 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1057,6 +1057,19 @@ class TestToolsTestCase(FlaskTestCase):\n             rv = c.get('/')\n             self.assertEqual(rv.data, 'http://example.com:1234/foo/')\n \n+    def test_environ_defaults(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            return flask.request.url\n+\n+        ctx = app.test_request_context()\n+        self.assertEqual(ctx.request.url, 'http://localhost/')\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assertEqual(rv.data, 'http://localhost/')\n+\n     def test_session_transactions(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#485a6c332b1cd10495f6f3aafe2690e07f01b422", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 30 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 60 | Churn Cumulative: 2813 | Contributors (this commit): 11 | Commits (past 90d): 36 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -153,36 +153,6 @@ class ContextTestCase(FlaskTestCase):\n         else:\n             assert 0, 'expected runtime error'\n \n-    def test_test_client_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            flask.g.value = 42\n-            return 'Hello World!'\n-\n-        @app.route('/other')\n-        def other():\n-            1/0\n-\n-        with app.test_client() as c:\n-            resp = c.get('/')\n-            assert flask.g.value == 42\n-            assert resp.data == 'Hello World!'\n-            assert resp.status_code == 200\n-\n-            resp = c.get('/other')\n-            assert not hasattr(flask.g, 'value')\n-            assert 'Internal Server Error' in resp.data\n-            assert resp.status_code == 500\n-            flask.g.value = 23\n-\n-        try:\n-            flask.g.value\n-        except (AttributeError, RuntimeError):\n-            pass\n-        else:\n-            raise AssertionError('some kind of exception expected')\n-\n \n class BasicFunctionalityTestCase(FlaskTestCase):\n \n@@ -1111,6 +1081,36 @@ class TestToolsTestCase(FlaskTestCase):\n             with c.session_transaction():\n                 self.assert_(req is flask.request._get_current_object())\n \n+    def test_test_client_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            flask.g.value = 42\n+            return 'Hello World!'\n+\n+        @app.route('/other')\n+        def other():\n+            1/0\n+\n+        with app.test_client() as c:\n+            resp = c.get('/')\n+            assert flask.g.value == 42\n+            assert resp.data == 'Hello World!'\n+            assert resp.status_code == 200\n+\n+            resp = c.get('/other')\n+            assert not hasattr(flask.g, 'value')\n+            assert 'Internal Server Error' in resp.data\n+            assert resp.status_code == 500\n+            flask.g.value = 23\n+\n+        try:\n+            flask.g.value\n+        except (AttributeError, RuntimeError):\n+            pass\n+        else:\n+            raise AssertionError('some kind of exception expected')\n+\n \n class InstanceTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d3ca55177a9f39de526143c59edc049d28f4424c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 2 | Churn Cumulative: 466 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,6 +50,7 @@ def before_request():\n @app.teardown_request\n def teardown_request(exception):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n+    if hasattr(g, 'db'):\n         g.db.close()\n \n \n\n@@ -85,6 +85,7 @@ def before_request():\n @app.teardown_request\n def teardown_request(exception):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n+    if hasattr(g, 'db'):\n         g.db.close()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8340d3c9f5cb38f23dd16d7d28aa643a121c4236", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 930 | Contributors (this commit): 12 | Commits (past 90d): 15 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -145,6 +145,13 @@ def make_response(*args):\n \n         response = make_response(render_template('not_found.html'), 404)\n \n+    The other use case of this function is to force the return value of a\n+    view function into a response which is helpful with view\n+    decorators::\n+\n+        response = make_response(view_function())\n+        response.headers['X-Parachutes'] = 'parachutes are cool'\n+\n     Internally this function does the following things:\n \n     -   if no arguments are passed, it creates a new response argument\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef0f626f0a916fdced42e05aa2f58dede6c660fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 56 | Churn Cumulative: 2991 | Contributors (this commit): 11 | Commits (past 90d): 40 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,10 +30,38 @@ class View(object):\n                 return 'Hello %s!' % name\n \n         app.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))\n+\n+    When you want to decorate a pluggable view you will have to either do that\n+    when the view function is created (by wrapping the return value of\n+    :meth:`as_view`) or you can use the :attr:`decorators` attribute::\n+\n+        class SecretView(View):\n+            methods = ['GET']\n+            decorators = [superuser_required]\n+\n+            def dispatch_request(self):\n+                ...\n+\n+    The decorators stored in the decorators list are applied one after another\n+    when the view function is created.  Note that you can *not* use the class\n+    based decorators since those would decorate the view class and not the\n+    generated view function!\n     \"\"\"\n \n+    #: A for which methods this pluggable view can handle.\n     methods = None\n \n+    #: The canonical way to decorate class based views is to decorate the\n+    #: return value of as_view().  However since this moves parts of the\n+    #: logic from the class declaration to the place where it's hooked\n+    #: into the routing system.\n+    #:\n+    #: You can place one or more decorators in this list and whenever the\n+    #: view function is created the result is automatically decorated.\n+    #:\n+    #: .. versionadded:: 0.8\n+    decorators = []\n+\n     def dispatch_request(self):\n         \"\"\"Subclasses have to override this method to implement the\n         actual view functionc ode.  This method is called with all\n@@ -54,6 +82,13 @@ class View(object):\n         def view(*args, **kwargs):\n             self = view.view_class(*class_args, **class_kwargs)\n             return self.dispatch_request(*args, **kwargs)\n+\n+        if cls.decorators:\n+            view.__name__ = name\n+            view.__module__ = cls.__module__\n+            for decorator in cls.decorators:\n+                view = decorator(view)\n+\n         # we attach the view class to the view function for two reasons:\n         # first of all it allows us to easily figure out what class based\n         # view this thing came from, secondly it's also used for instanciating\n\n@@ -2258,6 +2258,27 @@ class ViewTestCase(FlaskTestCase):\n         meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n         self.assertEqual(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n \n+    def test_view_decorators(self):\n+        app = flask.Flask(__name__)\n+\n+        def add_x_parachute(f):\n+            def new_function(*args, **kwargs):\n+                resp = flask.make_response(f(*args, **kwargs))\n+                resp.headers['X-Parachute'] = 'awesome'\n+                return resp\n+            return new_function\n+\n+        class Index(flask.views.View):\n+            decorators = [add_x_parachute]\n+            def dispatch_request(self):\n+                return 'Awesome'\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        c = app.test_client()\n+        rv = c.get('/')\n+        self.assertEqual(rv.headers['X-Parachute'], 'awesome')\n+        self.assertEqual(rv.data, 'Awesome')\n+\n \n class DeprecationsTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4cb6eea8f1e1edc707874f72cbca43a0f698ec7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2575 | Lines Deleted: 2336 | Files Changed: 25 | Hunks: 16 | Methods Changed: 624 | Complexity Δ (Sum/Max): 27/167 | Churn Δ: 4911 | Churn Cumulative: 7913 | Contributors (this commit): 12 | Commits (past 90d): 67 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,121 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite\n+    ~~~~~~~~~~~~~~~\n+\n+    Tests Flask itself.  The majority of Flask is already tested\n+    as part of Werkzeug.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import sys\n+import flask\n+import warnings\n+import unittest\n+from StringIO import StringIO\n+from functools import update_wrapper\n+from contextlib import contextmanager\n+from werkzeug.utils import import_string, find_modules\n+\n+\n+def add_to_path(path):\n+    def _samefile(x, y):\n+        try:\n+            return os.path.samefile(x, y)\n+        except (IOError, OSError):\n+            return False\n+    for entry in sys.path:\n+        try:\n+            if os.path.samefile(path, entry):\n+                return\n+        except (OSError, IOError):\n+            pass\n+    sys.path.append(path)\n+\n+\n+def setup_paths():\n+    add_to_path(os.path.abspath(os.path.join(\n+        os.path.dirname(__file__), 'test_apps')))\n+\n+\n+def iter_suites():\n+    for module in find_modules(__name__):\n+        mod = import_string(module)\n+        if hasattr(mod, 'suite'):\n+            yield mod.suite()\n+\n+\n+@contextmanager\n+def catch_warnings():\n+    \"\"\"Catch warnings in a with block in a list\"\"\"\n+    # make sure deprecation warnings are active in tests\n+    warnings.simplefilter('default', category=DeprecationWarning)\n+\n+    filters = warnings.filters\n+    warnings.filters = filters[:]\n+    old_showwarning = warnings.showwarning\n+    log = []\n+    def showwarning(message, category, filename, lineno, file=None, line=None):\n+        log.append(locals())\n+    try:\n+        warnings.showwarning = showwarning\n+        yield log\n+    finally:\n+        warnings.filters = filters\n+        warnings.showwarning = old_showwarning\n+\n+\n+@contextmanager\n+def catch_stderr():\n+    \"\"\"Catch stderr in a StringIO\"\"\"\n+    old_stderr = sys.stderr\n+    sys.stderr = rv = StringIO()\n+    try:\n+        yield rv\n+    finally:\n+        sys.stderr = old_stderr\n+\n+\n+def emits_module_deprecation_warning(f):\n+    def new_f(self, *args, **kwargs):\n+        with catch_warnings() as log:\n+            f(self, *args, **kwargs)\n+            self.assert_(log, 'expected deprecation warning')\n+            for entry in log:\n+                self.assert_('Modules are deprecated' in str(entry['message']))\n+    return update_wrapper(new_f, f)\n+\n+\n+class FlaskTestCase(unittest.TestCase):\n+\n+    def ensure_clean_request_context(self):\n+        # make sure we're not leaking a request context since we are\n+        # testing flask internally in debug mode in a few cases\n+        self.assert_equal(flask._request_ctx_stack.top, None)\n+\n+    def setup(self):\n+        pass\n+\n+    def teardown(self):\n+        pass\n+\n+    def setUp(self):\n+        self.setup()\n+\n+    def tearDown(self):\n+        unittest.TestCase.tearDown(self)\n+        self.ensure_clean_request_context()\n+        self.teardown()\n+\n+    def assert_equal(self, x, y):\n+        return self.assertEqual(x, y)\n+\n+\n+def suite():\n+    setup_paths()\n+    suite = unittest.TestSuite()\n+    for other_suite in iter_suites():\n+        suite.addTest(other_suite)\n+    return suite\n\n@@ -0,0 +1,992 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.basic\n+    ~~~~~~~~~~~~~~~~~~~~~\n+\n+    The basic functionality.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import re\n+import flask\n+import unittest\n+from datetime import datetime\n+from threading import Thread\n+from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n+from werkzeug.exceptions import BadRequest, NotFound\n+from werkzeug.http import parse_date\n+\n+\n+class BasicFunctionalityTestCase(FlaskTestCase):\n+\n+    def test_options_work(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/', methods=['GET', 'POST'])\n+        def index():\n+            return 'Hello World'\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+        assert rv.data == ''\n+\n+    def test_options_on_multiple_rules(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/', methods=['GET', 'POST'])\n+        def index():\n+            return 'Hello World'\n+        @app.route('/', methods=['PUT'])\n+        def index_put():\n+            return 'Aha!'\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n+\n+    def test_options_handling_disabled(self):\n+        app = flask.Flask(__name__)\n+        def index():\n+            return 'Hello World!'\n+        index.provide_automatic_options = False\n+        app.route('/')(index)\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert rv.status_code == 405\n+\n+        app = flask.Flask(__name__)\n+        def index2():\n+            return 'Hello World!'\n+        index2.provide_automatic_options = True\n+        app.route('/', methods=['OPTIONS'])(index2)\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['OPTIONS']\n+\n+    def test_request_dispatching(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.request.method\n+        @app.route('/more', methods=['GET', 'POST'])\n+        def more():\n+            return flask.request.method\n+\n+        c = app.test_client()\n+        assert c.get('/').data == 'GET'\n+        rv = c.post('/')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n+        rv = c.head('/')\n+        assert rv.status_code == 200\n+        assert not rv.data  # head truncates\n+        assert c.post('/more').data == 'POST'\n+        assert c.get('/more').data == 'GET'\n+        rv = c.delete('/more')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+\n+    def test_url_mapping(self):\n+        app = flask.Flask(__name__)\n+        def index():\n+            return flask.request.method\n+        def more():\n+            return flask.request.method\n+\n+        app.add_url_rule('/', 'index', index)\n+        app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n+\n+        c = app.test_client()\n+        assert c.get('/').data == 'GET'\n+        rv = c.post('/')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n+        rv = c.head('/')\n+        assert rv.status_code == 200\n+        assert not rv.data  # head truncates\n+        assert c.post('/more').data == 'POST'\n+        assert c.get('/more').data == 'GET'\n+        rv = c.delete('/more')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+\n+    def test_werkzeug_routing(self):\n+        from werkzeug.routing import Submount, Rule\n+        app = flask.Flask(__name__)\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+        def bar():\n+            return 'bar'\n+        def index():\n+            return 'index'\n+        app.view_functions['bar'] = bar\n+        app.view_functions['index'] = index\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n+    def test_endpoint_decorator(self):\n+        from werkzeug.routing import Submount, Rule\n+        app = flask.Flask(__name__)\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+\n+        @app.endpoint('bar')\n+        def bar():\n+            return 'bar'\n+\n+        @app.endpoint('index')\n+        def index():\n+            return 'index'\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n+    def test_session(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+        @app.route('/set', methods=['POST'])\n+        def set():\n+            flask.session['value'] = flask.request.form['value']\n+            return 'value set'\n+        @app.route('/get')\n+        def get():\n+            return flask.session['value']\n+\n+        c = app.test_client()\n+        assert c.post('/set', data={'value': '42'}).data == 'value set'\n+        assert c.get('/get').data == '42'\n+\n+    def test_session_using_server_name(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='example.com'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com/')\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n+\n+    def test_session_using_server_name_and_port(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='example.com:8080'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com:8080/')\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n+\n+    def test_session_using_application_root(self):\n+        class PrefixPathMiddleware(object):\n+            def __init__(self, app, prefix):\n+                self.app = app\n+                self.prefix = prefix\n+            def __call__(self, environ, start_response):\n+                environ['SCRIPT_NAME'] = self.prefix\n+                return self.app(environ, start_response)\n+\n+        app = flask.Flask(__name__)\n+        app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, '/bar')\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            APPLICATION_ROOT='/bar'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com:8080/')\n+        assert 'path=/bar' in rv.headers['set-cookie'].lower()\n+\n+    def test_missing_session(self):\n+        app = flask.Flask(__name__)\n+        def expect_exception(f, *args, **kwargs):\n+            try:\n+                f(*args, **kwargs)\n+            except RuntimeError, e:\n+                assert e.args and 'session is unavailable' in e.args[0]\n+            else:\n+                assert False, 'expected exception'\n+        with app.test_request_context():\n+            assert flask.session.get('missing_key') is None\n+            expect_exception(flask.session.__setitem__, 'foo', 42)\n+            expect_exception(flask.session.pop, 'foo')\n+\n+    def test_session_expiration(self):\n+        permanent = True\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+        @app.route('/')\n+        def index():\n+            flask.session['test'] = 42\n+            flask.session.permanent = permanent\n+            return ''\n+\n+        @app.route('/test')\n+        def test():\n+            return unicode(flask.session.permanent)\n+\n+        client = app.test_client()\n+        rv = client.get('/')\n+        assert 'set-cookie' in rv.headers\n+        match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n+        expires = parse_date(match.group())\n+        expected = datetime.utcnow() + app.permanent_session_lifetime\n+        assert expires.year == expected.year\n+        assert expires.month == expected.month\n+        assert expires.day == expected.day\n+\n+        rv = client.get('/test')\n+        assert rv.data == 'True'\n+\n+        permanent = False\n+        rv = app.test_client().get('/')\n+        assert 'set-cookie' in rv.headers\n+        match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n+        assert match is None\n+\n+    def test_flashes(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+\n+        with app.test_request_context():\n+            assert not flask.session.modified\n+            flask.flash('Zap')\n+            flask.session.modified = False\n+            flask.flash('Zip')\n+            assert flask.session.modified\n+            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n+\n+    def test_extended_flashing(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+\n+        @app.route('/')\n+        def index():\n+            flask.flash(u'Hello World')\n+            flask.flash(u'Hello World', 'error')\n+            flask.flash(flask.Markup(u'<em>Testing</em>'), 'warning')\n+            return ''\n+\n+        @app.route('/test')\n+        def test():\n+            messages = flask.get_flashed_messages(with_categories=True)\n+            assert len(messages) == 3\n+            assert messages[0] == ('message', u'Hello World')\n+            assert messages[1] == ('error', u'Hello World')\n+            assert messages[2] == ('warning', flask.Markup(u'<em>Testing</em>'))\n+            return ''\n+            messages = flask.get_flashed_messages()\n+            assert len(messages) == 3\n+            assert messages[0] == u'Hello World'\n+            assert messages[1] == u'Hello World'\n+            assert messages[2] == flask.Markup(u'<em>Testing</em>')\n+\n+        c = app.test_client()\n+        c.get('/')\n+        c.get('/test')\n+\n+    def test_request_processing(self):\n+        app = flask.Flask(__name__)\n+        evts = []\n+        @app.before_request\n+        def before_request():\n+            evts.append('before')\n+        @app.after_request\n+        def after_request(response):\n+            response.data += '|after'\n+            evts.append('after')\n+            return response\n+        @app.route('/')\n+        def index():\n+            assert 'before' in evts\n+            assert 'after' not in evts\n+            return 'request'\n+        assert 'after' not in evts\n+        rv = app.test_client().get('/').data\n+        assert 'after' in evts\n+        assert rv == 'request|after'\n+\n+    def test_teardown_request_handler(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def teardown_request(exc):\n+            called.append(True)\n+            return \"Ignored\"\n+        @app.route('/')\n+        def root():\n+            return \"Response\"\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 200\n+        assert 'Response' in rv.data\n+        assert len(called) == 1\n+\n+    def test_teardown_request_handler_debug_mode(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.teardown_request\n+        def teardown_request(exc):\n+            called.append(True)\n+            return \"Ignored\"\n+        @app.route('/')\n+        def root():\n+            return \"Response\"\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 200\n+        assert 'Response' in rv.data\n+        assert len(called) == 1\n+\n+    def test_teardown_request_handler_error(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def teardown_request1(exc):\n+            assert type(exc) == ZeroDivisionError\n+            called.append(True)\n+            # This raises a new error and blows away sys.exc_info(), so we can\n+            # test that all teardown_requests get passed the same original\n+            # exception.\n+            try:\n+                raise TypeError\n+            except:\n+                pass\n+        @app.teardown_request\n+        def teardown_request2(exc):\n+            assert type(exc) == ZeroDivisionError\n+            called.append(True)\n+            # This raises a new error and blows away sys.exc_info(), so we can\n+            # test that all teardown_requests get passed the same original\n+            # exception.\n+            try:\n+                raise TypeError\n+            except:\n+                pass\n+        @app.route('/')\n+        def fails():\n+            1/0\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+        assert len(called) == 2\n+\n+    def test_before_after_request_order(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def before1():\n+            called.append(1)\n+        @app.before_request\n+        def before2():\n+            called.append(2)\n+        @app.after_request\n+        def after1(response):\n+            called.append(4)\n+            return response\n+        @app.after_request\n+        def after2(response):\n+            called.append(3)\n+            return response\n+        @app.teardown_request\n+        def finish1(exc):\n+            called.append(6)\n+        @app.teardown_request\n+        def finish2(exc):\n+            called.append(5)\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        rv = app.test_client().get('/')\n+        assert rv.data == '42'\n+        assert called == [1, 2, 3, 4, 5, 6]\n+\n+    def test_error_handling(self):\n+        app = flask.Flask(__name__)\n+        @app.errorhandler(404)\n+        def not_found(e):\n+            return 'not found', 404\n+        @app.errorhandler(500)\n+        def internal_server_error(e):\n+            return 'internal server error', 500\n+        @app.route('/')\n+        def index():\n+            flask.abort(404)\n+        @app.route('/error')\n+        def error():\n+            1 // 0\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'not found'\n+        rv = c.get('/error')\n+        assert rv.status_code == 500\n+        assert 'internal server error' == rv.data\n+\n+    def test_before_request_and_routing_errors(self):\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def attach_something():\n+            flask.g.something = 'value'\n+        @app.errorhandler(404)\n+        def return_something(error):\n+            return flask.g.something, 404\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'value'\n+\n+    def test_user_error_handling(self):\n+        class MyException(Exception):\n+            pass\n+\n+        app = flask.Flask(__name__)\n+        @app.errorhandler(MyException)\n+        def handle_my_exception(e):\n+            assert isinstance(e, MyException)\n+            return '42'\n+        @app.route('/')\n+        def index():\n+            raise MyException()\n+\n+        c = app.test_client()\n+        assert c.get('/').data == '42'\n+\n+    def test_trapping_of_bad_request_key_errors(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/fail')\n+        def fail():\n+            flask.request.form['missing_key']\n+        c = app.test_client()\n+        assert c.get('/fail').status_code == 400\n+\n+        app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n+        c = app.test_client()\n+        try:\n+            c.get('/fail')\n+        except KeyError, e:\n+            assert isinstance(e, BadRequest)\n+        else:\n+            self.fail('Expected exception')\n+\n+    def test_trapping_of_all_http_exceptions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.config['TRAP_HTTP_EXCEPTIONS'] = True\n+        @app.route('/fail')\n+        def fail():\n+            flask.abort(404)\n+\n+        c = app.test_client()\n+        try:\n+            c.get('/fail')\n+        except NotFound, e:\n+            pass\n+        else:\n+            self.fail('Expected exception')\n+\n+    def test_enctype_debug_helper(self):\n+        from flask.debughelpers import DebugFilesKeyError\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/fail', methods=['POST'])\n+        def index():\n+            return flask.request.files['foo'].filename\n+\n+        # with statement is important because we leave an exception on the\n+        # stack otherwise and we want to ensure that this is not the case\n+        # to not negatively affect other tests.\n+        with app.test_client() as c:\n+            try:\n+                c.post('/fail', data={'foo': 'index.txt'})\n+            except DebugFilesKeyError, e:\n+                assert 'no file contents were transmitted' in str(e)\n+                assert 'This was submitted: \"index.txt\"' in str(e)\n+            else:\n+                self.fail('Expected exception')\n+\n+    def test_teardown_on_pop(self):\n+        buffer = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def end_of_request(exception):\n+            buffer.append(exception)\n+\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        assert buffer == []\n+        ctx.pop()\n+        assert buffer == [None]\n+\n+    def test_response_creation(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/unicode')\n+        def from_unicode():\n+            return u'Hällo Wörld'\n+        @app.route('/string')\n+        def from_string():\n+            return u'Hällo Wörld'.encode('utf-8')\n+        @app.route('/args')\n+        def from_tuple():\n+            return 'Meh', 400, {'X-Foo': 'Testing'}, 'text/plain'\n+        c = app.test_client()\n+        assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n+        assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n+        rv = c.get('/args')\n+        assert rv.data == 'Meh'\n+        assert rv.headers['X-Foo'] == 'Testing'\n+        assert rv.status_code == 400\n+        assert rv.mimetype == 'text/plain'\n+\n+    def test_make_response(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            rv = flask.make_response()\n+            assert rv.status_code == 200\n+            assert rv.data == ''\n+            assert rv.mimetype == 'text/html'\n+\n+            rv = flask.make_response('Awesome')\n+            assert rv.status_code == 200\n+            assert rv.data == 'Awesome'\n+            assert rv.mimetype == 'text/html'\n+\n+            rv = flask.make_response('W00t', 404)\n+            assert rv.status_code == 404\n+            assert rv.data == 'W00t'\n+            assert rv.mimetype == 'text/html'\n+\n+    def test_url_generation(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/hello/<name>', methods=['POST'])\n+        def hello():\n+            pass\n+        with app.test_request_context():\n+            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n+            assert flask.url_for('hello', name='test x', _external=True) \\\n+                == 'http://localhost/hello/test%20x'\n+\n+    def test_custom_converters(self):\n+        from werkzeug.routing import BaseConverter\n+        class ListConverter(BaseConverter):\n+            def to_python(self, value):\n+                return value.split(',')\n+            def to_url(self, value):\n+                base_to_url = super(ListConverter, self).to_url\n+                return ','.join(base_to_url(x) for x in value)\n+        app = flask.Flask(__name__)\n+        app.url_map.converters['list'] = ListConverter\n+        @app.route('/<list:args>')\n+        def index(args):\n+            return '|'.join(args)\n+        c = app.test_client()\n+        assert c.get('/1,2,3').data == '1|2|3'\n+\n+    def test_static_files(self):\n+        app = flask.Flask(__name__)\n+        rv = app.test_client().get('/static/index.html')\n+        assert rv.status_code == 200\n+        assert rv.data.strip() == '<h1>Hello World!</h1>'\n+        with app.test_request_context():\n+            assert flask.url_for('static', filename='index.html') \\\n+                == '/static/index.html'\n+\n+    def test_none_response(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def test():\n+            return None\n+        try:\n+            app.test_client().get('/')\n+        except ValueError, e:\n+            assert str(e) == 'View function did not return a response'\n+            pass\n+        else:\n+            assert \"Expected ValueError\"\n+\n+    def test_request_locals(self):\n+        self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n+        self.assertFalse(flask.g)\n+\n+    def test_proper_test_request_context(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SERVER_NAME='localhost.localdomain:5000'\n+        )\n+\n+        @app.route('/')\n+        def index():\n+            return None\n+\n+        @app.route('/', subdomain='foo')\n+        def sub():\n+            return None\n+\n+        with app.test_request_context('/'):\n+            assert flask.url_for('index', _external=True) == 'http://localhost.localdomain:5000/'\n+\n+        with app.test_request_context('/'):\n+            assert flask.url_for('sub', _external=True) == 'http://foo.localhost.localdomain:5000/'\n+\n+        try:\n+            with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n+                pass\n+        except Exception, e:\n+            assert isinstance(e, ValueError)\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain:5000') does not match the \" + \\\n+                    \"server name from the WSGI environment ('localhost')\", str(e)\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost:80')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+    def test_test_app_proper_environ(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SERVER_NAME='localhost.localdomain:5000'\n+        )\n+        @app.route('/')\n+        def index():\n+            return 'Foo'\n+\n+        @app.route('/', subdomain='foo')\n+        def subdomain():\n+            return 'Foo SubDomain'\n+\n+        try:\n+            rv = app.test_client().get('/')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain')\n+            rv = app.test_client().get('/', 'https://localhost.localdomain')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain:443')\n+            rv = app.test_client().get('/', 'https://localhost.localdomain')\n+            assert rv.data == 'Foo'\n+        except ValueError, e:\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain:443') does not match the \" + \\\n+                    \"server name from the WSGI environment ('localhost.localdomain')\", str(e)\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost.localdomain')\n+            app.test_client().get('/', 'http://foo.localhost')\n+        except ValueError, e:\n+            assert str(e) == \"the server name provided \" + \\\n+                    \"('localhost.localdomain') does not match the \" + \\\n+                    \"server name from the WSGI environment ('foo.localhost')\", str(e)\n+\n+        try:\n+            rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n+            assert rv.data == 'Foo SubDomain'\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+    def test_exception_propagation(self):\n+        def apprunner(configkey):\n+            app = flask.Flask(__name__)\n+            @app.route('/')\n+            def index():\n+                1/0\n+            c = app.test_client()\n+            if config_key is not None:\n+                app.config[config_key] = True\n+                try:\n+                    resp = c.get('/')\n+                except Exception:\n+                    pass\n+                else:\n+                    self.fail('expected exception')\n+            else:\n+                assert c.get('/').status_code == 500\n+\n+        # we have to run this test in an isolated thread because if the\n+        # debug flag is set to true and an exception happens the context is\n+        # not torn down.  This causes other tests that run after this fail\n+        # when they expect no exception on the stack.\n+        for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n+            t = Thread(target=apprunner, args=(config_key,))\n+            t.start()\n+            t.join()\n+\n+    def test_max_content_length(self):\n+        app = flask.Flask(__name__)\n+        app.config['MAX_CONTENT_LENGTH'] = 64\n+        @app.before_request\n+        def always_first():\n+            flask.request.form['myfile']\n+            assert False\n+        @app.route('/accept', methods=['POST'])\n+        def accept_file():\n+            flask.request.form['myfile']\n+            assert False\n+        @app.errorhandler(413)\n+        def catcher(error):\n+            return '42'\n+\n+        c = app.test_client()\n+        rv = c.post('/accept', data={'myfile': 'foo' * 100})\n+        assert rv.data == '42'\n+\n+    def test_url_processors(self):\n+        app = flask.Flask(__name__)\n+\n+        @app.url_defaults\n+        def add_language_code(endpoint, values):\n+            if flask.g.lang_code is not None and \\\n+               app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n+                values.setdefault('lang_code', flask.g.lang_code)\n+\n+        @app.url_value_preprocessor\n+        def pull_lang_code(endpoint, values):\n+            flask.g.lang_code = values.pop('lang_code', None)\n+\n+        @app.route('/<lang_code>/')\n+        def index():\n+            return flask.url_for('about')\n+\n+        @app.route('/<lang_code>/about')\n+        def about():\n+            return flask.url_for('something_else')\n+\n+        @app.route('/foo')\n+        def something_else():\n+            return flask.url_for('about', lang_code='en')\n+\n+        c = app.test_client()\n+\n+        self.assert_equal(c.get('/de/').data, '/de/about')\n+        self.assert_equal(c.get('/de/about').data, '/foo')\n+        self.assert_equal(c.get('/foo').data, '/en/about')\n+\n+    def test_debug_mode_complains_after_first_request(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/')\n+        def index():\n+            return 'Awesome'\n+        self.assert_(not app.got_first_request)\n+        self.assert_equal(app.test_client().get('/').data, 'Awesome')\n+        try:\n+            @app.route('/foo')\n+            def broken():\n+                return 'Meh'\n+        except AssertionError, e:\n+            self.assert_('A setup function was called' in str(e))\n+        else:\n+            self.fail('Expected exception')\n+\n+        app.debug = False\n+        @app.route('/foo')\n+        def working():\n+            return 'Meh'\n+        self.assert_equal(app.test_client().get('/foo').data, 'Meh')\n+        self.assert_(app.got_first_request)\n+\n+    def test_before_first_request_functions(self):\n+        got = []\n+        app = flask.Flask(__name__)\n+        @app.before_first_request\n+        def foo():\n+            got.append(42)\n+        c = app.test_client()\n+        c.get('/')\n+        self.assert_equal(got, [42])\n+        c.get('/')\n+        self.assert_equal(got, [42])\n+        self.assert_(app.got_first_request)\n+\n+    def test_routing_redirect_debugging(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/foo/', methods=['GET', 'POST'])\n+        def foo():\n+            return 'success'\n+        with app.test_client() as c:\n+            try:\n+                c.post('/foo', data={})\n+            except AssertionError, e:\n+                self.assert_('http://localhost/foo/' in str(e))\n+                self.assert_('Make sure to directly send your POST-request '\n+                             'to this URL' in str(e))\n+            else:\n+                self.fail('Expected exception')\n+\n+            rv = c.get('/foo', data={}, follow_redirects=True)\n+            self.assert_equal(rv.data, 'success')\n+\n+        app.debug = False\n+        with app.test_client() as c:\n+            rv = c.post('/foo', data={}, follow_redirects=True)\n+            self.assert_equal(rv.data, 'success')\n+\n+\n+class ContextTestCase(FlaskTestCase):\n+\n+    def test_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+        @app.route('/meh')\n+        def meh():\n+            return flask.request.url\n+\n+        with app.test_request_context('/?name=World'):\n+            assert index() == 'Hello World!'\n+        with app.test_request_context('/meh'):\n+            assert meh() == 'http://localhost/meh'\n+        assert flask._request_ctx_stack.top is None\n+\n+    def test_context_test(self):\n+        app = flask.Flask(__name__)\n+        assert not flask.request\n+        assert not flask.has_request_context()\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        try:\n+            assert flask.request\n+            assert flask.has_request_context()\n+        finally:\n+            ctx.pop()\n+\n+    def test_manual_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+\n+        ctx = app.test_request_context('/?name=World')\n+        ctx.push()\n+        assert index() == 'Hello World!'\n+        ctx.pop()\n+        try:\n+            index()\n+        except RuntimeError:\n+            pass\n+        else:\n+            assert 0, 'expected runtime error'\n+\n+\n+class SubdomainTestCase(FlaskTestCase):\n+\n+    def test_basic_support(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'localhost'\n+        @app.route('/')\n+        def normal_index():\n+            return 'normal index'\n+        @app.route('/', subdomain='test')\n+        def test_index():\n+            return 'test index'\n+\n+        c = app.test_client()\n+        rv = c.get('/', 'http://localhost/')\n+        assert rv.data == 'normal index'\n+\n+        rv = c.get('/', 'http://test.localhost/')\n+        assert rv.data == 'test index'\n+\n+    @emits_module_deprecation_warning\n+    def test_module_static_path_subdomain(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'example.com'\n+        from subdomaintestmodule import mod\n+        app.register_module(mod)\n+        c = app.test_client()\n+        rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n+        assert rv.data.strip() == 'Hello Subdomain'\n+\n+    def test_subdomain_matching(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'localhost'\n+        @app.route('/', subdomain='<user>')\n+        def index(user):\n+            return 'index for %s' % user\n+\n+        c = app.test_client()\n+        rv = c.get('/', 'http://mitsuhiko.localhost/')\n+        assert rv.data == 'index for mitsuhiko'\n+\n+    @emits_module_deprecation_warning\n+    def test_module_subdomain_support(self):\n+        app = flask.Flask(__name__)\n+        mod = flask.Module(__name__, 'test', subdomain='testing')\n+        app.config['SERVER_NAME'] = 'localhost'\n+\n+        @mod.route('/test')\n+        def test():\n+            return 'Test'\n+\n+        @mod.route('/outside', subdomain='xtesting')\n+        def bar():\n+            return 'Outside'\n+\n+        app.register_module(mod)\n+\n+        c = app.test_client()\n+        rv = c.get('/test', 'http://testing.localhost/')\n+        assert rv.data == 'Test'\n+        rv = c.get('/outside', 'http://xtesting.localhost/')\n+        assert rv.data == 'Outside'\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n+    suite.addTest(unittest.makeSuite(ContextTestCase))\n+    suite.addTest(unittest.makeSuite(SubdomainTestCase))\n+    return suite\n\n@@ -0,0 +1,423 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.blueprints\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Blueprints (and currently modules)\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+import warnings\n+from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n+from werkzeug.exceptions import NotFound\n+from jinja2 import TemplateNotFound\n+\n+\n+# import moduleapp here because it uses deprecated features and we don't\n+# want to see the warnings\n+warnings.simplefilter('ignore', DeprecationWarning)\n+from moduleapp import app as moduleapp\n+warnings.simplefilter('default', DeprecationWarning)\n+\n+\n+class ModuleTestCase(FlaskTestCase):\n+\n+    @emits_module_deprecation_warning\n+    def test_basic_module(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n+        @admin.route('/')\n+        def admin_index():\n+            return 'admin index'\n+        @admin.route('/login')\n+        def admin_login():\n+            return 'admin login'\n+        @admin.route('/logout')\n+        def admin_logout():\n+            return 'admin logout'\n+        @app.route('/')\n+        def index():\n+            return 'the index'\n+        app.register_module(admin)\n+        c = app.test_client()\n+        assert c.get('/').data == 'the index'\n+        assert c.get('/admin/').data == 'admin index'\n+        assert c.get('/admin/login').data == 'admin login'\n+        assert c.get('/admin/logout').data == 'admin logout'\n+\n+    @emits_module_deprecation_warning\n+    def test_default_endpoint_name(self):\n+        app = flask.Flask(__name__)\n+        mod = flask.Module(__name__, 'frontend')\n+        def index():\n+            return 'Awesome'\n+        mod.add_url_rule('/', view_func=index)\n+        app.register_module(mod)\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'Awesome'\n+        with app.test_request_context():\n+            assert flask.url_for('frontend.index') == '/'\n+\n+    @emits_module_deprecation_warning\n+    def test_request_processing(self):\n+        catched = []\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n+        @admin.before_request\n+        def before_admin_request():\n+            catched.append('before-admin')\n+        @admin.after_request\n+        def after_admin_request(response):\n+            catched.append('after-admin')\n+            return response\n+        @admin.route('/')\n+        def admin_index():\n+            return 'the admin'\n+        @app.before_request\n+        def before_request():\n+            catched.append('before-app')\n+        @app.after_request\n+        def after_request(response):\n+            catched.append('after-app')\n+            return response\n+        @app.route('/')\n+        def index():\n+            return 'the index'\n+        app.register_module(admin)\n+        c = app.test_client()\n+\n+        assert c.get('/').data == 'the index'\n+        assert catched == ['before-app', 'after-app']\n+        del catched[:]\n+\n+        assert c.get('/admin/').data == 'the admin'\n+        assert catched == ['before-app', 'before-admin',\n+                           'after-admin', 'after-app']\n+\n+    @emits_module_deprecation_warning\n+    def test_context_processors(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n+        @app.context_processor\n+        def inject_all_regualr():\n+            return {'a': 1}\n+        @admin.context_processor\n+        def inject_admin():\n+            return {'b': 2}\n+        @admin.app_context_processor\n+        def inject_all_module():\n+            return {'c': 3}\n+        @app.route('/')\n+        def index():\n+            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n+        @admin.route('/')\n+        def admin_index():\n+            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n+        app.register_module(admin)\n+        c = app.test_client()\n+        assert c.get('/').data == '13'\n+        assert c.get('/admin/').data == '123'\n+\n+    @emits_module_deprecation_warning\n+    def test_late_binding(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin')\n+        @admin.route('/')\n+        def index():\n+            return '42'\n+        app.register_module(admin, url_prefix='/admin')\n+        assert app.test_client().get('/admin/').data == '42'\n+\n+    @emits_module_deprecation_warning\n+    def test_error_handling(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin')\n+        @admin.app_errorhandler(404)\n+        def not_found(e):\n+            return 'not found', 404\n+        @admin.app_errorhandler(500)\n+        def internal_server_error(e):\n+            return 'internal server error', 500\n+        @admin.route('/')\n+        def index():\n+            flask.abort(404)\n+        @admin.route('/error')\n+        def error():\n+            1 // 0\n+        app.register_module(admin)\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'not found'\n+        rv = c.get('/error')\n+        assert rv.status_code == 500\n+        assert 'internal server error' == rv.data\n+\n+    def test_templates_and_static(self):\n+        app = moduleapp\n+        app.testing = True\n+        c = app.test_client()\n+\n+        rv = c.get('/')\n+        assert rv.data == 'Hello from the Frontend'\n+        rv = c.get('/admin/')\n+        assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/index2')\n+        assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/static/test.txt')\n+        assert rv.data.strip() == 'Admin File'\n+        rv = c.get('/admin/static/css/test.css')\n+        assert rv.data.strip() == '/* nested file */'\n+\n+        with app.test_request_context():\n+            assert flask.url_for('admin.static', filename='test.txt') \\\n+                == '/admin/static/test.txt'\n+\n+        with app.test_request_context():\n+            try:\n+                flask.render_template('missing.html')\n+            except TemplateNotFound, e:\n+                assert e.name == 'missing.html'\n+            else:\n+                assert 0, 'expected exception'\n+\n+        with flask.Flask(__name__).test_request_context():\n+            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+\n+    def test_safe_access(self):\n+        app = moduleapp\n+\n+        with app.test_request_context():\n+            f = app.view_functions['admin.static']\n+\n+            try:\n+                f('/etc/passwd')\n+            except NotFound:\n+                pass\n+            else:\n+                assert 0, 'expected exception'\n+            try:\n+                f('../__init__.py')\n+            except NotFound:\n+                pass\n+            else:\n+                assert 0, 'expected exception'\n+\n+            # testcase for a security issue that may exist on windows systems\n+            import os\n+            import ntpath\n+            old_path = os.path\n+            os.path = ntpath\n+            try:\n+                try:\n+                    f('..\\\\__init__.py')\n+                except NotFound:\n+                    pass\n+                else:\n+                    assert 0, 'expected exception'\n+            finally:\n+                os.path = old_path\n+\n+    @emits_module_deprecation_warning\n+    def test_endpoint_decorator(self):\n+        from werkzeug.routing import Submount, Rule\n+        from flask import Module\n+\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.url_map.add(Submount('/foo', [\n+            Rule('/bar', endpoint='bar'),\n+            Rule('/', endpoint='index')\n+        ]))\n+        module = Module(__name__, __name__)\n+\n+        @module.endpoint('bar')\n+        def bar():\n+            return 'bar'\n+\n+        @module.endpoint('index')\n+        def index():\n+            return 'index'\n+\n+        app.register_module(module)\n+\n+        c = app.test_client()\n+        assert c.get('/foo/').data == 'index'\n+        assert c.get('/foo/bar').data == 'bar'\n+\n+\n+class BlueprintTestCase(FlaskTestCase):\n+\n+    def test_blueprint_specific_error_handling(self):\n+        frontend = flask.Blueprint('frontend', __name__)\n+        backend = flask.Blueprint('backend', __name__)\n+        sideend = flask.Blueprint('sideend', __name__)\n+\n+        @frontend.errorhandler(403)\n+        def frontend_forbidden(e):\n+            return 'frontend says no', 403\n+\n+        @frontend.route('/frontend-no')\n+        def frontend_no():\n+            flask.abort(403)\n+\n+        @backend.errorhandler(403)\n+        def backend_forbidden(e):\n+            return 'backend says no', 403\n+\n+        @backend.route('/backend-no')\n+        def backend_no():\n+            flask.abort(403)\n+\n+        @sideend.route('/what-is-a-sideend')\n+        def sideend_no():\n+            flask.abort(403)\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(frontend)\n+        app.register_blueprint(backend)\n+        app.register_blueprint(sideend)\n+\n+        @app.errorhandler(403)\n+        def app_forbidden(e):\n+            return 'application itself says no', 403\n+\n+        c = app.test_client()\n+\n+        assert c.get('/frontend-no').data == 'frontend says no'\n+        assert c.get('/backend-no').data == 'backend says no'\n+        assert c.get('/what-is-a-sideend').data == 'application itself says no'\n+\n+    def test_blueprint_url_definitions(self):\n+        bp = flask.Blueprint('test', __name__)\n+\n+        @bp.route('/foo', defaults={'baz': 42})\n+        def foo(bar, baz):\n+            return '%s/%d' % (bar, baz)\n+\n+        @bp.route('/bar')\n+        def bar(bar):\n+            return unicode(bar)\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n+        app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n+\n+        c = app.test_client()\n+        self.assert_equal(c.get('/1/foo').data, u'23/42')\n+        self.assert_equal(c.get('/2/foo').data, u'19/42')\n+        self.assert_equal(c.get('/1/bar').data, u'23')\n+        self.assert_equal(c.get('/2/bar').data, u'19')\n+\n+    def test_blueprint_url_processors(self):\n+        bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n+\n+        @bp.url_defaults\n+        def add_language_code(endpoint, values):\n+            values.setdefault('lang_code', flask.g.lang_code)\n+\n+        @bp.url_value_preprocessor\n+        def pull_lang_code(endpoint, values):\n+            flask.g.lang_code = values.pop('lang_code')\n+\n+        @bp.route('/')\n+        def index():\n+            return flask.url_for('.about')\n+\n+        @bp.route('/about')\n+        def about():\n+            return flask.url_for('.index')\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp)\n+\n+        c = app.test_client()\n+\n+        self.assert_equal(c.get('/de/').data, '/de/about')\n+        self.assert_equal(c.get('/de/about').data, '/de/')\n+\n+    def test_templates_and_static(self):\n+        from blueprintapp import app\n+        c = app.test_client()\n+\n+        rv = c.get('/')\n+        assert rv.data == 'Hello from the Frontend'\n+        rv = c.get('/admin/')\n+        assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/index2')\n+        assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/static/test.txt')\n+        assert rv.data.strip() == 'Admin File'\n+        rv = c.get('/admin/static/css/test.css')\n+        assert rv.data.strip() == '/* nested file */'\n+\n+        with app.test_request_context():\n+            assert flask.url_for('admin.static', filename='test.txt') \\\n+                == '/admin/static/test.txt'\n+\n+        with app.test_request_context():\n+            try:\n+                flask.render_template('missing.html')\n+            except TemplateNotFound, e:\n+                assert e.name == 'missing.html'\n+            else:\n+                assert 0, 'expected exception'\n+\n+        with flask.Flask(__name__).test_request_context():\n+            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+\n+    def test_templates_list(self):\n+        from blueprintapp import app\n+        templates = sorted(app.jinja_env.list_templates())\n+        self.assert_equal(templates, ['admin/index.html',\n+                                     'frontend/index.html'])\n+\n+    def test_dotted_names(self):\n+        frontend = flask.Blueprint('myapp.frontend', __name__)\n+        backend = flask.Blueprint('myapp.backend', __name__)\n+\n+        @frontend.route('/fe')\n+        def frontend_index():\n+            return flask.url_for('myapp.backend.backend_index')\n+\n+        @frontend.route('/fe2')\n+        def frontend_page2():\n+            return flask.url_for('.frontend_index')\n+\n+        @backend.route('/be')\n+        def backend_index():\n+            return flask.url_for('myapp.frontend.frontend_index')\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(frontend)\n+        app.register_blueprint(backend)\n+\n+        c = app.test_client()\n+        self.assert_equal(c.get('/fe').data.strip(), '/be')\n+        self.assert_equal(c.get('/fe2').data.strip(), '/fe')\n+        self.assert_equal(c.get('/be').data.strip(), '/fe')\n+\n+    def test_empty_url_defaults(self):\n+        bp = flask.Blueprint('bp', __name__)\n+\n+        @bp.route('/', defaults={'page': 1})\n+        @bp.route('/page/<int:page>')\n+        def something(page):\n+            return str(page)\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp)\n+\n+        c = app.test_client()\n+        self.assert_equal(c.get('/').data, '1')\n+        self.assert_equal(c.get('/page/2').data, '2')\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(BlueprintTestCase))\n+    suite.addTest(unittest.makeSuite(ModuleTestCase))\n+    return suite\n\n@@ -0,0 +1,177 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.config\n+    ~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Configuration and instances.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import sys\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+# config keys used for the ConfigTestCase\n+TEST_KEY = 'foo'\n+SECRET_KEY = 'devkey'\n+\n+\n+class ConfigTestCase(FlaskTestCase):\n+\n+    def common_object_test(self, app):\n+        assert app.secret_key == 'devkey'\n+        assert app.config['TEST_KEY'] == 'foo'\n+        assert 'ConfigTestCase' not in app.config\n+\n+    def test_config_from_file(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_pyfile(__file__.rsplit('.')[0] + '.py')\n+        self.common_object_test(app)\n+\n+    def test_config_from_object(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_object(__name__)\n+        self.common_object_test(app)\n+\n+    def test_config_from_class(self):\n+        class Base(object):\n+            TEST_KEY = 'foo'\n+        class Test(Base):\n+            SECRET_KEY = 'devkey'\n+        app = flask.Flask(__name__)\n+        app.config.from_object(Test)\n+        self.common_object_test(app)\n+\n+    def test_config_from_envvar(self):\n+        env = os.environ\n+        try:\n+            os.environ = {}\n+            app = flask.Flask(__name__)\n+            try:\n+                app.config.from_envvar('FOO_SETTINGS')\n+            except RuntimeError, e:\n+                assert \"'FOO_SETTINGS' is not set\" in str(e)\n+            else:\n+                assert 0, 'expected exception'\n+            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+\n+            os.environ = {'FOO_SETTINGS': __file__.rsplit('.')[0] + '.py'}\n+            assert app.config.from_envvar('FOO_SETTINGS')\n+            self.common_object_test(app)\n+        finally:\n+            os.environ = env\n+\n+    def test_config_missing(self):\n+        app = flask.Flask(__name__)\n+        try:\n+            app.config.from_pyfile('missing.cfg')\n+        except IOError, e:\n+            msg = str(e)\n+            assert msg.startswith('[Errno 2] Unable to load configuration '\n+                                  'file (No such file or directory):')\n+            assert msg.endswith(\"missing.cfg'\")\n+        else:\n+            assert 0, 'expected config'\n+        assert not app.config.from_pyfile('missing.cfg', silent=True)\n+\n+\n+class InstanceTestCase(FlaskTestCase):\n+\n+    def test_explicit_instance_paths(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        try:\n+            flask.Flask(__name__, instance_path='instance')\n+        except ValueError, e:\n+            self.assert_('must be absolute' in str(e))\n+        else:\n+            self.fail('Expected value error')\n+\n+        app = flask.Flask(__name__, instance_path=here)\n+        self.assert_equal(app.instance_path, here)\n+\n+    def test_uninstalled_module_paths(self):\n+        from config_module_app import app\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n+\n+    def test_uninstalled_package_paths(self):\n+        from config_package_app import app\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n+\n+    def test_installed_module_paths(self):\n+        import types\n+        expected_prefix = os.path.abspath('foo')\n+        mod = types.ModuleType('myapp')\n+        mod.__file__ = os.path.join(expected_prefix, 'lib', 'python2.5',\n+                                    'site-packages', 'myapp.py')\n+        sys.modules['myapp'] = mod\n+        try:\n+            mod.app = flask.Flask(mod.__name__)\n+            self.assert_equal(mod.app.instance_path,\n+                             os.path.join(expected_prefix, 'var',\n+                                          'myapp-instance'))\n+        finally:\n+            sys.modules['myapp'] = None\n+\n+    def test_installed_package_paths(self):\n+        import types\n+        expected_prefix = os.path.abspath('foo')\n+        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n+                                    'site-packages', 'myapp')\n+        mod = types.ModuleType('myapp')\n+        mod.__path__ = [package_path]\n+        mod.__file__ = os.path.join(package_path, '__init__.py')\n+        sys.modules['myapp'] = mod\n+        try:\n+            mod.app = flask.Flask(mod.__name__)\n+            self.assert_equal(mod.app.instance_path,\n+                             os.path.join(expected_prefix, 'var',\n+                                          'myapp-instance'))\n+        finally:\n+            sys.modules['myapp'] = None\n+\n+    def test_prefix_installed_paths(self):\n+        import types\n+        expected_prefix = os.path.abspath(sys.prefix)\n+        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n+                                    'site-packages', 'myapp')\n+        mod = types.ModuleType('myapp')\n+        mod.__path__ = [package_path]\n+        mod.__file__ = os.path.join(package_path, '__init__.py')\n+        sys.modules['myapp'] = mod\n+        try:\n+            mod.app = flask.Flask(mod.__name__)\n+            self.assert_equal(mod.app.instance_path,\n+                             os.path.join(expected_prefix, 'var',\n+                                          'myapp-instance'))\n+        finally:\n+            sys.modules['myapp'] = None\n+\n+    def test_egg_installed_paths(self):\n+        import types\n+        expected_prefix = os.path.abspath(sys.prefix)\n+        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n+                                    'site-packages', 'MyApp.egg', 'myapp')\n+        mod = types.ModuleType('myapp')\n+        mod.__path__ = [package_path]\n+        mod.__file__ = os.path.join(package_path, '__init__.py')\n+        sys.modules['myapp'] = mod\n+        try:\n+            mod.app = flask.Flask(mod.__name__)\n+            self.assert_equal(mod.app.instance_path,\n+                             os.path.join(expected_prefix, 'var',\n+                                          'myapp-instance'))\n+        finally:\n+            sys.modules['myapp'] = None\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ConfigTestCase))\n+    suite.addTest(unittest.makeSuite(InstanceTestCase))\n+    return suite\n\n@@ -0,0 +1,38 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.deprecations\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Tests deprecation support.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase, catch_warnings\n+\n+\n+class DeprecationsTestCase(FlaskTestCase):\n+\n+    def test_init_jinja_globals(self):\n+        class MyFlask(flask.Flask):\n+            def init_jinja_globals(self):\n+                self.jinja_env.globals['foo'] = '42'\n+\n+        with catch_warnings() as log:\n+            app = MyFlask(__name__)\n+            @app.route('/')\n+            def foo():\n+                return app.jinja_env.globals['foo']\n+\n+            c = app.test_client()\n+            assert c.get('/').data == '42'\n+            assert len(log) == 1\n+            assert 'init_jinja_globals' in str(log[0]['message'])\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(DeprecationsTestCase))\n+    return suite\n\n@@ -0,0 +1,38 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.examples\n+    ~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Tests the examples.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import unittest\n+from flask.testsuite import add_to_path\n+\n+\n+def setup_path():\n+    example_path = os.path.join(os.path.dirname(__file__),\n+                                os.pardir, os.pardir, 'examples')\n+    add_to_path(os.path.join(example_path, 'flaskr'))\n+    add_to_path(os.path.join(example_path, 'minitwit'))\n+\n+\n+def suite():\n+    setup_path()\n+    suite = unittest.TestSuite()\n+    try:\n+        from minitwit_tests import MiniTwitTestCase\n+    except ImportError:\n+        pass\n+    else:\n+        suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n+    try:\n+        from flaskr_tests import FlaskrTestCase\n+    except ImportError:\n+        pass\n+    else:\n+        suite.addTest(unittest.makeSuite(FlaskrTestCase))\n+    return suite\n\n@@ -0,0 +1,295 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.helpers\n+    ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Various helpers.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import flask\n+import unittest\n+from logging import StreamHandler\n+from StringIO import StringIO\n+from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n+from werkzeug.http import parse_options_header\n+\n+\n+def has_encoding(name):\n+    try:\n+        import codecs\n+        codecs.lookup(name)\n+        return True\n+    except LookupError:\n+        return False\n+\n+\n+class JSONTestCase(FlaskTestCase):\n+\n+    def test_json_bad_requests(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/json', methods=['POST'])\n+        def return_json():\n+            return unicode(flask.request.json)\n+        c = app.test_client()\n+        rv = c.post('/json', data='malformed', content_type='application/json')\n+        self.assert_equal(rv.status_code, 400)\n+\n+    def test_json_body_encoding(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            return flask.request.json\n+\n+        c = app.test_client()\n+        resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n+                     content_type='application/json; charset=iso-8859-15')\n+        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n+\n+    def test_jsonify(self):\n+        d = dict(a=23, b=42, c=[1, 2, 3])\n+        app = flask.Flask(__name__)\n+        @app.route('/kw')\n+        def return_kwargs():\n+            return flask.jsonify(**d)\n+        @app.route('/dict')\n+        def return_dict():\n+            return flask.jsonify(d)\n+        c = app.test_client()\n+        for url in '/kw', '/dict':\n+            rv = c.get(url)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data) == d\n+\n+    def test_json_attr(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/add', methods=['POST'])\n+        def add():\n+            return unicode(flask.request.json['a'] + flask.request.json['b'])\n+        c = app.test_client()\n+        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n+                            content_type='application/json')\n+        assert rv.data == '3'\n+\n+    def test_template_escaping(self):\n+        app = flask.Flask(__name__)\n+        render = flask.render_template_string\n+        with app.test_request_context():\n+            rv = render('{{ \"</script>\"|tojson|safe }}')\n+            assert rv == '\"<\\\\/script>\"'\n+            rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n+            assert rv == '\"<\\\\u0000\\\\/script>\"'\n+\n+    def test_modified_url_encoding(self):\n+        class ModifiedRequest(flask.Request):\n+            url_charset = 'euc-kr'\n+        app = flask.Flask(__name__)\n+        app.request_class = ModifiedRequest\n+        app.url_map.charset = 'euc-kr'\n+\n+        @app.route('/')\n+        def index():\n+            return flask.request.args['foo']\n+\n+        rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n+        assert rv.status_code == 200\n+        assert rv.data == u'정상처리'.encode('utf-8')\n+\n+    if not has_encoding('euc-kr'):\n+        test_modified_url_encoding = None\n+\n+\n+class SendfileTestCase(FlaskTestCase):\n+\n+    def test_send_file_regular(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            rv = flask.send_file('static/index.html')\n+            assert rv.direct_passthrough\n+            assert rv.mimetype == 'text/html'\n+            with app.open_resource('static/index.html') as f:\n+                assert rv.data == f.read()\n+\n+    def test_send_file_xsendfile(self):\n+        app = flask.Flask(__name__)\n+        app.use_x_sendfile = True\n+        with app.test_request_context():\n+            rv = flask.send_file('static/index.html')\n+            assert rv.direct_passthrough\n+            assert 'x-sendfile' in rv.headers\n+            assert rv.headers['x-sendfile'] == \\\n+                os.path.join(app.root_path, 'static/index.html')\n+            assert rv.mimetype == 'text/html'\n+\n+    def test_send_file_object(self):\n+        app = flask.Flask(__name__)\n+        with catch_warnings() as captured:\n+            with app.test_request_context():\n+                f = open(os.path.join(app.root_path, 'static/index.html'))\n+                rv = flask.send_file(f)\n+                with app.open_resource('static/index.html') as f:\n+                    assert rv.data == f.read()\n+                assert rv.mimetype == 'text/html'\n+            # mimetypes + etag\n+            assert len(captured) == 2\n+\n+        app.use_x_sendfile = True\n+        with catch_warnings() as captured:\n+            with app.test_request_context():\n+                f = open(os.path.join(app.root_path, 'static/index.html'))\n+                rv = flask.send_file(f)\n+                assert rv.mimetype == 'text/html'\n+                assert 'x-sendfile' in rv.headers\n+                assert rv.headers['x-sendfile'] == \\\n+                    os.path.join(app.root_path, 'static/index.html')\n+            # mimetypes + etag\n+            assert len(captured) == 2\n+\n+        app.use_x_sendfile = False\n+        with app.test_request_context():\n+            with catch_warnings() as captured:\n+                f = StringIO('Test')\n+                rv = flask.send_file(f)\n+                assert rv.data == 'Test'\n+                assert rv.mimetype == 'application/octet-stream'\n+            # etags\n+            assert len(captured) == 1\n+            with catch_warnings() as captured:\n+                f = StringIO('Test')\n+                rv = flask.send_file(f, mimetype='text/plain')\n+                assert rv.data == 'Test'\n+                assert rv.mimetype == 'text/plain'\n+            # etags\n+            assert len(captured) == 1\n+\n+        app.use_x_sendfile = True\n+        with catch_warnings() as captured:\n+            with app.test_request_context():\n+                f = StringIO('Test')\n+                rv = flask.send_file(f)\n+                assert 'x-sendfile' not in rv.headers\n+            # etags\n+            assert len(captured) == 1\n+\n+    def test_attachment(self):\n+        app = flask.Flask(__name__)\n+        with catch_warnings() as captured:\n+            with app.test_request_context():\n+                f = open(os.path.join(app.root_path, 'static/index.html'))\n+                rv = flask.send_file(f, as_attachment=True)\n+                value, options = parse_options_header(rv.headers['Content-Disposition'])\n+                assert value == 'attachment'\n+            # mimetypes + etag\n+            assert len(captured) == 2\n+\n+        with app.test_request_context():\n+            assert options['filename'] == 'index.html'\n+            rv = flask.send_file('static/index.html', as_attachment=True)\n+            value, options = parse_options_header(rv.headers['Content-Disposition'])\n+            assert value == 'attachment'\n+            assert options['filename'] == 'index.html'\n+\n+        with app.test_request_context():\n+            rv = flask.send_file(StringIO('Test'), as_attachment=True,\n+                                 attachment_filename='index.txt',\n+                                 add_etags=False)\n+            assert rv.mimetype == 'text/plain'\n+            value, options = parse_options_header(rv.headers['Content-Disposition'])\n+            assert value == 'attachment'\n+            assert options['filename'] == 'index.txt'\n+\n+\n+class LoggingTestCase(FlaskTestCase):\n+\n+    def test_logger_cache(self):\n+        app = flask.Flask(__name__)\n+        logger1 = app.logger\n+        assert app.logger is logger1\n+        assert logger1.name == __name__\n+        app.logger_name = __name__ + '/test_logger_cache'\n+        assert app.logger is not logger1\n+\n+    def test_debug_log(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+\n+        @app.route('/')\n+        def index():\n+            app.logger.warning('the standard library is dead')\n+            app.logger.debug('this is a debug statement')\n+            return ''\n+\n+        @app.route('/exc')\n+        def exc():\n+            1/0\n+\n+        with app.test_client() as c:\n+            with catch_stderr() as err:\n+                c.get('/')\n+                out = err.getvalue()\n+                assert 'WARNING in helpers [' in out\n+                assert os.path.basename(__file__.rsplit('.')[0] + '.py') in out\n+                assert 'the standard library is dead' in out\n+                assert 'this is a debug statement' in out\n+\n+            with catch_stderr() as err:\n+                try:\n+                    c.get('/exc')\n+                except ZeroDivisionError:\n+                    pass\n+                else:\n+                    assert False, 'debug log ate the exception'\n+\n+    def test_exception_logging(self):\n+        out = StringIO()\n+        app = flask.Flask(__name__)\n+        app.logger_name = 'flask_tests/test_exception_logging'\n+        app.logger.addHandler(StreamHandler(out))\n+\n+        @app.route('/')\n+        def index():\n+            1/0\n+\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+\n+        err = out.getvalue()\n+        assert 'Exception on / [GET]' in err\n+        assert 'Traceback (most recent call last):' in err\n+        assert '1/0' in err\n+        assert 'ZeroDivisionError:' in err\n+\n+    def test_processor_exceptions(self):\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def before_request():\n+            if trigger == 'before':\n+                1/0\n+        @app.after_request\n+        def after_request(response):\n+            if trigger == 'after':\n+                1/0\n+            return response\n+        @app.route('/')\n+        def index():\n+            return 'Foo'\n+        @app.errorhandler(500)\n+        def internal_server_error(e):\n+            return 'Hello Server Error', 500\n+        for trigger in 'before', 'after':\n+            rv = app.test_client().get('/')\n+            assert rv.status_code == 500\n+            assert rv.data == 'Hello Server Error'\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    if flask.json_available:\n+        suite.addTest(unittest.makeSuite(JSONTestCase))\n+    suite.addTest(unittest.makeSuite(SendfileTestCase))\n+    suite.addTest(unittest.makeSuite(LoggingTestCase))\n+    return suite\n\n@@ -0,0 +1,103 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.signals\n+    ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Signalling.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class SignalsTestCase(FlaskTestCase):\n+\n+    def test_template_rendered(self):\n+        app = flask.Flask(__name__)\n+\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('simple_template.html', whiskey=42)\n+\n+        recorded = []\n+        def record(sender, template, context):\n+            recorded.append((template, context))\n+\n+        flask.template_rendered.connect(record, app)\n+        try:\n+            app.test_client().get('/')\n+            assert len(recorded) == 1\n+            template, context = recorded[0]\n+            assert template.name == 'simple_template.html'\n+            assert context['whiskey'] == 42\n+        finally:\n+            flask.template_rendered.disconnect(record, app)\n+\n+    def test_request_signals(self):\n+        app = flask.Flask(__name__)\n+        calls = []\n+\n+        def before_request_signal(sender):\n+            calls.append('before-signal')\n+\n+        def after_request_signal(sender, response):\n+            assert response.data == 'stuff'\n+            calls.append('after-signal')\n+\n+        @app.before_request\n+        def before_request_handler():\n+            calls.append('before-handler')\n+\n+        @app.after_request\n+        def after_request_handler(response):\n+            calls.append('after-handler')\n+            response.data = 'stuff'\n+            return response\n+\n+        @app.route('/')\n+        def index():\n+            calls.append('handler')\n+            return 'ignored anyway'\n+\n+        flask.request_started.connect(before_request_signal, app)\n+        flask.request_finished.connect(after_request_signal, app)\n+\n+        try:\n+            rv = app.test_client().get('/')\n+            assert rv.data == 'stuff'\n+\n+            assert calls == ['before-signal', 'before-handler',\n+                             'handler', 'after-handler',\n+                             'after-signal']\n+        finally:\n+            flask.request_started.disconnect(before_request_signal, app)\n+            flask.request_finished.disconnect(after_request_signal, app)\n+\n+    def test_request_exception_signal(self):\n+        app = flask.Flask(__name__)\n+        recorded = []\n+\n+        @app.route('/')\n+        def index():\n+            1/0\n+\n+        def record(sender, exception):\n+            recorded.append(exception)\n+\n+        flask.got_request_exception.connect(record, app)\n+        try:\n+            assert app.test_client().get('/').status_code == 500\n+            assert len(recorded) == 1\n+            assert isinstance(recorded[0], ZeroDivisionError)\n+        finally:\n+            flask.got_request_exception.disconnect(record, app)\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    if flask.signals_available:\n+        suite.addTest(unittest.makeSuite(SignalsTestCase))\n+    return suite\n\n@@ -0,0 +1,141 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.templating\n+    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Template functionality\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class TemplatingTestCase(FlaskTestCase):\n+\n+    def test_context_processing(self):\n+        app = flask.Flask(__name__)\n+        @app.context_processor\n+        def context_processor():\n+            return {'injected_value': 42}\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('context_template.html', value=23)\n+        rv = app.test_client().get('/')\n+        assert rv.data == '<p>23|42'\n+\n+    def test_original_win(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template_string('{{ config }}', config=42)\n+        rv = app.test_client().get('/')\n+        assert rv.data == '42'\n+\n+    def test_standard_context(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'development key'\n+        @app.route('/')\n+        def index():\n+            flask.g.foo = 23\n+            flask.session['test'] = 'aha'\n+            return flask.render_template_string('''\n+                {{ request.args.foo }}\n+                {{ g.foo }}\n+                {{ config.DEBUG }}\n+                {{ session.test }}\n+            ''')\n+        rv = app.test_client().get('/?foo=42')\n+        assert rv.data.split() == ['42', '23', 'False', 'aha']\n+\n+    def test_escaping(self):\n+        text = '<p>Hello World!'\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('escaping_template.html', text=text,\n+                                         html=flask.Markup(text))\n+        lines = app.test_client().get('/').data.splitlines()\n+        assert lines == [\n+            '&lt;p&gt;Hello World!',\n+            '<p>Hello World!',\n+            '<p>Hello World!',\n+            '<p>Hello World!',\n+            '&lt;p&gt;Hello World!',\n+            '<p>Hello World!'\n+        ]\n+\n+    def test_no_escaping(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            assert flask.render_template_string('{{ foo }}',\n+                foo='<test>') == '<test>'\n+            assert flask.render_template('mail.txt', foo='<test>') \\\n+                == '<test> Mail'\n+\n+    def test_macros(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            macro = flask.get_template_attribute('_macro.html', 'hello')\n+            assert macro('World') == 'Hello World!'\n+\n+    def test_template_filter(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter()\n+        def my_reverse(s):\n+            return s[::-1]\n+        assert 'my_reverse' in  app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['my_reverse'] == my_reverse\n+        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+\n+    def test_template_filter_with_name(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter('strrev')\n+        def my_reverse(s):\n+            return s[::-1]\n+        assert 'strrev' in  app.jinja_env.filters.keys()\n+        assert app.jinja_env.filters['strrev'] == my_reverse\n+        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+\n+    def test_template_filter_with_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter()\n+        def super_reverse(s):\n+            return s[::-1]\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'dcba'\n+\n+    def test_template_filter_with_name_and_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_filter('super_reverse')\n+        def my_reverse(s):\n+            return s[::-1]\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'dcba'\n+\n+    def test_custom_template_loader(self):\n+        class MyFlask(flask.Flask):\n+            def create_global_jinja_loader(self):\n+                from jinja2 import DictLoader\n+                return DictLoader({'index.html': 'Hello Custom World!'})\n+        app = MyFlask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('index.html')\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.data == 'Hello Custom World!'\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(TemplatingTestCase))\n+    return suite\n\n\n\n\n\n@@ -0,0 +1,4 @@\n+import os\n+import flask\n+here = os.path.abspath(os.path.dirname(__file__))\n+app = flask.Flask(__name__)\n\n@@ -0,0 +1,4 @@\n+import os\n+import flask\n+here = os.path.abspath(os.path.dirname(__file__))\n+app = flask.Flask(__name__)\n\n\n\n\n\n\n@@ -0,0 +1,121 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.testing\n+    ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Test client and more.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class TestToolsTestCase(FlaskTestCase):\n+\n+    def test_environ_defaults_from_config(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.config['SERVER_NAME'] = 'example.com:1234'\n+        app.config['APPLICATION_ROOT'] = '/foo'\n+        @app.route('/')\n+        def index():\n+            return flask.request.url\n+\n+        ctx = app.test_request_context()\n+        self.assert_equal(ctx.request.url, 'http://example.com:1234/foo/')\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assert_equal(rv.data, 'http://example.com:1234/foo/')\n+\n+    def test_environ_defaults(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            return flask.request.url\n+\n+        ctx = app.test_request_context()\n+        self.assert_equal(ctx.request.url, 'http://localhost/')\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assert_equal(rv.data, 'http://localhost/')\n+\n+    def test_session_transactions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.secret_key = 'testing'\n+\n+        @app.route('/')\n+        def index():\n+            return unicode(flask.session['foo'])\n+\n+        with app.test_client() as c:\n+            with c.session_transaction() as sess:\n+                self.assert_equal(len(sess), 0)\n+                sess['foo'] = [42]\n+                self.assert_equal(len(sess), 1)\n+            rv = c.get('/')\n+            self.assert_equal(rv.data, '[42]')\n+\n+    def test_session_transactions_no_null_sessions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        with app.test_client() as c:\n+            try:\n+                with c.session_transaction() as sess:\n+                    pass\n+            except RuntimeError, e:\n+                self.assert_('Session backend did not open a session' in str(e))\n+            else:\n+                self.fail('Expected runtime error')\n+\n+    def test_session_transactions_keep_context(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.secret_key = 'testing'\n+\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            req = flask.request._get_current_object()\n+            with c.session_transaction():\n+                self.assert_(req is flask.request._get_current_object())\n+\n+    def test_test_client_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            flask.g.value = 42\n+            return 'Hello World!'\n+\n+        @app.route('/other')\n+        def other():\n+            1/0\n+\n+        with app.test_client() as c:\n+            resp = c.get('/')\n+            assert flask.g.value == 42\n+            assert resp.data == 'Hello World!'\n+            assert resp.status_code == 200\n+\n+            resp = c.get('/other')\n+            assert not hasattr(flask.g, 'value')\n+            assert 'Internal Server Error' in resp.data\n+            assert resp.status_code == 500\n+            flask.g.value = 23\n+\n+        try:\n+            flask.g.value\n+        except (AttributeError, RuntimeError):\n+            pass\n+        else:\n+            raise AssertionError('some kind of exception expected')\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(TestToolsTestCase))\n+    return suite\n\n@@ -0,0 +1,117 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.views\n+    ~~~~~~~~~~~~~~~~~~~~~\n+\n+    Pluggable views.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flask\n+import flask.views\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+from werkzeug.http import parse_set_header\n+\n+\n+class ViewTestCase(FlaskTestCase):\n+\n+    def common_test(self, app):\n+        c = app.test_client()\n+\n+        self.assert_equal(c.get('/').data, 'GET')\n+        self.assert_equal(c.post('/').data, 'POST')\n+        self.assert_equal(c.put('/').status_code, 405)\n+        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n+        self.assert_equal(sorted(meths), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+\n+    def test_basic_view(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.View):\n+            methods = ['GET', 'POST']\n+            def dispatch_request(self):\n+                return flask.request.method\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        self.common_test(app)\n+\n+    def test_method_based_view(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+\n+        self.common_test(app)\n+\n+    def test_view_patching(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                1/0\n+            def post(self):\n+                1/0\n+\n+        class Other(Index):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        view = Index.as_view('index')\n+        view.view_class = Other\n+        app.add_url_rule('/', view_func=view)\n+        self.common_test(app)\n+\n+    def test_view_inheritance(self):\n+        app = flask.Flask(__name__)\n+\n+        class Index(flask.views.MethodView):\n+            def get(self):\n+                return 'GET'\n+            def post(self):\n+                return 'POST'\n+\n+        class BetterIndex(Index):\n+            def delete(self):\n+                return 'DELETE'\n+\n+        app.add_url_rule('/', view_func=BetterIndex.as_view('index'))\n+        c = app.test_client()\n+\n+        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n+        self.assert_equal(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n+\n+    def test_view_decorators(self):\n+        app = flask.Flask(__name__)\n+\n+        def add_x_parachute(f):\n+            def new_function(*args, **kwargs):\n+                resp = flask.make_response(f(*args, **kwargs))\n+                resp.headers['X-Parachute'] = 'awesome'\n+                return resp\n+            return new_function\n+\n+        class Index(flask.views.View):\n+            decorators = [add_x_parachute]\n+            def dispatch_request(self):\n+                return 'Awesome'\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+        c = app.test_client()\n+        rv = c.get('/')\n+        self.assert_equal(rv.headers['X-Parachute'], 'awesome')\n+        self.assert_equal(rv.data, 'Awesome')\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ViewTestCase))\n+    return suite\n\n\n@@ -77,12 +77,6 @@ class run_audit(Command):\n         else:\n             print (\"No problems found in sourcecode.\")\n \n-def run_tests():\n-    import os, sys\n-    sys.path.append(os.path.join(os.path.dirname(__file__), 'tests'))\n-    from flask_tests import suite\n-    return suite()\n-\n \n setup(\n     name='Flask',\n@@ -112,5 +106,5 @@ setup(\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n     cmdclass={'audit': run_audit},\n-    test_suite='__main__.run_tests'\n+    test_suite='flask.testsuite.suite'\n )\n\n@@ -1,2329 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flask Tests\n-    ~~~~~~~~~~~\n-\n-    Tests Flask itself.  The majority of Flask is already tested\n-    as part of Werkzeug.\n-\n-    :copyright: (c) 2010 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-from __future__ import with_statement\n-import os\n-import re\n-import sys\n-import flask\n-import flask.views\n-import unittest\n-import warnings\n-from threading import Thread\n-from logging import StreamHandler\n-from contextlib import contextmanager\n-from functools import update_wrapper\n-from datetime import datetime\n-from werkzeug import parse_date, parse_options_header\n-from werkzeug.exceptions import NotFound, BadRequest\n-from werkzeug.http import parse_set_header\n-from jinja2 import TemplateNotFound\n-from cStringIO import StringIO\n-\n-example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n-sys.path.append(os.path.join(example_path, 'flaskr'))\n-sys.path.append(os.path.join(example_path, 'minitwit'))\n-\n-\n-def has_encoding(name):\n-    try:\n-        import codecs\n-        codecs.lookup(name)\n-        return True\n-    except LookupError:\n-        return False\n-\n-\n-# config keys used for the ConfigTestCase\n-TEST_KEY = 'foo'\n-SECRET_KEY = 'devkey'\n-\n-\n-# import moduleapp here because it uses deprecated features and we don't\n-# want to see the warnings\n-warnings.simplefilter('ignore', DeprecationWarning)\n-from moduleapp import app as moduleapp\n-warnings.simplefilter('default', DeprecationWarning)\n-\n-\n-@contextmanager\n-def catch_warnings():\n-    \"\"\"Catch warnings in a with block in a list\"\"\"\n-    # make sure deprecation warnings are active in tests\n-    warnings.simplefilter('default', category=DeprecationWarning)\n-\n-    filters = warnings.filters\n-    warnings.filters = filters[:]\n-    old_showwarning = warnings.showwarning\n-    log = []\n-    def showwarning(message, category, filename, lineno, file=None, line=None):\n-        log.append(locals())\n-    try:\n-        warnings.showwarning = showwarning\n-        yield log\n-    finally:\n-        warnings.filters = filters\n-        warnings.showwarning = old_showwarning\n-\n-\n-@contextmanager\n-def catch_stderr():\n-    \"\"\"Catch stderr in a StringIO\"\"\"\n-    old_stderr = sys.stderr\n-    sys.stderr = rv = StringIO()\n-    try:\n-        yield rv\n-    finally:\n-        sys.stderr = old_stderr\n-\n-\n-def emits_module_deprecation_warning(f):\n-    def new_f(*args, **kwargs):\n-        with catch_warnings() as log:\n-            f(*args, **kwargs)\n-            assert log, 'expected deprecation warning'\n-            for entry in log:\n-                assert 'Modules are deprecated' in str(entry['message'])\n-    return update_wrapper(new_f, f)\n-\n-\n-class FlaskTestCase(unittest.TestCase):\n-\n-    def ensure_clean_request_context(self):\n-        # make sure we're not leaking a request context since we are\n-        # testing flask internally in debug mode in a few cases\n-        self.assertEqual(flask._request_ctx_stack.top, None)\n-\n-    def tearDown(self):\n-        unittest.TestCase.tearDown(self)\n-        self.ensure_clean_request_context()\n-\n-\n-class ContextTestCase(FlaskTestCase):\n-\n-    def test_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return 'Hello %s!' % flask.request.args['name']\n-        @app.route('/meh')\n-        def meh():\n-            return flask.request.url\n-\n-        with app.test_request_context('/?name=World'):\n-            assert index() == 'Hello World!'\n-        with app.test_request_context('/meh'):\n-            assert meh() == 'http://localhost/meh'\n-        assert flask._request_ctx_stack.top is None\n-\n-    def test_context_test(self):\n-        app = flask.Flask(__name__)\n-        assert not flask.request\n-        assert not flask.has_request_context()\n-        ctx = app.test_request_context()\n-        ctx.push()\n-        try:\n-            assert flask.request\n-            assert flask.has_request_context()\n-        finally:\n-            ctx.pop()\n-\n-    def test_manual_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return 'Hello %s!' % flask.request.args['name']\n-\n-        ctx = app.test_request_context('/?name=World')\n-        ctx.push()\n-        assert index() == 'Hello World!'\n-        ctx.pop()\n-        try:\n-            index()\n-        except RuntimeError:\n-            pass\n-        else:\n-            assert 0, 'expected runtime error'\n-\n-\n-class BasicFunctionalityTestCase(FlaskTestCase):\n-\n-    def test_options_work(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/', methods=['GET', 'POST'])\n-        def index():\n-            return 'Hello World'\n-        rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-        assert rv.data == ''\n-\n-    def test_options_on_multiple_rules(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/', methods=['GET', 'POST'])\n-        def index():\n-            return 'Hello World'\n-        @app.route('/', methods=['PUT'])\n-        def index_put():\n-            return 'Aha!'\n-        rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n-\n-    def test_options_handling_disabled(self):\n-        app = flask.Flask(__name__)\n-        def index():\n-            return 'Hello World!'\n-        index.provide_automatic_options = False\n-        app.route('/')(index)\n-        rv = app.test_client().open('/', method='OPTIONS')\n-        assert rv.status_code == 405\n-\n-        app = flask.Flask(__name__)\n-        def index2():\n-            return 'Hello World!'\n-        index2.provide_automatic_options = True\n-        app.route('/', methods=['OPTIONS'])(index2)\n-        rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['OPTIONS']\n-\n-    def test_request_dispatching(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return flask.request.method\n-        @app.route('/more', methods=['GET', 'POST'])\n-        def more():\n-            return flask.request.method\n-\n-        c = app.test_client()\n-        assert c.get('/').data == 'GET'\n-        rv = c.post('/')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-        rv = c.head('/')\n-        assert rv.status_code == 200\n-        assert not rv.data  # head truncates\n-        assert c.post('/more').data == 'POST'\n-        assert c.get('/more').data == 'GET'\n-        rv = c.delete('/more')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-\n-    def test_url_mapping(self):\n-        app = flask.Flask(__name__)\n-        def index():\n-            return flask.request.method\n-        def more():\n-            return flask.request.method\n-\n-        app.add_url_rule('/', 'index', index)\n-        app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n-\n-        c = app.test_client()\n-        assert c.get('/').data == 'GET'\n-        rv = c.post('/')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-        rv = c.head('/')\n-        assert rv.status_code == 200\n-        assert not rv.data  # head truncates\n-        assert c.post('/more').data == 'POST'\n-        assert c.get('/more').data == 'GET'\n-        rv = c.delete('/more')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-\n-    def test_werkzeug_routing(self):\n-        from werkzeug.routing import Submount, Rule\n-        app = flask.Flask(__name__)\n-        app.url_map.add(Submount('/foo', [\n-            Rule('/bar', endpoint='bar'),\n-            Rule('/', endpoint='index')\n-        ]))\n-        def bar():\n-            return 'bar'\n-        def index():\n-            return 'index'\n-        app.view_functions['bar'] = bar\n-        app.view_functions['index'] = index\n-\n-        c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n-\n-    def test_endpoint_decorator(self):\n-        from werkzeug.routing import Submount, Rule\n-        app = flask.Flask(__name__)\n-        app.url_map.add(Submount('/foo', [\n-            Rule('/bar', endpoint='bar'),\n-            Rule('/', endpoint='index')\n-        ]))\n-\n-        @app.endpoint('bar')\n-        def bar():\n-            return 'bar'\n-\n-        @app.endpoint('index')\n-        def index():\n-            return 'index'\n-\n-        c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n-\n-    def test_session(self):\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'testkey'\n-        @app.route('/set', methods=['POST'])\n-        def set():\n-            flask.session['value'] = flask.request.form['value']\n-            return 'value set'\n-        @app.route('/get')\n-        def get():\n-            return flask.session['value']\n-\n-        c = app.test_client()\n-        assert c.post('/set', data={'value': '42'}).data == 'value set'\n-        assert c.get('/get').data == '42'\n-\n-    def test_session_using_server_name(self):\n-        app = flask.Flask(__name__)\n-        app.config.update(\n-            SECRET_KEY='foo',\n-            SERVER_NAME='example.com'\n-        )\n-        @app.route('/')\n-        def index():\n-            flask.session['testing'] = 42\n-            return 'Hello World'\n-        rv = app.test_client().get('/', 'http://example.com/')\n-        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-        assert 'httponly' in rv.headers['set-cookie'].lower()\n-\n-    def test_session_using_server_name_and_port(self):\n-        app = flask.Flask(__name__)\n-        app.config.update(\n-            SECRET_KEY='foo',\n-            SERVER_NAME='example.com:8080'\n-        )\n-        @app.route('/')\n-        def index():\n-            flask.session['testing'] = 42\n-            return 'Hello World'\n-        rv = app.test_client().get('/', 'http://example.com:8080/')\n-        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n-        assert 'httponly' in rv.headers['set-cookie'].lower()\n-\n-    def test_session_using_application_root(self):\n-        class PrefixPathMiddleware(object):\n-            def __init__(self, app, prefix):\n-                self.app = app\n-                self.prefix = prefix\n-            def __call__(self, environ, start_response):\n-                environ['SCRIPT_NAME'] = self.prefix\n-                return self.app(environ, start_response)\n-\n-        app = flask.Flask(__name__)\n-        app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, '/bar')\n-        app.config.update(\n-            SECRET_KEY='foo',\n-            APPLICATION_ROOT='/bar'\n-        )\n-        @app.route('/')\n-        def index():\n-            flask.session['testing'] = 42\n-            return 'Hello World'\n-        rv = app.test_client().get('/', 'http://example.com:8080/')\n-        assert 'path=/bar' in rv.headers['set-cookie'].lower()\n-\n-    def test_missing_session(self):\n-        app = flask.Flask(__name__)\n-        def expect_exception(f, *args, **kwargs):\n-            try:\n-                f(*args, **kwargs)\n-            except RuntimeError, e:\n-                assert e.args and 'session is unavailable' in e.args[0]\n-            else:\n-                assert False, 'expected exception'\n-        with app.test_request_context():\n-            assert flask.session.get('missing_key') is None\n-            expect_exception(flask.session.__setitem__, 'foo', 42)\n-            expect_exception(flask.session.pop, 'foo')\n-\n-    def test_session_expiration(self):\n-        permanent = True\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'testkey'\n-        @app.route('/')\n-        def index():\n-            flask.session['test'] = 42\n-            flask.session.permanent = permanent\n-            return ''\n-\n-        @app.route('/test')\n-        def test():\n-            return unicode(flask.session.permanent)\n-\n-        client = app.test_client()\n-        rv = client.get('/')\n-        assert 'set-cookie' in rv.headers\n-        match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n-        expires = parse_date(match.group())\n-        expected = datetime.utcnow() + app.permanent_session_lifetime\n-        assert expires.year == expected.year\n-        assert expires.month == expected.month\n-        assert expires.day == expected.day\n-\n-        rv = client.get('/test')\n-        assert rv.data == 'True'\n-\n-        permanent = False\n-        rv = app.test_client().get('/')\n-        assert 'set-cookie' in rv.headers\n-        match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n-        assert match is None\n-\n-    def test_flashes(self):\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'testkey'\n-\n-        with app.test_request_context():\n-            assert not flask.session.modified\n-            flask.flash('Zap')\n-            flask.session.modified = False\n-            flask.flash('Zip')\n-            assert flask.session.modified\n-            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n-\n-    def test_extended_flashing(self):\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'testkey'\n-\n-        @app.route('/')\n-        def index():\n-            flask.flash(u'Hello World')\n-            flask.flash(u'Hello World', 'error')\n-            flask.flash(flask.Markup(u'<em>Testing</em>'), 'warning')\n-            return ''\n-\n-        @app.route('/test')\n-        def test():\n-            messages = flask.get_flashed_messages(with_categories=True)\n-            assert len(messages) == 3\n-            assert messages[0] == ('message', u'Hello World')\n-            assert messages[1] == ('error', u'Hello World')\n-            assert messages[2] == ('warning', flask.Markup(u'<em>Testing</em>'))\n-            return ''\n-            messages = flask.get_flashed_messages()\n-            assert len(messages) == 3\n-            assert messages[0] == u'Hello World'\n-            assert messages[1] == u'Hello World'\n-            assert messages[2] == flask.Markup(u'<em>Testing</em>')\n-\n-        c = app.test_client()\n-        c.get('/')\n-        c.get('/test')\n-\n-    def test_request_processing(self):\n-        app = flask.Flask(__name__)\n-        evts = []\n-        @app.before_request\n-        def before_request():\n-            evts.append('before')\n-        @app.after_request\n-        def after_request(response):\n-            response.data += '|after'\n-            evts.append('after')\n-            return response\n-        @app.route('/')\n-        def index():\n-            assert 'before' in evts\n-            assert 'after' not in evts\n-            return 'request'\n-        assert 'after' not in evts\n-        rv = app.test_client().get('/').data\n-        assert 'after' in evts\n-        assert rv == 'request|after'\n-\n-    def test_teardown_request_handler(self):\n-        called = []\n-        app = flask.Flask(__name__)\n-        @app.teardown_request\n-        def teardown_request(exc):\n-            called.append(True)\n-            return \"Ignored\"\n-        @app.route('/')\n-        def root():\n-            return \"Response\"\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 200\n-        assert 'Response' in rv.data\n-        assert len(called) == 1\n-\n-    def test_teardown_request_handler_debug_mode(self):\n-        called = []\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.teardown_request\n-        def teardown_request(exc):\n-            called.append(True)\n-            return \"Ignored\"\n-        @app.route('/')\n-        def root():\n-            return \"Response\"\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 200\n-        assert 'Response' in rv.data\n-        assert len(called) == 1\n-\n-    def test_teardown_request_handler_error(self):\n-        called = []\n-        app = flask.Flask(__name__)\n-        @app.teardown_request\n-        def teardown_request1(exc):\n-            assert type(exc) == ZeroDivisionError\n-            called.append(True)\n-            # This raises a new error and blows away sys.exc_info(), so we can\n-            # test that all teardown_requests get passed the same original\n-            # exception.\n-            try:\n-                raise TypeError\n-            except:\n-                pass\n-        @app.teardown_request\n-        def teardown_request2(exc):\n-            assert type(exc) == ZeroDivisionError\n-            called.append(True)\n-            # This raises a new error and blows away sys.exc_info(), so we can\n-            # test that all teardown_requests get passed the same original\n-            # exception.\n-            try:\n-                raise TypeError\n-            except:\n-                pass\n-        @app.route('/')\n-        def fails():\n-            1/0\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n-        assert 'Internal Server Error' in rv.data\n-        assert len(called) == 2\n-\n-    def test_before_after_request_order(self):\n-        called = []\n-        app = flask.Flask(__name__)\n-        @app.before_request\n-        def before1():\n-            called.append(1)\n-        @app.before_request\n-        def before2():\n-            called.append(2)\n-        @app.after_request\n-        def after1(response):\n-            called.append(4)\n-            return response\n-        @app.after_request\n-        def after2(response):\n-            called.append(3)\n-            return response\n-        @app.teardown_request\n-        def finish1(exc):\n-            called.append(6)\n-        @app.teardown_request\n-        def finish2(exc):\n-            called.append(5)\n-        @app.route('/')\n-        def index():\n-            return '42'\n-        rv = app.test_client().get('/')\n-        assert rv.data == '42'\n-        assert called == [1, 2, 3, 4, 5, 6]\n-\n-    def test_error_handling(self):\n-        app = flask.Flask(__name__)\n-        @app.errorhandler(404)\n-        def not_found(e):\n-            return 'not found', 404\n-        @app.errorhandler(500)\n-        def internal_server_error(e):\n-            return 'internal server error', 500\n-        @app.route('/')\n-        def index():\n-            flask.abort(404)\n-        @app.route('/error')\n-        def error():\n-            1 // 0\n-        c = app.test_client()\n-        rv = c.get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'not found'\n-        rv = c.get('/error')\n-        assert rv.status_code == 500\n-        assert 'internal server error' == rv.data\n-\n-    def test_before_request_and_routing_errors(self):\n-        app = flask.Flask(__name__)\n-        @app.before_request\n-        def attach_something():\n-            flask.g.something = 'value'\n-        @app.errorhandler(404)\n-        def return_something(error):\n-            return flask.g.something, 404\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'value'\n-\n-    def test_user_error_handling(self):\n-        class MyException(Exception):\n-            pass\n-\n-        app = flask.Flask(__name__)\n-        @app.errorhandler(MyException)\n-        def handle_my_exception(e):\n-            assert isinstance(e, MyException)\n-            return '42'\n-        @app.route('/')\n-        def index():\n-            raise MyException()\n-\n-        c = app.test_client()\n-        assert c.get('/').data == '42'\n-\n-    def test_trapping_of_bad_request_key_errors(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/fail')\n-        def fail():\n-            flask.request.form['missing_key']\n-        c = app.test_client()\n-        assert c.get('/fail').status_code == 400\n-\n-        app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n-        c = app.test_client()\n-        try:\n-            c.get('/fail')\n-        except KeyError, e:\n-            assert isinstance(e, BadRequest)\n-        else:\n-            self.fail('Expected exception')\n-\n-    def test_trapping_of_all_http_exceptions(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.config['TRAP_HTTP_EXCEPTIONS'] = True\n-        @app.route('/fail')\n-        def fail():\n-            flask.abort(404)\n-\n-        c = app.test_client()\n-        try:\n-            c.get('/fail')\n-        except NotFound, e:\n-            pass\n-        else:\n-            self.fail('Expected exception')\n-\n-    def test_enctype_debug_helper(self):\n-        from flask.debughelpers import DebugFilesKeyError\n-        app = flask.Flask(__name__)\n-        app.debug = True\n-        @app.route('/fail', methods=['POST'])\n-        def index():\n-            return flask.request.files['foo'].filename\n-\n-        # with statement is important because we leave an exception on the\n-        # stack otherwise and we want to ensure that this is not the case\n-        # to not negatively affect other tests.\n-        with app.test_client() as c:\n-            try:\n-                c.post('/fail', data={'foo': 'index.txt'})\n-            except DebugFilesKeyError, e:\n-                assert 'no file contents were transmitted' in str(e)\n-                assert 'This was submitted: \"index.txt\"' in str(e)\n-            else:\n-                self.fail('Expected exception')\n-\n-    def test_teardown_on_pop(self):\n-        buffer = []\n-        app = flask.Flask(__name__)\n-        @app.teardown_request\n-        def end_of_request(exception):\n-            buffer.append(exception)\n-\n-        ctx = app.test_request_context()\n-        ctx.push()\n-        assert buffer == []\n-        ctx.pop()\n-        assert buffer == [None]\n-\n-    def test_response_creation(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/unicode')\n-        def from_unicode():\n-            return u'Hällo Wörld'\n-        @app.route('/string')\n-        def from_string():\n-            return u'Hällo Wörld'.encode('utf-8')\n-        @app.route('/args')\n-        def from_tuple():\n-            return 'Meh', 400, {'X-Foo': 'Testing'}, 'text/plain'\n-        c = app.test_client()\n-        assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n-        assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n-        rv = c.get('/args')\n-        assert rv.data == 'Meh'\n-        assert rv.headers['X-Foo'] == 'Testing'\n-        assert rv.status_code == 400\n-        assert rv.mimetype == 'text/plain'\n-\n-    def test_make_response(self):\n-        app = flask.Flask(__name__)\n-        with app.test_request_context():\n-            rv = flask.make_response()\n-            assert rv.status_code == 200\n-            assert rv.data == ''\n-            assert rv.mimetype == 'text/html'\n-\n-            rv = flask.make_response('Awesome')\n-            assert rv.status_code == 200\n-            assert rv.data == 'Awesome'\n-            assert rv.mimetype == 'text/html'\n-\n-            rv = flask.make_response('W00t', 404)\n-            assert rv.status_code == 404\n-            assert rv.data == 'W00t'\n-            assert rv.mimetype == 'text/html'\n-\n-    def test_url_generation(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/hello/<name>', methods=['POST'])\n-        def hello():\n-            pass\n-        with app.test_request_context():\n-            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n-            assert flask.url_for('hello', name='test x', _external=True) \\\n-                == 'http://localhost/hello/test%20x'\n-\n-    def test_custom_converters(self):\n-        from werkzeug.routing import BaseConverter\n-        class ListConverter(BaseConverter):\n-            def to_python(self, value):\n-                return value.split(',')\n-            def to_url(self, value):\n-                base_to_url = super(ListConverter, self).to_url\n-                return ','.join(base_to_url(x) for x in value)\n-        app = flask.Flask(__name__)\n-        app.url_map.converters['list'] = ListConverter\n-        @app.route('/<list:args>')\n-        def index(args):\n-            return '|'.join(args)\n-        c = app.test_client()\n-        assert c.get('/1,2,3').data == '1|2|3'\n-\n-    def test_static_files(self):\n-        app = flask.Flask(__name__)\n-        rv = app.test_client().get('/static/index.html')\n-        assert rv.status_code == 200\n-        assert rv.data.strip() == '<h1>Hello World!</h1>'\n-        with app.test_request_context():\n-            assert flask.url_for('static', filename='index.html') \\\n-                == '/static/index.html'\n-\n-    def test_none_response(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def test():\n-            return None\n-        try:\n-            app.test_client().get('/')\n-        except ValueError, e:\n-            assert str(e) == 'View function did not return a response'\n-            pass\n-        else:\n-            assert \"Expected ValueError\"\n-\n-    def test_request_locals(self):\n-        self.assertEqual(repr(flask.g), '<LocalProxy unbound>')\n-        self.assertFalse(flask.g)\n-\n-    def test_proper_test_request_context(self):\n-        app = flask.Flask(__name__)\n-        app.config.update(\n-            SERVER_NAME='localhost.localdomain:5000'\n-        )\n-\n-        @app.route('/')\n-        def index():\n-            return None\n-\n-        @app.route('/', subdomain='foo')\n-        def sub():\n-            return None\n-\n-        with app.test_request_context('/'):\n-            assert flask.url_for('index', _external=True) == 'http://localhost.localdomain:5000/'\n-\n-        with app.test_request_context('/'):\n-            assert flask.url_for('sub', _external=True) == 'http://foo.localhost.localdomain:5000/'\n-\n-        try:\n-            with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n-                pass\n-        except Exception, e:\n-            assert isinstance(e, ValueError)\n-            assert str(e) == \"the server name provided \" + \\\n-                    \"('localhost.localdomain:5000') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost')\", str(e)\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost')\n-            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n-                pass\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost:80')\n-            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n-                pass\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-    def test_test_app_proper_environ(self):\n-        app = flask.Flask(__name__)\n-        app.config.update(\n-            SERVER_NAME='localhost.localdomain:5000'\n-        )\n-        @app.route('/')\n-        def index():\n-            return 'Foo'\n-\n-        @app.route('/', subdomain='foo')\n-        def subdomain():\n-            return 'Foo SubDomain'\n-\n-        try:\n-            rv = app.test_client().get('/')\n-            assert rv.data == 'Foo'\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n-            assert rv.data == 'Foo'\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n-            assert rv.data == 'Foo'\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost.localdomain')\n-            rv = app.test_client().get('/', 'https://localhost.localdomain')\n-            assert rv.data == 'Foo'\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost.localdomain:443')\n-            rv = app.test_client().get('/', 'https://localhost.localdomain')\n-            assert rv.data == 'Foo'\n-        except ValueError, e:\n-            assert str(e) == \"the server name provided \" + \\\n-                    \"('localhost.localdomain:443') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost.localdomain')\", str(e)\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost.localdomain')\n-            app.test_client().get('/', 'http://foo.localhost')\n-        except ValueError, e:\n-            assert str(e) == \"the server name provided \" + \\\n-                    \"('localhost.localdomain') does not match the \" + \\\n-                    \"server name from the WSGI environment ('foo.localhost')\", str(e)\n-\n-        try:\n-            rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n-            assert rv.data == 'Foo SubDomain'\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-    def test_exception_propagation(self):\n-        def apprunner(configkey):\n-            app = flask.Flask(__name__)\n-            @app.route('/')\n-            def index():\n-                1/0\n-            c = app.test_client()\n-            if config_key is not None:\n-                app.config[config_key] = True\n-                try:\n-                    resp = c.get('/')\n-                except Exception:\n-                    pass\n-                else:\n-                    self.fail('expected exception')\n-            else:\n-                assert c.get('/').status_code == 500\n-\n-        # we have to run this test in an isolated thread because if the\n-        # debug flag is set to true and an exception happens the context is\n-        # not torn down.  This causes other tests that run after this fail\n-        # when they expect no exception on the stack.\n-        for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n-            t = Thread(target=apprunner, args=(config_key,))\n-            t.start()\n-            t.join()\n-\n-    def test_max_content_length(self):\n-        app = flask.Flask(__name__)\n-        app.config['MAX_CONTENT_LENGTH'] = 64\n-        @app.before_request\n-        def always_first():\n-            flask.request.form['myfile']\n-            assert False\n-        @app.route('/accept', methods=['POST'])\n-        def accept_file():\n-            flask.request.form['myfile']\n-            assert False\n-        @app.errorhandler(413)\n-        def catcher(error):\n-            return '42'\n-\n-        c = app.test_client()\n-        rv = c.post('/accept', data={'myfile': 'foo' * 100})\n-        assert rv.data == '42'\n-\n-    def test_url_processors(self):\n-        app = flask.Flask(__name__)\n-\n-        @app.url_defaults\n-        def add_language_code(endpoint, values):\n-            if flask.g.lang_code is not None and \\\n-               app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):\n-                values.setdefault('lang_code', flask.g.lang_code)\n-\n-        @app.url_value_preprocessor\n-        def pull_lang_code(endpoint, values):\n-            flask.g.lang_code = values.pop('lang_code', None)\n-\n-        @app.route('/<lang_code>/')\n-        def index():\n-            return flask.url_for('about')\n-\n-        @app.route('/<lang_code>/about')\n-        def about():\n-            return flask.url_for('something_else')\n-\n-        @app.route('/foo')\n-        def something_else():\n-            return flask.url_for('about', lang_code='en')\n-\n-        c = app.test_client()\n-\n-        self.assertEqual(c.get('/de/').data, '/de/about')\n-        self.assertEqual(c.get('/de/about').data, '/foo')\n-        self.assertEqual(c.get('/foo').data, '/en/about')\n-\n-    def test_debug_mode_complains_after_first_request(self):\n-        app = flask.Flask(__name__)\n-        app.debug = True\n-        @app.route('/')\n-        def index():\n-            return 'Awesome'\n-        self.assert_(not app.got_first_request)\n-        self.assertEqual(app.test_client().get('/').data, 'Awesome')\n-        try:\n-            @app.route('/foo')\n-            def broken():\n-                return 'Meh'\n-        except AssertionError, e:\n-            self.assert_('A setup function was called' in str(e))\n-        else:\n-            self.fail('Expected exception')\n-\n-        app.debug = False\n-        @app.route('/foo')\n-        def working():\n-            return 'Meh'\n-        self.assertEqual(app.test_client().get('/foo').data, 'Meh')\n-        self.assert_(app.got_first_request)\n-\n-    def test_before_first_request_functions(self):\n-        got = []\n-        app = flask.Flask(__name__)\n-        @app.before_first_request\n-        def foo():\n-            got.append(42)\n-        c = app.test_client()\n-        c.get('/')\n-        self.assertEqual(got, [42])\n-        c.get('/')\n-        self.assertEqual(got, [42])\n-        self.assert_(app.got_first_request)\n-\n-    def test_routing_redirect_debugging(self):\n-        app = flask.Flask(__name__)\n-        app.debug = True\n-        @app.route('/foo/', methods=['GET', 'POST'])\n-        def foo():\n-            return 'success'\n-        with app.test_client() as c:\n-            try:\n-                c.post('/foo', data={})\n-            except AssertionError, e:\n-                self.assert_('http://localhost/foo/' in str(e))\n-                self.assert_('Make sure to directly send your POST-request '\n-                             'to this URL' in str(e))\n-            else:\n-                self.fail('Expected exception')\n-\n-            rv = c.get('/foo', data={}, follow_redirects=True)\n-            self.assertEqual(rv.data, 'success')\n-\n-        app.debug = False\n-        with app.test_client() as c:\n-            rv = c.post('/foo', data={}, follow_redirects=True)\n-            self.assertEqual(rv.data, 'success')\n-\n-\n-class TestToolsTestCase(FlaskTestCase):\n-\n-    def test_environ_defaults_from_config(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.config['SERVER_NAME'] = 'example.com:1234'\n-        app.config['APPLICATION_ROOT'] = '/foo'\n-        @app.route('/')\n-        def index():\n-            return flask.request.url\n-\n-        ctx = app.test_request_context()\n-        self.assertEqual(ctx.request.url, 'http://example.com:1234/foo/')\n-        with app.test_client() as c:\n-            rv = c.get('/')\n-            self.assertEqual(rv.data, 'http://example.com:1234/foo/')\n-\n-    def test_environ_defaults(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/')\n-        def index():\n-            return flask.request.url\n-\n-        ctx = app.test_request_context()\n-        self.assertEqual(ctx.request.url, 'http://localhost/')\n-        with app.test_client() as c:\n-            rv = c.get('/')\n-            self.assertEqual(rv.data, 'http://localhost/')\n-\n-    def test_session_transactions(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.secret_key = 'testing'\n-\n-        @app.route('/')\n-        def index():\n-            return unicode(flask.session['foo'])\n-\n-        with app.test_client() as c:\n-            with c.session_transaction() as sess:\n-                self.assertEqual(len(sess), 0)\n-                sess['foo'] = [42]\n-                self.assertEqual(len(sess), 1)\n-            rv = c.get('/')\n-            self.assertEqual(rv.data, '[42]')\n-\n-    def test_session_transactions_no_null_sessions(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-\n-        with app.test_client() as c:\n-            try:\n-                with c.session_transaction() as sess:\n-                    pass\n-            except RuntimeError, e:\n-                self.assert_('Session backend did not open a session' in str(e))\n-            else:\n-                self.fail('Expected runtime error')\n-\n-    def test_session_transactions_keep_context(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.secret_key = 'testing'\n-\n-        with app.test_client() as c:\n-            rv = c.get('/')\n-            req = flask.request._get_current_object()\n-            with c.session_transaction():\n-                self.assert_(req is flask.request._get_current_object())\n-\n-    def test_test_client_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            flask.g.value = 42\n-            return 'Hello World!'\n-\n-        @app.route('/other')\n-        def other():\n-            1/0\n-\n-        with app.test_client() as c:\n-            resp = c.get('/')\n-            assert flask.g.value == 42\n-            assert resp.data == 'Hello World!'\n-            assert resp.status_code == 200\n-\n-            resp = c.get('/other')\n-            assert not hasattr(flask.g, 'value')\n-            assert 'Internal Server Error' in resp.data\n-            assert resp.status_code == 500\n-            flask.g.value = 23\n-\n-        try:\n-            flask.g.value\n-        except (AttributeError, RuntimeError):\n-            pass\n-        else:\n-            raise AssertionError('some kind of exception expected')\n-\n-\n-class InstanceTestCase(FlaskTestCase):\n-\n-    def test_explicit_instance_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        try:\n-            flask.Flask(__name__, instance_path='instance')\n-        except ValueError, e:\n-            self.assert_('must be absolute' in str(e))\n-        else:\n-            self.fail('Expected value error')\n-\n-        app = flask.Flask(__name__, instance_path=here)\n-        self.assertEqual(app.instance_path, here)\n-\n-    def test_uninstalled_module_paths(self):\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        app = flask.Flask(__name__)\n-        self.assertEqual(app.instance_path, os.path.join(here, 'instance'))\n-\n-    def test_uninstalled_package_paths(self):\n-        from blueprintapp import app\n-        here = os.path.abspath(os.path.dirname(__file__))\n-        self.assertEqual(app.instance_path, os.path.join(here, 'instance'))\n-\n-    def test_installed_module_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath('foo')\n-        mod = types.ModuleType('myapp')\n-        mod.__file__ = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp.py')\n-        sys.modules['myapp'] = mod\n-        try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assertEqual(mod.app.instance_path,\n-                             os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n-        finally:\n-            sys.modules['myapp'] = None\n-\n-    def test_installed_package_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath('foo')\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n-        try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assertEqual(mod.app.instance_path,\n-                             os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n-        finally:\n-            sys.modules['myapp'] = None\n-\n-    def test_prefix_installed_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath(sys.prefix)\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n-        try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assertEqual(mod.app.instance_path,\n-                             os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n-        finally:\n-            sys.modules['myapp'] = None\n-\n-    def test_egg_installed_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath(sys.prefix)\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'MyApp.egg', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n-        try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assertEqual(mod.app.instance_path,\n-                             os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n-        finally:\n-            sys.modules['myapp'] = None\n-\n-\n-class JSONTestCase(FlaskTestCase):\n-\n-    def test_json_bad_requests(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/json', methods=['POST'])\n-        def return_json():\n-            return unicode(flask.request.json)\n-        c = app.test_client()\n-        rv = c.post('/json', data='malformed', content_type='application/json')\n-        self.assertEqual(rv.status_code, 400)\n-\n-    def test_json_body_encoding(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/')\n-        def index():\n-            return flask.request.json\n-\n-        c = app.test_client()\n-        resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n-                     content_type='application/json; charset=iso-8859-15')\n-        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n-\n-    def test_jsonify(self):\n-        d = dict(a=23, b=42, c=[1, 2, 3])\n-        app = flask.Flask(__name__)\n-        @app.route('/kw')\n-        def return_kwargs():\n-            return flask.jsonify(**d)\n-        @app.route('/dict')\n-        def return_dict():\n-            return flask.jsonify(d)\n-        c = app.test_client()\n-        for url in '/kw', '/dict':\n-            rv = c.get(url)\n-            assert rv.mimetype == 'application/json'\n-            assert flask.json.loads(rv.data) == d\n-\n-    def test_json_attr(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/add', methods=['POST'])\n-        def add():\n-            return unicode(flask.request.json['a'] + flask.request.json['b'])\n-        c = app.test_client()\n-        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n-                            content_type='application/json')\n-        assert rv.data == '3'\n-\n-    def test_template_escaping(self):\n-        app = flask.Flask(__name__)\n-        render = flask.render_template_string\n-        with app.test_request_context():\n-            rv = render('{{ \"</script>\"|tojson|safe }}')\n-            assert rv == '\"<\\\\/script>\"'\n-            rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n-            assert rv == '\"<\\\\u0000\\\\/script>\"'\n-\n-    def test_modified_url_encoding(self):\n-        class ModifiedRequest(flask.Request):\n-            url_charset = 'euc-kr'\n-        app = flask.Flask(__name__)\n-        app.request_class = ModifiedRequest\n-        app.url_map.charset = 'euc-kr'\n-\n-        @app.route('/')\n-        def index():\n-            return flask.request.args['foo']\n-\n-        rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n-        assert rv.status_code == 200\n-        assert rv.data == u'정상처리'.encode('utf-8')\n-\n-    if not has_encoding('euc-kr'):\n-        test_modified_url_encoding = None\n-\n-\n-class TemplatingTestCase(FlaskTestCase):\n-\n-    def test_context_processing(self):\n-        app = flask.Flask(__name__)\n-        @app.context_processor\n-        def context_processor():\n-            return {'injected_value': 42}\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('context_template.html', value=23)\n-        rv = app.test_client().get('/')\n-        assert rv.data == '<p>23|42'\n-\n-    def test_original_win(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return flask.render_template_string('{{ config }}', config=42)\n-        rv = app.test_client().get('/')\n-        assert rv.data == '42'\n-\n-    def test_standard_context(self):\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'development key'\n-        @app.route('/')\n-        def index():\n-            flask.g.foo = 23\n-            flask.session['test'] = 'aha'\n-            return flask.render_template_string('''\n-                {{ request.args.foo }}\n-                {{ g.foo }}\n-                {{ config.DEBUG }}\n-                {{ session.test }}\n-            ''')\n-        rv = app.test_client().get('/?foo=42')\n-        assert rv.data.split() == ['42', '23', 'False', 'aha']\n-\n-    def test_escaping(self):\n-        text = '<p>Hello World!'\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('escaping_template.html', text=text,\n-                                         html=flask.Markup(text))\n-        lines = app.test_client().get('/').data.splitlines()\n-        assert lines == [\n-            '&lt;p&gt;Hello World!',\n-            '<p>Hello World!',\n-            '<p>Hello World!',\n-            '<p>Hello World!',\n-            '&lt;p&gt;Hello World!',\n-            '<p>Hello World!'\n-        ]\n-\n-    def test_no_escaping(self):\n-        app = flask.Flask(__name__)\n-        with app.test_request_context():\n-            assert flask.render_template_string('{{ foo }}',\n-                foo='<test>') == '<test>'\n-            assert flask.render_template('mail.txt', foo='<test>') \\\n-                == '<test> Mail'\n-\n-    def test_macros(self):\n-        app = flask.Flask(__name__)\n-        with app.test_request_context():\n-            macro = flask.get_template_attribute('_macro.html', 'hello')\n-            assert macro('World') == 'Hello World!'\n-\n-    def test_template_filter(self):\n-        app = flask.Flask(__name__)\n-        @app.template_filter()\n-        def my_reverse(s):\n-            return s[::-1]\n-        assert 'my_reverse' in  app.jinja_env.filters.keys()\n-        assert app.jinja_env.filters['my_reverse'] == my_reverse\n-        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n-\n-    def test_template_filter_with_name(self):\n-        app = flask.Flask(__name__)\n-        @app.template_filter('strrev')\n-        def my_reverse(s):\n-            return s[::-1]\n-        assert 'strrev' in  app.jinja_env.filters.keys()\n-        assert app.jinja_env.filters['strrev'] == my_reverse\n-        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n-\n-    def test_template_filter_with_template(self):\n-        app = flask.Flask(__name__)\n-        @app.template_filter()\n-        def super_reverse(s):\n-            return s[::-1]\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('template_filter.html', value='abcd')\n-        rv = app.test_client().get('/')\n-        assert rv.data == 'dcba'\n-\n-    def test_template_filter_with_name_and_template(self):\n-        app = flask.Flask(__name__)\n-        @app.template_filter('super_reverse')\n-        def my_reverse(s):\n-            return s[::-1]\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('template_filter.html', value='abcd')\n-        rv = app.test_client().get('/')\n-        assert rv.data == 'dcba'\n-\n-    def test_custom_template_loader(self):\n-        class MyFlask(flask.Flask):\n-            def create_global_jinja_loader(self):\n-                from jinja2 import DictLoader\n-                return DictLoader({'index.html': 'Hello Custom World!'})\n-        app = MyFlask(__name__)\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('index.html')\n-        c = app.test_client()\n-        rv = c.get('/')\n-        assert rv.data == 'Hello Custom World!'\n-\n-\n-class ModuleTestCase(FlaskTestCase):\n-\n-    @emits_module_deprecation_warning\n-    def test_basic_module(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @admin.route('/')\n-        def admin_index():\n-            return 'admin index'\n-        @admin.route('/login')\n-        def admin_login():\n-            return 'admin login'\n-        @admin.route('/logout')\n-        def admin_logout():\n-            return 'admin logout'\n-        @app.route('/')\n-        def index():\n-            return 'the index'\n-        app.register_module(admin)\n-        c = app.test_client()\n-        assert c.get('/').data == 'the index'\n-        assert c.get('/admin/').data == 'admin index'\n-        assert c.get('/admin/login').data == 'admin login'\n-        assert c.get('/admin/logout').data == 'admin logout'\n-\n-    @emits_module_deprecation_warning\n-    def test_default_endpoint_name(self):\n-        app = flask.Flask(__name__)\n-        mod = flask.Module(__name__, 'frontend')\n-        def index():\n-            return 'Awesome'\n-        mod.add_url_rule('/', view_func=index)\n-        app.register_module(mod)\n-        rv = app.test_client().get('/')\n-        assert rv.data == 'Awesome'\n-        with app.test_request_context():\n-            assert flask.url_for('frontend.index') == '/'\n-\n-    @emits_module_deprecation_warning\n-    def test_request_processing(self):\n-        catched = []\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @admin.before_request\n-        def before_admin_request():\n-            catched.append('before-admin')\n-        @admin.after_request\n-        def after_admin_request(response):\n-            catched.append('after-admin')\n-            return response\n-        @admin.route('/')\n-        def admin_index():\n-            return 'the admin'\n-        @app.before_request\n-        def before_request():\n-            catched.append('before-app')\n-        @app.after_request\n-        def after_request(response):\n-            catched.append('after-app')\n-            return response\n-        @app.route('/')\n-        def index():\n-            return 'the index'\n-        app.register_module(admin)\n-        c = app.test_client()\n-\n-        assert c.get('/').data == 'the index'\n-        assert catched == ['before-app', 'after-app']\n-        del catched[:]\n-\n-        assert c.get('/admin/').data == 'the admin'\n-        assert catched == ['before-app', 'before-admin',\n-                           'after-admin', 'after-app']\n-\n-    @emits_module_deprecation_warning\n-    def test_context_processors(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n-        @app.context_processor\n-        def inject_all_regualr():\n-            return {'a': 1}\n-        @admin.context_processor\n-        def inject_admin():\n-            return {'b': 2}\n-        @admin.app_context_processor\n-        def inject_all_module():\n-            return {'c': 3}\n-        @app.route('/')\n-        def index():\n-            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n-        @admin.route('/')\n-        def admin_index():\n-            return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n-        app.register_module(admin)\n-        c = app.test_client()\n-        assert c.get('/').data == '13'\n-        assert c.get('/admin/').data == '123'\n-\n-    @emits_module_deprecation_warning\n-    def test_late_binding(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin')\n-        @admin.route('/')\n-        def index():\n-            return '42'\n-        app.register_module(admin, url_prefix='/admin')\n-        assert app.test_client().get('/admin/').data == '42'\n-\n-    @emits_module_deprecation_warning\n-    def test_error_handling(self):\n-        app = flask.Flask(__name__)\n-        admin = flask.Module(__name__, 'admin')\n-        @admin.app_errorhandler(404)\n-        def not_found(e):\n-            return 'not found', 404\n-        @admin.app_errorhandler(500)\n-        def internal_server_error(e):\n-            return 'internal server error', 500\n-        @admin.route('/')\n-        def index():\n-            flask.abort(404)\n-        @admin.route('/error')\n-        def error():\n-            1 // 0\n-        app.register_module(admin)\n-        c = app.test_client()\n-        rv = c.get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'not found'\n-        rv = c.get('/error')\n-        assert rv.status_code == 500\n-        assert 'internal server error' == rv.data\n-\n-    def test_templates_and_static(self):\n-        app = moduleapp\n-        app.testing = True\n-        c = app.test_client()\n-\n-        rv = c.get('/')\n-        assert rv.data == 'Hello from the Frontend'\n-        rv = c.get('/admin/')\n-        assert rv.data == 'Hello from the Admin'\n-        rv = c.get('/admin/index2')\n-        assert rv.data == 'Hello from the Admin'\n-        rv = c.get('/admin/static/test.txt')\n-        assert rv.data.strip() == 'Admin File'\n-        rv = c.get('/admin/static/css/test.css')\n-        assert rv.data.strip() == '/* nested file */'\n-\n-        with app.test_request_context():\n-            assert flask.url_for('admin.static', filename='test.txt') \\\n-                == '/admin/static/test.txt'\n-\n-        with app.test_request_context():\n-            try:\n-                flask.render_template('missing.html')\n-            except TemplateNotFound, e:\n-                assert e.name == 'missing.html'\n-            else:\n-                assert 0, 'expected exception'\n-\n-        with flask.Flask(__name__).test_request_context():\n-            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n-\n-    def test_safe_access(self):\n-        app = moduleapp\n-\n-        with app.test_request_context():\n-            f = app.view_functions['admin.static']\n-\n-            try:\n-                f('/etc/passwd')\n-            except NotFound:\n-                pass\n-            else:\n-                assert 0, 'expected exception'\n-            try:\n-                f('../__init__.py')\n-            except NotFound:\n-                pass\n-            else:\n-                assert 0, 'expected exception'\n-\n-            # testcase for a security issue that may exist on windows systems\n-            import os\n-            import ntpath\n-            old_path = os.path\n-            os.path = ntpath\n-            try:\n-                try:\n-                    f('..\\\\__init__.py')\n-                except NotFound:\n-                    pass\n-                else:\n-                    assert 0, 'expected exception'\n-            finally:\n-                os.path = old_path\n-\n-    @emits_module_deprecation_warning\n-    def test_endpoint_decorator(self):\n-        from werkzeug.routing import Submount, Rule\n-        from flask import Module\n-\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        app.url_map.add(Submount('/foo', [\n-            Rule('/bar', endpoint='bar'),\n-            Rule('/', endpoint='index')\n-        ]))\n-        module = Module(__name__, __name__)\n-\n-        @module.endpoint('bar')\n-        def bar():\n-            return 'bar'\n-\n-        @module.endpoint('index')\n-        def index():\n-            return 'index'\n-\n-        app.register_module(module)\n-\n-        c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n-\n-\n-class BlueprintTestCase(FlaskTestCase):\n-\n-    def test_blueprint_specific_error_handling(self):\n-        frontend = flask.Blueprint('frontend', __name__)\n-        backend = flask.Blueprint('backend', __name__)\n-        sideend = flask.Blueprint('sideend', __name__)\n-\n-        @frontend.errorhandler(403)\n-        def frontend_forbidden(e):\n-            return 'frontend says no', 403\n-\n-        @frontend.route('/frontend-no')\n-        def frontend_no():\n-            flask.abort(403)\n-\n-        @backend.errorhandler(403)\n-        def backend_forbidden(e):\n-            return 'backend says no', 403\n-\n-        @backend.route('/backend-no')\n-        def backend_no():\n-            flask.abort(403)\n-\n-        @sideend.route('/what-is-a-sideend')\n-        def sideend_no():\n-            flask.abort(403)\n-\n-        app = flask.Flask(__name__)\n-        app.register_blueprint(frontend)\n-        app.register_blueprint(backend)\n-        app.register_blueprint(sideend)\n-\n-        @app.errorhandler(403)\n-        def app_forbidden(e):\n-            return 'application itself says no', 403\n-\n-        c = app.test_client()\n-\n-        assert c.get('/frontend-no').data == 'frontend says no'\n-        assert c.get('/backend-no').data == 'backend says no'\n-        assert c.get('/what-is-a-sideend').data == 'application itself says no'\n-\n-    def test_blueprint_url_definitions(self):\n-        bp = flask.Blueprint('test', __name__)\n-\n-        @bp.route('/foo', defaults={'baz': 42})\n-        def foo(bar, baz):\n-            return '%s/%d' % (bar, baz)\n-\n-        @bp.route('/bar')\n-        def bar(bar):\n-            return unicode(bar)\n-\n-        app = flask.Flask(__name__)\n-        app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n-        app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n-\n-        c = app.test_client()\n-        self.assertEqual(c.get('/1/foo').data, u'23/42')\n-        self.assertEqual(c.get('/2/foo').data, u'19/42')\n-        self.assertEqual(c.get('/1/bar').data, u'23')\n-        self.assertEqual(c.get('/2/bar').data, u'19')\n-\n-    def test_blueprint_url_processors(self):\n-        bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n-\n-        @bp.url_defaults\n-        def add_language_code(endpoint, values):\n-            values.setdefault('lang_code', flask.g.lang_code)\n-\n-        @bp.url_value_preprocessor\n-        def pull_lang_code(endpoint, values):\n-            flask.g.lang_code = values.pop('lang_code')\n-\n-        @bp.route('/')\n-        def index():\n-            return flask.url_for('.about')\n-\n-        @bp.route('/about')\n-        def about():\n-            return flask.url_for('.index')\n-\n-        app = flask.Flask(__name__)\n-        app.register_blueprint(bp)\n-\n-        c = app.test_client()\n-\n-        self.assertEqual(c.get('/de/').data, '/de/about')\n-        self.assertEqual(c.get('/de/about').data, '/de/')\n-\n-    def test_templates_and_static(self):\n-        from blueprintapp import app\n-        c = app.test_client()\n-\n-        rv = c.get('/')\n-        assert rv.data == 'Hello from the Frontend'\n-        rv = c.get('/admin/')\n-        assert rv.data == 'Hello from the Admin'\n-        rv = c.get('/admin/index2')\n-        assert rv.data == 'Hello from the Admin'\n-        rv = c.get('/admin/static/test.txt')\n-        assert rv.data.strip() == 'Admin File'\n-        rv = c.get('/admin/static/css/test.css')\n-        assert rv.data.strip() == '/* nested file */'\n-\n-        with app.test_request_context():\n-            assert flask.url_for('admin.static', filename='test.txt') \\\n-                == '/admin/static/test.txt'\n-\n-        with app.test_request_context():\n-            try:\n-                flask.render_template('missing.html')\n-            except TemplateNotFound, e:\n-                assert e.name == 'missing.html'\n-            else:\n-                assert 0, 'expected exception'\n-\n-        with flask.Flask(__name__).test_request_context():\n-            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n-\n-    def test_templates_list(self):\n-        from blueprintapp import app\n-        templates = sorted(app.jinja_env.list_templates())\n-        self.assertEqual(templates, ['admin/index.html',\n-                                     'frontend/index.html'])\n-\n-    def test_dotted_names(self):\n-        frontend = flask.Blueprint('myapp.frontend', __name__)\n-        backend = flask.Blueprint('myapp.backend', __name__)\n-\n-        @frontend.route('/fe')\n-        def frontend_index():\n-            return flask.url_for('myapp.backend.backend_index')\n-\n-        @frontend.route('/fe2')\n-        def frontend_page2():\n-            return flask.url_for('.frontend_index')\n-\n-        @backend.route('/be')\n-        def backend_index():\n-            return flask.url_for('myapp.frontend.frontend_index')\n-\n-        app = flask.Flask(__name__)\n-        app.register_blueprint(frontend)\n-        app.register_blueprint(backend)\n-\n-        c = app.test_client()\n-        self.assertEqual(c.get('/fe').data.strip(), '/be')\n-        self.assertEqual(c.get('/fe2').data.strip(), '/fe')\n-        self.assertEqual(c.get('/be').data.strip(), '/fe')\n-\n-    def test_empty_url_defaults(self):\n-        bp = flask.Blueprint('bp', __name__)\n-\n-        @bp.route('/', defaults={'page': 1})\n-        @bp.route('/page/<int:page>')\n-        def something(page):\n-            return str(page)\n-\n-        app = flask.Flask(__name__)\n-        app.register_blueprint(bp)\n-\n-        c = app.test_client()\n-        self.assertEqual(c.get('/').data, '1')\n-        self.assertEqual(c.get('/page/2').data, '2')\n-\n-\n-class SendfileTestCase(FlaskTestCase):\n-\n-    def test_send_file_regular(self):\n-        app = flask.Flask(__name__)\n-        with app.test_request_context():\n-            rv = flask.send_file('static/index.html')\n-            assert rv.direct_passthrough\n-            assert rv.mimetype == 'text/html'\n-            with app.open_resource('static/index.html') as f:\n-                assert rv.data == f.read()\n-\n-    def test_send_file_xsendfile(self):\n-        app = flask.Flask(__name__)\n-        app.use_x_sendfile = True\n-        with app.test_request_context():\n-            rv = flask.send_file('static/index.html')\n-            assert rv.direct_passthrough\n-            assert 'x-sendfile' in rv.headers\n-            assert rv.headers['x-sendfile'] == \\\n-                os.path.join(app.root_path, 'static/index.html')\n-            assert rv.mimetype == 'text/html'\n-\n-    def test_send_file_object(self):\n-        app = flask.Flask(__name__)\n-        with catch_warnings() as captured:\n-            with app.test_request_context():\n-                f = open(os.path.join(app.root_path, 'static/index.html'))\n-                rv = flask.send_file(f)\n-                with app.open_resource('static/index.html') as f:\n-                    assert rv.data == f.read()\n-                assert rv.mimetype == 'text/html'\n-            # mimetypes + etag\n-            assert len(captured) == 2\n-\n-        app.use_x_sendfile = True\n-        with catch_warnings() as captured:\n-            with app.test_request_context():\n-                f = open(os.path.join(app.root_path, 'static/index.html'))\n-                rv = flask.send_file(f)\n-                assert rv.mimetype == 'text/html'\n-                assert 'x-sendfile' in rv.headers\n-                assert rv.headers['x-sendfile'] == \\\n-                    os.path.join(app.root_path, 'static/index.html')\n-            # mimetypes + etag\n-            assert len(captured) == 2\n-\n-        app.use_x_sendfile = False\n-        with app.test_request_context():\n-            with catch_warnings() as captured:\n-                f = StringIO('Test')\n-                rv = flask.send_file(f)\n-                assert rv.data == 'Test'\n-                assert rv.mimetype == 'application/octet-stream'\n-            # etags\n-            assert len(captured) == 1\n-            with catch_warnings() as captured:\n-                f = StringIO('Test')\n-                rv = flask.send_file(f, mimetype='text/plain')\n-                assert rv.data == 'Test'\n-                assert rv.mimetype == 'text/plain'\n-            # etags\n-            assert len(captured) == 1\n-\n-        app.use_x_sendfile = True\n-        with catch_warnings() as captured:\n-            with app.test_request_context():\n-                f = StringIO('Test')\n-                rv = flask.send_file(f)\n-                assert 'x-sendfile' not in rv.headers\n-            # etags\n-            assert len(captured) == 1\n-\n-    def test_attachment(self):\n-        app = flask.Flask(__name__)\n-        with catch_warnings() as captured:\n-            with app.test_request_context():\n-                f = open(os.path.join(app.root_path, 'static/index.html'))\n-                rv = flask.send_file(f, as_attachment=True)\n-                value, options = parse_options_header(rv.headers['Content-Disposition'])\n-                assert value == 'attachment'\n-            # mimetypes + etag\n-            assert len(captured) == 2\n-\n-        with app.test_request_context():\n-            assert options['filename'] == 'index.html'\n-            rv = flask.send_file('static/index.html', as_attachment=True)\n-            value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            assert value == 'attachment'\n-            assert options['filename'] == 'index.html'\n-\n-        with app.test_request_context():\n-            rv = flask.send_file(StringIO('Test'), as_attachment=True,\n-                                 attachment_filename='index.txt',\n-                                 add_etags=False)\n-            assert rv.mimetype == 'text/plain'\n-            value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            assert value == 'attachment'\n-            assert options['filename'] == 'index.txt'\n-\n-\n-class LoggingTestCase(FlaskTestCase):\n-\n-    def test_logger_cache(self):\n-        app = flask.Flask(__name__)\n-        logger1 = app.logger\n-        assert app.logger is logger1\n-        assert logger1.name == __name__\n-        app.logger_name = __name__ + '/test_logger_cache'\n-        assert app.logger is not logger1\n-\n-    def test_debug_log(self):\n-        app = flask.Flask(__name__)\n-        app.debug = True\n-\n-        @app.route('/')\n-        def index():\n-            app.logger.warning('the standard library is dead')\n-            app.logger.debug('this is a debug statement')\n-            return ''\n-\n-        @app.route('/exc')\n-        def exc():\n-            1/0\n-\n-        with app.test_client() as c:\n-            with catch_stderr() as err:\n-                c.get('/')\n-                out = err.getvalue()\n-                assert 'WARNING in flask_tests [' in out\n-                assert 'flask_tests.py' in out\n-                assert 'the standard library is dead' in out\n-                assert 'this is a debug statement' in out\n-\n-            with catch_stderr() as err:\n-                try:\n-                    c.get('/exc')\n-                except ZeroDivisionError:\n-                    pass\n-                else:\n-                    assert False, 'debug log ate the exception'\n-\n-    def test_exception_logging(self):\n-        out = StringIO()\n-        app = flask.Flask(__name__)\n-        app.logger_name = 'flask_tests/test_exception_logging'\n-        app.logger.addHandler(StreamHandler(out))\n-\n-        @app.route('/')\n-        def index():\n-            1/0\n-\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n-        assert 'Internal Server Error' in rv.data\n-\n-        err = out.getvalue()\n-        assert 'Exception on / [GET]' in err\n-        assert 'Traceback (most recent call last):' in err\n-        assert '1/0' in err\n-        assert 'ZeroDivisionError:' in err\n-\n-    def test_processor_exceptions(self):\n-        app = flask.Flask(__name__)\n-        @app.before_request\n-        def before_request():\n-            if trigger == 'before':\n-                1/0\n-        @app.after_request\n-        def after_request(response):\n-            if trigger == 'after':\n-                1/0\n-            return response\n-        @app.route('/')\n-        def index():\n-            return 'Foo'\n-        @app.errorhandler(500)\n-        def internal_server_error(e):\n-            return 'Hello Server Error', 500\n-        for trigger in 'before', 'after':\n-            rv = app.test_client().get('/')\n-            assert rv.status_code == 500\n-            assert rv.data == 'Hello Server Error'\n-\n-\n-class ConfigTestCase(FlaskTestCase):\n-\n-    def common_object_test(self, app):\n-        assert app.secret_key == 'devkey'\n-        assert app.config['TEST_KEY'] == 'foo'\n-        assert 'ConfigTestCase' not in app.config\n-\n-    def test_config_from_file(self):\n-        app = flask.Flask(__name__)\n-        app.config.from_pyfile('flask_tests.py')\n-        self.common_object_test(app)\n-\n-    def test_config_from_object(self):\n-        app = flask.Flask(__name__)\n-        app.config.from_object(__name__)\n-        self.common_object_test(app)\n-\n-    def test_config_from_class(self):\n-        class Base(object):\n-            TEST_KEY = 'foo'\n-        class Test(Base):\n-            SECRET_KEY = 'devkey'\n-        app = flask.Flask(__name__)\n-        app.config.from_object(Test)\n-        self.common_object_test(app)\n-\n-    def test_config_from_envvar(self):\n-        import os\n-        env = os.environ\n-        try:\n-            os.environ = {}\n-            app = flask.Flask(__name__)\n-            try:\n-                app.config.from_envvar('FOO_SETTINGS')\n-            except RuntimeError, e:\n-                assert \"'FOO_SETTINGS' is not set\" in str(e)\n-            else:\n-                assert 0, 'expected exception'\n-            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n-\n-            os.environ = {'FOO_SETTINGS': 'flask_tests.py'}\n-            assert app.config.from_envvar('FOO_SETTINGS')\n-            self.common_object_test(app)\n-        finally:\n-            os.environ = env\n-\n-    def test_config_missing(self):\n-        app = flask.Flask(__name__)\n-        try:\n-            app.config.from_pyfile('missing.cfg')\n-        except IOError, e:\n-            msg = str(e)\n-            assert msg.startswith('[Errno 2] Unable to load configuration '\n-                                  'file (No such file or directory):')\n-            assert msg.endswith(\"missing.cfg'\")\n-        else:\n-            assert 0, 'expected config'\n-        assert not app.config.from_pyfile('missing.cfg', silent=True)\n-\n-\n-class SubdomainTestCase(FlaskTestCase):\n-\n-    def test_basic_support(self):\n-        app = flask.Flask(__name__)\n-        app.config['SERVER_NAME'] = 'localhost'\n-        @app.route('/')\n-        def normal_index():\n-            return 'normal index'\n-        @app.route('/', subdomain='test')\n-        def test_index():\n-            return 'test index'\n-\n-        c = app.test_client()\n-        rv = c.get('/', 'http://localhost/')\n-        assert rv.data == 'normal index'\n-\n-        rv = c.get('/', 'http://test.localhost/')\n-        assert rv.data == 'test index'\n-\n-    @emits_module_deprecation_warning\n-    def test_module_static_path_subdomain(self):\n-        app = flask.Flask(__name__)\n-        app.config['SERVER_NAME'] = 'example.com'\n-        from subdomaintestmodule import mod\n-        app.register_module(mod)\n-        c = app.test_client()\n-        rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n-        assert rv.data.strip() == 'Hello Subdomain'\n-\n-    def test_subdomain_matching(self):\n-        app = flask.Flask(__name__)\n-        app.config['SERVER_NAME'] = 'localhost'\n-        @app.route('/', subdomain='<user>')\n-        def index(user):\n-            return 'index for %s' % user\n-\n-        c = app.test_client()\n-        rv = c.get('/', 'http://mitsuhiko.localhost/')\n-        assert rv.data == 'index for mitsuhiko'\n-\n-    @emits_module_deprecation_warning\n-    def test_module_subdomain_support(self):\n-        app = flask.Flask(__name__)\n-        mod = flask.Module(__name__, 'test', subdomain='testing')\n-        app.config['SERVER_NAME'] = 'localhost'\n-\n-        @mod.route('/test')\n-        def test():\n-            return 'Test'\n-\n-        @mod.route('/outside', subdomain='xtesting')\n-        def bar():\n-            return 'Outside'\n-\n-        app.register_module(mod)\n-\n-        c = app.test_client()\n-        rv = c.get('/test', 'http://testing.localhost/')\n-        assert rv.data == 'Test'\n-        rv = c.get('/outside', 'http://xtesting.localhost/')\n-        assert rv.data == 'Outside'\n-\n-\n-class TestSignals(FlaskTestCase):\n-\n-    def test_template_rendered(self):\n-        app = flask.Flask(__name__)\n-\n-        @app.route('/')\n-        def index():\n-            return flask.render_template('simple_template.html', whiskey=42)\n-\n-        recorded = []\n-        def record(sender, template, context):\n-            recorded.append((template, context))\n-\n-        flask.template_rendered.connect(record, app)\n-        try:\n-            app.test_client().get('/')\n-            assert len(recorded) == 1\n-            template, context = recorded[0]\n-            assert template.name == 'simple_template.html'\n-            assert context['whiskey'] == 42\n-        finally:\n-            flask.template_rendered.disconnect(record, app)\n-\n-    def test_request_signals(self):\n-        app = flask.Flask(__name__)\n-        calls = []\n-\n-        def before_request_signal(sender):\n-            calls.append('before-signal')\n-\n-        def after_request_signal(sender, response):\n-            assert response.data == 'stuff'\n-            calls.append('after-signal')\n-\n-        @app.before_request\n-        def before_request_handler():\n-            calls.append('before-handler')\n-\n-        @app.after_request\n-        def after_request_handler(response):\n-            calls.append('after-handler')\n-            response.data = 'stuff'\n-            return response\n-\n-        @app.route('/')\n-        def index():\n-            calls.append('handler')\n-            return 'ignored anyway'\n-\n-        flask.request_started.connect(before_request_signal, app)\n-        flask.request_finished.connect(after_request_signal, app)\n-\n-        try:\n-            rv = app.test_client().get('/')\n-            assert rv.data == 'stuff'\n-\n-            assert calls == ['before-signal', 'before-handler',\n-                             'handler', 'after-handler',\n-                             'after-signal']\n-        finally:\n-            flask.request_started.disconnect(before_request_signal, app)\n-            flask.request_finished.disconnect(after_request_signal, app)\n-\n-    def test_request_exception_signal(self):\n-        app = flask.Flask(__name__)\n-        recorded = []\n-\n-        @app.route('/')\n-        def index():\n-            1/0\n-\n-        def record(sender, exception):\n-            recorded.append(exception)\n-\n-        flask.got_request_exception.connect(record, app)\n-        try:\n-            assert app.test_client().get('/').status_code == 500\n-            assert len(recorded) == 1\n-            assert isinstance(recorded[0], ZeroDivisionError)\n-        finally:\n-            flask.got_request_exception.disconnect(record, app)\n-\n-\n-class ViewTestCase(FlaskTestCase):\n-\n-    def common_test(self, app):\n-        c = app.test_client()\n-\n-        self.assertEqual(c.get('/').data, 'GET')\n-        self.assertEqual(c.post('/').data, 'POST')\n-        self.assertEqual(c.put('/').status_code, 405)\n-        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n-        self.assertEqual(sorted(meths), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n-\n-    def test_basic_view(self):\n-        app = flask.Flask(__name__)\n-\n-        class Index(flask.views.View):\n-            methods = ['GET', 'POST']\n-            def dispatch_request(self):\n-                return flask.request.method\n-\n-        app.add_url_rule('/', view_func=Index.as_view('index'))\n-        self.common_test(app)\n-\n-    def test_method_based_view(self):\n-        app = flask.Flask(__name__)\n-\n-        class Index(flask.views.MethodView):\n-            def get(self):\n-                return 'GET'\n-            def post(self):\n-                return 'POST'\n-\n-        app.add_url_rule('/', view_func=Index.as_view('index'))\n-\n-        self.common_test(app)\n-\n-    def test_view_patching(self):\n-        app = flask.Flask(__name__)\n-\n-        class Index(flask.views.MethodView):\n-            def get(self):\n-                1/0\n-            def post(self):\n-                1/0\n-\n-        class Other(Index):\n-            def get(self):\n-                return 'GET'\n-            def post(self):\n-                return 'POST'\n-\n-        view = Index.as_view('index')\n-        view.view_class = Other\n-        app.add_url_rule('/', view_func=view)\n-        self.common_test(app)\n-\n-    def test_view_inheritance(self):\n-        app = flask.Flask(__name__)\n-\n-        class Index(flask.views.MethodView):\n-            def get(self):\n-                return 'GET'\n-            def post(self):\n-                return 'POST'\n-\n-        class BetterIndex(Index):\n-            def delete(self):\n-                return 'DELETE'\n-\n-        app.add_url_rule('/', view_func=BetterIndex.as_view('index'))\n-        c = app.test_client()\n-\n-        meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n-        self.assertEqual(sorted(meths), ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST'])\n-\n-    def test_view_decorators(self):\n-        app = flask.Flask(__name__)\n-\n-        def add_x_parachute(f):\n-            def new_function(*args, **kwargs):\n-                resp = flask.make_response(f(*args, **kwargs))\n-                resp.headers['X-Parachute'] = 'awesome'\n-                return resp\n-            return new_function\n-\n-        class Index(flask.views.View):\n-            decorators = [add_x_parachute]\n-            def dispatch_request(self):\n-                return 'Awesome'\n-\n-        app.add_url_rule('/', view_func=Index.as_view('index'))\n-        c = app.test_client()\n-        rv = c.get('/')\n-        self.assertEqual(rv.headers['X-Parachute'], 'awesome')\n-        self.assertEqual(rv.data, 'Awesome')\n-\n-\n-class DeprecationsTestCase(FlaskTestCase):\n-\n-    def test_init_jinja_globals(self):\n-        class MyFlask(flask.Flask):\n-            def init_jinja_globals(self):\n-                self.jinja_env.globals['foo'] = '42'\n-\n-        with catch_warnings() as log:\n-            app = MyFlask(__name__)\n-            @app.route('/')\n-            def foo():\n-                return app.jinja_env.globals['foo']\n-\n-            c = app.test_client()\n-            assert c.get('/').data == '42'\n-            assert len(log) == 1\n-            assert 'init_jinja_globals' in str(log[0]['message'])\n-\n-\n-def suite():\n-    from minitwit_tests import MiniTwitTestCase\n-    from flaskr_tests import FlaskrTestCase\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ContextTestCase))\n-    suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n-    suite.addTest(unittest.makeSuite(TemplatingTestCase))\n-    suite.addTest(unittest.makeSuite(ModuleTestCase))\n-    suite.addTest(unittest.makeSuite(BlueprintTestCase))\n-    suite.addTest(unittest.makeSuite(SendfileTestCase))\n-    suite.addTest(unittest.makeSuite(LoggingTestCase))\n-    suite.addTest(unittest.makeSuite(ConfigTestCase))\n-    suite.addTest(unittest.makeSuite(SubdomainTestCase))\n-    suite.addTest(unittest.makeSuite(ViewTestCase))\n-    suite.addTest(unittest.makeSuite(DeprecationsTestCase))\n-    suite.addTest(unittest.makeSuite(TestToolsTestCase))\n-    suite.addTest(unittest.makeSuite(InstanceTestCase))\n-    if flask.json_available:\n-        suite.addTest(unittest.makeSuite(JSONTestCase))\n-    if flask.signals_available:\n-        suite.addTest(unittest.makeSuite(TestSignals))\n-    suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n-    suite.addTest(unittest.makeSuite(FlaskrTestCase))\n-    return suite\n-\n-\n-if __name__ == '__main__':\n-    unittest.main(defaultTest='suite')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
