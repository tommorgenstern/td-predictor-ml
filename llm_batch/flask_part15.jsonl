{"custom_id": "flask#0bf777ed81d5296fb722931d35e5db4333e3de39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 666 | Contributors (this commit): 8 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -364,13 +364,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                                     direct_passthrough=True)\n \n     # if we know the file modification date, we can store it as the\n-    # current time to better support conditional requests.  Werkzeug\n-    # as of 0.6.1 will override this value however in the conditional\n-    # response with the current time.  This will be fixed in Werkzeug\n-    # with a new release, however many WSGI servers will still emit\n-    # a separate date header.\n+    # the time of the last modification.\n     if mtime is not None:\n-        rv.date = int(mtime)\n+        rv.last_modified = int(mtime)\n \n     rv.cache_control.public = True\n     if cache_timeout:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1643e5c39157e4f43d20b965c9967eeec8e90700", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1433 | Contributors (this commit): 9 | Commits (past 90d): 5 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -715,7 +715,7 @@ class Flask(_PackageBoundObject):\n \n     def handle_exception(self, e):\n         \"\"\"Default exception handling that kicks in when an exception\n-        occours that is not catched.  In debug mode the exception will\n+        occours that is not caught.  In debug mode the exception will\n         be re-raised immediately, otherwise it is logged and the handler\n         for a 500 internal server error is used.  If no such handler\n         exists, a default 500 internal server error message is displayed.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#00c5b7a937b63378394fc6fc576aa6c27106d6d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 23 | Churn Cumulative: 3121 | Contributors (this commit): 12 | Commits (past 90d): 12 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -352,7 +352,15 @@ class Flask(_PackageBoundObject):\n         options = dict(self.jinja_options)\n         if 'autoescape' not in options:\n             options['autoescape'] = self.select_jinja_autoescape\n-        return Environment(loader=_DispatchingJinjaLoader(self), **options)\n+        return Environment(loader=self.create_jinja_loader(), **options)\n+\n+    def create_jinja_loader(self):\n+        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n+        override just the loader and keeping the rest unchanged.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        return _DispatchingJinjaLoader(self)\n \n     def init_jinja_globals(self):\n         \"\"\"Called directly after the environment was created to inject\n\n@@ -857,6 +857,19 @@ class TemplatingTestCase(unittest.TestCase):\n         rv = app.test_client().get('/')\n         assert rv.data == 'dcba'\n \n+    def test_custom_template_loader(self):\n+        class MyFlask(flask.Flask):\n+            def create_jinja_loader(self):\n+                from jinja2 import DictLoader\n+                return DictLoader({'index.html': 'Hello Custom World!'})\n+        app = MyFlask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('index.html')\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.data == 'Hello Custom World!'\n+\n \n class ModuleTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b3fc9eb36b8021ad966be57532a5fa5ae4231e13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 113 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,11 +30,9 @@ class _RequestContext(object):\n         self.app = app\n         self.request = app.request_class(environ)\n         self.url_adapter = app.create_url_adapter(self.request)\n-        self.session = app.open_session(self.request)\n-        if self.session is None:\n-            self.session = _NullSession()\n         self.g = _RequestGlobals()\n         self.flashes = None\n+        self.session = None\n \n         try:\n             url_rule, self.request.view_args = \\\n@@ -47,6 +45,13 @@ class _RequestContext(object):\n         \"\"\"Binds the request context.\"\"\"\n         _request_ctx_stack.push(self)\n \n+        # Open the session at the moment that the request context is\n+        # available. This allows a custom open_session method to use the\n+        # request context (e.g. flask-sqlalchemy).\n+        self.session = self.app.open_session(self.request)\n+        if self.session is None:\n+            self.session = _NullSession()\n+\n     def pop(self):\n         \"\"\"Pops the request context.\"\"\"\n         _request_ctx_stack.pop()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5cc40f4728d5b5356cf49b7dfaa2b130e0b0aedf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 31 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,13 +83,13 @@ class Config(dict):\n \n     def from_envvar(self, variable_name, silent=False):\n         \"\"\"Loads a configuration from an environment variable pointing to\n-        a configuration file.  This basically is just a shortcut with nicer\n+        a configuration file.  This is basically just a shortcut with nicer\n         error messages for this line of code::\n \n             app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n \n         :param variable_name: name of the environment variable\n-        :param silent: set to `True` if you want silent failing for missing\n+        :param silent: set to `True` if you want silent to fail for missing\n                        files.\n         :return: bool. `True` if able to load config, `False` otherwise.\n         \"\"\"\n@@ -105,7 +105,7 @@ class Config(dict):\n         self.from_pyfile(rv)\n         return True\n \n-    def from_pyfile(self, filename):\n+    def from_pyfile(self, filename, silent=False):\n         \"\"\"Updates the values in the config from a Python file.  This function\n         behaves as if the file was imported as module with the\n         :meth:`from_object` function.\n@@ -113,6 +113,8 @@ class Config(dict):\n         :param filename: the filename of the config.  This can either be an\n                          absolute filename or a filename relative to the\n                          root path.\n+        :param silent: set to `True` if you want silent to fail for missing\n+                       files.\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n         d = imp.new_module('config')\n@@ -120,9 +122,12 @@ class Config(dict):\n         try:\n             execfile(filename, d.__dict__)\n         except IOError, e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n             e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n             raise\n         self.from_object(d)\n+        return True\n \n     def from_object(self, obj):\n         \"\"\"Updates the values from the given object.  An object can be of one\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fa9817778c83eb35b9c2c4332ccb7e5190d1ffa2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1713 | Contributors (this commit): 11 | Commits (past 90d): 7 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,6 +14,7 @@ from __future__ import with_statement\n import imp\n import os\n import sys\n+import errno\n \n from werkzeug import import_string\n \n\n@@ -1310,7 +1310,7 @@ class ConfigTestCase(unittest.TestCase):\n                 assert \"'FOO_SETTINGS' is not set\" in str(e)\n             else:\n                 assert 0, 'expected exception'\n-            not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+            assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n \n             os.environ = {'FOO_SETTINGS': 'flask_tests.py'}\n             assert app.config.from_envvar('FOO_SETTINGS')\n@@ -1329,6 +1329,7 @@ class ConfigTestCase(unittest.TestCase):\n             assert msg.endswith(\"missing.cfg'\")\n         else:\n             assert 0, 'expected config'\n+        assert not app.config.from_pyfile('missing.cfg', silent=True)\n \n \n class SubdomainTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#34a494713c085926d023f8e8f9cf6f0c40bab660", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 35 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -116,6 +116,9 @@ class Config(dict):\n                          root path.\n         :param silent: set to `True` if you want silent to fail for missing\n                        files.\n+\n+        .. versionadded:: 0.7\n+           `silent` parameter.\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n         d = imp.new_module('config')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#235369fd613b72c1767b2b20d9f94dee1d6090d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 36 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ from __future__ import with_statement\n \n import imp\n import os\n-import sys\n import errno\n \n from werkzeug import import_string\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#04e70bd5c7bd80696eabaea11afd9080d874f859", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 112 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 9 | Methods Changed: 17 | Complexity Δ (Sum/Max): 21/14 | Churn Δ: 113 | Churn Cumulative: 3237 | Contributors (this commit): 14 | Commits (past 90d): 11 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,6 +11,7 @@\n \n from __future__ import with_statement\n \n+import sys\n from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n@@ -247,6 +248,18 @@ class Flask(_PackageBoundObject):\n         #: :meth:`after_request` decorator.\n         self.after_request_funcs = {}\n \n+        #: A dictionary with lists of functions that are called after\n+        #: each request, even if an exception has occurred. The key of the\n+        #: dictionary is the name of the module this function is active for,\n+        #: `None` for all requests. These functions are not allowed to modify\n+        #: the request, and their return values are ignored. If an exception\n+        #: occurred while processing the request, it gets passed to each\n+        #: teardown_request function. To register a function here, use the\n+        #: :meth:`teardown_request` decorator.\n+        #:\n+        #: .. versionadded:: 0.7\n+        self.teardown_request_funcs = {}\n+\n         #: A dictionary with list of functions that are called without argument\n         #: to populate the template context.  The key of the dictionary is the\n         #: name of the module this function is active for, `None` for all\n@@ -704,6 +717,11 @@ class Flask(_PackageBoundObject):\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n+    def teardown_request(self, f):\n+        \"\"\"Register a function to be run at the end of each request, regardless of whether there was an exception or not.\"\"\"\n+        self.teardown_request_funcs.setdefault(None, []).append(f)\n+        return f\n+\n     def context_processor(self, f):\n         \"\"\"Registers a template context processor function.\"\"\"\n         self.template_context_processors[None].append(f)\n@@ -869,6 +887,20 @@ class Flask(_PackageBoundObject):\n             response = handler(response)\n         return response\n \n+    def do_teardown_request(self):\n+        \"\"\"Called after the actual request dispatching and will\n+        call every as :meth:`teardown_request` decorated function.\n+        \"\"\"\n+        funcs = reversed(self.teardown_request_funcs.get(None, ()))\n+        mod = request.module\n+        if mod and mod in self.teardown_request_funcs:\n+            funcs = chain(funcs, reversed(self.teardown_request_funcs[mod]))\n+        exc = sys.exc_info()[1]\n+        for func in funcs:\n+            rv = func(exc)\n+            if rv is not None:\n+                return rv\n+\n     def request_context(self, environ):\n         \"\"\"Creates a request context from the given environment and binds\n         it to the current context.  This must be used in combination with\n@@ -947,6 +979,11 @@ class Flask(_PackageBoundObject):\n            even if an exception happens database have the chance to\n            properly close the connection.\n \n+        .. versionchanged:: 0.7\n+           The :meth:`teardown_request` functions get called at the very end of\n+           processing the request. If an exception was thrown, it gets passed to\n+           each teardown_request function.\n+\n         :param environ: a WSGI environment\n         :param start_response: a callable accepting a status code,\n                                a list of headers and an optional\n@@ -965,6 +1002,8 @@ class Flask(_PackageBoundObject):\n                 response = self.process_response(response)\n             except Exception, e:\n                 response = self.make_response(self.handle_exception(e))\n+            finally:\n+                self.do_teardown_request()\n             request_finished.send(self, response=response)\n             return response(environ, start_response)\n \n\n@@ -413,6 +413,72 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'Internal Server Error' in rv.data\n         assert len(called) == 1\n \n+    def test_teardown_request_handler(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def teardown_request(exc):\n+            called.append(True)\n+            return \"Ignored\"\n+        @app.route('/')\n+        def root():\n+            return \"Response\"\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 200\n+        assert 'Response' in rv.data\n+        assert len(called) == 1\n+\n+    def test_teardown_request_handler_debug_mode(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.teardown_request\n+        def teardown_request(exc):\n+            called.append(True)\n+            return \"Ignored\"\n+        @app.route('/')\n+        def root():\n+            return \"Response\"\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 200\n+        assert 'Response' in rv.data\n+        assert len(called) == 1\n+\n+\n+    def test_teardown_request_handler_error(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def teardown_request1(exc):\n+            assert type(exc) == ZeroDivisionError\n+            called.append(True)\n+            # This raises a new error and blows away sys.exc_info(), so we can\n+            # test that all teardown_requests get passed the same original\n+            # exception.\n+            try:\n+                raise TypeError\n+            except:\n+                pass\n+        @app.teardown_request\n+        def teardown_request2(exc):\n+            assert type(exc) == ZeroDivisionError\n+            called.append(True)\n+            # This raises a new error and blows away sys.exc_info(), so we can\n+            # test that all teardown_requests get passed the same original\n+            # exception.\n+            try:\n+                raise TypeError\n+            except:\n+                pass\n+        @app.route('/')\n+        def fails():\n+            1/0\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+        assert len(called) == 2\n+\n+\n     def test_before_after_request_order(self):\n         called = []\n         app = flask.Flask(__name__)\n@@ -430,12 +496,18 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         def after2(response):\n             called.append(3)\n             return response\n+        @app.teardown_request\n+        def finish1(exc):\n+            called.append(6)\n+        @app.teardown_request\n+        def finish2(exc):\n+            called.append(5)\n         @app.route('/')\n         def index():\n             return '42'\n         rv = app.test_client().get('/')\n         assert rv.data == '42'\n-        assert called == [1, 2, 3, 4]\n+        assert called == [1, 2, 3, 4, 5, 6]\n \n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fbd488678f93c13527a9fba252bd89b53abec5e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 45 | Churn Cumulative: 2059 | Contributors (this commit): 11 | Commits (past 90d): 10 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,6 +21,7 @@ from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n     get_template_attribute, make_response\n from .globals import current_app, g, request, session, _request_ctx_stack\n+from .ctx import has_request_context\n from .module import Module\n from .templating import render_template, render_template_string\n from .session import Session\n\n@@ -19,6 +19,38 @@ class _RequestGlobals(object):\n     pass\n \n \n+def has_request_context():\n+    \"\"\"If you have code that wants to test if a request context is there or\n+    not this function can be used.  For instance if you want to take advantage\n+    of request information is it's available but fail silently if the request\n+    object is unavailable.\n+\n+    ::\n+\n+        class User(db.Model):\n+\n+            def __init__(self, username, remote_addr=None):\n+                self.username = username\n+                if remote_addr is None and has_request_context():\n+                    remote_addr = request.remote_addr\n+                self.remote_addr = remote_addr\n+\n+    Alternatively you can also just test any of the context bound objects\n+    (such as :class:`request` or :class:`g` for truthness)::\n+\n+        class User(db.Model):\n+\n+            def __init__(self, username, remote_addr=None):\n+                self.username = username\n+                if remote_addr is None and request:\n+                    remote_addr = request.remote_addr\n+                self.remote_addr = remote_addr\n+\n+    .. versionadded:: 0.7\n+    \"\"\"\n+    return _request_ctx_stack.top is not None\n+\n+\n class _RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n\n@@ -89,6 +89,18 @@ class ContextTestCase(unittest.TestCase):\n             assert meh() == 'http://localhost/meh'\n         assert flask._request_ctx_stack.top is None\n \n+    def test_context_test(self):\n+        app = flask.Flask(__name__)\n+        assert not flask.request\n+        assert not flask.has_request_context()\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        try:\n+            assert flask.request\n+            assert flask.has_request_context()\n+        finally:\n+            ctx.pop()\n+\n     def test_manual_context_binding(self):\n         app = flask.Flask(__name__)\n         @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1a7f579ece2528e73d9959d6fe4c8d7172fc3959", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 40 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -89,7 +89,7 @@ class Config(dict):\n             app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n \n         :param variable_name: name of the environment variable\n-        :param silent: set to `True` if you want silent to fail for missing\n+        :param silent: set to `True` if you want silent failure for missing\n                        files.\n         :return: bool. `True` if able to load config, `False` otherwise.\n         \"\"\"\n@@ -113,7 +113,7 @@ class Config(dict):\n         :param filename: the filename of the config.  This can either be an\n                          absolute filename or a filename relative to the\n                          root path.\n-        :param silent: set to `True` if you want silent to fail for missing\n+        :param silent: set to `True` if you want silent failure for missing\n                        files.\n \n         .. versionadded:: 0.7\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#97efffad9a9858c0d966723d543e1186629631d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -16/0 | Churn Δ: 4 | Churn Cumulative: 1771 | Contributors (this commit): 11 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -47,6 +47,10 @@ SECRET_KEY = 'devkey'\n def catch_warnings():\n     \"\"\"Catch warnings in a with block in a list\"\"\"\n     import warnings\n+\n+    # make sure deprecation warnings are active in tests\n+    warnings.simplefilter('default', category=DeprecationWarning)\n+\n     filters = warnings.filters\n     warnings.filters = filters[:]\n     old_showwarning = warnings.showwarning\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#67581795c4b1d5d27aaadf71f82bb6862887ba74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 44 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -89,7 +89,7 @@ class Config(dict):\n             app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n \n         :param variable_name: name of the environment variable\n-        :param silent: set to `True` if you want silent to fail for missing\n+        :param silent: set to `True` if you want silent failure for missing\n                        files.\n         :return: bool. `True` if able to load config, `False` otherwise.\n         \"\"\"\n@@ -113,7 +113,7 @@ class Config(dict):\n         :param filename: the filename of the config.  This can either be an\n                          absolute filename or a filename relative to the\n                          root path.\n-        :param silent: set to `True` if you want silent to fail for missing\n+        :param silent: set to `True` if you want silent failure for missing\n                        files.\n \n         .. versionadded:: 0.7\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4c8c503326f8b26787945082007a294dff4c255b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1486 | Contributors (this commit): 10 | Commits (past 90d): 6 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -718,7 +718,9 @@ class Flask(_PackageBoundObject):\n         return f\n \n     def teardown_request(self, f):\n-        \"\"\"Register a function to be run at the end of each request, regardless of whether there was an exception or not.\"\"\"\n+        \"\"\"Register a function to be run at the end of each request,\n+        regardless of whether there was an exception or not.\n+        \"\"\"\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5910ef8a439196075f16e8d19d72c8bcb704a62f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 701 | Contributors (this commit): 8 | Commits (past 90d): 6 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ except ImportError:\n             json_available = False\n \n \n-from werkzeug import Headers, wrap_file, cached_property\n+from werkzeug import Headers, wrap_file\n from werkzeug.exceptions import NotFound\n \n from jinja2 import FileSystemLoader\n@@ -485,7 +485,7 @@ class _PackageBoundObject(object):\n         \"\"\"\n         return os.path.isdir(os.path.join(self.root_path, 'static'))\n \n-    @cached_property\n+    @locked_cached_property\n     def jinja_loader(self):\n         \"\"\"The Jinja loader for this package bound object.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1446614915b9ab4f75cbdfd79a80b71492b00276", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 18 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 51 | Churn Cumulative: 3378 | Contributors (this commit): 14 | Commits (past 90d): 18 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -169,6 +169,11 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.4\n     logger_name = ConfigAttribute('LOGGER_NAME')\n \n+    #: Enable the deprecated module support?  This is active by default\n+    #: in 0.7 but will be changed to False in 0.8.  With Flask 1.0 modules\n+    #: will be removed in favor of Blueprints\n+    enable_modules = True\n+\n     #: The logging format used for the debug logger.  This is only used when\n     #: the application is in debug mode, otherwise the attached logging\n     #: handler does the formatting.\n@@ -533,6 +538,18 @@ class Flask(_PackageBoundObject):\n         :class:`Module` class and will override the values of the module if\n         provided.\n         \"\"\"\n+        if not self.enable_modules:\n+            raise RuntimeError('Module support was disabled but code '\n+                'attempted to register a module named %r' % module)\n+        else:\n+            from warnings import warn\n+            warn(DeprecationWarning('Modules are deprecated.  Upgrade to '\n+                'using blueprints.  Have a look into the documentation for '\n+                'more information.  If this module was registered by a '\n+                'Flask-Extension upgrade the extension or contact the author '\n+                'of that extension instead.  (Registered %r)' % module),\n+                stacklevel=2)\n+\n         options.setdefault('url_prefix', module.url_prefix)\n         options.setdefault('subdomain', module.subdomain)\n         self.view_functions.update(module.view_functions)\n\n@@ -15,9 +15,11 @@ import re\n import sys\n import flask\n import unittest\n+import warnings\n from threading import Thread\n from logging import StreamHandler\n from contextlib import contextmanager\n+from functools import update_wrapper\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from werkzeug.exceptions import NotFound\n@@ -43,11 +45,16 @@ TEST_KEY = 'foo'\n SECRET_KEY = 'devkey'\n \n \n+# import moduleapp here because it uses deprecated features and we don't\n+# want to see the warnings\n+warnings.simplefilter('ignore', DeprecationWarning)\n+from moduleapp import app as moduleapp\n+warnings.simplefilter('default', DeprecationWarning)\n+\n+\n @contextmanager\n def catch_warnings():\n     \"\"\"Catch warnings in a with block in a list\"\"\"\n-    import warnings\n-\n     # make sure deprecation warnings are active in tests\n     warnings.simplefilter('default', category=DeprecationWarning)\n \n@@ -76,6 +83,16 @@ def catch_stderr():\n         sys.stderr = old_stderr\n \n \n+def emits_module_deprecation_warning(f):\n+    def new_f(*args, **kwargs):\n+        with catch_warnings() as log:\n+            f(*args, **kwargs)\n+            assert log, 'expected deprecation warning'\n+            for entry in log:\n+                assert 'Modules are deprecated' in str(entry['message'])\n+    return update_wrapper(new_f, f)\n+\n+\n class ContextTestCase(unittest.TestCase):\n \n     def test_context_binding(self):\n@@ -961,6 +978,7 @@ class TemplatingTestCase(unittest.TestCase):\n \n class ModuleTestCase(unittest.TestCase):\n \n+    @emits_module_deprecation_warning\n     def test_basic_module(self):\n         app = flask.Flask(__name__)\n         admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n@@ -983,6 +1001,7 @@ class ModuleTestCase(unittest.TestCase):\n         assert c.get('/admin/login').data == 'admin login'\n         assert c.get('/admin/logout').data == 'admin logout'\n \n+    @emits_module_deprecation_warning\n     def test_default_endpoint_name(self):\n         app = flask.Flask(__name__)\n         mod = flask.Module(__name__, 'frontend')\n@@ -995,6 +1014,7 @@ class ModuleTestCase(unittest.TestCase):\n         with app.test_request_context():\n             assert flask.url_for('frontend.index') == '/'\n \n+    @emits_module_deprecation_warning\n     def test_request_processing(self):\n         catched = []\n         app = flask.Flask(__name__)\n@@ -1030,6 +1050,7 @@ class ModuleTestCase(unittest.TestCase):\n         assert catched == ['before-app', 'before-admin',\n                            'after-admin', 'after-app']\n \n+    @emits_module_deprecation_warning\n     def test_context_processors(self):\n         app = flask.Flask(__name__)\n         admin = flask.Module(__name__, 'admin', url_prefix='/admin')\n@@ -1053,6 +1074,7 @@ class ModuleTestCase(unittest.TestCase):\n         assert c.get('/').data == '13'\n         assert c.get('/admin/').data == '123'\n \n+    @emits_module_deprecation_warning\n     def test_late_binding(self):\n         app = flask.Flask(__name__)\n         admin = flask.Module(__name__, 'admin')\n@@ -1062,6 +1084,7 @@ class ModuleTestCase(unittest.TestCase):\n         app.register_module(admin, url_prefix='/admin')\n         assert app.test_client().get('/admin/').data == '42'\n \n+    @emits_module_deprecation_warning\n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n         admin = flask.Module(__name__, 'admin')\n@@ -1087,7 +1110,7 @@ class ModuleTestCase(unittest.TestCase):\n         assert 'internal server error' == rv.data\n \n     def test_templates_and_static(self):\n-        from moduleapp import app\n+        app = moduleapp\n         c = app.test_client()\n \n         rv = c.get('/')\n@@ -1117,7 +1140,7 @@ class ModuleTestCase(unittest.TestCase):\n             assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n     def test_safe_access(self):\n-        from moduleapp import app\n+        app = moduleapp\n \n         with app.test_request_context():\n             f = app.view_functions['admin.static']\n@@ -1150,6 +1173,7 @@ class ModuleTestCase(unittest.TestCase):\n             finally:\n                 os.path = old_path\n \n+    @emits_module_deprecation_warning\n     def test_endpoint_decorator(self):\n         from werkzeug.routing import Submount, Rule\n         from flask import Module\n@@ -1439,6 +1463,7 @@ class SubdomainTestCase(unittest.TestCase):\n         rv = c.get('/', 'http://test.localhost/')\n         assert rv.data == 'test index'\n \n+    @emits_module_deprecation_warning\n     def test_module_static_path_subdomain(self):\n         app = flask.Flask(__name__)\n         app.config['SERVER_NAME'] = 'example.com'\n@@ -1459,6 +1484,7 @@ class SubdomainTestCase(unittest.TestCase):\n         rv = c.get('/', 'http://mitsuhiko.localhost/')\n         assert rv.data == 'index for mitsuhiko'\n \n+    @emits_module_deprecation_warning\n     def test_module_subdomain_support(self):\n         app = flask.Flask(__name__)\n         mod = flask.Module(__name__, 'test', subdomain='testing')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a06cd0a64418f2aafafb0a574c64c2ea5f3e9239", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 89 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 22 | Methods Changed: 13 | Complexity Δ (Sum/Max): 17/11 | Churn Δ: 107 | Churn Cumulative: 3745 | Contributors (this commit): 15 | Commits (past 90d): 22 | Contributors (cumulative): 27 | DMM Complexity: 0.08333333333333333\n\nDIFF:\n@@ -16,8 +16,6 @@ from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n \n-from jinja2 import Environment\n-\n from werkzeug import ImmutableDict\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, \\\n@@ -31,7 +29,7 @@ from .ctx import _RequestContext\n from .globals import _request_ctx_stack, request\n from .session import Session, _NullSession\n from .module import _ModuleSetupState\n-from .templating import _DispatchingJinjaLoader, \\\n+from .templating import DispatchingJinjaLoader, Environment, \\\n     _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception\n \n@@ -280,6 +278,13 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.5\n         self.modules = {}\n \n+        #: all the attached blueprints in a directory by name.  Blueprints\n+        #: can be attached multiple times so this dictionary does not tell\n+        #: you how often they got attached.\n+        #:\n+        #: .. versionadded:: 0.7\n+        self.blueprints = {}\n+\n         #: a place where extensions can store application specific state.  For\n         #: example this is where an extension could store database engines and\n         #: similar things.  For backwards compatibility extensions should register\n@@ -386,7 +391,7 @@ class Flask(_PackageBoundObject):\n         options = dict(self.jinja_options)\n         if 'autoescape' not in options:\n             options['autoescape'] = self.select_jinja_autoescape\n-        rv = Environment(loader=self.create_jinja_loader(), **options)\n+        rv = Environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages\n@@ -400,7 +405,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        return _DispatchingJinjaLoader(self)\n+        return DispatchingJinjaLoader(self)\n \n     def init_jinja_globals(self):\n         \"\"\"Deprecated.  Used to initialize the Jinja2 globals.\n@@ -537,6 +542,10 @@ class Flask(_PackageBoundObject):\n         of this function are the same as the ones for the constructor of the\n         :class:`Module` class and will override the values of the module if\n         provided.\n+\n+        .. versionchanged:: 0.7\n+           The module system was deprecated in favor for the blueprint\n+           system.\n         \"\"\"\n         if not self.enable_modules:\n             raise RuntimeError('Module support was disabled but code '\n@@ -557,6 +566,19 @@ class Flask(_PackageBoundObject):\n         for func in module._register_events:\n             func(state)\n \n+    def register_blueprint(self, blueprint, **options):\n+        \"\"\"Registers a blueprint on the application.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        if blueprint.name in self.blueprints:\n+            assert self.blueprints[blueprint.name] is blueprint, \\\n+                'A blueprint\\'s name collision ocurred between %r and ' \\\n+                '%r.' % (blueprint, self.blueprints[blueprint.name])\n+        else:\n+            self.blueprints[blueprint.name] = blueprint\n+        blueprint.register(self, **options)\n+\n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n\n@@ -9,7 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import posixpath\n-from jinja2 import BaseLoader, TemplateNotFound\n+from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n+     TemplateNotFound\n \n from .globals import _request_ctx_stack\n from .signals import template_rendered\n@@ -28,7 +29,25 @@ def _default_template_ctx_processor():\n     )\n \n \n-class _DispatchingJinjaLoader(BaseLoader):\n+class Environment(BaseEnvironment):\n+    \"\"\"Works like a regular Jinja2 environment but has some additional\n+    knowledge of how Flask's blueprint works so that it can prepend the\n+    name of the blueprint to referenced templates if necessary.\n+    \"\"\"\n+\n+    def __init__(self, app, **options):\n+        if 'loader' not in options:\n+            options['loader'] = app.create_jinja_loader()\n+        BaseEnvironment.__init__(self, **options)\n+        self.app = app\n+\n+    def join_path(self, template, parent):\n+        if template and template[0] == ':':\n+            template = parent.split(':', 1)[0] + template\n+        return template\n+\n+\n+class DispatchingJinjaLoader(BaseLoader):\n     \"\"\"A loader that looks for templates in the application and all\n     the module folders.\n     \"\"\"\n@@ -37,31 +56,50 @@ class _DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n-        template = posixpath.normpath(template)\n-        if template.startswith('../'):\n+        # newstyle template support.  blueprints are explicit and no further\n+        # magic is involved.  If the template cannot be loaded by the\n+        # blueprint loader it just gives up, no further steps involved.\n+        if ':' in template:\n+            blueprint_name, local_template = template.split(':', 1)\n+            local_template = posixpath.normpath(local_template)\n+            blueprint = self.app.blueprints.get(blueprint_name)\n+            if blueprint is None:\n                 raise TemplateNotFound(template)\n+            loader = blueprint.jinja_loader\n+            if loader is not None:\n+                return loader.get_source(environment, local_template)\n+\n+        # if modules are enabled we call into the old style template lookup\n+        # and try that before we go with the real deal.\n         loader = None\n         try:\n-            module, name = template.split('/', 1)\n+            module, name = posixpath.normpath(template).split('/', 1)\n             loader = self.app.modules[module].jinja_loader\n-        except (ValueError, KeyError):\n+        except (ValueError, KeyError, TemplateNotFound):\n             pass\n-        # if there was a module and it has a loader, try this first\n-        if loader is not None:\n         try:\n+            if loader is not None:\n                 return loader.get_source(environment, name)\n         except TemplateNotFound:\n             pass\n-        # fall back to application loader if module failed\n+\n+        # at the very last, load templates from the environment\n         return self.app.jinja_loader.get_source(environment, template)\n \n     def list_templates(self):\n-        result = self.app.jinja_loader.list_templates()\n+        result = set(self.app.jinja_loader.list_templates())\n+\n         for name, module in self.app.modules.iteritems():\n             if module.jinja_loader is not None:\n                 for template in module.jinja_loader.list_templates():\n-                    result.append('%s/%s' % (name, template))\n-        return result\n+                    result.add('%s/%s' % (name, template))\n+\n+        for name, blueprint in self.app.blueprints.iteritems():\n+            if blueprint.jinja_loader is not None:\n+                for template in blueprint.jinja_loader.list_templates():\n+                    result.add('%s:%s' % (name, template))\n+\n+        return list(result)\n \n \n def _render(template, context, app):\n@@ -81,6 +119,8 @@ def render_template(template_name, **context):\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     ctx.app.update_template_context(context)\n+    if template_name[:1] == ':':\n+        template_name = ctx.request.blueprint + template_name\n     return _render(ctx.app.jinja_env.get_template(template_name),\n                    context, ctx.app)\n \n\n@@ -62,9 +62,17 @@ class Request(RequestBase):\n     @property\n     def module(self):\n         \"\"\"The name of the current module\"\"\"\n-        if self.url_rule and '.' in self.url_rule.endpoint:\n+        if self.url_rule and \\\n+           ':' not in self.url_rule.endpoint and \\\n+           '.' in self.url_rule.endpoint:\n             return self.url_rule.endpoint.rsplit('.', 1)[0]\n \n+    @property\n+    def blueprint(self):\n+        \"\"\"The name of the current blueprint\"\"\"\n+        if self.url_rule and ':' in self.url_rule.endpoint:\n+            return self.url_rule.endpoint.split(':', 1)[0]\n+\n     @cached_property\n     def json(self):\n         \"\"\"If the mimetype is `application/json` this will contain the\n\n@@ -1111,6 +1111,7 @@ class ModuleTestCase(unittest.TestCase):\n \n     def test_templates_and_static(self):\n         app = moduleapp\n+        app.debug = True\n         c = app.test_client()\n \n         rv = c.get('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0ecc686372f577ccbcbcb818e1386ceb7bd9391d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 2 | Churn Cumulative: 703 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -321,7 +321,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if not attachment_filename and not mimetype \\\n            and isinstance(filename, basestring):\n             warn(DeprecationWarning('The filename support for file objects '\n-                'passed to send_file is not deprecated.  Pass an '\n+                'passed to send_file is now deprecated.  Pass an '\n                 'attach_filename if you want mimetypes to be guessed.'),\n                 stacklevel=2)\n         if add_etags:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#709ecefee1859cf16cc8bdfa642e39fbc6b4421e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 5 | Churn Cumulative: 1590 | Contributors (this commit): 11 | Commits (past 90d): 10 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -713,7 +713,10 @@ class Flask(_PackageBoundObject):\n         return f\n \n     def after_request(self, f):\n-        \"\"\"Register a function to be run after each request.\"\"\"\n+        \"\"\"Register a function to be run after each request. Your function\n+        must take one parameter, a :attr:`response_class` object and return\n+        a new response object or the same (see :meth:`process_response`).\n+        \"\"\"\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7ed3196e8d1861acd027c409c47e51cce812ba63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 36 | Churn Cumulative: 886 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,7 @@ from .app import Flask, Request, Response\n from .config import Config\n from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n-    get_template_attribute, make_response\n+    get_template_attribute, make_response, safe_join\n from .globals import current_app, g, request, session, _request_ctx_stack\n from .ctx import has_request_context\n from .module import Module\n\n@@ -388,6 +388,32 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     return rv\n \n \n+def safe_join(directory, filename):\n+    \"\"\"Safely join `directory` and `filename`.\n+    \n+    :param directory: the base directory.\n+    :param filename: the untrusted filename relative to that directory.\n+    :raises: :class:`~werkzeug.exceptions.NotFound` if the retsulting path\n+             would fall out of `directory`.\n+\n+    Example usage::\n+\n+        @app.route('/wiki/<path:filename>')\n+        def wiki_page(filename):\n+            filename = safe_join(app.config['WIKI_FOLDER'], filename)\n+            with open(filename, 'rb') as fd:\n+                content = fd.read() # Read and process the file content...\n+\n+    \"\"\"\n+    filename = posixpath.normpath(filename)\n+    for sep in _os_alt_seps:\n+        if sep in filename:\n+            raise NotFound()\n+    if os.path.isabs(filename) or filename.startswith('../'):\n+        raise NotFound()\n+    return os.path.join(directory, filename)\n+\n+\n def send_from_directory(directory, filename, **options):\n     \"\"\"Send a file from a given directory with :func:`send_file`.  This\n     is a secure way to quickly expose static files from an upload folder\n@@ -415,13 +441,7 @@ def send_from_directory(directory, filename, **options):\n     :param options: optional keyword arguments that are directly\n                     forwarded to :func:`send_file`.\n     \"\"\"\n-    filename = posixpath.normpath(filename)\n-    for sep in _os_alt_seps:\n-        if sep in filename:\n-            raise NotFound()\n-    if os.path.isabs(filename) or filename.startswith('../'):\n-        raise NotFound()\n-    filename = os.path.join(directory, filename)\n+    filename = safe_join(directory, filename)\n     if not os.path.isfile(filename):\n         raise NotFound()\n     return send_file(filename, conditional=True, **options)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
