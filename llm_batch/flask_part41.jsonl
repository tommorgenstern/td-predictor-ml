{"custom_id": "flask#9e5ab21c8e503a3e5a29b4ca77fd63663ec6e44a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3337 | Contributors (this commit): 30 | Commits (past 90d): 24 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -1773,7 +1773,7 @@ class Flask(_PackageBoundObject):\n \n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n-        :func:`werkzeug.test.EnvironBuilder` for more information, this\n+        :class:`werkzeug.test.EnvironBuilder` for more information, this\n         function accepts the same arguments).\n         \"\"\"\n         from flask.testing import make_test_environ_builder\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b290bf4079bc325d6b13f9043afb17c4aee48df0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 8/6 | Churn Δ: 46 | Churn Cumulative: 604 | Contributors (this commit): 9 | Commits (past 90d): 14 | Contributors (cumulative): 15 | DMM Complexity: 0.5483870967741935\n\nDIFF:\n@@ -15,6 +15,7 @@ import errno\n \n from werkzeug.utils import import_string\n from ._compat import string_types\n+from . import json\n \n \n class ConfigAttribute(object):\n@@ -164,5 +165,31 @@ class Config(dict):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n \n+    def from_json(self, filename, silent=False):\n+        \"\"\"Updates the values in the config from a JSON file. This function\n+        behaves as if the JSON object was a dictionary and passed ot the\n+        :meth:`from_object` function.\n+\n+        :param filename: the filename of the JSON file.  This can either be an\n+                         absolute filename or a filename relative to the\n+                         root path.\n+        :param silent: set to `True` if you want silent failure for missing\n+                       files.\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+\n+        try:\n+            with open(filename) as json_file:\n+                obj = json.loads(json_file.read())\n+        except IOError as e:\n+            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n+                return False\n+            e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n+            raise\n+        for key in obj.keys():\n+            if key.isupper():\n+                self[key] = obj[key]\n+        return True\n+\n     def __repr__(self):\n         return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n\n@@ -40,6 +40,12 @@ class ConfigTestCase(FlaskTestCase):\n         app.config.from_object(__name__)\n         self.common_object_test(app)\n \n+    def test_config_from_json(self):\n+        app = flask.Flask(__name__)\n+        current_dir = os.path.dirname(os.path.abspath(__file__))\n+        app.config.from_json(os.path.join(current_dir, 'static', 'config.json'))\n+        self.common_object_test(app)\n+\n     def test_config_from_class(self):\n         class Base(object):\n             TEST_KEY = 'foo'\n@@ -99,6 +105,19 @@ class ConfigTestCase(FlaskTestCase):\n             self.assert_true(0, 'expected config')\n         self.assert_false(app.config.from_pyfile('missing.cfg', silent=True))\n \n+    def test_config_missing_json(self):\n+        app = flask.Flask(__name__)\n+        try:\n+            app.config.from_json('missing.json')\n+        except IOError as e:\n+            msg = str(e)\n+            self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n+                                            'file (No such file or directory):'))\n+            self.assert_true(msg.endswith(\"missing.json'\"))\n+        else:\n+            self.assert_true(0, 'expected config')\n+        self.assert_false(app.config.from_json('missing.json', silent=True))\n+\n     def test_session_lifetime(self):\n         app = flask.Flask(__name__)\n         app.config['PERMANENT_SESSION_LIFETIME'] = 42\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#94f436013792249a9bb7206c2868d4c6c21fd887", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 2139 | Contributors (this commit): 28 | Commits (past 90d): 20 | Contributors (cumulative): 33 | DMM Complexity: 0.6875\n\nDIFF:\n@@ -679,8 +679,13 @@ def find_package(import_name):\n             filename = sys.modules[import_name].__file__\n         package_path = os.path.abspath(os.path.dirname(filename))\n         # package_path ends with __init__.py for a package\n+        if hasattr(loader, 'is_package'):\n             if loader.is_package(root_mod_name):\n                 package_path = os.path.dirname(package_path)\n+        else:\n+            raise AttributeError(\n+                ('%s.is_package() method is missing but is '\n+                 'required by Flask of PEP 302 import hooks') % loader.__class__.__name__)\n \n     site_parent, site_folder = os.path.split(package_path)\n     py_prefix = os.path.abspath(sys.prefix)\n\n@@ -16,6 +16,7 @@ import pkgutil\n import unittest\n from contextlib import contextmanager\n from flask.testsuite import FlaskTestCase\n+from flask._compat import PY2\n \n \n # config keys used for the ConfigTestCase\n@@ -291,6 +292,18 @@ class InstanceTestCase(FlaskTestCase):\n             if 'site_egg' in sys.modules:\n                 del sys.modules['site_egg']\n \n+    if PY2:\n+        def test_meta_path_loader_without_is_package(self):\n+            class Loader(object):\n+                def find_module(self, name):\n+                    return self\n+            sys.meta_path.append(Loader())\n+            try:\n+                with self.assert_raises(AttributeError):\n+                    flask.Flask(__name__)\n+            finally:\n+                sys.meta_path.pop()\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f5d38dc4fcdf1d8edb3e42c67b6e0e1127cd00c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 573 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -223,7 +223,7 @@ class SessionInterface(object):\n \n     def get_cookie_path(self, app):\n         \"\"\"Returns the path for which the cookie should be valid.  The\n-        default implementation uses the value from the SESSION_COOKIE_PATH``\n+        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n         config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n         uses ``/`` if it's `None`.\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#17e5fb365d7bde8fc795311bb37fe6358e258dc5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3339 | Contributors (this commit): 31 | Commits (past 90d): 22 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -1547,7 +1547,7 @@ class Flask(_PackageBoundObject):\n         :class:`tuple`          A tuple in the form ``(response, status,\n                                 headers)`` where `response` is any of the\n                                 types defined here, `status` is a string\n-                                or an integer and `headers` is a list of\n+                                or an integer and `headers` is a list or\n                                 a dictionary with header values.\n         ======================= ===========================================\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3e90de2e10cfde5803fab87768430cffff7c78a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 410 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -115,8 +115,8 @@ class Request(RequestBase):\n         but this can be overriden by the `force` parameter.\n \n         :param force: if set to `True` the mimetype is ignored.\n-        :param silent: if set to `False` this method will fail silently\n-                       and return `False`.\n+        :param silent: if set to `True` this method will fail silently\n+                       and return `None`.\n         :param cache: if set to `True` the parsed JSON data is remembered\n                       on the request.\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#42cf782ee36a7cebb4b499a15e344017fede2c38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 188 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@\n \"\"\"\n \n from sqlite3 import dbapi2 as sqlite3\n-from flask import Flask, request, session, g, redirect, url_for, abort, \\\n+from flask import Flask, request, session, redirect, url_for, abort, \\\n      render_template, flash, _app_ctx_stack\n \n # configuration\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#05161d35844ba7cc1f46c08a51de632b5f3c5269", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 44 | Churn Cumulative: 232 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -11,22 +11,31 @@\n \"\"\"\n \n from sqlite3 import dbapi2 as sqlite3\n-from flask import Flask, request, session, redirect, url_for, abort, \\\n-     render_template, flash, _app_ctx_stack\n+from flask import Flask, request, session, g, redirect, url_for, abort, \\\n+     render_template, flash\n \n-# configuration\n-DATABASE = '/tmp/flaskr.db'\n-DEBUG = True\n-SECRET_KEY = 'development key'\n-USERNAME = 'admin'\n-PASSWORD = 'default'\n \n # create our little application :)\n app = Flask(__name__)\n-app.config.from_object(__name__)\n+\n+# Load default config and override config from an environment variable\n+app.config.update(dict(\n+    DATABASE='/tmp/flaskr.db',\n+    DEBUG=True,\n+    SECRET_KEY='development key',\n+    USERNAME='admin',\n+    PASSWORD='default'\n+))\n app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n \n \n+def connect_db():\n+    \"\"\"Connects to the specific database.\"\"\"\n+    rv = sqlite3.connect(app.config['DATABASE'])\n+    rv.row_factory = sqlite3.Row\n+    return rv\n+\n+\n def init_db():\n     \"\"\"Creates the database tables.\"\"\"\n     with app.app_context():\n@@ -40,21 +49,16 @@ def get_db():\n     \"\"\"Opens a new database connection if there is none yet for the\n     current application context.\n     \"\"\"\n-    top = _app_ctx_stack.top\n-    if not hasattr(top, 'sqlite_db'):\n-        sqlite_db = sqlite3.connect(app.config['DATABASE'])\n-        sqlite_db.row_factory = sqlite3.Row\n-        top.sqlite_db = sqlite_db\n-\n-    return top.sqlite_db\n+    if not hasattr(g, 'sqlite_db'):\n+        g.sqlite_db = connect_db()\n+    return g.sqlite_db\n \n \n @app.teardown_appcontext\n-def close_db_connection(exception):\n+def close_db(error):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n-    top = _app_ctx_stack.top\n-    if hasattr(top, 'sqlite_db'):\n-        top.sqlite_db.close()\n+    if hasattr(g, 'sqlite_db'):\n+        g.sqlite_db.close()\n \n \n @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8f1dada542d9e9cc9af0eada3e99eb7ceda2e873", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3457 | Contributors (this commit): 32 | Commits (past 90d): 13 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -1158,7 +1158,6 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         self.jinja_env.tests[name or f.__name__] = f\n \n-\n     @setupmethod\n     def template_global(self, name=None):\n         \"\"\"A decorator that is used to register a custom template global function.\n@@ -1710,7 +1709,7 @@ class Flask(_PackageBoundObject):\n         if bp is not None and bp in self.teardown_request_funcs:\n             funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n         for func in funcs:\n-            rv = func(exc)\n+            func(exc)\n         request_tearing_down.send(self, exc=exc)\n \n     def do_teardown_appcontext(self, exc=None):\n\n@@ -78,7 +78,7 @@ def attach_enctype_error_multidict(request):\n         def __getitem__(self, key):\n             try:\n                 return oldcls.__getitem__(self, key)\n-            except KeyError as e:\n+            except KeyError:\n                 if key not in request.form:\n                     raise\n                 raise DebugFilesKeyError(request, key)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b03181363bd78ab0934af3badd9b4845e454fbb3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 562 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -399,3 +399,14 @@ class Blueprint(_PackageBoundObject):\n                 self.name, code_or_exception, f))\n             return f\n         return decorator\n+\n+    def register_error_handler(self, code_or_exception, f):\n+        \"\"\"Non-decorator version of the :meth:`errorhandler` error attach\n+        function, akin to the :meth:`~flask.Flask.register_error_handler`\n+        application-wide function of the :class:`~flask.Flask` object but\n+        for error handlers limited to this blueprint.\n+\n+        .. versionadded:: 0.11\n+        \"\"\"\n+        self.record_once(lambda s: s.app._register_error_handler(\n+            self.name, code_or_exception, f))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#079ae20f24e23ba4ab32faeca88705b247fd3eb2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 33 | Churn Cumulative: 1025 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -296,6 +296,39 @@ class BlueprintTestCase(FlaskTestCase):\n         self.assert_equal(c.get('/backend-no').data, b'backend says no')\n         self.assert_equal(c.get('/what-is-a-sideend').data, b'application itself says no')\n \n+    def test_blueprint_specific_user_error_handling(self):\n+        class MyDecoratorException(Exception):\n+            pass\n+        class MyFunctionException(Exception):\n+            pass\n+\n+        blue = flask.Blueprint('blue', __name__)\n+\n+        @blue.errorhandler(MyDecoratorException)\n+        def my_decorator_exception_handler(e):\n+            self.assert_true(isinstance(e, MyDecoratorException))\n+            return 'boom'\n+\n+        def my_function_exception_handler(e):\n+            self.assert_true(isinstance(e, MyFunctionException))\n+            return 'bam'\n+        blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n+\n+        @blue.route('/decorator')\n+        def blue_deco_test():\n+            raise MyDecoratorException()\n+        @blue.route('/function')\n+        def blue_func_test():\n+            raise MyFunctionException()\n+\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(blue)\n+\n+        c = app.test_client()\n+\n+        self.assert_equal(c.get('/decorator').data, b'boom')\n+        self.assert_equal(c.get('/function').data, b'bam')\n+\n     def test_blueprint_url_definitions(self):\n         bp = flask.Blueprint('test', __name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cff35237efea11c4bbc8c2fc75e24cbea30b26ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 186 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -125,7 +125,9 @@ class ExtImportHookTestCase(FlaskTestCase):\n             next = tb.tb_next.tb_next\n             if not PY2:\n                 next = next.tb_next\n-            self.assert_in('flask_broken/__init__.py', next.tb_frame.f_code.co_filename)\n+            \n+            import os.path\n+            self.assert_in(os.path.join('flask_broken', '__init__.py'), next.tb_frame.f_code.co_filename)\n \n \n def suite():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b7337080e48990393cf960890504710bc7cbc136", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 991 | Contributors (this commit): 11 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -260,7 +260,7 @@ class SendfileTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         with catch_warnings() as captured:\n             with app.test_request_context():\n-                f = open(os.path.join(app.root_path, 'static/index.html'))\n+                f = open(os.path.join(app.root_path, 'static/index.html'), mode='rb')\n                 rv = flask.send_file(f)\n                 rv.direct_passthrough = False\n                 with app.open_resource('static/index.html') as f:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb882454a0c7b161a2ac29126a74b25dc8e12940", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 197 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -60,7 +60,7 @@ class View(object):\n     #: view function is created the result is automatically decorated.\n     #:\n     #: .. versionadded:: 0.8\n-    decorators = []\n+    decorators = ()\n \n     def dispatch_request(self):\n         \"\"\"Subclasses have to override this method to implement the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3d67736e090f55fcdc476452ac89a79fdd14cc23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 46 | Churn Cumulative: 5664 | Contributors (this commit): 33 | Commits (past 90d): 48 | Contributors (cumulative): 41 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1365,8 +1365,6 @@ class Flask(_PackageBoundObject):\n         # wants the traceback preserved in handle_http_exception.  Of course\n         # we cannot prevent users from trashing it themselves in a custom\n         # trap_http_exception method so that's their fault then.\n-        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n-            return self.handle_http_exception(e)\n \n         blueprint_handlers = ()\n         handlers = self.error_handler_spec.get(request.blueprint)\n@@ -1377,6 +1375,9 @@ class Flask(_PackageBoundObject):\n             if isinstance(e, typecheck):\n                 return handler(e)\n \n+        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n+            return self.handle_http_exception(e)\n+\n         reraise(exc_type, exc_value, tb)\n \n     def handle_exception(self, e):\n\n@@ -18,7 +18,7 @@ from datetime import datetime\n from threading import Thread\n from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n from flask._compat import text_type\n-from werkzeug.exceptions import BadRequest, NotFound\n+from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n \n@@ -626,12 +626,18 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         @app.errorhandler(500)\n         def internal_server_error(e):\n             return 'internal server error', 500\n+        @app.errorhandler(Forbidden)\n+        def forbidden(e):\n+            return 'forbidden', 403\n         @app.route('/')\n         def index():\n             flask.abort(404)\n         @app.route('/error')\n         def error():\n             1 // 0\n+        @app.route('/forbidden')\n+        def error2():\n+            flask.abort(403)\n         c = app.test_client()\n         rv = c.get('/')\n         self.assert_equal(rv.status_code, 404)\n@@ -639,6 +645,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         rv = c.get('/error')\n         self.assert_equal(rv.status_code, 500)\n         self.assert_equal(b'internal server error', rv.data)\n+        rv = c.get('/forbidden')\n+        self.assert_equal(rv.status_code, 403)\n+        self.assert_equal(b'forbidden', rv.data)\n \n     def test_before_request_and_routing_errors(self):\n         app = flask.Flask(__name__)\n@@ -668,6 +677,36 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         c = app.test_client()\n         self.assert_equal(c.get('/').data, b'42')\n \n+    def test_http_error_subclass_handling(self):\n+        class ForbiddenSubclass(Forbidden):\n+            pass\n+\n+        app = flask.Flask(__name__)\n+        @app.errorhandler(ForbiddenSubclass)\n+        def handle_forbidden_subclass(e):\n+            self.assert_true(isinstance(e, ForbiddenSubclass))\n+            return 'banana'\n+        @app.errorhandler(403)\n+        def handle_forbidden_subclass(e):\n+            self.assert_false(isinstance(e, ForbiddenSubclass))\n+            self.assert_true(isinstance(e, Forbidden))\n+            return 'apple'\n+\n+        @app.route('/1')\n+        def index1():\n+            raise ForbiddenSubclass()\n+        @app.route('/2')\n+        def index2():\n+            flask.abort(403)\n+        @app.route('/3')\n+        def index3():\n+            raise Forbidden()\n+\n+        c = app.test_client()\n+        self.assert_equal(c.get('/1').data, b'banana')\n+        self.assert_equal(c.get('/2').data, b'apple')\n+        self.assert_equal(c.get('/3').data, b'apple')\n+\n     def test_trapping_of_bad_request_key_errors(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3e485009a8ca606c742c88c92cfd178547b708cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 15 | Churn Cumulative: 3812 | Contributors (this commit): 35 | Commits (past 90d): 9 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -294,6 +294,7 @@ class Flask(_PackageBoundObject):\n         'JSON_AS_ASCII':                        True,\n         'JSON_SORT_KEYS':                       True,\n         'JSONIFY_PRETTYPRINT_REGULAR':          True,\n+        'TEMPLATES_AUTO_RELOAD':                True,\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n@@ -644,10 +645,16 @@ class Flask(_PackageBoundObject):\n         this function to customize the behavior.\n \n         .. versionadded:: 0.5\n+        .. versionchanged:: 1.0\n+           ``Environment.auto_reload`` set in accordance with\n+           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n         \"\"\"\n         options = dict(self.jinja_options)\n         if 'autoescape' not in options:\n             options['autoescape'] = self.select_jinja_autoescape\n+        if 'auto_reload' not in options:\n+            options['auto_reload'] = self.debug \\\n+                or self.config['TEMPLATES_AUTO_RELOAD']\n         rv = Environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n\n@@ -295,6 +295,14 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, b'<h1>Jameson</h1>')\n \n+    def test_templates_auto_reload(self):\n+        app = flask.Flask(__name__)\n+        self.assert_true(app.config['TEMPLATES_AUTO_RELOAD'])\n+        self.assert_true(app.jinja_env.auto_reload)\n+        app = flask.Flask(__name__)\n+        app.config['TEMPLATES_AUTO_RELOAD'] = False\n+        self.assert_false(app.jinja_env.auto_reload)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5ecca4c0dae52c7645f9dbda6cbfc32ec76a3498", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 564 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -79,7 +79,7 @@ class BlueprintSetupState(object):\n class Blueprint(_PackageBoundObject):\n     \"\"\"Represents a blueprint.  A blueprint is an object that records\n     functions that will be called with the\n-    :class:`~flask.blueprint.BlueprintSetupState` later to register functions\n+    :class:`~flask.blueprints.BlueprintSetupState` later to register functions\n     or other things on the main application.  See :ref:`blueprints` for more\n     information.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e31a2a80ec4254e8ac8127558bc29cfd23d05511", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 1640 | Contributors (this commit): 27 | Commits (past 90d): 2 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -199,16 +199,16 @@ def url_for(endpoint, **values):\n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n     To integrate applications, :class:`Flask` has a hook to intercept URL build\n-    errors through :attr:`Flask.build_error_handler`.  The `url_for` function\n-    results in a :exc:`~werkzeug.routing.BuildError` when the current app does\n-    not have a URL for the given endpoint and values.  When it does, the\n-    :data:`~flask.current_app` calls its :attr:`~Flask.build_error_handler` if\n+    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n+    function results in a :exc:`~werkzeug.routing.BuildError` when the current\n+    app does not have a URL for the given endpoint and values.  When it does, the\n+    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\n     it is not `None`, which can return a string to use as the result of\n     `url_for` (instead of `url_for`'s default to raise the\n     :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n     An example::\n \n-        def external_url_handler(error, endpoint, **values):\n+        def external_url_handler(error, endpoint, values):\n             \"Looks up an external URL when `url_for` cannot build a URL.\"\n             # This is an example of hooking the build_error_handler.\n             # Here, lookup_url is some utility function you've built\n@@ -225,10 +225,10 @@ def url_for(endpoint, **values):\n             # url_for will use this result, instead of raising BuildError.\n             return url\n \n-        app.build_error_handler = external_url_handler\n+        app.url_build_error_handlers.append(external_url_handler)\n \n     Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n-    `endpoint` and `**values` are the arguments passed into `url_for`.  Note\n+    `endpoint` and `values` are the arguments passed into `url_for`.  Note\n     that this is for building URLs outside the current application, and not for\n     handling 404 NotFound errors.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46b5754d97d11327efac22618ad5994851656937", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 3358 | Contributors (this commit): 34 | Commits (past 90d): 9 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -470,8 +470,8 @@ class Flask(_PackageBoundObject):\n         #:          app.extensions = {}\n         #:      app.extensions['extensionname'] = SomeObject()\n         #:\n-        #: The key must match the name of the `flaskext` module.  For example in\n-        #: case of a \"Flask-Foo\" extension in `flaskext.foo`, the key would be\n+        #: The key must match the name of the extension module. For example in\n+        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be\n         #: ``'foo'``.\n         #:\n         #: .. versionadded:: 0.7\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a3a2f521f14ba90689efc661afe7a0375409c83e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 38 | Churn Cumulative: 974 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 17 | DMM Complexity: 0.9375\n\nDIFF:\n@@ -163,6 +163,8 @@ class AppContext(object):\n     def push(self):\n         \"\"\"Binds the app context to the current context.\"\"\"\n         self._refcnt += 1\n+        if hasattr(sys, 'exc_clear'):\n+            sys.exc_clear()\n         _app_ctx_stack.push(self)\n         appcontext_pushed.send(self.app)\n \n@@ -312,6 +314,9 @@ class RequestContext(object):\n         else:\n             self._implicit_app_ctx_stack.append(None)\n \n+        if hasattr(sys, 'exc_clear'):\n+            sys.exc_clear()\n+\n         _request_ctx_stack.push(self)\n \n         # Open the session at the moment that the request context is\n\n@@ -63,6 +63,23 @@ class AppContextTestCase(FlaskTestCase):\n \n         self.assert_equal(cleanup_stuff, [None])\n \n+    def test_app_tearing_down_with_previous_exception(self):\n+        cleanup_stuff = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_appcontext\n+        def cleanup(exception):\n+            cleanup_stuff.append(exception)\n+\n+        try:\n+            raise Exception('dummy')\n+        except Exception:\n+            pass\n+\n+        with app.app_context():\n+            pass\n+\n+        self.assert_equal(cleanup_stuff, [None])\n+\n     def test_custom_app_ctx_globals_class(self):\n         class CustomRequestGlobals(object):\n             def __init__(self):\n\n@@ -33,6 +33,22 @@ class RequestContextTestCase(FlaskTestCase):\n         ctx.pop()\n         self.assert_equal(buffer, [None])\n \n+    def test_teardown_with_previous_exception(self):\n+        buffer = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def end_of_request(exception):\n+            buffer.append(exception)\n+\n+        try:\n+            raise Exception('dummy')\n+        except Exception:\n+            pass\n+\n+        with app.test_request_context():\n+            self.assert_equal(buffer, [])\n+        self.assert_equal(buffer, [None])\n+\n     def test_proper_test_request_context(self):\n         app = flask.Flask(__name__)\n         app.config.update(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c021e58775eaf8e2dc7a91c903dc1c95dc18e829", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3360 | Contributors (this commit): 35 | Commits (past 90d): 10 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -361,7 +361,7 @@ class Flask(_PackageBoundObject):\n         #: A dictionary of all registered error handlers.  The key is `None`\n         #: for error handlers active on the application, otherwise the key is\n         #: the name of the blueprint.  Each key points to another dictionary\n-        #: where they key is the status code of the http exception.  The\n+        #: where the key is the status code of the http exception.  The\n         #: special key `None` points to a list of tuples where the first item\n         #: is the class for the instance check and the second the error handler\n         #: function.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5addabfbddbb0f620d81adc7bcafbf8bd5f12a3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1642 | Contributors (this commit): 28 | Commits (past 90d): 2 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -359,7 +359,7 @@ def flash(message, category='message'):\n     #     session.setdefault('_flashes', []).append((category, message))\n     #\n     # This assumed that changes made to mutable structures in the session are\n-    # are always in sync with the sess on object, which is not true for session\n+    # are always in sync with the session object, which is not true for session\n     # implementations that use external storage for keeping their keys/values.\n     flashes = session.get('_flashes', [])\n     flashes.append((category, message))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#70f8b39c52527573e65e7066024a187867564c01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): -5/1 | Churn Δ: 45 | Churn Cumulative: 5722 | Contributors (this commit): 37 | Commits (past 90d): 4 | Contributors (cumulative): 46 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -1544,7 +1544,8 @@ class Flask(_PackageBoundObject):\n         a WSGI function         the function is called as WSGI application\n                                 and buffered as response object\n         :class:`tuple`          A tuple in the form ``(response, status,\n-                                headers)`` where `response` is any of the\n+                                headers)`` or ``(response, headers)``\n+                                where `response` is any of the\n                                 types defined here, `status` is a string\n                                 or an integer and `headers` is a list or\n                                 a dictionary with header values.\n@@ -1556,34 +1557,38 @@ class Flask(_PackageBoundObject):\n            Previously a tuple was interpreted as the arguments for the\n            response object.\n         \"\"\"\n-        status = headers = None\n+        status_or_headers = headers = None\n         if isinstance(rv, tuple):\n-            rv, status, headers = rv + (None,) * (3 - len(rv))\n+            rv, status_or_headers, headers = rv + (None,) * (3 - len(rv))\n \n         if rv is None:\n             raise ValueError('View function did not return a response')\n \n+        if isinstance(status_or_headers, (dict, list)):\n+            headers, status_or_headers = status_or_headers, None\n+\n         if not isinstance(rv, self.response_class):\n             # When we create a response object directly, we let the constructor\n             # set the headers and status.  We do this because there can be\n             # some extra logic involved when creating these objects with\n             # specific values (like default content type selection).\n             if isinstance(rv, (text_type, bytes, bytearray)):\n-                rv = self.response_class(rv, headers=headers, status=status)\n-                headers = status = None\n+                rv = self.response_class(rv, headers=headers, status=status_or_headers)\n+                headers = status_or_headers = None\n             else:\n                 rv = self.response_class.force_type(rv, request.environ)\n \n-        if status is not None:\n-            if isinstance(status, string_types):\n-                rv.status = status\n+        if status_or_headers is not None:\n+            if isinstance(status_or_headers, string_types):\n+                rv.status = status_or_headers\n             else:\n-                rv.status_code = status\n+                rv.status_code = status_or_headers\n         if headers:\n             rv.headers.extend(headers)\n \n         return rv\n \n+\n     def create_url_adapter(self, request):\n         \"\"\"Creates a URL adapter for the given request.  The URL adapter\n         is created at a point where the request context is not yet set up\n\n@@ -736,6 +736,16 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 'X-Foo': 'Testing',\n                 'Content-Type': 'text/plain; charset=utf-8'\n             } \n+        @app.route(\"/two_args\")\n+        def from_two_args_tuple():\n+            return \"Hello\", {\n+                'X-Foo': 'Test',\n+                'Content-Type': 'text/plain; charset=utf-8'\n+            }\n+        @app.route(\"/args_status\")\n+        def from_status_tuple():\n+            return \"Hi, status!\", 400\n+\n         c = app.test_client()\n         self.assert_equal(c.get('/unicode').data, u'Hällo Wörld'.encode('utf-8'))\n         self.assert_equal(c.get('/string').data, u'Hällo Wörld'.encode('utf-8'))\n@@ -745,6 +755,18 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(rv.status_code, 400)\n         self.assert_equal(rv.mimetype, 'text/plain')\n \n+        rv2 = c.get(\"/two_args\")\n+        self.assert_equal(rv2.data, b'Hello')\n+        self.assert_equal(rv2.headers['X-Foo'], 'Test')\n+        self.assert_equal(rv2.status_code, 200)\n+        self.assert_equal(rv2.mimetype, 'text/plain')\n+\n+        rv3 = c.get(\"/args_status\")\n+        self.assert_equal(rv3.data, b'Hi, status!')\n+        self.assert_equal(rv3.status_code, 400)\n+        self.assert_equal(rv3.mimetype, 'text/html')\n+\n+\n     def test_make_response(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dbc40961913381ecf1513fa2467aefeef6d4d41b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 26 | Churn Cumulative: 2365 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -736,15 +736,21 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 'X-Foo': 'Testing',\n                 'Content-Type': 'text/plain; charset=utf-8'\n             } \n-        @app.route(\"/two_args\")\n+        @app.route('/two_args')\n         def from_two_args_tuple():\n-            return \"Hello\", {\n+            return 'Hello', {\n                 'X-Foo': 'Test',\n                 'Content-Type': 'text/plain; charset=utf-8'\n             }\n-        @app.route(\"/args_status\")\n+        @app.route('/args_status')\n         def from_status_tuple():\n-            return \"Hi, status!\", 400\n+            return 'Hi, status!', 400\n+        @app.route('/args_header')\n+        def from_response_instance_status_tuple():\n+            return flask.Response('Hello world', 404), {\n+                \"X-Foo\": \"Bar\",\n+                \"X-Bar\": \"Foo\"\n+            }\n \n         c = app.test_client()\n         self.assert_equal(c.get('/unicode').data, u'Hällo Wörld'.encode('utf-8'))\n@@ -754,18 +760,20 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(rv.headers['X-Foo'], 'Testing')\n         self.assert_equal(rv.status_code, 400)\n         self.assert_equal(rv.mimetype, 'text/plain')\n-\n-        rv2 = c.get(\"/two_args\")\n+        rv2 = c.get('/two_args')\n         self.assert_equal(rv2.data, b'Hello')\n         self.assert_equal(rv2.headers['X-Foo'], 'Test')\n         self.assert_equal(rv2.status_code, 200)\n         self.assert_equal(rv2.mimetype, 'text/plain')\n-\n-        rv3 = c.get(\"/args_status\")\n+        rv3 = c.get('/args_status')\n         self.assert_equal(rv3.data, b'Hi, status!')\n         self.assert_equal(rv3.status_code, 400)\n         self.assert_equal(rv3.mimetype, 'text/html')\n-\n+        rv4 = c.get('/args_header')\n+        self.assert_equal(rv4.data, b'Hello world')\n+        self.assert_equal(rv4.headers['X-Foo'], 'Bar')\n+        self.assert_equal(rv4.headers['X-Bar'], 'Foo')\n+        self.assert_equal(rv4.status_code, 404)\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#52098e1e4fc4d9c962e9ecb09dfbbcc6ac80a4d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 45 | Files Changed: 45 | Hunks: 45 | Methods Changed: 0 | Complexity Δ (Sum/Max): -29/0 | Churn Δ: 90 | Churn Cumulative: 19262 | Contributors (this commit): 88 | Commits (past 90d): 55 | Contributors (cumulative): 287 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@\n     A microblog example application written as Flask tutorial with\n     Flask and sqlite3.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the Flaskr application.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import os\n\n@@ -5,7 +5,7 @@\n \n     A simple application that shows how Flask and jQuery get along.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from flask import Flask, jsonify, render_template, request\n\n@@ -5,7 +5,7 @@\n \n     A microblogging application written with Flask and sqlite3.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the MiniTwit application.\n \n-    :copyright: (c) 2010 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import os\n\n@@ -6,7 +6,7 @@\n     A microframework based on Werkzeug.  It's extensively documented\n     and follows best practice patterns.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -7,7 +7,7 @@\n     version of six so we don't have to depend on a specific version\n     of it.\n \n-    :copyright: (c) 2013 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import sys\n\n@@ -5,7 +5,7 @@\n \n     This module implements the central WSGI application object.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Blueprints are the recommended way to implement larger or more\n     pluggable applications in Flask 0.7 and later.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from functools import update_wrapper\n\n@@ -5,7 +5,7 @@\n \n     Implements the configuration related objects.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the objects required to keep the context.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Various helpers to make the development experience better.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+1   :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from ._compat import implements_to_string\n\n@@ -14,7 +14,7 @@\n     We're switching from namespace packages because it was just too painful for\n     everybody involved.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -16,7 +16,7 @@\n \n     This is used by `flask.ext`.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import sys\n\n@@ -6,7 +6,7 @@\n     Defines all the global objects that are proxies to the current\n     active context.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements various helpers.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implementation helpers for the JSON support in Flask.\n \n-    :copyright: (c) 2012 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import io\n\n@@ -5,7 +5,7 @@\n \n     Implements the logging support for Flask.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements a class that represents module blueprints.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements cookie based sessions based on itsdangerous.\n \n-    :copyright: (c) 2012 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Implements signals based on blinker if available, otherwise\n     falls silently back to a noop\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n signals_available = False\n\n@@ -5,7 +5,7 @@\n \n     Implements the bridge to Jinja2.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import posixpath\n\n@@ -6,7 +6,7 @@\n     Implements test support helpers.  This module is lazily imported\n     and usually not used in production environments.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Tests Flask itself.  The majority of Flask is already tested\n     as part of Werkzeug.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the application context.\n \n-    :copyright: (c) 2012 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     The basic functionality.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Blueprints (and currently modules)\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Configuration and instances.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests deprecation support.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the examples.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import os\n\n@@ -5,7 +5,7 @@\n \n     Tests the extension import thing.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Various helpers.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests regressions.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the request context.\n \n-    :copyright: (c) 2012 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Signalling.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Test that certain behavior of flask can be customized by\n     subclasses.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import flask\n\n@@ -5,7 +5,7 @@\n \n     Template functionality\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Test client and more.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Pluggable views.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     This module provides class-based views inspired by the ones in Django.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from .globals import request\n\n@@ -5,7 +5,7 @@\n \n     Implements the WSGI wrappers (request and response).\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -16,7 +16,7 @@\n     the most common patterns at least.  The diff it generates should be\n     hand reviewed and not applied blindly without making backups.\n \n-    :copyright: (c) Copyright 2011 by Armin Ronacher.\n+    :copyright: (c) Copyright 2014 by Armin Ronacher.\n     :license: see LICENSE for more details.\n \"\"\"\n import re\n\n@@ -12,7 +12,7 @@\n         flaskext_compat.activate()\n         from flask.ext import foo\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import sys\n\n@@ -5,7 +5,7 @@\n \n     Tests the Flask extensions.\n \n-    :copyright: (c) 2010 by Ali Afshar.\n+    :copyright: (c) 2014 by Ali Afshar.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -7,7 +7,7 @@\n     Helper script that performs a release.  Does pretty much everything\n     automatically for us.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import sys\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
