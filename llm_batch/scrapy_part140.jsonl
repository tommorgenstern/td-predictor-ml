{"custom_id": "scrapy#3b2458dbbbfdb3aeb038b3f37575a24128f6f8e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 131 | Lines Deleted: 177 | Files Changed: 1 | Hunks: 45 | Methods Changed: 20 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 308 | Churn Cumulative: 1072 | Contributors (this commit): 7 | Commits (past 90d): 11 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -206,153 +206,130 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(r3.body, 'colours=red&colours=blue&colours=green&price=%C2%A3+100')\n \n     def test_from_response_post(self):\n-        respbody = \"\"\"\n-<form action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"test\" value=\"val1\">\n             <input type=\"hidden\" name=\"test\" value=\"val2\">\n             <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'one': ['two', 'three'], 'six': 'seven'}, callback=lambda x: x)\n-        self.assertEqual(r1.method, 'POST')\n-        self.assertEqual(r1.headers['Content-type'], 'application/x-www-form-urlencoded')\n-        fs = cgi.FieldStorage(StringIO(r1.body), r1.headers, environ={\"REQUEST_METHOD\": \"POST\"})\n-        self.assertEqual(r1.url, \"http://www.example.com/this/post.php\")\n-        self.assertEqual(set([f.value for f in fs[\"test\"]]), set([\"val1\", \"val2\"]))\n-        self.assertEqual(set([f.value for f in fs[\"one\"]]), set([\"two\", \"three\"]))\n-        self.assertEqual(fs['test2'].value, 'xxx')\n-        self.assertEqual(fs['six'].value, 'seven')\n+            </form>\"\"\",\n+            url=\"http://www.example.com/this/list.html\")\n+        req = self.request_class.from_response(response,\n+                formdata={'one': ['two', 'three'], 'six': 'seven'})\n+        self.assertEqual(req.method, 'POST')\n+        self.assertEqual(req.headers['Content-type'], 'application/x-www-form-urlencoded')\n+        self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n+        fs = _qs(req)\n+        self.assertEqual(set(fs[\"test\"]), set([\"val1\", \"val2\"]))\n+        self.assertEqual(set(fs[\"one\"]), set([\"two\", \"three\"]))\n+        self.assertEqual(fs['test2'], ['xxx'])\n+        self.assertEqual(fs['six'], ['seven'])\n \n     def test_from_response_extra_headers(self):\n-        respbody = \"\"\"\n-<form action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"test\" value=\"val1\">\n             <input type=\"hidden\" name=\"test\" value=\"val2\">\n             <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n-</form>\n-        \"\"\"\n-        headers = {\"Accept-Encoding\": \"gzip,deflate\"}\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'one': ['two', 'three'], 'six': 'seven'}, headers=headers, callback=lambda x: x)\n-        self.assertEqual(r1.method, 'POST')\n-        self.assertEqual(r1.headers['Content-type'], 'application/x-www-form-urlencoded')\n-        self.assertEqual(r1.headers['Accept-Encoding'], 'gzip,deflate')\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response,\n+                formdata={'one': ['two', 'three'], 'six': 'seven'},\n+                headers={\"Accept-Encoding\": \"gzip,deflate\"})\n+        self.assertEqual(req.method, 'POST')\n+        self.assertEqual(req.headers['Content-type'], 'application/x-www-form-urlencoded')\n+        self.assertEqual(req.headers['Accept-Encoding'], 'gzip,deflate')\n \n     def test_from_response_get(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"hidden\" name=\"test\" value=\"val1\">\n             <input type=\"hidden\" name=\"test\" value=\"val2\">\n             <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'one': ['two', 'three'], 'six': 'seven'})\n+            </form>\"\"\",\n+            url=\"http://www.example.com/this/list.html\")\n+        r1 = self.request_class.from_response(response,\n+                formdata={'one': ['two', 'three'], 'six': 'seven'})\n         self.assertEqual(r1.method, 'GET')\n         self.assertEqual(urlparse(r1.url).hostname, \"www.example.com\")\n         self.assertEqual(urlparse(r1.url).path, \"/this/get.php\")\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(set(urlargs['test']), set(['val1', 'val2']))\n-        self.assertEqual(set(urlargs['one']), set(['two', 'three']))\n-        self.assertEqual(urlargs['test2'], ['xxx'])\n-        self.assertEqual(urlargs['six'], ['seven'])\n+        fs = _qs(r1)\n+        self.assertEqual(set(fs['test']), set(['val1', 'val2']))\n+        self.assertEqual(set(fs['one']), set(['two', 'three']))\n+        self.assertEqual(fs['test2'], ['xxx'])\n+        self.assertEqual(fs['six'], ['seven'])\n \n     def test_from_response_override_params(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"3\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'two': '2'})\n-        fs = cgi.FieldStorage(StringIO(r1.body), r1.headers, environ={\"REQUEST_METHOD\": \"POST\"})\n-        self.assertEqual(fs['one'].value, '1')\n-        self.assertEqual(fs['two'].value, '2')\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, formdata={'two': '2'})\n+        fs = _qs(req)\n+        self.assertEqual(fs['one'], ['1'])\n+        self.assertEqual(fs['two'], ['2'])\n \n     def test_from_response_submit_first_clickable(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"3\">\n             <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'two': '2'})\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickable1'], ['clicked1'])\n-        self.assertFalse('clickable2' in urlargs, urlargs)\n-        self.assertEqual(urlargs['one'], ['1'])\n-        self.assertEqual(urlargs['two'], ['2'])\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, formdata={'two': '2'})\n+        fs = _qs(req)\n+        self.assertEqual(fs['clickable1'], ['clicked1'])\n+        self.assertFalse('clickable2' in fs, fs)\n+        self.assertEqual(fs['one'], ['1'])\n+        self.assertEqual(fs['two'], ['2'])\n \n     def test_from_response_submit_not_first_clickable(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"3\">\n             <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'two': '2'}, clickdata={'name': 'clickable2'})\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickable2'], ['clicked2'])\n-        self.assertFalse('clickable1' in urlargs, urlargs)\n-        self.assertEqual(urlargs['one'], ['1'])\n-        self.assertEqual(urlargs['two'], ['2'])\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, formdata={'two': '2'}, \\\n+                                              clickdata={'name': 'clickable2'})\n+        fs = _qs(req)\n+        self.assertEqual(fs['clickable2'], ['clicked2'])\n+        self.assertFalse('clickable1' in fs, fs)\n+        self.assertEqual(fs['one'], ['1'])\n+        self.assertEqual(fs['two'], ['2'])\n \n     def test_from_response_multiple_clickdata(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n             <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n             <input type=\"hidden\" name=\"one\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"two\" value=\"clicked2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, \\\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, \\\n                 clickdata={'name': 'clickable', 'value': 'clicked2'})\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickable'], ['clicked2'])\n-        self.assertEqual(urlargs['one'], ['clicked1'])\n-        self.assertEqual(urlargs['two'], ['clicked2'])\n+        fs = _qs(req)\n+        self.assertEqual(fs['clickable'], ['clicked2'])\n+        self.assertEqual(fs['one'], ['clicked1'])\n+        self.assertEqual(fs['two'], ['clicked2'])\n \n     def test_from_response_unicode_clickdata(self):\n-        body = u\"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            u\"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n             <input type=\"submit\" name=\"price in \\u20ac\" value=\"\\u20ac 2000\">\n             <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n             <input type=\"hidden\" name=\"eurosign\" value=\"\\u20ac\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com\", body=body, \\\n-                                encoding='utf-8')\n-        r1 = self.request_class.from_response(response, \\\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, \\\n                 clickdata={'name': u'price in \\u00a3'})\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertTrue(urlargs[u'price in \\u00a3'.encode('utf-8')])\n-\n-    def test_from_response_with_select(self):\n-        body = u\"\"\"\n-        <form name=\"form1\">\n-          <select name=\"inputname\"><option selected=\"selected\" value=\"inputvalue\">text</option></select>\n-          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n-        </form>\n-        \"\"\"\n-        res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n-        req = self.request_class.from_response(res)\n-        urlargs = cgi.parse_qs(urlparse(req.url).query)\n-        self.assertEqual(urlargs['inputname'], ['inputvalue'])\n+        fs = _qs(req)\n+        self.assertTrue(fs[u'price in \\u00a3'.encode('utf-8')])\n \n     def test_from_response_multiple_forms_clickdata(self):\n-        body = u\"\"\"\n-        <form name=\"form1\">\n+        response = _buildresponse(\n+            \"\"\"<form name=\"form1\">\n             <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"field1\" value=\"value1\">\n             </form>\n@@ -360,141 +337,117 @@ class FormRequestTest(RequestTest):\n             <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n             <input type=\"hidden\" name=\"field2\" value=\"value2\">\n             </form>\n-        \"\"\"\n-        res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n-        req = self.request_class.from_response(res, formname='form2', \\\n+            \"\"\")\n+        req = self.request_class.from_response(response, formname='form2', \\\n                 clickdata={'name': 'clickable'})\n-        urlargs = cgi.parse_qs(urlparse(req.url).query)\n-        self.assertEqual(urlargs['clickable'], ['clicked2'])\n-        self.assertEqual(urlargs['field2'], ['value2'])\n-        self.assertFalse('field1' in urlargs, urlargs)\n+        fs = _qs(req)\n+        self.assertEqual(fs['clickable'], ['clicked2'])\n+        self.assertEqual(fs['field2'], ['value2'])\n+        self.assertFalse('field1' in fs, fs)\n \n     def test_from_response_override_clickable(self):\n-        body = u'<form><input type=\"submit\" name=\"clickme\" value=\"one\"></form>'\n-        res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n-        req = self.request_class.from_response(res, \\\n-                                               formdata={'clickme': 'two'}, \\\n-                                               clickdata={'name': 'clickme'})\n-        urlargs = cgi.parse_qs(urlparse(req.url).query)\n-        self.assertEqual(urlargs['clickme'], ['two'])\n+        response = _buildresponse('''<form><input type=\"submit\" name=\"clickme\" value=\"one\"> </form>''')\n+        req = self.request_class.from_response(response, \\\n+                formdata={'clickme': 'two'}, clickdata={'name': 'clickme'})\n+        fs = _qs(req)\n+        self.assertEqual(fs['clickme'], ['two'])\n \n     def test_from_response_dont_click(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"3\">\n             <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n+            </form>\"\"\")\n         r1 = self.request_class.from_response(response, dont_click=True)\n-        urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertFalse('clickable1' in urlargs, urlargs)\n-        self.assertFalse('clickable2' in urlargs, urlargs)\n+        fs = _qs(r1)\n+        self.assertFalse('clickable1' in fs, fs)\n+        self.assertFalse('clickable2' in fs, fs)\n \n     def test_from_response_ambiguous_clickdata(self):\n-        respbody = \"\"\"\n+        response = _buildresponse(\n+            \"\"\"\n             <form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"3\">\n             <input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        self.assertRaises(ValueError,\n-                          self.request_class.from_response,\n-                          response,\n-                          clickdata={'type': 'submit'})\n+            </form>\"\"\")\n+        self.assertRaises(ValueError, self.request_class.from_response,\n+                          response, clickdata={'type': 'submit'})\n \n     def test_from_response_non_matching_clickdata(self):\n-        body = \"\"\"\n-        <form>\n+        response = _buildresponse(\n+            \"\"\"<form>\n             <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n-        </form>\n-        \"\"\"\n-        res = HtmlResponse(\"http://example.com\", body=body)\n-        self.assertRaises(ValueError,\n-                          self.request_class.from_response, res,\n-                                clickdata={'nonexistent': 'notme'})\n+            </form>\"\"\")\n+        self.assertRaises(ValueError, self.request_class.from_response,\n+                          response, clickdata={'nonexistent': 'notme'})\n \n     def test_from_response_errors_noform(self):\n-        respbody = \"\"\"<html></html>\"\"\"\n-        response = HtmlResponse(\"http://www.example.com/lala.html\", body=respbody)\n+        response = _buildresponse(\"\"\"<html></html>\"\"\")\n         self.assertRaises(ValueError, self.request_class.from_response, response)\n \n     def test_from_response_errors_formnumber(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"GET\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"hidden\" name=\"test\" value=\"val1\">\n             <input type=\"hidden\" name=\"test\" value=\"val2\">\n             <input type=\"hidden\" name=\"test2\" value=\"xxx\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/lala.html\", body=respbody)\n+            </form>\"\"\")\n         self.assertRaises(IndexError, self.request_class.from_response, response, formnumber=1)\n \n     def test_from_response_noformname(self):\n-        respbody = \"\"\"\n-<form action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'two':'3'}, callback=lambda x: x)\n+            </form>\"\"\")\n+        r1 = self.request_class.from_response(response, formdata={'two':'3'})\n         self.assertEqual(r1.method, 'POST')\n         self.assertEqual(r1.headers['Content-type'], 'application/x-www-form-urlencoded')\n-        fs = cgi.FieldStorage(StringIO(r1.body), r1.headers, environ={\"REQUEST_METHOD\": \"POST\"})\n-        self.assertEqual(fs['one'].value, '1')\n-        self.assertEqual(fs['two'].value, '3')\n-\n+        fs = _qs(r1)\n+        self.assertEqual(fs, {'one': ['1'], 'two': ['3']})\n \n     def test_from_response_formname_exists(self):\n-        respbody = \"\"\"\n-<form action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             <input type=\"hidden\" name=\"two\" value=\"2\">\n             </form>\n             <form name=\"form2\" action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"three\" value=\"3\">\n             <input type=\"hidden\" name=\"four\" value=\"4\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formname=\"form2\", callback=lambda x: x)\n+            </form>\"\"\")\n+        r1 = self.request_class.from_response(response, formname=\"form2\")\n         self.assertEqual(r1.method, 'POST')\n-        fs = cgi.FieldStorage(StringIO(r1.body), r1.headers, environ={\"REQUEST_METHOD\": \"POST\"})\n-        self.assertEqual(fs['three'].value, \"3\")\n-        self.assertEqual(fs['four'].value, \"4\")\n+        fs = _qs(r1)\n+        self.assertEqual(fs, {'four': ['4'], 'three': ['3']})\n \n     def test_from_response_formname_notexist(self):\n-        respbody = \"\"\"\n-<form name=\"form1\" action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             </form>\n             <form name=\"form2\" action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"two\" value=\"2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formname=\"form3\", callback=lambda x: x)\n+            </form>\"\"\")\n+        r1 = self.request_class.from_response(response, formname=\"form3\")\n         self.assertEqual(r1.method, 'POST')\n-        fs = cgi.FieldStorage(StringIO(r1.body), r1.headers, environ={\"REQUEST_METHOD\": \"POST\"})\n-        self.assertEqual(fs['one'].value, \"1\")\n+        fs = _qs(r1)\n+        self.assertEqual(fs, {'one': ['1']})\n \n     def test_from_response_formname_errors_formnumber(self):\n-        respbody = \"\"\"\n-<form name=\"form1\" action=\"post.php\" method=\"POST\">\n+        response = _buildresponse(\n+            \"\"\"<form name=\"form1\" action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"one\" value=\"1\">\n             </form>\n             <form name=\"form2\" action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"two\" value=\"2\">\n-</form>\n-        \"\"\"\n-        response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n-        self.assertRaises(IndexError, self.request_class.from_response, response, formname=\"form3\", formnumber=2)\n+            </form>\"\"\")\n+        self.assertRaises(IndexError, self.request_class.from_response, \\\n+                          response, formname=\"form3\", formnumber=2)\n \n     def test_from_response_select(self):\n         res = _buildresponse(\n@@ -613,6 +566,7 @@ def _qs(req):\n         qs = req.url.partition('?')[2]\n     return cgi.parse_qs(qs, True)\n \n+\n class XmlRpcRequestTest(RequestTest):\n \n     request_class = XmlRpcRequest\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#72485128cb29751b3b03f6a04e73e4cc50912910", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 1094 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -553,6 +553,28 @@ class FormRequestTest(RequestTest):\n         fs = _qs(req)\n         self.assertEqual(fs, {'i1': ['i1v'], 'i2': [''], 'i3': ['']})\n \n+    def test_from_response_descendants(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <div>\n+              <fieldset>\n+                <input type=\"text\" name=\"i1\">\n+                <select name=\"i2\">\n+                    <option value=\"v1\" selected>\n+                </select>\n+              </fieldset>\n+              <input type=\"radio\" name=\"i3\" value=\"i3v2\" checked>\n+              <input type=\"checkbox\" name=\"i4\" value=\"i4v2\" checked>\n+              <textarea name=\"i5\"></textarea>\n+              <input type=\"hidden\" name=\"h1\" value=\"h1v\">\n+              </div>\n+            <input type=\"hidden\" name=\"h2\" value=\"h2v\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(set(fs), set(['h2', 'i2', 'i1', 'i3', 'h1', 'i5', 'i4']))\n+\n+\n def _buildresponse(body, **kwargs):\n     kwargs.setdefault('body', body)\n     kwargs.setdefault('url', 'http://example.com')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#db99ae3958b084b2e21a70ddcf2cb041765cf1a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1100 | Contributors (this commit): 7 | Commits (past 90d): 13 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -489,6 +489,8 @@ class FormRequestTest(RequestTest):\n             <input type=\"radio\" name=\"i2\">\n             <input type=\"radio\" name=\"i3\" value=\"i3v1\">\n             <input type=\"radio\" name=\"i3\">\n+            <input type=\"radio\" value=\"i4v1\">\n+            <input type=\"radio\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n@@ -503,6 +505,8 @@ class FormRequestTest(RequestTest):\n             <input type=\"checkbox\" name=\"i2\">\n             <input type=\"checkbox\" name=\"i3\" value=\"i3v1\">\n             <input type=\"checkbox\" name=\"i3\">\n+            <input type=\"checkbox\" value=\"i4v1\">\n+            <input type=\"checkbox\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n@@ -513,6 +517,7 @@ class FormRequestTest(RequestTest):\n             '''<form>\n             <input type=\"text\" name=\"i1\" value=\"i1v1\">\n             <input type=\"text\" name=\"i2\">\n+            <input type=\"text\" value=\"i3v1\">\n             <input type=\"text\">\n             </form>''')\n         req = self.request_class.from_response(res)\n@@ -524,6 +529,7 @@ class FormRequestTest(RequestTest):\n             '''<form>\n             <input type=\"hidden\" name=\"i1\" value=\"i1v1\">\n             <input type=\"hidden\" name=\"i2\">\n+            <input type=\"hidden\" value=\"i3v1\">\n             <input type=\"hidden\">\n             </form>''')\n         req = self.request_class.from_response(res)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7865fbf05a03e3177a7481bfa13521eae8829784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 763 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -9,11 +9,11 @@ import time\n import hashlib\n import urlparse\n import rfc822\n-import Image\n from cStringIO import StringIO\n from collections import defaultdict\n \n from twisted.internet import defer, threads\n+from PIL import Image\n \n from scrapy.xlib.pydispatch import dispatcher\n from scrapy import log\n\n@@ -7,7 +7,7 @@ from twisted.trial import unittest\n \n \n try:\n-    import Image\n+    from PIL import Image\n     skip = False\n except ImportError, e:\n     skip = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5b9a7814a5861a0cb0b2359cd8ebab6cf144e57a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 230 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,7 +13,7 @@ from twisted.web import http\n from twisted.web.http import RESPONSES\n from w3lib import html\n \n-from scrapy.http import Response, HtmlResponse\n+from scrapy.http import Response, HtmlResponse, TextResponse\n \n def body_or_str(obj, unicode=True):\n     assert isinstance(obj, (Response, basestring)), \\\n@@ -76,13 +76,17 @@ def open_in_browser(response, _openfunc=webbrowser.open):\n     tag for external links to work\n     \"\"\"\n     # XXX: this implementation is a bit dirty and could be improved\n-    if not isinstance(response, HtmlResponse):\n-        raise TypeError(\"Unsupported response type: %s\" % \\\n-            response.__class__.__name__)\n     body = response.body\n+    if isinstance(response, HtmlResponse):\n         if '<base' not in body:\n             body = body.replace('<head>', '<head><base href=\"%s\">' % response.url)\n-    fd, fname = tempfile.mkstemp('.html')\n+        ext = '.html'\n+    elif isinstance(response, TextResponse):\n+        ext = '.txt'\n+    else:\n+        raise TypeError(\"Unsupported response type: %s\" % \\\n+            response.__class__.__name__)\n+    fd, fname = tempfile.mkstemp(ext)\n     os.write(fd, body)\n     os.close(fd)\n     return _openfunc(\"file://%s\" % fname)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8cae228df19851cc9243c2165806063675a5dc68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 1704 | Contributors (this commit): 7 | Commits (past 90d): 33 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -76,7 +76,7 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n \n     inputs = form.xpath('descendant::textarea'\n                         '|descendant::select'\n-                        '|descendant::input[@type!=\"submit\" '\n+                        '|descendant::input[@type!=\"submit\" and @type!=\"image\" '\n                         'and ((@type!=\"checkbox\" and @type!=\"radio\") or @checked)]')\n     values = [(k, u'' if v is None else v) \\\n               for k, v in (_value(e) for e in inputs) \\\n\n@@ -299,6 +299,17 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(fs['one'], ['1'])\n         self.assertEqual(fs['two'], ['2'])\n \n+    def test_from_response_dont_submit_image_as_input(self):\n+        response = _buildresponse(\n+            \"\"\"<form>\n+            <input type=\"hidden\" name=\"i1\" value=\"i1v\">\n+            <input type=\"image\" name=\"i2\" src=\"http://my.image.org/1.jpg\">\n+            <input type=\"submit\" name=\"i3\" value=\"i3v\">\n+            </form>\"\"\")\n+        req = self.request_class.from_response(response, dont_click=True)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['i1v']})\n+\n     def test_from_response_multiple_clickdata(self):\n         response = _buildresponse(\n             \"\"\"<form action=\"get.php\" method=\"GET\">\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9d66d7cdf99a9143808ec8448279ad4aba039e99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 49 | Churn Cumulative: 679 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,7 +6,7 @@ See documentation in docs/topics/request-response.rst\n \"\"\"\n \n from w3lib.encoding import html_to_unicode, resolve_encoding, \\\n-    html_body_declared_encoding, http_content_type_encoding, to_unicode\n+    html_body_declared_encoding, http_content_type_encoding\n from scrapy.http.response import Response\n from scrapy.utils.python import memoizemethod_noargs\n from scrapy.conf import settings\n@@ -55,8 +55,12 @@ class TextResponse(Response):\n \n     def body_as_unicode(self):\n         \"\"\"Return body as unicode\"\"\"\n+        # check for self.encoding before _cached_ubody just in\n+        # _body_inferred_encoding is called\n+        benc = self.encoding\n         if self._cached_ubody is None:\n-            self._cached_ubody = to_unicode(self.body, self.encoding)\n+            charset = 'charset=%s' % benc\n+            self._cached_ubody = html_to_unicode(charset, self.body)[1]\n         return self._cached_ubody\n \n     @memoizemethod_noargs\n\n@@ -188,19 +188,52 @@ class TextResponseTest(BaseResponseTest):\n \n     def test_declared_encoding_invalid(self):\n         \"\"\"Check that unknown declared encodings are ignored\"\"\"\n-        r = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=UKNOWN\"]}, body=\"\\xc2\\xa3\")\n+        r = self.response_class(\"http://www.example.com\",\n+                                headers={\"Content-type\": [\"text/html; charset=UKNOWN\"]},\n+                                body=\"\\xc2\\xa3\")\n         self.assertEqual(r._declared_encoding(), None)\n         self._assert_response_values(r, 'utf-8', u\"\\xa3\")\n \n     def test_utf16(self):\n         \"\"\"Test utf-16 because UnicodeDammit is known to have problems with\"\"\"\n-        r = self.response_class(\"http://www.example.com\", body='\\xff\\xfeh\\x00i\\x00', encoding='utf-16')\n+        r = self.response_class(\"http://www.example.com\",\n+                                body='\\xff\\xfeh\\x00i\\x00',\n+                                encoding='utf-16')\n         self._assert_response_values(r, 'utf-16', u\"hi\")\n \n     def test_invalid_utf8_encoded_body_with_valid_utf8_BOM(self):\n-        r6 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=utf-8\"]}, body=\"\\xef\\xbb\\xbfWORD\\xe3\\xab\")\n+        r6 = self.response_class(\"http://www.example.com\",\n+                                 headers={\"Content-type\": [\"text/html; charset=utf-8\"]},\n+                                 body=\"\\xef\\xbb\\xbfWORD\\xe3\\xab\")\n         self.assertEqual(r6.encoding, 'utf-8')\n-        self.assertEqual(r6.body_as_unicode(), u'\\ufeffWORD\\ufffd\\ufffd')\n+        self.assertEqual(r6.body_as_unicode(), u'WORD\\ufffd\\ufffd')\n+\n+    def test_bom_is_removed_from_body(self):\n+        # Inferring encoding from body also cache decoded body as sideeffect,\n+        # this test tries to ensure that calling response.encoding and\n+        # response.body_as_unicode() in indistint order doesn't affect final\n+        # values for encoding and decoded body.\n+        url = 'http://example.com'\n+        body = \"\\xef\\xbb\\xbfWORD\"\n+        headers = {\"Content-type\": [\"text/html; charset=utf-8\"]}\n+\n+        # Test response without content-type and BOM encoding\n+        response = self.response_class(url, body=body)\n+        self.assertEqual(response.encoding, 'utf-8')\n+        self.assertEqual(response.body_as_unicode(), u'WORD')\n+        response = self.response_class(url, body=body)\n+        self.assertEqual(response.body_as_unicode(), u'WORD')\n+        self.assertEqual(response.encoding, 'utf-8')\n+\n+        # Body caching sideeffect isn't triggered when encoding is declared in\n+        # content-type header but BOM still need to be removed from decoded\n+        # body\n+        response = self.response_class(url, headers=headers, body=body)\n+        self.assertEqual(response.encoding, 'utf-8')\n+        self.assertEqual(response.body_as_unicode(), u'WORD')\n+        response = self.response_class(url, headers=headers, body=body)\n+        self.assertEqual(response.body_as_unicode(), u'WORD')\n+        self.assertEqual(response.encoding, 'utf-8')\n \n     def test_replace_wrong_encoding(self):\n         \"\"\"Test invalid chars are replaced properly\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#abcac4fcbda3a9e913857a046900fe3d50d4a44e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 98 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,7 +42,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Scrapy'\n-copyright = u'2008-2011, Insophia'\n+copyright = u'2008-2012, Scrapinghub'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -173,7 +173,7 @@ htmlhelp_basename = 'Scrapydoc'\n # (source start file, target name, title, author, document class [howto/manual]).\n latex_documents = [\n   ('index', 'Scrapy.tex', ur'Scrapy Documentation',\n-   ur'Insophia', 'manual'),\n+   ur'Scrapinghub', 'manual'),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n\n@@ -1,4 +1,4 @@\n-import sys, os, glob\n+import sys, os, glob, shutil\n from subprocess import check_call\n \n def build(suffix):\n@@ -21,8 +21,11 @@ def build(suffix):\n     check_call('debuild -us -uc -b', shell=True)\n \n def clean(suffix):\n-    for f in glob.glob(\"debian/scrapy-%s.*\" % suffix) + \\\n-            glob.glob(\"debian/scrapyd-%s.*\" % suffix):\n+    for f in glob.glob(\"debian/python-scrapy%s*\" % suffix) + \\\n+            glob.glob(\"debian/scrapyd%s*\" % suffix):\n+        if os.path.isdir(f):\n+            shutil.rmtree(f)\n+        else:\n             os.remove(f)\n \n def main():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9c3b9f29687c78b56825abcc78f4faa326a90e0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 209 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,7 +19,6 @@ from scrapy.utils.jsonrpc import jsonrpc_client_call, JsonRpcError\n def get_commands():\n     return {\n         'help': cmd_help,\n-        'run': cmd_run,\n         'stop': cmd_stop,\n         'list-available': cmd_list_available,\n         'list-running': cmd_list_running,\n@@ -34,10 +33,6 @@ def cmd_help(args, opts):\n     for _, func in sorted(get_commands().items()):\n         print \"  \", func.__doc__\n \n-def cmd_run(args, opts):\n-    \"\"\"run <spider_name> - schedule spider for running\"\"\"\n-    jsonrpc_call(opts, 'crawler/queue', 'append_spider_name', args[0])\n-\n def cmd_stop(args, opts):\n     \"\"\"stop <spider> - stop a running spider\"\"\"\n     jsonrpc_call(opts, 'crawler/engine', 'close_spider', args[0])\n\n@@ -44,7 +44,7 @@ class JsonRpcResource(JsonResource):\n         target = self.get_target()\n         try:\n             newtarget = getattr(target, name)\n-            return JsonRpcResource(newtarget)\n+            return JsonRpcResource(self.crawler, newtarget)\n         except AttributeError:\n             return error.NoResource(\"No such child resource.\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#72b1c2e88b4bb9cbe7385baecd554fe7feeff93a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 716 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -60,12 +60,15 @@ class UrlUtilsTest(unittest.TestCase):\n \n     def test_canonicalize_url(self):\n         # simplest case\n-        self.assertEqual(canonicalize_url(\"http://www.example.com\"),\n-                                          \"http://www.example.com\")\n+        self.assertEqual(canonicalize_url(\"http://www.example.com/\"),\n+                                          \"http://www.example.com/\")\n \n         # always return a str\n         assert isinstance(canonicalize_url(u\"http://www.example.com\"), str)\n \n+        # append missing path\n+        self.assertEqual(canonicalize_url(\"http://www.example.com\"),\n+                                          \"http://www.example.com/\")\n         # typical usage\n         self.assertEqual(canonicalize_url(\"http://www.example.com/do?a=1&b=2&c=3\"),\n                                           \"http://www.example.com/do?a=1&b=2&c=3\")\n@@ -145,8 +148,8 @@ class UrlUtilsTest(unittest.TestCase):\n                                            'http://www.example.com/caf%E9-con-leche.htm')\n \n         # domains are case insensitive\n-        self.assertEqual(canonicalize_url(\"http://www.EXAMPLE.com\"),\n-                                          \"http://www.example.com\")\n+        self.assertEqual(canonicalize_url(\"http://www.EXAMPLE.com/\"),\n+                                          \"http://www.example.com/\")\n \n \n if __name__ == \"__main__\":\n\n@@ -52,7 +52,7 @@ def canonicalize_url(url, keep_blank_values=True, keep_fragments=False, \\\n     keyvals = cgi.parse_qsl(query, keep_blank_values)\n     keyvals.sort()\n     query = urllib.urlencode(keyvals)\n-    path = safe_url_string(urllib.unquote(path))\n+    path = safe_url_string(urllib.unquote(path)) or '/'\n     fragment = '' if not keep_fragments else fragment\n     return urlparse.urlunparse((scheme, netloc.lower(), path, params, query, fragment))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2b93b0a93c914ab4994989d74eb33d45f22ea50e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 647 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -309,5 +309,6 @@ class ImagesPipeline(MediaPipeline):\n         return [Request(x) for x in item.get('image_urls', [])]\n \n     def item_completed(self, results, item, info):\n+        if 'images' in item.fields:\n             item['images'] = [x for ok, x in results if ok]\n         return item\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#045ff8e5a7cbd5949f089af0fa613809ef8ef552", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 575 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,7 +59,7 @@ class XPathSelector(object_ref):\n     def extract(self):\n         try:\n             return etree.tostring(self._root, method=self._tostring_method, \\\n-                encoding=unicode)\n+                encoding=unicode, with_tail=False)\n         except (AttributeError, TypeError):\n             if self._root is True:\n                 return u'1'\n\n@@ -43,6 +43,7 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n                          [u'12'])\n \n+    @libxml2debug\n     def test_selector_unicode_query(self):\n         body = u\"<p><input name='\\xa9' value='1'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body, encoding='utf8')\n@@ -271,7 +272,6 @@ class XPathSelectorTestCase(unittest.TestCase):\n \n     @libxml2debug\n     def test_select_on_text_nodes(self):\n-        # FIXME: can't get this to work with lxml backend\n         r = self.hxs_cls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n         x1 = r.select(\"//div/descendant::text()[preceding-sibling::b[contains(text(), 'Options')]]\")\n         self.assertEquals(x1.extract(), [u'opt1'])\n@@ -279,10 +279,15 @@ class XPathSelectorTestCase(unittest.TestCase):\n         x1 = r.select(\"//div/descendant::text()/preceding-sibling::b[contains(text(), 'Options')]\")\n         self.assertEquals(x1.extract(), [u'<b>Options:</b>'])\n \n+    @libxml2debug\n+    def test_nested_select_on_text_nodes(self):\n+        # FIXME: does not work with lxml backend [upstream]\n+        r = self.hxs_cls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n         x1 = r.select(\"//div/descendant::text()\")\n         x2 = x1.select(\"./preceding-sibling::b[contains(text(), 'Options')]\")\n+\n         self.assertEquals(x2.extract(), [u'<b>Options:</b>'])\n-    test_select_on_text_nodes.skip = True\n+    test_nested_select_on_text_nodes.skip = True\n \n     @libxml2debug\n     def test_weakref_slots(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#58e88ed2466b02312fbb1bfa5333a9ba765efcf0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 13 | Churn Cumulative: 151 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,7 +28,9 @@ class Environment(object):\n         env['SCRAPY_JOB'] = message['_job']\n         if project in self.settings:\n             env['SCRAPY_SETTINGS_MODULE'] = self.settings[project]\n+        if self.logs_dir:\n             env['SCRAPY_LOG_FILE'] = self._get_file(message, self.logs_dir, 'log')\n+        if self.items_dir:\n             env['SCRAPY_FEED_URI'] = self._get_file(message, self.items_dir, 'jl')\n         return env\n \n\n@@ -32,3 +32,14 @@ class EnvironmentTest(unittest.TestCase):\n         self.assert_(env['SCRAPY_LOG_FILE'].endswith(os.path.join('mybot', 'myspider', 'ID.log')))\n         self.assert_(env['SCRAPY_FEED_URI'].endswith(os.path.join('mybot', 'myspider', 'ID.jl')))\n         self.failIf('SCRAPY_SETTINGS_MODULE' in env)\n+\n+    def test_get_environment_with_no_items_dir(self):\n+        config = Config(values={'items_dir': '', 'logs_dir': ''})\n+        config.cp.add_section('settings')\n+        config.cp.set('settings', 'newbot', 'newbot.settings')\n+        msg = {'_project': 'mybot', '_spider': 'myspider', '_job': 'ID'}\n+        slot = 3\n+        environ = Environment(config, initenv={})\n+        env = environ.get_environment(msg, slot)\n+        self.failUnless('SCRAPY_FEED_URI' not in env)\n+        self.failUnless('SCRAPY_LOG_FILE' not in env)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d74a067227f7340872b5adfbaf12c572a5a2b232", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 198 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -120,6 +120,6 @@ try:\n except ImportError:\n     from distutils.core import setup\n else:\n-    setup_args['install_requires'] = ['Twisted>=8.0', 'w3lib>=1.1', 'lxml', 'pyOpenSSL']\n+    setup_args['install_requires'] = ['Twisted>=8.0', 'w3lib>=1.2', 'lxml', 'pyOpenSSL']\n  \n setup(**setup_args)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b53bc66c76ef38e77c39da54f3668cc9b1c601b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 38 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,7 +21,16 @@ class Command(ScrapyCommand):\n \n     def run(self, args, opts):\n         if opts.verbose:\n+            try:\n+                import lxml.etree2\n+            except ImportError:\n+                lxml_version = libxml2_version = \"(lxml not available)\"\n+            else:\n+                lxml_version = \".\".join(map(str, lxml.etree.LXML_VERSION))\n+                libxml2_version = \".\".join(map(str, lxml.etree.LIBXML_VERSION))\n             print \"Scrapy  : %s\" % scrapy.__version__\n+            print \"lxml    : %s\" % lxml_version\n+            print \"libxml2 : %s\" % libxml2_version\n             print \"Twisted : %s\" % twisted.version.short()\n             print \"Python  : %s\" % sys.version.replace(\"\\n\", \"- \")\n             print \"Platform: %s\" % platform.platform()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
