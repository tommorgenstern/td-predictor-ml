{"custom_id": "fastapi#6d9fc08a7e6bcb9f78e677ba6992ef0f1a17ccb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 51 | Contributors (this commit): 1 | Commits (past 90d): 21 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.18\"\n+__version__ = \"0.1.19\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#32438c85f6e5c411cdafef58af277135bfe3c7df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 59 | Churn Cumulative: 237 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 0.23076923076923078\n\nDIFF:\n@@ -12,12 +12,20 @@ def jsonable_encoder(\n     exclude: Set[str] = set(),\n     by_alias: bool = False,\n     include_none: bool = True,\n+    custom_encoder: dict = {},\n ) -> Any:\n     if isinstance(obj, BaseModel):\n+        if not obj.Config.json_encoders:\n             return jsonable_encoder(\n                 obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n                 include_none=include_none,\n             )\n+        else:\n+            return jsonable_encoder(\n+                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n+                include_none=include_none,\n+                custom_encoder=obj.Config.json_encoders,\n+            )\n     if isinstance(obj, Enum):\n         return obj.value\n     if isinstance(obj, (str, int, float, type(None))):\n@@ -25,8 +33,16 @@ def jsonable_encoder(\n     if isinstance(obj, dict):\n         return {\n             jsonable_encoder(\n-                key, by_alias=by_alias, include_none=include_none\n-            ): jsonable_encoder(value, by_alias=by_alias, include_none=include_none)\n+                key,\n+                by_alias=by_alias,\n+                include_none=include_none,\n+                custom_encoder=custom_encoder,\n+            ): jsonable_encoder(\n+                value,\n+                by_alias=by_alias,\n+                include_none=include_none,\n+                custom_encoder=custom_encoder,\n+            )\n             for key, value in obj.items()\n             if value is not None or include_none\n         }\n@@ -38,11 +54,15 @@ def jsonable_encoder(\n                 exclude=exclude,\n                 by_alias=by_alias,\n                 include_none=include_none,\n+                custom_encoder=custom_encoder,\n             )\n             for item in obj\n         ]\n     errors = []\n     try:\n+        if custom_encoder and type(obj) in custom_encoder:\n+            encoder = custom_encoder[type(obj)]\n+        else:\n             encoder = ENCODERS_BY_TYPE[type(obj)]\n         return encoder(obj)\n     except KeyError as e:\n\n@@ -0,0 +1,35 @@\n+import json\n+from datetime import datetime, timezone\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+\n+class ModelWithDatetimeField(BaseModel):\n+    dt_field: datetime\n+\n+    class Config:\n+        json_encoders = {\n+            datetime: lambda dt: dt.replace(\n+                microsecond=0, tzinfo=timezone.utc\n+            ).isoformat()\n+        }\n+\n+\n+app = FastAPI()\n+model = ModelWithDatetimeField(dt_field=datetime.utcnow())\n+\n+\n+@app.get(\"/model\", response_model=ModelWithDatetimeField)\n+def get_model():\n+    return model\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_dt():\n+    with client:\n+        response = client.get(\"/model\")\n+    assert json.loads(model.json()) == response.json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#92c825be6a7362099400c9c3fe8b01ea13add3dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 53 | Contributors (this commit): 1 | Commits (past 90d): 22 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.19\"\n+__version__ = \"0.2.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9745a5d1ae86a7fefacf79bdde8e5dd2d59fa2f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 10 | Files Changed: 3 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 51 | Churn Cumulative: 303 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,16 +15,11 @@ def jsonable_encoder(\n     custom_encoder: dict = {},\n ) -> Any:\n     if isinstance(obj, BaseModel):\n-        if not obj.Config.json_encoders:\n+        encoder = getattr(obj.Config, \"json_encoders\", custom_encoder)\n         return jsonable_encoder(\n             obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n             include_none=include_none,\n-            )\n-        else:\n-            return jsonable_encoder(\n-                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n-                include_none=include_none,\n-                custom_encoder=obj.Config.json_encoders,\n+            custom_encoder=encoder,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n\n@@ -1,4 +1,3 @@\n-import json\n from datetime import datetime, timezone\n \n from fastapi import FastAPI\n@@ -18,7 +17,7 @@ class ModelWithDatetimeField(BaseModel):\n \n \n app = FastAPI()\n-model = ModelWithDatetimeField(dt_field=datetime.utcnow())\n+model = ModelWithDatetimeField(dt_field=datetime(2019, 1, 1, 8))\n \n \n @app.get(\"/model\", response_model=ModelWithDatetimeField)\n@@ -32,4 +31,4 @@ client = TestClient(app)\n def test_dt():\n     with client:\n         response = client.get(\"/model\")\n-    assert json.loads(model.json()) == response.json()\n+    assert response.json() == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n\n@@ -1,5 +1,9 @@\n+from datetime import datetime, timezone\n+from enum import Enum\n+\n import pytest\n from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n \n \n class Person:\n@@ -32,6 +36,29 @@ class Unserializable:\n         raise NotImplementedError()\n \n \n+class ModelWithCustomEncoder(BaseModel):\n+    dt_field: datetime\n+\n+    class Config:\n+        json_encoders = {\n+            datetime: lambda dt: dt.replace(\n+                microsecond=0, tzinfo=timezone.utc\n+            ).isoformat()\n+        }\n+\n+\n+class RoleEnum(Enum):\n+    admin = \"admin\"\n+    normal = \"normal\"\n+\n+\n+class ModelWithConfig(BaseModel):\n+    role: RoleEnum = None\n+\n+    class Config:\n+        use_enum_values = True\n+\n+\n def test_encode_class():\n     person = Person(name=\"Foo\")\n     pet = Pet(owner=person, name=\"Firulais\")\n@@ -48,3 +75,13 @@ def test_encode_unsupported():\n     unserializable = Unserializable()\n     with pytest.raises(ValueError):\n         jsonable_encoder(unserializable)\n+\n+\n+def test_encode_custom_json_encoders_model():\n+    model = ModelWithCustomEncoder(dt_field=datetime(2019, 1, 1, 8))\n+    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n+\n+\n+def test_encode_model_with_config():\n+    model = ModelWithConfig(role=RoleEnum.admin)\n+    assert jsonable_encoder(model) == {\"role\": \"admin\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9484f939ed9c27022352e295ea053310fc343a8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 55 | Contributors (this commit): 1 | Commits (past 90d): 23 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.2.0\"\n+__version__ = \"0.2.1\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#955e9fcb3198e1f34c562fc240591df783ae1725", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 141 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 16 | Methods Changed: 7 | Complexity Δ (Sum/Max): 11/6 | Churn Δ: 159 | Churn Cumulative: 370 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 5 | DMM Complexity: 0.3611111111111111\n\nDIFF:\n@@ -1,13 +1,15 @@\n from fastapi import FastAPI\n-\n from sqlalchemy import Boolean, Column, Integer, String, create_engine\n from sqlalchemy.ext.declarative import declarative_base, declared_attr\n from sqlalchemy.orm import scoped_session, sessionmaker\n \n # SQLAlchemy specific code, as with any other app\n-SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n+SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n+# SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n \n-engine = create_engine(SQLALCHEMY_DATABASE_URI, convert_unicode=True)\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n+)\n db_session = scoped_session(\n     sessionmaker(autocommit=False, autoflush=False, bind=engine)\n )\n@@ -30,15 +32,25 @@ class User(Base):\n     is_active = Column(Boolean(), default=True)\n \n \n-def get_user(username, db_session):\n-    return db_session.query(User).filter(User.id == username).first()\n+Base.metadata.create_all(bind=engine)\n+\n+first_user = db_session.query(User).first()\n+if not first_user:\n+    u = User(email=\"johndoe@example.com\", hashed_password=\"notreallyhashed\")\n+    db_session.add(u)\n+    db_session.commit()\n+\n+\n+# Utility\n+def get_user(db_session, user_id: int):\n+    return db_session.query(User).filter(User.id == user_id).first()\n \n \n # FastAPI specific code\n app = FastAPI()\n \n \n-@app.get(\"/users/{username}\")\n-def read_user(username: str):\n-    user = get_user(username, db_session)\n+@app.get(\"/users/{user_id}\")\n+def read_user(user_id: int):\n+    user = get_user(db_session, user_id=user_id)\n     return user\n\n@@ -13,6 +13,7 @@ def jsonable_encoder(\n     by_alias: bool = False,\n     include_none: bool = True,\n     custom_encoder: dict = {},\n+    sqlalchemy_safe: bool = True,\n ) -> Any:\n     if isinstance(obj, BaseModel):\n         encoder = getattr(obj.Config, \"json_encoders\", custom_encoder)\n@@ -20,29 +21,44 @@ def jsonable_encoder(\n             obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n             include_none=include_none,\n             custom_encoder=encoder,\n+            sqlalchemy_safe=sqlalchemy_safe,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n     if isinstance(obj, (str, int, float, type(None))):\n         return obj\n     if isinstance(obj, dict):\n-        return {\n-            jsonable_encoder(\n+        encoded_dict = {}\n+        for key, value in obj.items():\n+            if (\n+                (\n+                    not sqlalchemy_safe\n+                    or (not isinstance(key, str))\n+                    or (not key.startswith(\"_sa\"))\n+                )\n+                and (value is not None or include_none)\n+                and ((include and key in include) or key not in exclude)\n+            ):\n+                encoded_key = jsonable_encoder(\n                     key,\n                     by_alias=by_alias,\n                     include_none=include_none,\n                     custom_encoder=custom_encoder,\n-            ): jsonable_encoder(\n+                    sqlalchemy_safe=sqlalchemy_safe,\n+                )\n+                encoded_value = jsonable_encoder(\n                     value,\n                     by_alias=by_alias,\n                     include_none=include_none,\n                     custom_encoder=custom_encoder,\n+                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n-            for key, value in obj.items()\n-            if value is not None or include_none\n-        }\n+                encoded_dict[encoded_key] = encoded_value\n+        return encoded_dict\n     if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):\n-        return [\n+        encoded_list = []\n+        for item in obj:\n+            encoded_list.append(\n                 jsonable_encoder(\n                     item,\n                     include=include,\n@@ -50,9 +66,10 @@ def jsonable_encoder(\n                     by_alias=by_alias,\n                     include_none=include_none,\n                     custom_encoder=custom_encoder,\n+                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n-            for item in obj\n-        ]\n+            )\n+        return encoded_list\n     errors = []\n     try:\n         if custom_encoder and type(obj) in custom_encoder:\n@@ -71,4 +88,10 @@ def jsonable_encoder(\n             except Exception as e:\n                 errors.append(e)\n                 raise ValueError(errors)\n-    return jsonable_encoder(data, by_alias=by_alias, include_none=include_none)\n+    return jsonable_encoder(\n+        data,\n+        by_alias=by_alias,\n+        include_none=include_none,\n+        custom_encoder=custom_encoder,\n+        sqlalchemy_safe=sqlalchemy_safe,\n+    )\n\n\n@@ -0,0 +1,88 @@\n+from starlette.testclient import TestClient\n+\n+from sql_databases.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User Get\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_first_user():\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"is_active\": True,\n+        \"hashed_password\": \"notreallyhashed\",\n+        \"email\": \"johndoe@example.com\",\n+        \"id\": 1,\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7863490c8c5eb22bf61341abfb4f941113ec1f5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 57 | Contributors (this commit): 1 | Commits (past 90d): 24 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.2.1\"\n+__version__ = \"0.3.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0ea0d0e82af64980c17e15da1e85155e28a6be1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 95 | Lines Deleted: 4 | Files Changed: 5 | Hunks: 9 | Methods Changed: 11 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 99 | Churn Cumulative: 2111 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 7 | DMM Complexity: 0.8846153846153846\n\nDIFF:\n@@ -0,0 +1,19 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/app\")\n+def read_main():\n+    return {\"message\": \"Hello World from main app\"}\n+\n+\n+subapi = FastAPI(openapi_prefix=\"/subapi\")\n+\n+\n+@subapi.get(\"/sub\")\n+def read_sub():\n+    return {\"message\": \"Hello World from sub API\"}\n+\n+\n+app.mount(\"/subapi\", subapi)\n\n@@ -25,6 +25,7 @@ class FastAPI(Starlette):\n         description: str = \"\",\n         version: str = \"0.1.0\",\n         openapi_url: Optional[str] = \"/openapi.json\",\n+        openapi_prefix: str = \"\",\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n         **extra: Dict[str, Any],\n@@ -43,6 +44,7 @@ class FastAPI(Starlette):\n         self.description = description\n         self.version = version\n         self.openapi_url = openapi_url\n+        self.openapi_prefix = openapi_prefix.rstrip(\"/\")\n         self.docs_url = docs_url\n         self.redoc_url = redoc_url\n         self.extra = extra\n@@ -66,6 +68,7 @@ class FastAPI(Starlette):\n                 openapi_version=self.openapi_version,\n                 description=self.description,\n                 routes=self.routes,\n+                openapi_prefix=self.openapi_prefix,\n             )\n         return self.openapi_schema\n \n@@ -80,7 +83,8 @@ class FastAPI(Starlette):\n             self.add_route(\n                 self.docs_url,\n                 lambda r: get_swagger_ui_html(\n-                    openapi_url=self.openapi_url, title=self.title + \" - Swagger UI\"\n+                    openapi_url=self.openapi_prefix + self.openapi_url,\n+                    title=self.title + \" - Swagger UI\",\n                 ),\n                 include_in_schema=False,\n             )\n@@ -88,7 +92,8 @@ class FastAPI(Starlette):\n             self.add_route(\n                 self.redoc_url,\n                 lambda r: get_redoc_html(\n-                    openapi_url=self.openapi_url, title=self.title + \" - ReDoc\"\n+                    openapi_url=self.openapi_prefix + self.openapi_url,\n+                    title=self.title + \" - ReDoc\",\n                 ),\n                 include_in_schema=False,\n             )\n\n@@ -215,7 +215,8 @@ def get_openapi(\n     version: str,\n     openapi_version: str = \"3.0.2\",\n     description: str = None,\n-    routes: Sequence[BaseRoute]\n+    routes: Sequence[BaseRoute],\n+    openapi_prefix: str = \"\"\n ) -> Dict:\n     info = {\"title\": title, \"version\": version}\n     if description:\n@@ -234,7 +235,7 @@ def get_openapi(\n             if result:\n                 path, security_schemes, path_definitions = result\n                 if path:\n-                    paths.setdefault(route.path, {}).update(path)\n+                    paths.setdefault(openapi_prefix + route.path, {}).update(path)\n                 if security_schemes:\n                     components.setdefault(\"securitySchemes\", {}).update(\n                         security_schemes\n\n\n@@ -0,0 +1,66 @@\n+from starlette.testclient import TestClient\n+\n+from sub_applications.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema_main = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/app\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Main Get\",\n+                \"operationId\": \"read_main_app_get\",\n+            }\n+        }\n+    },\n+}\n+openapi_schema_sub = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/subapi/sub\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Sub Get\",\n+                \"operationId\": \"read_sub_sub_get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema_main():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema_main\n+\n+\n+def test_main():\n+    response = client.get(\"/app\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World from main app\"}\n+\n+\n+def test_openapi_schema_sub():\n+    response = client.get(\"/subapi/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema_sub\n+\n+\n+def test_sub():\n+    response = client.get(\"/subapi/sub\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World from sub API\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#acbcbba94f444e714fac8a522d7190904d6e3544", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 59 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.3.0\"\n+__version__ = \"0.4.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#54e3949f7455ecfb91e094fd989dcc2f31190ae4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 23 | Churn Cumulative: 51 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,8 @@\n from fastapi import FastAPI\n from sqlalchemy import Boolean, Column, Integer, String, create_engine\n from sqlalchemy.ext.declarative import declarative_base, declared_attr\n-from sqlalchemy.orm import scoped_session, sessionmaker\n+from sqlalchemy.orm import sessionmaker\n+from starlette.requests import Request\n \n # SQLAlchemy specific code, as with any other app\n SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n@@ -10,9 +11,7 @@ SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n engine = create_engine(\n     SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n )\n-db_session = scoped_session(\n-    sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-)\n+Session = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n \n \n class CustomBase:\n@@ -34,12 +33,16 @@ class User(Base):\n \n Base.metadata.create_all(bind=engine)\n \n+db_session = Session()\n+\n first_user = db_session.query(User).first()\n if not first_user:\n     u = User(email=\"johndoe@example.com\", hashed_password=\"notreallyhashed\")\n     db_session.add(u)\n     db_session.commit()\n \n+db_session.close()\n+\n \n # Utility\n def get_user(db_session, user_id: int):\n@@ -51,6 +54,14 @@ app = FastAPI()\n \n \n @app.get(\"/users/{user_id}\")\n-def read_user(user_id: int):\n-    user = get_user(db_session, user_id=user_id)\n+def read_user(request: Request, user_id: int):\n+    user = get_user(request._scope[\"db\"], user_id=user_id)\n     return user\n+\n+\n+@app.middleware(\"http\")\n+async def close_db(request, call_next):\n+    request._scope[\"db\"] = Session()\n+    response = await call_next(request)\n+    request._scope[\"db\"].close()\n+    return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#febf8e734148ab94e7ea1808c7873f8ffe2133d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 10 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI\n+from starlette.requests import Request\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def read_root(item_id: str, request: Request):\n+    client_host = request.client.host\n+    return {\"client_host\": client_host, \"item_id\": item_id}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8772e2f2eea8bafdb24f7506bda693dddac3fc2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 382 | Lines Deleted: 4 | Files Changed: 11 | Hunks: 12 | Methods Changed: 16 | Complexity Δ (Sum/Max): 21/9 | Churn Δ: 386 | Churn Cumulative: 1899 | Contributors (this commit): 2 | Commits (past 90d): 54 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+items = {\"foo\": \"The Foo Wrestlers\"}\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def create_item(item_id: str):\n+    if item_id not in items:\n+        raise HTTPException(status_code=404, detail=\"Item not found\")\n+    return {\"item\": items[item_id]}\n\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+items = {\"foo\": \"The Foo Wrestlers\"}\n+\n+\n+@app.get(\"/items-header/{item_id}\")\n+async def create_item_header(item_id: str):\n+    if item_id not in items:\n+        raise HTTPException(\n+            status_code=404,\n+            detail=\"Item not found\",\n+            headers={\"X-Error\": \"There goes my error\"},\n+        )\n+    return {\"item\": items[item_id]}\n\n@@ -1,7 +1,6 @@\n-from fastapi import Depends, FastAPI, Security\n+from fastapi import Depends, FastAPI, HTTPException, Security\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from pydantic import BaseModel\n-from starlette.exceptions import HTTPException\n \n fake_users_db = {\n     \"johndoe\": {\n\n@@ -1,12 +1,11 @@\n from datetime import datetime, timedelta\n \n import jwt\n-from fastapi import Depends, FastAPI, Security\n+from fastapi import Depends, FastAPI, Security, HTTPException\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from jwt import PyJWTError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n-from starlette.exceptions import HTTPException\n from starlette.status import HTTP_403_FORBIDDEN\n \n # to get a string like this run:\n\n@@ -5,3 +5,4 @@ __version__ = \"0.4.0\"\n from .applications import FastAPI\n from .routing import APIRouter\n from .params import Body, Path, Query, Header, Cookie, Form, File, Security, Depends\n+from .exceptions import HTTPException\n\n@@ -13,6 +13,12 @@ from starlette.responses import JSONResponse, Response\n \n \n async def http_exception(request: Request, exc: HTTPException) -> JSONResponse:\n+    headers = getattr(exc, \"headers\", None)\n+    if headers:\n+        return JSONResponse(\n+            {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n+        )\n+    else:\n         return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n \n \n\n@@ -0,0 +1,9 @@\n+from starlette.exceptions import HTTPException as StarletteHTTPException\n+\n+\n+class HTTPException(StarletteHTTPException):\n+    def __init__(\n+        self, status_code: int, detail: str = None, headers: dict = None\n+    ) -> None:\n+        super().__init__(status_code=status_code, detail=detail)\n+        self.headers = headers\n\n@@ -0,0 +1,156 @@\n+from fastapi import FastAPI, HTTPException\n+from starlette.exceptions import HTTPException as StarletteHTTPException\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+items = {\"foo\": \"The Foo Wrestlers\"}\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def create_item(item_id: str):\n+    if item_id not in items:\n+        raise HTTPException(\n+            status_code=404,\n+            detail=\"Item not found\",\n+            headers={\"X-Error\": \"Some custom header\"},\n+        )\n+    return {\"item\": items[item_id]}\n+\n+\n+@app.get(\"/starlette-items/{item_id}\")\n+async def create_item(item_id: str):\n+    if item_id not in items:\n+        raise StarletteHTTPException(status_code=404, detail=\"Item not found\")\n+    return {\"item\": items[item_id]}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item Get\",\n+                \"operationId\": \"create_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/starlette-items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item Get\",\n+                \"operationId\": \"create_item_starlette-items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_item():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404\n+    assert response.headers.get(\"x-error\") == \"Some custom header\"\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_get_starlette_item():\n+    response = client.get(\"/starlette-items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_starlette_item_not_found():\n+    response = client.get(\"/starlette-items/bar\")\n+    assert response.status_code == 404\n+    assert response.headers.get(\"x-error\") is None\n+    assert response.json() == {\"detail\": \"Item not found\"}\n\n\n@@ -0,0 +1,90 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item Get\",\n+                \"operationId\": \"create_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_item():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found():\n+    response = client.get(\"/items/bar\")\n+    assert response.status_code == 404\n+    assert response.headers.get(\"x-error\") is None\n+    assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -0,0 +1,90 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items-header/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item Header Get\",\n+                \"operationId\": \"create_item_header_items-header__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_item_header():\n+    response = client.get(\"/items-header/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n+\n+\n+def test_get_item_not_found_header():\n+    response = client.get(\"/items-header/bar\")\n+    assert response.status_code == 404\n+    assert response.headers.get(\"x-error\") == \"There goes my error\"\n+    assert response.json() == {\"detail\": \"Item not found\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#894e131e03ede4a68a037a62d9ea77c82f4fce3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 62 | Contributors (this commit): 1 | Commits (past 90d): 27 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.4.0\"\n+__version__ = \"0.5.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a809da55676276b7c47c0796af5da2165a49a2ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 15 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,10 +1,13 @@\n-from uuid import UUID\n-\n from fastapi import FastAPI\n \n app = FastAPI()\n \n \n-@app.get(\"/items/{item_id}\")\n-async def read_item(item_id: UUID):\n-    return {\"item_id\": item_id}\n+@app.get(\"/users/me\")\n+async def read_user_me():\n+    return {\"user_id\": \"the current user\"}\n+\n+\n+@app.get(\"/users/{user_id}\")\n+async def read_user(user_id: str):\n+    return {\"user_id\": user_id}\n\n@@ -1,7 +1,7 @@\n from datetime import datetime, timedelta\n \n import jwt\n-from fastapi import Depends, FastAPI, Security, HTTPException\n+from fastapi import Depends, FastAPI, HTTPException, Security\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from jwt import PyJWTError\n from passlib.context import CryptContext\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aa64eecda67b892704e3eb22ce20e0ed87ee61b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 15 | Churn Cumulative: 15 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI\n+from starlette.exceptions import HTTPException\n+from starlette.responses import PlainTextResponse\n+\n+app = FastAPI()\n+\n+\n+@app.exception_handler(HTTPException)\n+async def http_exception(request, exc):\n+    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n+\n+\n+@app.get(\"/\")\n+async def root():\n+    return {\"message\": \"Hello World\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#88b31e6a4d74cd326bd5037fba32ce564ff2a59f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 64 | Contributors (this commit): 1 | Commits (past 90d): 28 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.5.0\"\n+__version__ = \"0.5.1\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ba10838c30be508d745b4636b9038529b9c3b322", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1400 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,9 +7,9 @@ from pydantic import BaseModel\n from starlette.applications import Starlette\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n from starlette.middleware.errors import ServerErrorMiddleware\n-from starlette.middleware.lifespan import LifespanMiddleware\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n+from starlette.routing import BaseRoute\n \n \n async def http_exception(request: Request, exc: HTTPException) -> JSONResponse:\n@@ -26,6 +26,7 @@ class FastAPI(Starlette):\n     def __init__(\n         self,\n         debug: bool = False,\n+        routes: List[BaseRoute] = None,\n         template_directory: str = None,\n         title: str = \"Fast API\",\n         description: str = \"\",\n@@ -37,14 +38,11 @@ class FastAPI(Starlette):\n         **extra: Dict[str, Any],\n     ) -> None:\n         self._debug = debug\n-        self.router: routing.APIRouter = routing.APIRouter()\n+        self.router: routing.APIRouter = routing.APIRouter(routes)\n         self.exception_middleware = ExceptionMiddleware(self.router, debug=debug)\n         self.error_middleware = ServerErrorMiddleware(\n             self.exception_middleware, debug=debug\n         )\n-        self.lifespan_middleware = LifespanMiddleware(self.error_middleware)\n-        self.schema_generator = None\n-        self.template_env = self.load_template_env(template_directory)\n \n         self.title = title\n         self.description = description\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
