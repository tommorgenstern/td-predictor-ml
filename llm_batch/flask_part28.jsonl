{"custom_id": "flask#b9907b496911d0d8676225151a36c28fe4f4b72f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 49 | Churn Cumulative: 1437 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -321,22 +321,61 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         @app.route('/test')\n         def test():\n+            messages = flask.get_flashed_messages()\n+            self.assert_equal(len(messages), 3)\n+            self.assert_equal(messages[0], u'Hello World')\n+            self.assert_equal(messages[1], u'Hello World')\n+            self.assert_equal(messages[2], flask.Markup(u'<em>Testing</em>'))\n+            return ''\n+\n+        @app.route('/test_with_categories')\n+        def test_with_categories():\n             messages = flask.get_flashed_messages(with_categories=True)\n             self.assert_equal(len(messages), 3)\n             self.assert_equal(messages[0], ('message', u'Hello World'))\n             self.assert_equal(messages[1], ('error', u'Hello World'))\n             self.assert_equal(messages[2], ('warning', flask.Markup(u'<em>Testing</em>')))\n             return ''\n-            messages = flask.get_flashed_messages()\n-            self.assert_equal(len(messages), 3)\n+\n+        @app.route('/test_filter')\n+        def test_filter():\n+            messages = flask.get_flashed_messages(category_filter=['message'], with_categories=True)\n+            self.assert_equal(len(messages), 1)\n+            self.assert_equal(messages[0], ('message', u'Hello World'))\n+            return ''\n+\n+        @app.route('/test_filters')\n+        def test_filters():\n+            messages = flask.get_flashed_messages(category_filter=['message', 'warning'], with_categories=True)\n+            self.assert_equal(len(messages), 2)\n+            self.assert_equal(messages[0], ('message', u'Hello World'))\n+            self.assert_equal(messages[1], ('warning', flask.Markup(u'<em>Testing</em>')))\n+            return ''\n+\n+        @app.route('/test_filters_without_returning_categories')\n+        def test_filters():\n+            messages = flask.get_flashed_messages(category_filter=['message', 'warning'])\n+            self.assert_equal(len(messages), 2)\n             self.assert_equal(messages[0], u'Hello World')\n-            self.assert_equal(messages[1], u'Hello World')\n-            self.assert_equal(messages[2], flask.Markup(u'<em>Testing</em>'))\n+            self.assert_equal(messages[1], flask.Markup(u'<em>Testing</em>'))\n+            return ''\n \n         c = app.test_client()\n-        c.get('/')\n+        c.get('/') # Flash some messages.\n         c.get('/test')\n \n+        c.get('/') # Flash more messages.\n+        c.get('/test_with_categories')\n+\n+        c.get('/') # Flash more messages.\n+        c.get('/test_filter')\n+\n+        c.get('/') # Flash more messages.\n+        c.get('/test_filters')\n+\n+        c.get('/') # Flash more messages.\n+        c.get('/test_filters_without_returning_categories')\n+\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#676b3a4c13986f5743b8e6f3fa4d7c6cc2a401a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 11 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 1479 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -319,7 +319,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.flash(flask.Markup(u'<em>Testing</em>'), 'warning')\n             return ''\n \n-        @app.route('/test')\n+        @app.route('/test/')\n         def test():\n             messages = flask.get_flashed_messages()\n             self.assert_equal(len(messages), 3)\n@@ -328,7 +328,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(messages[2], flask.Markup(u'<em>Testing</em>'))\n             return ''\n \n-        @app.route('/test_with_categories')\n+        @app.route('/test_with_categories/')\n         def test_with_categories():\n             messages = flask.get_flashed_messages(with_categories=True)\n             self.assert_equal(len(messages), 3)\n@@ -337,14 +337,14 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(messages[2], ('warning', flask.Markup(u'<em>Testing</em>')))\n             return ''\n \n-        @app.route('/test_filter')\n+        @app.route('/test_filter/')\n         def test_filter():\n             messages = flask.get_flashed_messages(category_filter=['message'], with_categories=True)\n             self.assert_equal(len(messages), 1)\n             self.assert_equal(messages[0], ('message', u'Hello World'))\n             return ''\n \n-        @app.route('/test_filters')\n+        @app.route('/test_filters/')\n         def test_filters():\n             messages = flask.get_flashed_messages(category_filter=['message', 'warning'], with_categories=True)\n             self.assert_equal(len(messages), 2)\n@@ -352,7 +352,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(messages[1], ('warning', flask.Markup(u'<em>Testing</em>')))\n             return ''\n \n-        @app.route('/test_filters_without_returning_categories')\n+        @app.route('/test_filters_without_returning_categories/')\n         def test_filters():\n             messages = flask.get_flashed_messages(category_filter=['message', 'warning'])\n             self.assert_equal(len(messages), 2)\n@@ -360,21 +360,33 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(messages[1], flask.Markup(u'<em>Testing</em>'))\n             return ''\n \n+        # Note: if status code assertions are missing, failed tests still pass.\n+        #\n+        # Since app.test_client() does not set debug=True, the AssertionErrors\n+        # in the view functions are swallowed and the only indicator is a 500\n+        # status code.\n+        #\n+        # Also, create new test client on each test to clean flashed messages.\n+\n         c = app.test_client()\n-        c.get('/') # Flash some messages.\n-        c.get('/test')\n+        c.get('/')\n+        assert c.get('/test/').status_code == 200\n \n-        c.get('/') # Flash more messages.\n-        c.get('/test_with_categories')\n+        c = app.test_client()\n+        c.get('/')\n+        assert c.get('/test_with_categories/').status_code == 200\n \n-        c.get('/') # Flash more messages.\n-        c.get('/test_filter')\n+        c = app.test_client()\n+        c.get('/')\n+        assert c.get('/test_filter/').status_code == 200\n \n-        c.get('/') # Flash more messages.\n-        c.get('/test_filters')\n+        c = app.test_client()\n+        c.get('/')\n+        assert c.get('/test_filters/').status_code == 200\n \n-        c.get('/') # Flash more messages.\n-        c.get('/test_filters_without_returning_categories')\n+        c = app.test_client()\n+        c.get('/')\n+        assert c.get('/test_filters_without_returning_categories/').status_code == 200\n \n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fa069f94dec3aeec4a81a00e7bbd8d95e400bf5f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 1040 | Contributors (this commit): 13 | Commits (past 90d): 16 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -264,7 +264,7 @@ def flash(message, category='message'):\n     session.setdefault('_flashes', []).append((category, message))\n \n \n-def get_flashed_messages(with_categories=False):\n+def get_flashed_messages(with_categories=False, category_filter=[]):\n     \"\"\"Pulls all flashed messages from the session and returns them.\n     Further calls in the same request to the function will return\n     the same messages.  By default just the messages are returned,\n@@ -282,12 +282,18 @@ def get_flashed_messages(with_categories=False):\n     .. versionchanged:: 0.3\n        `with_categories` parameter added.\n \n+    .. versionchanged: 0.9\n+        `category_filter` parameter added.\n+\n     :param with_categories: set to `True` to also receive categories.\n+    :param category_filter: whitelist of categories to limit return values\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n         _request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n             if '_flashes' in session else []\n+    if category_filter:\n+        flashes = filter(lambda f: f[0] in category_filter, flashes)\n     if not with_categories:\n         return [x[1] for x in flashes]\n     return flashes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#81010bf7afb786d3a19ddc2469f9bfdcc9e0d194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 31 | Churn Cumulative: 1071 | Contributors (this commit): 13 | Commits (past 90d): 5 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -251,7 +251,7 @@ def flash(message, category='message'):\n     flashed message from the session and to display it to the user,\n     the template has to call :func:`get_flashed_messages`.\n \n-    .. versionchanged: 0.3\n+    .. versionchanged:: 0.3\n        `category` parameter added.\n \n     :param message: the message to be flashed.\n@@ -271,6 +271,16 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n     but when `with_categories` is set to `True`, the return value will\n     be a list of tuples in the form ``(category, message)`` instead.\n \n+    Filter the flashed messages to one or more categories by providing those\n+    categories in `category_filter`.  This allows rendering categories in\n+    separate html blocks.  The `with_categories` and `category_filter`\n+    arguments are distinct:\n+\n+    * `with_categories` controls whether categories are returned with message\n+      text (`True` gives a tuple, where `False` gives just the message text).\n+    * `category_filter` filters the messages down to only those matching the\n+      provided categories.\n+\n     Example usage:\n \n     .. sourcecode:: html+jinja\n@@ -279,10 +289,27 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n           <p class=flash-{{ category }}>{{ msg }}\n         {% endfor %}\n \n+    Example usage similar to http://twitter.github.com/bootstrap/#alerts:\n+\n+    .. sourcecode:: html+jinja\n+\n+        {% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n+        {% if errors %}\n+        <div class=\"alert-message block-message error\">\n+          <a class=\"close\" href=\"#\">×</a>\n+          <ul>\n+            {%- for msg in errors %}\n+            <li>{{ msg }}</li>\n+            {% endfor -%}\n+          </ul>\n+        </div>\n+        {% endif %}\n+        {% endwith %}\n+\n     .. versionchanged:: 0.3\n        `with_categories` parameter added.\n \n-    .. versionchanged: 0.9\n+    .. versionchanged:: 0.9\n         `category_filter` parameter added.\n \n     :param with_categories: set to `True` to also receive categories.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c93ea5551c6928745414f186ef465e2699a6833b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 1096 | Contributors (this commit): 13 | Commits (past 90d): 6 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -281,30 +281,7 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n     * `category_filter` filters the messages down to only those matching the\n       provided categories.\n \n-    Example usage:\n-\n-    .. sourcecode:: html+jinja\n-\n-        {% for category, msg in get_flashed_messages(with_categories=true) %}\n-          <p class=flash-{{ category }}>{{ msg }}\n-        {% endfor %}\n-\n-    Example usage similar to http://twitter.github.com/bootstrap/#alerts:\n-\n-    .. sourcecode:: html+jinja\n-\n-        {% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n-        {% if errors %}\n-        <div class=\"alert-message block-message error\">\n-          <a class=\"close\" href=\"#\">×</a>\n-          <ul>\n-            {%- for msg in errors %}\n-            <li>{{ msg }}</li>\n-            {% endfor -%}\n-          </ul>\n-        </div>\n-        {% endif %}\n-        {% endwith %}\n+    See :ref:`message-flashing-pattern` for examples.\n \n     .. versionchanged:: 0.3\n        `with_categories` parameter added.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46e7bc70833e803657726aaff7c63ca4f4865c79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 2700 | Contributors (this commit): 15 | Commits (past 90d): 35 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -695,6 +695,10 @@ class Flask(_PackageBoundObject):\n                         information.\n         \"\"\"\n         from werkzeug.serving import run_simple\n+        if host is None:\n+            host = '127.0.0.1'\n+        if port is None:\n+            port = 5000\n         if debug is not None:\n             self.debug = bool(debug)\n         options.setdefault('use_reloader', self.debug)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#19d32cb17285e2614d8aecbf4b0f63cfdac629cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 2709 | Contributors (this commit): 15 | Commits (past 90d): 4 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -664,7 +664,7 @@ class Flask(_PackageBoundObject):\n         # existing views.\n         context.update(orig_ctx)\n \n-    def run(self, host='127.0.0.1', port=5000, debug=None, **options):\n+    def run(self, host=None, port=None, debug=None, **options):\n         \"\"\"Runs the application on a local development server.  If the\n         :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n@@ -684,9 +684,10 @@ class Flask(_PackageBoundObject):\n            won't catch any exceptions because there won't be any to\n            catch.\n \n-        :param host: the hostname to listen on.  set this to ``'0.0.0.0'``\n-                     to have the server available externally as well.\n-        :param port: the port of the webserver\n+        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n+                     have the server available externally as well. Defaults to\n+                     ``'127.0.0.1'``.\n+        :param port: the port of the webserver. Defaults to ``5000``.\n         :param debug: if given, enable or disable debug mode.\n                       See :attr:`debug`.\n         :param options: the options to be forwarded to the underlying\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#49b77fbc7aa826efbf0b58d6973ef02c50e8fc66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2713 | Contributors (this commit): 15 | Commits (past 90d): 5 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -1120,7 +1120,7 @@ class Flask(_PackageBoundObject):\n         registered error handlers and fall back to returning the\n         exception as response.\n \n-        .. versionadded: 0.3\n+        .. versionadded:: 0.3\n         \"\"\"\n         handlers = self.error_handler_spec.get(request.blueprint)\n         if handlers and e.code in handlers:\n@@ -1189,7 +1189,7 @@ class Flask(_PackageBoundObject):\n         for a 500 internal server error is used.  If no such handler\n         exists, a default 500 internal server error message is displayed.\n \n-        .. versionadded: 0.3\n+        .. versionadded:: 0.3\n         \"\"\"\n         exc_type, exc_value, tb = sys.exc_info()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2e5de9829774ca10682b298544bf3ce2bf61bab7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 1504 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -309,8 +309,15 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(list(flask.get_flashed_messages()), ['Zap', 'Zip'])\n \n     def test_extended_flashing(self):\n+        # Be sure app.testing=True below, else tests can fail silently.\n+        #\n+        # Specifically, if app.testing is not set to True, the AssertionErrors\n+        # in the view functions will cause a 500 response to the test client\n+        # instead of propagating exceptions.\n+\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n+        app.testing = True\n \n         @app.route('/')\n         def index():\n@@ -360,33 +367,27 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(messages[1], flask.Markup(u'<em>Testing</em>'))\n             return ''\n \n-        # Note: if status code assertions are missing, failed tests still pass.\n-        #\n-        # Since app.test_client() does not set debug=True, the AssertionErrors\n-        # in the view functions are swallowed and the only indicator is a 500\n-        # status code.\n-        #\n-        # Also, create new test client on each test to clean flashed messages.\n+        # Create new test client on each test to clean flashed messages.\n \n         c = app.test_client()\n         c.get('/')\n-        assert c.get('/test/').status_code == 200\n+        c.get('/test/')\n \n         c = app.test_client()\n         c.get('/')\n-        assert c.get('/test_with_categories/').status_code == 200\n+        c.get('/test_with_categories/')\n \n         c = app.test_client()\n         c.get('/')\n-        assert c.get('/test_filter/').status_code == 200\n+        c.get('/test_filter/')\n \n         c = app.test_client()\n         c.get('/')\n-        assert c.get('/test_filters/').status_code == 200\n+        c.get('/test_filters/')\n \n         c = app.test_client()\n         c.get('/')\n-        assert c.get('/test_filters_without_returning_categories/').status_code == 200\n+        c.get('/test_filters_without_returning_categories/')\n \n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#56177bcbd16f9e73252d7af7c78d25dc60ed946d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2724 | Contributors (this commit): 15 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -716,6 +716,17 @@ class Flask(_PackageBoundObject):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n \n+        Note that if you are testing for assertions or exceptions in your\n+        application code, you must set ``app.testing = True`` in order for the\n+        exceptions to propagate to the test client.  Otherwise, the exception\n+        will be handled by the application (not visible to the test client) and\n+        the only indication of an AssertionError or other exception will be a\n+        500 status code response to the test client.  See the :attr:`testing`\n+        attribute.  For example::\n+\n+            app.testing = True\n+            client = app.test_client()\n+\n         The test client can be used in a `with` block to defer the closing down\n         of the context until the end of the `with` block.  This is useful if\n         you want to access the context locals for testing::\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b786eac5574e478d51314333fb6309456bff7b76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 87 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 7 | Methods Changed: 7 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 87 | Churn Cumulative: 406 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,10 +8,14 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+from __future__ import with_statement\n+\n import os\n import sys\n import flask\n+import pkgutil\n import unittest\n+from contextlib import contextmanager\n from flask.testsuite import FlaskTestCase\n \n \n@@ -84,6 +88,35 @@ class ConfigTestCase(FlaskTestCase):\n         self.assert_equal(app.permanent_session_lifetime.seconds, 42)\n \n \n+class LimitedLoaderMockWrapper(object):\n+    def __init__(self, loader):\n+        self.loader = loader\n+\n+    def __getattr__(self, name):\n+        if name in ('archive', 'get_filename'):\n+            msg = 'Mocking a loader which does not have `%s.`' % name\n+            raise AttributeError, msg\n+        return getattr(self.loader, name)\n+\n+\n+@contextmanager\n+def patch_pkgutil_get_loader(wrapper_class=LimitedLoaderMockWrapper):\n+    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n+\n+    This provides for tests where a system has custom loaders, e.g. Google App\n+    Engine's HardenedModulesHook, which have neither the `get_filename` method\n+    nor the `archive` attribute.\n+    \"\"\"\n+    old_get_loader = pkgutil.get_loader\n+    def get_loader(*args, **kwargs):\n+        return wrapper_class(old_get_loader(*args, **kwargs))\n+    try:\n+        pkgutil.get_loader = get_loader\n+        yield\n+    finally:\n+        pkgutil.get_loader = old_get_loader\n+\n+\n class InstanceTestCase(FlaskTestCase):\n \n     def test_explicit_instance_paths(self):\n@@ -133,6 +166,24 @@ class InstanceTestCase(FlaskTestCase):\n             if 'site_app' in sys.modules:\n                 del sys.modules['site_app']\n \n+    def test_installed_module_paths_with_limited_loader(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        sys.path.append(site_packages)\n+        with patch_pkgutil_get_loader():\n+            try:\n+                import site_app\n+                self.assert_equal(site_app.app.instance_path,\n+                                  os.path.join(expected_prefix, 'var',\n+                                               'site_app-instance'))\n+            finally:\n+                sys.prefix = real_prefix\n+                sys.path.remove(site_packages)\n+                if 'site_app' in sys.modules:\n+                    del sys.modules['site_app']\n+\n     def test_installed_package_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n         expected_prefix = os.path.join(here, 'test_apps')\n@@ -150,6 +201,24 @@ class InstanceTestCase(FlaskTestCase):\n             if 'installed_package' in sys.modules:\n                 del sys.modules['installed_package']\n \n+    def test_installed_package_paths_with_limited_loader(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        installed_path = os.path.join(expected_prefix, 'path')\n+        sys.path.append(installed_path)\n+        with patch_pkgutil_get_loader():\n+            try:\n+                import installed_package\n+                self.assert_equal(installed_package.app.instance_path,\n+                                  os.path.join(expected_prefix, 'var',\n+                                               'installed_package-instance'))\n+            finally:\n+                sys.prefix = real_prefix\n+                sys.path.remove(installed_path)\n+                if 'installed_package' in sys.modules:\n+                    del sys.modules['installed_package']\n+\n     def test_prefix_package_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n         expected_prefix = os.path.join(here, 'test_apps')\n@@ -167,6 +236,24 @@ class InstanceTestCase(FlaskTestCase):\n             if 'site_package' in sys.modules:\n                 del sys.modules['site_package']\n \n+    def test_prefix_package_paths_with_limited_loader(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        sys.path.append(site_packages)\n+        with patch_pkgutil_get_loader():\n+            try:\n+                import site_package\n+                self.assert_equal(site_package.app.instance_path,\n+                                  os.path.join(expected_prefix, 'var',\n+                                               'site_package-instance'))\n+            finally:\n+                sys.prefix = real_prefix\n+                sys.path.remove(site_packages)\n+                if 'site_package' in sys.modules:\n+                    del sys.modules['site_package']\n+\n     def test_egg_installed_paths(self):\n         here = os.path.abspath(os.path.dirname(__file__))\n         expected_prefix = os.path.join(here, 'test_apps')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#76c1a1f7227ca13f3c5952b248af93b75e9a95c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 170 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -72,7 +72,7 @@ class View(object):\n     def as_view(cls, name, *class_args, **class_kwargs):\n         \"\"\"Converts the class into an actual view function that can be\n         used with the routing system.  What it does internally is generating\n-        a function on the fly that will instanciate the :class:`View`\n+        a function on the fly that will instantiate the :class:`View`\n         on each request and call the :meth:`dispatch_request` method on it.\n \n         The arguments passed to :meth:`as_view` are forwarded to the\n@@ -90,7 +90,7 @@ class View(object):\n \n         # we attach the view class to the view function for two reasons:\n         # first of all it allows us to easily figure out what class based\n-        # view this thing came from, secondly it's also used for instanciating\n+        # view this thing came from, secondly it's also used for instantiating\n         # the view class so you can actually replace it with something else\n         # for testing purposes and debugging.\n         view.view_class = cls\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2792dcf23e848472767a075e7c30e28890fd539d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 178 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -70,10 +70,10 @@ class View(object):\n \n     @classmethod\n     def as_view(cls, name, *class_args, **class_kwargs):\n-        \"\"\"Converts the class into an actual view function that can be\n-        used with the routing system.  What it does internally is generating\n-        a function on the fly that will instantiate the :class:`View`\n-        on each request and call the :meth:`dispatch_request` method on it.\n+        \"\"\"Converts the class into an actual view function that can be used\n+        with the routing system.  Internally this generates a function on the\n+        fly which will instantiate the :class:`View` on each request and call\n+        the :meth:`dispatch_request` method on it.\n \n         The arguments passed to :meth:`as_view` are forwarded to the\n         constructor of the class.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c5ebf9a97d0443bff59ff6a37aee8afd870ceabb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 180 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ from .globals import request\n \n \n http_method_funcs = frozenset(['get', 'post', 'head', 'options',\n-                               'delete', 'put', 'trace'])\n+                               'delete', 'put', 'trace', 'patch'])\n \n \n class View(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4aebc267bc67c5d8a1687c0e5a7ecc949d6e7d20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 188 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -3,7 +3,7 @@\n     flask.views\n     ~~~~~~~~~~~\n \n-    This module provides class based views inspired by the ones in Django.\n+    This module provides class-based views inspired by the ones in Django.\n \n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n@@ -50,7 +50,7 @@ class View(object):\n     #: A for which methods this pluggable view can handle.\n     methods = None\n \n-    #: The canonical way to decorate class based views is to decorate the\n+    #: The canonical way to decorate class-based views is to decorate the\n     #: return value of as_view().  However since this moves parts of the\n     #: logic from the class declaration to the place where it's hooked\n     #: into the routing system.\n@@ -89,7 +89,7 @@ class View(object):\n                 view = decorator(view)\n \n         # we attach the view class to the view function for two reasons:\n-        # first of all it allows us to easily figure out what class based\n+        # first of all it allows us to easily figure out what class-based\n         # view this thing came from, secondly it's also used for instantiating\n         # the view class so you can actually replace it with something else\n         # for testing purposes and debugging.\n@@ -120,7 +120,7 @@ class MethodViewType(type):\n \n \n class MethodView(View):\n-    \"\"\"Like a regular class based view but that dispatches requests to\n+    \"\"\"Like a regular class-based view but that dispatches requests to\n     particular methods.  For instance if you implement a method called\n     :meth:`get` it means you will response to ``'GET'`` requests and\n     the :meth:`dispatch_request` implementation will automatically\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3de8de1985f46297243eab340abd6c45c82bb9c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 216 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ And Easy to Setup\n \n ::\n \n-    $ easy_install Flask\n+    $ pip install Flask\n     $ python hello.py\n      * Running on http://localhost:5000/\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0b3369355dadb39ac1ce9580d95004233031a287", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 27 | Churn Cumulative: 543 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -109,17 +109,19 @@ def _render(template, context, app):\n     return rv\n \n \n-def render_template(template_name, **context):\n+def render_template(template_name_or_list, **context):\n     \"\"\"Renders a template from the template folder with the given\n     context.\n \n-    :param template_name: the name of the template to be rendered\n+    :param template_name_or_list: the name of the template to be\n+                                  rendered, or an iterable with template names\n+                                  the first one existing will be rendered\n     :param context: the variables that should be available in the\n                     context of the template.\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    return _render(ctx.app.jinja_env.get_template(template_name),\n+    return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n                    context, ctx.app)\n \n \n\n@@ -178,6 +178,25 @@ class TemplatingTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, 'Hello Custom World!')\n \n \n+    def test_iterable_loader(self):\n+        app = flask.Flask(__name__)\n+        @app.context_processor\n+        def context_processor():\n+            return {'whiskey': 'Jameson'}\n+        @app.route('/')\n+        def index():\n+            return flask.render_template(\n+                ['no_template.xml', # should skip this one\n+                'simple_template.html', # should render this\n+                'context_template.html'],\n+                value=23)\n+\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, '<h1>Jameson</h1>')\n+\n+\n+\n+\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(TemplatingTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#85ad4ffb605eee37cae9ffa1f82c5b6bb95c7820", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 24 | Churn Cumulative: 24 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,11 @@\n+from flask import Flask\n+from simple_page.simple_page import simple_page\n+\n+app = Flask(__name__)\n+app.register_blueprint(simple_page)\n+# Blueprint can be registered many times\n+app.register_blueprint(simple_page, url_prefix='/pages') \n+\n+\n+if __name__ == '__main__':\n+    app.run(debug=True)\n\\ No newline at end of file\n\n\n@@ -0,0 +1,13 @@\n+from flask import Blueprint, render_template, abort\n+from jinja2 import TemplateNotFound\n+\n+simple_page = Blueprint('simple_page', __name__,\n+                        template_folder='templates')\n+\n+@simple_page.route('/', defaults={'page': 'index'})\n+@simple_page.route('/<page>')\n+def show(page):\n+    try:\n+        return render_template('pages/%s.html' % page)\n+    except TemplateNotFound:\n+        abort(404)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#62621ccd133ffcbe2c88d18841c0669d03739ac0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 36 | Churn Cumulative: 36 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,36 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Blueprint Example Tests\n+    ~~~~~~~~~~~~~~\n+\n+    Tests the Blueprint example app\n+\"\"\"\n+import blueprintexample\n+import unittest\n+\n+\n+class BlueprintExampleTestCase(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.app = blueprintexample.app.test_client()\n+        \n+    def test_urls(self):\n+        r = self.app.get('/')\n+        self.assertEquals(r.status_code, 200)\n+        \n+        r = self.app.get('/hello')\n+        self.assertEquals(r.status_code, 200)\n+        \n+        r = self.app.get('/world')\n+        self.assertEquals(r.status_code, 200)\n+        \n+        #second blueprint instance\n+        r = self.app.get('/pages/hello')\n+        self.assertEquals(r.status_code, 200)\n+        \n+        r = self.app.get('/pages/world')\n+        self.assertEquals(r.status_code, 200)\n+        \n+        \n+if __name__ == '__main__':\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#76773e1d0a8cabbe048bb76f9306185e9d83a85c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 487 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -106,8 +106,7 @@ class Config(dict):\n                                'loaded.  Set this variable and make it '\n                                'point to a configuration file' %\n                                variable_name)\n-        self.from_pyfile(rv)\n-        return True\n+        return self.from_pyfile(rv, silent=silent)\n \n     def from_pyfile(self, filename, silent=False):\n         \"\"\"Updates the values in the config from a Python file.  This function\n\n@@ -69,6 +69,24 @@ class ConfigTestCase(FlaskTestCase):\n         finally:\n             os.environ = env\n \n+    def test_config_from_envvar_missing(self):\n+        env = os.environ\n+        try:\n+            os.environ = {'FOO_SETTINGS': 'missing.cfg'}\n+            try:\n+                app = flask.Flask(__name__)\n+                app.config.from_envvar('FOO_SETTINGS')\n+            except IOError, e:\n+                msg = str(e)\n+                self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n+                                            'file (No such file or directory):'))\n+                self.assert_(msg.endswith(\"missing.cfg'\"))\n+            else:\n+                self.assert_(0, 'expected config')\n+            self.assert_(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n+        finally:\n+            os.environ = env\n+\n     def test_config_missing(self):\n         app = flask.Flask(__name__)\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8d7ca29a3554d20324ed9c75d9c095dfa8a8c439", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 428 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -82,8 +82,8 @@ class ConfigTestCase(FlaskTestCase):\n                                             'file (No such file or directory):'))\n                 self.assert_(msg.endswith(\"missing.cfg'\"))\n             else:\n-                self.assert_(0, 'expected config')\n-            self.assert_(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n+                self.fail('expected IOError')\n+            self.assertFalse(app.config.from_envvar('FOO_SETTINGS', silent=True))\n         finally:\n             os.environ = env\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8445f0d939dc3c4a2e722dc6dd4938d02bc2e094", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1100 | Contributors (this commit): 14 | Commits (past 90d): 6 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -261,7 +261,9 @@ def flash(message, category='message'):\n                      messages and ``'warning'`` for warnings.  However any\n                      kind of string can be used as category.\n     \"\"\"\n-    session.setdefault('_flashes', []).append((category, message))\n+    flashes = session.get('_flashes', [])\n+    flashes.append((category, message))\n+    session['_flashes'] = flashes\n \n \n def get_flashed_messages(with_categories=False, category_filter=[]):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9711fd402010b2e14a98879f0457174c3ca15a24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 68 | Churn Cumulative: 761 | Contributors (this commit): 6 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -40,6 +40,18 @@ class JSONTestCase(FlaskTestCase):\n         rv = c.post('/json', data='malformed', content_type='application/json')\n         self.assert_equal(rv.status_code, 400)\n \n+    def test_json_bad_requests_content_type(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/json', methods=['POST'])\n+        def return_json():\n+            return unicode(flask.request.json)\n+        c = app.test_client()\n+        rv = c.post('/json', data='malformed', content_type='application/json')\n+        self.assert_equal(rv.status_code, 400)\n+        self.assert_equal(rv.mimetype, 'application/json')\n+        self.assert_('description' in flask.json.loads(rv.data))\n+        self.assert_('<p>' not in flask.json.loads(rv.data)['description'])\n+\n     def test_json_body_encoding(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n\n@@ -10,7 +10,7 @@\n \"\"\"\n \n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n-from werkzeug.exceptions import BadRequest\n+from werkzeug.exceptions import BadRequest, HTTPException\n from werkzeug.utils import cached_property\n \n from .debughelpers import attach_enctype_error_multidict\n@@ -18,6 +18,43 @@ from .helpers import json, _assert_have_json\n from .globals import _request_ctx_stack\n \n \n+class JSONHTTPException(HTTPException):\n+    \"\"\"A base class for HTTP exceptions with ``Content-Type:\n+    application/json``.\n+\n+    The ``description`` attribute of this class must set to a string (*not* an\n+    HTML string) which describes the error.\n+\n+    \"\"\"\n+\n+    def get_body(self, environ):\n+        \"\"\"Overrides :meth:`werkzeug.exceptions.HTTPException.get_body` to\n+        return the description of this error in JSON format instead of HTML.\n+\n+        \"\"\"\n+        return json.dumps(dict(description=self.get_description(environ)))\n+\n+    def get_headers(self, environ):\n+        \"\"\"Returns a list of headers including ``Content-Type:\n+        application/json``.\n+\n+        \"\"\"\n+        return [('Content-Type', 'application/json')]\n+\n+\n+class JSONBadRequest(JSONHTTPException, BadRequest):\n+    \"\"\"Represents an HTTP ``400 Bad Request`` error whose body contains an\n+    error message in JSON format instead of HTML format (as in the superclass).\n+\n+    \"\"\"\n+\n+    #: The description of the error which occurred as a string.\n+    description = (\n+        'The browser (or proxy) sent a request that this server could not '\n+        'understand.'\n+    )\n+\n+\n class Request(RequestBase):\n     \"\"\"The request object used by default in Flask.  Remembers the\n     matched endpoint and view arguments.\n@@ -108,12 +145,23 @@ class Request(RequestBase):\n \n     def on_json_loading_failed(self, e):\n         \"\"\"Called if decoding of the JSON data failed.  The return value of\n-        this method is used by :attr:`json` when an error ocurred.  The\n-        default implementation raises a :class:`~werkzeug.exceptions.BadRequest`.\n+        this method is used by :attr:`json` when an error ocurred.  The default\n+        implementation raises a :class:`JSONBadRequest`, which is a subclass of\n+        :class:`~werkzeug.exceptions.BadRequest` which sets the\n+        ``Content-Type`` to ``application/json`` and provides a JSON-formatted\n+        error description::\n+\n+            {\"description\": \"The browser (or proxy) sent a request that \\\n+                             this server could not understand.\"}\n+\n+        .. versionchanged:: 0.9\n+\n+           Return a :class:`JSONBadRequest` instead of a\n+           :class:`~werkzeug.exceptions.BadRequest` by default.\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        raise BadRequest()\n+        raise JSONBadRequest()\n \n     def _load_form_data(self):\n         RequestBase._load_form_data(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
