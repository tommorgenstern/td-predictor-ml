{"custom_id": "scrapy#04788673e7e35ead431cadbd5778d9ce699baec4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 61 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 67 | Churn Cumulative: 449 | Contributors (this commit): 6 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -67,9 +67,8 @@ class Spider(object_ref):\n \n class BaseSpider(Spider):\n     __metaclass__ = warn_when_subclassed(\n-        4,  # == len([object, object_ref, Spider, BaseSpider])\n-        \"scrapy.spider.BaseSpider was deprecated. \"\n-        \"Please inherit from scrapy.spider.Spider.\"\n+        superclass=Spider,\n+        message=\"scrapy.spider.BaseSpider was deprecated. Please inherit from scrapy.spider.Spider.\"\n     )\n \n \n\n@@ -5,10 +5,11 @@ from cStringIO import StringIO\n \n from twisted.trial import unittest\n \n-from scrapy.spider import Spider\n+from scrapy.spider import Spider, BaseSpider\n from scrapy.http import Response, TextResponse, XmlResponse, HtmlResponse\n from scrapy.contrib.spiders.init import InitSpider\n from scrapy.contrib.spiders import CrawlSpider, XMLFeedSpider, CSVFeedSpider, SitemapSpider\n+from scrapy.exceptions import ScrapyDeprecationWarning\n \n \n class SpiderTest(unittest.TestCase):\n@@ -134,5 +135,19 @@ class SitemapSpiderTest(SpiderTest):\n         r = Response(url=\"http://www.example.com/sitemap.xml.gz\", body=self.GZBODY)\n         self.assertEqual(spider._get_sitemap_body(r), self.BODY)\n \n+\n+class BaseSpiderDeprecationTest(unittest.TestCase):\n+\n+    def test_basespider_is_deprecated(self):\n+        with warnings.catch_warnings(record=True) as w:\n+\n+            class MySpider(BaseSpider):\n+                pass\n+\n+            self.assertEqual(len(w), 1)\n+            self.assertEqual(w[0].category, ScrapyDeprecationWarning)\n+            self.assertEqual(w[0].lineno, inspect.getsourcelines(MySpider)[1])\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n@@ -0,0 +1,41 @@\n+# -*- coding: utf-8 -*-\n+from __future__ import absolute_import\n+import inspect\n+import unittest\n+import warnings\n+from scrapy.utils.deprecate import warn_when_subclassed\n+\n+class MyWarning(UserWarning):\n+    pass\n+\n+class SomeBaseClass(object):\n+    pass\n+\n+class NewName(SomeBaseClass):\n+    pass\n+\n+\n+class WarnWhenSubclassedTest(unittest.TestCase):\n+\n+    def test_no_warning_on_definition(self):\n+        with warnings.catch_warnings(record=True) as w:\n+\n+            class Deprecated(NewName):\n+                __metaclass__ = warn_when_subclassed(NewName, \"message\")\n+\n+        self.assertEqual(w, [])\n+\n+    def test_warning_on_subclassing(self):\n+        with warnings.catch_warnings(record=True) as w:\n+\n+            class Deprecated(NewName):\n+                __metaclass__ = warn_when_subclassed(NewName, \"message\", MyWarning)\n+\n+            class UserClass(Deprecated):\n+                pass\n+\n+        self.assertEqual(len(w), 1)\n+        msg = w[0]\n+        assert issubclass(msg.category, MyWarning)\n+        self.assertEqual(str(msg.message), \"message\")\n+        self.assertEqual(msg.lineno, inspect.getsourcelines(UserClass)[1])\n\n@@ -11,14 +11,14 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n         (cname, oldattr, version, cname, newattr), ScrapyDeprecationWarning, stacklevel=3)\n \n \n-def warn_when_subclassed(mro_len, message, category=ScrapyDeprecationWarning):\n+def warn_when_subclassed(superclass, message, category=ScrapyDeprecationWarning):\n     \"\"\"\n     Return a metaclass that causes classes to\n     issue a warning when they are subclassed.\n     \"\"\"\n     class Metaclass(type):\n         def __init__(cls, name, bases, clsdict):\n-            if len(cls.mro()) > mro_len:\n+            if len(cls.mro()) > len(superclass.mro()) + 1:\n                 warnings.warn(message, category, stacklevel=2)\n             super(Metaclass, cls).__init__(name, bases, clsdict)\n     return Metaclass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1e96063ffa0d5d86f76eba47bce438c85cb29c88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 58 | Files Changed: 3 | Hunks: 20 | Methods Changed: 12 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 103 | Churn Cumulative: 397 | Contributors (this commit): 4 | Commits (past 90d): 11 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -7,7 +7,7 @@ from scrapy import log\n from scrapy.http import Request\n from scrapy.utils.trackref import object_ref\n from scrapy.utils.url import url_is_from_spider\n-from scrapy.utils.deprecate import deprecated_base_class\n+from scrapy.utils.deprecate import create_deprecated_class\n \n \n class Spider(object_ref):\n@@ -65,8 +65,7 @@ class Spider(object_ref):\n     __repr__ = __str__\n \n \n-class BaseSpider(Spider):\n-    __metaclass__ = deprecated_base_class(Spider, \"scrapy.spider.BaseSpider was deprecated. Please inherit from scrapy.spider.Spider.\")\n+BaseSpider = create_deprecated_class('BaseSpider', Spider)\n \n \n class ObsoleteClass(object):\n\n@@ -3,7 +3,7 @@ from __future__ import absolute_import\n import inspect\n import unittest\n import warnings\n-from scrapy.utils.deprecate import deprecated_base_class\n+from scrapy.utils.deprecate import create_deprecated_class\n \n class MyWarning(UserWarning):\n     pass\n@@ -19,17 +19,13 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n \n     def test_no_warning_on_definition(self):\n         with warnings.catch_warnings(record=True) as w:\n-\n-            class Deprecated(NewName):\n-                __metaclass__ = deprecated_base_class(NewName, \"message\")\n+            Deprecated = create_deprecated_class('Deprecated', NewName)\n \n         self.assertEqual(w, [])\n \n     def test_warning_on_subclassing(self):\n         with warnings.catch_warnings(record=True) as w:\n-\n-            class Deprecated(NewName):\n-                __metaclass__ = deprecated_base_class(NewName, \"message\", MyWarning)\n+            Deprecated = create_deprecated_class('Deprecated', NewName, MyWarning)\n \n             class UserClass(Deprecated):\n                 pass\n@@ -37,28 +33,28 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         self.assertEqual(len(w), 1)\n         msg = w[0]\n         assert issubclass(msg.category, MyWarning)\n-        self.assertEqual(str(msg.message), \"message\")\n+        self.assertEqual(\n+            str(msg.message),\n+            \"Base class scrapy.tests.test_utils_deprecate.Deprecated of \"\n+            \"scrapy.tests.test_utils_deprecate.UserClass was deprecated. \"\n+            \"Please inherit from scrapy.tests.test_utils_deprecate.NewName.\"\n+        )\n         self.assertEqual(msg.lineno, inspect.getsourcelines(UserClass)[1])\n \n     def test_warning_auto_message(self):\n         with warnings.catch_warnings(record=True) as w:\n-\n-            class Deprecated(NewName):\n-                __metaclass__ = deprecated_base_class(NewName)\n+            Deprecated = create_deprecated_class('Deprecated', NewName)\n \n             class UserClass2(Deprecated):\n                 pass\n \n         msg = str(w[0].message)\n         self.assertIn(\"scrapy.tests.test_utils_deprecate.NewName\", msg)\n-        # this doesn't work:\n-        # self.assertIn(\"scrapy.tests.test_utils_deprecate.Deprecated\", msg)\n+        self.assertIn(\"scrapy.tests.test_utils_deprecate.Deprecated\", msg)\n \n     def test_issubclass(self):\n         with warnings.catch_warnings(record=True):\n-\n-            class DeprecatedName(NewName):\n-                __metaclass__ = deprecated_base_class(NewName, \"message\", MyWarning)\n+            DeprecatedName = create_deprecated_class('DeprecatedName', NewName)\n \n             class UpdatedUserClass1(NewName):\n                 pass\n@@ -88,9 +84,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n \n     def test_isinstance(self):\n         with warnings.catch_warnings(record=True):\n-\n-            class DeprecatedName(NewName):\n-                __metaclass__ = deprecated_base_class(NewName, \"message\", MyWarning)\n+            DeprecatedName = create_deprecated_class('DeprecatedName', NewName)\n \n             class UpdatedUserClass2(NewName):\n                 pass\n@@ -114,14 +108,3 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         assert isinstance(OutdatedUserClass2(), DeprecatedName)\n         assert not isinstance(UnrelatedClass(), DeprecatedName)\n         assert not isinstance(OldStyleClass(), DeprecatedName)\n-\n-    def test_invalid_usage(self):\n-\n-        class SomeClass(object):\n-            pass\n-\n-        def define_invalid():\n-            class DeprecatedName(NewName):\n-                __metaclass__ = deprecated_base_class(SomeClass)\n-\n-        self.assertRaises(ValueError, define_invalid)\n\n@@ -4,6 +4,7 @@ import warnings\n import inspect\n from scrapy.exceptions import ScrapyDeprecationWarning\n \n+\n def attribute(obj, oldattr, newattr, version='0.12'):\n     cname = obj.__class__.__name__\n     warnings.warn(\"%s.%s attribute is deprecated and will be no longer supported \"\n@@ -11,15 +12,12 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n         (cname, oldattr, version, cname, newattr), ScrapyDeprecationWarning, stacklevel=3)\n \n \n-def deprecated_base_class(new_class, message=None, category=ScrapyDeprecationWarning):\n+def create_deprecated_class(name, new_class, warn_category=ScrapyDeprecationWarning, message=None):\n     \"\"\"\n-    Return a metaclass that causes classes to issue a warning when\n-    they are subclassed.\n+    Return a \"deprecated\" class that causes its subclasses to issue a warning.\n+    Subclasses of ``new_class`` are considered subclasses of this class.\n \n-    In addition to that, subclasses of ``new_class`` are considered subclasses\n-    of a class this metaclass is applied to.\n-\n-    It can be used to rename a base class of some user classes, e.g. if we\n+    It can be used to rename a base class in a library. For example, if we\n     have\n \n         class OldName(SomeClass):\n@@ -30,30 +28,26 @@ def deprecated_base_class(new_class, message=None, category=ScrapyDeprecationWar\n         class NewName(SomeClass):\n             # ...\n \n-        class OldName(NewName):\n-            __metaclass__ = deprecated_base_class(NewName, \"OldName is deprecated. Please inherit from NewName.\")\n+        OldName = create_deprecated_class('OldName', NewName)\n \n     Then, if user class inherits from OldName, warning is issued. Also, if\n     some code uses ``issubclass(sub, OldName)`` or ``isinstance(sub(), OldName)``\n     checks they'll still return True if sub is a subclass of NewName instead of\n     OldName.\n     \"\"\"\n-    class Metaclass(type):\n+\n+    deprecated = {}\n+    class DeprecatedClass(type):\n+\n         def __init__(cls, name, bases, clsdict):\n-\n-            if not issubclass(cls, new_class):\n-                raise ValueError(\"first parameter of `warn_when_subclassed` must be a superclass of %s\" % cls)\n-\n-            warn_message = message\n-            if warn_message is None:\n-                # XXX: how to get a name of deprecated base class?\n-                cls_name = cls.__module__ + '.' + name\n-                new_name = new_class.__module__ + '.' + new_class.__name__\n-                warn_message = \"Base class of %s was deprecated. Please inherit from %s.\" % (cls_name, new_name)\n-\n-            if len(cls.mro()) > len(new_class.mro()) + 1:\n-                warnings.warn(warn_message, category, stacklevel=2)\n-            super(Metaclass, cls).__init__(name, bases, clsdict)\n+            if 'cls' in deprecated:\n+                if message is not None:\n+                    msg = message\n+                else:\n+                    msg = \"Base class {0} of {1} was deprecated. Please inherit from {2}.\"\\\n+                            .format(_clspath(deprecated['cls']), _clspath(cls), _clspath(new_class))\n+                warnings.warn(msg, warn_category, stacklevel=2)\n+            super(DeprecatedClass, cls).__init__(name, bases, clsdict)\n \n         # see http://www.python.org/dev/peps/pep-3119/#overloading-isinstance-and-issubclass\n         # and http://docs.python.org/2/reference/datamodel.html#customizing-instance-and-subclass-checks\n@@ -70,5 +64,16 @@ def deprecated_base_class(new_class, message=None, category=ScrapyDeprecationWar\n             candidates = {cls, new_class}\n             return any(c in candidates for c in mro)\n \n-    return Metaclass\n+    deprecated_cls = DeprecatedClass(name, (new_class,), {})\n+    deprecated['cls'] = deprecated_cls\n \n+    frm = inspect.stack()[1]\n+    parent_module = inspect.getmodule(frm[0])\n+    if parent_module is not None:\n+        deprecated_cls.__module__ = parent_module.__name__\n+\n+    return deprecated_cls\n+\n+\n+def _clspath(cls):\n+    return '{}.{}'.format(cls.__module__, cls.__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5af45689e49bc97bd2c47d60d28333e578e2db4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 347 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,8 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n \n     def test_warning_on_subclassing(self):\n         with warnings.catch_warnings(record=True) as w:\n-            Deprecated = create_deprecated_class('Deprecated', NewName, MyWarning)\n+            Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                                 warn_category=MyWarning)\n \n             class UserClass(Deprecated):\n                 pass\n@@ -108,3 +109,9 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         assert isinstance(OutdatedUserClass2(), DeprecatedName)\n         assert not isinstance(UnrelatedClass(), DeprecatedName)\n         assert not isinstance(OldStyleClass(), DeprecatedName)\n+\n+    def test_clsdict(self):\n+        with warnings.catch_warnings(record=True):\n+            Deprecated = create_deprecated_class('Deprecated', NewName, {'foo': 'bar'})\n+\n+        self.assertEqual(Deprecated.foo, 'bar')\n\n@@ -12,7 +12,9 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n         (cname, oldattr, version, cname, newattr), ScrapyDeprecationWarning, stacklevel=3)\n \n \n-def create_deprecated_class(name, new_class, warn_category=ScrapyDeprecationWarning, message=None):\n+def create_deprecated_class(name, new_class, clsdict=None,\n+                            warn_category=ScrapyDeprecationWarning,\n+                            warn_message=None):\n     \"\"\"\n     Return a \"deprecated\" class that causes its subclasses to issue a warning.\n     Subclasses of ``new_class`` are considered subclasses of this class.\n@@ -39,15 +41,15 @@ def create_deprecated_class(name, new_class, warn_category=ScrapyDeprecationWarn\n     deprecated = {}\n     class DeprecatedClass(type):\n \n-        def __init__(cls, name, bases, clsdict):\n+        def __init__(cls, name, bases, clsdict_):\n             if 'cls' in deprecated:\n-                if message is not None:\n-                    msg = message\n+                if warn_message is not None:\n+                    msg = warn_message\n                 else:\n                     msg = \"Base class {0} of {1} was deprecated. Please inherit from {2}.\"\\\n                             .format(_clspath(deprecated['cls']), _clspath(cls), _clspath(new_class))\n                 warnings.warn(msg, warn_category, stacklevel=2)\n-            super(DeprecatedClass, cls).__init__(name, bases, clsdict)\n+            super(DeprecatedClass, cls).__init__(name, bases, clsdict_)\n \n         # see http://www.python.org/dev/peps/pep-3119/#overloading-isinstance-and-issubclass\n         # and http://docs.python.org/2/reference/datamodel.html#customizing-instance-and-subclass-checks\n@@ -64,7 +66,8 @@ def create_deprecated_class(name, new_class, warn_category=ScrapyDeprecationWarn\n             candidates = {cls, new_class}\n             return any(c in candidates for c in mro)\n \n-    deprecated_cls = DeprecatedClass(name, (new_class,), {})\n+    clsdict = clsdict if clsdict is not None else {}\n+    deprecated_cls = DeprecatedClass(name, (new_class,), clsdict)\n     deprecated['cls'] = deprecated_cls\n \n     frm = inspect.stack()[1]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f6a0ac8325fbd442875b54dc3f5a12f5454123be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 22 | Churn Cumulative: 1822 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -5,7 +5,7 @@ This module implements the FormRequest class which is a more covenient class\n See documentation in docs/topics/request-response.rst\n \"\"\"\n \n-import urllib\n+import urllib, urlparse\n import lxml.html\n from scrapy.http.request import Request\n from scrapy.utils.python import unicode_to_str\n@@ -35,10 +35,14 @@ class FormRequest(Request):\n         kwargs.setdefault('encoding', response.encoding)\n         form = _get_form(response, formname, formnumber, formxpath)\n         formdata = _get_inputs(form, formdata, dont_click, clickdata, response)\n-        url = form.action or form.base_url\n+        url = _get_form_url(form, kwargs.pop('url', None))\n         method = kwargs.pop('method', form.method)\n-        return cls(url, method=method, formdata=formdata, **kwargs)\n+        return cls(url=url, method=method, formdata=formdata, **kwargs)\n \n+def _get_form_url(form, url):\n+    if url is None:\n+        return form.action or form.base_url\n+    return urlparse.urljoin(form.base_url, url)\n \n def _urlencode(seq, enc):\n     values = [(unicode_to_str(k, enc), unicode_to_str(v, enc))\n\n@@ -282,6 +282,18 @@ class FormRequestTest(RequestTest):\n         request = FormRequest.from_response(response, method='POST')\n         self.assertEqual(request.method, 'POST')\n \n+    def test_from_response_override_url(self):\n+        response = _buildresponse(\n+                '''<html><body>\n+                <form action=\"/app\"></form>\n+                </body></html>''')\n+        request = FormRequest.from_response(response)\n+        self.assertEqual(request.url, 'http://example.com/app')\n+        request = FormRequest.from_response(response, url='http://foo.bar/absolute')\n+        self.assertEqual(request.url, 'http://foo.bar/absolute')\n+        request = FormRequest.from_response(response, url='/relative')\n+        self.assertEqual(request.url, 'http://example.com/relative')\n+\n     def test_from_response_submit_first_clickable(self):\n         response = _buildresponse(\n             \"\"\"<form action=\"get.php\" method=\"GET\">\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8c4e1db5fee3e360ebbe7a5c2ec2cfab75d3856f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 33 | Churn Cumulative: 380 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,9 +36,9 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         assert issubclass(msg.category, MyWarning)\n         self.assertEqual(\n             str(msg.message),\n-            \"Base class scrapy.tests.test_utils_deprecate.Deprecated of \"\n-            \"scrapy.tests.test_utils_deprecate.UserClass was deprecated. \"\n-            \"Please inherit from scrapy.tests.test_utils_deprecate.NewName.\"\n+            \"scrapy.tests.test_utils_deprecate.UserClass inherits from \"\n+            \"deprecated class scrapy.tests.test_utils_deprecate.Deprecated, \"\n+            \"please inherit from scrapy.tests.test_utils_deprecate.NewName.\"\n         )\n         self.assertEqual(msg.lineno, inspect.getsourcelines(UserClass)[1])\n \n\n@@ -14,7 +14,8 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n \n def create_deprecated_class(name, new_class, clsdict=None,\n                             warn_category=ScrapyDeprecationWarning,\n-                            warn_message=None):\n+                            warn_message=\"{cls} inherits from deprecated class {old}, \"\\\n+                                         \"please inherit from {new}.\"):\n     \"\"\"\n     Return a \"deprecated\" class that causes its subclasses to issue a warning.\n     Subclasses of ``new_class`` are considered subclasses of this class.\n@@ -38,16 +39,21 @@ def create_deprecated_class(name, new_class, clsdict=None,\n     OldName.\n     \"\"\"\n \n-    deprecated = {}\n     class DeprecatedClass(type):\n \n+        deprecated_class = None\n+\n+        def __new__(metacls, name, bases, clsdict_):\n+            cls = super(DeprecatedClass, metacls).__new__(metacls, name, bases, clsdict_)\n+            if metacls.deprecated_class is None:\n+                metacls.deprecated_class = cls\n+            return cls\n+\n         def __init__(cls, name, bases, clsdict_):\n-            if 'cls' in deprecated:\n-                if warn_message is not None:\n-                    msg = warn_message\n-                else:\n-                    msg = \"Base class {0} of {1} was deprecated. Please inherit from {2}.\"\\\n-                            .format(_clspath(deprecated['cls']), _clspath(cls), _clspath(new_class))\n+            if cls is not cls.__class__.deprecated_class:\n+                msg = warn_message.format(cls=_clspath(cls),\n+                                        old=_clspath(cls.__class__.deprecated_class),\n+                                        new=_clspath(new_class))\n                 warnings.warn(msg, warn_category, stacklevel=2)\n             super(DeprecatedClass, cls).__init__(name, bases, clsdict_)\n \n@@ -66,10 +72,7 @@ def create_deprecated_class(name, new_class, clsdict=None,\n             candidates = {cls, new_class}\n             return any(c in candidates for c in mro)\n \n-    clsdict = clsdict if clsdict is not None else {}\n-    deprecated_cls = DeprecatedClass(name, (new_class,), clsdict)\n-    deprecated['cls'] = deprecated_cls\n-\n+    deprecated_cls = DeprecatedClass(name, (new_class,), clsdict or {})\n     frm = inspect.stack()[1]\n     parent_module = inspect.getmodule(frm[0])\n     if parent_module is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b41ad38fab85199d02a8b2754722bd1b0a40e14d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 44 | Churn Cumulative: 424 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,6 +42,27 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         )\n         self.assertEqual(msg.lineno, inspect.getsourcelines(UserClass)[1])\n \n+    def test_warning_on_instance(self):\n+        with warnings.catch_warnings(record=True) as w:\n+            Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                                 warn_category=MyWarning)\n+\n+            class UserClass(Deprecated):\n+                pass\n+\n+            _, lineno = Deprecated(), inspect.getlineno(inspect.currentframe())\n+            _ = UserClass()\n+\n+        self.assertEqual(len(w), 2)\n+        msg = w[1]\n+        assert issubclass(msg.category, MyWarning)\n+        self.assertEqual(\n+            str(msg.message),\n+            \"scrapy.tests.test_utils_deprecate.Deprecated is deprecated, \"\n+            \"instanciate scrapy.tests.test_utils_deprecate.NewName instead.\"\n+        )\n+        self.assertEqual(msg.lineno, lineno)\n+\n     def test_warning_auto_message(self):\n         with warnings.catch_warnings(record=True) as w:\n             Deprecated = create_deprecated_class('Deprecated', NewName)\n\n@@ -14,11 +14,16 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n \n def create_deprecated_class(name, new_class, clsdict=None,\n                             warn_category=ScrapyDeprecationWarning,\n-                            warn_message=\"{cls} inherits from deprecated class {old}, \"\\\n-                                         \"please inherit from {new}.\"):\n+                            subclass_warn_message=\"{cls} inherits from \"\\\n+                                    \"deprecated class {old}, please inherit \"\\\n+                                    \"from {new}.\",\n+                            instance_warn_message=\"{cls} is deprecated, \"\\\n+                                    \"instanciate {new} instead.\"):\n     \"\"\"\n     Return a \"deprecated\" class that causes its subclasses to issue a warning.\n     Subclasses of ``new_class`` are considered subclasses of this class.\n+    It also warns when the deprecated class is instanciated, but do not when\n+    its subclasses are instanciated.\n \n     It can be used to rename a base class in a library. For example, if we\n     have\n@@ -50,9 +55,10 @@ def create_deprecated_class(name, new_class, clsdict=None,\n             return cls\n \n         def __init__(cls, name, bases, clsdict_):\n-            if cls is not cls.__class__.deprecated_class:\n-                msg = warn_message.format(cls=_clspath(cls),\n-                                        old=_clspath(cls.__class__.deprecated_class),\n+            old = cls.__class__.deprecated_class\n+            if cls is not old:\n+                msg = subclass_warn_message.format(cls=_clspath(cls),\n+                                                   old=_clspath(old),\n                                                    new=_clspath(new_class))\n                 warnings.warn(msg, warn_category, stacklevel=2)\n             super(DeprecatedClass, cls).__init__(name, bases, clsdict_)\n@@ -72,6 +78,13 @@ def create_deprecated_class(name, new_class, clsdict=None,\n             candidates = {cls, new_class}\n             return any(c in candidates for c in mro)\n \n+        def __call__(cls, *args, **kwargs):\n+            if cls is cls.__class__.deprecated_class:\n+                msg = instance_warn_message.format(cls=_clspath(cls),\n+                                                   new=_clspath(new_class))\n+                warnings.warn(msg, warn_category, stacklevel=2)\n+            return super(DeprecatedClass, cls).__call__(*args, **kwargs)\n+\n     deprecated_cls = DeprecatedClass(name, (new_class,), clsdict or {})\n     frm = inspect.stack()[1]\n     parent_module = inspect.getmodule(frm[0])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#292d21ca867c469bd1d69f9144152e8cc95f99d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 1084 | Contributors (this commit): 8 | Commits (past 90d): 25 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -170,7 +170,7 @@ class XPathItemLoader(ItemLoader):\n     def __init__(self, *a, **kw):\n         import warnings\n         from scrapy.exceptions import ScrapyDeprecationWarning\n-        warnings.warn('%s is deprecated, instanciate scrapy.contrib.loader.ItemLoader '\n+        warnings.warn('%s is deprecated, instantiate scrapy.contrib.loader.ItemLoader '\n                       'instead' % type(self).__name__,\n                       category=ScrapyDeprecationWarning, stacklevel=1)\n         super(XPathItemLoader, self).__init__(*a, **kw)\n\n@@ -15,14 +15,14 @@ class XPathSelector(Selector):\n     def __init__(self, *a, **kw):\n         import warnings\n         from scrapy.exceptions import ScrapyDeprecationWarning\n-        warnings.warn('%s is deprecated, instanciate scrapy.selector.Selector '\n+        warnings.warn('%s is deprecated, instantiate scrapy.selector.Selector '\n                       'instead' % type(self).__name__,\n                       category=ScrapyDeprecationWarning, stacklevel=1)\n         super(XPathSelector, self).__init__(*a, **kw)\n \n     def css(self, *a, **kw):\n         raise RuntimeError('.css() method not available for %s, '\n-                           'instanciate scrapy.selector.Selector '\n+                           'instantiate scrapy.selector.Selector '\n                            'instead' % type(self).__name__)\n \n \n@@ -41,7 +41,7 @@ class XPathSelectorList(SelectorList):\n     def __init__(self, *a, **kw):\n         import warnings\n         from scrapy.exceptions import ScrapyDeprecationWarning\n-        warnings.warn('XPathSelectorList is deprecated, instanciate '\n+        warnings.warn('XPathSelectorList is deprecated, instantiate '\n                       'scrapy.selector.SelectorList instead',\n                       category=ScrapyDeprecationWarning, stacklevel=1)\n         super(XPathSelectorList, self).__init__(*a, **kw)\n\n@@ -59,7 +59,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         self.assertEqual(\n             str(msg.message),\n             \"scrapy.tests.test_utils_deprecate.Deprecated is deprecated, \"\n-            \"instanciate scrapy.tests.test_utils_deprecate.NewName instead.\"\n+            \"instantiate scrapy.tests.test_utils_deprecate.NewName instead.\"\n         )\n         self.assertEqual(msg.lineno, lineno)\n \n\n@@ -18,12 +18,12 @@ def create_deprecated_class(name, new_class, clsdict=None,\n                                     \"deprecated class {old}, please inherit \"\\\n                                     \"from {new}.\",\n                             instance_warn_message=\"{cls} is deprecated, \"\\\n-                                    \"instanciate {new} instead.\"):\n+                                    \"instantiate {new} instead.\"):\n     \"\"\"\n     Return a \"deprecated\" class that causes its subclasses to issue a warning.\n     Subclasses of ``new_class`` are considered subclasses of this class.\n-    It also warns when the deprecated class is instanciated, but do not when\n-    its subclasses are instanciated.\n+    It also warns when the deprecated class is instantiated, but do not when\n+    its subclasses are instantiated.\n \n     It can be used to rename a base class in a library. For example, if we\n     have\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9f90c11246d0eb3e4218b828414f79c3313a5420", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 576 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -146,10 +146,10 @@ def scrapy_info(settings):\n             settings['BOT_NAME']))\n \n         msg(\"Optional features available: %s\" % \", \".join(scrapy.optional_features),\n-            level=DEBUG)\n+            level=INFO)\n \n         d = dict(overridden_settings(settings))\n-        msg(format=\"Overridden settings: %(settings)r\", settings=d, level=DEBUG)\n+        msg(format=\"Overridden settings: %(settings)r\", settings=d, level=INFO)\n \n         sflo.stop()\n \n\n@@ -41,7 +41,7 @@ class MiddlewareManager(object):\n                             level=log.WARNING, clsname=clsname, eargs=e.args[0])\n \n         enabled = [x.__class__.__name__ for x in middlewares]\n-        log.msg(format=\"Enabled %(componentname)ss: %(enabledlist)s\", level=log.DEBUG,\n+        log.msg(format=\"Enabled %(componentname)ss: %(enabledlist)s\", level=log.INFO,\n                 componentname=cls.component_name, enabledlist=', '.join(enabled))\n         return cls(*middlewares)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#72ff7a48e37e836fe1a03b1db26f25619352429c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 257 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,6 +12,7 @@ from scrapy.selector import Selector\n from scrapy.utils.misc import arg_to_iter, extract_regex\n from scrapy.utils.python import flatten\n from scrapy.utils.decorator import deprecated\n+from scrapy.utils.deprecate import create_deprecated_class\n from .common import wrap_loader_context\n from .processor import Identity\n \n@@ -166,11 +167,4 @@ class ItemLoader(object):\n         return flatten([self.selector.css(css).extract() for css in csss])\n \n \n-class XPathItemLoader(ItemLoader):\n-    def __init__(self, *a, **kw):\n-        import warnings\n-        from scrapy.exceptions import ScrapyDeprecationWarning\n-        warnings.warn('%s is deprecated, instantiate scrapy.contrib.loader.ItemLoader '\n-                      'instead' % type(self).__name__,\n-                      category=ScrapyDeprecationWarning, stacklevel=1)\n-        super(XPathItemLoader, self).__init__(*a, **kw)\n+XPathItemLoader = create_deprecated_class('XPathItemLoader', ItemLoader)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#23c37dee3649fc6d328246f101df5e43c114c197", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 57 | Churn Cumulative: 489 | Contributors (this commit): 3 | Commits (past 90d): 17 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -63,6 +63,49 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         )\n         self.assertEqual(msg.lineno, lineno)\n \n+    def test_warning_shown_everytime(self):\n+        Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                             warn_category=MyWarning)\n+        with warnings.catch_warnings(record=True) as w:\n+            class U1(Deprecated):\n+                pass\n+\n+            class U2(Deprecated):\n+                pass\n+\n+        self.assertEqual(len(w), 2)\n+        assert issubclass(w[0].category, MyWarning)\n+        assert issubclass(w[1].category, MyWarning)\n+\n+        with warnings.catch_warnings(record=True) as w:\n+            _i1 = Deprecated()\n+            _i2 = Deprecated()\n+\n+        self.assertEqual(len(w), 2)\n+        assert issubclass(w[0].category, MyWarning)\n+        assert issubclass(w[1].category, MyWarning)\n+\n+    def test_warning_shown_once(self):\n+        Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                             warn_once=True,\n+                                             warn_category=MyWarning)\n+        with warnings.catch_warnings(record=True) as w:\n+            class U1(Deprecated):\n+                pass\n+\n+            class U2(Deprecated):\n+                pass\n+\n+        self.assertEqual(len(w), 1)\n+        assert issubclass(w[0].category, MyWarning)\n+\n+        with warnings.catch_warnings(record=True) as w:\n+            _i1 = Deprecated()\n+            _i2 = Deprecated()\n+\n+        self.assertEqual(len(w), 1)\n+        assert issubclass(w[0].category, MyWarning)\n+\n     def test_warning_auto_message(self):\n         with warnings.catch_warnings(record=True) as w:\n             Deprecated = create_deprecated_class('Deprecated', NewName)\n\n@@ -14,6 +14,7 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n \n def create_deprecated_class(name, new_class, clsdict=None,\n                             warn_category=ScrapyDeprecationWarning,\n+                            warn_once=False,\n                             subclass_warn_message=\"{cls} inherits from \"\\\n                                     \"deprecated class {old}, please inherit \"\\\n                                     \"from {new}.\",\n@@ -47,6 +48,8 @@ def create_deprecated_class(name, new_class, clsdict=None,\n     class DeprecatedClass(type):\n \n         deprecated_class = None\n+        warned_on_subclass = False\n+        warned_on_instance = False\n \n         def __new__(metacls, name, bases, clsdict_):\n             cls = super(DeprecatedClass, metacls).__new__(metacls, name, bases, clsdict_)\n@@ -55,8 +58,10 @@ def create_deprecated_class(name, new_class, clsdict=None,\n             return cls\n \n         def __init__(cls, name, bases, clsdict_):\n-            old = cls.__class__.deprecated_class\n-            if cls is not old:\n+            meta = cls.__class__\n+            old = meta.deprecated_class\n+            if (cls is not old) and not (warn_once and meta.warned_on_subclass):\n+                meta.warned_on_subclass = True\n                 msg = subclass_warn_message.format(cls=_clspath(cls),\n                                                    old=_clspath(old),\n                                                    new=_clspath(new_class))\n@@ -79,7 +84,10 @@ def create_deprecated_class(name, new_class, clsdict=None,\n             return any(c in candidates for c in mro)\n \n         def __call__(cls, *args, **kwargs):\n-            if cls is cls.__class__.deprecated_class:\n+            meta = cls.__class__\n+            old = meta.deprecated_class\n+            if (cls is old) and not (warn_once and meta.warned_on_instance):\n+                meta.warned_on_instance = True\n                 msg = instance_warn_message.format(cls=_clspath(cls),\n                                                    new=_clspath(new_class))\n                 warnings.warn(msg, warn_category, stacklevel=2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8c81d6c6a9d9d69df975c7c3a80c8b6c7a05ef0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 8 | Churn Cumulative: 497 | Contributors (this commit): 3 | Commits (past 90d): 19 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -99,11 +99,13 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         self.assertEqual(len(w), 1)\n         assert issubclass(w[0].category, MyWarning)\n \n+        # warns once instantations in the same lineno\n         with warnings.catch_warnings(record=True) as w:\n+            for _ in range(10):\n                 _i1 = Deprecated()\n                 _i2 = Deprecated()\n \n-        self.assertEqual(len(w), 1)\n+        self.assertEqual(len(w), 2)\n         assert issubclass(w[0].category, MyWarning)\n \n     def test_warning_auto_message(self):\n\n@@ -49,7 +49,6 @@ def create_deprecated_class(name, new_class, clsdict=None,\n \n         deprecated_class = None\n         warned_on_subclass = False\n-        warned_on_instance = False\n \n         def __new__(metacls, name, bases, clsdict_):\n             cls = super(DeprecatedClass, metacls).__new__(metacls, name, bases, clsdict_)\n@@ -86,8 +85,7 @@ def create_deprecated_class(name, new_class, clsdict=None,\n         def __call__(cls, *args, **kwargs):\n             meta = cls.__class__\n             old = meta.deprecated_class\n-            if (cls is old) and not (warn_once and meta.warned_on_instance):\n-                meta.warned_on_instance = True\n+            if cls is old:\n                 msg = instance_warn_message.format(cls=_clspath(cls),\n                                                    new=_clspath(new_class))\n                 warnings.warn(msg, warn_category, stacklevel=2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a97b4aa6335622d86d0d2225594efa2021b330b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 502 | Contributors (this commit): 3 | Commits (past 90d): 21 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,6 +31,9 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             class UserClass(Deprecated):\n                 pass\n \n+            class NoWarnOnMe(UserClass):\n+                pass\n+\n         self.assertEqual(len(w), 1)\n         msg = w[0]\n         assert issubclass(msg.category, MyWarning)\n\n@@ -59,7 +59,7 @@ def create_deprecated_class(name, new_class, clsdict=None,\n         def __init__(cls, name, bases, clsdict_):\n             meta = cls.__class__\n             old = meta.deprecated_class\n-            if (cls is not old) and not (warn_once and meta.warned_on_subclass):\n+            if old in bases and not (warn_once and meta.warned_on_subclass):\n                 meta.warned_on_subclass = True\n                 msg = subclass_warn_message.format(cls=_clspath(cls),\n                                                    old=_clspath(old),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1e37b64ecda444e3337b724a2349d4b3d4d45f37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 61 | Lines Deleted: 66 | Files Changed: 2 | Hunks: 14 | Methods Changed: 12 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 127 | Churn Cumulative: 629 | Contributors (this commit): 3 | Commits (past 90d): 23 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -17,99 +17,92 @@ class NewName(SomeBaseClass):\n \n class WarnWhenSubclassedTest(unittest.TestCase):\n \n+    def _mywarnings(self, w, category=MyWarning):\n+        return [x for x in w if x.category is MyWarning]\n+\n     def test_no_warning_on_definition(self):\n         with warnings.catch_warnings(record=True) as w:\n             Deprecated = create_deprecated_class('Deprecated', NewName)\n \n+        w = self._mywarnings(w)\n         self.assertEqual(w, [])\n \n-    def test_warning_on_subclassing(self):\n-        with warnings.catch_warnings(record=True) as w:\n+    def test_subclassing_warning_message(self):\n         Deprecated = create_deprecated_class('Deprecated', NewName,\n                                              warn_category=MyWarning)\n \n+        with warnings.catch_warnings(record=True) as w:\n+            class UserClass(Deprecated):\n+                pass\n+\n+        w = self._mywarnings(w)\n+        self.assertEqual(len(w), 1)\n+        self.assertEqual(\n+            str(w[0].message),\n+            \"scrapy.tests.test_utils_deprecate.UserClass inherits from \"\n+            \"deprecated class scrapy.tests.test_utils_deprecate.Deprecated, \"\n+            \"please inherit from scrapy.tests.test_utils_deprecate.NewName.\"\n+            \" (warning only on first subclass, there may be others)\"\n+        )\n+        self.assertEqual(w[0].lineno, inspect.getsourcelines(UserClass)[1])\n+\n+    def test_subclassing_warns_only_on_direct_childs(self):\n+        Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                             warn_once=False,\n+                                             warn_category=MyWarning)\n+\n+        with warnings.catch_warnings(record=True) as w:\n             class UserClass(Deprecated):\n                 pass\n \n             class NoWarnOnMe(UserClass):\n                 pass\n \n+        w = self._mywarnings(w)\n         self.assertEqual(len(w), 1)\n-        msg = w[0]\n-        assert issubclass(msg.category, MyWarning)\n-        self.assertEqual(\n-            str(msg.message),\n-            \"scrapy.tests.test_utils_deprecate.UserClass inherits from \"\n-            \"deprecated class scrapy.tests.test_utils_deprecate.Deprecated, \"\n-            \"please inherit from scrapy.tests.test_utils_deprecate.NewName.\"\n-        )\n-        self.assertEqual(msg.lineno, inspect.getsourcelines(UserClass)[1])\n+        self.assertIn('UserClass', str(w[0].message))\n \n-    def test_warning_on_instance(self):\n-        with warnings.catch_warnings(record=True) as w:\n+    def test_subclassing_warns_once_by_default(self):\n         Deprecated = create_deprecated_class('Deprecated', NewName,\n                                              warn_category=MyWarning)\n \n+        with warnings.catch_warnings(record=True) as w:\n             class UserClass(Deprecated):\n                 pass\n \n-            _, lineno = Deprecated(), inspect.getlineno(inspect.currentframe())\n-            _ = UserClass()\n+            class FooClass(Deprecated):\n+                pass\n \n-        self.assertEqual(len(w), 2)\n-        msg = w[1]\n-        assert issubclass(msg.category, MyWarning)\n+            class BarClass(Deprecated):\n+                pass\n+\n+        w = self._mywarnings(w)\n+        self.assertEqual(len(w), 1)\n+        self.assertIn('UserClass', str(w[0].message))\n+\n+    def test_warning_on_instance(self):\n+        Deprecated = create_deprecated_class('Deprecated', NewName,\n+                                             warn_category=MyWarning)\n+\n+        # ignore subclassing warnings\n+        with warnings.catch_warnings(record=True):\n+            class UserClass(Deprecated):\n+                pass\n+\n+        with warnings.catch_warnings(record=True) as w:\n+            # warns only once on instantations in the same lineno\n+            for _ in range(10):\n+                _, lineno = Deprecated(), inspect.getlineno(inspect.currentframe())\n+                _ = UserClass()  # subclass instances don't warn\n+\n+        w = self._mywarnings(w)\n+        self.assertEqual(len(w), 1)\n         self.assertEqual(\n-            str(msg.message),\n+            str(w[0].message),\n             \"scrapy.tests.test_utils_deprecate.Deprecated is deprecated, \"\n             \"instantiate scrapy.tests.test_utils_deprecate.NewName instead.\"\n         )\n-        self.assertEqual(msg.lineno, lineno)\n-\n-    def test_warning_shown_everytime(self):\n-        Deprecated = create_deprecated_class('Deprecated', NewName,\n-                                             warn_category=MyWarning)\n-        with warnings.catch_warnings(record=True) as w:\n-            class U1(Deprecated):\n-                pass\n-\n-            class U2(Deprecated):\n-                pass\n-\n-        self.assertEqual(len(w), 2)\n-        assert issubclass(w[0].category, MyWarning)\n-        assert issubclass(w[1].category, MyWarning)\n-\n-        with warnings.catch_warnings(record=True) as w:\n-            _i1 = Deprecated()\n-            _i2 = Deprecated()\n-\n-        self.assertEqual(len(w), 2)\n-        assert issubclass(w[0].category, MyWarning)\n-        assert issubclass(w[1].category, MyWarning)\n-\n-    def test_warning_shown_once(self):\n-        Deprecated = create_deprecated_class('Deprecated', NewName,\n-                                             warn_once=True,\n-                                             warn_category=MyWarning)\n-        with warnings.catch_warnings(record=True) as w:\n-            class U1(Deprecated):\n-                pass\n-\n-            class U2(Deprecated):\n-                pass\n-\n-        self.assertEqual(len(w), 1)\n-        assert issubclass(w[0].category, MyWarning)\n-\n-        # warns once instantations in the same lineno\n-        with warnings.catch_warnings(record=True) as w:\n-            for _ in range(10):\n-                _i1 = Deprecated()\n-                _i2 = Deprecated()\n-\n-        self.assertEqual(len(w), 2)\n-        assert issubclass(w[0].category, MyWarning)\n+        self.assertEqual(w[0].lineno, lineno)\n \n     def test_warning_auto_message(self):\n         with warnings.catch_warnings(record=True) as w:\n\n@@ -14,7 +14,7 @@ def attribute(obj, oldattr, newattr, version='0.12'):\n \n def create_deprecated_class(name, new_class, clsdict=None,\n                             warn_category=ScrapyDeprecationWarning,\n-                            warn_once=False,\n+                            warn_once=True,\n                             subclass_warn_message=\"{cls} inherits from \"\\\n                                     \"deprecated class {old}, please inherit \"\\\n                                     \"from {new}.\",\n@@ -64,6 +64,8 @@ def create_deprecated_class(name, new_class, clsdict=None,\n                 msg = subclass_warn_message.format(cls=_clspath(cls),\n                                                    old=_clspath(old),\n                                                    new=_clspath(new_class))\n+                if warn_once:\n+                    msg += ' (warning only on first subclass, there may be others)'\n                 warnings.warn(msg, warn_category, stacklevel=2)\n             super(DeprecatedClass, cls).__init__(name, bases, clsdict_)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
