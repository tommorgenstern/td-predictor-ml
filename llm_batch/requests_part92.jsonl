{"custom_id": "requests#1185d6520248b8d553e2067d38de8f18762011f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 2965 | Contributors (this commit): 29 | Commits (past 90d): 5 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -754,6 +754,28 @@ class TestRequests:\n         # make sure one can use items multiple times\n         assert list(items) == list(items)\n \n+    def test_cookie_duplicate_names_different_domains(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+        domain1 = 'test1.com'\n+        domain2 = 'test2.com'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value, domain=domain1)\n+        jar.set(key, value, domain=domain2)\n+        assert key in jar\n+\n+    def test_cookie_duplicte_names_raises_cookie_conflict_error(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+        path = 'some_path'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value, path=path)\n+        jar.set(key, value)\n+        with pytest.raises(requests.cookies.CookieConflictError):\n+            jar.get(key)\n+\n     def test_time_elapsed_blank(self, httpbin):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8b36c17185b61471eafa4f1b574a6995e8f38a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 6 | Churn Cumulative: 976 | Contributors (this commit): 22 | Commits (past 90d): 1 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -277,6 +277,12 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n                 dictionary[cookie.name] = cookie.value\n         return dictionary\n \n+    def __contains__(self, name):\n+        try:\n+            return super(RequestsCookieJar, self).__contains__(name)\n+        except CookieConflictError:\n+            return True\n+\n     def __getitem__(self, name):\n         \"\"\"Dict-like __getitem__() for compatibility with client code. Throws\n         exception if there are more than one cookie with name. In that case,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b9517a58bc0d0fe7884bf7f9f0ac79531d645261", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2967 | Contributors (this commit): 29 | Commits (past 90d): 6 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -764,6 +764,8 @@ class TestRequests:\n         jar.set(key, value, domain=domain1)\n         jar.set(key, value, domain=domain2)\n         assert key in jar\n+        items = jar.items()\n+        assert len(items) == 2\n \n     def test_cookie_duplicte_names_raises_cookie_conflict_error(self):\n         key = 'some_cookie'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7088c06d8daef094eca6d154cbd3c1e6c8ea6126", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 144 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,12 +13,12 @@ class TestTestServer:\n         def handler(sock):\n             text = sock.recv(1000)\n             assert text == question \n-            sock.send(answer)\n+            sock.sendall(answer)\n         \n         with Server(handler) as (host, port):\n             sock = socket.socket()\n             sock.connect((host, port))\n-            sock.send(question)\n+            sock.sendall(question)\n             text = sock.recv(1000)\n             assert text == answer\n             sock.close()\n@@ -61,9 +61,9 @@ class TestTestServer:\n         with Server.basic_response_server(wait_to_close_event=block_server) as (host, port):\n             sock = socket.socket()\n             sock.connect((host, port))\n-            sock.send(b'send something')\n+            sock.sendall(b'send something')\n             time.sleep(2.5)\n-            sock.send(b'still alive')\n+            sock.sendall(b'still alive')\n             block_server.set() # release server block\n \n     def test_multiple_requests(self):\n@@ -91,11 +91,11 @@ class TestTestServer:\n             sock2 = socket.socket()\n             \n             sock1.connect(address)\n-            sock1.send(first_request.encode())\n+            sock1.sendall(first_request.encode())\n             sock1.close()\n \n             sock2.connect(address)\n-            sock2.send(second_request.encode())\n+            sock2.sendall(second_request.encode())\n             sock2.close()\n \n         assert server.handler_results[0] == first_request\n@@ -108,7 +108,7 @@ class TestTestServer:\n             sock = socket.socket()\n             sock.connect(address)\n             time.sleep(1.5)\n-            sock.send(b\"hehehe, not received\")\n+            sock.sendall(b\"hehehe, not received\")\n             sock.close()\n \n         assert server.handler_results[0] == \"\"\n@@ -122,7 +122,7 @@ class TestTestServer:\n             sock = socket.socket() \n             sock.connect(address)\n             time.sleep(1.5)\n-            sock.send(data.encode())\n+            sock.sendall(data.encode())\n             sock.close()\n             \n         assert server.handler_results[0] == data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4edf1ae55f361c7cb9b3deab88c67505fa797263", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 150 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -45,14 +45,14 @@ class TestTestServer:\n             r = requests.get('http://{0}:{1}'.format(host, port))\n \n             assert r.status_code == 200\n-            assert r.text == 'roflol'\n+            assert r.text == u'roflol'\n             assert r.headers['Content-Length'] == '6' \n             \n     def test_basic_response(self):\n         with Server.basic_response_server() as (host, port):\n             r = requests.get('http://{0}:{1}'.format(host, port))\n             assert r.status_code == 200\n-            assert r.text == ''\n+            assert r.text == u''\n             assert r.headers['Content-Length'] == '0'\n \n     def test_basic_waiting_server(self):\n@@ -111,7 +111,7 @@ class TestTestServer:\n             sock.sendall(b\"hehehe, not received\")\n             sock.close()\n \n-        assert server.handler_results[0] == \"\"\n+        assert server.handler_results[0] == ''\n \n \n     def test_request_recovery_with_bigger_timeout(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3c3bde5381ab13dabac0d05b6bb31b4668d020c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 893 | Contributors (this commit): 6 | Commits (past 90d): 7 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ from requests.utils import (\n \n from .compat import StringIO, cStringIO\n \n-from testserver.server import Server\n \n \n class TestSuperLen:\n@@ -230,3 +229,4 @@ def test_select_proxies(url, expected):\n     proxies = {'http': 'http://http.proxy',\n                'http://some.host': 'http://some.host.proxy'}\n     assert select_proxy(url, proxies) == expected\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#66c52c3ce0e273250cbb5e470ef4e0daadeac715", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 125 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -2,6 +2,7 @@ import threading\n import socket\n import select\n \n+\n def consume_socket_content(sock, timeout=0.5):\n     chunks = 65536\n     content = \"\"\n@@ -19,6 +20,7 @@ def consume_socket_content(sock, timeout=0.5):\n \n     return content\n \n+\n class Server(threading.Thread):\n     \"\"\"Dummy server using for unit testing\"\"\"\n     WAIT_EVENT_TIMEOUT = 5\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eeafdc143bee0f0356e0f5115029eaef792d4eb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 35 | Churn Cumulative: 3002 | Contributors (this commit): 29 | Commits (past 90d): 8 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,19 @@\n+import threading\n+import requests\n+\n+from testserver.server import Server\n+\n+\n+def test_chunked_upload():\n+    \"\"\"can safely send generators\"\"\"\n+    close_server = threading.Event()\n+    server = Server.basic_response_server(wait_to_close_event=close_server)\n+    data = (i for i in [b'a', b'b', b'c']) \n+\n+    with server as (host, port):\n+        url = 'http://{0}:{1}/'.format(host, port)\n+        r = requests.post(url, data=data, stream=True)\n+        close_server.set() # release server block\n+\n+    assert r.status_code == 200\n+    assert r.request.headers['Transfer-Encoding'] == 'chunked'\n\n@@ -9,7 +9,6 @@ import os\n import pickle\n import collections\n import contextlib\n-import threading\n \n import io\n import requests\n@@ -28,7 +27,6 @@ from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n-from testserver.server import Server\n from .compat import StringIO, u\n \n # Requests to this URL should always fail with a connection timeout (nothing\n@@ -1453,17 +1451,3 @@ def test_vendor_aliases():\n \n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n-\n-def test_chunked_upload():\n-    \"\"\"can safely send generators\"\"\"\n-    block_server = threading.Event()\n-    server = Server.basic_response_server(wait_to_close_event=block_server)\n-    data = (i for i in [b'a', b'b', b'c']) \n-\n-    with server as (host, port):\n-        url = 'http://{0}:{1}/'.format(host, port)\n-        r = requests.post(url, data=data, stream=True)\n-        block_server.set() # release server block\n-\n-    assert r.status_code == 200\n-    assert r.request.headers['Transfer-Encoding'] == 'chunked'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#94d4818fde1df23747e2208b01fd4911a97bb69f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2985 | Contributors (this commit): 29 | Commits (past 90d): 8 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -27,8 +27,8 @@ from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n-from .compat import StringIO, u\n \n+from .compat import StringIO, u\n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n TARPIT = 'http://10.255.255.1'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4abb4c9fbce7635ea89938f52896defa5583c54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 896 | Contributors (this commit): 6 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,6 @@ from requests.utils import (\n from .compat import StringIO, cStringIO\n \n \n-\n class TestSuperLen:\n \n     @pytest.mark.parametrize(\n@@ -152,6 +151,7 @@ class TestContentEncodingDetection:\n         '''.strip()\n         assert get_encodings_from_content(content) == ['HTML5', 'HTML4', 'XML']\n \n+\n USER = PASSWORD = \"%!*'();:@&=+$,/?#[] \"\n ENCODED_USER = compat.quote(USER, '')\n ENCODED_PASSWORD = compat.quote(PASSWORD, '')\n@@ -229,4 +229,3 @@ def test_select_proxies(url, expected):\n     proxies = {'http': 'http://http.proxy',\n                'http://some.host': 'http://some.host.proxy'}\n     assert select_proxy(url, proxies) == expected\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0dff06a7b9eb337ce02838f1e4cb9b042c9f3f52", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2986 | Contributors (this commit): 29 | Commits (past 90d): 9 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -29,6 +29,7 @@ from requests.models import urlencode\n from requests.hooks import default_hooks\n \n from .compat import StringIO, u\n+\n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n TARPIT = 'http://10.255.255.1'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#03743b15ed30a030629231da6ba0ecc23240bf66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 9 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -8,6 +8,7 @@ from testserver.server import Server\n \n class TestTestServer:\n     def test_basic(self):\n+        \"\"\"messages are sent and received properly\"\"\"\n         question = b\"sucess?\"\n         answer = b\"yeah, success\"\n         def handler(sock):\n@@ -24,6 +25,7 @@ class TestTestServer:\n             sock.close()\n \n     def test_server_closes(self):\n+        \"\"\"the server closes when leaving the context manager\"\"\"\n         with Server.basic_response_server() as (host, port):\n             sock = socket.socket()\n             sock.connect((host, port))\n@@ -35,6 +37,7 @@ class TestTestServer:\n             new_sock.connect((host, port))\n \n     def test_text_response(self):\n+        \"\"\"the text_response_server sends the given text\"\"\"\n         server = Server.text_response_server(\n             \"HTTP/1.1 200 OK\\r\\n\" + \n             \"Content-Length: 6\\r\\n\" +\n@@ -49,6 +52,7 @@ class TestTestServer:\n             assert r.headers['Content-Length'] == '6' \n             \n     def test_basic_response(self):\n+        \"\"\"the basic response server returns an empty http response\"\"\"\n         with Server.basic_response_server() as (host, port):\n             r = requests.get('http://{0}:{1}'.format(host, port))\n             assert r.status_code == 200\n@@ -56,6 +60,7 @@ class TestTestServer:\n             assert r.headers['Content-Length'] == '0'\n \n     def test_basic_waiting_server(self):\n+        \"\"\"the server waits for the block_server event to be set before closing\"\"\"\n         block_server = threading.Event()\n \n         with Server.basic_response_server(wait_to_close_event=block_server) as (host, port):\n@@ -67,6 +72,7 @@ class TestTestServer:\n             block_server.set() # release server block\n \n     def test_multiple_requests(self):\n+        \"\"\"multiple requests can be served\"\"\"\n         requests_to_handle = 5\n         \n         server = Server.basic_response_server(requests_to_handle=requests_to_handle)\n@@ -82,6 +88,7 @@ class TestTestServer:\n                 r = requests.get(server_url)\n \n     def test_request_recovery(self):\n+        \"\"\"can check the requests content\"\"\"\n         server = Server.basic_response_server(requests_to_handle=2)\n         first_request = \"put your hands up in the air\"\n         second_request = \"put your hand down in the floor\"\n@@ -102,6 +109,7 @@ class TestTestServer:\n         assert server.handler_results[1] == second_request\n \n     def test_requests_after_timeout_are_not_received(self):\n+        \"\"\"the basic response handler times out when receiving requests\"\"\"\n         server = Server.basic_response_server(request_timeout=1)\n \n         with server as address:\n@@ -115,6 +123,7 @@ class TestTestServer:\n \n \n     def test_request_recovery_with_bigger_timeout(self):\n+        \"\"\"a biggest timeout can be specified\"\"\"\n         server = Server.basic_response_server(request_timeout=3)\n         data = \"bananadine\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c53a685e7d2ff3ca73308acadf85bb5a32661894", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 2988 | Contributors (this commit): 29 | Commits (past 90d): 10 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -767,7 +767,7 @@ class TestRequests:\n         items = jar.items()\n         assert len(items) == 2\n \n-    def test_cookie_duplicte_names_raises_cookie_conflict_error(self):\n+    def test_cookie_duplicate_names_raises_cookie_conflict_error(self):\n         key = 'some_cookie'\n         value = 'some_value'\n         path = 'some_path'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f74a6707afe6f14a9edfb63a0d464e4aa93aca8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2996 | Contributors (this commit): 29 | Commits (past 90d): 11 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -767,6 +767,14 @@ class TestRequests:\n         items = jar.items()\n         assert len(items) == 2\n \n+        # Verify that CookieConflictError is raised if domain is not specified\n+        with pytest.raises(requests.cookies.CookieConflictError):\n+            jar.get(key)\n+\n+        # Verify that CookieConflictError is not raised if domain is specified\n+        cookie = jar.get(key, domain=domain1)\n+        assert cookie == value\n+\n     def test_cookie_duplicate_names_raises_cookie_conflict_error(self):\n         key = 'some_cookie'\n         value = 'some_value'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e034dd1140cb6b6862d5ebc633ba94d332fc2bb2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 20 | Churn Cumulative: 3288 | Contributors (this commit): 60 | Commits (past 90d): 13 | Contributors (cumulative): 64 | DMM Complexity: 0.75\n\nDIFF:\n@@ -83,7 +83,12 @@ def super_len(o):\n                 )\n \n     if hasattr(o, 'tell'):\n+        try:\n             current_position = o.tell()\n+        except (OSError, IOError):\n+            # This can happen in some weird situations, such as when the file\n+            # is actually a special file descriptor like stdin.\n+            current_position = 0\n \n     return max(0, total_length - current_position)\n \n\n@@ -15,7 +15,6 @@ from .compat import StringIO, cStringIO\n \n \n class TestSuperLen:\n-\n     @pytest.mark.parametrize(\n         'stream, value', (\n             (StringIO.StringIO, 'Test'),\n@@ -33,6 +32,20 @@ class TestSuperLen:\n         s.write('foobarbogus')\n         assert super_len(s) == 0\n \n+    @pytest.mark.parametrize('error', [IOError, OSError])\n+    def test_super_len_handles_files_raising_weird_errors_in_tell(self, error):\n+        \"\"\"\n+        If tell() raises errors, assume the cursor is at position zero.\n+        \"\"\"\n+        class BoomFile(object):\n+            def __len__(self):\n+                return 5\n+\n+            def tell(self):\n+                raise error()\n+\n+        assert super_len(BoomFile()) == 5\n+\n \n class TestGetEnvironProxies:\n     \"\"\"Ensures that IP addresses are correctly matches with ranges\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6cc0b56d51d13e2a8553f7abffa06e9fbaf795db", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 3296 | Contributors (this commit): 60 | Commits (past 90d): 15 | Contributors (cumulative): 64 | DMM Complexity: None\n\nDIFF:\n@@ -87,8 +87,10 @@ def super_len(o):\n             current_position = o.tell()\n         except (OSError, IOError):\n             # This can happen in some weird situations, such as when the file\n-            # is actually a special file descriptor like stdin.\n-            current_position = 0\n+            # is actually a special file descriptor like stdin. In this\n+            # instance, we don't know what the length is, so set it to zero and\n+            # let requests chunk it instead.\n+            current_position = total_length\n \n     return max(0, total_length - current_position)\n \n\n@@ -44,7 +44,7 @@ class TestSuperLen:\n             def tell(self):\n                 raise error()\n \n-        assert super_len(BoomFile()) == 5\n+        assert super_len(BoomFile()) == 0\n \n \n class TestGetEnvironProxies:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b473440cc1038ae9e745141ea4084291c7f8ea6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 11 | Files Changed: 3 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 325 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n import threading\n import requests\n \n-from testserver.server import Server\n+from tests.testserver.server import Server\n \n \n def test_chunked_upload():\n\n@@ -4,7 +4,7 @@ import time\n \n import pytest\n import requests\n-from testserver.server import Server\n+from tests.testserver.server import Server\n \n class TestTestServer:\n     def test_basic(self):\n@@ -90,19 +90,19 @@ class TestTestServer:\n     def test_request_recovery(self):\n         \"\"\"can check the requests content\"\"\"\n         server = Server.basic_response_server(requests_to_handle=2)\n-        first_request = \"put your hands up in the air\"\n-        second_request = \"put your hand down in the floor\"\n+        first_request = b'put your hands up in the air'\n+        second_request = b'put your hand down in the floor'\n \n         with server as address:\n             sock1 = socket.socket()\n             sock2 = socket.socket()\n             \n             sock1.connect(address)\n-            sock1.sendall(first_request.encode())\n+            sock1.sendall(first_request)\n             sock1.close()\n \n             sock2.connect(address)\n-            sock2.sendall(second_request.encode())\n+            sock2.sendall(second_request)\n             sock2.close()\n \n         assert server.handler_results[0] == first_request\n@@ -116,22 +116,22 @@ class TestTestServer:\n             sock = socket.socket()\n             sock.connect(address)\n             time.sleep(1.5)\n-            sock.sendall(b\"hehehe, not received\")\n+            sock.sendall(b'hehehe, not received')\n             sock.close()\n \n-        assert server.handler_results[0] == ''\n+        assert server.handler_results[0] == b''\n \n \n     def test_request_recovery_with_bigger_timeout(self):\n         \"\"\"a biggest timeout can be specified\"\"\"\n         server = Server.basic_response_server(request_timeout=3)\n-        data = \"bananadine\"\n+        data = b'bananadine'\n \n         with server as address:\n             sock = socket.socket() \n             sock.connect(address)\n             time.sleep(1.5)\n-            sock.sendall(data.encode())\n+            sock.sendall(data)\n             sock.close()\n             \n         assert server.handler_results[0] == data\n\n@@ -5,7 +5,7 @@ import select\n \n def consume_socket_content(sock, timeout=0.5):\n     chunks = 65536\n-    content = \"\"\n+    content = b''\n     more_to_read = select.select([sock], [], [], timeout)[0]\n \n     while more_to_read:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ee060ba7f36c065bc72019c51c7e649a7f0bf921", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 633 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -63,7 +63,7 @@ from .status_codes import codes\n from .exceptions import (\n     RequestException, Timeout, URLRequired,\n     TooManyRedirects, HTTPError, ConnectionError,\n-    FileModeWarning,\n+    FileModeWarning, ConnectTimeout, ReadTimeout\n )\n \n # Set default logging handler to avoid \"No handler found\" warnings.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eddea4e9142bcfc439b2c4276de0b0532d63bf37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 22 | Churn Cumulative: 22 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,22 @@\n+# coding: utf-8\n+import pytest\n+\n+from requests import hooks\n+\n+\n+def hook(value):\n+    return value[1:]\n+\n+\n+@pytest.mark.parametrize(\n+    'hooks_list, result', (\n+        (hook, 'ata'),\n+        ([hook, lambda x: None, hook], 'ta'),\n+    )\n+)\n+def test_hooks(hooks_list, result):\n+    assert hooks.dispatch_hook('response', {'response': hooks_list}, 'Data') == result\n+\n+\n+def test_default_hooks():\n+    assert hooks.default_hooks() == {'response': []}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#81dc9084b2d5f6e0e553620e1d19786056c0184c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 79 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 10 | Complexity Δ (Sum/Max): 12/12 | Churn Δ: 79 | Churn Cumulative: 79 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,79 @@\n+# coding: utf-8\n+import pytest\n+\n+from requests.structures import CaseInsensitiveDict, LookupDict\n+\n+\n+class TestCaseInsensitiveDict:\n+\n+    @pytest.fixture(autouse=True)\n+    def setup(self):\n+        \"\"\"\n+        CaseInsensitiveDict instance with \"Accept\" header.\n+        \"\"\"\n+        self.case_insensitive_dict = CaseInsensitiveDict()\n+        self.case_insensitive_dict['Accept'] = 'application/json'\n+\n+    def test_list(self):\n+        assert list(self.case_insensitive_dict) == ['Accept']\n+\n+    possible_keys = pytest.mark.parametrize('key', ('accept', 'ACCEPT', 'aCcEpT', 'Accept'))\n+\n+    @possible_keys\n+    def test_getitem(self, key):\n+        assert self.case_insensitive_dict[key] == 'application/json'\n+\n+    @possible_keys\n+    def test_delitem(self, key):\n+        del self.case_insensitive_dict[key]\n+        assert key not in self.case_insensitive_dict\n+\n+    def test_lower_items(self):\n+        assert list(self.case_insensitive_dict.lower_items()) == [('accept', 'application/json')]\n+\n+    def test_repr(self):\n+        assert repr(self.case_insensitive_dict) == \"{'Accept': 'application/json'}\"\n+\n+    def test_copy(self):\n+        copy = self.case_insensitive_dict.copy()\n+        assert copy is not self.case_insensitive_dict\n+        assert copy == self.case_insensitive_dict\n+\n+    @pytest.mark.parametrize(\n+        'other, result', (\n+            ({'AccePT': 'application/json'}, True),\n+            ({}, False),\n+            (None, False)\n+        )\n+    )\n+    def test_instance_equality(self, other, result):\n+        assert (self.case_insensitive_dict == other) is result\n+\n+\n+class TestLookupDict:\n+\n+    @pytest.fixture(autouse=True)\n+    def setup(self):\n+        \"\"\"\n+        LookupDict instance with \"bad_gateway\" attribute.\n+        \"\"\"\n+        self.lookup_dict = LookupDict('test')\n+        self.lookup_dict.bad_gateway = 502\n+\n+    def test_repr(self):\n+        assert repr(self.lookup_dict) == \"<lookup 'test'>\"\n+\n+    get_item_parameters = pytest.mark.parametrize(\n+        'key, value', (\n+            ('bad_gateway', 502),\n+            ('not_a_key', None)\n+        )\n+    )\n+\n+    @get_item_parameters\n+    def test_getitem(self, key, value):\n+        assert self.lookup_dict[key] == value\n+\n+    @get_item_parameters\n+    def test_get(self, key, value):\n+        assert self.lookup_dict.get(key) == value\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ca9d71bb5822f6d0c45062b474b5bb17f1a1dc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 4055 | Contributors (this commit): 60 | Commits (past 90d): 18 | Contributors (cumulative): 64 | DMM Complexity: 0.6\n\nDIFF:\n@@ -434,6 +434,9 @@ class HTTPAdapter(BaseAdapter):\n             if isinstance(e.reason, ResponseError):\n                 raise RetryError(e, request=request)\n \n+            if isinstance(e.reason, _ProxyError):\n+                raise ProxyError(e, request=request)\n+\n             raise ConnectionError(e, request=request)\n \n         except ClosedPoolError as e:\n\n@@ -21,7 +21,8 @@ from requests.compat import (\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n-    MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects)\n+    MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n+    ProxyError)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -315,6 +316,11 @@ class TestRequests:\n         with pytest.raises(exception):\n             requests.get(url, timeout=1)\n \n+    def test_proxy_error(self):\n+        # any proxy related error (address resolution, no route to host, etc) should result in a ProxyError\n+        with pytest.raises(ProxyError):\n+            requests.get('http://localhost:1', proxies={'http': 'non-resolvable-address'})\n+\n     def test_basicauth_with_netrc(self, httpbin):\n         auth = ('user', 'pass')\n         wrong_auth = ('wronguser', 'wrongpass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f24d56a1ce658a20577517d05bcb92e44e3ffc53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 4 | Methods Changed: 8 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 83 | Churn Cumulative: 6189 | Contributors (this commit): 91 | Commits (past 90d): 17 | Contributors (cumulative): 103 | DMM Complexity: 0.9736842105263158\n\nDIFF:\n@@ -116,7 +116,6 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n@@ -140,22 +139,7 @@ class SessionRedirectMixin(object):\n             if resp.is_permanent_redirect and req.url != prepared_request.url:\n                 self.redirect_cache[req.url] = prepared_request.url\n \n-            # http://tools.ietf.org/html/rfc7231#section-6.4.4\n-            if (resp.status_code == codes.see_other and\n-                    method != 'HEAD'):\n-                method = 'GET'\n-\n-            # Do what the browsers do, despite standards...\n-            # First, turn 302s into GETs.\n-            if resp.status_code == codes.found and method != 'HEAD':\n-                method = 'GET'\n-\n-            # Second, if a POST is responded to with a 301, turn it into a GET.\n-            # This bizarre behaviour is explained in Issue 1704.\n-            if resp.status_code == codes.moved and method == 'POST':\n-                method = 'GET'\n-\n-            prepared_request.method = method\n+            self.rebuild_method(prepared_request, resp)\n \n             # https://github.com/kennethreitz/requests/issues/1084\n             if resp.status_code not in (codes.temporary_redirect, codes.permanent_redirect):\n@@ -262,6 +246,28 @@ class SessionRedirectMixin(object):\n \n         return new_proxies\n \n+    def rebuild_method(self, prepared_request, response):\n+        \"\"\"When being redirected we may want to change the method of the request\n+        based on certain specs or browser behavior.\n+        \"\"\"\n+        method = prepared_request.method\n+\n+        # http://tools.ietf.org/html/rfc7231#section-6.4.4\n+        if response.status_code == codes.see_other and method != 'HEAD':\n+            method = 'GET'\n+\n+        # Do what the browsers do, despite standards...\n+        # First, turn 302s into GETs.\n+        if response.status_code == codes.found and method != 'HEAD':\n+            method = 'GET'\n+\n+        # Second, if a POST is responded to with a 301, turn it into a GET.\n+        # This bizarre behaviour is explained in Issue 1704.\n+        if response.status_code == codes.moved and method == 'POST':\n+            method = 'GET'\n+\n+        prepared_request.method = method\n+\n \n class Session(SessionRedirectMixin):\n     \"\"\"A Requests session.\n\n@@ -162,6 +162,49 @@ class TestRequests:\n         else:\n             pytest.fail('Expected custom max number of redirects to be respected but was not')\n \n+    def test_http_301_changes_post_to_get(self, httpbin):\n+        r = requests.post(httpbin('status', '301'))\n+        assert r.status_code == 200\n+        assert r.request.method == 'GET'\n+        assert r.history[0].status_code == 301\n+        assert r.history[0].is_redirect\n+\n+    def test_http_301_doesnt_change_head_to_get(self, httpbin):\n+        r = requests.head(httpbin('status', '301'), allow_redirects=True)\n+        print(r.content)\n+        assert r.status_code == 200\n+        assert r.request.method == 'HEAD'\n+        assert r.history[0].status_code == 301\n+        assert r.history[0].is_redirect\n+\n+    def test_http_302_changes_post_to_get(self, httpbin):\n+        r = requests.post(httpbin('status', '302'))\n+        assert r.status_code == 200\n+        assert r.request.method == 'GET'\n+        assert r.history[0].status_code == 302\n+        assert r.history[0].is_redirect\n+\n+    def test_http_302_doesnt_change_head_to_get(self, httpbin):\n+        r = requests.head(httpbin('status', '302'), allow_redirects=True)\n+        assert r.status_code == 200\n+        assert r.request.method == 'HEAD'\n+        assert r.history[0].status_code == 302\n+        assert r.history[0].is_redirect\n+\n+    def test_http_303_changes_post_to_get(self, httpbin):\n+        r = requests.post(httpbin('status', '303'))\n+        assert r.status_code == 200\n+        assert r.request.method == 'GET'\n+        assert r.history[0].status_code == 303\n+        assert r.history[0].is_redirect\n+\n+    def test_http_303_doesnt_change_head_to_get(self, httpbin):\n+        r = requests.head(httpbin('status', '303'), allow_redirects=True)\n+        assert r.status_code == 200\n+        assert r.request.method == 'HEAD'\n+        assert r.history[0].status_code == 303\n+        assert r.history[0].is_redirect\n+\n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n     #     self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8a577050dc4345b87afc0cd67193537fac41350", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 10600 | Contributors (this commit): 170 | Commits (past 90d): 2 | Contributors (cumulative): 192 | DMM Complexity: None\n\nDIFF:\n@@ -24,7 +24,11 @@ def request(method, url, **kwargs):\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': ('filename', fileobj)}``) for multipart encoding upload.\n+    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n+        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n+        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n+        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n+        to add for the file.\n     :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n     :param timeout: (optional) How long to wait for the server to send data\n         before giving up, as a float, or a :ref:`(connect timeout, read\n\n@@ -103,8 +103,10 @@ class RequestEncodingMixin(object):\n         \"\"\"Build the body for a multipart/form-data request.\n \n         Will successfully encode files when passed as a dict or a list of\n-        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n+        tuples. Order is retained if data is a list of tuples but arbitrary\n         if parameters are supplied as a dict.\n+        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)\n+        or 4-tuples (filename, fileobj, contentype, custom_headers).\n \n         \"\"\"\n         if (not files):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#831d8e0a1e817c4c9deb0de7f79fec98865b4c58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 127 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -53,6 +53,7 @@ _codes = {\n     416: ('requested_range_not_satisfiable', 'requested_range', 'range_not_satisfiable'),\n     417: ('expectation_failed',),\n     418: ('im_a_teapot', 'teapot', 'i_am_a_teapot'),\n+    421: ('misdirected_request',),\n     422: ('unprocessable_entity', 'unprocessable'),\n     423: ('locked',),\n     424: ('failed_dependency', 'dependency'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2246a52a364b794f38daf073b085d7d669446e73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 12/12 | Churn Δ: 45 | Churn Cumulative: 3092 | Contributors (this commit): 32 | Commits (past 90d): 14 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -482,6 +482,51 @@ class TestRequests:\n         with pytest.raises(ValueError):\n             requests.post(url, files=['bad file data'])\n \n+    def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):\n+\n+        class BufferedStream(object):\n+            def __init__(self, data):\n+                if isinstance(data, buffer):\n+                    self.data = data\n+                else:\n+                    self.data = buffer(data)\n+                self.length = len(self.data)\n+                self.index = 0\n+\n+            def __len__(self):\n+                return self.length\n+\n+            def read(self, size=None):\n+                if size:\n+                    ret = buffer(self.data, self.index, size)\n+                    self.index += size\n+                else:\n+                    ret = buffer(self.data, self.index)\n+                    self.index = self.length\n+                return ret\n+\n+            def tell(self):\n+                return self.index\n+\n+            def seek(self, offset, where=0):\n+                if where == 0:\n+                    self.index = offset\n+                elif where == 1:\n+                    self.index += offset\n+                elif where == 2:\n+                    self.index = self.length + offset\n+\n+        test = BufferedStream('test')\n+        post1 = requests.post(httpbin('post'), data=test)\n+        assert post1.status_code == 200\n+        assert post1.json()['data'] == 'test'\n+\n+        test = BufferedStream('test')\n+        test.seek(2)\n+        post2 = requests.post(httpbin('post'), data=test)\n+        assert post2.status_code == 200\n+        assert post2.json()['data'] == 'st'\n+\n     def test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin):\n \n         url = httpbin('post')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fb230709a8d35d8d2973eab3365cb8f9664cfa90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9434 | Contributors (this commit): 156 | Commits (past 90d): 2 | Contributors (cumulative): 156 | DMM Complexity: 0.0\n\nDIFF:\n@@ -465,9 +465,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare_content_length(self, body):\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n+            curr_pos = body.tell()\n             body.seek(0, 2)\n-            self.headers['Content-Length'] = builtin_str(body.tell())\n-            body.seek(0, 0)\n+            end_pos = body.tell()\n+            self.headers['Content-Length'] = builtin_str(max(0, end_pos - curr_pos))\n+            body.seek(curr_pos, 0)\n         elif body is not None:\n             l = super_len(body)\n             if l:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#219490ea7fe0907bb12222e913cb4d1a63483e3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 3107 | Contributors (this commit): 32 | Commits (past 90d): 15 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -484,12 +484,9 @@ class TestRequests:\n \n     def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):\n \n-        class BufferedStream(object):\n+        class TestStream(object):\n             def __init__(self, data):\n-                if isinstance(data, buffer):\n-                    self.data = data\n-                else:\n-                    self.data = buffer(data)\n+                self.data = data.encode()\n                 self.length = len(self.data)\n                 self.index = 0\n \n@@ -498,10 +495,10 @@ class TestRequests:\n \n             def read(self, size=None):\n                 if size:\n-                    ret = buffer(self.data, self.index, size)\n+                    ret = self.data[self.index:self.index + size]\n                     self.index += size\n                 else:\n-                    ret = buffer(self.data, self.index)\n+                    ret = self.data[self.index:]\n                     self.index = self.length\n                 return ret\n \n@@ -516,12 +513,12 @@ class TestRequests:\n                 elif where == 2:\n                     self.index = self.length + offset\n \n-        test = BufferedStream('test')\n+        test = TestStream('test')\n         post1 = requests.post(httpbin('post'), data=test)\n         assert post1.status_code == 200\n         assert post1.json()['data'] == 'test'\n \n-        test = BufferedStream('test')\n+        test = TestStream('test')\n         test.seek(2)\n         post2 = requests.post(httpbin('post'), data=test)\n         assert post2.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
