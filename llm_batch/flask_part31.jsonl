{"custom_id": "flask#e78e2a1641e5b7ad538d93154ee59445f4d4eaf7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2947 | Contributors (this commit): 17 | Commits (past 90d): 14 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -150,6 +150,13 @@ class Flask(_PackageBoundObject):\n \n     #: The class that is used for the :data:`~flask.g` instance.\n     #:\n+    #: Example use cases for a custom class:\n+    #:\n+    #: 1. Store arbitrary attributes on flask.g.\n+    #: 2. Add a property for lazy per-request database connectors.\n+    #: 3. Return None instead of AttributeError on expected attributes.\n+    #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.\n+    #:\n     #: .. versionadded:: 0.9\n     request_globals_class = _RequestGlobals\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#12dcba8849d153c7e13e99b6bcf57922e1a97240", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 23 | Churn Cumulative: 1598 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -912,6 +912,29 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(c.get('/de/about').data, '/foo')\n         self.assert_equal(c.get('/foo').data, '/en/about')\n         \n+    def test_inject_blueprint_url_defaults(self):\n+        app = flask.Flask(__name__)\n+        bp = flask.Blueprint('foo.bar.baz', __name__, \n+                       template_folder='template')\n+\n+        @bp.url_defaults\n+        def bp_defaults(endpoint, values):\n+            values['page'] = 'login'\n+        @bp.route('/<page>')\n+        def view(page): pass\n+\n+        app.register_blueprint(bp)\n+\n+        values = dict()\n+        app.inject_url_defaults('foo.bar.baz.view', values)\n+        expected = dict(page='login')\n+        self.assert_equal(values, expected) \n+\n+        with app.test_request_context('/somepage'):\n+            url = flask.url_for('foo.bar.baz.view')\n+        expected = '/login'\n+        self.assert_equal(url, expected)\n+\n     def test_debug_mode_complains_after_first_request(self):\n         app = flask.Flask(__name__)\n         app.debug = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2053d04db0f303430f5f6c5bc6e97b8bec46c399", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 22 | Files Changed: 3 | Hunks: 15 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 48 | Churn Cumulative: 5928 | Contributors (this commit): 28 | Commits (past 90d): 36 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,7 @@ from itertools import chain\n from functools import update_wrapper\n \n from werkzeug.datastructures import ImmutableDict\n-from werkzeug.routing import Map, Rule, RequestRedirect\n+from werkzeug.routing import Map, Rule, RequestRedirect, BuildError\n from werkzeug.exceptions import HTTPException, InternalServerError, \\\n      MethodNotAllowed, BadRequest\n \n@@ -341,16 +341,14 @@ class Flask(_PackageBoundObject):\n         #: decorator.\n         self.error_handler_spec = {None: self._error_handlers}\n \n-        #: If not `None`, this function is called when :meth:`url_for` raises\n-        #: :exc:`~werkzeug.routing.BuildError`, with the call signature::\n-        #:\n-        #:     self.build_error_handler(error, endpoint, **values)\n-        #:\n-        #: Here, `error` is the instance of `BuildError`, and `endpoint` and\n-        #: `**values` are the arguments passed into :meth:`url_for`.\n+        #: A list of functions that are called when :meth:`url_for` raises a\n+        #: :exc:`~werkzeug.routing.BuildError`.  Each function registered here\n+        #: is called with `error`, `endpoint` and `values`.  If a function\n+        #: returns `None` or raises a `BuildError` the next function is\n+        #: tried.\n         #:\n         #: .. versionadded:: 0.9\n-        self.build_error_handler = None\n+        self.url_build_error_handlers = []\n \n         #: A dictionary with lists of functions that should be called at the\n         #: beginning of the request.  The key of the dictionary is the name of\n@@ -1490,19 +1488,24 @@ class Flask(_PackageBoundObject):\n         for func in funcs:\n             func(endpoint, values)\n \n-    def handle_build_error(self, error, endpoint, **values):\n+    def handle_url_build_error(self, error, endpoint, values):\n         \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n-\n-        Calls :attr:`build_error_handler` if it is not `None`.\n         \"\"\"\n-        if self.build_error_handler is None:\n         exc_type, exc_value, tb = sys.exc_info()\n-            if exc_value is error:\n-                # exception is current, raise in context of original traceback.\n+        for handler in self.url_build_error_handlers:\n+            try:\n+                rv = handler(error, endpoint, values)\n+                if rv is not None:\n+                    return rv\n+            except BuildError, error:\n+                pass\n+\n+        # At this point we want to reraise the exception.  If the error is\n+        # still the same one we can reraise it with the original traceback,\n+        # otherwise we raise it from here.\n+        if error is exc_value:\n             raise exc_type, exc_value, tb\n-            else:\n         raise error\n-        return self.build_error_handler(error, endpoint, **values)\n \n     def preprocess_request(self):\n         \"\"\"Called before the actual request dispatching and will\n\n@@ -11,7 +11,6 @@\n \n from __future__ import with_statement\n \n-import imp\n import os\n import sys\n import pkgutil\n@@ -303,10 +302,12 @@ def url_for(endpoint, **values):\n         rv = url_adapter.build(endpoint, values, method=method,\n                                force_external=external)\n     except BuildError, error:\n+        # We need to inject the values again so that the app callback can\n+        # deal with that sort of stuff.\n         values['_external'] = external\n         values['_anchor'] = anchor\n         values['_method'] = method\n-        return appctx.app.handle_build_error(error, endpoint, **values)\n+        return appctx.app.handle_url_build_error(error, endpoint, values)\n \n     rv = url_adapter.build(endpoint, values, method=method,\n                            force_external=external)\n\n@@ -712,13 +712,13 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             raise RuntimeError('Test case where BuildError is not current.')\n         except RuntimeError:\n-            self.assertRaises(BuildError, app.handle_build_error, error, 'spam')\n+            self.assertRaises(BuildError, app.handle_url_build_error, error, 'spam', {})\n \n         # Test a custom handler.\n-        def handler(error, endpoint, **values):\n+        def handler(error, endpoint, values):\n             # Just a test.\n             return '/test_handler/'\n-        app.build_error_handler = handler\n+        app.url_build_error_handlers.append(handler)\n         with app.test_request_context():\n             self.assert_equal(flask.url_for('spam'), '/test_handler/')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dbfd406a21191c26c2987ffd11f7c49b8733cd82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 2993 | Contributors (this commit): 17 | Commits (past 90d): 16 | Contributors (cumulative): 17 | DMM Complexity: 0.0\n\nDIFF:\n@@ -915,6 +915,10 @@ class Flask(_PackageBoundObject):\n         # a tuple of only `GET` as default.\n         if methods is None:\n             methods = getattr(view_func, 'methods', None) or ('GET',)\n+        methods = set(methods)\n+\n+        # Methods that should always be added\n+        required_methods = set(getattr(view_func, 'required_methods', ()))\n \n         # starting with Flask 0.8 the view_func object can disable and\n         # force-enable the automatic options handling.\n@@ -923,11 +927,14 @@ class Flask(_PackageBoundObject):\n \n         if provide_automatic_options is None:\n             if 'OPTIONS' not in methods:\n-                methods = tuple(methods) + ('OPTIONS',)\n                 provide_automatic_options = True\n+                required_methods.add('OPTIONS')\n             else:\n                 provide_automatic_options = False\n \n+        # Add the required methods now.\n+        methods |= required_methods\n+\n         # due to a werkzeug bug we need to make sure that the defaults are\n         # None if they are an empty dictionary.  This should not be necessary\n         # with Werkzeug 0.7\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#086348e2f2874fb701048d5e1390cfe674de1f70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 2 | Files Changed: 4 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 50 | Churn Cumulative: 5184 | Contributors (this commit): 19 | Commits (past 90d): 35 | Contributors (cumulative): 30 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,8 @@ from .helpers import url_for, jsonify, json_available, flash, \\\n     get_template_attribute, make_response, safe_join\n from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n-from .ctx import has_request_context, has_app_context\n+from .ctx import has_request_context, has_app_context, \\\n+     after_this_request\n from .module import Module\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n\n@@ -1555,7 +1555,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         ctx = _request_ctx_stack.top\n         bp = ctx.request.blueprint\n-        funcs = ()\n+        funcs = ctx._after_request_functions\n         if bp is not None and bp in self.after_request_funcs:\n             funcs = reversed(self.after_request_funcs[bp])\n         if None in self.after_request_funcs:\n\n@@ -11,6 +11,7 @@\n \n import sys\n \n+from functools import partial\n from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n@@ -30,6 +31,31 @@ def _push_app_if_necessary(app):\n         return ctx\n \n \n+def after_this_request(f):\n+    \"\"\"Executes a function after this request.  This is useful to modify\n+    response objects.  The function is passed the response object and has\n+    to return the same or a new one.\n+\n+    Example::\n+\n+        @app.route('/')\n+        def index():\n+            @after_this_request\n+            def add_header():\n+                response.headers['X-Foo'] = 'Parachute'\n+                return response\n+            return 'Hello World!'\n+\n+    This is more useful if a function other than the view function wants to\n+    modify a response.  For instance think of a decorator that wants to add\n+    some headers without converting the return value into a response object.\n+\n+    .. versionadded:: 0.9\n+    \"\"\"\n+    _request_ctx_stack.top._after_request_functions.append(f)\n+    return f\n+\n+\n def has_request_context():\n     \"\"\"If you have code that wants to test if a request context is there or\n     not this function can be used.  For instance, you may want to take advantage\n@@ -153,6 +179,10 @@ class RequestContext(object):\n         # context, it will be stored there\n         self._pushed_application_context = None\n \n+        # Functions that should be executed after the request on the response\n+        # object.  These will even be called in case of an error.\n+        self._after_request_functions = []\n+\n         self.match_request()\n \n         # XXX: Support for deprecated functionality.  This is going away with\n\n@@ -411,6 +411,21 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_('after' in evts)\n         self.assert_equal(rv, 'request|after')\n \n+    def test_after_request_processing(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            @flask.after_this_request\n+            def foo(response):\n+                response.headers['X-Foo'] = 'a header'\n+                return response\n+            return 'Test'\n+        c = app.test_client()\n+        resp = c.get('/')\n+        self.assertEqual(resp.status_code, 200)\n+        self.assertEqual(resp.headers['X-Foo'], 'a header')\n+\n     def test_teardown_request_handler(self):\n         called = []\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#444698d42b6cd2bb356d3ac6a7fa9f2be7e0df55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 255 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,7 @@\n     Usage::\n \n         import flaskext_compat\n+        flaskext_compat.activate()\n         from flask.ext import foo\n \n     :copyright: (c) 2011 by Armin Ronacher.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#447afc3525b009ed369943e13437d98e07898bdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 1350 | Contributors (this commit): 18 | Commits (past 90d): 16 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -133,13 +133,17 @@ def jsonify(*args, **kwargs):\n     \"\"\"\n     if __debug__:\n         _assert_have_json()\n+\n+    padded = kwargs.get('padded', False)\n     if 'padded' in kwargs:\n-        if isinstance(kwargs['padded'], str):\n-            callback = request.args.get(kwargs['padded']) or 'jsonp'\n+        del kwargs['padded']\n+\n+    if padded:\n+        if isinstance(padded, str):\n+            callback = request.args.get(padded) or 'jsonp'\n         else:\n             callback = request.args.get('callback') or \\\n                        request.args.get('jsonp') or 'jsonp'\n-        del kwargs['padded']\n         json_str = json.dumps(dict(*args, **kwargs), indent=None)\n         content = str(callback) + \"(\" + json_str + \")\"\n         return current_app.response_class(content, mimetype='application/javascript')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4b21e2d38ccf66f236c5f1c8a10bd9d7904f2599", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1352 | Contributors (this commit): 19 | Commits (past 90d): 11 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -533,7 +533,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     rv.cache_control.public = True\n     if cache_timeout is None:\n         cache_timeout = current_app.get_send_file_max_age(filename)\n-    if cache_timeout:\n+    if cache_timeout is not None:\n         rv.cache_control.max_age = cache_timeout\n         rv.expires = int(time() + cache_timeout)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b04827283ea36cc456367f1ac4e0700b90b71283", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 44 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 45 | Churn Cumulative: 1973 | Contributors (this commit): 20 | Commits (past 90d): 15 | Contributors (cumulative): 24 | DMM Complexity: 0.53125\n\nDIFF:\n@@ -118,35 +118,9 @@ def jsonify(*args, **kwargs):\n     information about this, have a look at :ref:`json-security`.\n \n     .. versionadded:: 0.2\n-\n-    .. versionadded:: 0.9\n-        If the ``padded`` argument is true, the JSON object will be padded\n-        for JSONP calls and the response mimetype will be changed to\n-        ``application/javascript``. By default, the request arguments ``callback``\n-        and ``jsonp`` will be used as the name for the callback function.\n-        This will work with jQuery and most other JavaScript libraries\n-        by default.\n-\n-        If the ``padded`` argument is a string, jsonify will look for\n-        the request argument with the same name and use that value as the\n-        callback-function name.\n     \"\"\"\n     if __debug__:\n         _assert_have_json()\n-\n-    padded = kwargs.get('padded', False)\n-    if 'padded' in kwargs:\n-        del kwargs['padded']\n-\n-    if padded:\n-        if isinstance(padded, str):\n-            callback = request.args.get(padded) or 'jsonp'\n-        else:\n-            callback = request.args.get('callback') or \\\n-                       request.args.get('jsonp') or 'jsonp'\n-        json_str = json.dumps(dict(*args, **kwargs), indent=None)\n-        content = str(callback) + \"(\" + json_str + \")\"\n-        return current_app.response_class(content, mimetype='application/javascript')\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n\n@@ -73,28 +73,11 @@ class JSONTestCase(FlaskTestCase):\n         @app.route('/dict')\n         def return_dict():\n             return flask.jsonify(d)\n-        @app.route(\"/unpadded\")\n-        def return_padded_false():\n-            return flask.jsonify(d, padded=False)\n-        @app.route(\"/padded\")\n-        def return_padded_true():\n-            return flask.jsonify(d, padded=True)\n-        @app.route(\"/padded_custom\")\n-        def return_padded_json_custom_callback():\n-            return flask.jsonify(d, padded='my_func_name')\n         c = app.test_client()\n-        for url in '/kw', '/dict', '/unpadded':\n+        for url in '/kw', '/dict':\n             rv = c.get(url)\n             self.assert_equal(rv.mimetype, 'application/json')\n             self.assert_equal(flask.json.loads(rv.data), d)\n-        for get_arg in 'callback=funcName', 'jsonp=funcName':\n-            rv = c.get('/padded?' + get_arg)\n-            self.assert_( rv.data.startswith(\"funcName(\") )\n-            self.assert_( rv.data.endswith(\")\") )\n-            rv_json = rv.data.split('(')[1].split(')')[0]\n-            self.assert_equal(flask.json.loads(rv_json), d)\n-        rv = c.get('/padded_custom?my_func_name=funcName')\n-        self.assert_( rv.data.startswith(\"funcName(\") )\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1f3e667b5d9ffb60c218c250df27144793a5acdb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 385 | Contributors (this commit): 7 | Commits (past 90d): 9 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -41,7 +41,7 @@ def after_this_request(f):\n         @app.route('/')\n         def index():\n             @after_this_request\n-            def add_header():\n+            def add_header(response):\n                 response.headers['X-Foo'] = 'Parachute'\n                 return response\n             return 'Hello World!'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8071f11328ab2b767608c5c63d0bad72d9408120", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 14 | Churn Cumulative: 1392 | Contributors (this commit): 19 | Commits (past 90d): 13 | Contributors (cumulative): 19 | DMM Complexity: 0.0\n\nDIFF:\n@@ -616,17 +616,29 @@ def get_root_path(import_name):\n \n     Not to be confused with the package path returned by :func:`find_package`.\n     \"\"\"\n+    # Module already imported and has a file attribute.  Use that first.\n+    mod = sys.modules.get(import_name)\n+    if mod is not None and hasattr(mod, '__file__'):\n+        return os.path.dirname(os.path.abspath(mod.__file__))\n+\n+    # Next attempt: check the loader.\n     loader = pkgutil.get_loader(import_name)\n+\n+    # Loader does not exist or we're referring to an unloaded main module\n+    # or a main module without path (interactive sessions), go with the\n+    # current working directory.\n     if loader is None or import_name == '__main__':\n-        # import name is not found, or interactive/main module\n         return os.getcwd()\n+\n     # For .egg, zipimporter does not have get_filename until Python 2.7.\n+    # Some other loaders might exhibit the same behavior.\n     if hasattr(loader, 'get_filename'):\n         filepath = loader.get_filename(import_name)\n     else:\n         # Fall back to imports.\n         __import__(import_name)\n         filepath = sys.modules[import_name].__file__\n+\n     # filepath is import_name.py for a module, or __init__.py for a package.\n     return os.path.dirname(os.path.abspath(filepath))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#558750494f6f99b1272218c35d86e6452484e77c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 386 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,6 @@\n \n import sys\n \n-from functools import partial\n from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#43c6a1ede87da5c20d8b5c7db995cf2d22eb40b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 389 | Contributors (this commit): 7 | Commits (past 90d): 11 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -179,7 +179,8 @@ class RequestContext(object):\n         self._pushed_application_context = None\n \n         # Functions that should be executed after the request on the response\n-        # object.  These will even be called in case of an error.\n+        # object.  These will be called before the regular \"after_request\"\n+        # functions.\n         self._after_request_functions = []\n \n         self.match_request()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d5218997d927be869dd55ef04542e1bbc1e69653", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 184 | Lines Deleted: 19 | Files Changed: 5 | Hunks: 18 | Methods Changed: 27 | Complexity Δ (Sum/Max): 22/13 | Churn Δ: 203 | Churn Cumulative: 2850 | Contributors (this commit): 24 | Commits (past 90d): 39 | Contributors (cumulative): 36 | DMM Complexity: 0.8739495798319328\n\nDIFF:\n@@ -22,7 +22,8 @@ from .app import Flask, Request, Response\n from .config import Config\n from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n-    get_template_attribute, make_response, safe_join\n+    get_template_attribute, make_response, safe_join, \\\n+    stream_with_context\n from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n from .ctx import has_request_context, has_app_context, \\\n\n@@ -22,14 +22,6 @@ class _RequestGlobals(object):\n     pass\n \n \n-def _push_app_if_necessary(app):\n-    top = _app_ctx_stack.top\n-    if top is None or top.app != app:\n-        ctx = app.app_context()\n-        ctx.push()\n-        return ctx\n-\n-\n def after_this_request(f):\n     \"\"\"Executes a function after this request.  This is useful to modify\n     response objects.  The function is passed the response object and has\n@@ -110,12 +102,19 @@ class AppContext(object):\n         self.app = app\n         self.url_adapter = app.create_url_adapter(None)\n \n+        # Like request context, app contexts can be pushed multiple times\n+        # but there a basic \"refcount\" is enough to track them.\n+        self._refcnt = 0\n+\n     def push(self):\n         \"\"\"Binds the app context to the current context.\"\"\"\n+        self._refcnt += 1\n         _app_ctx_stack.push(self)\n \n     def pop(self, exc=None):\n         \"\"\"Pops the app context.\"\"\"\n+        self._refcnt -= 1\n+        if self._refcnt <= 0:\n             if exc is None:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_appcontext(exc)\n@@ -128,7 +127,7 @@ class AppContext(object):\n         return self\n \n     def __exit__(self, exc_type, exc_value, tb):\n-        self.pop()\n+        self.pop(exc_value)\n \n \n class RequestContext(object):\n@@ -169,15 +168,16 @@ class RequestContext(object):\n         self.flashes = None\n         self.session = None\n \n+        # Request contexts can be pushed multiple times and interleaved with\n+        # other request contexts.  Now only if the last level is popped we\n+        # get rid of them.  Additionally if an application context is missing\n+        # one is created implicitly so for each level we add this information\n+        self._implicit_app_ctx_stack = []\n+\n         # indicator if the context was preserved.  Next time another context\n         # is pushed the preserved context is popped.\n         self.preserved = False\n \n-        # Indicates if pushing this request context also triggered the pushing\n-        # of an application context.  If it implicitly pushed an application\n-        # context, it will be stored there\n-        self._pushed_application_context = None\n-\n         # Functions that should be executed after the request on the response\n         # object.  These will be called before the regular \"after_request\"\n         # functions.\n@@ -222,7 +222,13 @@ class RequestContext(object):\n \n         # Before we push the request context we have to ensure that there\n         # is an application context.\n-        self._pushed_application_context = _push_app_if_necessary(self.app)\n+        app_ctx = _app_ctx_stack.top\n+        if app_ctx is None or app_ctx.app != self.app:\n+            app_ctx = self.app.app_context()\n+            app_ctx.push()\n+            self._implicit_app_ctx_stack.append(app_ctx)\n+        else:\n+            self._implicit_app_ctx_stack.append(None)\n \n         _request_ctx_stack.push(self)\n \n@@ -241,22 +247,28 @@ class RequestContext(object):\n         .. versionchanged:: 0.9\n            Added the `exc` argument.\n         \"\"\"\n+        app_ctx = self._implicit_app_ctx_stack.pop()\n+\n+        clear_request = False\n+        if not self._implicit_app_ctx_stack:\n             self.preserved = False\n             if exc is None:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_request(exc)\n+            clear_request = True\n+\n         rv = _request_ctx_stack.pop()\n         assert rv is self, 'Popped wrong request context.  (%r instead of %r)' \\\n             % (rv, self)\n \n         # get rid of circular dependencies at the end of the request\n         # so that we don't require the GC to be active.\n+        if clear_request:\n             rv.request.environ['werkzeug.request'] = None\n \n         # Get rid of the app as well if necessary.\n-        if self._pushed_application_context:\n-            self._pushed_application_context.pop(exc)\n-            self._pushed_application_context = None\n+        if app_ctx is not None:\n+            app_ctx.pop(exc)\n \n     def __enter__(self):\n         self.push()\n\n@@ -21,6 +21,7 @@ from zlib import adler32\n from threading import RLock\n from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n+from functools import update_wrapper\n \n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n@@ -92,6 +93,78 @@ def _endpoint_from_view_func(view_func):\n     return view_func.__name__\n \n \n+def stream_with_context(generator_or_function):\n+    \"\"\"Request contexts disappear when the response is started on the server.\n+    This is done for efficiency reasons and to make it less likely to encounter\n+    memory leaks with badly written WSGI middlewares.  The downside is that if\n+    you are using streamed responses, the generator cannot access request bound\n+    information any more.\n+\n+    This function however can help you keep the context around for longer::\n+\n+        from flask import stream_with_context, request, Response\n+\n+        @app.route('/stream')\n+        def streamed_response():\n+            @stream_with_context\n+            def generate():\n+                yield 'Hello '\n+                yield request.args['name']\n+                yield '!'\n+            return Response(generate())\n+\n+    Alternatively it can also be used around a specific generator:\n+\n+        from flask import stream_with_context, request, Response\n+\n+        @app.route('/stream')\n+        def streamed_response():\n+            def generate():\n+                yield 'Hello '\n+                yield request.args['name']\n+                yield '!'\n+            return Response(stream_with_context(generate()))\n+\n+    .. versionadded:: 0.9\n+    \"\"\"\n+    try:\n+        gen = iter(generator_or_function)\n+    except TypeError:\n+        def decorator(*args, **kwargs):\n+            gen = generator_or_function()\n+            return stream_with_context(gen)\n+        return update_wrapper(decorator, generator_or_function)\n+\n+    def generator():\n+        ctx = _request_ctx_stack.top\n+        if ctx is None:\n+            raise RuntimeError('Attempted to stream with context but '\n+                'there was no context in the first place to keep around.')\n+        with ctx:\n+            # Dummy sentinel.  Has to be inside the context block or we're\n+            # not actually keeping the context around.\n+            yield None\n+\n+            # The try/finally is here so that if someone passes a WSGI level\n+            # iterator in we're still running the cleanup logic.  Generators\n+            # don't need that because they are closed on their destruction\n+            # automatically.\n+            try:\n+                for item in gen:\n+                    yield item\n+            finally:\n+                if hasattr(gen, 'close'):\n+                    gen.close()\n+\n+    # The trick is to start the generator.  Then the code execution runs until\n+    # the first dummy None is yielded at which point the context was already\n+    # pushed.  This item is discarded.  Then when the iteration continues the\n+    # real generator is executed.\n+    wrapped_g = generator()\n+    wrapped_g.next()\n+    return wrapped_g\n+\n+\n def jsonify(*args, **kwargs):\n     \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n     the given arguments with an `application/json` mimetype.  The arguments\n\n@@ -75,6 +75,26 @@ class AppContextTestCase(FlaskTestCase):\n             self.assert_equal(\n                 flask.render_template_string('{{ g.spam }}'), 'eggs')\n \n+    def test_context_refcounts(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def teardown_req(error=None):\n+            called.append('request')\n+        @app.teardown_appcontext\n+        def teardown_app(error=None):\n+            called.append('app')\n+        @app.route('/')\n+        def index():\n+            with flask._app_ctx_stack.top:\n+                with flask._request_ctx_stack.top:\n+                    pass\n+            self.assert_(flask._request_ctx_stack.request.environ\n+                ['werkzeug.request'] is not None)\n+        c = app.test_client()\n+        c.get('/')\n+        self.assertEqual(called, ['request', 'app'])\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -397,6 +397,64 @@ class NoImportsTestCase(FlaskTestCase):\n             self.fail('Flask(import_name) is importing import_name.')\n \n \n+class StreamingTestCase(FlaskTestCase):\n+\n+    def test_streaming_with_context(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            def generate():\n+                yield 'Hello '\n+                yield flask.request.args['name']\n+                yield '!'\n+            return flask.Response(flask.stream_with_context(generate()))\n+        c = app.test_client()\n+        rv = c.get('/?name=World')\n+        self.assertEqual(rv.data, 'Hello World!')\n+\n+    def test_streaming_with_context_as_decorator(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            @flask.stream_with_context\n+            def generate():\n+                yield 'Hello '\n+                yield flask.request.args['name']\n+                yield '!'\n+            return flask.Response(generate())\n+        c = app.test_client()\n+        rv = c.get('/?name=World')\n+        self.assertEqual(rv.data, 'Hello World!')\n+\n+    def test_streaming_with_context_and_custom_close(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        called = []\n+        class Wrapper(object):\n+            def __init__(self, gen):\n+                self._gen = gen\n+            def __iter__(self):\n+                return self\n+            def close(self):\n+                called.append(42)\n+            def next(self):\n+                return self._gen.next()\n+        @app.route('/')\n+        def index():\n+            def generate():\n+                yield 'Hello '\n+                yield flask.request.args['name']\n+                yield '!'\n+            return flask.Response(flask.stream_with_context(\n+                Wrapper(generate())))\n+        c = app.test_client()\n+        rv = c.get('/?name=World')\n+        self.assertEqual(rv.data, 'Hello World!')\n+        self.assertEqual(called, [42])\n+\n+\n def suite():\n     suite = unittest.TestSuite()\n     if flask.json_available:\n@@ -404,4 +462,5 @@ def suite():\n     suite.addTest(unittest.makeSuite(SendfileTestCase))\n     suite.addTest(unittest.makeSuite(LoggingTestCase))\n     suite.addTest(unittest.makeSuite(NoImportsTestCase))\n+    suite.addTest(unittest.makeSuite(StreamingTestCase))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#19def9606ac50bd308ea283e283cbcf62498d6c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 419 | Contributors (this commit): 11 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.8.1-dev'\n+__version__ = '0.8.1'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -77,7 +77,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.8.1-dev',\n+    version='0.8.1',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d4415dd6653adb25b89b6276dd140141266ba46b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1467 | Contributors (this commit): 19 | Commits (past 90d): 14 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def stream_with_context(generator_or_function):\n                 yield '!'\n             return Response(generate())\n \n-    Alternatively it can also be used around a specific generator:\n+    Alternatively it can also be used around a specific generator::\n \n         from flask import stream_with_context, request, Response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1beb0f2e7f8c60df41cd7b198c1ed1748a0fea3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1469 | Contributors (this commit): 19 | Commits (past 90d): 15 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def stream_with_context(generator_or_function):\n                 yield '!'\n             return Response(generate())\n \n-    Alternatively it can also be used around a specific generator:\n+    Alternatively it can also be used around a specific generator::\n \n         from flask import stream_with_context, request, Response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#20a542fc8ac6dadbcbac92e84fb554e00ccc897a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 2 | Churn Cumulative: 2997 | Contributors (this commit): 18 | Commits (past 90d): 4 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -1446,7 +1446,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionchanged:: 0.9\n            This can now also be called without a request object when the\n-           UR adapter is created for the application context.\n+           URL adapter is created for the application context.\n         \"\"\"\n         if request is not None:\n             return self.url_map.bind_to_environ(request.environ,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed1619adadc56641b8ab1ba2c03d45023960aaf2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1473 | Contributors (this commit): 20 | Commits (past 90d): 9 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -305,7 +305,9 @@ def url_for(endpoint, **values):\n \n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n-    :param _external: if set to `True`, an absolute URL is generated.\n+    :param _external: if set to `True`, an absolute URL is generated. Server\n+      address can be changed via `SERVER_NAME` configuration variable which\n+      defaults to `localhost`.\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e3b3e05052ea36456cb557b8799b7b0ed00865bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1475 | Contributors (this commit): 20 | Commits (past 90d): 10 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def stream_with_context(generator_or_function):\n                 yield '!'\n             return Response(generate())\n \n-    Alternatively it can also be used around a specific generator:\n+    Alternatively it can also be used around a specific generator::\n \n         from flask import stream_with_context, request, Response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4df3bf2058954624f9376fd16774a769299dc40a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 105 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 27/21 | Churn Δ: 106 | Churn Cumulative: 1958 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: 0.8095238095238095\n\nDIFF:\n@@ -10,8 +10,12 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import cPickle as pickle\n from datetime import datetime\n from werkzeug.contrib.securecookie import SecureCookie\n+from werkzeug.http import http_date, parse_date\n+from .helpers import json, _assert_have_json\n+from . import Markup\n \n \n class SessionMixin(object):\n@@ -41,10 +45,74 @@ class SessionMixin(object):\n     modified = True\n \n \n+class TaggedJSONSerializer(object):\n+    \"\"\"A customized JSON serializer that supports a few extra types that\n+    we take for granted when serializing (tuples, markup objects, datetime).\n+    \"\"\"\n+\n+    def dumps(self, value):\n+        if __debug__:\n+            _assert_have_json()\n+        def _tag(value):\n+            if isinstance(value, tuple):\n+                return {'##t': [_tag(x) for x in value]}\n+            elif callable(getattr(value, '__html__', None)):\n+                return {'##m': unicode(value.__html__())}\n+            elif isinstance(value, list):\n+                return [_tag(x) for x in value]\n+            elif isinstance(value, datetime):\n+                return {'##d': http_date(value)}\n+            elif isinstance(value, dict):\n+                return dict((k, _tag(v)) for k, v in value.iteritems())\n+            return value\n+        return json.dumps(_tag(value), separators=(',', ':'))\n+\n+    def loads(self, value):\n+        if __debug__:\n+            _assert_have_json()\n+        def object_hook(obj):\n+            if len(obj) != 1:\n+                return obj\n+            the_key, the_value = obj.iteritems().next()\n+            if the_key == '##t':\n+                return tuple(the_value)\n+            elif the_key == '##m':\n+                return Markup(the_value)\n+            elif the_key == '##d':\n+                return parse_date(the_value)\n+            return obj\n+        return json.loads(value, object_hook=object_hook)\n+\n+\n+session_json_serializer = TaggedJSONSerializer()\n+\n+\n class SecureCookieSession(SecureCookie, SessionMixin):\n     \"\"\"Expands the session with support for switching between permanent\n-    and non-permanent sessions.\n+    and non-permanent sessions and changes the default pickle based\n+    serialization format to a tagged json one.\n     \"\"\"\n+    serialization_method = session_json_serializer\n+\n+\n+class _UpgradeSerializer(object):\n+    def dumps(self, value):\n+        return session_json_serializer.dumps(value)\n+    def loads(self, value):\n+        try:\n+            return session_json_serializer.loads(value)\n+        except Exception:\n+            return pickle.loads(value)\n+\n+\n+class UpgradeSecureCookieSession(SecureCookieSession):\n+    \"\"\"This cookie sesion implementation tries json first but will also\n+    support pickle based session.  This exists mainly to upgrade existing\n+    pickle based users transparently to json.\n+\n+    .. versionadded:: 0.10\n+    \"\"\"\n+    serialization_method = _UpgradeSerializer()\n \n \n class NullSession(SecureCookieSession):\n@@ -203,3 +271,13 @@ class SecureCookieSessionInterface(SessionInterface):\n             session.save_cookie(response, app.session_cookie_name, path=path,\n                                 expires=expires, httponly=httponly,\n                                 secure=secure, domain=domain)\n+\n+\n+class UpgradeSecureCookieSessionInterface(SecureCookieSessionInterface):\n+    \"\"\"This session interface works exactly like the regular one but uses\n+    the :class:`UpgradeSecureCookieSession` classes to upgrade from pickle\n+    sessions to JSON sessions.\n+\n+    .. versionadded:: 0.10\n+    \"\"\"\n+    session_class = UpgradeSecureCookieSession\n\n@@ -13,6 +13,7 @@ from __future__ import with_statement\n \n import re\n import flask\n+import pickle\n import unittest\n from datetime import datetime\n from threading import Thread\n@@ -297,6 +298,31 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(c.get('/').data, 'None')\n         self.assert_equal(c.get('/').data, '42')\n \n+    def test_session_special_types(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'development-key'\n+        app.testing = True\n+        now = datetime.utcnow().replace(microsecond=0)\n+\n+        @app.after_request\n+        def modify_session(response):\n+            flask.session['m'] = flask.Markup('Hello!')\n+            flask.session['dt'] = now\n+            flask.session['t'] = (1, 2, 3)\n+            return response\n+\n+        @app.route('/')\n+        def dump_session_contents():\n+            return pickle.dumps(dict(flask.session))\n+\n+        c = app.test_client()\n+        c.get('/')\n+        rv = pickle.loads(c.get('/').data)\n+        self.assert_equal(rv['m'], flask.Markup('Hello!'))\n+        self.assert_equal(type(rv['m']), flask.Markup)\n+        self.assert_equal(rv['dt'], now)\n+        self.assert_equal(rv['t'], (1, 2, 3))\n+\n     def test_flashes(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b87919348104774e9c959fc00976966e38161129", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 423 | Contributors (this commit): 11 | Commits (past 90d): 5 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.9'\n+__version__ = '0.10-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -77,7 +77,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.9',\n+    version='0.10-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
