{"custom_id": "fastapi#65568065e0488756c37b4a52c0644b005a09773a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 10 | Churn Cumulative: 4186 | Contributors (this commit): 4 | Commits (past 90d): 22 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,7 +2,7 @@ from typing import Any, Callable, Dict, List, Optional, Type\n \n from fastapi import routing\n from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n-from fastapi.openapi.models import AdditionalResponse, AdditionalResponseDescription\n+from fastapi.openapi.models import AdditionalResponse\n from fastapi.openapi.utils import get_openapi\n from pydantic import BaseModel\n from starlette.applications import Starlette\n\n@@ -1,6 +1,6 @@\n import logging\n from enum import Enum\n-from typing import Any, Callable, ClassVar, Dict, List, Optional, Type, Union\n+from typing import Any, Dict, List, Optional, Union\n \n from pydantic import BaseModel, Schema as PSchema\n from pydantic.fields import Field\n\n@@ -141,11 +141,7 @@ class APIRoute(routing.Route):\n         self.response_description = response_description\n         self.additional_responses: Dict[int, AdditionalResponseDescription] = {}\n         existed_codes = [self.status_code, 422]\n-        if isinstance(additional_responses, dict):\n-            self.additional_responses = additional_responses.copy()\n         for add_response in additional_responses:\n-            if isinstance(add_response, int):\n-                continue\n             assert (\n                 add_response.status_code not in existed_codes\n             ), f\"(Duplicated Status Code): Response with status code [{add_response.status_code}] already defined!\"\n@@ -156,7 +152,7 @@ class APIRoute(routing.Route):\n                 valid_response_models = all(\n                     [issubclass(m, BaseModel) for m in response_models]\n                 )\n-            except TypeError as te:\n+            except TypeError:\n                 valid_response_models = False\n             if not valid_response_models:\n                 raise ValueError(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#25fb4239cc2751b9608e7e92e3b9b42be31a9337", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 943 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import pytest\n from fastapi import FastAPI\n from fastapi.openapi.models import AdditionalResponse\n from pydantic import BaseModel\n@@ -409,6 +410,19 @@ openapi_schema = {\n }\n \n \n+def test_uncompatible_response_model_undecorated():\n+    app = FastAPI()\n+\n+    class NotBaseModel:\n+        pass\n+\n+    response_403 = AdditionalResponse(\n+        status_code=403, description=\"Forbidden\", models=[NotBaseModel]\n+    )\n+    with pytest.raises(ValueError):\n+        app.add_api_route(\"/\", get_not_decorated, additional_responses=[response_403])\n+\n+\n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7514ac6fb0233e7f165cf5e7e65c05d5a690cf1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 24 | Churn Cumulative: 3220 | Contributors (this commit): 3 | Commits (past 90d): 14 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -147,23 +147,10 @@ class APIRoute(routing.Route):\n             ), f\"(Duplicated Status Code): Response with status code [{add_response.status_code}] already defined!\"\n             existed_codes.append(add_response.status_code)\n             response_models: List[Any] = [m for m in add_response.models]\n-            valid_response_models = True\n-            try:\n-                valid_response_models = all(\n-                    [issubclass(m, BaseModel) for m in response_models]\n-                )\n-            except TypeError:\n-                valid_response_models = False\n-            if not valid_response_models:\n-                raise ValueError(\n-                    \"All response models must be \"\n-                    \"a subclass of `pydantic.BaseModel` \"\n-                    \"model.\"\n-                )\n+            schema_field = None\n             if add_response.content_type == \"application/json\" or lenient_issubclass(\n                 content_type, JSONResponse\n-            ):\n-                if len(response_models):\n+            ) and len(response_models):\n                 schema_field = Field(\n                     name=f\"Additional_response_{add_response.status_code}\",\n                     type_=Union[tuple(response_models)],\n@@ -173,10 +160,6 @@ class APIRoute(routing.Route):\n                     model_config=UnconstrainedConfig,\n                     schema=Schema(None),\n                 )\n-                else:\n-                    schema_field = None\n-            else:\n-                schema_field = None\n             add_resp_description = AdditionalResponseDescription(\n                 description=add_response.description,\n                 content_type=add_response.content_type,\n\n@@ -2,6 +2,7 @@ import pytest\n from fastapi import FastAPI\n from fastapi.openapi.models import AdditionalResponse\n from pydantic import BaseModel\n+from pydantic.error_wrappers import ValidationError\n from starlette.responses import JSONResponse\n from starlette.testclient import TestClient\n \n@@ -419,7 +420,7 @@ def test_uncompatible_response_model_undecorated():\n     response_403 = AdditionalResponse(\n         status_code=403, description=\"Forbidden\", models=[NotBaseModel]\n     )\n-    with pytest.raises(ValueError):\n+    with pytest.raises(RuntimeError):\n         app.add_api_route(\"/\", get_not_decorated, additional_responses=[response_403])\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#eda9b28338c79bfd28f008507fe92599ec2ea815", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 3229 | Contributors (this commit): 3 | Commits (past 90d): 16 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -148,9 +148,11 @@ class APIRoute(routing.Route):\n             existed_codes.append(add_response.status_code)\n             response_models: List[Any] = [m for m in add_response.models]\n             schema_field = None\n-            if add_response.content_type == \"application/json\" or lenient_issubclass(\n-                content_type, JSONResponse\n-            ) and len(response_models):\n+            if (\n+                add_response.content_type == \"application/json\"\n+                or lenient_issubclass(content_type, JSONResponse)\n+                and len(response_models)\n+            ):\n                 schema_field = Field(\n                     name=f\"Additional_response_{add_response.status_code}\",\n                     type_=Union[tuple(response_models)],\n\n@@ -2,7 +2,6 @@ import pytest\n from fastapi import FastAPI\n from fastapi.openapi.models import AdditionalResponse\n from pydantic import BaseModel\n-from pydantic.error_wrappers import ValidationError\n from starlette.responses import JSONResponse\n from starlette.testclient import TestClient\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#834723cf2c1c039c14301dcd2e4069bc0471fb07", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 143 | Lines Deleted: 0 | Files Changed: 5 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/2 | Churn Δ: 143 | Churn Cumulative: 143 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+items = {}\n+\n+\n+@app.on_event(\"startup\")\n+async def startup_event():\n+    items[\"foo\"] = {\"name\": \"Fighters\"}\n+    items[\"bar\"] = {\"name\": \"Tenders\"}\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"shutdown\")\n+def startup_event():\n+    with open(\"log.txt\", mode=\"a\") as log:\n+        log.write(\"Application shutdown\")\n+\n+\n+@app.get(\"/items/\")\n+async def read_items():\n+    return [{\"name\": \"Foo\"}]\n\n\n@@ -0,0 +1,79 @@\n+from starlette.testclient import TestClient\n+\n+from events.tutorial001 import app\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_events():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200\n+        assert response.json() == openapi_schema\n+        response = client.get(\"/items/foo\")\n+        assert response.status_code == 200\n+        assert response.json() == {\"name\": \"Fighters\"}\n\n@@ -0,0 +1,34 @@\n+from starlette.testclient import TestClient\n+\n+from events.tutorial002 import app\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_events():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200\n+        assert response.json() == openapi_schema\n+        response = client.get(\"/items/\")\n+        assert response.status_code == 200\n+        assert response.json() == [{\"name\": \"Foo\"}]\n+    with open(\"log.txt\") as log:\n+        assert \"Application shutdown\" in log.read()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6d77e2ac5f2cadc63424f2d85d8d8cded2975922", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/6 | Churn Δ: 57 | Churn Cumulative: 2339 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 4 | DMM Complexity: 0.8709677419354839\n\nDIFF:\n@@ -271,6 +271,10 @@ class APIRouter(routing.Router):\n                     include_in_schema=route.include_in_schema,\n                     name=route.name,\n                 )\n+            elif isinstance(route, routing.WebSocketRoute):\n+                self.add_websocket_route(\n+                    prefix + route.path, route.endpoint, name=route.name\n+                )\n \n     def get(\n         self,\n\n@@ -0,0 +1,53 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.testclient import TestClient\n+from starlette.websockets import WebSocket\n+\n+router = APIRouter()\n+prefix_router = APIRouter()\n+app = FastAPI()\n+\n+\n+@app.websocket_route(\"/\")\n+async def index(websocket: WebSocket):\n+    await websocket.accept()\n+    await websocket.send_text(\"Hello, world!\")\n+    await websocket.close()\n+\n+\n+@router.websocket_route(\"/router\")\n+async def routerindex(websocket: WebSocket):\n+    await websocket.accept()\n+    await websocket.send_text(\"Hello, router!\")\n+    await websocket.close()\n+\n+\n+@prefix_router.websocket_route(\"/\")\n+async def routerprefixindex(websocket: WebSocket):\n+    await websocket.accept()\n+    await websocket.send_text(\"Hello, router with prefix!\")\n+    await websocket.close()\n+\n+\n+app.include_router(router)\n+app.include_router(prefix_router, prefix=\"/prefix\")\n+\n+\n+def test_app():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/\") as websocket:\n+        data = websocket.receive_text()\n+        assert data == \"Hello, world!\"\n+\n+\n+def test_router():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/router\") as websocket:\n+        data = websocket.receive_text()\n+        assert data == \"Hello, router!\"\n+\n+\n+def test_prefix_router():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/prefix/\") as websocket:\n+        data = websocket.receive_text()\n+        assert data == \"Hello, router with prefix!\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9b045932607c6c5bbc9757bea5cb7c4019c63ea3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 8 | Files Changed: 9 | Hunks: 16 | Methods Changed: 13 | Complexity Δ (Sum/Max): 14/4 | Churn Δ: 128 | Churn Cumulative: 3140 | Contributors (this commit): 3 | Commits (past 90d): 52 | Contributors (cumulative): 11 | DMM Complexity: 0.65\n\nDIFF:\n@@ -0,0 +1,15 @@\n+from fastapi import BackgroundTasks, FastAPI\n+\n+app = FastAPI()\n+\n+\n+def write_notification(email: str, message=\"\"):\n+    with open(\"log.txt\", mode=\"w\") as email_file:\n+        content = f\"notification for {email}: {message}\"\n+        email_file.write(content)\n+\n+\n+@app.post(\"/send-notification/{email}\")\n+async def send_notification(email: str, background_tasks: BackgroundTasks):\n+    background_tasks.add_task(write_notification, email, message=\"some notification\")\n+    return {\"message\": \"Notification sent in the background\"}\n\n@@ -0,0 +1,24 @@\n+from fastapi import BackgroundTasks, Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+def write_log(message: str):\n+    with open(\"log.txt\", mode=\"a\") as log:\n+        log.write(message)\n+\n+\n+def get_query(background_tasks: BackgroundTasks, q: str = None):\n+    if q:\n+        message = f\"found query: {q}\\n\"\n+        background_tasks.add_task(write_log, message)\n+    return q\n+\n+\n+@app.post(\"/send-notification/{email}\")\n+async def send_notification(\n+    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n+):\n+    message = f\"message to {email}\\n\"\n+    background_tasks.add_task(write_log, message)\n+    return {\"message\": \"Message sent\"}\n\n@@ -2,6 +2,8 @@\n \n __version__ = \"0.9.1\"\n \n+from starlette.background import BackgroundTasks\n+\n from .applications import FastAPI\n from .datastructures import UploadFile\n from .exceptions import HTTPException\n\n@@ -26,6 +26,7 @@ class Dependant:\n         name: str = None,\n         call: Callable = None,\n         request_param_name: str = None,\n+        background_tasks_param_name: str = None,\n     ) -> None:\n         self.path_params = path_params or []\n         self.query_params = query_params or []\n@@ -35,5 +36,6 @@ class Dependant:\n         self.dependencies = dependencies or []\n         self.security_requirements = security_schemes or []\n         self.request_param_name = request_param_name\n+        self.background_tasks_param_name = background_tasks_param_name\n         self.name = name\n         self.call = call\n\n@@ -3,7 +3,18 @@ import inspect\n from copy import deepcopy\n from datetime import date, datetime, time, timedelta\n from decimal import Decimal\n-from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type, Union\n+from typing import (\n+    Any,\n+    Callable,\n+    Dict,\n+    List,\n+    Mapping,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Type,\n+    Union,\n+)\n from uuid import UUID\n \n from fastapi import params\n@@ -16,6 +27,7 @@ from pydantic.errors import MissingError\n from pydantic.fields import Field, Required, Shape\n from pydantic.schema import get_annotation_from_schema\n from pydantic.utils import lenient_issubclass\n+from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n from starlette.datastructures import UploadFile\n from starlette.requests import Headers, QueryParams, Request\n@@ -125,6 +137,8 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n             )\n         elif lenient_issubclass(param.annotation, Request):\n             dependant.request_param_name = param_name\n+        elif lenient_issubclass(param.annotation, BackgroundTasks):\n+            dependant.background_tasks_param_name = param_name\n         elif not isinstance(param.default, params.Depends):\n             add_param_to_body_fields(param=param, dependant=dependant)\n     return dependant\n@@ -215,13 +229,20 @@ def is_coroutine_callable(call: Callable) -> bool:\n \n \n async def solve_dependencies(\n-    *, request: Request, dependant: Dependant, body: Dict[str, Any] = None\n-) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n+    *,\n+    request: Request,\n+    dependant: Dependant,\n+    body: Dict[str, Any] = None,\n+    background_tasks: BackgroundTasks = None,\n+) -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks]]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n     for sub_dependant in dependant.dependencies:\n-        sub_values, sub_errors = await solve_dependencies(\n-            request=request, dependant=sub_dependant, body=body\n+        sub_values, sub_errors, background_tasks = await solve_dependencies(\n+            request=request,\n+            dependant=sub_dependant,\n+            body=body,\n+            background_tasks=background_tasks,\n         )\n         if sub_errors:\n             errors.extend(sub_errors)\n@@ -258,7 +279,11 @@ async def solve_dependencies(\n         errors.extend(body_errors)\n     if dependant.request_param_name:\n         values[dependant.request_param_name] = request\n-    return values, errors\n+    if dependant.background_tasks_param_name:\n+        if background_tasks is None:\n+            background_tasks = BackgroundTasks()\n+        values[dependant.background_tasks_param_name] = background_tasks\n+    return values, errors, background_tasks\n \n \n def request_params_to_args(\n\n@@ -68,7 +68,7 @@ def get_app(\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             )\n-        values, errors = await solve_dependencies(\n+        values, errors, background_tasks = await solve_dependencies(\n             request=request, dependant=dependant, body=body\n         )\n         if errors:\n@@ -83,11 +83,17 @@ def get_app(\n             else:\n                 raw_response = await run_in_threadpool(dependant.call, **values)\n             if isinstance(raw_response, Response):\n+                if raw_response.background is None:\n+                    raw_response.background = background_tasks\n                 return raw_response\n             response_data = serialize_response(\n                 field=response_field, response=raw_response\n             )\n-            return content_type(content=response_data, status_code=status_code)\n+            return content_type(\n+                content=response_data,\n+                status_code=status_code,\n+                background=background_tasks,\n+            )\n \n     return app\n \n\n\n@@ -0,0 +1,19 @@\n+import os\n+from pathlib import Path\n+\n+from starlette.testclient import TestClient\n+\n+from background_tasks.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+def test():\n+    log = Path(\"log.txt\")\n+    if log.is_file():\n+        os.remove(log)  # pragma: no cover\n+    response = client.post(\"/send-notification/foo@example.com\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Notification sent in the background\"}\n+    with open(\"./log.txt\") as f:\n+        assert \"notification for foo@example.com: some notification\" in f.read()\n\n@@ -0,0 +1,19 @@\n+import os\n+from pathlib import Path\n+\n+from starlette.testclient import TestClient\n+\n+from background_tasks.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+\n+def test():\n+    log = Path(\"log.txt\")\n+    if log.is_file():\n+        os.remove(log)  # pragma: no cover\n+    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Message sent\"}\n+    with open(\"./log.txt\") as f:\n+        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5a6e47bd495b7ee0bb2f4eb6dce570686c21c554", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 95 | Contributors (this commit): 1 | Commits (past 90d): 26 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.9.1\"\n+__version__ = \"0.10.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1c2ecbb89a7f1ce79f470f78a99af975de884c66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 196 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 196 | Churn Cumulative: 196 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,65 @@\n+from typing import List\n+\n+import databases\n+import sqlalchemy\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+# SQLAlchemy specific code, as with any other app\n+DATABASE_URL = \"sqlite:///./test.db\"\n+# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n+\n+database = databases.Database(DATABASE_URL)\n+\n+metadata = sqlalchemy.MetaData()\n+\n+notes = sqlalchemy.Table(\n+    \"notes\",\n+    metadata,\n+    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n+    sqlalchemy.Column(\"text\", sqlalchemy.String),\n+    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n+)\n+\n+\n+engine = sqlalchemy.create_engine(\n+    DATABASE_URL, connect_args={\"check_same_thread\": False}\n+)\n+metadata.create_all(engine)\n+\n+\n+class NoteIn(BaseModel):\n+    text: str\n+    completed: bool\n+\n+\n+class Note(BaseModel):\n+    id: int\n+    text: str\n+    completed: bool\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+async def startup():\n+    await database.connect()\n+\n+\n+@app.on_event(\"shutdown\")\n+async def shutdown():\n+    await database.disconnect()\n+\n+\n+@app.get(\"/notes/\", response_model=List[Note])\n+async def read_notes():\n+    query = notes.select()\n+    return await database.fetch_all(query)\n+\n+\n+@app.post(\"/notes/\", response_model=Note)\n+async def create_note(note: NoteIn):\n+    query = notes.insert().values(text=note.text, completed=note.completed)\n+    last_record_id = await database.execute(query)\n+    return {**note.dict(), \"id\": last_record_id}\n\n\n@@ -0,0 +1,131 @@\n+from starlette.testclient import TestClient\n+\n+from async_sql_databases.tutorial001 import app\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/notes/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Notes\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Note\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Notes Get\",\n+                \"operationId\": \"read_notes_notes__get\",\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Note\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Note Post\",\n+                \"operationId\": \"create_note_notes__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/NoteIn\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"NoteIn\": {\n+                \"title\": \"NoteIn\",\n+                \"required\": [\"text\", \"completed\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n+                    \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"Note\": {\n+                \"title\": \"Note\",\n+                \"required\": [\"id\", \"text\", \"completed\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n+                    \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    with TestClient(app) as client:\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200\n+        assert response.json() == openapi_schema\n+\n+\n+def test_create_read():\n+    with TestClient(app) as client:\n+        note = {\"text\": \"Foo bar\", \"completed\": False}\n+        response = client.post(\"/notes/\", json=note)\n+        assert response.status_code == 200\n+        data = response.json()\n+        assert data[\"text\"] == note[\"text\"]\n+        assert data[\"completed\"] == note[\"completed\"]\n+        assert \"id\" in data\n+        response = client.get(f\"/notes/\")\n+        assert response.status_code == 200\n+        assert data in response.json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b0f7961b65a8c3e1135d0151c435c3cf4a349359", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 97 | Contributors (this commit): 1 | Commits (past 90d): 27 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.10.0\"\n+__version__ = \"0.10.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dc1e94d05f92d7b75f398557ce438b0c56ebcf8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 242 | Lines Deleted: 0 | Files Changed: 5 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/3 | Churn Δ: 242 | Churn Cumulative: 242 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,35 @@\n+from typing import Union\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class BaseItem(BaseModel):\n+    description: str\n+    type: str\n+\n+\n+class CarItem(BaseItem):\n+    type = \"car\"\n+\n+\n+class PlaneItem(BaseItem):\n+    type = \"plane\"\n+    size: int\n+\n+\n+items = {\n+    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n+    \"item2\": {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    },\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\n+async def read_item(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,22 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str\n+\n+\n+items = [\n+    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+]\n+\n+\n+@app.get(\"/items/\", response_model=List[Item])\n+async def read_items():\n+    return items\n\n\n@@ -0,0 +1,125 @@\n+from starlette.testclient import TestClient\n+\n+from extra_models.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Item\",\n+                                    \"anyOf\": [\n+                                        {\"$ref\": \"#/components/schemas/PlaneItem\"},\n+                                        {\"$ref\": \"#/components/schemas/CarItem\"},\n+                                    ],\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"PlaneItem\": {\n+                \"title\": \"PlaneItem\",\n+                \"required\": [\"description\", \"size\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n+                    \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"CarItem\": {\n+                \"title\": \"CarItem\",\n+                \"required\": [\"description\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_car():\n+    response = client.get(\"/items/item1\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"description\": \"All my friends drive a low rider\",\n+        \"type\": \"car\",\n+    }\n+\n+\n+def test_get_plane():\n+    response = client.get(\"/items/item2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    }\n\n@@ -0,0 +1,60 @@\n+from starlette.testclient import TestClient\n+\n+from extra_models.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Items\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"description\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [\n+        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b7d184363fad5f6b55d15ec3a3a844aa81092bbd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 113 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 116 | Churn Cumulative: 583 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -99,7 +99,7 @@ class SchemaBase(BaseModel):\n     not_: Optional[List[Any]] = PSchema(None, alias=\"not\")  # type: ignore\n     items: Optional[Any] = None\n     properties: Optional[Dict[str, Any]] = None\n-    additionalProperties: Optional[Union[bool, Any]] = None\n+    additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n     description: Optional[str] = None\n     format: Optional[str] = None\n     default: Optional[Any] = None\n@@ -120,7 +120,7 @@ class Schema(SchemaBase):\n     not_: Optional[List[SchemaBase]] = PSchema(None, alias=\"not\")  # type: ignore\n     items: Optional[SchemaBase] = None\n     properties: Optional[Dict[str, SchemaBase]] = None\n-    additionalProperties: Optional[Union[bool, SchemaBase]] = None\n+    additionalProperties: Optional[Union[SchemaBase, bool]] = None\n \n \n class Example(BaseModel):\n@@ -220,7 +220,7 @@ class Operation(BaseModel):\n     operationId: Optional[str] = None\n     parameters: Optional[List[Union[Parameter, Reference]]] = None\n     requestBody: Optional[Union[RequestBody, Reference]] = None\n-    responses: Union[Responses, Dict[Union[str], Response]]\n+    responses: Union[Responses, Dict[str, Response]]\n     # Workaround OpenAPI recursive reference\n     callbacks: Optional[Dict[str, Union[Dict[str, Any], Reference]]] = None\n     deprecated: Optional[bool] = None\n\n@@ -0,0 +1,110 @@\n+from typing import Dict\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Items(BaseModel):\n+    items: Dict[str, int]\n+\n+\n+@app.post(\"/foo\")\n+def foo(items: Items):\n+    return items.items\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/foo\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Foo Post\",\n+                \"operationId\": \"foo_foo_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Items\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Items\": {\n+                \"title\": \"Items\",\n+                \"required\": [\"items\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"object\",\n+                        \"additionalProperties\": {\"type\": \"integer\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_additional_properties_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_additional_properties_post():\n+    response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": 1, \"bar\": 2}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#825f397918487430698bb64be84be0af55eb407a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 99 | Contributors (this commit): 1 | Commits (past 90d): 27 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.10.1\"\n+__version__ = \"0.10.2\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3ce2920fef29058507868798cc27404cd1bc555b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 16 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.on_event(\"shutdown\")\n-def startup_event():\n+def shutdown_event():\n     with open(\"log.txt\", mode=\"a\") as log:\n         log.write(\"Application shutdown\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
