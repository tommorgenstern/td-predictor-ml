{"custom_id": "fastapi#a698908ed65d887a17245a580ecbf3bf3c848406", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 268 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 269 | Churn Cumulative: 1031 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -123,7 +123,7 @@ class Schema(BaseModel):\n     oneOf: Optional[List[\"Schema\"]] = None\n     anyOf: Optional[List[\"Schema\"]] = None\n     not_: Optional[\"Schema\"] = Field(None, alias=\"not\")\n-    items: Optional[\"Schema\"] = None\n+    items: Optional[Union[\"Schema\", List[\"Schema\"]]] = None\n     properties: Optional[Dict[str, \"Schema\"]] = None\n     additionalProperties: Optional[Union[\"Schema\", Reference, bool]] = None\n     description: Optional[str] = None\n\n@@ -0,0 +1,267 @@\n+from typing import List, Tuple\n+\n+from fastapi import FastAPI, Form\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class ItemGroup(BaseModel):\n+    items: List[Tuple[str, str]]\n+\n+\n+class Coordinate(BaseModel):\n+    x: float\n+    y: float\n+\n+\n+@app.post(\"/model-with-tuple/\")\n+def post_model_with_tuple(item_group: ItemGroup):\n+    return item_group\n+\n+\n+@app.post(\"/tuple-of-models/\")\n+def post_tuple_of_models(square: Tuple[Coordinate, Coordinate]):\n+    return square\n+\n+\n+@app.post(\"/tuple-form/\")\n+def hello(values: Tuple[int, int] = Form(...)):\n+    return values\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/model-with-tuple/\": {\n+            \"post\": {\n+                \"summary\": \"Post Model With Tuple\",\n+                \"operationId\": \"post_model_with_tuple_model_with_tuple__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemGroup\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/tuple-of-models/\": {\n+            \"post\": {\n+                \"summary\": \"Post Tuple Of Models\",\n+                \"operationId\": \"post_tuple_of_models_tuple_of_models__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Square\",\n+                                \"maxItems\": 2,\n+                                \"minItems\": 2,\n+                                \"type\": \"array\",\n+                                \"items\": [\n+                                    {\"$ref\": \"#/components/schemas/Coordinate\"},\n+                                    {\"$ref\": \"#/components/schemas/Coordinate\"},\n+                                ],\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/tuple-form/\": {\n+            \"post\": {\n+                \"summary\": \"Hello\",\n+                \"operationId\": \"hello_tuple_form__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_hello_tuple_form__post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_hello_tuple_form__post\": {\n+                \"title\": \"Body_hello_tuple_form__post\",\n+                \"required\": [\"values\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"values\": {\n+                        \"title\": \"Values\",\n+                        \"maxItems\": 2,\n+                        \"minItems\": 2,\n+                        \"type\": \"array\",\n+                        \"items\": [{\"type\": \"integer\"}, {\"type\": \"integer\"}],\n+                    }\n+                },\n+            },\n+            \"Coordinate\": {\n+                \"title\": \"Coordinate\",\n+                \"required\": [\"x\", \"y\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"x\": {\"title\": \"X\", \"type\": \"number\"},\n+                    \"y\": {\"title\": \"Y\", \"type\": \"number\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ItemGroup\": {\n+                \"title\": \"ItemGroup\",\n+                \"required\": [\"items\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"maxItems\": 2,\n+                            \"minItems\": 2,\n+                            \"type\": \"array\",\n+                            \"items\": [{\"type\": \"string\"}, {\"type\": \"string\"}],\n+                        },\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_model_with_tuple_valid():\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_model_with_tuple_invalid():\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\", \"whatelse\", \"too\", \"much\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+    data = {\"items\": [[\"foo\", \"bar\"], [\"baz\"]]}\n+    response = client.post(\"/model-with-tuple/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_tuple_with_model_valid():\n+    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+def test_tuple_with_model_invalid():\n+    data = [{\"x\": 1, \"y\": 2}, {\"x\": 3, \"y\": 4}, {\"x\": 5, \"y\": 6}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+    data = [{\"x\": 1, \"y\": 2}]\n+    response = client.post(\"/tuple-of-models/\", json=data)\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_tuple_form_valid():\n+    response = client.post(\"/tuple-form/\", data=[(\"values\", \"1\"), (\"values\", \"2\")])\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [1, 2]\n+\n+\n+def test_tuple_form_invalid():\n+    response = client.post(\n+        \"/tuple-form/\", data=[(\"values\", \"1\"), (\"values\", \"2\"), (\"values\", \"3\")]\n+    )\n+    assert response.status_code == 422, response.text\n+\n+    response = client.post(\"/tuple-form/\", data=[(\"values\", \"1\")])\n+    assert response.status_code == 422, response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#291180bf2d8c39e84860c2426b1d58b6c80f6fef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 346 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.72.0\"\n+__version__ = \"0.73.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9d56a3cb59d59896bc38293b9fa54ae69b7cd36c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 265 | Lines Deleted: 11 | Files Changed: 6 | Hunks: 19 | Methods Changed: 30 | Complexity Δ (Sum/Max): 28/8 | Churn Δ: 276 | Churn Cumulative: 3537 | Contributors (this commit): 25 | Commits (past 90d): 8 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,7 +2,6 @@ from enum import Enum\n from typing import Any, Callable, Coroutine, Dict, List, Optional, Sequence, Type, Union\n \n from fastapi import routing\n-from fastapi.concurrency import AsyncExitStack\n from fastapi.datastructures import Default, DefaultPlaceholder\n from fastapi.encoders import DictIntStrAny, SetIntStr\n from fastapi.exception_handlers import (\n@@ -11,6 +10,7 @@ from fastapi.exception_handlers import (\n )\n from fastapi.exceptions import RequestValidationError\n from fastapi.logger import logger\n+from fastapi.middleware.asyncexitstack import AsyncExitStackMiddleware\n from fastapi.openapi.docs import (\n     get_redoc_html,\n     get_swagger_ui_html,\n@@ -21,8 +21,9 @@ from fastapi.params import Depends\n from fastapi.types import DecoratedCallable\n from starlette.applications import Starlette\n from starlette.datastructures import State\n-from starlette.exceptions import HTTPException\n+from starlette.exceptions import ExceptionMiddleware, HTTPException\n from starlette.middleware import Middleware\n+from starlette.middleware.errors import ServerErrorMiddleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n@@ -134,6 +135,55 @@ class FastAPI(Starlette):\n         self.openapi_schema: Optional[Dict[str, Any]] = None\n         self.setup()\n \n+    def build_middleware_stack(self) -> ASGIApp:\n+        # Duplicate/override from Starlette to add AsyncExitStackMiddleware\n+        # inside of ExceptionMiddleware, inside of custom user middlewares\n+        debug = self.debug\n+        error_handler = None\n+        exception_handlers = {}\n+\n+        for key, value in self.exception_handlers.items():\n+            if key in (500, Exception):\n+                error_handler = value\n+            else:\n+                exception_handlers[key] = value\n+\n+        middleware = (\n+            [Middleware(ServerErrorMiddleware, handler=error_handler, debug=debug)]\n+            + self.user_middleware\n+            + [\n+                Middleware(\n+                    ExceptionMiddleware, handlers=exception_handlers, debug=debug\n+                ),\n+                # Add FastAPI-specific AsyncExitStackMiddleware for dependencies with\n+                # contextvars.\n+                # This needs to happen after user middlewares because those create a\n+                # new contextvars context copy by using a new AnyIO task group.\n+                # The initial part of dependencies with yield is executed in the\n+                # FastAPI code, inside all the middlewares, but the teardown part\n+                # (after yield) is executed in the AsyncExitStack in this middleware,\n+                # if the AsyncExitStack lived outside of the custom middlewares and\n+                # contextvars were set in a dependency with yield in that internal\n+                # contextvars context, the values would not be available in the\n+                # outside context of the AsyncExitStack.\n+                # By putting the middleware and the AsyncExitStack here, inside all\n+                # user middlewares, the code before and after yield in dependencies\n+                # with yield is executed in the same contextvars context, so all values\n+                # set in contextvars before yield is still available after yield as\n+                # would be expected.\n+                # Additionally, by having this AsyncExitStack here, after the\n+                # ExceptionMiddleware, now dependencies can catch handled exceptions,\n+                # e.g. HTTPException, to customize the teardown code (e.g. DB session\n+                # rollback).\n+                Middleware(AsyncExitStackMiddleware),\n+            ]\n+        )\n+\n+        app = self.router\n+        for cls, options in reversed(middleware):\n+            app = cls(app=app, **options)\n+        return app\n+\n     def openapi(self) -> Dict[str, Any]:\n         if not self.openapi_schema:\n             self.openapi_schema = get_openapi(\n@@ -206,12 +256,7 @@ class FastAPI(Starlette):\n     async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n         if self.root_path:\n             scope[\"root_path\"] = self.root_path\n-        if AsyncExitStack:\n-            async with AsyncExitStack() as stack:\n-                scope[\"fastapi_astack\"] = stack\n         await super().__call__(scope, receive, send)\n-        else:\n-            await super().__call__(scope, receive, send)  # pragma: no cover\n \n     def add_api_route(\n         self,\n\n@@ -0,0 +1,28 @@\n+from typing import Optional\n+\n+from fastapi.concurrency import AsyncExitStack\n+from starlette.types import ASGIApp, Receive, Scope, Send\n+\n+\n+class AsyncExitStackMiddleware:\n+    def __init__(self, app: ASGIApp, context_name: str = \"fastapi_astack\") -> None:\n+        self.app = app\n+        self.context_name = context_name\n+\n+    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n+        if AsyncExitStack:\n+            dependency_exception: Optional[Exception] = None\n+            async with AsyncExitStack() as stack:\n+                scope[self.context_name] = stack\n+                try:\n+                    await self.app(scope, receive, send)\n+                except Exception as e:\n+                    dependency_exception = e\n+                    raise e\n+            if dependency_exception:\n+                # This exception was possibly handled by the dependency but it should\n+                # still bubble up so that the ServerErrorMiddleware can return a 500\n+                # or the ExceptionMiddleware can catch and handle any other exceptions\n+                raise dependency_exception\n+        else:\n+            await self.app(scope, receive, send)  # pragma: no cover\n\n@@ -235,7 +235,16 @@ def test_sync_raise_other():\n     assert \"/sync_raise\" not in errors\n \n \n-def test_async_raise():\n+def test_async_raise_raises():\n+    with pytest.raises(AsyncDependencyError):\n+        client.get(\"/async_raise\")\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_async_raise_server_error():\n+    client = TestClient(app, raise_server_exceptions=False)\n     response = client.get(\"/async_raise\")\n     assert response.status_code == 500, response.text\n     assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n@@ -270,7 +279,16 @@ def test_background_tasks():\n     assert state[\"bg\"] == \"bg set - b: started b - a: started a\"\n \n \n-def test_sync_raise():\n+def test_sync_raise_raises():\n+    with pytest.raises(SyncDependencyError):\n+        client.get(\"/sync_raise\")\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_raise_server_error():\n+    client = TestClient(app, raise_server_exceptions=False)\n     response = client.get(\"/sync_raise\")\n     assert response.status_code == 500, response.text\n     assert state[\"/sync_raise\"] == \"generator raise finalized\"\n@@ -306,7 +324,16 @@ def test_sync_sync_raise_other():\n     assert \"/sync_raise\" not in errors\n \n \n-def test_sync_async_raise():\n+def test_sync_async_raise_raises():\n+    with pytest.raises(AsyncDependencyError):\n+        client.get(\"/sync_async_raise\")\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_async_raise_server_error():\n+    client = TestClient(app, raise_server_exceptions=False)\n     response = client.get(\"/sync_async_raise\")\n     assert response.status_code == 500, response.text\n     assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n@@ -314,7 +341,16 @@ def test_sync_async_raise():\n     errors.clear()\n \n \n-def test_sync_sync_raise():\n+def test_sync_sync_raise_raises():\n+    with pytest.raises(SyncDependencyError):\n+        client.get(\"/sync_sync_raise\")\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_sync_raise_server_error():\n+    client = TestClient(app, raise_server_exceptions=False)\n     response = client.get(\"/sync_sync_raise\")\n     assert response.status_code == 500, response.text\n     assert state[\"/sync_raise\"] == \"generator raise finalized\"\n\n@@ -0,0 +1,51 @@\n+from contextvars import ContextVar\n+from typing import Any, Awaitable, Callable, Dict, Optional\n+\n+from fastapi import Depends, FastAPI, Request, Response\n+from fastapi.testclient import TestClient\n+\n+legacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n+    \"legacy_request_state_context_var\", default=None\n+)\n+\n+app = FastAPI()\n+\n+\n+async def set_up_request_state_dependency():\n+    request_state = {\"user\": \"deadpond\"}\n+    contextvar_token = legacy_request_state_context_var.set(request_state)\n+    yield request_state\n+    legacy_request_state_context_var.reset(contextvar_token)\n+\n+\n+@app.middleware(\"http\")\n+async def custom_middleware(\n+    request: Request, call_next: Callable[[Request], Awaitable[Response]]\n+):\n+    response = await call_next(request)\n+    response.headers[\"custom\"] = \"foo\"\n+    return response\n+\n+\n+@app.get(\"/user\", dependencies=[Depends(set_up_request_state_dependency)])\n+def get_user():\n+    request_state = legacy_request_state_context_var.get()\n+    assert request_state\n+    return request_state[\"user\"]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_dependency_contextvars():\n+    \"\"\"\n+    Check that custom middlewares don't affect the contextvar context for dependencies.\n+\n+    The code before yield and the code after yield should be run in the same contextvar\n+    context, so that request_state_context_var.reset(contextvar_token).\n+\n+    If they are run in a different context, that raises an error.\n+    \"\"\"\n+    response = client.get(\"/user\")\n+    assert response.json() == \"deadpond\"\n+    assert response.headers[\"custom\"] == \"foo\"\n\n@@ -0,0 +1,71 @@\n+import pytest\n+from fastapi import Body, Depends, FastAPI, HTTPException\n+from fastapi.testclient import TestClient\n+\n+initial_fake_database = {\"rick\": \"Rick Sanchez\"}\n+\n+fake_database = initial_fake_database.copy()\n+\n+initial_state = {\"except\": False, \"finally\": False}\n+\n+state = initial_state.copy()\n+\n+app = FastAPI()\n+\n+\n+async def get_database():\n+    temp_database = fake_database.copy()\n+    try:\n+        yield temp_database\n+        fake_database.update(temp_database)\n+    except HTTPException:\n+        state[\"except\"] = True\n+    finally:\n+        state[\"finally\"] = True\n+\n+\n+@app.put(\"/invalid-user/{user_id}\")\n+def put_invalid_user(\n+    user_id: str, name: str = Body(...), db: dict = Depends(get_database)\n+):\n+    db[user_id] = name\n+    raise HTTPException(status_code=400, detail=\"Invalid user\")\n+\n+\n+@app.put(\"/user/{user_id}\")\n+def put_user(user_id: str, name: str = Body(...), db: dict = Depends(get_database)):\n+    db[user_id] = name\n+    return {\"message\": \"OK\"}\n+\n+\n+@pytest.fixture(autouse=True)\n+def reset_state_and_db():\n+    global fake_database\n+    global state\n+    fake_database = initial_fake_database.copy()\n+    state = initial_state.copy()\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_dependency_gets_exception():\n+    assert state[\"except\"] is False\n+    assert state[\"finally\"] is False\n+    response = client.put(\"/invalid-user/rick\", json=\"Morty\")\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Invalid user\"}\n+    assert state[\"except\"] is True\n+    assert state[\"finally\"] is True\n+    assert fake_database[\"rick\"] == \"Rick Sanchez\"\n+\n+\n+def test_dependency_no_exception():\n+    assert state[\"except\"] is False\n+    assert state[\"finally\"] is False\n+    response = client.put(\"/user/rick\", json=\"Morty\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"OK\"}\n+    assert state[\"except\"] is False\n+    assert state[\"finally\"] is True\n+    assert fake_database[\"rick\"] == \"Morty\"\n\n@@ -1,3 +1,4 @@\n+import pytest\n from fastapi import FastAPI, HTTPException\n from fastapi.exceptions import RequestValidationError\n from fastapi.testclient import TestClient\n@@ -12,10 +13,15 @@ def request_validation_exception_handler(request, exception):\n     return JSONResponse({\"exception\": \"request-validation\"})\n \n \n+def server_error_exception_handler(request, exception):\n+    return JSONResponse(status_code=500, content={\"exception\": \"server-error\"})\n+\n+\n app = FastAPI(\n     exception_handlers={\n         HTTPException: http_exception_handler,\n         RequestValidationError: request_validation_exception_handler,\n+        Exception: server_error_exception_handler,\n     }\n )\n \n@@ -32,6 +38,11 @@ def route_with_request_validation_exception(param: int):\n     pass  # pragma: no cover\n \n \n+@app.get(\"/server-error\")\n+def route_with_server_error():\n+    raise RuntimeError(\"Oops!\")\n+\n+\n def test_override_http_exception():\n     response = client.get(\"/http-exception\")\n     assert response.status_code == 200\n@@ -42,3 +53,15 @@ def test_override_request_validation_exception():\n     response = client.get(\"/request-validation/invalid\")\n     assert response.status_code == 200\n     assert response.json() == {\"exception\": \"request-validation\"}\n+\n+\n+def test_override_server_error_exception_raises():\n+    with pytest.raises(RuntimeError):\n+        client.get(\"/server-error\")\n+\n+\n+def test_override_server_error_exception_response():\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/server-error\")\n+    assert response.status_code == 500\n+    assert response.json() == {\"exception\": \"server-error\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1ce16c2f40a75a4d97233bf4e331ed563eda47cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 348 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.73.0\"\n+__version__ = \"0.74.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f5d7df3c6ce0b7184404a87195393a48e1c6d2c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 8 | Complexity Δ (Sum/Max): 11/7 | Churn Δ: 67 | Churn Cumulative: 4489 | Contributors (this commit): 27 | Commits (past 90d): 3 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,6 +13,7 @@ from typing import (\n     Optional,\n     Sequence,\n     Set,\n+    Tuple,\n     Type,\n     Union,\n )\n@@ -44,7 +45,7 @@ from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.routing import BaseRoute\n+from starlette.routing import BaseRoute, Match\n from starlette.routing import Mount as Mount  # noqa\n from starlette.routing import (\n     compile_path,\n@@ -53,7 +54,7 @@ from starlette.routing import (\n     websocket_session,\n )\n from starlette.status import WS_1008_POLICY_VIOLATION\n-from starlette.types import ASGIApp\n+from starlette.types import ASGIApp, Scope\n from starlette.websockets import WebSocket\n \n \n@@ -296,6 +297,12 @@ class APIWebSocketRoute(routing.WebSocketRoute):\n         )\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n \n+    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n+        match, child_scope = super().matches(scope)\n+        if match != Match.NONE:\n+            child_scope[\"route\"] = self\n+        return match, child_scope\n+\n \n class APIRoute(routing.Route):\n     def __init__(\n@@ -432,6 +439,12 @@ class APIRoute(routing.Route):\n             dependency_overrides_provider=self.dependency_overrides_provider,\n         )\n \n+    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n+        match, child_scope = super().matches(scope)\n+        if match != Match.NONE:\n+            child_scope[\"route\"] = self\n+        return match, child_scope\n+\n \n class APIRouter(routing.Router):\n     def __init__(\n\n@@ -0,0 +1,50 @@\n+import pytest\n+from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect\n+from fastapi.routing import APIRoute, APIWebSocketRoute\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{user_id}\")\n+async def get_user(user_id: str, request: Request):\n+    route: APIRoute = request.scope[\"route\"]\n+    return {\"user_id\": user_id, \"path\": route.path}\n+\n+\n+@app.websocket(\"/items/{item_id}\")\n+async def websocket_item(item_id: str, websocket: WebSocket):\n+    route: APIWebSocketRoute = websocket.scope[\"route\"]\n+    await websocket.accept()\n+    await websocket.send_json({\"item_id\": item_id, \"path\": route.path})\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_get():\n+    response = client.get(\"/users/rick\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"user_id\": \"rick\", \"path\": \"/users/{user_id}\"}\n+\n+\n+def test_invalid_method_doesnt_match():\n+    response = client.post(\"/users/rick\")\n+    assert response.status_code == 405, response.text\n+\n+\n+def test_invalid_path_doesnt_match():\n+    response = client.post(\"/usersx/rick\")\n+    assert response.status_code == 404, response.text\n+\n+\n+def test_websocket():\n+    with client.websocket_connect(\"/items/portal-gun\") as websocket:\n+        data = websocket.receive_json()\n+        assert data == {\"item_id\": \"portal-gun\", \"path\": \"/items/{item_id}\"}\n+\n+\n+def test_websocket_invalid_path_doesnt_match():\n+    with pytest.raises(WebSocketDisconnect):\n+        with client.websocket_connect(\"/itemsx/portal-gun\") as websocket:\n+            websocket.receive_json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#440d2d2d1a72867b3f38b5c7359e021cccbfea8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 350 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.74.0\"\n+__version__ = \"0.74.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8a0d4c79c18e6bd219b965b9d50578c139e7efd8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2267 | Lines Deleted: 69 | Files Changed: 15 | Hunks: 91 | Methods Changed: 89 | Complexity Δ (Sum/Max): 59/31 | Churn Δ: 2336 | Churn Cumulative: 18047 | Contributors (this commit): 52 | Commits (past 90d): 21 | Contributors (cumulative): 99 | DMM Complexity: 0.9644839067702553\n\nDIFF:\n@@ -0,0 +1,28 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage)\n+async def create_item(item: Item):\n+    return {\"message\": \"item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=List[Item])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage)\n+async def create_item(item: Item):\n+    return {\"message\": \"item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=list[Item])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n\n@@ -0,0 +1,38 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return {\"message\": \"Item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n+\n+\n+@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\n+async def create_user(user: User):\n+    return {\"message\": \"User received\"}\n\n@@ -0,0 +1,36 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return {\"message\": \"Item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n+\n+\n+@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\n+async def create_user(user: User):\n+    return {\"message\": \"User received\"}\n\n@@ -0,0 +1,44 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from fastapi.routing import APIRoute\n+from pydantic import BaseModel\n+\n+\n+def custom_generate_unique_id(route: APIRoute):\n+    return f\"{route.tags[0]}-{route.name}\"\n+\n+\n+app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return {\"message\": \"Item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n+\n+\n+@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\n+async def create_user(user: User):\n+    return {\"message\": \"User received\"}\n\n@@ -0,0 +1,42 @@\n+from fastapi import FastAPI\n+from fastapi.routing import APIRoute\n+from pydantic import BaseModel\n+\n+\n+def custom_generate_unique_id(route: APIRoute):\n+    return f\"{route.tags[0]}-{route.name}\"\n+\n+\n+app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class ResponseMessage(BaseModel):\n+    message: str\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str\n+\n+\n+@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return {\"message\": \"Item received\"}\n+\n+\n+@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\n+async def get_items():\n+    return [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n+\n+\n+@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\n+async def create_user(user: User):\n+    return {\"message\": \"User received\"}\n\n@@ -0,0 +1,15 @@\n+import json\n+from pathlib import Path\n+\n+file_path = Path(\"./openapi.json\")\n+openapi_content = json.loads(file_path.read_text())\n+\n+for path_data in openapi_content[\"paths\"].values():\n+    for operation in path_data.values():\n+        tag = operation[\"tags\"][0]\n+        operation_id = operation[\"operationId\"]\n+        to_remove = f\"{tag}-\"\n+        new_operation_id = operation_id[len(to_remove) :]\n+        operation[\"operationId\"] = new_operation_id\n+\n+file_path.write_text(json.dumps(openapi_content))\n\n@@ -19,6 +19,7 @@ from fastapi.openapi.docs import (\n from fastapi.openapi.utils import get_openapi\n from fastapi.params import Depends\n from fastapi.types import DecoratedCallable\n+from fastapi.utils import generate_unique_id\n from starlette.applications import Starlette\n from starlette.datastructures import State\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n@@ -68,10 +69,44 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         swagger_ui_parameters: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n         **extra: Any,\n     ) -> None:\n         self._debug: bool = debug\n+        self.title = title\n+        self.description = description\n+        self.version = version\n+        self.terms_of_service = terms_of_service\n+        self.contact = contact\n+        self.license_info = license_info\n+        self.openapi_url = openapi_url\n+        self.openapi_tags = openapi_tags\n+        self.root_path_in_servers = root_path_in_servers\n+        self.docs_url = docs_url\n+        self.redoc_url = redoc_url\n+        self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n+        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n+        self.swagger_ui_parameters = swagger_ui_parameters\n+        self.servers = servers or []\n+        self.extra = extra\n+        self.openapi_version = \"3.0.2\"\n+        self.openapi_schema: Optional[Dict[str, Any]] = None\n+        if self.openapi_url:\n+            assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n+            assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n+        # TODO: remove when discarding the openapi_prefix parameter\n+        if openapi_prefix:\n+            logger.warning(\n+                '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n+                \"follows more closely the ASGI standard, is simpler, and more \"\n+                \"automatic. Check the docs at \"\n+                \"https://fastapi.tiangolo.com/advanced/sub-applications/\"\n+            )\n+        self.root_path = root_path or openapi_prefix\n         self.state: State = State()\n+        self.dependency_overrides: Dict[Callable[..., Any], Callable[..., Any]] = {}\n         self.router: routing.APIRouter = routing.APIRouter(\n             routes=routes,\n             dependency_overrides_provider=self,\n@@ -83,6 +118,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             include_in_schema=include_in_schema,\n             responses=responses,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n         self.exception_handlers: Dict[\n             Union[int, Type[Exception]],\n@@ -99,40 +135,6 @@ class FastAPI(Starlette):\n             [] if middleware is None else list(middleware)\n         )\n         self.middleware_stack: ASGIApp = self.build_middleware_stack()\n-\n-        self.title = title\n-        self.description = description\n-        self.version = version\n-        self.terms_of_service = terms_of_service\n-        self.contact = contact\n-        self.license_info = license_info\n-        self.servers = servers or []\n-        self.openapi_url = openapi_url\n-        self.openapi_tags = openapi_tags\n-        # TODO: remove when discarding the openapi_prefix parameter\n-        if openapi_prefix:\n-            logger.warning(\n-                '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n-                \"follows more closely the ASGI standard, is simpler, and more \"\n-                \"automatic. Check the docs at \"\n-                \"https://fastapi.tiangolo.com/advanced/sub-applications/\"\n-            )\n-        self.root_path = root_path or openapi_prefix\n-        self.root_path_in_servers = root_path_in_servers\n-        self.docs_url = docs_url\n-        self.redoc_url = redoc_url\n-        self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n-        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n-        self.swagger_ui_parameters = swagger_ui_parameters\n-        self.extra = extra\n-        self.dependency_overrides: Dict[Callable[..., Any], Callable[..., Any]] = {}\n-\n-        self.openapi_version = \"3.0.2\"\n-\n-        if self.openapi_url:\n-            assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n-            assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n-        self.openapi_schema: Optional[Dict[str, Any]] = None\n         self.setup()\n \n     def build_middleware_stack(self) -> ASGIApp:\n@@ -286,6 +288,9 @@ class FastAPI(Starlette):\n         ),\n         name: Optional[str] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> None:\n         self.router.add_api_route(\n             path,\n@@ -311,6 +316,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def api_route(\n@@ -338,6 +344,9 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.router.add_api_route(\n@@ -364,6 +373,7 @@ class FastAPI(Starlette):\n                 response_class=response_class,\n                 name=name,\n                 openapi_extra=openapi_extra,\n+                generate_unique_id_function=generate_unique_id_function,\n             )\n             return func\n \n@@ -395,6 +405,9 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         default_response_class: Type[Response] = Default(JSONResponse),\n         callbacks: Optional[List[BaseRoute]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> None:\n         self.router.include_router(\n             router,\n@@ -406,6 +419,7 @@ class FastAPI(Starlette):\n             include_in_schema=include_in_schema,\n             default_response_class=default_response_class,\n             callbacks=callbacks,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def get(\n@@ -433,6 +447,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.get(\n             path,\n@@ -457,6 +474,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def put(\n@@ -484,6 +502,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.put(\n             path,\n@@ -508,6 +529,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def post(\n@@ -535,6 +557,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.post(\n             path,\n@@ -559,6 +584,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def delete(\n@@ -586,6 +612,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.delete(\n             path,\n@@ -610,6 +639,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def options(\n@@ -637,6 +667,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.options(\n             path,\n@@ -661,6 +694,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def head(\n@@ -688,6 +722,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.head(\n             path,\n@@ -712,6 +749,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def patch(\n@@ -739,6 +777,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.patch(\n             path,\n@@ -763,6 +804,7 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def trace(\n@@ -790,6 +832,9 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.trace(\n             path,\n@@ -814,4 +859,5 @@ class FastAPI(Starlette):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n\n@@ -1,5 +1,6 @@\n import http.client\n import inspect\n+import warnings\n from enum import Enum\n from typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Type, Union, cast\n \n@@ -140,7 +141,15 @@ def get_openapi_operation_request_body(\n     return request_body_oai\n \n \n-def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:\n+def generate_operation_id(\n+    *, route: routing.APIRoute, method: str\n+) -> str:  # pragma: nocover\n+    warnings.warn(\n+        \"fastapi.openapi.utils.generate_operation_id() was deprecated, \"\n+        \"it is not used internally, and will be removed soon\",\n+        DeprecationWarning,\n+        stacklevel=2,\n+    )\n     if route.operation_id:\n         return route.operation_id\n     path: str = route.path_format\n@@ -154,7 +163,7 @@ def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n \n \n def get_openapi_operation_metadata(\n-    *, route: routing.APIRoute, method: str\n+    *, route: routing.APIRoute, method: str, operation_ids: Set[str]\n ) -> Dict[str, Any]:\n     operation: Dict[str, Any] = {}\n     if route.tags:\n@@ -162,14 +171,25 @@ def get_openapi_operation_metadata(\n     operation[\"summary\"] = generate_operation_summary(route=route, method=method)\n     if route.description:\n         operation[\"description\"] = route.description\n-    operation[\"operationId\"] = generate_operation_id(route=route, method=method)\n+    operation_id = route.operation_id or route.unique_id\n+    if operation_id in operation_ids:\n+        message = (\n+            f\"Duplicate Operation ID {operation_id} for function \"\n+            + f\"{route.endpoint.__name__}\"\n+        )\n+        file_name = getattr(route.endpoint, \"__globals__\", {}).get(\"__file__\")\n+        if file_name:\n+            message += f\" at {file_name}\"\n+        warnings.warn(message)\n+    operation_ids.add(operation_id)\n+    operation[\"operationId\"] = operation_id\n     if route.deprecated:\n         operation[\"deprecated\"] = route.deprecated\n     return operation\n \n \n def get_openapi_path(\n-    *, route: routing.APIRoute, model_name_map: Dict[type, str]\n+    *, route: routing.APIRoute, model_name_map: Dict[type, str], operation_ids: Set[str]\n ) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n     path = {}\n     security_schemes: Dict[str, Any] = {}\n@@ -183,7 +203,9 @@ def get_openapi_path(\n     route_response_media_type: Optional[str] = current_response_class.media_type\n     if route.include_in_schema:\n         for method in route.methods:\n-            operation = get_openapi_operation_metadata(route=route, method=method)\n+            operation = get_openapi_operation_metadata(\n+                route=route, method=method, operation_ids=operation_ids\n+            )\n             parameters: List[Dict[str, Any]] = []\n             flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n             security_definitions, operation_security = get_openapi_security_definitions(\n@@ -217,7 +239,9 @@ def get_openapi_path(\n                             cb_security_schemes,\n                             cb_definitions,\n                         ) = get_openapi_path(\n-                            route=callback, model_name_map=model_name_map\n+                            route=callback,\n+                            model_name_map=model_name_map,\n+                            operation_ids=operation_ids,\n                         )\n                         callbacks[callback.name] = {callback.path: cb_path}\n                 operation[\"callbacks\"] = callbacks\n@@ -384,6 +408,7 @@ def get_openapi(\n         output[\"servers\"] = servers\n     components: Dict[str, Dict[str, Any]] = {}\n     paths: Dict[str, Dict[str, Any]] = {}\n+    operation_ids: Set[str] = set()\n     flat_models = get_flat_models_from_routes(routes)\n     model_name_map = get_model_name_map(flat_models)\n     definitions = get_model_definitions(\n@@ -391,7 +416,9 @@ def get_openapi(\n     )\n     for route in routes:\n         if isinstance(route, routing.APIRoute):\n-            result = get_openapi_path(route=route, model_name_map=model_name_map)\n+            result = get_openapi_path(\n+                route=route, model_name_map=model_name_map, operation_ids=operation_ids\n+            )\n             if result:\n                 path, security_schemes, path_definitions = result\n                 if path:\n\n@@ -34,7 +34,7 @@ from fastapi.types import DecoratedCallable\n from fastapi.utils import (\n     create_cloned_field,\n     create_response_field,\n-    generate_operation_id_for_path,\n+    generate_unique_id,\n     get_value_or_default,\n )\n from pydantic import BaseModel\n@@ -335,21 +335,47 @@ class APIRoute(routing.Route):\n         dependency_overrides_provider: Optional[Any] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Union[\n+            Callable[[\"APIRoute\"], str], DefaultPlaceholder\n+        ] = Default(generate_unique_id),\n     ) -> None:\n-        # normalise enums e.g. http.HTTPStatus\n-        if isinstance(status_code, IntEnum):\n-            status_code = int(status_code)\n         self.path = path\n         self.endpoint = endpoint\n+        self.response_model = response_model\n+        self.summary = summary\n+        self.response_description = response_description\n+        self.deprecated = deprecated\n+        self.operation_id = operation_id\n+        self.response_model_include = response_model_include\n+        self.response_model_exclude = response_model_exclude\n+        self.response_model_by_alias = response_model_by_alias\n+        self.response_model_exclude_unset = response_model_exclude_unset\n+        self.response_model_exclude_defaults = response_model_exclude_defaults\n+        self.response_model_exclude_none = response_model_exclude_none\n+        self.include_in_schema = include_in_schema\n+        self.response_class = response_class\n+        self.dependency_overrides_provider = dependency_overrides_provider\n+        self.callbacks = callbacks\n+        self.openapi_extra = openapi_extra\n+        self.generate_unique_id_function = generate_unique_id_function\n+        self.tags = tags or []\n+        self.responses = responses or {}\n         self.name = get_name(endpoint) if name is None else name\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         if methods is None:\n             methods = [\"GET\"]\n         self.methods: Set[str] = set([method.upper() for method in methods])\n-        self.unique_id = generate_operation_id_for_path(\n-            name=self.name, path=self.path_format, method=list(methods)[0]\n-        )\n-        self.response_model = response_model\n+        if isinstance(generate_unique_id_function, DefaultPlaceholder):\n+            current_generate_unique_id: Callable[\n+                [\"APIRoute\"], str\n+            ] = generate_unique_id_function.value\n+        else:\n+            current_generate_unique_id = generate_unique_id_function\n+        self.unique_id = self.operation_id or current_generate_unique_id(self)\n+        # normalize enums e.g. http.HTTPStatus\n+        if isinstance(status_code, IntEnum):\n+            status_code = int(status_code)\n+        self.status_code = status_code\n         if self.response_model:\n             assert (\n                 status_code not in STATUS_CODES_WITH_NO_BODY\n@@ -371,19 +397,14 @@ class APIRoute(routing.Route):\n         else:\n             self.response_field = None  # type: ignore\n             self.secure_cloned_response_field = None\n-        self.status_code = status_code\n-        self.tags = tags or []\n         if dependencies:\n             self.dependencies = list(dependencies)\n         else:\n             self.dependencies = []\n-        self.summary = summary\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         # if a \"form feed\" character (page break) is found in the description text,\n         # truncate description text to the content preceding the first \"form feed\"\n         self.description = self.description.split(\"\\f\")[0]\n-        self.response_description = response_description\n-        self.responses = responses or {}\n         response_fields = {}\n         for additional_status_code, response in self.responses.items():\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n@@ -399,16 +420,6 @@ class APIRoute(routing.Route):\n             self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n         else:\n             self.response_fields = {}\n-        self.deprecated = deprecated\n-        self.operation_id = operation_id\n-        self.response_model_include = response_model_include\n-        self.response_model_exclude = response_model_exclude\n-        self.response_model_by_alias = response_model_by_alias\n-        self.response_model_exclude_unset = response_model_exclude_unset\n-        self.response_model_exclude_defaults = response_model_exclude_defaults\n-        self.response_model_exclude_none = response_model_exclude_none\n-        self.include_in_schema = include_in_schema\n-        self.response_class = response_class\n \n         assert callable(endpoint), \"An endpoint must be a callable\"\n         self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n@@ -418,10 +429,7 @@ class APIRoute(routing.Route):\n                 get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n             )\n         self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n-        self.dependency_overrides_provider = dependency_overrides_provider\n-        self.callbacks = callbacks\n         self.app = request_response(self.get_route_handler())\n-        self.openapi_extra = openapi_extra\n \n     def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n         return get_request_handler(\n@@ -465,6 +473,9 @@ class APIRouter(routing.Router):\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> None:\n         super().__init__(\n             routes=routes,  # type: ignore # in Starlette\n@@ -488,6 +499,7 @@ class APIRouter(routing.Router):\n         self.dependency_overrides_provider = dependency_overrides_provider\n         self.route_class = route_class\n         self.default_response_class = default_response_class\n+        self.generate_unique_id_function = generate_unique_id_function\n \n     def add_api_route(\n         self,\n@@ -519,6 +531,9 @@ class APIRouter(routing.Router):\n         route_class_override: Optional[Type[APIRoute]] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Union[\n+            Callable[[APIRoute], str], DefaultPlaceholder\n+        ] = Default(generate_unique_id),\n     ) -> None:\n         route_class = route_class_override or self.route_class\n         responses = responses or {}\n@@ -535,6 +550,9 @@ class APIRouter(routing.Router):\n         current_callbacks = self.callbacks.copy()\n         if callbacks:\n             current_callbacks.extend(callbacks)\n+        current_generate_unique_id = get_value_or_default(\n+            generate_unique_id_function, self.generate_unique_id_function\n+        )\n         route = route_class(\n             self.prefix + path,\n             endpoint=endpoint,\n@@ -561,6 +579,7 @@ class APIRouter(routing.Router):\n             dependency_overrides_provider=self.dependency_overrides_provider,\n             callbacks=current_callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=current_generate_unique_id,\n         )\n         self.routes.append(route)\n \n@@ -590,6 +609,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.add_api_route(\n@@ -617,6 +639,7 @@ class APIRouter(routing.Router):\n                 name=name,\n                 callbacks=callbacks,\n                 openapi_extra=openapi_extra,\n+                generate_unique_id_function=generate_unique_id_function,\n             )\n             return func\n \n@@ -654,6 +677,9 @@ class APIRouter(routing.Router):\n         callbacks: Optional[List[BaseRoute]] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> None:\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n@@ -694,6 +720,12 @@ class APIRouter(routing.Router):\n                     current_callbacks.extend(callbacks)\n                 if route.callbacks:\n                     current_callbacks.extend(route.callbacks)\n+                current_generate_unique_id = get_value_or_default(\n+                    route.generate_unique_id_function,\n+                    router.generate_unique_id_function,\n+                    generate_unique_id_function,\n+                    self.generate_unique_id_function,\n+                )\n                 self.add_api_route(\n                     prefix + route.path,\n                     route.endpoint,\n@@ -722,6 +754,7 @@ class APIRouter(routing.Router):\n                     route_class_override=type(route),\n                     callbacks=current_callbacks,\n                     openapi_extra=route.openapi_extra,\n+                    generate_unique_id_function=current_generate_unique_id,\n                 )\n             elif isinstance(route, routing.Route):\n                 methods = list(route.methods or [])  # type: ignore # in Starlette\n@@ -770,6 +803,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -795,6 +831,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def put(\n@@ -822,6 +859,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -847,6 +887,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def post(\n@@ -874,6 +915,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -899,6 +943,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def delete(\n@@ -926,6 +971,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -951,6 +999,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def options(\n@@ -978,6 +1027,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -1003,6 +1055,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def head(\n@@ -1030,6 +1083,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -1055,6 +1111,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def patch(\n@@ -1082,6 +1139,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -1107,6 +1167,7 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n \n     def trace(\n@@ -1134,6 +1195,9 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n         openapi_extra: Optional[Dict[str, Any]] = None,\n+        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n+            generate_unique_id\n+        ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n \n         return self.api_route(\n@@ -1160,4 +1224,5 @@ class APIRouter(routing.Router):\n             name=name,\n             callbacks=callbacks,\n             openapi_extra=openapi_extra,\n+            generate_unique_id_function=generate_unique_id_function,\n         )\n\n@@ -1,8 +1,9 @@\n import functools\n import re\n+import warnings\n from dataclasses import is_dataclass\n from enum import Enum\n-from typing import Any, Dict, Optional, Set, Type, Union, cast\n+from typing import TYPE_CHECKING, Any, Dict, Optional, Set, Type, Union, cast\n \n import fastapi\n from fastapi.datastructures import DefaultPlaceholder, DefaultType\n@@ -13,6 +14,9 @@ from pydantic.fields import FieldInfo, ModelField, UndefinedType\n from pydantic.schema import model_process_schema\n from pydantic.utils import lenient_issubclass\n \n+if TYPE_CHECKING:  # pragma: nocover\n+    from .routing import APIRoute\n+\n \n def get_model_definitions(\n     *,\n@@ -119,13 +123,29 @@ def create_cloned_field(\n     return new_field\n \n \n-def generate_operation_id_for_path(*, name: str, path: str, method: str) -> str:\n+def generate_operation_id_for_path(\n+    *, name: str, path: str, method: str\n+) -> str:  # pragma: nocover\n+    warnings.warn(\n+        \"fastapi.utils.generate_operation_id_for_path() was deprecated, \"\n+        \"it is not used internally, and will be removed soon\",\n+        DeprecationWarning,\n+        stacklevel=2,\n+    )\n     operation_id = name + path\n     operation_id = re.sub(\"[^0-9a-zA-Z_]\", \"_\", operation_id)\n     operation_id = operation_id + \"_\" + method.lower()\n     return operation_id\n \n \n+def generate_unique_id(route: \"APIRoute\") -> str:\n+    operation_id = route.name + route.path_format\n+    operation_id = re.sub(\"[^0-9a-zA-Z_]\", \"_\", operation_id)\n+    assert route.methods\n+    operation_id = operation_id + \"_\" + list(route.methods)[0].lower()\n+    return operation_id\n+\n+\n def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n     for key in update_dict:\n         if (\n\n@@ -0,0 +1,1617 @@\n+import warnings\n+from typing import List\n+\n+from fastapi import APIRouter, FastAPI\n+from fastapi.routing import APIRoute\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+\n+def custom_generate_unique_id(route: APIRoute):\n+    return f\"foo_{route.name}\"\n+\n+\n+def custom_generate_unique_id2(route: APIRoute):\n+    return f\"bar_{route.name}\"\n+\n+\n+def custom_generate_unique_id3(route: APIRoute):\n+    return f\"baz_{route.name}\"\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class Message(BaseModel):\n+    title: str\n+    description: str\n+\n+\n+def test_top_level_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter()\n+\n+    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    app.include_router(router)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"foo_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"foo_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_foo_post_root\": {\n+                    \"title\": \"Body_foo_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_router\": {\n+                    \"title\": \"Body_foo_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_router_overrides_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    app.include_router(router)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"foo_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"bar_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_bar_post_router\": {\n+                    \"title\": \"Body_bar_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_root\": {\n+                    \"title\": \"Body_foo_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_router_include_overrides_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"foo_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"bar_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_bar_post_router\": {\n+                    \"title\": \"Body_bar_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_root\": {\n+                    \"title\": \"Body_foo_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_subrouter_top_level_include_overrides_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter()\n+    sub_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\", response_model=List[Item], responses={404: {\"model\": List[Message]}}\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @sub_router.post(\n+        \"/subrouter\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+    )\n+    def post_subrouter(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    router.include_router(sub_router)\n+    app.include_router(router, generate_unique_id_function=custom_generate_unique_id3)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"foo_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"baz_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Baz Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Baz Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/subrouter\": {\n+                \"post\": {\n+                    \"summary\": \"Post Subrouter\",\n+                    \"operationId\": \"bar_post_subrouter\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_bar_post_subrouter\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Bar Post Subrouter\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Bar Post Subrouter\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_bar_post_subrouter\": {\n+                    \"title\": \"Body_bar_post_subrouter\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_baz_post_router\": {\n+                    \"title\": \"Body_baz_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_root\": {\n+                    \"title\": \"Body_foo_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_router_path_operation_overrides_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @app.post(\"/\", response_model=List[Item], responses={404: {\"model\": List[Message]}})\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+        generate_unique_id_function=custom_generate_unique_id3,\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    app.include_router(router)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"foo_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"baz_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_baz_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Baz Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Baz Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_baz_post_router\": {\n+                    \"title\": \"Body_baz_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_root\": {\n+                    \"title\": \"Body_foo_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_app_path_operation_overrides_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @app.post(\n+        \"/\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+        generate_unique_id_function=custom_generate_unique_id3,\n+    )\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @router.post(\n+        \"/router\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+    )\n+    def post_router(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    app.include_router(router)\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"baz_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Baz Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Baz Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/router\": {\n+                \"post\": {\n+                    \"summary\": \"Post Router\",\n+                    \"operationId\": \"bar_post_router\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_bar_post_router\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Bar Post Router\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_bar_post_router\": {\n+                    \"title\": \"Body_bar_post_router\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_baz_post_root\": {\n+                    \"title\": \"Body_baz_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_callback_override_generate_unique_id():\n+    app = FastAPI(generate_unique_id_function=custom_generate_unique_id)\n+    callback_router = APIRouter(generate_unique_id_function=custom_generate_unique_id2)\n+\n+    @callback_router.post(\n+        \"/post-callback\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+        generate_unique_id_function=custom_generate_unique_id3,\n+    )\n+    def post_callback(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @app.post(\n+        \"/\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+        generate_unique_id_function=custom_generate_unique_id3,\n+        callbacks=callback_router.routes,\n+    )\n+    def post_root(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    @app.post(\n+        \"/tocallback\",\n+        response_model=List[Item],\n+        responses={404: {\"model\": List[Message]}},\n+    )\n+    def post_with_callback(item1: Item, item2: Item):\n+        return item1, item2  # pragma: nocover\n+\n+    client = TestClient(app)\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Root\",\n+                    \"operationId\": \"baz_post_root\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_baz_post_root\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Baz Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Baz Post Root\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                    \"callbacks\": {\n+                        \"post_callback\": {\n+                            \"/post-callback\": {\n+                                \"post\": {\n+                                    \"summary\": \"Post Callback\",\n+                                    \"operationId\": \"baz_post_callback\",\n+                                    \"requestBody\": {\n+                                        \"content\": {\n+                                            \"application/json\": {\n+                                                \"schema\": {\n+                                                    \"$ref\": \"#/components/schemas/Body_baz_post_callback\"\n+                                                }\n+                                            }\n+                                        },\n+                                        \"required\": True,\n+                                    },\n+                                    \"responses\": {\n+                                        \"200\": {\n+                                            \"description\": \"Successful Response\",\n+                                            \"content\": {\n+                                                \"application/json\": {\n+                                                    \"schema\": {\n+                                                        \"title\": \"Response Baz Post Callback\",\n+                                                        \"type\": \"array\",\n+                                                        \"items\": {\n+                                                            \"$ref\": \"#/components/schemas/Item\"\n+                                                        },\n+                                                    }\n+                                                }\n+                                            },\n+                                        },\n+                                        \"404\": {\n+                                            \"description\": \"Not Found\",\n+                                            \"content\": {\n+                                                \"application/json\": {\n+                                                    \"schema\": {\n+                                                        \"title\": \"Response 404 Baz Post Callback\",\n+                                                        \"type\": \"array\",\n+                                                        \"items\": {\n+                                                            \"$ref\": \"#/components/schemas/Message\"\n+                                                        },\n+                                                    }\n+                                                }\n+                                            },\n+                                        },\n+                                        \"422\": {\n+                                            \"description\": \"Validation Error\",\n+                                            \"content\": {\n+                                                \"application/json\": {\n+                                                    \"schema\": {\n+                                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                                    }\n+                                                }\n+                                            },\n+                                        },\n+                                    },\n+                                }\n+                            }\n+                        }\n+                    },\n+                }\n+            },\n+            \"/tocallback\": {\n+                \"post\": {\n+                    \"summary\": \"Post With Callback\",\n+                    \"operationId\": \"foo_post_with_callback\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_foo_post_with_callback\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response Foo Post With Callback\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"404\": {\n+                            \"description\": \"Not Found\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"title\": \"Response 404 Foo Post With Callback\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\n+                                            \"$ref\": \"#/components/schemas/Message\"\n+                                        },\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_baz_post_callback\": {\n+                    \"title\": \"Body_baz_post_callback\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_baz_post_root\": {\n+                    \"title\": \"Body_baz_post_root\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"Body_foo_post_with_callback\": {\n+                    \"title\": \"Body_foo_post_with_callback\",\n+                    \"required\": [\"item1\", \"item2\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"item1\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"item2\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Item\": {\n+                    \"title\": \"Item\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Message\": {\n+                    \"title\": \"Message\",\n+                    \"required\": [\"title\", \"description\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    },\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n+\n+\n+def test_warn_duplicate_operation_id():\n+    def broken_operation_id(route: APIRoute):\n+        return \"foo\"\n+\n+    app = FastAPI(generate_unique_id_function=broken_operation_id)\n+\n+    @app.post(\"/\")\n+    def post_root(item1: Item):\n+        return item1  # pragma: nocover\n+\n+    @app.post(\"/second\")\n+    def post_second(item1: Item):\n+        return item1  # pragma: nocover\n+\n+    @app.post(\"/third\")\n+    def post_third(item1: Item):\n+        return item1  # pragma: nocover\n+\n+    client = TestClient(app)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        client.get(\"/openapi.json\")\n+        assert len(w) == 2\n+        assert issubclass(w[-1].category, UserWarning)\n+        assert \"Duplicate Operation ID\" in str(w[-1].message)\n\n@@ -1,3 +1,5 @@\n+import warnings\n+\n import pytest\n from fastapi import APIRouter, Depends, FastAPI, Response\n from fastapi.responses import JSONResponse\n@@ -343,7 +345,11 @@ client = TestClient(app)\n \n def test_openapi():\n     client = TestClient(app)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n         response = client.get(\"/openapi.json\")\n+        assert issubclass(w[-1].category, UserWarning)\n+        assert \"Duplicate Operation ID\" in str(w[-1].message)\n     assert response.json() == openapi_schema\n \n \n\n\n@@ -0,0 +1,188 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.generate_clients.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"tags\": [\"items\"],\n+                \"summary\": \"Get Items\",\n+                \"operationId\": \"items-get_items\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Items-Get Items\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+            },\n+            \"post\": {\n+                \"tags\": [\"items\"],\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"items-create_item\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/ResponseMessage\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        \"/users/\": {\n+            \"post\": {\n+                \"tags\": [\"users\"],\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"users-create_user\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/ResponseMessage\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ResponseMessage\": {\n+                \"title\": \"ResponseMessage\",\n+                \"required\": [\"message\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    with client:\n+        response = client.get(\"/openapi.json\")\n+\n+        assert response.json() == openapi_schema\n+\n+\n+def test_post_items():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 5})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Item received\"}\n+\n+\n+def test_post_users():\n+    response = client.post(\n+        \"/users/\", json={\"username\": \"Foo\", \"email\": \"foo@example.com\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"User received\"}\n+\n+\n+def test_get_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Plumbus\", \"price\": 3},\n+        {\"name\": \"Portal Gun\", \"price\": 9001},\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
