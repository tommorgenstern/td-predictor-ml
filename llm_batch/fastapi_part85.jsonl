{"custom_id": "fastapi#2e8db846b4b3d8deae94b757d99624f5e762bf1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 460 | Files Changed: 3 | Hunks: 7 | Methods Changed: 15 | Complexity Δ (Sum/Max): -7/1 | Churn Δ: 484 | Churn Cumulative: 1676 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,29 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.path_operation_configuration.tutorial005 import app\n-\n-from ...utils import needs_pydanticv1, needs_pydanticv2\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310, needs_pydanticv1, needs_pydanticv2\n \n \n-def test_query_params_str_validations():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial005\",\n+        pytest.param(\"tutorial005_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial005_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.path_operation_configuration.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_query_params_str_validations(client: TestClient):\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -20,7 +36,7 @@ def test_query_params_str_validations():\n \n \n @needs_pydanticv2\n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -123,7 +139,7 @@ def test_openapi_schema():\n \n # TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n-def test_openapi_schema_pv1():\n+def test_openapi_schema_pv1(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,226 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv1, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.path_operation_configuration.tutorial005_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_query_params_str_validations(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py310\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"The created item\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create an item\",\n-                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\n-                            \"title\": \"Description\",\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                        },\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\n-                            \"title\": \"Tax\",\n-                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                        },\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"uniqueItems\": True,\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_py310\n-@needs_pydanticv1\n-def test_openapi_schema_pv1(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"The created item\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create an item\",\n-                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"uniqueItems\": True,\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,226 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv1, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.path_operation_configuration.tutorial005_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_query_params_str_validations(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py39\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"The created item\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create an item\",\n-                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\n-                            \"title\": \"Description\",\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                        },\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\n-                            \"title\": \"Tax\",\n-                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                        },\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"uniqueItems\": True,\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_py39\n-@needs_pydanticv1\n-def test_openapi_schema_pv1(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"The created item\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create an item\",\n-                    \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"uniqueItems\": True,\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#09ccfce228e51648dffe8d92d9ea3bdf66044824", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 184 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 198 | Churn Cumulative: 931 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,23 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py310\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params.tutorial006 import app\n \n-    c = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial006\",\n+        pytest.param(\"tutorial006_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.query_params.{request.param}\")\n+\n+    c = TestClient(mod.app)\n     return c\n \n \n\n@@ -1,180 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.query_params.tutorial006_py310 import app\n-\n-    c = TestClient(app)\n-    return c\n-\n-\n-@needs_py310\n-def test_foo_needy_very(client: TestClient):\n-    response = client.get(\"/items/foo?needy=very\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": \"foo\",\n-        \"needy\": \"very\",\n-        \"skip\": 0,\n-        \"limit\": None,\n-    }\n-\n-\n-@needs_py310\n-def test_foo_no_needy(client: TestClient):\n-    response = client.get(\"/items/foo?skip=a&limit=b\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"needy\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"query\", \"skip\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"a\",\n-                },\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"query\", \"limit\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"b\",\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"needy\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"query\", \"skip\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                },\n-                {\n-                    \"loc\": [\"query\", \"limit\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User Item\",\n-                    \"operationId\": \"read_user_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n-                            \"name\": \"needy\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Limit\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Limit\", \"type\": \"integer\"}\n-                            ),\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c7d888a15f0500d06f0df618360e187fb965d3cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 480 | Files Changed: 3 | Hunks: 6 | Methods Changed: 16 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 495 | Churn Cumulative: 2085 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,24 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_forms.tutorial001 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_forms.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,234 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_forms.tutorial001_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\"}\n-\n-\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_login__post\": {\n-                    \"title\": \"Body_login_login__post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,242 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_forms.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\"}\n-\n-\n-@needs_py39\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_login_login__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_login_login__post\": {\n-                    \"title\": \"Body_login_login__post\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d309c9e1403e645977afa7809d61d88e776140fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 630 | Files Changed: 3 | Hunks: 6 | Methods Changed: 18 | Complexity Δ (Sum/Max): -16/0 | Churn Δ: 645 | Churn Cumulative: 2600 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,14 +1,25 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39\n \n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_forms_and_files.tutorial001 import app\n \n-    return app\n+@pytest.fixture(\n+    name=\"app\",\n+    params=[\n+        \"tutorial001\",\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_forms_and_files.{request.param}\")\n+\n+    return mod.app\n \n \n @pytest.fixture(name=\"client\")\n\n@@ -1,309 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_forms_and_files.tutorial001_an import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_form_no_file(client: TestClient):\n-    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_file_no_token(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_files_and_token(tmp_path, app: FastAPI):\n-    patha = tmp_path / \"test.txt\"\n-    pathb = tmp_path / \"testb.txt\"\n-    patha.write_text(\"<file content>\")\n-    pathb.write_text(\"<file b content>\")\n-\n-    client = TestClient(app)\n-    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n-        response = client.post(\n-            \"/files/\",\n-            data={\"token\": \"foo\"},\n-            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"file_size\": 14,\n-        \"token\": \"foo\",\n-        \"fileb_content_type\": \"text/plain\",\n-    }\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\", \"fileb\", \"token\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n-                        \"fileb\": {\n-                            \"title\": \"Fileb\",\n-                            \"type\": \"string\",\n-                            \"format\": \"binary\",\n-                        },\n-                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,317 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_forms_and_files.tutorial001_an_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_form_no_file(client: TestClient):\n-    response = client.post(\"/files/\", data={\"token\": \"foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_file_no_token(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"fileb\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_files_and_token(tmp_path, app: FastAPI):\n-    patha = tmp_path / \"test.txt\"\n-    pathb = tmp_path / \"testb.txt\"\n-    patha.write_text(\"<file content>\")\n-    pathb.write_text(\"<file b content>\")\n-\n-    client = TestClient(app)\n-    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n-        response = client.post(\n-            \"/files/\",\n-            data={\"token\": \"foo\"},\n-            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"file_size\": 14,\n-        \"token\": \"foo\",\n-        \"fileb_content_type\": \"text/plain\",\n-    }\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\", \"fileb\", \"token\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n-                        \"fileb\": {\n-                            \"title\": \"Fileb\",\n-                            \"type\": \"string\",\n-                            \"format\": \"binary\",\n-                        },\n-                        \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
