{"custom_id": "fastapi#2b54432a9c78730b0dd69fca8f15d932d5a31d6b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 356 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.75.1\"\n+__version__ = \"0.75.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#33d61430cf48a9442c0809b76564827bea6ea9ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 6656 | Contributors (this commit): 45 | Commits (past 90d): 6 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ async def contextmanager_in_threadpool(\n     try:\n         yield await run_in_threadpool(cm.__enter__)\n     except Exception as e:\n-        ok = await run_in_threadpool(cm.__exit__, type(e), e, None)\n+        ok: bool = await run_in_threadpool(cm.__exit__, type(e), e, None)\n         if not ok:\n             raise e\n     else:\n\n@@ -462,13 +462,10 @@ async def solve_dependencies(\n ]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n-    response = response or Response(\n-        content=None,\n-        status_code=None,  # type: ignore\n-        headers=None,  # type: ignore # in Starlette\n-        media_type=None,  # type: ignore # in Starlette\n-        background=None,  # type: ignore # in Starlette\n-    )\n+    if response is None:\n+        response = Response()\n+        del response.headers[\"content-length\"]\n+        response.status_code = None  # type: ignore\n     dependency_cache = dependency_cache or {}\n     sub_dependant: Dependant\n     for sub_dependant in dependant.dependencies:\n\n@@ -127,7 +127,7 @@ async def serialize_response(\n         if is_coroutine:\n             value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n         else:\n-            value, errors_ = await run_in_threadpool(\n+            value, errors_ = await run_in_threadpool(  # type: ignore[misc]\n                 field.validate, response_content, {}, loc=(\"response\",)\n             )\n         if isinstance(errors_, ErrorWrapper):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9090c771eea9a51b17d0eb76dd060edd9f2e640e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 358 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.75.2\"\n+__version__ = \"0.76.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#86fa3cb24ff01578dddef6aa67f28d6abdfcbfce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 514 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,8 +12,9 @@ class HTTPException(StarletteHTTPException):\n         detail: Any = None,\n         headers: Optional[Dict[str, Any]] = None,\n     ) -> None:\n-        super().__init__(status_code=status_code, detail=detail)\n-        self.headers = headers\n+        super().__init__(\n+            status_code=status_code, detail=detail, headers=headers  # type: ignore\n+        )\n \n \n RequestErrorModel: Type[BaseModel] = create_model(\"Request\")\n\n@@ -32,12 +32,12 @@ def delete_item(item_id: str, item: Item):\n \n @app.head(\"/items/{item_id}\")\n def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})\n \n \n @app.options(\"/items/{item_id}\")\n def options_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})\n \n \n @app.patch(\"/items/{item_id}\")\n@@ -47,7 +47,7 @@ def patch_item(item_id: str, item: Item):\n \n @app.trace(\"/items/{item_id}\")\n def trace_item(item_id: str):\n-    return JSONResponse(media_type=\"message/http\")\n+    return JSONResponse(None, media_type=\"message/http\")\n \n \n client = TestClient(app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#069645444547cdfb083f84e84982f03fb4e597cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 360 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.76.0\"\n+__version__ = \"0.77.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f3969120438a104597a2d7e62039b00264360fa3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 34 | Churn Cumulative: 7687 | Contributors (this commit): 41 | Commits (past 90d): 10 | Contributors (cumulative): 60 | DMM Complexity: 0.6\n\nDIFF:\n@@ -1,5 +1,16 @@\n from enum import Enum\n-from typing import Any, Callable, Coroutine, Dict, List, Optional, Sequence, Type, Union\n+from typing import (\n+    Any,\n+    Awaitable,\n+    Callable,\n+    Coroutine,\n+    Dict,\n+    List,\n+    Optional,\n+    Sequence,\n+    Type,\n+    Union,\n+)\n \n from fastapi import routing\n from fastapi.datastructures import Default, DefaultPlaceholder\n@@ -121,11 +132,8 @@ class FastAPI(Starlette):\n             generate_unique_id_function=generate_unique_id_function,\n         )\n         self.exception_handlers: Dict[\n-            Union[int, Type[Exception]],\n-            Callable[[Request, Any], Coroutine[Any, Any, Response]],\n-        ] = (\n-            {} if exception_handlers is None else dict(exception_handlers)\n-        )\n+            Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n+        ] = ({} if exception_handlers is None else dict(exception_handlers))\n         self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n         self.exception_handlers.setdefault(\n             RequestValidationError, request_validation_exception_handler\n\n@@ -12,9 +12,7 @@ class HTTPException(StarletteHTTPException):\n         detail: Any = None,\n         headers: Optional[Dict[str, Any]] = None,\n     ) -> None:\n-        super().__init__(\n-            status_code=status_code, detail=detail, headers=headers  # type: ignore\n-        )\n+        super().__init__(status_code=status_code, detail=detail, headers=headers)\n \n \n RequestErrorModel: Type[BaseModel] = create_model(\"Request\")\n\n@@ -478,11 +478,11 @@ class APIRouter(routing.Router):\n         ),\n     ) -> None:\n         super().__init__(\n-            routes=routes,  # type: ignore # in Starlette\n+            routes=routes,\n             redirect_slashes=redirect_slashes,\n-            default=default,  # type: ignore # in Starlette\n-            on_startup=on_startup,  # type: ignore # in Starlette\n-            on_shutdown=on_shutdown,  # type: ignore # in Starlette\n+            default=default,\n+            on_startup=on_startup,\n+            on_shutdown=on_shutdown,\n         )\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n@@ -757,7 +757,7 @@ class APIRouter(routing.Router):\n                     generate_unique_id_function=current_generate_unique_id,\n                 )\n             elif isinstance(route, routing.Route):\n-                methods = list(route.methods or [])  # type: ignore # in Starlette\n+                methods = list(route.methods or [])\n                 self.add_route(\n                     prefix + route.path,\n                     route.endpoint,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2aaac141ddb79d1f9071f8e02d2b2097f3d4589f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 362 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.77.0\"\n+__version__ = \"0.77.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#99a41e7f8dc21bc0f076a20cd6c0e99dce5abcc1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 66 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n     image: Optional[Image] = None\n \n \n\n@@ -14,7 +14,7 @@ class Item(BaseModel):\n     description: str | None = None\n     price: float\n     tax: float | None = None\n-    tags: set[str] = []\n+    tags: set[str] = set()\n     image: Image | None = None\n \n \n\n@@ -16,7 +16,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: set[str] = []\n+    tags: set[str] = set()\n     image: Optional[Image] = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9cae3cdb09405a2a5c22bbd4f1d328ee5a2259eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 4764 | Contributors (this commit): 28 | Commits (past 90d): 8 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -48,9 +48,7 @@ if __name__ == \"__main__\":\n             use_pr = pr\n             break\n     if not use_pr:\n-        logging.error(\n-            f\"No PR found for hash: {event.workflow_run.head_commit.id}\"\n-        )\n+        logging.error(f\"No PR found for hash: {event.workflow_run.head_commit.id}\")\n         sys.exit(0)\n     github_headers = {\n         \"Authorization\": f\"token {settings.input_token.get_secret_value()}\"\n\n@@ -1,7 +1,7 @@\n import logging\n+import random\n import time\n from pathlib import Path\n-import random\n from typing import Dict, Optional\n \n import yaml\n@@ -54,7 +54,7 @@ if __name__ == \"__main__\":\n     )\n     if pr.state == \"open\":\n         logging.debug(f\"PR is open: {pr.number}\")\n-        label_strs = set([label.name for label in pr.get_labels()])\n+        label_strs = {label.name for label in pr.get_labels()}\n         if lang_all_label in label_strs and awaiting_label in label_strs:\n             logging.info(\n                 f\"This PR seems to be a language translation and awaiting reviews: {pr.number}\"\n\n@@ -364,7 +364,7 @@ class APIRoute(routing.Route):\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         if methods is None:\n             methods = [\"GET\"]\n-        self.methods: Set[str] = set([method.upper() for method in methods])\n+        self.methods: Set[str] = {method.upper() for method in methods}\n         if isinstance(generate_unique_id_function, DefaultPlaceholder):\n             current_generate_unique_id: Callable[\n                 [\"APIRoute\"], str\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a5eff3b78e6713ed77f0bff0193effa3ea49aba3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 118 | Files Changed: 1 | Hunks: 1 | Methods Changed: 8 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 118 | Churn Cumulative: 244 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,118 +0,0 @@\n-from fastapi import (\n-    Body,\n-    Cookie,\n-    Depends,\n-    FastAPI,\n-    File,\n-    Form,\n-    Header,\n-    Path,\n-    Query,\n-    Security,\n-)\n-from fastapi.security import (\n-    HTTPBasic,\n-    OAuth2,\n-    OAuth2PasswordBearer,\n-    OAuth2PasswordRequestForm,\n-)\n-from pydantic import BaseModel\n-from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n-from starlette.status import HTTP_202_ACCEPTED\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/security\")\n-def get_security(sec=Security(HTTPBasic())):\n-    return sec\n-\n-\n-reusable_oauth2 = OAuth2(\n-    flows={\n-        \"password\": {\n-            \"tokenUrl\": \"token\",\n-            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n-        }\n-    }\n-)\n-\n-\n-@app.get(\"/security/oauth2\")\n-def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n-    return sec\n-\n-\n-@app.post(\"/token\")\n-def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n-    data = request_data.parse()\n-    access_token = data.username + \":\" + data.password\n-    return {\"access_token\": access_token}\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    price: float\n-    is_offer: bool\n-\n-\n-class FakeDB:\n-    def __init__(self):\n-        self.data = {\n-            \"johndoe\": {\n-                \"username\": \"johndoe\",\n-                \"password\": \"shouldbehashed\",\n-                \"first_name\": \"John\",\n-                \"last_name\": \"Doe\",\n-            }\n-        }\n-\n-\n-class DBConnectionManager:\n-    def __init__(self):\n-        self.db = FakeDB()\n-\n-    def __call__(self):\n-        return self.db\n-\n-\n-connection_manager = DBConnectionManager()\n-\n-\n-class TokenUserData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-class UserInDB(BaseModel):\n-    username: str\n-    password: str\n-    first_name: str\n-    last_name: str\n-\n-\n-def require_token(\n-    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n-):\n-    raw_token = token.replace(\"Bearer \", \"\")\n-    # Never do this plaintext password usage in production\n-    username, password = raw_token.split(\":\")\n-    return TokenUserData(username=username, password=password)\n-\n-\n-def require_user(\n-    db: FakeDB = Depends(connection_manager),\n-    user_data: TokenUserData = Depends(require_token),\n-):\n-    return db.data[user_data.username]\n-\n-\n-class UserOut(BaseModel):\n-    username: str\n-    first_name: str\n-    last_name: str\n-\n-\n-@app.get(\"/dependency\", response_model=UserOut)\n-def get_dependency(user: UserInDB = Depends(require_user)):\n-    return user\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#199916ac8cac7eff1348a91aa19ae0995ad703db", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 13 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/users\")\n+async def read_users():\n+    return [\"Rick\", \"Morty\"]\n+\n+\n+@app.get(\"/users\")\n+async def read_users2():\n+    return [\"Bean\", \"Elfo\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#82775f7cd01f93ca10ed7dcf0081d5c746e62068", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 564 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -147,15 +147,15 @@ def generate_unique_id(route: \"APIRoute\") -> str:\n \n \n def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n-    for key in update_dict:\n+    for key, value in update_dict.items():\n         if (\n             key in main_dict\n             and isinstance(main_dict[key], dict)\n-            and isinstance(update_dict[key], dict)\n+            and isinstance(value, dict)\n         ):\n-            deep_dict_update(main_dict[key], update_dict[key])\n+            deep_dict_update(main_dict[key], value)\n         else:\n-            main_dict[key] = update_dict[key]\n+            main_dict[key] = value\n \n \n def get_value_or_default(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8b66b9ca3ef8b1cdb0ca2089781a04fe0e021c65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 10 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9262fa836283a3fcd05ba7f7fb6f3aa14b377f49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 344 | Lines Deleted: 296 | Files Changed: 106 | Hunks: 248 | Methods Changed: 346 | Complexity Δ (Sum/Max): 47/6 | Churn Δ: 640 | Churn Cumulative: 10200 | Contributors (this commit): 56 | Commits (past 90d): 115 | Contributors (cumulative): 207 | DMM Complexity: 0.7777777777777778\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI, status\n from fastapi.responses import JSONResponse\n@@ -10,7 +10,9 @@ items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"siz\n \n @app.put(\"/items/{item_id}\")\n async def upsert_item(\n-    item_id: str, name: Optional[str] = Body(None), size: Optional[int] = Body(None)\n+    item_id: str,\n+    name: Union[str, None] = Body(default=None),\n+    size: Union[int, None] = Body(default=None),\n ):\n     if item_id in items:\n         item = items[item_id]\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Header, HTTPException\n from pydantic import BaseModel\n@@ -16,11 +16,11 @@ app = FastAPI()\n class Item(BaseModel):\n     id: str\n     title: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n @app.get(\"/items/{item_id}\", response_model=Item)\n-async def read_main(item_id: str, x_token: str = Header(...)):\n+async def read_main(item_id: str, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item_id not in fake_db:\n@@ -29,7 +29,7 @@ async def read_main(item_id: str, x_token: str = Header(...)):\n \n \n @app.post(\"/items/\", response_model=Item)\n-async def create_item(item: Item, x_token: str = Header(...)):\n+async def create_item(item: Item, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n\n@@ -18,7 +18,7 @@ class Item(BaseModel):\n \n \n @app.get(\"/items/{item_id}\", response_model=Item)\n-async def read_main(item_id: str, x_token: str = Header(...)):\n+async def read_main(item_id: str, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item_id not in fake_db:\n@@ -27,7 +27,7 @@ async def read_main(item_id: str, x_token: str = Header(...)):\n \n \n @app.post(\"/items/\", response_model=Item)\n-async def create_item(item: Item, x_token: str = Header(...)):\n+async def create_item(item: Item, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n\n@@ -1,7 +1,7 @@\n from fastapi import Header, HTTPException\n \n \n-async def get_token_header(x_token: str = Header(...)):\n+async def get_token_header(x_token: str = Header()):\n     if x_token != \"fake-super-secret-token\":\n         raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel, Field\n@@ -8,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = Field(\n-        None, title=\"The description of the item\", max_length=300\n+    description: Union[str, None] = Field(\n+        default=None, title=\"The description of the item\", max_length=300\n     )\n-    price: float = Field(..., gt=0, description=\"The price must be greater than zero\")\n-    tax: Optional[float] = None\n+    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n+    tax: Union[float, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -7,13 +7,13 @@ app = FastAPI()\n class Item(BaseModel):\n     name: str\n     description: str | None = Field(\n-        None, title=\"The description of the item\", max_length=300\n+        default=None, title=\"The description of the item\", max_length=300\n     )\n-    price: float = Field(..., gt=0, description=\"The price must be greater than zero\")\n+    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n     tax: float | None = None\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Path\n from pydantic import BaseModel\n@@ -8,17 +8,17 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n async def update_item(\n     *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n-    q: Optional[str] = None,\n-    item: Optional[Item] = None,\n+    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: Union[str, None] = None,\n+    item: Union[Item, None] = None,\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -14,7 +14,7 @@ class Item(BaseModel):\n @app.put(\"/items/{item_id}\")\n async def update_item(\n     *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n     q: str | None = None,\n     item: Item | None = None,\n ):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n@@ -8,19 +8,17 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(\n-    item_id: int, item: Item, user: User, importance: int = Body(...)\n-):\n+async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     return results\n\n@@ -17,8 +17,6 @@ class User(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(\n-    item_id: int, item: Item, user: User, importance: int = Body(...)\n-):\n+async def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     return results\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n@@ -8,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n@@ -24,8 +24,8 @@ async def update_item(\n     item_id: int,\n     item: Item,\n     user: User,\n-    importance: int = Body(..., gt=0),\n-    q: Optional[str] = None\n+    importance: int = Body(gt=0),\n+    q: Union[str, None] = None\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     if q:\n\n@@ -22,7 +22,7 @@ async def update_item(\n     item_id: int,\n     item: Item,\n     user: User,\n-    importance: int = Body(..., gt=0),\n+    importance: int = Body(gt=0),\n     q: str | None = None\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n@@ -8,12 +8,12 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -12,6 +12,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Cookie, FastAPI\n \n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(ads_id: Optional[str] = Cookie(None)):\n+async def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n     return {\"ads_id\": ads_id}\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(ads_id: str | None = Cookie(None)):\n+async def read_items(ads_id: str | None = Cookie(default=None)):\n     return {\"ads_id\": ads_id}\n\n@@ -31,5 +31,5 @@ app.router.route_class = GzipRoute\n \n \n @app.post(\"/sum\")\n-async def sum_numbers(numbers: List[int] = Body(...)):\n+async def sum_numbers(numbers: List[int] = Body()):\n     return {\"sum\": sum(numbers)}\n\n@@ -25,5 +25,5 @@ app.router.route_class = ValidationErrorLoggingRoute\n \n \n @app.post(\"/\")\n-async def sum_numbers(numbers: List[int] = Body(...)):\n+async def sum_numbers(numbers: List[int] = Body()):\n     return sum(numbers)\n\n@@ -10,7 +10,7 @@ def query_extractor(q: Optional[str] = None):\n \n \n def query_or_cookie_extractor(\n-    q: str = Depends(query_extractor), last_query: Optional[str] = Cookie(None)\n+    q: str = Depends(query_extractor), last_query: Optional[str] = Cookie(default=None)\n ):\n     if not q:\n         return last_query\n\n@@ -8,7 +8,7 @@ def query_extractor(q: str | None = None):\n \n \n def query_or_cookie_extractor(\n-    q: str = Depends(query_extractor), last_query: str | None = Cookie(None)\n+    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n ):\n     if not q:\n         return last_query\n\n@@ -3,12 +3,12 @@ from fastapi import Depends, FastAPI, Header, HTTPException\n app = FastAPI()\n \n \n-async def verify_token(x_token: str = Header(...)):\n+async def verify_token(x_token: str = Header()):\n     if x_token != \"fake-super-secret-token\":\n         raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n \n \n-async def verify_key(x_key: str = Header(...)):\n+async def verify_key(x_key: str = Header()):\n     if x_key != \"fake-super-secret-key\":\n         raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n     return x_key\n\n@@ -1,12 +1,12 @@\n from fastapi import Depends, FastAPI, Header, HTTPException\n \n \n-async def verify_token(x_token: str = Header(...)):\n+async def verify_token(x_token: str = Header()):\n     if x_token != \"fake-super-secret-token\":\n         raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n \n \n-async def verify_key(x_key: str = Header(...)):\n+async def verify_key(x_key: str = Header()):\n     if x_key != \"fake-super-secret-key\":\n         raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n     return x_key\n\n@@ -10,10 +10,10 @@ app = FastAPI()\n @app.put(\"/items/{item_id}\")\n async def read_items(\n     item_id: UUID,\n-    start_datetime: Optional[datetime] = Body(None),\n-    end_datetime: Optional[datetime] = Body(None),\n-    repeat_at: Optional[time] = Body(None),\n-    process_after: Optional[timedelta] = Body(None),\n+    start_datetime: Optional[datetime] = Body(default=None),\n+    end_datetime: Optional[datetime] = Body(default=None),\n+    repeat_at: Optional[time] = Body(default=None),\n+    process_after: Optional[timedelta] = Body(default=None),\n ):\n     start_process = start_datetime + process_after\n     duration = end_datetime - start_process\n\n@@ -9,10 +9,10 @@ app = FastAPI()\n @app.put(\"/items/{item_id}\")\n async def read_items(\n     item_id: UUID,\n-    start_datetime: datetime | None = Body(None),\n-    end_datetime: datetime | None = Body(None),\n-    repeat_at: time | None = Body(None),\n-    process_after: timedelta | None = Body(None),\n+    start_datetime: datetime | None = Body(default=None),\n+    end_datetime: datetime | None = Body(default=None),\n+    repeat_at: time | None = Body(default=None),\n+    process_after: timedelta | None = Body(default=None),\n ):\n     start_process = start_datetime + process_after\n     duration = end_datetime - start_process\n\n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(user_agent: Optional[str] = Header(None)):\n+async def read_items(user_agent: Optional[str] = Header(default=None)):\n     return {\"User-Agent\": user_agent}\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(user_agent: str | None = Header(None)):\n+async def read_items(user_agent: str | None = Header(default=None)):\n     return {\"User-Agent\": user_agent}\n\n@@ -7,6 +7,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: Optional[str] = Header(None, convert_underscores=False)\n+    strange_header: Optional[str] = Header(default=None, convert_underscores=False)\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -5,6 +5,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: str | None = Header(None, convert_underscores=False)\n+    strange_header: str | None = Header(default=None, convert_underscores=False)\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: Optional[List[str]] = Header(None)):\n+async def read_items(x_token: Optional[List[str]] = Header(default=None)):\n     return {\"X-Token values\": x_token}\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: list[str] | None = Header(None)):\n+async def read_items(x_token: list[str] | None = Header(default=None)):\n     return {\"X-Token values\": x_token}\n\n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: Optional[list[str]] = Header(None)):\n+async def read_items(x_token: Optional[list[str]] = Header(default=None)):\n     return {\"X-Token values\": x_token}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Path, Query\n \n@@ -7,8 +7,8 @@ app = FastAPI()\n \n @app.get(\"/items/{item_id}\")\n async def read_items(\n-    item_id: int = Path(..., title=\"The ID of the item to get\"),\n-    q: Optional[str] = Query(None, alias=\"item-query\"),\n+    item_id: int = Path(title=\"The ID of the item to get\"),\n+    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -5,8 +5,8 @@ app = FastAPI()\n \n @app.get(\"/items/{item_id}\")\n async def read_items(\n-    item_id: int = Path(..., title=\"The ID of the item to get\"),\n-    q: str | None = Query(None, alias=\"item-query\"),\n+    item_id: int = Path(title=\"The ID of the item to get\"),\n+    q: str | None = Query(default=None, alias=\"item-query\"),\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -4,9 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_items(\n-    q: str, item_id: int = Path(..., title=\"The ID of the item to get\")\n-):\n+async def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n     results = {\"item_id\": item_id}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,9 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_items(\n-    *, item_id: int = Path(..., title=\"The ID of the item to get\"), q: str\n-):\n+async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n     results = {\"item_id\": item_id}\n     if q:\n         results.update({\"q\": q})\n\n@@ -5,7 +5,7 @@ app = FastAPI()\n \n @app.get(\"/items/{item_id}\")\n async def read_items(\n-    *, item_id: int = Path(..., title=\"The ID of the item to get\", ge=1), q: str\n+    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -6,7 +6,7 @@ app = FastAPI()\n @app.get(\"/items/{item_id}\")\n async def read_items(\n     *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", gt=0, le=1000),\n+    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n     q: str,\n ):\n     results = {\"item_id\": item_id}\n\n@@ -6,9 +6,9 @@ app = FastAPI()\n @app.get(\"/items/{item_id}\")\n async def read_items(\n     *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n     q: str,\n-    size: float = Query(..., gt=0, lt=10.5)\n+    size: float = Query(gt=0, lt=10.5)\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[str] = Query(None, max_length=50)):\n+async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str | None = Query(None, max_length=50)):\n+async def read_items(q: str | None = Query(default=None, max_length=50)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -6,7 +6,9 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[str] = Query(None, min_length=3, max_length=50)):\n+async def read_items(\n+    q: Union[str, None] = Query(default=None, min_length=3, max_length=50)\n+):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str | None = Query(None, min_length=3, max_length=50)):\n+async def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -7,7 +7,9 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Optional[str] = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n+    q: Union[str, None] = Query(\n+        default=None, min_length=3, max_length=50, regex=\"^fixedquery$\"\n+    )\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -5,7 +5,8 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str | None = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n+    q: str\n+    | None = Query(default=None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(\"fixedquery\", min_length=3)):\n+async def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(..., min_length=3)):\n+async def read_items(q: str = Query(min_length=3)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(default=..., min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from typing import Union\n+\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: Union[str, None] = Query(default=..., min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = Query(default=..., min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI, Query\n+from pydantic import Required\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(default=Required, min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Optional[str] = Query(None, title=\"Query string\", min_length=3)\n+    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3)\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -4,7 +4,9 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str | None = Query(None, title=\"Query string\", min_length=3)):\n+async def read_items(\n+    q: str | None = Query(default=None, title=\"Query string\", min_length=3)\n+):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -7,8 +7,8 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Optional[str] = Query(\n-        None,\n+    q: Union[str, None] = Query(\n+        default=None,\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n         min_length=3,\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n async def read_items(\n     q: str\n     | None = Query(\n-        None,\n+        default=None,\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n         min_length=3,\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[str] = Query(None, alias=\"item-query\")):\n+async def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str | None = Query(None, alias=\"item-query\")):\n+async def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -7,8 +7,8 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Optional[str] = Query(\n-        None,\n+    q: Union[str, None] = Query(\n+        default=None,\n         alias=\"item-query\",\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n async def read_items(\n     q: str\n     | None = Query(\n-        None,\n+        default=None,\n         alias=\"item-query\",\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI, Query\n \n@@ -6,6 +6,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[List[str]] = Query(None)):\n+async def read_items(q: Union[List[str], None] = Query(default=None)):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -4,6 +4,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: list[str] | None = Query(None)):\n+async def read_items(q: list[str] | None = Query(default=None)):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -6,6 +6,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[list[str]] = Query(None)):\n+async def read_items(q: Union[list[str], None] = Query(default=None)):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -6,6 +6,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: List[str] = Query([\"foo\", \"bar\"])):\n+async def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -4,6 +4,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: list[str] = Query([\"foo\", \"bar\"])):\n+async def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -4,6 +4,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: list = Query([])):\n+async def read_items(q: list = Query(default=[])):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Query\n \n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: Optional[str] = Query(None, include_in_schema=False)\n+    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False)\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -4,7 +4,9 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(hidden_query: str | None = Query(None, include_in_schema=False)):\n+async def read_items(\n+    hidden_query: str | None = Query(default=None, include_in_schema=False)\n+):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n     else:\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(file: bytes = File(...)):\n+async def create_file(file: bytes = File()):\n     return {\"file_size\": len(file)}\n \n \n\n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(file: Optional[bytes] = File(None)):\n+async def create_file(file: Optional[bytes] = File(default=None)):\n     if not file:\n         return {\"message\": \"No file sent\"}\n     else:\n\n@@ -4,7 +4,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(file: bytes | None = File(None)):\n+async def create_file(file: bytes | None = File(default=None)):\n     if not file:\n         return {\"message\": \"No file sent\"}\n     else:\n\n@@ -4,12 +4,12 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(file: bytes = File(..., description=\"A file read as bytes\")):\n+async def create_file(file: bytes = File(description=\"A file read as bytes\")):\n     return {\"file_size\": len(file)}\n \n \n @app.post(\"/uploadfile/\")\n async def create_upload_file(\n-    file: UploadFile = File(..., description=\"A file read as UploadFile\")\n+    file: UploadFile = File(description=\"A file read as UploadFile\"),\n ):\n     return {\"filename\": file.filename}\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_files(files: List[bytes] = File(...)):\n+async def create_files(files: List[bytes] = File()):\n     return {\"file_sizes\": [len(file) for file in files]}\n \n \n\n@@ -5,7 +5,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_files(files: list[bytes] = File(...)):\n+async def create_files(files: list[bytes] = File()):\n     return {\"file_sizes\": [len(file) for file in files]}\n \n \n\n@@ -8,14 +8,14 @@ app = FastAPI()\n \n @app.post(\"/files/\")\n async def create_files(\n-    files: List[bytes] = File(..., description=\"Multiple files as bytes\")\n+    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n ):\n     return {\"file_sizes\": [len(file) for file in files]}\n \n \n @app.post(\"/uploadfiles/\")\n async def create_upload_files(\n-    files: List[UploadFile] = File(..., description=\"Multiple files as UploadFile\")\n+    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n ):\n     return {\"filenames\": [file.filename for file in files]}\n \n\n@@ -6,14 +6,14 @@ app = FastAPI()\n \n @app.post(\"/files/\")\n async def create_files(\n-    files: list[bytes] = File(..., description=\"Multiple files as bytes\")\n+    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n ):\n     return {\"file_sizes\": [len(file) for file in files]}\n \n \n @app.post(\"/uploadfiles/\")\n async def create_upload_files(\n-    files: list[UploadFile] = File(..., description=\"Multiple files as UploadFile\")\n+    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n ):\n     return {\"filenames\": [file.filename for file in files]}\n \n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.post(\"/login/\")\n-async def login(username: str = Form(...), password: str = Form(...)):\n+async def login(username: str = Form(), password: str = Form()):\n     return {\"username\": username}\n\n@@ -5,7 +5,7 @@ app = FastAPI()\n \n @app.post(\"/files/\")\n async def create_file(\n-    file: bytes = File(...), fileb: UploadFile = File(...), token: str = Form(...)\n+    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n ):\n     return {\n         \"file_size\": len(file),\n\n@@ -7,10 +7,10 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: str = Field(..., example=\"Foo\")\n-    description: Optional[str] = Field(None, example=\"A very nice Item\")\n-    price: float = Field(..., example=35.4)\n-    tax: Optional[float] = Field(None, example=3.2)\n+    name: str = Field(example=\"Foo\")\n+    description: Optional[str] = Field(default=None, example=\"A very nice Item\")\n+    price: float = Field(example=35.4)\n+    tax: Optional[float] = Field(default=None, example=3.2)\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -5,10 +5,10 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: str = Field(..., example=\"Foo\")\n-    description: str | None = Field(None, example=\"A very nice Item\")\n-    price: float = Field(..., example=35.4)\n-    tax: float | None = Field(None, example=3.2)\n+    name: str = Field(example=\"Foo\")\n+    description: str | None = Field(default=None, example=\"A very nice Item\")\n+    price: float = Field(example=35.4)\n+    tax: float | None = Field(default=None, example=3.2)\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -17,7 +17,6 @@ class Item(BaseModel):\n async def update_item(\n     item_id: int,\n     item: Item = Body(\n-        ...,\n         example={\n             \"name\": \"Foo\",\n             \"description\": \"A very nice Item\",\n\n@@ -15,7 +15,6 @@ class Item(BaseModel):\n async def update_item(\n     item_id: int,\n     item: Item = Body(\n-        ...,\n         example={\n             \"name\": \"Foo\",\n             \"description\": \"A very nice Item\",\n\n@@ -18,7 +18,6 @@ async def update_item(\n     *,\n     item_id: int,\n     item: Item = Body(\n-        ...,\n         examples={\n             \"normal\": {\n                 \"summary\": \"A normal example\",\n\n@@ -16,7 +16,6 @@ async def update_item(\n     *,\n     item_id: int,\n     item: Item = Body(\n-        ...,\n         examples={\n             \"normal\": {\n                 \"summary\": \"A normal example\",\n\n@@ -57,8 +57,8 @@ async def get():\n \n async def get_cookie_or_token(\n     websocket: WebSocket,\n-    session: Optional[str] = Cookie(None),\n-    token: Optional[str] = Query(None),\n+    session: Optional[str] = Cookie(default=None),\n+    token: Optional[str] = Query(default=None),\n ):\n     if session is None and token is None:\n         await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n\n@@ -43,6 +43,7 @@ from pydantic.fields import (\n     FieldInfo,\n     ModelField,\n     Required,\n+    Undefined,\n )\n from pydantic.schema import get_annotation_from_field_info\n from pydantic.typing import ForwardRef, evaluate_forwardref\n@@ -316,7 +317,7 @@ def get_dependant(\n             field_info = param_field.field_info\n             assert isinstance(\n                 field_info, params.Body\n-            ), f\"Param: {param_field.name} can only be a request body, using Body(...)\"\n+            ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n             dependant.body_params.append(param_field)\n     return dependant\n \n@@ -353,7 +354,7 @@ def get_param_field(\n     force_type: Optional[params.ParamTypes] = None,\n     ignore_default: bool = False,\n ) -> ModelField:\n-    default_value = Required\n+    default_value: Any = Undefined\n     had_schema = False\n     if not param.default == param.empty and ignore_default is False:\n         default_value = param.default\n@@ -369,8 +370,13 @@ def get_param_field(\n         if force_type:\n             field_info.in_ = force_type  # type: ignore\n     else:\n-        field_info = default_field_info(default_value)\n-    required = default_value == Required\n+        field_info = default_field_info(default=default_value)\n+    required = True\n+    if default_value is Required or ignore_default:\n+        required = True\n+        default_value = None\n+    elif default_value is not Undefined:\n+        required = False\n     annotation: Any = Any\n     if not param.annotation == param.empty:\n         annotation = param.annotation\n@@ -382,12 +388,11 @@ def get_param_field(\n     field = create_response_field(\n         name=param.name,\n         type_=annotation,\n-        default=None if required else default_value,\n+        default=default_value,\n         alias=alias,\n         required=required,\n         field_info=field_info,\n     )\n-    field.required = required\n     if not had_schema and not is_scalar_field(field=field):\n         field.field_info = params.Body(field_info.default)\n     if not had_schema and lenient_issubclass(field.type_, UploadFile):\n\n@@ -73,7 +73,7 @@ class Server(BaseModel):\n \n \n class Reference(BaseModel):\n-    ref: str = Field(..., alias=\"$ref\")\n+    ref: str = Field(alias=\"$ref\")\n \n \n class Discriminator(BaseModel):\n@@ -101,28 +101,28 @@ class ExternalDocumentation(BaseModel):\n \n \n class Schema(BaseModel):\n-    ref: Optional[str] = Field(None, alias=\"$ref\")\n+    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n     title: Optional[str] = None\n     multipleOf: Optional[float] = None\n     maximum: Optional[float] = None\n     exclusiveMaximum: Optional[float] = None\n     minimum: Optional[float] = None\n     exclusiveMinimum: Optional[float] = None\n-    maxLength: Optional[int] = Field(None, gte=0)\n-    minLength: Optional[int] = Field(None, gte=0)\n+    maxLength: Optional[int] = Field(default=None, gte=0)\n+    minLength: Optional[int] = Field(default=None, gte=0)\n     pattern: Optional[str] = None\n-    maxItems: Optional[int] = Field(None, gte=0)\n-    minItems: Optional[int] = Field(None, gte=0)\n+    maxItems: Optional[int] = Field(default=None, gte=0)\n+    minItems: Optional[int] = Field(default=None, gte=0)\n     uniqueItems: Optional[bool] = None\n-    maxProperties: Optional[int] = Field(None, gte=0)\n-    minProperties: Optional[int] = Field(None, gte=0)\n+    maxProperties: Optional[int] = Field(default=None, gte=0)\n+    minProperties: Optional[int] = Field(default=None, gte=0)\n     required: Optional[List[str]] = None\n     enum: Optional[List[Any]] = None\n     type: Optional[str] = None\n     allOf: Optional[List[\"Schema\"]] = None\n     oneOf: Optional[List[\"Schema\"]] = None\n     anyOf: Optional[List[\"Schema\"]] = None\n-    not_: Optional[\"Schema\"] = Field(None, alias=\"not\")\n+    not_: Optional[\"Schema\"] = Field(default=None, alias=\"not\")\n     items: Optional[Union[\"Schema\", List[\"Schema\"]]] = None\n     properties: Optional[Dict[str, \"Schema\"]] = None\n     additionalProperties: Optional[Union[\"Schema\", Reference, bool]] = None\n@@ -171,7 +171,7 @@ class Encoding(BaseModel):\n \n \n class MediaType(BaseModel):\n-    schema_: Optional[Union[Schema, Reference]] = Field(None, alias=\"schema\")\n+    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n     example: Optional[Any] = None\n     examples: Optional[Dict[str, Union[Example, Reference]]] = None\n     encoding: Optional[Dict[str, Encoding]] = None\n@@ -188,7 +188,7 @@ class ParameterBase(BaseModel):\n     style: Optional[str] = None\n     explode: Optional[bool] = None\n     allowReserved: Optional[bool] = None\n-    schema_: Optional[Union[Schema, Reference]] = Field(None, alias=\"schema\")\n+    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n     example: Optional[Any] = None\n     examples: Optional[Dict[str, Union[Example, Reference]]] = None\n     # Serialization rules for more complex scenarios\n@@ -200,7 +200,7 @@ class ParameterBase(BaseModel):\n \n class Parameter(ParameterBase):\n     name: str\n-    in_: ParameterInType = Field(..., alias=\"in\")\n+    in_: ParameterInType = Field(alias=\"in\")\n \n \n class Header(ParameterBase):\n@@ -258,7 +258,7 @@ class Operation(BaseModel):\n \n \n class PathItem(BaseModel):\n-    ref: Optional[str] = Field(None, alias=\"$ref\")\n+    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n     summary: Optional[str] = None\n     description: Optional[str] = None\n     get: Optional[Operation] = None\n@@ -284,7 +284,7 @@ class SecuritySchemeType(Enum):\n \n \n class SecurityBase(BaseModel):\n-    type_: SecuritySchemeType = Field(..., alias=\"type\")\n+    type_: SecuritySchemeType = Field(alias=\"type\")\n     description: Optional[str] = None\n \n     class Config:\n@@ -299,7 +299,7 @@ class APIKeyIn(Enum):\n \n class APIKey(SecurityBase):\n     type_ = Field(SecuritySchemeType.apiKey, alias=\"type\")\n-    in_: APIKeyIn = Field(..., alias=\"in\")\n+    in_: APIKeyIn = Field(alias=\"in\")\n     name: str\n \n \n\n@@ -5,7 +5,7 @@ from pydantic.fields import Undefined\n \n \n def Path(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     alias: Optional[str] = None,\n     title: Optional[str] = None,\n@@ -44,7 +44,7 @@ def Path(  # noqa: N802\n \n \n def Query(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     alias: Optional[str] = None,\n     title: Optional[str] = None,\n@@ -63,7 +63,7 @@ def Query(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.Query(\n-        default,\n+        default=default,\n         alias=alias,\n         title=title,\n         description=description,\n@@ -83,7 +83,7 @@ def Query(  # noqa: N802\n \n \n def Header(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     alias: Optional[str] = None,\n     convert_underscores: bool = True,\n@@ -103,7 +103,7 @@ def Header(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.Header(\n-        default,\n+        default=default,\n         alias=alias,\n         convert_underscores=convert_underscores,\n         title=title,\n@@ -124,7 +124,7 @@ def Header(  # noqa: N802\n \n \n def Cookie(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     alias: Optional[str] = None,\n     title: Optional[str] = None,\n@@ -143,7 +143,7 @@ def Cookie(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.Cookie(\n-        default,\n+        default=default,\n         alias=alias,\n         title=title,\n         description=description,\n@@ -163,7 +163,7 @@ def Cookie(  # noqa: N802\n \n \n def Body(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     embed: bool = False,\n     media_type: str = \"application/json\",\n@@ -182,7 +182,7 @@ def Body(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.Body(\n-        default,\n+        default=default,\n         embed=embed,\n         media_type=media_type,\n         alias=alias,\n@@ -202,7 +202,7 @@ def Body(  # noqa: N802\n \n \n def Form(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     media_type: str = \"application/x-www-form-urlencoded\",\n     alias: Optional[str] = None,\n@@ -220,7 +220,7 @@ def Form(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.Form(\n-        default,\n+        default=default,\n         media_type=media_type,\n         alias=alias,\n         title=title,\n@@ -239,7 +239,7 @@ def Form(  # noqa: N802\n \n \n def File(  # noqa: N802\n-    default: Any,\n+    default: Any = Undefined,\n     *,\n     media_type: str = \"multipart/form-data\",\n     alias: Optional[str] = None,\n@@ -257,7 +257,7 @@ def File(  # noqa: N802\n     **extra: Any,\n ) -> Any:\n     return params.File(\n-        default,\n+        default=default,\n         media_type=media_type,\n         alias=alias,\n         title=title,\n\n@@ -16,7 +16,7 @@ class Param(FieldInfo):\n \n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -39,7 +39,7 @@ class Param(FieldInfo):\n         self.examples = examples\n         self.include_in_schema = include_in_schema\n         super().__init__(\n-            default,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -62,7 +62,7 @@ class Path(Param):\n \n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -82,7 +82,7 @@ class Path(Param):\n     ):\n         self.in_ = self.in_\n         super().__init__(\n-            ...,\n+            default=...,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -106,7 +106,7 @@ class Query(Param):\n \n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -125,7 +125,7 @@ class Query(Param):\n         **extra: Any,\n     ):\n         super().__init__(\n-            default,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -149,7 +149,7 @@ class Header(Param):\n \n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         alias: Optional[str] = None,\n         convert_underscores: bool = True,\n@@ -170,7 +170,7 @@ class Header(Param):\n     ):\n         self.convert_underscores = convert_underscores\n         super().__init__(\n-            default,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -194,7 +194,7 @@ class Cookie(Param):\n \n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -213,7 +213,7 @@ class Cookie(Param):\n         **extra: Any,\n     ):\n         super().__init__(\n-            default,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -235,7 +235,7 @@ class Cookie(Param):\n class Body(FieldInfo):\n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         embed: bool = False,\n         media_type: str = \"application/json\",\n@@ -258,7 +258,7 @@ class Body(FieldInfo):\n         self.example = example\n         self.examples = examples\n         super().__init__(\n-            default,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -297,7 +297,7 @@ class Form(Body):\n         **extra: Any,\n     ):\n         super().__init__(\n-            default,\n+            default=default,\n             embed=True,\n             media_type=media_type,\n             alias=alias,\n@@ -337,7 +337,7 @@ class File(Form):\n         **extra: Any,\n     ):\n         super().__init__(\n-            default,\n+            default=default,\n             media_type=media_type,\n             alias=alias,\n             title=title,\n\n@@ -45,12 +45,12 @@ class OAuth2PasswordRequestForm:\n \n     def __init__(\n         self,\n-        grant_type: str = Form(None, regex=\"password\"),\n-        username: str = Form(...),\n-        password: str = Form(...),\n-        scope: str = Form(\"\"),\n-        client_id: Optional[str] = Form(None),\n-        client_secret: Optional[str] = Form(None),\n+        grant_type: str = Form(default=None, regex=\"password\"),\n+        username: str = Form(),\n+        password: str = Form(),\n+        scope: str = Form(default=\"\"),\n+        client_id: Optional[str] = Form(default=None),\n+        client_secret: Optional[str] = Form(default=None),\n     ):\n         self.grant_type = grant_type\n         self.username = username\n@@ -95,12 +95,12 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n \n     def __init__(\n         self,\n-        grant_type: str = Form(..., regex=\"password\"),\n-        username: str = Form(...),\n-        password: str = Form(...),\n-        scope: str = Form(\"\"),\n-        client_id: Optional[str] = Form(None),\n-        client_secret: Optional[str] = Form(None),\n+        grant_type: str = Form(regex=\"password\"),\n+        username: str = Form(),\n+        password: str = Form(),\n+        scope: str = Form(default=\"\"),\n+        client_id: Optional[str] = Form(default=None),\n+        client_secret: Optional[str] = Form(default=None),\n     ):\n         super().__init__(\n             grant_type=grant_type,\n\n@@ -52,7 +52,7 @@ def create_response_field(\n     Create a new response field. Raises if type_ is invalid.\n     \"\"\"\n     class_validators = class_validators or {}\n-    field_info = field_info or FieldInfo(None)\n+    field_info = field_info or FieldInfo()\n \n     response_field = functools.partial(\n         ModelField,\n\n@@ -49,97 +49,97 @@ def get_bool_id(item_id: bool):\n \n \n @app.get(\"/path/param/{item_id}\")\n-def get_path_param_id(item_id: Optional[str] = Path(None)):\n+def get_path_param_id(item_id: str = Path()):\n     return item_id\n \n \n @app.get(\"/path/param-required/{item_id}\")\n-def get_path_param_required_id(item_id: str = Path(...)):\n+def get_path_param_required_id(item_id: str = Path()):\n     return item_id\n \n \n @app.get(\"/path/param-minlength/{item_id}\")\n-def get_path_param_min_length(item_id: str = Path(..., min_length=3)):\n+def get_path_param_min_length(item_id: str = Path(min_length=3)):\n     return item_id\n \n \n @app.get(\"/path/param-maxlength/{item_id}\")\n-def get_path_param_max_length(item_id: str = Path(..., max_length=3)):\n+def get_path_param_max_length(item_id: str = Path(max_length=3)):\n     return item_id\n \n \n @app.get(\"/path/param-min_maxlength/{item_id}\")\n-def get_path_param_min_max_length(item_id: str = Path(..., max_length=3, min_length=2)):\n+def get_path_param_min_max_length(item_id: str = Path(max_length=3, min_length=2)):\n     return item_id\n \n \n @app.get(\"/path/param-gt/{item_id}\")\n-def get_path_param_gt(item_id: float = Path(..., gt=3)):\n+def get_path_param_gt(item_id: float = Path(gt=3)):\n     return item_id\n \n \n @app.get(\"/path/param-gt0/{item_id}\")\n-def get_path_param_gt0(item_id: float = Path(..., gt=0)):\n+def get_path_param_gt0(item_id: float = Path(gt=0)):\n     return item_id\n \n \n @app.get(\"/path/param-ge/{item_id}\")\n-def get_path_param_ge(item_id: float = Path(..., ge=3)):\n+def get_path_param_ge(item_id: float = Path(ge=3)):\n     return item_id\n \n \n @app.get(\"/path/param-lt/{item_id}\")\n-def get_path_param_lt(item_id: float = Path(..., lt=3)):\n+def get_path_param_lt(item_id: float = Path(lt=3)):\n     return item_id\n \n \n @app.get(\"/path/param-lt0/{item_id}\")\n-def get_path_param_lt0(item_id: float = Path(..., lt=0)):\n+def get_path_param_lt0(item_id: float = Path(lt=0)):\n     return item_id\n \n \n @app.get(\"/path/param-le/{item_id}\")\n-def get_path_param_le(item_id: float = Path(..., le=3)):\n+def get_path_param_le(item_id: float = Path(le=3)):\n     return item_id\n \n \n @app.get(\"/path/param-lt-gt/{item_id}\")\n-def get_path_param_lt_gt(item_id: float = Path(..., lt=3, gt=1)):\n+def get_path_param_lt_gt(item_id: float = Path(lt=3, gt=1)):\n     return item_id\n \n \n @app.get(\"/path/param-le-ge/{item_id}\")\n-def get_path_param_le_ge(item_id: float = Path(..., le=3, ge=1)):\n+def get_path_param_le_ge(item_id: float = Path(le=3, ge=1)):\n     return item_id\n \n \n @app.get(\"/path/param-lt-int/{item_id}\")\n-def get_path_param_lt_int(item_id: int = Path(..., lt=3)):\n+def get_path_param_lt_int(item_id: int = Path(lt=3)):\n     return item_id\n \n \n @app.get(\"/path/param-gt-int/{item_id}\")\n-def get_path_param_gt_int(item_id: int = Path(..., gt=3)):\n+def get_path_param_gt_int(item_id: int = Path(gt=3)):\n     return item_id\n \n \n @app.get(\"/path/param-le-int/{item_id}\")\n-def get_path_param_le_int(item_id: int = Path(..., le=3)):\n+def get_path_param_le_int(item_id: int = Path(le=3)):\n     return item_id\n \n \n @app.get(\"/path/param-ge-int/{item_id}\")\n-def get_path_param_ge_int(item_id: int = Path(..., ge=3)):\n+def get_path_param_ge_int(item_id: int = Path(ge=3)):\n     return item_id\n \n \n @app.get(\"/path/param-lt-gt-int/{item_id}\")\n-def get_path_param_lt_gt_int(item_id: int = Path(..., lt=3, gt=1)):\n+def get_path_param_lt_gt_int(item_id: int = Path(lt=3, gt=1)):\n     return item_id\n \n \n @app.get(\"/path/param-le-ge-int/{item_id}\")\n-def get_path_param_le_ge_int(item_id: int = Path(..., le=3, ge=1)):\n+def get_path_param_le_ge_int(item_id: int = Path(le=3, ge=1)):\n     return item_id\n \n \n@@ -173,19 +173,19 @@ def get_query_type_int_default(query: int = 10):\n \n \n @app.get(\"/query/param\")\n-def get_query_param(query=Query(None)):\n+def get_query_param(query=Query(default=None)):\n     if query is None:\n         return \"foo bar\"\n     return f\"foo bar {query}\"\n \n \n @app.get(\"/query/param-required\")\n-def get_query_param_required(query=Query(...)):\n+def get_query_param_required(query=Query()):\n     return f\"foo bar {query}\"\n \n \n @app.get(\"/query/param-required/int\")\n-def get_query_param_required_type(query: int = Query(...)):\n+def get_query_param_required_type(query: int = Query()):\n     return f\"foo bar {query}\"\n \n \n\n@@ -26,14 +26,14 @@ async def get_database():\n \n @app.put(\"/invalid-user/{user_id}\")\n def put_invalid_user(\n-    user_id: str, name: str = Body(...), db: dict = Depends(get_database)\n+    user_id: str, name: str = Body(), db: dict = Depends(get_database)\n ):\n     db[user_id] = name\n     raise HTTPException(status_code=400, detail=\"Invalid user\")\n \n \n @app.put(\"/user/{user_id}\")\n-def put_user(user_id: str, name: str = Body(...), db: dict = Depends(get_database)):\n+def put_user(user_id: str, name: str = Body(), db: dict = Depends(get_database)):\n     db[user_id] = name\n     return {\"message\": \"OK\"}\n \n\n@@ -5,17 +5,17 @@ app = FastAPI()\n \n \n @app.post(\"/form/python-list\")\n-def post_form_param_list(items: list = Form(...)):\n+def post_form_param_list(items: list = Form()):\n     return items\n \n \n @app.post(\"/form/python-set\")\n-def post_form_param_set(items: set = Form(...)):\n+def post_form_param_set(items: set = Form()):\n     return items\n \n \n @app.post(\"/form/python-tuple\")\n-def post_form_param_tuple(items: tuple = Form(...)):\n+def post_form_param_tuple(items: tuple = Form()):\n     return items\n \n \n\n@@ -13,7 +13,7 @@ def test_invalid_sequence():\n             title: str\n \n         @app.get(\"/items/\")\n-        def read_items(q: List[Item] = Query(None)):\n+        def read_items(q: List[Item] = Query(default=None)):\n             pass  # pragma: no cover\n \n \n@@ -25,7 +25,7 @@ def test_invalid_tuple():\n             title: str\n \n         @app.get(\"/items/\")\n-        def read_items(q: Tuple[Item, Item] = Query(None)):\n+        def read_items(q: Tuple[Item, Item] = Query(default=None)):\n             pass  # pragma: no cover\n \n \n@@ -37,7 +37,7 @@ def test_invalid_dict():\n             title: str\n \n         @app.get(\"/items/\")\n-        def read_items(q: Dict[str, Item] = Query(None)):\n+        def read_items(q: Dict[str, Item] = Query(default=None)):\n             pass  # pragma: no cover\n \n \n@@ -49,5 +49,5 @@ def test_invalid_simple_dict():\n             title: str\n \n         @app.get(\"/items/\")\n-        def read_items(q: Optional[dict] = Query(None)):\n+        def read_items(q: Optional[dict] = Query(default=None)):\n             pass  # pragma: no cover\n\n@@ -67,7 +67,7 @@ class ModelWithConfig(BaseModel):\n \n \n class ModelWithAlias(BaseModel):\n-    foo: str = Field(..., alias=\"Foo\")\n+    foo: str = Field(alias=\"Foo\")\n \n \n class ModelWithDefault(BaseModel):\n\n@@ -4,5 +4,5 @@ router = APIRouter()\n \n \n @router.post(\"/compute\")\n-def compute(a: int = Body(...), b: str = Body(...)):\n+def compute(a: int = Body(), b: str = Body()):\n     return {\"a\": a, \"b\": b}\n\n@@ -4,5 +4,5 @@ router = APIRouter()\n \n \n @router.post(\"/compute/\")\n-def compute(a: int = Body(...), b: str = Body(...)):\n+def compute(a: int = Body(), b: str = Body()):\n     return {\"a\": a, \"b\": b}\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-def read_items(q: List[int] = Query(None)):\n+def read_items(q: List[int] = Query(default=None)):\n     return {\"q\": q}\n \n \n\n@@ -12,7 +12,7 @@ def test_incorrect_multipart_installed_form(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...)):\n+        async def root(username: str = Form()):\n             return username  # pragma: nocover\n \n \n@@ -22,7 +22,7 @@ def test_incorrect_multipart_installed_file_upload(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(f: UploadFile = File(...)):\n+        async def root(f: UploadFile = File()):\n             return f  # pragma: nocover\n \n \n@@ -32,7 +32,7 @@ def test_incorrect_multipart_installed_file_bytes(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(f: bytes = File(...)):\n+        async def root(f: bytes = File()):\n             return f  # pragma: nocover\n \n \n@@ -42,7 +42,7 @@ def test_incorrect_multipart_installed_multi_form(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...), password: str = Form(...)):\n+        async def root(username: str = Form(), password: str = Form()):\n             return username  # pragma: nocover\n \n \n@@ -52,7 +52,7 @@ def test_incorrect_multipart_installed_form_file(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...), f: UploadFile = File(...)):\n+        async def root(username: str = Form(), f: UploadFile = File()):\n             return username  # pragma: nocover\n \n \n@@ -62,7 +62,7 @@ def test_no_multipart_installed(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...)):\n+        async def root(username: str = Form()):\n             return username  # pragma: nocover\n \n \n@@ -72,7 +72,7 @@ def test_no_multipart_installed_file(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(f: UploadFile = File(...)):\n+        async def root(f: UploadFile = File()):\n             return f  # pragma: nocover\n \n \n@@ -82,7 +82,7 @@ def test_no_multipart_installed_file_bytes(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(f: bytes = File(...)):\n+        async def root(f: bytes = File()):\n             return f  # pragma: nocover\n \n \n@@ -92,7 +92,7 @@ def test_no_multipart_installed_multi_form(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...), password: str = Form(...)):\n+        async def root(username: str = Form(), password: str = Form()):\n             return username  # pragma: nocover\n \n \n@@ -102,5 +102,5 @@ def test_no_multipart_installed_form_file(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...), f: UploadFile = File(...)):\n+        async def root(username: str = Form(), f: UploadFile = File()):\n             return username  # pragma: nocover\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-def read_items(q: Optional[str] = Param(None)):  # type: ignore\n+def read_items(q: Optional[str] = Param(default=None)):  # type: ignore\n     return {\"q\": q}\n \n \n\n@@ -9,26 +9,26 @@ app = FastAPI()\n \n @app.get(\"/hidden_cookie\")\n async def hidden_cookie(\n-    hidden_cookie: Optional[str] = Cookie(None, include_in_schema=False)\n+    hidden_cookie: Optional[str] = Cookie(default=None, include_in_schema=False)\n ):\n     return {\"hidden_cookie\": hidden_cookie}\n \n \n @app.get(\"/hidden_header\")\n async def hidden_header(\n-    hidden_header: Optional[str] = Header(None, include_in_schema=False)\n+    hidden_header: Optional[str] = Header(default=None, include_in_schema=False)\n ):\n     return {\"hidden_header\": hidden_header}\n \n \n @app.get(\"/hidden_path/{hidden_path}\")\n-async def hidden_path(hidden_path: str = Path(..., include_in_schema=False)):\n+async def hidden_path(hidden_path: str = Path(include_in_schema=False)):\n     return {\"hidden_path\": hidden_path}\n \n \n @app.get(\"/hidden_query\")\n async def hidden_query(\n-    hidden_query: Optional[str] = Query(None, include_in_schema=False)\n+    hidden_query: Optional[str] = Query(default=None, include_in_schema=False)\n ):\n     return {\"hidden_query\": hidden_query}\n \n\n@@ -4,7 +4,7 @@ from fastapi.testclient import TestClient\n app = FastAPI()\n \n \n-def get_header(*, someheader: str = Header(...)):\n+def get_header(*, someheader: str = Header()):\n     return someheader\n \n \n\n@@ -21,14 +21,14 @@ class Shop(BaseModel):\n \n \n @app.post(\"/products\")\n-async def create_product(data: Product = Body(..., media_type=media_type, embed=True)):\n+async def create_product(data: Product = Body(media_type=media_type, embed=True)):\n     pass  # pragma: no cover\n \n \n @app.post(\"/shops\")\n async def create_shop(\n-    data: Shop = Body(..., media_type=media_type),\n-    included: typing.List[Product] = Body([], media_type=media_type),\n+    data: Shop = Body(media_type=media_type),\n+    included: typing.List[Product] = Body(default=[], media_type=media_type),\n ):\n     pass  # pragma: no cover\n \n\n@@ -1,3 +1,5 @@\n+from typing import Union\n+\n from fastapi import Body, Cookie, FastAPI, Header, Path, Query\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n@@ -18,14 +20,13 @@ def schema_extra(item: Item):\n \n \n @app.post(\"/example/\")\n-def example(item: Item = Body(..., example={\"data\": \"Data in Body example\"})):\n+def example(item: Item = Body(example={\"data\": \"Data in Body example\"})):\n     return item\n \n \n @app.post(\"/examples/\")\n def examples(\n     item: Item = Body(\n-        ...,\n         examples={\n             \"example1\": {\n                 \"summary\": \"example1 summary\",\n@@ -41,7 +42,6 @@ def examples(\n @app.post(\"/example_examples/\")\n def example_examples(\n     item: Item = Body(\n-        ...,\n         example={\"data\": \"Overriden example\"},\n         examples={\n             \"example1\": {\"value\": {\"data\": \"examples example_examples 1\"}},\n@@ -55,7 +55,7 @@ def example_examples(\n # TODO: enable these tests once/if Form(embed=False) is supported\n # TODO: In that case, define if File() should support example/examples too\n # @app.post(\"/form_example\")\n-# def form_example(firstname: str = Form(..., example=\"John\")):\n+# def form_example(firstname: str = Form(example=\"John\")):\n #     return firstname\n \n \n@@ -89,7 +89,6 @@ def example_examples(\n @app.get(\"/path_example/{item_id}\")\n def path_example(\n     item_id: str = Path(\n-        ...,\n         example=\"item_1\",\n     ),\n ):\n@@ -99,7 +98,6 @@ def path_example(\n @app.get(\"/path_examples/{item_id}\")\n def path_examples(\n     item_id: str = Path(\n-        ...,\n         examples={\n             \"example1\": {\"summary\": \"item ID summary\", \"value\": \"item_1\"},\n             \"example2\": {\"value\": \"item_2\"},\n@@ -112,7 +110,6 @@ def path_examples(\n @app.get(\"/path_example_examples/{item_id}\")\n def path_example_examples(\n     item_id: str = Path(\n-        ...,\n         example=\"item_overriden\",\n         examples={\n             \"example1\": {\"summary\": \"item ID summary\", \"value\": \"item_1\"},\n@@ -125,8 +122,8 @@ def path_example_examples(\n \n @app.get(\"/query_example/\")\n def query_example(\n-    data: str = Query(\n-        None,\n+    data: Union[str, None] = Query(\n+        default=None,\n         example=\"query1\",\n     ),\n ):\n@@ -135,8 +132,8 @@ def query_example(\n \n @app.get(\"/query_examples/\")\n def query_examples(\n-    data: str = Query(\n-        None,\n+    data: Union[str, None] = Query(\n+        default=None,\n         examples={\n             \"example1\": {\"summary\": \"Query example 1\", \"value\": \"query1\"},\n             \"example2\": {\"value\": \"query2\"},\n@@ -148,8 +145,8 @@ def query_examples(\n \n @app.get(\"/query_example_examples/\")\n def query_example_examples(\n-    data: str = Query(\n-        None,\n+    data: Union[str, None] = Query(\n+        default=None,\n         example=\"query_overriden\",\n         examples={\n             \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"query1\"},\n@@ -162,8 +159,8 @@ def query_example_examples(\n \n @app.get(\"/header_example/\")\n def header_example(\n-    data: str = Header(\n-        None,\n+    data: Union[str, None] = Header(\n+        default=None,\n         example=\"header1\",\n     ),\n ):\n@@ -172,8 +169,8 @@ def header_example(\n \n @app.get(\"/header_examples/\")\n def header_examples(\n-    data: str = Header(\n-        None,\n+    data: Union[str, None] = Header(\n+        default=None,\n         examples={\n             \"example1\": {\"summary\": \"header example 1\", \"value\": \"header1\"},\n             \"example2\": {\"value\": \"header2\"},\n@@ -185,8 +182,8 @@ def header_examples(\n \n @app.get(\"/header_example_examples/\")\n def header_example_examples(\n-    data: str = Header(\n-        None,\n+    data: Union[str, None] = Header(\n+        default=None,\n         example=\"header_overriden\",\n         examples={\n             \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"header1\"},\n@@ -199,8 +196,8 @@ def header_example_examples(\n \n @app.get(\"/cookie_example/\")\n def cookie_example(\n-    data: str = Cookie(\n-        None,\n+    data: Union[str, None] = Cookie(\n+        default=None,\n         example=\"cookie1\",\n     ),\n ):\n@@ -209,8 +206,8 @@ def cookie_example(\n \n @app.get(\"/cookie_examples/\")\n def cookie_examples(\n-    data: str = Cookie(\n-        None,\n+    data: Union[str, None] = Cookie(\n+        default=None,\n         examples={\n             \"example1\": {\"summary\": \"cookie example 1\", \"value\": \"cookie1\"},\n             \"example2\": {\"value\": \"cookie2\"},\n@@ -222,8 +219,8 @@ def cookie_examples(\n \n @app.get(\"/cookie_example_examples/\")\n def cookie_example_examples(\n-    data: str = Cookie(\n-        None,\n+    data: Union[str, None] = Cookie(\n+        default=None,\n         example=\"cookie_overriden\",\n         examples={\n             \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"cookie1\"},\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: str = Field(..., alias=\"aliased_name\")\n+    name: str = Field(alias=\"aliased_name\")\n     price: Optional[float] = None\n     owner_ids: Optional[List[int]] = None\n \n\n@@ -5,17 +5,17 @@ app = FastAPI()\n \n \n @app.get(\"/int/{param:int}\")\n-def int_convertor(param: int = Path(...)):\n+def int_convertor(param: int = Path()):\n     return {\"int\": param}\n \n \n @app.get(\"/float/{param:float}\")\n-def float_convertor(param: float = Path(...)):\n+def float_convertor(param: float = Path()):\n     return {\"float\": param}\n \n \n @app.get(\"/path/{param:path}\")\n-def path_convertor(param: str = Path(...)):\n+def path_convertor(param: str = Path()):\n     return {\"path\": param}\n \n \n\n@@ -27,7 +27,7 @@ def post_tuple_of_models(square: Tuple[Coordinate, Coordinate]):\n \n \n @app.post(\"/tuple-form/\")\n-def hello(values: Tuple[int, int] = Form(...)):\n+def hello(values: Tuple[int, int] = Form()):\n     return values\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
