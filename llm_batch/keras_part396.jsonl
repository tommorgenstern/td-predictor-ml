{"custom_id": "keras#f5fea878c271e38946c6681c1c2434e72d0ab977", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 7428 | Contributors (this commit): 100 | Commits (past 90d): 13 | Contributors (cumulative): 100 | DMM Complexity: None\n\nDIFF:\n@@ -1725,8 +1725,12 @@ class BackupAndRestore(Callback):\n @deprecation.deprecated_endpoints(\n     'keras.callbacks.experimental.BackupAndRestore')\n class BackupAndRestoreExperimental(BackupAndRestore):\n+  \"\"\"Deprecated. Please use `tf.keras.callbacks.BackupAndRestore` instead.\n \n-  __doc__ = BackupAndRestore.__doc__\n+  Caution: `tf.keras.callbacks.experimental.BackupAndRestore` endpoint is\n+    deprecated and will be removed in a future release. Please use\n+    `tf.keras.callbacks.BackupAndRestore`.\n+  \"\"\"\n \n   def __init__(self, *args, **kwargs):\n     logging.warning(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#41a4e47cafe382fed5698743d15e0f52e5c74c4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 71 | Churn Cumulative: 20770 | Contributors (this commit): 120 | Commits (past 90d): 25 | Contributors (cumulative): 127 | DMM Complexity: 0.0\n\nDIFF:\n@@ -487,6 +487,7 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n               weighted_metrics=None,\n               run_eagerly=None,\n               steps_per_execution=None,\n+              jit_compile=None,\n               **kwargs):\n     \"\"\"Configures the model for training.\n \n@@ -554,17 +555,28 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n           this as `None` unless your `Model` cannot be run inside a\n           `tf.function`. `run_eagerly=True` is not supported when using\n           `tf.distribute.experimental.ParameterServerStrategy`.\n-        steps_per_execution: Int. Defaults to 1. The number of batches to\n-          run during each `tf.function` call. Running multiple batches\n-          inside a single `tf.function` call can greatly improve performance\n-          on TPUs or small models with a large Python overhead.\n-          At most, one full epoch will be run each\n-          execution. If a number larger than the size of the epoch is passed,\n-          the execution will be truncated to the size of the epoch.\n-          Note that if `steps_per_execution` is set to `N`,\n-          `Callback.on_batch_begin` and `Callback.on_batch_end` methods\n-          will only be called every `N` batches\n-          (i.e. before/after each `tf.function` execution).\n+        steps_per_execution: Int. Defaults to 1. The number of batches to run\n+          during each `tf.function` call. Running multiple batches inside a\n+          single `tf.function` call can greatly improve performance on TPUs or\n+          small models with a large Python overhead. At most, one full epoch\n+          will be run each execution. If a number larger than the size of the\n+          epoch is passed, the execution will be truncated to the size of the\n+          epoch. Note that if `steps_per_execution` is set to `N`,\n+          `Callback.on_batch_begin` and `Callback.on_batch_end` methods will\n+          only be called every `N` batches (i.e. before/after each `tf.function`\n+          execution).\n+        jit_compile: If `True`, compile the model training step with XLA.\n+          [XLA](https://www.tensorflow.org/xla) is an optimizing compiler for\n+          machine learning.\n+          `jit_compile` is not enabled for by default.\n+          This option cannot be enabled with `run_eagerly=True`.\n+          Note that `jit_compile=True` is\n+          may not necessarily work for all models.\n+          For more information on supported operations please refer to the\n+          [XLA documentation](https://www.tensorflow.org/xla).\n+          Also refer to\n+          [known XLA issues](https://www.tensorflow.org/xla/known_issues) for\n+          more details.\n         **kwargs: Arguments supported for backwards compatibility only.\n     \"\"\"\n     base_layer.keras_api_gauge.get_cell('compile').set(True)\n@@ -597,6 +609,12 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n       self._reset_compile_cache()\n       self._is_compiled = True\n       self.loss = loss or {}\n+      if (self._run_eagerly or self.dynamic) and jit_compile:\n+        raise ValueError(\n+            'You cannot enable `run_eagerly` and `jit_compile` '\n+            'at the same time.')\n+      else:\n+        self._jit_compile = jit_compile\n \n   def _get_optimizer(self, optimizer):\n     \"\"\"Wraps `optimizer` in `LossScaleOptimizer` if necessary.\"\"\"\n@@ -985,6 +1003,9 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n           model._train_counter.assign_add(1)  # pylint: disable=protected-access\n         return outputs\n \n+      if self._jit_compile:\n+        run_step = tf.function(\n+            run_step, jit_compile=True, experimental_relax_shapes=True)\n       data = next(iterator)\n       outputs = model.distribute_strategy.run(run_step, args=(data,))\n       outputs = reduce_per_replica(\n\n@@ -90,6 +90,34 @@ class TrainingTest(keras_parameterized.TestCase):\n                                 'Unexpected result of `train_function`.*'):\n       model.fit(x=np.array([]), y=np.array([]))\n \n+  @keras_parameterized.run_all_keras_modes(always_skip_v1=True)\n+  def test_compile_fit_with_jit_compile(self):\n+    # Test with jit_compile = True\n+    model = sequential.Sequential([layers_module.Dense(1)])\n+    model.compile(\n+        'sgd', loss='mse', run_eagerly=False, jit_compile=True)\n+    x, y = np.ones((10, 1)), np.ones((10, 1))\n+    model.fit(x, y, epochs=2)\n+    # Test fcompile fit for a RNN model\n+    model = sequential.Sequential()\n+    model.add(\n+        layers_module.TimeDistributed(\n+            layers_module.Embedding(5, 6, mask_zero=True),\n+            input_shape=(None, None)))  # N by t_1 by t_2 by 6\n+    model.add(\n+        layers_module.TimeDistributed(\n+            layers_module.SimpleRNN(7, return_sequences=True)))\n+    model.add(\n+        layers_module.TimeDistributed(\n+            layers_module.SimpleRNN(8, return_sequences=False)))\n+    model.add(layers_module.SimpleRNN(1, return_sequences=False))\n+    model.compile(optimizer='sgd', loss='mse', jit_compile=True)\n+    model_input = np.random.randint(\n+        low=1, high=5, size=(10, 3, 4), dtype='int32')\n+    for i in range(4):\n+      model_input[i, i:, i:] = 0\n+    model.fit(model_input, np.random.random((10, 1)), epochs=1, batch_size=10)\n+\n   @keras_parameterized.run_all_keras_modes(always_skip_v1=True)\n   def test_fit_without_loss_at_compile(self):\n     model = sequential.Sequential([layers_module.Dense(1)])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a913c66ab45cca3412469255a4418058b10e3bd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 41 | Churn Cumulative: 831 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,6 +17,7 @@\n \n import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util import deprecation  # pylint: disable=g-direct-tensorflow-import\n from tensorflow.python.util.tf_export import keras_export  # pylint: disable=g-direct-tensorflow-import\n \n _PRINT_EVAL_STEP_EVERY_SEC = 60.0\n@@ -44,7 +45,7 @@ def list_checkpoint_attributes(ckpt_dir_or_file):\n   return {name.split('/')[0] for name in variable_map.keys()}\n \n \n-@keras_export('keras.experimental.SidecarEvaluator', v1=[])\n+@keras_export('keras.utils.SidecarEvaluator', v1=[])\n class SidecarEvaluator:\n   \"\"\"A class designed for a dedicated evaluator task.\n \n@@ -78,7 +79,7 @@ class SidecarEvaluator:\n       name=\"eval_metrics\"))\n   data = tf.data.Dataset.from_tensor_slices(...)\n \n-  tf.keras.experimental.SidecarEvaluator(\n+  tf.keras.SidecarEvaluator(\n       model=model,\n       data=data,\n       checkpoint_dir='/tmp/checkpoint_dir',  # dir for training-saved checkpoint\n@@ -181,7 +182,7 @@ class SidecarEvaluator:\n         '`tf.train.Checkpoint/CheckpointManager` or '\n         '`tf.keras.callbacks.ModelCheckpoint(save_weights_only=True)` to save '\n         'checkpoints by the training. See '\n-        '`tf.keras.experimental.SidecarEvaluator` doc for recommended flows '\n+        '`tf.keras.SidecarEvaluator` doc for recommended flows '\n         'of saving checkpoints.')\n     return False\n \n@@ -258,3 +259,21 @@ class SidecarEvaluator:\n         # Exit the loop because we have evaluated the final checkpoint file.\n         logging.info('Last checkpoint evaluated. SidecarEvaluator stops.')\n         return\n+\n+\n+@keras_export('keras.experimental.SidecarEvaluator', v1=[])\n+@deprecation.deprecated_endpoints('keras.experimental.SidecarEvaluator')\n+class SidecarEvaluatorExperimental(SidecarEvaluator):\n+  \"\"\"Deprecated. Please use `tf.keras.utils.SidecarEvaluator` instead.\n+\n+  Caution: `tf.keras.experimental.SidecarEvaluator` endpoint is\n+    deprecated and will be removed in a future release. Please use\n+    `tf.keras.utils.SidecarEvaluator`.\n+  \"\"\"\n+\n+  def __init__(self, *args, **kwargs):\n+    logging.warning(\n+        '`tf.keras.experimental.SidecarEvaluator` endpoint is '\n+        'deprecated and will be removed in a future release. Please use '\n+        '`tf.keras.utils.SidecarEvaluator`.')\n+    super(SidecarEvaluatorExperimental, self).__init__(*args, **kwargs)\n\n@@ -21,13 +21,13 @@ import os\n import threading\n import time\n \n-from absl import logging\n from absl.testing import parameterized\n import keras\n from keras.distribute import sidecar_evaluator as sidecar_evaluator_lib\n from keras.optimizer_v2 import gradient_descent\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging  # pylint: disable=g-direct-tensorflow-import\n \n _BATCH_SIZE = 32\n \n@@ -286,6 +286,20 @@ class SidecarEvaluatorTest(tf.test.TestCase, parameterized.TestCase):\n     ]\n     self.assertGreaterEqual(len(metrics_logging), 1)\n \n+  def testExperimentalDeprecatedMessage(self):\n+\n+    warning_messages = []\n+\n+    def warning(msg):\n+      warning_messages.append(msg)\n+\n+    with tf.compat.v1.test.mock.patch.object(logging, 'warning', warning):\n+      sidecar_evaluator_lib.SidecarEvaluatorExperimental(None, None, None)\n+\n+    warning_msg = ('`tf.keras.experimental.SidecarEvaluator` '\n+                   'endpoint is deprecated')\n+    self.assertIn(warning_msg, '\\n'.join(warning_messages))\n+\n \n if __name__ == '__main__':\n   tf.compat.v1.enable_v2_behavior()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e17f378ee81d9dac6b9acb6e40dd1c8475a09d46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 198 | Lines Deleted: 178 | Files Changed: 1 | Hunks: 102 | Methods Changed: 33 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 376 | Churn Cumulative: 2083 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,30 +37,77 @@ from tensorflow.python.util.tf_export import keras_export\n BASE_WEIGHTS_PATH = \"https://storage.googleapis.com/keras-applications/\"\n \n WEIGHTS_HASHES = {\n-    \"x002\": (\"49fb46e56cde07fdaf57bffd851461a86548f6a3a4baef234dd37290b826c0b8\", \"5445b66cd50445eb7ecab094c1e78d4d3d29375439d1a7798861c4af15ffff21\"),\n-    \"x004\": (\"3523c7f5ac0dbbcc2fd6d83b3570e7540f7449d3301cc22c29547302114e4088\", \"de139bf07a66c9256f2277bf5c1b6dd2d5a3a891a5f8a925a10c8a0a113fd6f3\"),\n-    \"x006\": (\"340216ef334a7bae30daac9f414e693c136fac9ab868704bbfcc9ce6a5ec74bb\", \"a43ec97ad62f86b2a96a783bfdc63a5a54de02eef54f26379ea05e1bf90a9505\"),\n-    \"x008\": (\"8f145d6a5fae6da62677bb8d26eb92d0b9dfe143ec1ebf68b24a57ae50a2763d\", \"3c7e4b0917359304dc18e644475c5c1f5e88d795542b676439c4a3acd63b7207\"),\n-    \"x016\": (\"31c386f4c7bfef4c021a583099aa79c1b3928057ba1b7d182f174674c5ef3510\", \"1b8e3d545d190271204a7b2165936a227d26b79bb7922bac5ee4d303091bf17a\"),\n-    \"x032\": (\"6c025df1409e5ea846375bc9dfa240956cca87ef57384d93fef7d6fa90ca8c7f\", \"9cd4522806c0fcca01b37874188b2bd394d7c419956d77472a4e072b01d99041\"),\n-    \"x040\": (\"ba128046c588a26dbd3b3a011b26cb7fa3cf8f269c184c132372cb20b6eb54c1\", \"b4ed0ca0b9a98e789e05000e830403a7ade4d8afa01c73491c44610195198afe\"),\n-    \"x064\": (\"0f4489c3cd3ad979bd6b0324213998bcb36dc861d178f977997ebfe53c3ba564\", \"3e706fa416a18dfda14c713423eba8041ae2509db3e0a611d5f599b5268a46c4\"),\n-    \"x080\": (\"76320e43272719df648db37271a247c22eb6e810fe469c37a5db7e2cb696d162\", \"7b1ce8e29ceefec10a6569640ee329dba7fbc98b5d0f6346aabade058b66cf29\"),\n-    \"x120\": (\"5cafc461b78897d5e4f24e68cb406d18e75f31105ef620e7682b611bb355eb3a\", \"36174ddd0299db04a42631d028abcb1cc7afec2b705e42bd28fcd325e5d596bf\"),\n-    \"x160\": (\"8093f57a5824b181fb734ea21ae34b1f7ee42c5298e63cf6d587c290973195d2\", \"9d1485050bdf19531ffa1ed7827c75850e0f2972118a996b91aa9264b088fd43\"),\n-    \"x320\": (\"91fb3e6f4e9e44b3687e80977f7f4412ee9937c0c704232664fc83e4322ea01e\", \"9db7eacc37b85c98184070e1a172e6104c00846f44bcd4e727da9e50d9692398\"),\n-    \"y002\": (\"1e8091c674532b1a61c04f6393a9c570113e0197f22bd1b98cc4c4fe800c6465\", \"f63221f63d625b8e201221499682587bfe29d33f50a4c4f4d53be00f66c0f12c\"),\n-    \"y004\": (\"752fdbad21c78911bf1dcb8c513e5a0e14697b068e5d9e73525dbaa416d18d8e\", \"45e6ba8309a17a77e67afc05228454b2e0ee6be0dae65edc0f31f1da10cc066b\"),\n-    \"y006\": (\"98942e07b273da500ff9699a1f88aca78dfad4375faabb0bab784bb0dace80a9\", \"b70261cba4e60013c99d130cc098d2fce629ff978a445663b6fa4f8fc099a2be\"),\n-    \"y008\": (\"1b099377cc9a4fb183159a6f9b24bc998e5659d25a449f40c90cbffcbcfdcae4\", \"b11f5432a216ee640fe9be6e32939defa8d08b8d136349bf3690715a98752ca1\"),\n-    \"y016\": (\"b7ce1f5e223f0941c960602de922bcf846288ce7a4c33b2a4f2e4ac4b480045b\", \"d7404f50205e82d793e219afb9eb2bfeb781b6b2d316a6128c6d7d7dacab7f57\"),\n-    \"y032\": (\"6a6a545cf3549973554c9b94f0cd40e25f229fffb1e7f7ac779a59dcbee612bd\", \"eb3ac1c45ec60f4f031c3f5180573422b1cf7bebc26c004637517372f68f8937\"),\n-    \"y040\": (\"98d00118b335162bbffe8f1329e54e5c8e75ee09b2a5414f97b0ddfc56e796f6\", \"b5be2a5e5f072ecdd9c0b8a437cd896df0efa1f6a1f77e41caa8719b7dfcb05d\"),\n-    \"y064\": (\"65c948c7a18aaecaad2d1bd4fd978987425604ba6669ef55a1faa0069a2804b7\", \"885c4b7ed7ea339daca7dafa1a62cb7d41b1068897ef90a5a3d71b4a2e2db31a\"),\n-    \"y080\": (\"7a2c62da2982e369a4984d3c7c3b32d6f8d3748a71cb37a31156c436c37f3e95\", \"3d119577e1e3bf8d153b895e8ea9e4ec150ff2d92abdca711b6e949c3fd7115d\"),\n-    \"y120\": (\"a96ab0d27d3ae35a422ee7df0d789069b3e3217a99334e0ce861a96595bc5986\", \"4a6fa387108380b730b71feea2ad80b5224b5ea9dc21dc156c93fe3c6186485c\"),\n-    \"y160\": (\"45067240ffbc7ca2591313fee2f80dbdda6d66ec1a7451446f9a6d00d8f7ac6e\", \"ead1e6b568be8f34447ec8941299a9df4368736ba9a8205de5427fa20a1fb316\"),\n-    \"y320\": (\"b05e173e4ae635cfa22d06392ee3741284d17dadfee68f2aa6fd8cb2b7561112\", \"cad78f74a586e24c61d38be17f3ae53bb9674380174d2585da1a526b8c20e1fd\")\n+    \"x002\":\n+        (\"49fb46e56cde07fdaf57bffd851461a86548f6a3a4baef234dd37290b826c0b8\",\n+         \"5445b66cd50445eb7ecab094c1e78d4d3d29375439d1a7798861c4af15ffff21\"),\n+    \"x004\":\n+        (\"3523c7f5ac0dbbcc2fd6d83b3570e7540f7449d3301cc22c29547302114e4088\",\n+         \"de139bf07a66c9256f2277bf5c1b6dd2d5a3a891a5f8a925a10c8a0a113fd6f3\"),\n+    \"x006\":\n+        (\"340216ef334a7bae30daac9f414e693c136fac9ab868704bbfcc9ce6a5ec74bb\",\n+         \"a43ec97ad62f86b2a96a783bfdc63a5a54de02eef54f26379ea05e1bf90a9505\"),\n+    \"x008\":\n+        (\"8f145d6a5fae6da62677bb8d26eb92d0b9dfe143ec1ebf68b24a57ae50a2763d\",\n+         \"3c7e4b0917359304dc18e644475c5c1f5e88d795542b676439c4a3acd63b7207\"),\n+    \"x016\":\n+        (\"31c386f4c7bfef4c021a583099aa79c1b3928057ba1b7d182f174674c5ef3510\",\n+         \"1b8e3d545d190271204a7b2165936a227d26b79bb7922bac5ee4d303091bf17a\"),\n+    \"x032\":\n+        (\"6c025df1409e5ea846375bc9dfa240956cca87ef57384d93fef7d6fa90ca8c7f\",\n+         \"9cd4522806c0fcca01b37874188b2bd394d7c419956d77472a4e072b01d99041\"),\n+    \"x040\":\n+        (\"ba128046c588a26dbd3b3a011b26cb7fa3cf8f269c184c132372cb20b6eb54c1\",\n+         \"b4ed0ca0b9a98e789e05000e830403a7ade4d8afa01c73491c44610195198afe\"),\n+    \"x064\":\n+        (\"0f4489c3cd3ad979bd6b0324213998bcb36dc861d178f977997ebfe53c3ba564\",\n+         \"3e706fa416a18dfda14c713423eba8041ae2509db3e0a611d5f599b5268a46c4\"),\n+    \"x080\":\n+        (\"76320e43272719df648db37271a247c22eb6e810fe469c37a5db7e2cb696d162\",\n+         \"7b1ce8e29ceefec10a6569640ee329dba7fbc98b5d0f6346aabade058b66cf29\"),\n+    \"x120\":\n+        (\"5cafc461b78897d5e4f24e68cb406d18e75f31105ef620e7682b611bb355eb3a\",\n+         \"36174ddd0299db04a42631d028abcb1cc7afec2b705e42bd28fcd325e5d596bf\"),\n+    \"x160\":\n+        (\"8093f57a5824b181fb734ea21ae34b1f7ee42c5298e63cf6d587c290973195d2\",\n+         \"9d1485050bdf19531ffa1ed7827c75850e0f2972118a996b91aa9264b088fd43\"),\n+    \"x320\":\n+        (\"91fb3e6f4e9e44b3687e80977f7f4412ee9937c0c704232664fc83e4322ea01e\",\n+         \"9db7eacc37b85c98184070e1a172e6104c00846f44bcd4e727da9e50d9692398\"),\n+    \"y002\":\n+        (\"1e8091c674532b1a61c04f6393a9c570113e0197f22bd1b98cc4c4fe800c6465\",\n+         \"f63221f63d625b8e201221499682587bfe29d33f50a4c4f4d53be00f66c0f12c\"),\n+    \"y004\":\n+        (\"752fdbad21c78911bf1dcb8c513e5a0e14697b068e5d9e73525dbaa416d18d8e\",\n+         \"45e6ba8309a17a77e67afc05228454b2e0ee6be0dae65edc0f31f1da10cc066b\"),\n+    \"y006\":\n+        (\"98942e07b273da500ff9699a1f88aca78dfad4375faabb0bab784bb0dace80a9\",\n+         \"b70261cba4e60013c99d130cc098d2fce629ff978a445663b6fa4f8fc099a2be\"),\n+    \"y008\":\n+        (\"1b099377cc9a4fb183159a6f9b24bc998e5659d25a449f40c90cbffcbcfdcae4\",\n+         \"b11f5432a216ee640fe9be6e32939defa8d08b8d136349bf3690715a98752ca1\"),\n+    \"y016\":\n+        (\"b7ce1f5e223f0941c960602de922bcf846288ce7a4c33b2a4f2e4ac4b480045b\",\n+         \"d7404f50205e82d793e219afb9eb2bfeb781b6b2d316a6128c6d7d7dacab7f57\"),\n+    \"y032\":\n+        (\"6a6a545cf3549973554c9b94f0cd40e25f229fffb1e7f7ac779a59dcbee612bd\",\n+         \"eb3ac1c45ec60f4f031c3f5180573422b1cf7bebc26c004637517372f68f8937\"),\n+    \"y040\":\n+        (\"98d00118b335162bbffe8f1329e54e5c8e75ee09b2a5414f97b0ddfc56e796f6\",\n+         \"b5be2a5e5f072ecdd9c0b8a437cd896df0efa1f6a1f77e41caa8719b7dfcb05d\"),\n+    \"y064\":\n+        (\"65c948c7a18aaecaad2d1bd4fd978987425604ba6669ef55a1faa0069a2804b7\",\n+         \"885c4b7ed7ea339daca7dafa1a62cb7d41b1068897ef90a5a3d71b4a2e2db31a\"),\n+    \"y080\":\n+        (\"7a2c62da2982e369a4984d3c7c3b32d6f8d3748a71cb37a31156c436c37f3e95\",\n+         \"3d119577e1e3bf8d153b895e8ea9e4ec150ff2d92abdca711b6e949c3fd7115d\"),\n+    \"y120\":\n+        (\"a96ab0d27d3ae35a422ee7df0d789069b3e3217a99334e0ce861a96595bc5986\",\n+         \"4a6fa387108380b730b71feea2ad80b5224b5ea9dc21dc156c93fe3c6186485c\"),\n+    \"y160\":\n+        (\"45067240ffbc7ca2591313fee2f80dbdda6d66ec1a7451446f9a6d00d8f7ac6e\",\n+         \"ead1e6b568be8f34447ec8941299a9df4368736ba9a8205de5427fa20a1fb316\"),\n+    \"y320\": (\"b05e173e4ae635cfa22d06392ee3741284d17dadfee68f2aa6fd8cb2b7561112\",\n+             \"cad78f74a586e24c61d38be17f3ae53bb9674380174d2585da1a526b8c20e1fd\")\n }\n \n # The widths and depths are deduced from a quantized linear function. For\n@@ -74,146 +121,170 @@ MODEL_CONFIGS = {\n         \"depths\": [1, 1, 4, 7],\n         \"widths\": [24, 56, 152, 368],\n         \"group_width\": 8,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x004\": {\n         \"depths\": [1, 2, 7, 12],\n         \"widths\": [32, 64, 160, 384],\n         \"group_width\": 16,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x006\": {\n         \"depths\": [1, 3, 5, 7],\n         \"widths\": [48, 96, 240, 528],\n         \"group_width\": 24,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x008\": {\n         \"depths\": [1, 3, 7, 5],\n         \"widths\": [64, 128, 288, 672],\n         \"group_width\": 16,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x016\": {\n         \"depths\": [2, 4, 10, 2],\n         \"widths\": [72, 168, 408, 912],\n         \"group_width\": 24,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x032\": {\n         \"depths\": [2, 6, 15, 2],\n         \"widths\": [96, 192, 432, 1008],\n         \"group_width\": 48,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x040\": {\n         \"depths\": [2, 5, 14, 2],\n         \"widths\": [80, 240, 560, 1360],\n         \"group_width\": 40,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x064\": {\n         \"depths\": [2, 4, 10, 1],\n         \"widths\": [168, 392, 784, 1624],\n         \"group_width\": 56,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x080\": {\n         \"depths\": [2, 5, 15, 1],\n         \"widths\": [80, 240, 720, 1920],\n         \"group_width\": 120,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x120\": {\n         \"depths\": [2, 5, 11, 1],\n         \"widths\": [224, 448, 896, 2240],\n         \"group_width\": 112,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x160\": {\n         \"depths\": [2, 6, 13, 1],\n         \"widths\": [256, 512, 896, 2048],\n         \"group_width\": 128,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"x320\": {\n         \"depths\": [2, 7, 13, 1],\n         \"widths\": [336, 672, 1344, 2520],\n         \"group_width\": 168,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"X\"\n     },\n     \"y002\": {\n         \"depths\": [1, 1, 4, 7],\n         \"widths\": [24, 56, 152, 368],\n         \"group_width\": 8,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y004\": {\n         \"depths\": [1, 3, 6, 6],\n         \"widths\": [48, 104, 208, 440],\n         \"group_width\": 8,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y006\": {\n         \"depths\": [1, 3, 7, 4],\n         \"widths\": [48, 112, 256, 608],\n         \"group_width\": 16,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y008\": {\n         \"depths\": [1, 3, 8, 2],\n         \"widths\": [64, 128, 320, 768],\n         \"group_width\": 16,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y016\": {\n         \"depths\": [2, 6, 17, 2],\n         \"widths\": [48, 120, 336, 888],\n         \"group_width\": 24,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y032\": {\n         \"depths\": [2, 5, 13, 1],\n         \"widths\": [72, 216, 576, 1512],\n         \"group_width\": 24,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y040\": {\n         \"depths\": [2, 6, 12, 2],\n         \"widths\": [128, 192, 512, 1088],\n         \"group_width\": 64,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y064\": {\n         \"depths\": [2, 7, 14, 2],\n         \"widths\": [144, 288, 576, 1296],\n         \"group_width\": 72,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y080\": {\n         \"depths\": [2, 4, 10, 1],\n         \"widths\": [168, 448, 896, 2016],\n         \"group_width\": 56,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y120\": {\n         \"depths\": [2, 5, 11, 1],\n         \"widths\": [224, 448, 896, 2240],\n         \"group_width\": 112,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y160\": {\n         \"depths\": [2, 4, 11, 1],\n         \"widths\": [224, 448, 1232, 3024],\n         \"group_width\": 112,\n-        \"default_size\": 224\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n     },\n     \"y320\": {\n         \"depths\": [2, 5, 12, 1],\n         \"widths\": [232, 696, 1392, 3712],\n         \"group_width\": 232,\n-        \"default_size\": 224\n-    }\n+        \"default_size\": 224,\n+        \"block_type\": \"Y\"\n+    },\n }\n \n BASE_DOCSTRING = \"\"\"Instantiates the {name} architecture.\n@@ -348,8 +419,8 @@ def SqueezeAndExciteBlock(filters_in, se_filters, name=None):\n     name = str(backend.get_uid(\"squeeze_and_excite\"))\n \n   def apply(inputs):\n-    x = layers.GlobalAveragePooling2D(\n-        name=name + \"_squeeze_and_excite_gap\", keepdims=True)(inputs)\n+    x = layers.GlobalAveragePooling2D(name=name + \"_squeeze_and_excite_gap\",\n+                                      keepdims=True)(inputs)\n     x = layers.Conv2D(se_filters, (1, 1),\n                       activation=\"relu\",\n                       kernel_initializer=\"he_normal\",\n@@ -387,8 +458,7 @@ def XBlock(filters_in, filters_out, group_width, stride=1, name=None):\n       raise ValueError(\n           f\"Input filters({filters_in}) and output filters({filters_out}) \"\n           f\"are not equal for stride {stride}. Input and output filters must \"\n-          f\"be equal for stride={stride}.\"\n-      )\n+          f\"be equal for stride={stride}.\")\n \n     # Declare layers\n     groups = filters_out // group_width\n@@ -474,8 +544,7 @@ def YBlock(filters_in,\n       raise ValueError(\n           f\"Input filters({filters_in}) and output filters({filters_out}) \"\n           f\"are not equal for stride {stride}. Input and output filters must  \"\n-          f\"be equal for stride={stride}.\"\n-      )\n+          f\"be equal for stride={stride}.\")\n \n     groups = filters_out // group_width\n     se_filters = int(filters_in * squeeze_excite_ratio)\n@@ -566,8 +635,7 @@ def ZBlock(filters_in,\n       raise ValueError(\n           f\"Input filters({filters_in}) and output filters({filters_out})\"\n           f\"are not equal for stride {stride}. Input and output filters must be\"\n-          f\" equal for stride={stride}.\"\n-      )\n+          f\" equal for stride={stride}.\")\n \n     groups = filters_out // group_width\n     se_filters = int(filters_in * squeeze_excite_ratio)\n@@ -724,7 +792,7 @@ def RegNet(depths,\n       stages\n     group_width: Number of channels to be used in each group. See grouped \n       convolutions for more information.\n-    block_type: Must be one of {\"x\", \"y\", \"z\"}. For more details see the\n+    block_type: Must be one of `{\"X\", \"Y\", \"Z\"}`. For more details see the\n       papers \"Designing network design spaces\" and \"Fast and Accurate Model \n       Scaling\"\n     default_size: Default input image size. \n@@ -869,11 +937,10 @@ def RegNetX002(model_name=\"regnetx002\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x002\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x002\"][\"depths\"],\n                 MODEL_CONFIGS[\"x002\"][\"widths\"],\n                 MODEL_CONFIGS[\"x002\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x002\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x002\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -883,8 +950,7 @@ def RegNetX002(model_name=\"regnetx002\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX004\",\n@@ -898,11 +964,10 @@ def RegNetX004(model_name=\"regnetx004\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x004\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x004\"][\"depths\"],\n                 MODEL_CONFIGS[\"x004\"][\"widths\"],\n                 MODEL_CONFIGS[\"x004\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x004\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x004\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -912,8 +977,7 @@ def RegNetX004(model_name=\"regnetx004\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX006\",\n@@ -927,11 +991,10 @@ def RegNetX006(model_name=\"regnetx006\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x006\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x006\"][\"depths\"],\n                 MODEL_CONFIGS[\"x006\"][\"widths\"],\n                 MODEL_CONFIGS[\"x006\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x006\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x006\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -941,8 +1004,7 @@ def RegNetX006(model_name=\"regnetx006\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX008\",\n@@ -956,11 +1018,10 @@ def RegNetX008(model_name=\"regnetx008\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x008\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x008\"][\"depths\"],\n                 MODEL_CONFIGS[\"x008\"][\"widths\"],\n                 MODEL_CONFIGS[\"x008\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x008\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x008\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -970,8 +1031,7 @@ def RegNetX008(model_name=\"regnetx008\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX016\",\n@@ -985,11 +1045,10 @@ def RegNetX016(model_name=\"regnetx016\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x016\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x016\"][\"depths\"],\n                 MODEL_CONFIGS[\"x016\"][\"widths\"],\n                 MODEL_CONFIGS[\"x016\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x016\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x016\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -999,8 +1058,7 @@ def RegNetX016(model_name=\"regnetx016\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX032\",\n@@ -1014,11 +1072,10 @@ def RegNetX032(model_name=\"regnetx032\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x032\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x032\"][\"depths\"],\n                 MODEL_CONFIGS[\"x032\"][\"widths\"],\n                 MODEL_CONFIGS[\"x032\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x032\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x032\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1028,8 +1085,7 @@ def RegNetX032(model_name=\"regnetx032\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX040\",\n@@ -1043,11 +1099,10 @@ def RegNetX040(model_name=\"regnetx040\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x040\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x040\"][\"depths\"],\n                 MODEL_CONFIGS[\"x040\"][\"widths\"],\n                 MODEL_CONFIGS[\"x040\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x040\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x040\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1057,8 +1112,7 @@ def RegNetX040(model_name=\"regnetx040\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX064\",\n@@ -1072,11 +1126,10 @@ def RegNetX064(model_name=\"regnetx064\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x064\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x064\"][\"depths\"],\n                 MODEL_CONFIGS[\"x064\"][\"widths\"],\n                 MODEL_CONFIGS[\"x064\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x064\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x064\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1086,8 +1139,7 @@ def RegNetX064(model_name=\"regnetx064\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX080\",\n@@ -1101,11 +1153,10 @@ def RegNetX080(model_name=\"regnetx080\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x080\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x080\"][\"depths\"],\n                 MODEL_CONFIGS[\"x080\"][\"widths\"],\n                 MODEL_CONFIGS[\"x080\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x080\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x080\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1115,8 +1166,7 @@ def RegNetX080(model_name=\"regnetx080\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX120\",\n@@ -1130,11 +1180,10 @@ def RegNetX120(model_name=\"regnetx120\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x120\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x120\"][\"depths\"],\n                 MODEL_CONFIGS[\"x120\"][\"widths\"],\n                 MODEL_CONFIGS[\"x120\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x120\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x120\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1144,8 +1193,7 @@ def RegNetX120(model_name=\"regnetx120\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX160\",\n@@ -1159,11 +1207,10 @@ def RegNetX160(model_name=\"regnetx160\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x160\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x160\"][\"depths\"],\n                 MODEL_CONFIGS[\"x160\"][\"widths\"],\n                 MODEL_CONFIGS[\"x160\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x160\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x160\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1173,8 +1220,7 @@ def RegNetX160(model_name=\"regnetx160\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetX320\",\n@@ -1188,11 +1234,10 @@ def RegNetX320(model_name=\"regnetx320\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"x320\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"x320\"][\"depths\"],\n                 MODEL_CONFIGS[\"x320\"][\"widths\"],\n                 MODEL_CONFIGS[\"x320\"][\"group_width\"],\n-      \"X\",\n+                MODEL_CONFIGS[\"x320\"][\"block_type\"],\n                 MODEL_CONFIGS[\"x320\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1202,8 +1247,7 @@ def RegNetX320(model_name=\"regnetx320\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY002\",\n@@ -1217,11 +1261,10 @@ def RegNetY002(model_name=\"regnety002\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y002\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y002\"][\"depths\"],\n                 MODEL_CONFIGS[\"y002\"][\"widths\"],\n                 MODEL_CONFIGS[\"y002\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y002\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y002\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1231,8 +1274,7 @@ def RegNetY002(model_name=\"regnety002\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY004\",\n@@ -1246,11 +1288,10 @@ def RegNetY004(model_name=\"regnety004\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y004\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y004\"][\"depths\"],\n                 MODEL_CONFIGS[\"y004\"][\"widths\"],\n                 MODEL_CONFIGS[\"y004\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y004\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y004\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1260,8 +1301,7 @@ def RegNetY004(model_name=\"regnety004\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY006\",\n@@ -1275,11 +1315,10 @@ def RegNetY006(model_name=\"regnety006\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y006\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y006\"][\"depths\"],\n                 MODEL_CONFIGS[\"y006\"][\"widths\"],\n                 MODEL_CONFIGS[\"y006\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y006\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y006\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1289,8 +1328,7 @@ def RegNetY006(model_name=\"regnety006\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY008\",\n@@ -1304,11 +1342,10 @@ def RegNetY008(model_name=\"regnety008\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y008\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y008\"][\"depths\"],\n                 MODEL_CONFIGS[\"y008\"][\"widths\"],\n                 MODEL_CONFIGS[\"y008\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y008\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y008\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1318,8 +1355,7 @@ def RegNetY008(model_name=\"regnety008\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY016\",\n@@ -1333,11 +1369,10 @@ def RegNetY016(model_name=\"regnety016\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y016\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y016\"][\"depths\"],\n                 MODEL_CONFIGS[\"y016\"][\"widths\"],\n                 MODEL_CONFIGS[\"y016\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y016\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y016\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1347,8 +1382,7 @@ def RegNetY016(model_name=\"regnety016\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY032\",\n@@ -1362,11 +1396,10 @@ def RegNetY032(model_name=\"regnety032\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y032\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y032\"][\"depths\"],\n                 MODEL_CONFIGS[\"y032\"][\"widths\"],\n                 MODEL_CONFIGS[\"y032\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y032\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y032\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1376,8 +1409,7 @@ def RegNetY032(model_name=\"regnety032\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY040\",\n@@ -1391,11 +1423,10 @@ def RegNetY040(model_name=\"regnety040\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y040\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y040\"][\"depths\"],\n                 MODEL_CONFIGS[\"y040\"][\"widths\"],\n                 MODEL_CONFIGS[\"y040\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y040\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y040\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1405,8 +1436,7 @@ def RegNetY040(model_name=\"regnety040\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY064\",\n@@ -1420,11 +1450,10 @@ def RegNetY064(model_name=\"regnety064\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y064\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y064\"][\"depths\"],\n                 MODEL_CONFIGS[\"y064\"][\"widths\"],\n                 MODEL_CONFIGS[\"y064\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y064\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y064\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1434,8 +1463,7 @@ def RegNetY064(model_name=\"regnety064\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY080\",\n@@ -1449,11 +1477,10 @@ def RegNetY080(model_name=\"regnety080\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y080\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y080\"][\"depths\"],\n                 MODEL_CONFIGS[\"y080\"][\"widths\"],\n                 MODEL_CONFIGS[\"y080\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y080\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y080\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1463,8 +1490,7 @@ def RegNetY080(model_name=\"regnety080\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY120\",\n@@ -1478,11 +1504,10 @@ def RegNetY120(model_name=\"regnety120\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y120\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y120\"][\"depths\"],\n                 MODEL_CONFIGS[\"y120\"][\"widths\"],\n                 MODEL_CONFIGS[\"y120\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y120\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y120\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1492,8 +1517,7 @@ def RegNetY120(model_name=\"regnety120\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY160\",\n@@ -1507,11 +1531,10 @@ def RegNetY160(model_name=\"regnety160\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y160\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y160\"][\"depths\"],\n                 MODEL_CONFIGS[\"y160\"][\"widths\"],\n                 MODEL_CONFIGS[\"y160\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y160\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y160\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1521,8 +1544,7 @@ def RegNetY160(model_name=\"regnety160\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n @keras_export(\"keras.applications.regnet.RegNetY320\",\n@@ -1536,11 +1558,10 @@ def RegNetY320(model_name=\"regnety320\",\n                pooling=None,\n                classes=1000,\n                classifier_activation='softmax'):\n-  return RegNet(\n-      MODEL_CONFIGS[\"y320\"][\"depths\"],\n+  return RegNet(MODEL_CONFIGS[\"y320\"][\"depths\"],\n                 MODEL_CONFIGS[\"y320\"][\"widths\"],\n                 MODEL_CONFIGS[\"y320\"][\"group_width\"],\n-      \"Y\",\n+                MODEL_CONFIGS[\"y320\"][\"block_type\"],\n                 MODEL_CONFIGS[\"y320\"][\"default_size\"],\n                 model_name=model_name,\n                 include_top=include_top,\n@@ -1550,8 +1571,7 @@ def RegNetY320(model_name=\"regnety320\",\n                 input_shape=input_shape,\n                 pooling=pooling,\n                 classes=classes,\n-      classifier_activation=classifier_activation\n-  )\n+                classifier_activation=classifier_activation)\n \n \n RegNetX002.__doc__ = BASE_DOCSTRING.format(name=\"RegNetX002\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
