{"custom_id": "flask#fa7e8d6073052adc5ba69702db4dec6571ef0bfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 1854 | Contributors (this commit): 24 | Commits (past 90d): 16 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,7 +22,7 @@ from threading import Lock, Thread\n import click\n \n from . import __version__\n-from ._compat import iteritems, reraise\n+from ._compat import iteritems, reraise, PY2\n from .globals import current_app\n from .helpers import get_debug_flag\n from ._compat import getargspec\n@@ -647,19 +647,19 @@ Example usage:\n \n \n def main(as_module=False):\n-    this_module = __package__ + '.cli'\n     args = sys.argv[1:]\n \n     if as_module:\n-        if sys.version_info >= (2, 7):\n-            name = 'python -m ' + this_module.rsplit('.', 1)[0]\n-        else:\n+        this_module = 'flask'\n+\n+        if sys.version_info < (2, 7):\n+            this_module += '.cli'\n+\n         name = 'python -m ' + this_module\n \n-        # This module is always executed as \"python -m flask.run\" and as such\n-        # we need to ensure that we restore the actual command line so that\n-        # the reloader can properly operate.\n-        sys.argv = ['-m', this_module] + sys.argv[1:]\n+        # Python rewrites \"python -m flask\" to the path to the file in argv.\n+        # Restore the original command so that the reloader works.\n+        sys.argv = ['-m', this_module] + args\n     else:\n         name = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#12c45f06a5e0c2303977ce91abc3614b4b00556f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1856 | Contributors (this commit): 24 | Commits (past 90d): 17 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ from threading import Lock, Thread\n import click\n \n from . import __version__\n-from ._compat import iteritems, reraise, PY2\n+from ._compat import iteritems, reraise\n from .globals import current_app\n from .helpers import get_debug_flag\n from ._compat import getargspec\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#16396248b829c61806ba65840aa70e0a3d8b3c8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 385 | Contributors (this commit): 22 | Commits (past 90d): 7 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -64,7 +64,7 @@ setup(\n     description='A microframework based on Werkzeug, Jinja2 '\n                 'and good intentions',\n     long_description=__doc__,\n-    packages=['flask', 'flask.ext'],\n+    packages=['flask', 'flask.ext', 'flask.json'],\n     include_package_data=True,\n     zip_safe=False,\n     platforms='any',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5c12acefbb90d4328f896633b636c8e05d87a0dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 33 | Churn Cumulative: 2405 | Contributors (this commit): 23 | Commits (past 90d): 18 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -980,6 +980,39 @@ def test_http_error_subclass_handling(app, client):\n     assert client.get('/3').data == b'apple'\n \n \n+def test_errorhandler_precedence(app, client):\n+    class E1(Exception):\n+        pass\n+\n+    class E2(Exception):\n+        pass\n+\n+    class E3(E1, E2):\n+        pass\n+\n+    @app.errorhandler(E2)\n+    def handle_e2(e):\n+        return 'E2'\n+\n+    @app.errorhandler(Exception)\n+    def handle_exception(e):\n+        return 'Exception'\n+\n+    @app.route('/E1')\n+    def raise_e1():\n+        raise E1\n+\n+    @app.route('/E3')\n+    def raise_e3():\n+        raise E3\n+\n+    rv = client.get('/E1')\n+    assert rv.data == b'Exception'\n+\n+    rv = client.get('/E3')\n+    assert rv.data == b'E2'\n+\n+\n def test_trapping_of_bad_request_key_errors(app, client):\n     @app.route('/fail')\n     def fail():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b5f4c5215022a01823675038bc246dd1d771a543", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 26 | Churn Cumulative: 4826 | Contributors (this commit): 84 | Commits (past 90d): 22 | Contributors (cumulative): 84 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1484,30 +1484,26 @@ class Flask(_PackageBoundObject):\n         return f\n \n     def _find_error_handler(self, e):\n-        \"\"\"Find a registered error handler for a request in this order:\n+        \"\"\"Return a registered error handler for an exception in this order:\n         blueprint handler for a specific code, app handler for a specific code,\n-        blueprint generic HTTPException handler, app generic HTTPException handler,\n-        and returns None if a suitable handler is not found.\n+        blueprint handler for an exception class, app handler for an exception\n+        class, or ``None`` if a suitable handler is not found.\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n-        def find_handler(handler_map):\n+        for name, c in (\n+            (request.blueprint, code), (None, code),\n+            (request.blueprint, None), (None, None)\n+        ):\n+            handler_map = self.error_handler_spec.setdefault(name, {}).get(c)\n+\n             if not handler_map:\n-                return\n+                continue\n \n             for cls in exc_class.__mro__:\n                 handler = handler_map.get(cls)\n+\n                 if handler is not None:\n-                    # cache for next time exc_class is raised\n-                    handler_map[exc_class] = handler\n-                    return handler\n-\n-        # check for any in blueprint or app\n-        for name, c in ((request.blueprint, code), (None, code),\n-                        (request.blueprint, None), (None, None)):\n-            handler = find_handler(self.error_handler_spec.get(name, {}).get(c))\n-\n-            if handler:\n                     return handler\n \n     def handle_http_exception(self, e):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cf425403c8ff24623812a46272dc91f712ed5086", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4843 | Contributors (this commit): 85 | Commits (past 90d): 23 | Contributors (cumulative): 85 | DMM Complexity: None\n\nDIFF:\n@@ -136,7 +136,7 @@ class Flask(_PackageBoundObject):\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n     :param host_matching: sets the app's ``url_map.host_matching`` to the given\n-                          given value. Defaults to False.\n+                          value. Defaults to False.\n     :param static_host: the host to use when adding the static route. Defaults\n                         to None. Required when using ``host_matching=True``\n                         with a ``static_folder`` configured.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0f7b3a4f26dfbbe453a504abd4a8bcbf49194d46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 56 | Churn Cumulative: 5528 | Contributors (this commit): 92 | Commits (past 90d): 27 | Contributors (cumulative): 101 | DMM Complexity: 1.0\n\nDIFF:\n@@ -994,22 +994,41 @@ class Flask(_PackageBoundObject):\n         return self.session_interface.make_null_session(self)\n \n     @setupmethod\n-    def register_blueprint(self, blueprint, **options):\n-        \"\"\"Registers a blueprint on the application.\n+    def register_blueprint(\n+        self, blueprint, **options\n+    ):\n+        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n+        arguments passed to this method will override the defaults set on the\n+        blueprint.\n+\n+        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n+        recording the blueprint in the application's :attr:`blueprints`.\n+\n+        :param url_prefix: Blueprint routes will be prefixed with this.\n+        :param subdomain: Blueprint routes will match on this subdomain.\n+        :param url_defaults: Blueprint routes will use these default values for\n+            view arguments.\n+        :param options: Additional keyword arguments are passed to\n+            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n+            accessed in :meth:`~flask.Blueprint.record` callbacks.\n \n         .. versionadded:: 0.7\n         \"\"\"\n         first_registration = False\n+\n         if blueprint.name in self.blueprints:\n-            assert self.blueprints[blueprint.name] is blueprint, \\\n-                'A blueprint\\'s name collision occurred between %r and ' \\\n-                '%r.  Both share the same name \"%s\".  Blueprints that ' \\\n-                'are created on the fly need unique names.' % \\\n-                (blueprint, self.blueprints[blueprint.name], blueprint.name)\n+            assert self.blueprints[blueprint.name] is blueprint, (\n+                'A name collision occurred between blueprints %r and %r. Both'\n+                ' share the same name \"%s\". Blueprints that are created on the'\n+                ' fly need unique names.' % (\n+                    blueprint, self.blueprints[blueprint.name], blueprint.name\n+                )\n+            )\n         else:\n             self.blueprints[blueprint.name] = blueprint\n             self._blueprint_order.append(blueprint)\n             first_registration = True\n+\n         blueprint.register(self, options, first_registration)\n \n     def iter_blueprints(self):\n\n@@ -159,18 +159,25 @@ class Blueprint(_PackageBoundObject):\n         return BlueprintSetupState(self, app, options, first_registration)\n \n     def register(self, app, options, first_registration=False):\n-        \"\"\"Called by :meth:`Flask.register_blueprint` to register a blueprint\n-        on the application.  This can be overridden to customize the register\n-        behavior.  Keyword arguments from\n-        :func:`~flask.Flask.register_blueprint` are directly forwarded to this\n-        method in the `options` dictionary.\n+        \"\"\"Called by :meth:`Flask.register_blueprint` to register all views\n+        and callbacks registered on the blueprint with the application. Creates\n+        a :class:`.BlueprintSetupState` and calls each :meth:`record` callback\n+        with it.\n+\n+        :param app: The application this blueprint is being registered with.\n+        :param options: Keyword arguments forwarded from\n+            :meth:`~Flask.register_blueprint`.\n+        :param first_registration: Whether this is the first time this\n+            blueprint has been registered on the application.\n         \"\"\"\n         self._got_registered_once = True\n         state = self.make_setup_state(app, options, first_registration)\n+\n         if self.has_static_folder:\n-            state.add_url_rule(self.static_url_path + '/<path:filename>',\n-                               view_func=self.send_static_file,\n-                               endpoint='static')\n+            state.add_url_rule(\n+                self.static_url_path + '/<path:filename>',\n+                view_func=self.send_static_file, endpoint='static'\n+            )\n \n         for deferred in self.deferred_functions:\n             deferred(state)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fe1bf3c8213c56e045ead8afa84773f181b3dab6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 4881 | Contributors (this commit): 85 | Commits (past 90d): 25 | Contributors (cumulative): 85 | DMM Complexity: 0.0\n\nDIFF:\n@@ -994,9 +994,7 @@ class Flask(_PackageBoundObject):\n         return self.session_interface.make_null_session(self)\n \n     @setupmethod\n-    def register_blueprint(\n-        self, blueprint, **options\n-    ):\n+    def register_blueprint(self, blueprint, **options):\n         \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n         arguments passed to this method will override the defaults set on the\n         blueprint.\n@@ -1004,6 +1002,7 @@ class Flask(_PackageBoundObject):\n         Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n         recording the blueprint in the application's :attr:`blueprints`.\n \n+        :param blueprint: The blueprint to register.\n         :param url_prefix: Blueprint routes will be prefixed with this.\n         :param subdomain: Blueprint routes will match on this subdomain.\n         :param url_defaults: Blueprint routes will use these default values for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4fc48200a58907ffdf136961b84ef7d19192e6ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 16 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 67 | Churn Cumulative: 6804 | Contributors (this commit): 102 | Commits (past 90d): 42 | Contributors (cumulative): 109 | DMM Complexity: 1.0\n\nDIFF:\n@@ -703,6 +703,28 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         return open(os.path.join(self.instance_path, resource), mode)\n \n+    def _get_templates_auto_reload(self):\n+        \"\"\"Reload templates when they are changed. Used by\n+        :meth:`create_jinja_environment`.\n+\n+        This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If\n+        not set, it will be enabled in debug mode.\n+\n+        .. versionadded:: 1.0\n+            This property was added but the underlying config and behavior\n+            already existed.\n+        \"\"\"\n+        rv = self.config['TEMPLATES_AUTO_RELOAD']\n+        return rv if rv is not None else self.debug\n+\n+    def _set_templates_auto_reload(self, value):\n+        self.config['TEMPLATES_AUTO_RELOAD'] = value\n+\n+    templates_auto_reload = property(\n+        _get_templates_auto_reload, _set_templates_auto_reload\n+    )\n+    del _get_templates_auto_reload, _set_templates_auto_reload\n+\n     def create_jinja_environment(self):\n         \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n         and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\n@@ -715,13 +737,13 @@ class Flask(_PackageBoundObject):\n            ``TEMPLATES_AUTO_RELOAD`` configuration option.\n         \"\"\"\n         options = dict(self.jinja_options)\n+\n         if 'autoescape' not in options:\n             options['autoescape'] = self.select_jinja_autoescape\n+\n         if 'auto_reload' not in options:\n-            if self.config['TEMPLATES_AUTO_RELOAD'] is not None:\n-                options['auto_reload'] = self.config['TEMPLATES_AUTO_RELOAD']\n-            else:\n-                options['auto_reload'] = self.debug\n+            options['auto_reload'] = self.templates_auto_reload\n+\n         rv = self.jinja_environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n@@ -806,6 +828,22 @@ class Flask(_PackageBoundObject):\n             rv.update(processor())\n         return rv\n \n+    def _reconfigure_for_run_debug(self, debug):\n+        \"\"\"The ``run`` commands will set the application's debug flag. Some\n+        application configuration may already be calculated based on the\n+        previous debug value. This method will recalculate affected values.\n+\n+        Called by the :func:`flask.cli.run` command or :meth:`Flask.run`\n+        method if the debug flag is set explicitly in the call.\n+\n+        :param debug: the new value of the debug flag\n+\n+        .. versionadded:: 1.0\n+            Reconfigures ``app.jinja_env.auto_reload``.\n+        \"\"\"\n+        self.debug = debug\n+        self.jinja_env.auto_reload = self.templates_auto_reload\n+\n     def run(self, host=None, port=None, debug=None, **options):\n         \"\"\"Runs the application on a local development server.\n \n@@ -859,21 +897,24 @@ class Flask(_PackageBoundObject):\n             explain_ignored_app_run()\n             return\n \n-        from werkzeug.serving import run_simple\n+        if debug is not None:\n+            self._reconfigure_for_run_debug(bool(debug))\n+\n         _host = '127.0.0.1'\n         _port = 5000\n         server_name = self.config.get(\"SERVER_NAME\")\n         sn_host, sn_port = None, None\n+\n         if server_name:\n             sn_host, _, sn_port = server_name.partition(':')\n+\n         host = host or sn_host or _host\n         port = int(port or sn_port or _port)\n-        if debug is not None:\n-            self.debug = bool(debug)\n         options.setdefault('use_reloader', self.debug)\n         options.setdefault('use_debugger', self.debug)\n-        if debug:\n-            self.jinja_env.auto_reload = True\n+\n+        from werkzeug.serving import run_simple\n+\n         try:\n             run_simple(host, port, self, **options)\n         finally:\n\n@@ -319,8 +319,10 @@ class ScriptInfo(object):\n         be returned.\n         \"\"\"\n         __traceback_hide__ = True\n+\n         if self._loaded_app is not None:\n             return self._loaded_app\n+\n         if self.create_app is not None:\n             rv = call_factory(self.create_app, self)\n         else:\n@@ -330,10 +332,14 @@ class ScriptInfo(object):\n                     'the FLASK_APP environment variable.\\n\\nFor more '\n                     'information see '\n                     'http://flask.pocoo.org/docs/latest/quickstart/')\n+\n             rv = locate_app(self, self.app_import_path)\n+\n         debug = get_debug_flag()\n+\n         if debug is not None:\n-            rv.debug = debug\n+            rv._reconfigure_for_run_debug(debug)\n+\n         self._loaded_app = rv\n         return rv\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d75d83defdbcc2e498f816b5cd20dcc24a1b7138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 1545 | Contributors (this commit): 24 | Commits (past 90d): 18 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,6 +23,7 @@ from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, make_response\n+from pytz import timezone\n \n \n def has_encoding(name):\n@@ -177,6 +178,15 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n+    @pytest.mark.parametrize('tzname', ('UTC', 'PST8PDT', 'Asia/Seoul'))\n+    def test_jsonify_aware_datetimes(self, tzname):\n+        \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n+        dt_naive = datetime.datetime(2017, 1, 1, 12, 34, 56)\n+        dt_aware = timezone(tzname).localize(dt_naive)\n+        dt_as_gmt = dt_aware.astimezone(timezone('GMT'))\n+        expected = dt_as_gmt.strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n+        assert flask.json.JSONEncoder().encode(dt_aware) == expected\n+\n     def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4d2a3ab2e07e36b56d09e16f0836dbd0bdd7b34c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 517 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -386,19 +386,19 @@ def test_templates_auto_reload(app):\n     app.config['TEMPLATES_AUTO_RELOAD'] = True\n     assert app.jinja_env.auto_reload is True\n \n-def test_templates_auto_reload_debug_run(monkeypatch):\n-    # debug is None in config, config option is None, app.run(debug=True)\n-    # Mocks werkzeug.serving.run_simple method\n+def test_templates_auto_reload_debug_run(app, monkeypatch):\n     def run_simple_mock(*args, **kwargs):\n         pass\n \n-    app = flask.Flask(__name__)\n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n \n-    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n-    assert app.jinja_env.auto_reload is False\n+    app.run()\n+    assert app.templates_auto_reload == False\n+    assert app.jinja_env.auto_reload == False\n+\n     app.run(debug=True)\n-    assert app.jinja_env.auto_reload is True\n+    assert app.templates_auto_reload == True\n+    assert app.jinja_env.auto_reload == True\n \n \n def test_template_loader_debugging(test_apps):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d41e2e6a5db3211ecd3c3f3f55934474406ffac2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 17 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n import io\n import uuid\n-from datetime import date\n+from datetime import date, datetime\n from flask.globals import current_app, request\n from flask._compat import text_type, PY2\n \n@@ -62,6 +62,8 @@ class JSONEncoder(_json.JSONEncoder):\n                     return list(iterable)\n                 return JSONEncoder.default(self, o)\n         \"\"\"\n+        if isinstance(o, datetime):\n+            return http_date(o.utctimetuple())\n         if isinstance(o, date):\n             return http_date(o.timetuple())\n         if isinstance(o, uuid.UUID):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0e6cab357690614791ab4ca0da0ac65dbb803041", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 1560 | Contributors (this commit): 24 | Commits (past 90d): 19 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,6 @@ from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, make_response\n-from pytz import timezone\n \n \n def has_encoding(name):\n@@ -178,14 +177,14 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n-    @pytest.mark.parametrize('tzname', ('UTC', 'PST8PDT', 'Asia/Seoul'))\n-    def test_jsonify_aware_datetimes(self, tzname):\n+    @pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\n+    def test_jsonify_aware_datetimes(self, tz):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n-        dt_naive = datetime.datetime(2017, 1, 1, 12, 34, 56)\n-        dt_aware = timezone(tzname).localize(dt_naive)\n-        dt_as_gmt = dt_aware.astimezone(timezone('GMT'))\n-        expected = dt_as_gmt.strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n-        assert flask.json.JSONEncoder().encode(dt_aware) == expected\n+        tzinfo = datetime.timezone(datetime.timedelta(hours=tz[1]), name=tz[0])\n+        dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n+        gmt = datetime.timezone(datetime.timedelta(), name='GMT')\n+        expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n+        assert flask.json.JSONEncoder().encode(dt) == expected\n \n     def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb9618347c680a038e2e6310228d85a53b080f93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 1575 | Contributors (this commit): 24 | Commits (past 90d): 20 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,7 @@ from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, make_response\n+from pytz import timezone\n \n \n def has_encoding(name):\n@@ -177,14 +178,14 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n-    @pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\n-    def test_jsonify_aware_datetimes(self, tz):\n+    @pytest.mark.parametrize('tzname', ('UTC', 'PST8PDT', 'Asia/Seoul'))\n+    def test_jsonify_aware_datetimes(self, tzname):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n-        tzinfo = datetime.timezone(datetime.timedelta(hours=tz[1]), name=tz[0])\n-        dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n-        gmt = datetime.timezone(datetime.timedelta(), name='GMT')\n-        expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n-        assert flask.json.JSONEncoder().encode(dt) == expected\n+        dt_naive = datetime.datetime(2017, 1, 1, 12, 34, 56)\n+        dt_aware = timezone(tzname).localize(dt_naive)\n+        dt_as_gmt = dt_aware.astimezone(timezone('GMT'))\n+        expected = dt_as_gmt.strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n+        assert flask.json.JSONEncoder().encode(dt_aware) == expected\n \n     def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#34050630d67918dc8614b8ead8c683e66e4ececc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1581 | Contributors (this commit): 24 | Commits (past 90d): 21 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,12 @@ from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, make_response\n+try:\n     from pytz import timezone\n+except ImportError:\n+    has_pytz = False\n+else:\n+    has_pytz = True\n \n \n def has_encoding(name):\n@@ -178,6 +183,7 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n+    @pytest.mark.skipif('not has_pytz')\n     @pytest.mark.parametrize('tzname', ('UTC', 'PST8PDT', 'Asia/Seoul'))\n     def test_jsonify_aware_datetimes(self, tzname):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f80376027571ba5190ab6cf1411dd1dd9bb9c65e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 1602 | Contributors (this commit): 24 | Commits (past 90d): 22 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -23,12 +23,6 @@ from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, make_response\n-try:\n-    from pytz import timezone\n-except ImportError:\n-    has_pytz = False\n-else:\n-    has_pytz = True\n \n \n def has_encoding(name):\n@@ -183,15 +177,14 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n-    @pytest.mark.skipif('not has_pytz')\n-    @pytest.mark.parametrize('tzname', ('UTC', 'PST8PDT', 'Asia/Seoul'))\n-    def test_jsonify_aware_datetimes(self, tzname):\n+    @pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\n+    def test_jsonify_aware_datetimes(self, tz):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n-        dt_naive = datetime.datetime(2017, 1, 1, 12, 34, 56)\n-        dt_aware = timezone(tzname).localize(dt_naive)\n-        dt_as_gmt = dt_aware.astimezone(timezone('GMT'))\n-        expected = dt_as_gmt.strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n-        assert flask.json.JSONEncoder().encode(dt_aware) == expected\n+        tzinfo = datetime.timezone(datetime.timedelta(hours=tz[1]), name=tz[0])\n+        dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n+        gmt = datetime.timezone(datetime.timedelta(), name='GMT')\n+        expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n+        assert flask.json.JSONEncoder().encode(dt) == expected\n \n     def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#63ccdada1b9ddc69f97b00de1ac343894c1d8420", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 25 | Churn Cumulative: 1627 | Contributors (this commit): 24 | Commits (past 90d): 23 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,6 +34,27 @@ def has_encoding(name):\n         return False\n \n \n+class FixedOffset(datetime.tzinfo):\n+    \"\"\"Fixed offset in hours east from UTC.\n+\n+    This is a slight adaptation of the ``FixedOffset`` example found in\n+    https://docs.python.org/2.7/library/datetime.html.\n+    \"\"\"\n+\n+    def __init__(self, hours, name):\n+        self.__offset = datetime.timedelta(hours=hours)\n+        self.__name = name\n+\n+    def utcoffset(self, dt):\n+        return self.__offset\n+\n+    def tzname(self, dt):\n+        return self.__name\n+\n+    def dst(self, dt):\n+        return datetime.timedelta()\n+\n+\n class TestJSON(object):\n     def test_ignore_cached_json(self, app):\n         with app.test_request_context('/', method='POST', data='malformed',\n@@ -180,9 +201,9 @@ class TestJSON(object):\n     @pytest.mark.parametrize('tz', (('UTC', 0), ('PST', -8), ('KST', 9)))\n     def test_jsonify_aware_datetimes(self, tz):\n         \"\"\"Test if aware datetime.datetime objects are converted into GMT.\"\"\"\n-        tzinfo = datetime.timezone(datetime.timedelta(hours=tz[1]), name=tz[0])\n+        tzinfo = FixedOffset(hours=tz[1], name=tz[0])\n         dt = datetime.datetime(2017, 1, 1, 12, 34, 56, tzinfo=tzinfo)\n-        gmt = datetime.timezone(datetime.timedelta(), name='GMT')\n+        gmt = FixedOffset(hours=0, name='GMT')\n         expected = dt.astimezone(gmt).strftime('\"%a, %d %b %Y %H:%M:%S %Z\"')\n         assert flask.json.JSONEncoder().encode(dt) == expected\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7c40aa9e50d97b7c412745a53c8cdc2597c46680", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 54 | Churn Cumulative: 2478 | Contributors (this commit): 32 | Commits (past 90d): 27 | Contributors (cumulative): 44 | DMM Complexity: 0.0\n\nDIFF:\n@@ -172,11 +172,12 @@ def prepare_exec_for_file(filename):\n         if not os.path.isfile(os.path.join(dirpath, '__init__.py')):\n             break\n \n+    if sys.path[0] != dirpath:\n         sys.path.insert(0, dirpath)\n     return '.'.join(module[::-1])\n \n \n-def locate_app(script_info, app_id):\n+def locate_app(script_info, app_id, raise_if_not_found=True):\n     \"\"\"Attempts to locate the application.\"\"\"\n     __traceback_hide__ = True\n     if ':' in app_id:\n@@ -194,11 +195,13 @@ def locate_app(script_info, app_id):\n             stack_trace = traceback.format_exc()\n             raise NoAppException('There was an error trying to import'\n                                  ' the app (%s):\\n%s' % (module, stack_trace))\n-        else:\n+        elif raise_if_not_found:\n             raise NoAppException('The file/path provided (%s) does not appear'\n                                  ' to exist.  Please verify the path is '\n                                  'correct.  If app is not on PYTHONPATH, '\n                                  'ensure the extension is .py' % module)\n+        else:\n+            return\n \n     mod = sys.modules[module]\n     if app_obj is None:\n@@ -326,15 +329,23 @@ class ScriptInfo(object):\n         if self.create_app is not None:\n             rv = call_factory(self.create_app, self)\n         else:\n-            if not self.app_import_path:\n+            if self.app_import_path:\n+                rv = locate_app(self, self.app_import_path)\n+            else:\n+                for module in ['wsgi.py', 'app.py']:\n+                    import_path = prepare_exec_for_file(module)\n+                    rv = locate_app(self, import_path,\n+                                    raise_if_not_found=False)\n+                    if rv:\n+                        break\n+            if not rv:\n                 raise NoAppException(\n                     'Could not locate Flask application. You did not provide '\n-                    'the FLASK_APP environment variable.\\n\\nFor more '\n-                    'information see '\n+                    'the FLASK_APP environment variable, and a wsgi.py or '\n+                    'app.py module was not found in the current directory.\\n\\n'\n+                    'For more information see '\n                     'http://flask.pocoo.org/docs/latest/quickstart/')\n \n-            rv = locate_app(self, self.app_import_path)\n-\n         debug = get_debug_flag()\n \n         if debug is not None:\n\n@@ -0,0 +1,6 @@\n+from flask import Flask\n+app = Flask(__name__)\n+\n+@app.route(\"/\")\n+def hello():\n+    return \"Hello World!\"\n\n@@ -0,0 +1 @@\n+from hello import app\n\n@@ -181,6 +181,8 @@ def test_locate_app(test_apps):\n         script_info, \"cliapp.factory:create_app ()\")\n     pytest.raises(\n         NoAppException, locate_app, script_info, \"cliapp.importerrorapp\")\n+    assert locate_app(script_info, \"notanpp.py\",\n+                      raise_if_not_found=False) is None\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n@@ -214,7 +216,7 @@ def test_get_version(test_apps, capsys):\n     assert py_ver in out\n \n \n-def test_scriptinfo(test_apps):\n+def test_scriptinfo(test_apps, monkeypatch):\n     \"\"\"Test of ScriptInfo.\"\"\"\n     obj = ScriptInfo(app_import_path=\"cliapp.app:testapp\")\n     assert obj.load_app().name == \"testapp\"\n@@ -228,6 +230,24 @@ def test_scriptinfo(test_apps):\n     assert app.name == \"createapp\"\n     assert obj.load_app() == app\n \n+    obj = ScriptInfo()\n+    pytest.raises(\n+        NoAppException, obj.load_app)\n+\n+    # import app from wsgi.py in current directory\n+    monkeypatch.chdir(os.path.abspath(\n+        os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')))\n+    obj = ScriptInfo()\n+    app = obj.load_app()\n+    assert app.name == 'hello'\n+\n+    # import app from app.py in current directory\n+    monkeypatch.chdir(os.path.abspath(\n+        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp')))\n+    obj = ScriptInfo()\n+    app = obj.load_app()\n+    assert app.name == 'testapp'\n+\n \n def test_with_appcontext(runner):\n     \"\"\"Test of with_appcontext.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#448368e226c8edd1077cf8e5a12ddaa9222b8ec9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 12 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 48 | Churn Cumulative: 2519 | Contributors (this commit): 32 | Commits (past 90d): 27 | Contributors (cumulative): 42 | DMM Complexity: 0.2222222222222222\n\nDIFF:\n@@ -174,12 +174,14 @@ def prepare_exec_for_file(filename):\n \n     if sys.path[0] != dirpath:\n         sys.path.insert(0, dirpath)\n+\n     return '.'.join(module[::-1])\n \n \n def locate_app(script_info, app_id, raise_if_not_found=True):\n     \"\"\"Attempts to locate the application.\"\"\"\n     __traceback_hide__ = True\n+\n     if ':' in app_id:\n         module, app_obj = app_id.split(':', 1)\n     else:\n@@ -193,17 +195,23 @@ def locate_app(script_info, app_id, raise_if_not_found=True):\n         # Determine this by checking whether the trace has a depth > 1.\n         if sys.exc_info()[-1].tb_next:\n             stack_trace = traceback.format_exc()\n-            raise NoAppException('There was an error trying to import'\n-                                 ' the app (%s):\\n%s' % (module, stack_trace))\n+            raise NoAppException(\n+                'There was an error trying to import the app ({module}):\\n'\n+                '{stack_trace}'.format(\n+                    module=module, stack_trace=stack_trace\n+                )\n+            )\n         elif raise_if_not_found:\n-            raise NoAppException('The file/path provided (%s) does not appear'\n-                                 ' to exist.  Please verify the path is '\n-                                 'correct.  If app is not on PYTHONPATH, '\n-                                 'ensure the extension is .py' % module)\n+            raise NoAppException(\n+                'The file/path provided (%s) does not appear to exist. Please'\n+                ' verify the path is correct. If app is not on PYTHONPATH,'\n+                ' ensure the extension is .py.'.format(module=module)\n+            )\n         else:\n             return\n \n     mod = sys.modules[module]\n+\n     if app_obj is None:\n         return find_best_app(script_info, mod)\n     else:\n@@ -334,17 +342,21 @@ class ScriptInfo(object):\n             else:\n                 for module in ['wsgi.py', 'app.py']:\n                     import_path = prepare_exec_for_file(module)\n-                    rv = locate_app(self, import_path,\n-                                    raise_if_not_found=False)\n+                    rv = locate_app(\n+                        self, import_path, raise_if_not_found=False\n+                    )\n+\n                     if rv:\n                         break\n+\n             if not rv:\n                 raise NoAppException(\n                     'Could not locate Flask application. You did not provide '\n                     'the FLASK_APP environment variable, and a wsgi.py or '\n                     'app.py module was not found in the current directory.\\n\\n'\n                     'For more information see '\n-                    'http://flask.pocoo.org/docs/latest/quickstart/')\n+                    'http://flask.pocoo.org/docs/latest/quickstart/'\n+                )\n \n         debug = get_debug_flag()\n \n\n@@ -181,8 +181,9 @@ def test_locate_app(test_apps):\n         script_info, \"cliapp.factory:create_app ()\")\n     pytest.raises(\n         NoAppException, locate_app, script_info, \"cliapp.importerrorapp\")\n-    assert locate_app(script_info, \"notanpp.py\",\n-                      raise_if_not_found=False) is None\n+    assert locate_app(\n+        script_info, \"notanpp.py\", raise_if_not_found=False\n+    ) is None\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n@@ -231,19 +232,20 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert obj.load_app() == app\n \n     obj = ScriptInfo()\n-    pytest.raises(\n-        NoAppException, obj.load_app)\n+    pytest.raises(NoAppException, obj.load_app)\n \n     # import app from wsgi.py in current directory\n-    monkeypatch.chdir(os.path.abspath(\n-        os.path.join(os.path.dirname(__file__), 'test_apps', 'helloworld')))\n+    monkeypatch.chdir(os.path.abspath(os.path.join(\n+        os.path.dirname(__file__), 'test_apps', 'helloworld'\n+    )))\n     obj = ScriptInfo()\n     app = obj.load_app()\n     assert app.name == 'hello'\n \n     # import app from app.py in current directory\n-    monkeypatch.chdir(os.path.abspath(\n-        os.path.join(os.path.dirname(__file__), 'test_apps', 'cliapp')))\n+    monkeypatch.chdir(os.path.abspath(os.path.join(\n+        os.path.dirname(__file__), 'test_apps', 'cliapp'\n+    )))\n     obj = ScriptInfo()\n     app = obj.load_app()\n     assert app.name == 'testapp'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#75327c0a8500ca2e90e974dfda2ab8e170de65ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 4949 | Contributors (this commit): 86 | Commits (past 90d): 26 | Contributors (cumulative): 86 | DMM Complexity: 0.0\n\nDIFF:\n@@ -772,15 +772,6 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         return DispatchingJinjaLoader(self)\n \n-    def init_jinja_globals(self):\n-        \"\"\"Deprecated.  Used to initialize the Jinja2 globals.\n-\n-        .. versionadded:: 0.5\n-        .. versionchanged:: 0.7\n-           This method is deprecated with 0.7.  Override\n-           :meth:`create_jinja_environment` instead.\n-        \"\"\"\n-\n     def select_jinja_autoescape(self, filename):\n         \"\"\"Returns ``True`` if autoescaping should be active for the given\n         template name. If no template name is given, returns `True`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e9386a72738bfc77cbfbce6c648f8b638dd7b836", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 12 | Churn Cumulative: 4961 | Contributors (this commit): 86 | Commits (past 90d): 27 | Contributors (cumulative): 86 | DMM Complexity: 0.0\n\nDIFF:\n@@ -188,18 +188,6 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.10\n     app_ctx_globals_class = _AppCtxGlobals\n \n-    # Backwards compatibility support\n-    def _get_request_globals_class(self):\n-        return self.app_ctx_globals_class\n-    def _set_request_globals_class(self, value):\n-        from warnings import warn\n-        warn(DeprecationWarning('request_globals_class attribute is now '\n-                                'called app_ctx_globals_class'))\n-        self.app_ctx_globals_class = value\n-    request_globals_class = property(_get_request_globals_class,\n-                                     _set_request_globals_class)\n-    del _get_request_globals_class, _set_request_globals_class\n-\n     #: The class that is used for the ``config`` attribute of this app.\n     #: Defaults to :class:`~flask.Config`.\n     #:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9491bf8695be9b24036b3d966d9c43b46f0ddc23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 17 | Churn Cumulative: 4978 | Contributors (this commit): 86 | Commits (past 90d): 28 | Contributors (cumulative): 86 | DMM Complexity: 0.1111111111111111\n\nDIFF:\n@@ -393,10 +393,6 @@ class Flask(_PackageBoundObject):\n         #: To register a view function, use the :meth:`route` decorator.\n         self.view_functions = {}\n \n-        # support for the now deprecated `error_handlers` attribute.  The\n-        # :attr:`error_handler_spec` shall be used now.\n-        self._error_handlers = {}\n-\n         #: A dictionary of all registered error handlers.  The key is ``None``\n         #: for error handlers active on the application, otherwise the key is\n         #: the name of the blueprint.  Each key points to another dictionary\n@@ -407,7 +403,7 @@ class Flask(_PackageBoundObject):\n         #:\n         #: To register an error handler, use the :meth:`errorhandler`\n         #: decorator.\n-        self.error_handler_spec = {None: self._error_handlers}\n+        self.error_handler_spec = {}\n \n         #: A list of functions that are called when :meth:`url_for` raises a\n         #: :exc:`~werkzeug.routing.BuildError`.  Each function registered here\n@@ -563,17 +559,6 @@ class Flask(_PackageBoundObject):\n         #: This is an instance of a :class:`click.Group` object.\n         self.cli = cli.AppGroup(self.name)\n \n-    def _get_error_handlers(self):\n-        from warnings import warn\n-        warn(DeprecationWarning('error_handlers is deprecated, use the '\n-            'new error_handler_spec attribute instead.'), stacklevel=1)\n-        return self._error_handlers\n-    def _set_error_handlers(self, value):\n-        self._error_handlers = value\n-        self.error_handler_spec[None] = value\n-    error_handlers = property(_get_error_handlers, _set_error_handlers)\n-    del _get_error_handlers, _set_error_handlers\n-\n     @locked_cached_property\n     def name(self):\n         \"\"\"The name of the application.  This is usually the import name\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
