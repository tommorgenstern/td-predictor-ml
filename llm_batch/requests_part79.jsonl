{"custom_id": "requests#bff65f42eebe58f5f76c7b021369698bee4642f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 4658 | Contributors (this commit): 77 | Commits (past 90d): 12 | Contributors (cumulative): 77 | DMM Complexity: 0.0\n\nDIFF:\n@@ -404,8 +404,8 @@ class RequestsTestCase(unittest.TestCase):\n         assert post1.status_code == 200\n \n         with open('requirements.txt') as f:\n-            post2 = requests.post(\n-                url, data={'some': 'data'}, files={'some': f})\n+            post2 = requests.post(url,\n+                data={'some': 'data'}, files={'some': f})\n         assert post2.status_code == 200\n \n         post4 = requests.post(url, data='[{\"some\": \"json\"}]')\n@@ -460,34 +460,29 @@ class RequestsTestCase(unittest.TestCase):\n         assert r.url == httpbin('get?test=foo&test=baz')\n \n     def test_different_encodings_dont_break_post(self):\n-        r = requests.post(\n-            httpbin('post'),\n+        r = requests.post(httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n             params={'blah': 'asdf1234'},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n     def test_unicode_multipart_post(self):\n-        r = requests.post(\n-            httpbin('post'),\n+        r = requests.post(httpbin('post'),\n             data={'stuff': u('ëlïxr')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(\n-            httpbin('post'),\n+        r = requests.post(httpbin('post'),\n             data={'stuff': u('ëlïxr').encode('utf-8')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(\n-            httpbin('post'),\n+        r = requests.post(httpbin('post'),\n             data={'stuff': 'elixr'},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(\n-            httpbin('post'),\n+        r = requests.post(httpbin('post'),\n             data={'stuff': 'elixr'.encode('utf-8')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#07d9b730b712e8d77106c5c886be4e8bf3bef4f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 9113 | Contributors (this commit): 129 | Commits (past 90d): 7 | Contributors (cumulative): 129 | DMM Complexity: None\n\nDIFF:\n@@ -39,6 +39,7 @@ REDIRECT_STATI = (\n     codes.found,  # 302\n     codes.other,  # 303\n     codes.temporary_moved,  # 307\n+    codes.resume, # 308\n )\n DEFAULT_REDIRECT_LIMIT = 30\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec3a2e6f04a6e268cbae747e9f1ff6ea4217f8b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 12068 | Contributors (this commit): 161 | Commits (past 90d): 16 | Contributors (cumulative): 191 | DMM Complexity: None\n\nDIFF:\n@@ -38,8 +38,8 @@ REDIRECT_STATI = (\n     codes.moved,              # 301\n     codes.found,              # 302\n     codes.other,              # 303\n-    codes.temporary_moved,  # 307\n-    codes.resume, # 308\n+    codes.temporary_redirect, # 307\n+    codes.permanent_redirect, # 308\n )\n DEFAULT_REDIRECT_LIMIT = 30\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n@@ -146,7 +146,7 @@ class SessionRedirectMixin(object):\n             prepared_request.method = method\n \n             # https://github.com/kennethreitz/requests/issues/1084\n-            if resp.status_code not in (codes.temporary, codes.resume):\n+            if resp.status_code not in (codes.temporary_redirect, codes.permanent_redirect):\n                 if 'Content-Length' in prepared_request.headers:\n                     del prepared_request.headers['Content-Length']\n \n\n@@ -30,7 +30,7 @@ _codes = {\n     305: ('use_proxy',),\n     306: ('switch_proxy',),\n     307: ('temporary_redirect', 'temporary_moved', 'temporary'),\n-    308: ('resume_incomplete', 'resume'),\n+    308: ('permanent_redirect',),\n \n     # Client Error.\n     400: ('bad_request', 'bad'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#da3178f377b34230792c70a48cc992500578316f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 123 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -30,7 +30,8 @@ _codes = {\n     305: ('use_proxy',),\n     306: ('switch_proxy',),\n     307: ('temporary_redirect', 'temporary_moved', 'temporary'),\n-    308: ('permanent_redirect',),\n+    308: ('permanent_redirect',\n+          'resume_incomplete', 'resume',), # These 2 to be removed in 3.0\n \n     # Client Error.\n     400: ('bad_request', 'bad'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c3444f8c7abdda2642f59109d6961bdf8511f38c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 15 | Churn Cumulative: 11963 | Contributors (this commit): 158 | Commits (past 90d): 16 | Contributors (cumulative): 183 | DMM Complexity: 0.42857142857142855\n\nDIFF:\n@@ -610,6 +610,11 @@ class Response(object):\n         \"\"\"\n         return ('location' in self.headers and self.status_code in REDIRECT_STATI)\n \n+    @property\n+    def is_permanent_redirect(self):\n+        \"\"\"True if this Response one of the permanant versions of redirect\"\"\"\n+        return ('location' in self.headers and self.status_code in (codes.moved_permanently, codes.permanent_redirect))\n+\n     @property\n     def apparent_encoding(self):\n         \"\"\"The apparent encoding, provided by the chardet library\"\"\"\n\n@@ -127,6 +127,9 @@ class SessionRedirectMixin(object):\n                 url = requote_uri(url)\n \n             prepared_request.url = to_native_string(url)\n+            # cache the url\n+            if resp.is_permanent_redirect:\n+                self.redirect_cache[req.url] = prepared_request.url\n \n             # http://tools.ietf.org/html/rfc7231#section-6.4.4\n             if (resp.status_code == codes.see_other and\n@@ -263,7 +266,7 @@ class Session(SessionRedirectMixin):\n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n         'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream',\n-        'trust_env', 'max_redirects']\n+        'trust_env', 'max_redirects', 'redirect_cache']\n \n     def __init__(self):\n \n@@ -316,6 +319,8 @@ class Session(SessionRedirectMixin):\n         self.mount('https://', HTTPAdapter())\n         self.mount('http://', HTTPAdapter())\n \n+        self.redirect_cache = {}\n+\n     def __enter__(self):\n         return self\n \n@@ -540,6 +545,9 @@ class Session(SessionRedirectMixin):\n         if not isinstance(request, PreparedRequest):\n             raise ValueError('You can only send PreparedRequests.')\n \n+        while request.url in self.redirect_cache:\n+            request.url = self.redirect_cache.get(request.url)\n+\n         # Set up variables needed for resolve_redirects and dispatching of hooks\n         allow_redirects = kwargs.pop('allow_redirects', True)\n         stream = kwargs.get('stream')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#84f67379c8844ff109a200caa3f3e815fdf0beee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 2845 | Contributors (this commit): 55 | Commits (past 90d): 5 | Contributors (cumulative): 55 | DMM Complexity: None\n\nDIFF:\n@@ -436,11 +436,11 @@ class Session(SessionRedirectMixin):\n                 proxies.setdefault(k, v)\n \n             # Look for configuration.\n-            if not verify and verify is not False:\n+            if verify is True or (verify is None and verify is not False):\n                 verify = os.environ.get('REQUESTS_CA_BUNDLE')\n \n             # Curl compatibility.\n-            if not verify and verify is not False:\n+            if verify is True or (verify is None and verify is not False):\n                 verify = os.environ.get('CURL_CA_BUNDLE')\n \n         # Merge all the kwargs.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3957b0befb063ecea1c9cb3dc67b2c385ddad58e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 4 | Churn Cumulative: 2849 | Contributors (this commit): 55 | Commits (past 90d): 6 | Contributors (cumulative): 55 | DMM Complexity: None\n\nDIFF:\n@@ -436,11 +436,11 @@ class Session(SessionRedirectMixin):\n                 proxies.setdefault(k, v)\n \n             # Look for configuration.\n-            if verify is True or (verify is None and verify is not False):\n+            if verify is True or verify is None:\n                 verify = os.environ.get('REQUESTS_CA_BUNDLE')\n \n             # Curl compatibility.\n-            if verify is True or (verify is None and verify is not False):\n+            if verify is True or verify is None:\n                 verify = os.environ.get('CURL_CA_BUNDLE')\n \n         # Merge all the kwargs.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7a51337ce0c939a2b9232c86e434c4478dbd1949", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 67 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -11,10 +11,11 @@ If you are packaging Requests, e.g., for a Linux distribution or a managed\n environment, you can change the definition of where() to return a separately\n packaged CA bundle.\n \"\"\"\n-\n import os.path\n \n-\n+try:\n+    from certifi import where\n+except ImportError:\n     def where():\n         \"\"\"Return the preferred certificate bundle.\"\"\"\n         # vendored bundle inside Requests\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#52facc7984bb2cdd3e985c429d423f8cc6da632e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 399 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ packages = [\n     'requests.packages.urllib3.packages.ssl_match_hostname',\n ]\n \n-requires = []\n+requires = ['certifi']\n \n with open('README.rst') as f:\n     readme = f.read()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#170d6269eb004aed085d2e770700bccf92ab0e40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 820 | Contributors (this commit): 23 | Commits (past 90d): 4 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -11,6 +11,7 @@ and maintain connections.\n import socket\n \n from .models import Response\n+from .packages.urllib3 import Retry\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.util import Timeout as TimeoutSauce\n@@ -323,7 +324,7 @@ class HTTPAdapter(BaseAdapter):\n                     assert_same_host=False,\n                     preload_content=False,\n                     decode_content=False,\n-                    retries=self.max_retries,\n+                    retries=Retry(self.max_retries, read=False),\n                     timeout=timeout\n                 )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9eab9f7415e718cefc77f4bbe632abf8e089c555", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 19 | Churn Cumulative: 13799 | Contributors (this commit): 162 | Commits (past 90d): 15 | Contributors (cumulative): 208 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -9,6 +9,7 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n+import socket\n \n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n@@ -22,7 +23,7 @@ from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError, ContentDecodingError)\n+    ChunkedEncodingError, ContentDecodingError, ConnectionError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -640,6 +641,8 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except socket.error as e:\n+                    raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n\n@@ -18,7 +18,7 @@ from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3, builtin_str)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n-from requests.exceptions import InvalidURL, MissingSchema\n+from requests.exceptions import InvalidURL, MissingSchema, ConnectionError\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -720,6 +720,18 @@ class RequestsTestCase(unittest.TestCase):\n         assert next(iter(r))\n         io.close()\n \n+    def test_iter_content_handles_socket_error(self):\n+        r = requests.Response()\n+        import socket\n+\n+        class RawMock(object):\n+            def stream(self, chunk_size, decode_content=None):\n+                raise socket.error()\n+\n+        setattr(r, 'raw', RawMock())\n+        with pytest.raises(ConnectionError):\n+            list(r.iter_content())\n+\n     def test_response_decode_unicode(self):\n         \"\"\"\n         When called with decode_unicode, Response.iter_content should always\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cf01a743aff009b18c42c553a53640d44f026f5c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4674 | Contributors (this commit): 78 | Commits (past 90d): 7 | Contributors (cumulative): 78 | DMM Complexity: None\n\nDIFF:\n@@ -728,7 +728,7 @@ class RequestsTestCase(unittest.TestCase):\n             def stream(self, chunk_size, decode_content=None):\n                 raise socket.error()\n \n-        setattr(r, 'raw', RawMock())\n+        r.raw = RawMock()\n         with pytest.raises(ConnectionError):\n             list(r.iter_content())\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47d0517d66e8cf5832768262221f0357ae134ad1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 19 | Files Changed: 3 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 24 | Churn Cumulative: 13990 | Contributors (this commit): 168 | Commits (past 90d): 19 | Contributors (cumulative): 225 | DMM Complexity: 0.0\n\nDIFF:\n@@ -92,7 +92,6 @@ if is_py2:\n     from Cookie import Morsel\n     from StringIO import StringIO\n     from .packages.urllib3.packages.ordered_dict import OrderedDict\n-    from httplib import IncompleteRead\n \n     builtin_str = str\n     bytes = str\n@@ -108,7 +107,6 @@ elif is_py3:\n     from http.cookies import Morsel\n     from io import StringIO\n     from collections import OrderedDict\n-    from http.client import IncompleteRead\n \n     builtin_str = str\n     str = str\n\n@@ -9,7 +9,6 @@ This module contains the primary objects that power Requests.\n \n import collections\n import datetime\n-import socket\n \n from io import BytesIO, UnsupportedOperation\n from .hooks import default_hooks\n@@ -20,7 +19,8 @@ from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n-from .packages.urllib3.exceptions import DecodeError\n+from .packages.urllib3.exceptions import (\n+    DecodeError, ReadTimeoutError, ProtocolError)\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n     ChunkedEncodingError, ContentDecodingError, ConnectionError)\n@@ -30,7 +30,7 @@ from .utils import (\n     iter_slices, guess_json_utf, super_len, to_native_string)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring, IncompleteRead)\n+    is_py2, chardet, json, builtin_str, basestring)\n from .status_codes import codes\n \n #: The set of HTTP status codes that indicate an automatically\n@@ -637,11 +637,11 @@ class Response(object):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n-                except IncompleteRead as e:\n+                except ProtocolError as e:\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n-                except socket.error as e:\n+                except ReadTimeoutError as e:\n                     raise ConnectionError(e)\n             except AttributeError:\n                 # Standard file-like object.\n\n@@ -720,18 +720,6 @@ class RequestsTestCase(unittest.TestCase):\n         assert next(iter(r))\n         io.close()\n \n-    def test_iter_content_handles_socket_error(self):\n-        r = requests.Response()\n-        import socket\n-\n-        class RawMock(object):\n-            def stream(self, chunk_size, decode_content=None):\n-                raise socket.error()\n-\n-        r.raw = RawMock()\n-        with pytest.raises(ConnectionError):\n-            list(r.iter_content())\n-\n     def test_response_decode_unicode(self):\n         \"\"\"\n         When called with decode_unicode, Response.iter_content should always\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#df641e74ffa294d30f0cc9bf951b7f9614aac18d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 15 | Churn Cumulative: 7550 | Contributors (this commit): 111 | Commits (past 90d): 15 | Contributors (cumulative): 136 | DMM Complexity: 0.5454545454545454\n\nDIFF:\n@@ -91,10 +91,17 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        hist = [] #keep track of history\n \n         while resp.is_redirect:\n             prepared_request = req.copy()\n \n+            if i > 0:\n+                #create deep copy of the history and keep track of redirects\n+                hist.append(resp)\n+                new_hist = list(hist)\n+                resp.history = new_hist\n+\n             try:\n                 resp.content  # Consume socket so it can be released\n             except (ChunkedEncodingError, ContentDecodingError, RuntimeError):\n\n@@ -974,6 +974,13 @@ class RequestsTestCase(unittest.TestCase):\n         assert isinstance(s, builtin_str)\n         assert s == \"Basic dGVzdDp0ZXN0\"\n \n+    def test_requests_history_is_saved(self):\n+        r = requests.get('https://httpbin.org/redirect/5')\n+        count = 0\n+        for item in r.history:\n+            assert len(item.history) == count\n+            count = count + 1\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n@@ -1364,6 +1371,7 @@ class TestRedirects:\n             assert session.calls[-1] == send_call\n \n \n+\n @pytest.fixture\n def list_of_tuples():\n     return [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2fc6e8a894a5378dd16b2653df9ccf875d0bddf8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 7559 | Contributors (this commit): 111 | Commits (past 90d): 17 | Contributors (cumulative): 136 | DMM Complexity: 1.0\n\nDIFF:\n@@ -97,7 +97,7 @@ class SessionRedirectMixin(object):\n             prepared_request = req.copy()\n \n             if i > 0:\n-                #create deep copy of the history and keep track of redirects\n+                #update history and keep track of redirects\n                 hist.append(resp)\n                 new_hist = list(hist)\n                 resp.history = new_hist\n\n@@ -976,10 +976,11 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_requests_history_is_saved(self):\n         r = requests.get('https://httpbin.org/redirect/5')\n-        count = 0\n+        total = r.history[-1].history\n+        i = 0\n         for item in r.history:\n-            assert len(item.history) == count\n-            count = count + 1\n+            assert item.history == total[0:i]\n+            i=i+1\n \n \n class TestContentEncodingDetection(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c7e087cf562d173ec62fa384aa028746798f96c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2860 | Contributors (this commit): 56 | Commits (past 90d): 8 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -97,7 +97,7 @@ class SessionRedirectMixin(object):\n             prepared_request = req.copy()\n \n             if i > 0:\n-                #update history and keep track of redirects\n+                # Update history and keep track of redirects.\n                 hist.append(resp)\n                 new_hist = list(hist)\n                 resp.history = new_hist\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2aeaa3959b5754f5b39a45bceff91b196b6c986", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 89 | Lines Deleted: 11 | Files Changed: 4 | Hunks: 15 | Methods Changed: 7 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 100 | Churn Cumulative: 7510 | Contributors (this commit): 102 | Commits (past 90d): 15 | Contributors (cumulative): 132 | DMM Complexity: 0.7\n\nDIFF:\n@@ -15,17 +15,19 @@ from .packages.urllib3 import Retry\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.util import Timeout as TimeoutSauce\n-from .compat import urlparse, basestring, urldefrag, unquote\n+from .compat import urlparse, basestring, urldefrag\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed, get_auth_from_url)\n from .structures import CaseInsensitiveDict\n-from .packages.urllib3.exceptions import MaxRetryError\n-from .packages.urllib3.exceptions import TimeoutError\n-from .packages.urllib3.exceptions import SSLError as _SSLError\n+from .packages.urllib3.exceptions import ConnectTimeoutError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n+from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import ProxyError as _ProxyError\n+from .packages.urllib3.exceptions import ReadTimeoutError\n+from .packages.urllib3.exceptions import SSLError as _SSLError\n from .cookies import extract_cookies_to_jar\n-from .exceptions import ConnectionError, Timeout, SSLError, ProxyError\n+from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n+                         ProxyError)\n from .auth import _basic_auth_str\n \n DEFAULT_POOLBLOCK = False\n@@ -315,6 +317,7 @@ class HTTPAdapter(BaseAdapter):\n         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n         :param stream: (optional) Whether to stream the request content.\n         :param timeout: (optional) The timeout on the request.\n+        :type timeout: float or tuple (connect timeout, read timeout), eg (3.1, 20)\n         :param verify: (optional) Whether to verify SSL certificates.\n         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n         :param proxies: (optional) The proxies dictionary to apply to the request.\n@@ -328,6 +331,17 @@ class HTTPAdapter(BaseAdapter):\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n+        if isinstance(timeout, tuple):\n+            try:\n+                connect, read = timeout\n+                timeout = TimeoutSauce(connect=connect, read=read)\n+            except ValueError as e:\n+                # this may raise a string formatting error.\n+                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n+                       \"timeout tuple, or a single float to set \"\n+                       \"both timeouts to the same value\".format(timeout))\n+                raise ValueError(err)\n+        else:\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n@@ -390,6 +404,9 @@ class HTTPAdapter(BaseAdapter):\n             raise ConnectionError(sockerr, request=request)\n \n         except MaxRetryError as e:\n+            if isinstance(e.reason, ConnectTimeoutError):\n+                raise ConnectTimeout(e, request=request)\n+\n             raise ConnectionError(e, request=request)\n \n         except _ProxyError as e:\n@@ -398,8 +415,8 @@ class HTTPAdapter(BaseAdapter):\n         except (_SSLError, _HTTPError) as e:\n             if isinstance(e, _SSLError):\n                 raise SSLError(e, request=request)\n-            elif isinstance(e, TimeoutError):\n-                raise Timeout(e, request=request)\n+            elif isinstance(e, ReadTimeoutError):\n+                raise ReadTimeout(e, request=request)\n             else:\n                 raise\n \n\n@@ -44,7 +44,22 @@ class SSLError(ConnectionError):\n \n \n class Timeout(RequestException):\n-    \"\"\"The request timed out.\"\"\"\n+    \"\"\"The request timed out.\n+\n+    Catching this error will catch both :exc:`ConnectTimeout` and\n+    :exc:`ReadTimeout` errors.\n+    \"\"\"\n+\n+\n+class ConnectTimeout(Timeout):\n+    \"\"\" The request timed out while trying to connect to the server.\n+\n+    Requests that produce this error are safe to retry\n+    \"\"\"\n+\n+\n+class ReadTimeout(Timeout):\n+    \"\"\"The server did not send any data in the allotted amount of time.\"\"\"\n \n \n class URLRequired(RequestException):\n\n@@ -23,7 +23,7 @@ class CaseInsensitiveDict(collections.MutableMapping):\n     case of the last key to be set, and ``iter(instance)``,\n     ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``\n     will contain case-sensitive keys. However, querying and contains\n-    testing is case insensitive:\n+    testing is case insensitive::\n \n         cid = CaseInsensitiveDict()\n         cid['Accept'] = 'application/json'\n\n@@ -18,7 +18,8 @@ from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3, builtin_str)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n-from requests.exceptions import InvalidURL, MissingSchema, ConnectionError\n+from requests.exceptions import (InvalidURL, MissingSchema, ConnectTimeout,\n+                                 ReadTimeout)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -38,6 +39,9 @@ else:\n         return s.decode('unicode-escape')\n \n \n+# Requests to this URL should always fail with a connection timeout (nothing\n+# listening on that port)\n+TARPIT = \"http://10.255.255.1\"\n HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n # Issue #1483: Make sure the URL always has a trailing slash\n HTTPBIN = HTTPBIN.rstrip('/') + '/'\n@@ -1308,10 +1312,52 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n class TestTimeout:\n     def test_stream_timeout(self):\n         try:\n-            requests.get('https://httpbin.org/delay/10', timeout=5.0)\n+            requests.get('https://httpbin.org/delay/10', timeout=2.0)\n         except requests.exceptions.Timeout as e:\n             assert 'Read timed out' in e.args[0].args[0]\n \n+    def test_invalid_timeout(self):\n+        with pytest.raises(ValueError) as e:\n+            requests.get(httpbin('get'), timeout=(3, 4, 5))\n+        assert '(connect, read)' in str(e)\n+\n+        with pytest.raises(ValueError) as e:\n+            requests.get(httpbin('get'), timeout=\"foo\")\n+        assert 'must be an int or float' in str(e)\n+\n+    def test_none_timeout(self):\n+        \"\"\" Check that you can set None as a valid timeout value.\n+\n+        To actually test this behavior, we'd want to check that setting the\n+        timeout to None actually lets the request block past the system default\n+        timeout. However, this would make the test suite unbearably slow.\n+        Instead we verify that setting the timeout to None does not prevent the\n+        request from succeeding.\n+        \"\"\"\n+        r = requests.get(httpbin('get'), timeout=None)\n+        assert r.status_code == 200\n+\n+    def test_read_timeout(self):\n+        try:\n+            requests.get(httpbin('delay/10'), timeout=(None, 0.1))\n+            assert False, \"The recv() request should time out.\"\n+        except ReadTimeout:\n+            pass\n+\n+    def test_connect_timeout(self):\n+        try:\n+            requests.get(TARPIT, timeout=(0.1, None))\n+            assert False, \"The connect() request should time out.\"\n+        except ConnectTimeout:\n+            pass\n+\n+    def test_total_timeout_connect(self):\n+        try:\n+            requests.get(TARPIT, timeout=(0.1, 0.1))\n+            assert False, \"The connect() request should time out.\"\n+        except ConnectTimeout:\n+            pass\n+\n \n SendCall = collections.namedtuple('SendCall', ('args', 'kwargs'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8f9ce13e433013cd9bd4dbe9cf61c5b5f14b65ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 156 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ class Timeout(RequestException):\n     \"\"\"\n \n \n-class ConnectTimeout(Timeout):\n+class ConnectTimeout(ConnectionError, Timeout):\n     \"\"\"The request timed out while trying to connect to the server.\n \n     Requests that produce this error are safe to retry\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39b3a436d3058975ac8e05735825da03e755a3b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4757 | Contributors (this commit): 81 | Commits (past 90d): 11 | Contributors (cumulative): 81 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,7 @@ from requests.compat import (\n     Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3, builtin_str)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (InvalidURL, MissingSchema, ConnectTimeout,\n-                                 ReadTimeout)\n+                                 ReadTimeout, ConnectionError, Timeout)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -1348,8 +1348,10 @@ class TestTimeout:\n         try:\n             requests.get(TARPIT, timeout=(0.1, None))\n             assert False, \"The connect() request should time out.\"\n-        except ConnectTimeout:\n+        except ConnectTimeout as e:\n             pass\n+        assert isinstance(e, ConnectionError)\n+        assert isinstance(e, Timeout)\n \n     def test_total_timeout_connect(self):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7f236fcc40ae3597bfc944c704bff2b8d907cd93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 4758 | Contributors (this commit): 81 | Commits (past 90d): 12 | Contributors (cumulative): 81 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1349,7 +1349,6 @@ class TestTimeout:\n             requests.get(TARPIT, timeout=(0.1, None))\n             assert False, \"The connect() request should time out.\"\n         except ConnectTimeout as e:\n-            pass\n             assert isinstance(e, ConnectionError)\n             assert isinstance(e, Timeout)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8bbc4fcb5718a2cc321a456422a80305c2351582", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 91 | Lines Deleted: 15 | Files Changed: 7 | Hunks: 29 | Methods Changed: 11 | Complexity Δ (Sum/Max): 9/4 | Churn Δ: 106 | Churn Cumulative: 5534 | Contributors (this commit): 17 | Commits (past 90d): 13 | Contributors (cumulative): 53 | DMM Complexity: 0.7575757575757576\n\nDIFF:\n@@ -57,7 +57,7 @@ del NullHandler\n \n # Set security warning to only go off once by default.\n import warnings\n-warnings.simplefilter('module', exceptions.InsecureRequestWarning)\n+warnings.simplefilter('module', exceptions.SecurityWarning)\n \n def disable_warnings(category=exceptions.HTTPWarning):\n     \"\"\"\n\n@@ -1,6 +1,8 @@\n+import datetime\n import sys\n import socket\n from socket import timeout as SocketTimeout\n+import warnings\n \n try:  # Python 3\n     from http.client import HTTPConnection as _HTTPConnection, HTTPException\n@@ -26,6 +28,7 @@ except (ImportError, AttributeError):  # Platform-specific: No SSL.\n \n from .exceptions import (\n     ConnectTimeoutError,\n+    SystemTimeWarning,\n )\n from .packages.ssl_match_hostname import match_hostname\n from .packages import six\n@@ -45,6 +48,8 @@ port_by_scheme = {\n     'https': 443,\n }\n \n+RECENT_DATE = datetime.date(2014, 1, 1)\n+\n \n class HTTPConnection(_HTTPConnection, object):\n     \"\"\"\n@@ -172,6 +177,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n     cert_reqs = None\n     ca_certs = None\n     ssl_version = None\n+    assert_fingerprint = None\n \n     def set_cert(self, key_file=None, cert_file=None,\n                  cert_reqs=None, ca_certs=None,\n@@ -206,6 +212,14 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n             # Override the host with the one we're requesting data from.\n             hostname = self._tunnel_host\n \n+        is_time_off = datetime.date.today() < RECENT_DATE\n+        if is_time_off:\n+            warnings.warn((\n+                'System time is way off (before {0}). This will probably '\n+                'lead to SSL verification errors').format(RECENT_DATE),\n+                SystemTimeWarning\n+            )\n+\n         # Wrap socket using verification with the root certs in\n         # trusted_root_certs\n         self.sock = ssl_wrap_socket(conn, self.key_file, self.cert_file,\n@@ -214,15 +228,16 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n                                     server_hostname=hostname,\n                                     ssl_version=resolved_ssl_version)\n \n-        if resolved_cert_reqs != ssl.CERT_NONE:\n         if self.assert_fingerprint:\n             assert_fingerprint(self.sock.getpeercert(binary_form=True),\n                                self.assert_fingerprint)\n-            elif self.assert_hostname is not False:\n+        elif resolved_cert_reqs != ssl.CERT_NONE \\\n+                and self.assert_hostname is not False:\n             match_hostname(self.sock.getpeercert(),\n                            self.assert_hostname or hostname)\n \n-        self.is_verified = resolved_cert_reqs == ssl.CERT_REQUIRED\n+        self.is_verified = (resolved_cert_reqs == ssl.CERT_REQUIRED\n+                            or self.assert_fingerprint is not None)\n \n \n if ssl:\n\n@@ -718,7 +718,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         super(HTTPSConnectionPool, self)._validate_conn(conn)\n \n         # Force connect early to allow us to validate the connection.\n-        if not conn.sock:\n+        if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\n             conn.connect()\n \n         if not conn.is_verified:\n\n@@ -46,8 +46,12 @@ Module Variables\n \n '''\n \n+try:\n     from ndg.httpsclient.ssl_peer_verification import SUBJ_ALT_NAME_SUPPORT\n     from ndg.httpsclient.subj_alt_name import SubjectAltName as BaseSubjectAltName\n+except SyntaxError as e:\n+    raise ImportError(e)\n+\n import OpenSSL.SSL\n from pyasn1.codec.der import decoder as der_decoder\n from pyasn1.type import univ, constraint\n@@ -155,18 +159,24 @@ def get_subj_alt_name(peer_cert):\n \n \n class WrappedSocket(object):\n-    '''API-compatibility wrapper for Python OpenSSL's Connection-class.'''\n+    '''API-compatibility wrapper for Python OpenSSL's Connection-class.\n+\n+    Note: _makefile_refs, _drop() and _reuse() are needed for the garbage\n+    collector of pypy.\n+    '''\n \n     def __init__(self, connection, socket, suppress_ragged_eofs=True):\n         self.connection = connection\n         self.socket = socket\n         self.suppress_ragged_eofs = suppress_ragged_eofs\n+        self._makefile_refs = 0\n \n     def fileno(self):\n         return self.socket.fileno()\n \n     def makefile(self, mode, bufsize=-1):\n-        return _fileobject(self, mode, bufsize)\n+        self._makefile_refs += 1\n+        return _fileobject(self, mode, bufsize, close=True)\n \n     def recv(self, *args, **kwargs):\n         try:\n@@ -180,7 +190,7 @@ class WrappedSocket(object):\n             rd, wd, ed = select.select(\n                 [self.socket], [], [], self.socket.gettimeout())\n             if not rd:\n-                raise timeout()\n+                raise timeout('The read operation timed out')\n             else:\n                 return self.recv(*args, **kwargs)\n         else:\n@@ -193,7 +203,10 @@ class WrappedSocket(object):\n         return self.connection.sendall(data)\n \n     def close(self):\n+        if self._makefile_refs < 1:\n             return self.connection.shutdown()\n+        else:\n+            self._makefile_refs -= 1\n \n     def getpeercert(self, binary_form=False):\n         x509 = self.connection.get_peer_certificate()\n@@ -216,6 +229,15 @@ class WrappedSocket(object):\n             ]\n         }\n \n+    def _reuse(self):\n+        self._makefile_refs += 1\n+\n+    def _drop(self):\n+        if self._makefile_refs < 1:\n+            self.close()\n+        else:\n+            self._makefile_refs -= 1\n+\n \n def _verify_callback(cnx, x509, err_no, err_depth, return_code):\n     return err_no == 0\n\n@@ -60,7 +60,14 @@ ConnectionError = ProtocolError\n ## Leaf Exceptions\n \n class MaxRetryError(RequestError):\n-    \"Raised when the maximum number of retries is exceeded.\"\n+    \"\"\"Raised when the maximum number of retries is exceeded.\n+\n+    :param pool: The connection pool\n+    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`\n+    :param string url: The requested Url\n+    :param exceptions.Exception reason: The underlying error\n+\n+    \"\"\"\n \n     def __init__(self, pool, url, reason=None):\n         self.reason = reason\n@@ -134,6 +141,16 @@ class LocationParseError(LocationValueError):\n         self.location = location\n \n \n-class InsecureRequestWarning(HTTPWarning):\n+class SecurityWarning(HTTPWarning):\n+    \"Warned when perfoming security reducing actions\"\n+    pass\n+\n+\n+class InsecureRequestWarning(SecurityWarning):\n     \"Warned when making an unverified HTTPS request.\"\n     pass\n+\n+\n+class SystemTimeWarning(SecurityWarning):\n+    \"Warned when system time is suspected to be wrong\"\n+    pass\n\n@@ -48,7 +48,10 @@ class HTTPResponse(io.IOBase):\n     HTTP Response container.\n \n     Backwards-compatible to httplib's HTTPResponse but the response ``body`` is\n-    loaded and decoded on-demand when the ``data`` property is accessed.\n+    loaded and decoded on-demand when the ``data`` property is accessed.  This\n+    class is also compatible with the Python standard library's :mod:`io`\n+    module, and can hence be treated as a readable object in the context of that\n+    framework.\n \n     Extra parameters for behaviour not present in httplib.HTTPResponse:\n \n@@ -317,4 +320,14 @@ class HTTPResponse(io.IOBase):\n             return self._fp.flush()\n \n     def readable(self):\n+        # This method is required for `io` module compatibility.\n         return True\n+\n+    def readinto(self, b):\n+        # This method is required for `io` module compatibility.\n+        temp = self.read(len(b))\n+        if len(temp) == 0:\n+            return 0\n+        else:\n+            b[:len(temp)] = temp\n+            return len(temp)\n\n@@ -5,9 +5,18 @@ def is_fp_closed(obj):\n     :param obj:\n         The file-like object to check.\n     \"\"\"\n-    if hasattr(obj, 'fp'):\n-        # Object is a container for another file-like object that gets released\n-        # on exhaustion (e.g. HTTPResponse)\n-        return obj.fp is None\n \n+    try:\n+        # Check via the official file-like-object way.\n         return obj.closed\n+    except AttributeError:\n+        pass\n+\n+    try:\n+        # Check if the object is a container for another file-like object that\n+        # gets released on exhaustion (e.g. HTTPResponse).\n+        return obj.fp is None\n+    except AttributeError:\n+        pass\n+\n+    raise ValueError(\"Unable to determine whether fp is closed.\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4a7906bca61f94a5b7a0e177b0d85b3ee11604f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 54 | Churn Cumulative: 2914 | Contributors (this commit): 56 | Commits (past 90d): 9 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -435,36 +435,16 @@ class Session(SessionRedirectMixin):\n \n         proxies = proxies or {}\n \n-        # Gather clues from the surrounding environment.\n-        if self.trust_env:\n-            # Set environment's proxies.\n-            env_proxies = get_environ_proxies(url) or {}\n-            for (k, v) in env_proxies.items():\n-                proxies.setdefault(k, v)\n-\n-            # Look for configuration.\n-            if verify is True or verify is None:\n-                verify = os.environ.get('REQUESTS_CA_BUNDLE')\n-\n-            # Curl compatibility.\n-            if verify is True or verify is None:\n-                verify = os.environ.get('CURL_CA_BUNDLE')\n-\n-        # Merge all the kwargs.\n-        proxies = merge_setting(proxies, self.proxies)\n-        stream = merge_setting(stream, self.stream)\n-        verify = merge_setting(verify, self.verify)\n-        cert = merge_setting(cert, self.cert)\n+        settings = self.merge_environment_settings(\n+            prep.url, proxies, stream, verify, cert\n+        )\n \n         # Send the request.\n         send_kwargs = {\n-            'stream': stream,\n             'timeout': timeout,\n-            'verify': verify,\n-            'cert': cert,\n-            'proxies': proxies,\n             'allow_redirects': allow_redirects,\n         }\n+        send_kwargs.update(settings)\n         resp = self.send(prep, **send_kwargs)\n \n         return resp\n@@ -612,6 +592,32 @@ class Session(SessionRedirectMixin):\n \n         return r\n \n+    def merge_environment_settings(self, url, proxies, stream, verify, cert):\n+        \"\"\"Checks the environment and merges it with some settings.\"\"\"\n+        # Gather clues from the surrounding environment.\n+        if self.trust_env:\n+            # Set environment's proxies.\n+            env_proxies = get_environ_proxies(url) or {}\n+            for (k, v) in env_proxies.items():\n+                proxies.setdefault(k, v)\n+\n+            # Look for configuration.\n+            if verify is True or verify is None:\n+                verify = os.environ.get('REQUESTS_CA_BUNDLE')\n+\n+            # Curl compatibility.\n+            if verify is True or verify is None:\n+                verify = os.environ.get('CURL_CA_BUNDLE')\n+\n+        # Merge all the kwargs.\n+        proxies = merge_setting(proxies, self.proxies)\n+        stream = merge_setting(stream, self.stream)\n+        verify = merge_setting(verify, self.verify)\n+        cert = merge_setting(cert, self.cert)\n+\n+        return {'verify': verify, 'proxies': proxies, 'stream': stream,\n+                'cert': cert}\n+\n     def get_adapter(self, url):\n         \"\"\"Returns the appropriate connnection adapter for the given URL.\"\"\"\n         for (prefix, adapter) in self.adapters.items():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
