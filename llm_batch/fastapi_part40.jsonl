{"custom_id": "fastapi#745ab48d655937ba0315083e7c0b579da47a7915", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 26 | Files Changed: 3 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 60 | Churn Cumulative: 60 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,8 @@\n-class Person:\n-    def __init__(self, name: str):\n-        self.name = name\n+from typing import Optional\n \n \n-def get_person_name(one_person: Person):\n-    return one_person.name\n+def say_hi(name: Optional[str] = None):\n+    if name is not None:\n+        print(f\"Hey {name}!\")\n+    else:\n+        print(\"Hello World\")\n\n@@ -1,23 +1,7 @@\n-from datetime import datetime\n-from typing import List\n-\n-from pydantic import BaseModel\n+class Person:\n+    def __init__(self, name: str):\n+        self.name = name\n \n \n-class User(BaseModel):\n-    id: int\n-    name = \"John Doe\"\n-    signup_ts: datetime = None\n-    friends: List[int] = []\n-\n-\n-external_data = {\n-    \"id\": \"123\",\n-    \"signup_ts\": \"2017-06-01 12:22\",\n-    \"friends\": [1, \"2\", b\"3\"],\n-}\n-user = User(**external_data)\n-print(user)\n-# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n-print(user.id)\n-# > 123\n+def get_person_name(one_person: Person):\n+    return one_person.name\n\n@@ -0,0 +1,23 @@\n+from datetime import datetime\n+from typing import List, Optional\n+\n+from pydantic import BaseModel\n+\n+\n+class User(BaseModel):\n+    id: int\n+    name = \"John Doe\"\n+    signup_ts: Optional[datetime] = None\n+    friends: List[int] = []\n+\n+\n+external_data = {\n+    \"id\": \"123\",\n+    \"signup_ts\": \"2017-06-01 12:22\",\n+    \"friends\": [1, \"2\", b\"3\"],\n+}\n+user = User(**external_data)\n+print(user)\n+# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n+print(user.id)\n+# > 123\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a0ab47e89ed9f492ea15157ce7096f0a393bbaca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5184 | Contributors (this commit): 31 | Commits (past 90d): 9 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -294,7 +294,7 @@ def get_dependant(\n         if param_name in path_param_names:\n             assert is_scalar_field(\n                 field=param_field\n-            ), f\"Path params must be of one of the supported types\"\n+            ), \"Path params must be of one of the supported types\"\n             if isinstance(param.default, params.Path):\n                 ignore_default = False\n             else:\n\n@@ -365,7 +365,7 @@ class APIRoute(routing.Route):\n         self.include_in_schema = include_in_schema\n         self.response_class = response_class\n \n-        assert callable(endpoint), f\"An endpoint must be a callable\"\n+        assert callable(endpoint), \"An endpoint must be a callable\"\n         self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n         for depends in self.dependencies[::-1]:\n             self.dependant.dependencies.insert(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8231fbede410ae2eab18b3dd18afc8f74a71f84d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 247 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.56.0\"\n+__version__ = \"0.56.1\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3699e17212e1bf0f28627dc4617c5d0714502571", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 10 | Complexity Δ (Sum/Max): 13/9 | Churn Δ: 57 | Churn Cumulative: 510 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -51,6 +51,9 @@ class Param(FieldInfo):\n             **extra,\n         )\n \n+    def __repr__(self) -> str:\n+        return f\"{self.__class__.__name__}({self.default})\"\n+\n \n class Path(Param):\n     in_ = ParamTypes.path\n@@ -239,6 +242,9 @@ class Body(FieldInfo):\n             **extra,\n         )\n \n+    def __repr__(self) -> str:\n+        return f\"{self.__class__.__name__}({self.default})\"\n+\n \n class Form(Body):\n     def __init__(\n@@ -316,6 +322,11 @@ class Depends:\n         self.dependency = dependency\n         self.use_cache = use_cache\n \n+    def __repr__(self) -> str:\n+        attr = getattr(self.dependency, \"__name__\", type(self.dependency).__name__)\n+        cache = \"\" if self.use_cache else \", use_cache=False\"\n+        return f\"{self.__class__.__name__}({attr}{cache})\"\n+\n \n class Security(Depends):\n     def __init__(\n\n@@ -0,0 +1,46 @@\n+import pytest\n+from fastapi.params import Body, Cookie, Depends, Header, Param, Path, Query\n+\n+test_data = [\"teststr\", None, ..., 1, []]\n+\n+\n+def get_user():\n+    return {}  # pragma: no cover\n+\n+\n+@pytest.fixture(scope=\"function\", params=test_data)\n+def params(request):\n+    return request.param\n+\n+\n+def test_param_repr(params):\n+    assert repr(Param(params)) == \"Param(\" + str(params) + \")\"\n+\n+\n+def test_path_repr(params):\n+    assert repr(Path(params)) == \"Path(Ellipsis)\"\n+\n+\n+def test_query_repr(params):\n+    assert repr(Query(params)) == \"Query(\" + str(params) + \")\"\n+\n+\n+def test_header_repr(params):\n+    assert repr(Header(params)) == \"Header(\" + str(params) + \")\"\n+\n+\n+def test_cookie_repr(params):\n+    assert repr(Cookie(params)) == \"Cookie(\" + str(params) + \")\"\n+\n+\n+def test_body_repr(params):\n+    assert repr(Body(params)) == \"Body(\" + str(params) + \")\"\n+\n+\n+def test_depends_repr():\n+    assert repr(Depends()) == \"Depends(NoneType)\"\n+    assert repr(Depends(get_user)) == \"Depends(get_user)\"\n+    assert repr(Depends(use_cache=False)) == \"Depends(NoneType, use_cache=False)\"\n+    assert (\n+        repr(Depends(get_user, use_cache=False)) == \"Depends(get_user, use_cache=False)\"\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a071ddf3cd4a8e9cfa89409a2273c5e284bc1e4b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 3 | Files Changed: 5 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 5/2 | Churn Δ: 104 | Churn Cumulative: 6818 | Contributors (this commit): 34 | Commits (past 90d): 16 | Contributors (cumulative): 57 | DMM Complexity: 0.7368421052631579\n\nDIFF:\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI\n+\n+tags_metadata = [\n+    {\n+        \"name\": \"users\",\n+        \"description\": \"Operations with users. The **login** logic is also here.\",\n+    },\n+    {\n+        \"name\": \"items\",\n+        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n+        \"externalDocs\": {\n+            \"description\": \"Items external docs\",\n+            \"url\": \"https://fastapi.tiangolo.com/\",\n+        },\n+    },\n+]\n+\n+app = FastAPI(openapi_tags=tags_metadata)\n+\n+\n+@app.get(\"/users/\", tags=[\"users\"])\n+async def get_users():\n+    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n+\n+\n+@app.get(\"/items/\", tags=[\"items\"])\n+async def get_items():\n+    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n\n@@ -37,6 +37,7 @@ class FastAPI(Starlette):\n         description: str = \"\",\n         version: str = \"0.1.0\",\n         openapi_url: Optional[str] = \"/openapi.json\",\n+        openapi_tags: Optional[List[Dict[str, Any]]] = None,\n         default_response_class: Type[Response] = JSONResponse,\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n@@ -70,6 +71,7 @@ class FastAPI(Starlette):\n         self.description = description\n         self.version = version\n         self.openapi_url = openapi_url\n+        self.openapi_tags = openapi_tags\n         # TODO: remove when discarding the openapi_prefix parameter\n         if openapi_prefix:\n             logger.warning(\n@@ -103,6 +105,7 @@ class FastAPI(Starlette):\n                 description=self.description,\n                 routes=self.routes,\n                 openapi_prefix=openapi_prefix,\n+                tags=self.openapi_tags,\n             )\n         return self.openapi_schema\n \n\n@@ -317,12 +317,13 @@ def get_openapi(\n     openapi_version: str = \"3.0.2\",\n     description: str = None,\n     routes: Sequence[BaseRoute],\n-    openapi_prefix: str = \"\"\n+    openapi_prefix: str = \"\",\n+    tags: Optional[List[Dict[str, Any]]] = None\n ) -> Dict:\n     info = {\"title\": title, \"version\": version}\n     if description:\n         info[\"description\"] = description\n-    output = {\"openapi\": openapi_version, \"info\": info}\n+    output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n     components: Dict[str, Dict] = {}\n     paths: Dict[str, Dict] = {}\n     flat_models = get_flat_models_from_routes(routes)\n@@ -352,4 +353,6 @@ def get_openapi(\n     if components:\n         output[\"components\"] = components\n     output[\"paths\"] = paths\n+    if tags:\n+        output[\"tags\"] = tags\n     return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)\n\n@@ -12,7 +12,6 @@ from fastapi.dependencies.utils import (\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n-from fastapi.logger import logger\n from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import (\n     PYDANTIC_1,\n\n@@ -0,0 +1,65 @@\n+from fastapi.testclient import TestClient\n+\n+from metadata.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"tags\": [\"users\"],\n+                \"summary\": \"Get Users\",\n+                \"operationId\": \"get_users_users__get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"tags\": [\"items\"],\n+                \"summary\": \"Get Items\",\n+                \"operationId\": \"get_items_items__get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        },\n+    },\n+    \"tags\": [\n+        {\n+            \"name\": \"users\",\n+            \"description\": \"Operations with users. The **login** logic is also here.\",\n+        },\n+        {\n+            \"name\": \"items\",\n+            \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n+            \"externalDocs\": {\n+                \"description\": \"Items external docs\",\n+                \"url\": \"https://fastapi.tiangolo.com/\",\n+            },\n+        },\n+    ],\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operations():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b13a4baf32514d7197ca555a563e91ec8422d9d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 3767 | Contributors (this commit): 24 | Commits (past 90d): 9 | Contributors (cumulative): 26 | DMM Complexity: 0.9047619047619048\n\nDIFF:\n@@ -1,5 +1,6 @@\n import asyncio\n import inspect\n+import json\n from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n \n from fastapi import params\n@@ -177,6 +178,8 @@ def get_request_handler(\n                     body_bytes = await request.body()\n                     if body_bytes:\n                         body = await request.json()\n+        except json.JSONDecodeError as e:\n+            raise RequestValidationError([ErrorWrapper(e, (\"body\", e.pos))], body=e.doc)\n         except Exception as e:\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n\n@@ -1,3 +1,5 @@\n+from unittest.mock import patch\n+\n import pytest\n from fastapi.testclient import TestClient\n \n@@ -176,5 +178,24 @@ def test_post_body(path, body, expected_status, expected_response):\n \n def test_post_broken_body():\n     response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"ctx\": {\n+                    \"colno\": 1,\n+                    \"doc\": \"name=Foo&price=50.5\",\n+                    \"lineno\": 1,\n+                    \"msg\": \"Expecting value\",\n+                    \"pos\": 0,\n+                },\n+                \"loc\": [\"body\", 0],\n+                \"msg\": \"Expecting value: line 1 column 1 (char 0)\",\n+                \"type\": \"value_error.jsondecode\",\n+            }\n+        ]\n+    }\n+    with patch(\"json.loads\", side_effect=Exception):\n+        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n         assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"There was an error parsing the body\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7ce756f9ddd6fef6f51af2129f2a9e4c93df7166", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 40 | Churn Cumulative: 1672 | Contributors (this commit): 15 | Commits (past 90d): 6 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -514,13 +514,9 @@ async def solve_dependencies(\n             sub_values,\n             sub_errors,\n             background_tasks,\n-            sub_response,\n+            _,  # the subdependency returns the same response we have\n             sub_dependency_cache,\n         ) = solved_result\n-        sub_response = cast(Response, sub_response)\n-        response.headers.raw.extend(sub_response.headers.raw)\n-        if sub_response.status_code:\n-            response.status_code = sub_response.status_code\n         dependency_cache.update(sub_dependency_cache)\n         if sub_errors:\n             errors.extend(sub_errors)\n\n@@ -0,0 +1,34 @@\n+from fastapi import Depends, FastAPI, Response\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def set_cookie(*, response: Response):\n+    response.set_cookie(\"cookie-name\", \"cookie-value\")\n+    return {}\n+\n+\n+def set_indirect_cookie(*, dep: str = Depends(set_cookie)):\n+    return dep\n+\n+\n+@app.get(\"/directCookie\")\n+def get_direct_cookie(dep: str = Depends(set_cookie)):\n+    return {\"dep\": dep}\n+\n+\n+@app.get(\"/indirectCookie\")\n+def get_indirect_cookie(dep: str = Depends(set_indirect_cookie)):\n+    return {\"dep\": dep}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_cookie_is_set_once():\n+    direct_response = client.get(\"/directCookie\")\n+    indirect_response = client.get(\"/indirectCookie\")\n+    assert (\n+        direct_response.headers[\"set-cookie\"] == indirect_response.headers[\"set-cookie\"]\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fe15620df39dfc26a97005968425f1e967f1daed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ def test_create_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_create_existing_token():\n+def test_create_existing_item():\n     response = client.post(\n         \"/items/\",\n         headers={\"X-Token\": \"coneofsilence\"},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#66cb2666413d5ab2639eabfe4693e752c6264516", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 9 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI\n+from fastapi.responses import ORJSONResponse\n+\n+app = FastAPI(default_response_class=ORJSONResponse)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bd2acbcabbb5577013c2207778e76595fb3aa0e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 599 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -11,6 +11,7 @@ from .oauth2 import (\n     OAuth2AuthorizationCodeBearer,\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n+    OAuth2PasswordRequestFormStrict,\n     SecurityScopes,\n )\n from .open_id_connect_url import OpenIdConnect\n\n@@ -1,7 +1,6 @@\n import pytest\n from fastapi import Depends, FastAPI, Security\n-from fastapi.security import OAuth2\n-from fastapi.security.oauth2 import OAuth2PasswordRequestFormStrict\n+from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n\n@@ -2,8 +2,7 @@ from typing import Optional\n \n import pytest\n from fastapi import Depends, FastAPI, Security\n-from fastapi.security import OAuth2\n-from fastapi.security.oauth2 import OAuth2PasswordRequestFormStrict\n+from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dd9e94cf2160fe289b28662fe7ff793010050482", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 285 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -44,7 +44,9 @@ def get_swagger_ui_html(\n         SwaggerUIBundle.SwaggerUIStandalonePreset\n         ],\n         layout: \"BaseLayout\",\n-        deepLinking: true\n+        deepLinking: true,\n+        showExtensions: true,\n+        showCommonExtensions: true\n     })\"\"\"\n \n     if init_oauth:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#748bedd37ce88ed408bbbe4c0104c977d3d0ec97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -16,6 +16,8 @@ app = FastAPI()\n async def get_model(model_name: ModelName):\n     if model_name == ModelName.alexnet:\n         return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n+\n     if model_name.value == \"lenet\":\n         return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n+\n     return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8fb755703d34b4d2ae30fd8d5d2bdc8d6983939d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 575 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 15 | DMM Complexity: 0.6\n\nDIFF:\n@@ -71,6 +71,8 @@ def jsonable_encoder(\n                 by_alias=by_alias,\n                 skip_defaults=bool(exclude_unset or skip_defaults),\n             )\n+        if \"__root__\" in obj_dict:\n+            obj_dict = obj_dict[\"__root__\"]\n         return jsonable_encoder(\n             obj_dict,\n             exclude_none=exclude_none,\n\n@@ -76,6 +76,10 @@ class ModelWithDefault(BaseModel):\n     bla: str = \"bla\"\n \n \n+class ModelWithRoot(BaseModel):\n+    __root__: str\n+\n+\n @pytest.fixture(\n     name=\"model_with_path\", params=[PurePath, PurePosixPath, PureWindowsPath]\n )\n@@ -158,3 +162,8 @@ def test_encode_model_with_path(model_with_path):\n     else:\n         expected = \"/foo/bar\"\n     assert jsonable_encoder(model_with_path) == {\"path\": expected}\n+\n+\n+def test_encode_root():\n+    model = ModelWithRoot(__root__=\"Foo\")\n+    assert jsonable_encoder(model) == \"Foo\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c6dd627bdd10506be3a6c7f52cc90db7cf60540e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 29 | Churn Cumulative: 6112 | Contributors (this commit): 27 | Commits (past 90d): 11 | Contributors (cumulative): 33 | DMM Complexity: 0.75\n\nDIFF:\n@@ -1,4 +1,5 @@\n import asyncio\n+import enum\n import inspect\n import json\n from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n@@ -296,6 +297,9 @@ class APIRoute(routing.Route):\n         dependency_overrides_provider: Any = None,\n         callbacks: Optional[List[\"APIRoute\"]] = None,\n     ) -> None:\n+        # normalise enums e.g. http.HTTPStatus\n+        if isinstance(status_code, enum.IntEnum):\n+            status_code = int(status_code)\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n\n@@ -1,3 +1,5 @@\n+import http\n+\n from fastapi import FastAPI, Path, Query\n \n app = FastAPI()\n@@ -184,3 +186,8 @@ def get_query_param_required(query=Query(...)):\n @app.get(\"/query/param-required/int\")\n def get_query_param_required_type(query: int = Query(...)):\n     return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/enum-status-code\", status_code=http.HTTPStatus.CREATED)\n+def get_enum_status_code():\n+    return \"foo bar\"\n\n@@ -1078,6 +1078,18 @@ openapi_schema = {\n                 ],\n             }\n         },\n+        \"/enum-status-code\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"201\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"Get Enum Status Code\",\n+                \"operationId\": \"get_enum_status_code_enum_status_code_get\",\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -1149,3 +1161,9 @@ def test_redoc():\n     assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"redoc@next\" in response.text\n+\n+\n+def test_enum_status_code_response():\n+    response = client.get(\"/enum-status-code\")\n+    assert response.status_code == 201, response.text\n+    assert response.json() == \"foo bar\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e4300769ac45c368bcb3a080fdb79890fe413355", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 33 | Files Changed: 2 | Hunks: 27 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 65 | Churn Cumulative: 154 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from fastapi import Cookie, Depends, FastAPI, Header, WebSocket, status\n+from fastapi import Cookie, Depends, FastAPI, Query, WebSocket, status\n from fastapi.responses import HTMLResponse\n \n app = FastAPI()\n@@ -13,8 +13,9 @@ html = \"\"\"\n         <h1>WebSocket Chat</h1>\n         <form action=\"\" onsubmit=\"sendMessage(event)\">\n             <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n+            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n             <button onclick=\"connect(event)\">Connect</button>\n-            <br>\n+            <hr>\n             <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n             <button>Send</button>\n         </form>\n@@ -23,8 +24,9 @@ html = \"\"\"\n         <script>\n         var ws = null;\n             function connect(event) {\n-                var input = document.getElementById(\"itemId\")\n-                ws = new WebSocket(\"ws://localhost:8000/items/\" + input.value + \"/ws\");\n+                var itemId = document.getElementById(\"itemId\")\n+                var token = document.getElementById(\"token\")\n+                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                 ws.onmessage = function(event) {\n                     var messages = document.getElementById('messages')\n                     var message = document.createElement('li')\n@@ -32,6 +34,7 @@ html = \"\"\"\n                     message.appendChild(content)\n                     messages.appendChild(message)\n                 };\n+                event.preventDefault()\n             }\n             function sendMessage(event) {\n                 var input = document.getElementById(\"messageText\")\n@@ -50,26 +53,26 @@ async def get():\n     return HTMLResponse(html)\n \n \n-async def get_cookie_or_client(\n-    websocket: WebSocket, session: str = Cookie(None), x_client: str = Header(None)\n+async def get_cookie_or_token(\n+    websocket: WebSocket, session: str = Cookie(None), token: str = Query(None)\n ):\n-    if session is None and x_client is None:\n+    if session is None and token is None:\n         await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n-    return session or x_client\n+    return session or token\n \n \n @app.websocket(\"/items/{item_id}/ws\")\n async def websocket_endpoint(\n     websocket: WebSocket,\n-    item_id: int,\n-    q: str = None,\n-    cookie_or_client: str = Depends(get_cookie_or_client),\n+    item_id: str,\n+    q: int = None,\n+    cookie_or_token: str = Depends(get_cookie_or_token),\n ):\n     await websocket.accept()\n     while True:\n         data = await websocket.receive_text()\n         await websocket.send_text(\n-            f\"Session Cookie or X-Client Header value is: {cookie_or_client}\"\n+            f\"Session cookie or query token value is: {cookie_or_token}\"\n         )\n         if q is not None:\n             await websocket.send_text(f\"Query parameter q is: {q}\")\n\n@@ -15,69 +15,65 @@ def test_main():\n def test_websocket_with_cookie():\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\n-            \"/items/1/ws\", cookies={\"session\": \"fakesession\"}\n+            \"/items/foo/ws\", cookies={\"session\": \"fakesession\"}\n         ) as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: fakesession\"\n+            assert data == \"Session cookie or query token value is: fakesession\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 1\"\n+            assert data == f\"Message text was: {message}, for item ID: foo\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: fakesession\"\n+            assert data == \"Session cookie or query token value is: fakesession\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 1\"\n+            assert data == f\"Message text was: {message}, for item ID: foo\"\n \n \n def test_websocket_with_header():\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\n-            \"/items/2/ws\", headers={\"X-Client\": \"xmen\"}\n-        ) as websocket:\n+        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 2\"\n+            assert data == f\"Message text was: {message}, for item ID: bar\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 2\"\n+            assert data == f\"Message text was: {message}, for item ID: bar\"\n \n \n def test_websocket_with_header_and_query():\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\n-            \"/items/2/ws?q=baz\", headers={\"X-Client\": \"xmen\"}\n-        ) as websocket:\n+        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == \"Query parameter q is: baz\"\n+            assert data == \"Query parameter q is: 3\"\n             data = websocket.receive_text()\n             assert data == f\"Message text was: {message}, for item ID: 2\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == \"Query parameter q is: baz\"\n+            assert data == \"Query parameter q is: 3\"\n             data = websocket.receive_text()\n             assert data == f\"Message text was: {message}, for item ID: 2\"\n \n \n def test_websocket_no_credentials():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/2/ws\")\n+        client.websocket_connect(\"/items/foo/ws\")\n \n \n def test_websocket_invalid_data():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws\", headers={\"X-Client\": \"xmen\"})\n+        client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#34c857b7cb493fa41f296c001234bc6b2ed6a083", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 249 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.56.1\"\n+__version__ = \"0.57.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b591de2ace297c1da537e50f64b4066f96553247", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 9 | Methods Changed: 11 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 74 | Churn Cumulative: 3862 | Contributors (this commit): 24 | Commits (past 90d): 12 | Contributors (cumulative): 41 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -38,6 +38,7 @@ class FastAPI(Starlette):\n         version: str = \"0.1.0\",\n         openapi_url: Optional[str] = \"/openapi.json\",\n         openapi_tags: Optional[List[Dict[str, Any]]] = None,\n+        servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n         default_response_class: Type[Response] = JSONResponse,\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n@@ -70,6 +71,7 @@ class FastAPI(Starlette):\n         self.title = title\n         self.description = description\n         self.version = version\n+        self.servers = servers\n         self.openapi_url = openapi_url\n         self.openapi_tags = openapi_tags\n         # TODO: remove when discarding the openapi_prefix parameter\n@@ -106,6 +108,7 @@ class FastAPI(Starlette):\n                 routes=self.routes,\n                 openapi_prefix=openapi_prefix,\n                 tags=self.openapi_tags,\n+                servers=self.servers,\n             )\n         return self.openapi_schema\n \n\n@@ -63,7 +63,7 @@ class ServerVariable(BaseModel):\n \n \n class Server(BaseModel):\n-    url: AnyUrl\n+    url: Union[AnyUrl, str]\n     description: Optional[str] = None\n     variables: Optional[Dict[str, ServerVariable]] = None\n \n\n@@ -86,7 +86,7 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n def get_openapi_operation_parameters(\n     *,\n     all_route_params: Sequence[ModelField],\n-    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n@@ -112,7 +112,7 @@ def get_openapi_operation_parameters(\n def get_openapi_operation_request_body(\n     *,\n     body_field: Optional[ModelField],\n-    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> Optional[Dict]:\n     if not body_field:\n         return None\n@@ -318,12 +318,15 @@ def get_openapi(\n     description: str = None,\n     routes: Sequence[BaseRoute],\n     openapi_prefix: str = \"\",\n-    tags: Optional[List[Dict[str, Any]]] = None\n+    tags: Optional[List[Dict[str, Any]]] = None,\n+    servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n ) -> Dict:\n     info = {\"title\": title, \"version\": version}\n     if description:\n         info[\"description\"] = description\n     output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n+    if servers:\n+        output[\"servers\"] = servers\n     components: Dict[str, Dict] = {}\n     paths: Dict[str, Dict] = {}\n     flat_models = get_flat_models_from_routes(routes)\n\n@@ -0,0 +1,60 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI(\n+    servers=[\n+        {\"url\": \"/\", \"description\": \"Default, relative server\"},\n+        {\n+            \"url\": \"http://staging.localhost.tiangolo.com:8000\",\n+            \"description\": \"Staging but actually localhost still\",\n+        },\n+        {\"url\": \"https://prod.example.com\"},\n+    ]\n+)\n+\n+\n+@app.get(\"/foo\")\n+def foo():\n+    return {\"message\": \"Hello World\"}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"servers\": [\n+        {\"url\": \"/\", \"description\": \"Default, relative server\"},\n+        {\n+            \"url\": \"http://staging.localhost.tiangolo.com:8000\",\n+            \"description\": \"Staging but actually localhost still\",\n+        },\n+        {\"url\": \"https://prod.example.com\"},\n+    ],\n+    \"paths\": {\n+        \"/foo\": {\n+            \"get\": {\n+                \"summary\": \"Foo\",\n+                \"operationId\": \"foo_foo_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_servers():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_app():\n+    response = client.get(\"/foo\")\n+    assert response.status_code == 200, response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#530fc8ff3f3c788473304b15f600b75ac553b978", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 622 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -112,7 +112,7 @@ class SchemaBase(BaseModel):\n     allOf: Optional[List[Any]] = None\n     oneOf: Optional[List[Any]] = None\n     anyOf: Optional[List[Any]] = None\n-    not_: Optional[List[Any]] = Field(None, alias=\"not\")\n+    not_: Optional[Any] = Field(None, alias=\"not\")\n     items: Optional[Any] = None\n     properties: Optional[Dict[str, Any]] = None\n     additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n@@ -133,7 +133,7 @@ class Schema(SchemaBase):\n     allOf: Optional[List[SchemaBase]] = None\n     oneOf: Optional[List[SchemaBase]] = None\n     anyOf: Optional[List[SchemaBase]] = None\n-    not_: Optional[List[SchemaBase]] = Field(None, alias=\"not\")\n+    not_: Optional[SchemaBase] = Field(None, alias=\"not\")\n     items: Optional[SchemaBase] = None\n     properties: Optional[Dict[str, SchemaBase]] = None\n     additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7dd881334d6bdd582a2529b0ed5d05b0484f969a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 8 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 66 | Churn Cumulative: 1704 | Contributors (this commit): 16 | Commits (past 90d): 7 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -500,6 +500,7 @@ async def solve_dependencies(\n                 name=sub_dependant.name,\n                 security_scopes=sub_dependant.security_scopes,\n             )\n+            use_sub_dependant.security_scopes = sub_dependant.security_scopes\n \n         solved_result = await solve_dependencies(\n             request=request,\n\n@@ -0,0 +1,65 @@\n+from typing import List, Tuple\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import SecurityScopes\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def get_user(required_scopes: SecurityScopes):\n+    return \"john\", required_scopes.scopes\n+\n+\n+def get_user_override(required_scopes: SecurityScopes):\n+    return \"alice\", required_scopes.scopes\n+\n+\n+def get_data():\n+    return [1, 2, 3]\n+\n+\n+def get_data_override():\n+    return [3, 4, 5]\n+\n+\n+@app.get(\"/user\")\n+def read_user(\n+    user_data: Tuple[str, List[str]] = Security(get_user, scopes=[\"foo\", \"bar\"]),\n+    data: List[int] = Depends(get_data),\n+):\n+    return {\"user\": user_data[0], \"scopes\": user_data[1], \"data\": data}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_normal():\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+\n+\n+def test_override_data():\n+    app.dependency_overrides[get_data] = get_data_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [3, 4, 5],\n+    }\n+    app.dependency_overrides = {}\n+\n+\n+def test_override_security():\n+    app.dependency_overrides[get_user] = get_user_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"alice\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+    app.dependency_overrides = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#12bc9285f71c0c0f8eaf343764acd1d6f85c4317", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 24 | Files Changed: 6 | Hunks: 22 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 54 | Churn Cumulative: 2373 | Contributors (this commit): 19 | Commits (past 90d): 17 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -642,9 +642,17 @@ async def request_body_to_args(\n         field = required_params[0]\n         field_info = get_field_info(field)\n         embed = getattr(field_info, \"embed\", None)\n-        if len(required_params) == 1 and not embed:\n+        field_alias_omitted = len(required_params) == 1 and not embed\n+        if field_alias_omitted:\n             received_body = {field.alias: received_body}\n+\n         for field in required_params:\n+            loc: Tuple[str, ...]\n+            if field_alias_omitted:\n+                loc = (\"body\",)\n+            else:\n+                loc = (\"body\", field.alias)\n+\n             value: Any = None\n             if received_body is not None:\n                 if (\n@@ -655,7 +663,7 @@ async def request_body_to_args(\n                     try:\n                         value = received_body.get(field.alias)\n                     except AttributeError:\n-                        errors.append(get_missing_field_error(field.alias))\n+                        errors.append(get_missing_field_error(loc))\n                         continue\n             if (\n                 value is None\n@@ -667,7 +675,7 @@ async def request_body_to_args(\n                 )\n             ):\n                 if field.required:\n-                    errors.append(get_missing_field_error(field.alias))\n+                    errors.append(get_missing_field_error(loc))\n                 else:\n                     values[field.name] = deepcopy(field.default)\n                 continue\n@@ -686,7 +694,9 @@ async def request_body_to_args(\n                 awaitables = [sub_value.read() for sub_value in value]\n                 contents = await asyncio.gather(*awaitables)\n                 value = sequence_shape_to_type[field.shape](contents)\n-            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n+\n+            v_, errors_ = field.validate(value, values, loc=loc)\n+\n             if isinstance(errors_, ErrorWrapper):\n                 errors.append(errors_)\n             elif isinstance(errors_, list):\n@@ -696,12 +706,12 @@ async def request_body_to_args(\n     return values, errors\n \n \n-def get_missing_field_error(field_alias: str) -> ErrorWrapper:\n+def get_missing_field_error(loc: Tuple[str, ...]) -> ErrorWrapper:\n     if PYDANTIC_1:\n-        missing_field_error = ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n+        missing_field_error = ErrorWrapper(MissingError(), loc=loc)\n     else:  # pragma: no cover\n         missing_field_error = ErrorWrapper(  # type: ignore\n-            MissingError(), loc=(\"body\", field_alias), config=BaseConfig,\n+            MissingError(), loc=loc, config=BaseConfig,\n         )\n     return missing_field_error\n \n\n@@ -104,7 +104,7 @@ single_error = {\n     \"detail\": [\n         {\n             \"ctx\": {\"limit_value\": 0.0},\n-            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"loc\": [\"body\", 0, \"age\"],\n             \"msg\": \"ensure this value is greater than 0\",\n             \"type\": \"value_error.number.not_gt\",\n         }\n@@ -114,22 +114,22 @@ single_error = {\n multiple_errors = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", 0, \"name\"],\n+            \"loc\": [\"body\", 0, \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"loc\": [\"body\", 0, \"age\"],\n             \"msg\": \"value is not a valid decimal\",\n             \"type\": \"type_error.decimal\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 1, \"name\"],\n+            \"loc\": [\"body\", 1, \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 1, \"age\"],\n+            \"loc\": [\"body\", 1, \"age\"],\n             \"msg\": \"value is not a valid decimal\",\n             \"type\": \"type_error.decimal\",\n         },\n\n@@ -94,7 +94,7 @@ def test_openapi_schema():\n price_missing = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         }\n@@ -104,7 +104,7 @@ price_missing = {\n price_not_float = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"value is not a valid float\",\n             \"type\": \"type_error.float\",\n         }\n@@ -114,12 +114,12 @@ price_not_float = {\n name_price_missing = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"name\"],\n+            \"loc\": [\"body\", \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n@@ -128,11 +128,7 @@ name_price_missing = {\n \n body_missing = {\n     \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"item\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n+        {\"loc\": [\"body\"], \"msg\": \"field required\", \"type\": \"value_error.missing\",}\n     ]\n }\n \n\n@@ -95,7 +95,7 @@ def test_post_invalid_body():\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"loc\": [\"body\", \"weights\", \"__key__\"],\n+                \"loc\": [\"body\", \"__key__\"],\n                 \"msg\": \"value is not a valid integer\",\n                 \"type\": \"type_error.integer\",\n             }\n\n@@ -18,7 +18,7 @@ def test_exception_handler_body_access():\n             \"body\": '{\"numbers\": [1, 2, 3]}',\n             \"errors\": [\n                 {\n-                    \"loc\": [\"body\", \"numbers\"],\n+                    \"loc\": [\"body\"],\n                     \"msg\": \"value is not a valid list\",\n                     \"type\": \"type_error.list\",\n                 }\n\n@@ -92,7 +92,7 @@ def test_post_validation_error():\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"loc\": [\"body\", \"item\", \"size\"],\n+                \"loc\": [\"body\", \"size\"],\n                 \"msg\": \"value is not a valid integer\",\n                 \"type\": \"type_error.integer\",\n             }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
