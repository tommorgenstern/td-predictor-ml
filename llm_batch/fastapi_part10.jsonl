{"custom_id": "fastapi#252188c6868942071aa9959fe505aef2ee90896f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 26 | Files Changed: 4 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 28 | Churn Cumulative: 1214 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n\n@@ -1,13 +0,0 @@\n-from fastapi import APIRouter\n-\n-router = APIRouter()\n-\n-\n-@router.get(\"/dog\")\n-def get_a_dog():\n-    return \"Woof\"\n-\n-\n-@router.get(\"/cat\")\n-def get_a_cat():\n-    return \"Meow\"\n\n@@ -1,13 +0,0 @@\n-from fastapi import APIRouter\n-\n-router = APIRouter()\n-\n-\n-@router.get(\"/dog\")\n-def get_b_dog():\n-    return \"B Woof\"\n-\n-\n-@router.get(\"/cat\")\n-def get_b_cat():\n-    return \"B Meow\"\n\n@@ -1147,10 +1147,12 @@ def test_get_path(path, expected_status, expected_response):\n def test_swagger_ui():\n     response = client.get(\"/docs\")\n     assert response.status_code == 200\n+    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"swagger-ui-dist\" in response.text\n \n \n def test_redoc():\n     response = client.get(\"/redoc\")\n     assert response.status_code == 200\n+    assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"redoc@next\" in response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#613c3f3e954e2cd93b6dd67c587fc8ef4540ff75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 284 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 12 | Complexity Δ (Sum/Max): 12/11 | Churn Δ: 284 | Churn Cumulative: 384 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,278 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+\n+\n+@app.delete(\"/items/{item_id}\")\n+def delete_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.head(\"/items/{item_id}\")\n+def head_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.options(\"/items/{item_id}\")\n+def options_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.patch(\"/items/{item_id}\")\n+def patch_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.trace(\"/items/{item_id}\")\n+def trace_item(item_id: str):\n+    return JSONResponse(media_type=\"message/http\")\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"delete\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Delete Item Delete\",\n+                \"operationId\": \"delete_item_items__item_id__delete\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"options\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Options Item Options\",\n+                \"operationId\": \"options_item_items__item_id__options\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"head\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Head Item Head\",\n+                \"operationId\": \"head_item_items__item_id__head\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"patch\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Patch Item Patch\",\n+                \"operationId\": \"patch_item_items__item_id__patch\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"trace\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Trace Item Trace\",\n+                \"operationId\": \"trace_item_items__item_id__trace\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_delete():\n+    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_head():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_options():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_patch():\n+    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_trace():\n+    response = client.request(\"trace\", \"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"content-type\"] == \"message/http\"\n\n@@ -84,6 +84,12 @@ openapi_schema = {\n }\n \n \n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n     [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#57ff677027eec19c0d659e050675e7a320123637", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 51 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 51 | Churn Cumulative: 51 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,51 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel, ValidationError\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/invalid\", response_model=Item)\n+def get_invalid():\n+    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+\n+\n+@app.get(\"/items/innerinvalid\", response_model=Item)\n+def get_innerinvalid():\n+    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+\n+\n+@app.get(\"/items/invalidlist\", response_model=List[Item])\n+def get_invalidlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": \"bar\"},\n+        {\"name\": \"baz\", \"price\": \"baz\"},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalid\")\n+\n+\n+def test_double_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/innerinvalid\")\n+\n+\n+def test_invalid_list():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidlist\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4c51bb6714845c2013a674f8b78ae2161cfbadcf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 360 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 15 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 360 | Churn Cumulative: 360 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,360 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+\n+\n+@app.api_route(\"/items/{item_id}\", methods=[\"GET\"])\n+def get_items(item_id: str):\n+    return {\"item_id\": item_id}\n+\n+\n+def get_not_decorated(item_id: str):\n+    return {\"item_id\": item_id}\n+\n+\n+app.add_api_route(\"/items-not-decorated/{item_id}\", get_not_decorated)\n+\n+\n+@app.delete(\"/items/{item_id}\")\n+def delete_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.head(\"/items/{item_id}\")\n+def head_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.options(\"/items/{item_id}\")\n+def options_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.patch(\"/items/{item_id}\")\n+def patch_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.trace(\"/items/{item_id}\")\n+def trace_item(item_id: str):\n+    return JSONResponse(media_type=\"message/http\")\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Get Items Get\",\n+                \"operationId\": \"get_items_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"delete\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Delete Item Delete\",\n+                \"operationId\": \"delete_item_items__item_id__delete\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"options\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Options Item Options\",\n+                \"operationId\": \"options_item_items__item_id__options\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"head\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Head Item Head\",\n+                \"operationId\": \"head_item_items__item_id__head\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"patch\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Patch Item Patch\",\n+                \"operationId\": \"patch_item_items__item_id__patch\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"trace\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Trace Item Trace\",\n+                \"operationId\": \"trace_item_items__item_id__trace\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+        },\n+        \"/items-not-decorated/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Get Not Decorated Get\",\n+                \"operationId\": \"get_not_decorated_items-not-decorated__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_api_route():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_get_api_route_not_decorated():\n+    response = client.get(\"/items-not-decorated/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_delete():\n+    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_head():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_options():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_patch():\n+    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n+\n+\n+def test_trace():\n+    response = client.request(\"trace\", \"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"content-type\"] == \"message/http\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6b9931f882534bb2967a3003c8d2c04e70013dd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 0 | Files Changed: 7 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 120 | Churn Cumulative: 120 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n\n\n\n\n@@ -0,0 +1,34 @@\n+from starlette.testclient import TestClient\n+\n+from application_configuration.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\n+        \"title\": \"My Super Project\",\n+        \"version\": \"2.5.0\",\n+        \"description\": \"This is a very fancy project, with auto docs for the API and everything\",\n+    },\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n\n@@ -0,0 +1,86 @@\n+from starlette.testclient import TestClient\n+\n+from query_params_str_validations.tutorial010 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"description\": \"Query string for the items to search in the database that have a good match\",\n+                        \"required\": False,\n+                        \"deprecated\": True,\n+                        \"schema\": {\n+                            \"title\": \"Query string\",\n+                            \"maxLength\": 50,\n+                            \"minLength\": 3,\n+                            \"pattern\": \"^fixedquery$\",\n+                            \"type\": \"string\",\n+                            \"description\": \"Query string for the items to search in the database that have a good match\",\n+                        },\n+                        \"name\": \"item-query\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b79c13baedd2388106c29f505918c885e2880f87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 75 | Lines Deleted: 75 | Files Changed: 5 | Hunks: 13 | Methods Changed: 20 | Complexity Δ (Sum/Max): 17/4 | Churn Δ: 150 | Churn Cumulative: 150 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,4 @@\n from fastapi import Depends, FastAPI\n-from pydantic import BaseModel\n \n app = FastAPI()\n \n@@ -7,18 +6,15 @@ app = FastAPI()\n fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n \n \n-class CommonQueryParams(BaseModel):\n-    q: str = None\n-    skip: int = None\n-    limit: int = None\n-\n-\n-async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n-    return CommonQueryParams(q=q, skip=skip, limit=limit)\n+class CommonQueryParams:\n+    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n \n \n @app.get(\"/items/\")\n-async def read_items(commons: CommonQueryParams = Depends(common_parameters)):\n+async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n     response = {}\n     if commons.q:\n         response.update({\"q\": commons.q})\n\n@@ -1,34 +1,23 @@\n-from typing import List\n-\n-from fastapi import Cookie, Depends, FastAPI\n-from pydantic import BaseModel\n+from fastapi import Depends, FastAPI\n \n app = FastAPI()\n \n \n-class InterestsTracker(BaseModel):\n-    track_code: str\n-    interests: List[str]\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n \n \n-fake_tracked_users_db = {\n-    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n-    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n-    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n-}\n+class CommonQueryParams:\n+    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n \n \n-async def get_tracked_interests(track_code: str = Cookie(None)):\n-    if track_code in fake_tracked_users_db:\n-        track_dict = fake_tracked_users_db[track_code]\n-        track = InterestsTracker(**track_dict)\n-        return track\n-    return None\n-\n-\n-@app.get(\"/interests/\")\n-async def read_interests(\n-    tracked_interests: InterestsTracker = Depends(get_tracked_interests)\n-):\n-    response = {\"interests\": tracked_interests.interests}\n+@app.get(\"/items/\")\n+async def read_items(commons=Depends(CommonQueryParams)):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.limit]\n+    response.update({\"items\": items})\n     return response\n\n@@ -1,49 +1,23 @@\n-from random import choice\n-from typing import List\n-\n-from fastapi import Cookie, Depends, FastAPI\n-from pydantic import BaseModel\n+from fastapi import Depends, FastAPI\n \n app = FastAPI()\n \n \n-class InterestsTracker(BaseModel):\n-    track_code: str\n-    interests: List[str]\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n \n \n-fake_tracked_users_db = {\n-    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n-    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n-    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n-}\n+class CommonQueryParams:\n+    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n \n \n-async def get_tracked_interests(track_code: str = Cookie(None)):\n-    if track_code in fake_tracked_users_db:\n-        track_dict = fake_tracked_users_db[track_code]\n-        track = InterestsTracker(**track_dict)\n-        return track\n-    return None\n-\n-\n-class ComplexTracker:\n-    def __init__(self, tracker: InterestsTracker = Depends(get_tracked_interests)):\n-        self.tracker = tracker\n-\n-    def random_interest(self):\n-        \"\"\"\n-        Get a random interest from the tracked ones for the current user.\n-        If the user doesn't have tracked interests, return a random one from the ones available.\n-        \"\"\"\n-        if self.tracker.interests:\n-            return choice(self.tracker.interests)\n-        return choice(\n-            [\"sports\", \"movies\", \"food\", \"shows\", \"gaming\", \"virtual reality\"]\n-        )\n-\n-\n-@app.get(\"/suggested-category\")\n-async def read_suggested_category(tracker: ComplexTracker = Depends(None)):\n-    response = {\"category\": tracker.random_interest()}\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParams = Depends()):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.limit]\n+    response.update({\"items\": items})\n     return response\n\n@@ -0,0 +1,20 @@\n+from fastapi import Cookie, Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+def query_extractor(q: str = None):\n+    return q\n+\n+\n+def query_or_cookie_extractor(\n+    q: str = Depends(query_extractor), last_query: str = Cookie(None)\n+):\n+    if not q:\n+        return last_query\n+    return q\n+\n+\n+@app.get(\"/items/\")\n+async def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n+    return {\"q_or_cookie\": query_or_default}\n\n@@ -0,0 +1,21 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+class FixedContentQueryChecker:\n+    def __init__(self, fixed_content: str):\n+        self.fixed_content = fixed_content\n+\n+    def __call__(self, q: str = \"\"):\n+        if q:\n+            return self.fixed_content in q\n+        return False\n+\n+\n+checker = FixedContentQueryChecker(\"bar\")\n+\n+\n+@app.get(\"/query-checker/\")\n+async def read_query_check(fixed_content_included: bool = Depends(checker)):\n+    return {\"fixed_content_in_query\": fixed_content_included}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#855daa2e5399a328eb3482d694e242bd99916c0f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 12/12 | Churn Δ: 27 | Churn Cumulative: 27 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,3 @@\n-from typing import Optional\n-\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from pydantic import BaseModel\n@@ -10,7 +8,8 @@ fake_users_db = {\n         \"username\": \"johndoe\",\n         \"full_name\": \"John Doe\",\n         \"email\": \"johndoe@example.com\",\n-        \"password_hash\": \"fakehashedsecret\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n     }\n }\n \n@@ -26,9 +25,9 @@ oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\")\n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: str = None\n+    full_name: str = None\n+    disabled: bool = None\n \n \n class UserInDB(User):\n@@ -51,26 +50,28 @@ def fake_decode_token(token):\n async def get_current_user(token: str = Security(oauth2_scheme)):\n     user = fake_decode_token(token)\n     if not user:\n-        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+        raise HTTPException(\n+            status_code=400, detail=\"Invalid authentication credentials\"\n+        )\n     return user\n \n \n async def get_current_active_user(current_user: User = Depends(get_current_user)):\n-    if not current_user.disabled:\n+    if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n     return current_user\n \n \n @app.post(\"/token\")\n-async def login(form_data: OAuth2PasswordRequestForm):\n+async def login(form_data: OAuth2PasswordRequestForm = Depends()):\n     data = form_data.parse()\n-    user_dict = fake_users_db[data.username]\n+    user_dict = fake_users_db.get(data.username)\n+    if not user_dict:\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n     user = UserInDB(**user_dict)\n-    if not user:\n-        raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n     hashed_password = fake_hash_password(data.password)\n     if not hashed_password == user.hashed_password:\n-        raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n \n     return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cfb65d0e15899f381474686464539c83c5511023", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 29 | Churn Cumulative: 231 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n from typing import List, Optional\n \n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n+from fastapi.params import Form\n from fastapi.security.base import SecurityBase\n from pydantic import BaseModel, Schema\n from starlette.exceptions import HTTPException\n@@ -18,12 +19,12 @@ class OAuth2PasswordRequestData(BaseModel):\n     client_secret: Optional[str] = None\n \n \n-class OAuth2PasswordRequestForm(BaseModel):\n+class OAuth2PasswordRequestForm:\n     \"\"\"\n-    This is not a \"Security\" model. Use it as request Body. As in:\n+    This is a dependency class, use it like:\n \n         @app.post(\"/login\")\n-        def login(form_data: Oauth2PasswordRequestForm):\n+        def login(form_data: Oauth2PasswordRequestForm = Depends()):\n             data = form_data.parse()\n             print(data.username)\n             print(data.password)\n@@ -54,13 +55,21 @@ class OAuth2PasswordRequestForm(BaseModel):\n     It has the method parse() that returns a model with all the same data and the scopes extracted as a list of strings.\n     \"\"\"\n \n-    grant_type: str = Schema(None, regex=\"password\")\n-    username: str\n-    password: str\n-    scope: str = \"\"\n-    # Client ID and secret might come from headers\n-    client_id: Optional[str] = None\n-    client_secret: Optional[str] = None\n+    def __init__(\n+        self,\n+        grant_type: str = Form(None, regex=\"password\"),\n+        username: str = Form(...),\n+        password: str = Form(...),\n+        scope: str = Form(\"\"),\n+        client_id: Optional[str] = Form(None),\n+        client_secret: Optional[str] = Form(None),\n+    ):\n+        self.grant_type = grant_type\n+        self.username = username\n+        self.password = password\n+        self.scope = scope\n+        self.client_id = client_id\n+        self.client_secret = client_secret\n \n     def parse(self) -> OAuth2PasswordRequestData:\n         return OAuth2PasswordRequestData(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#58848be2deb83036ed9e1ce98ea8fd01ea0b49f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 118 | Lines Deleted: 528 | Files Changed: 3 | Hunks: 3 | Methods Changed: 42 | Complexity Δ (Sum/Max): -26/9 | Churn Δ: 646 | Churn Cumulative: 1574 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -0,0 +1,118 @@\n+from fastapi import (\n+    Body,\n+    Cookie,\n+    Depends,\n+    FastAPI,\n+    File,\n+    Form,\n+    Header,\n+    Path,\n+    Query,\n+    Security,\n+)\n+from fastapi.security import (\n+    HTTPBasic,\n+    OAuth2,\n+    OAuth2PasswordBearer,\n+    OAuth2PasswordRequestForm,\n+)\n+from pydantic import BaseModel\n+from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n+from starlette.status import HTTP_202_ACCEPTED\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/security\")\n+def get_security(sec=Security(HTTPBasic())):\n+    return sec\n+\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"/token\",\n+            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n+        }\n+    }\n+)\n+\n+\n+@app.get(\"/security/oauth2\")\n+def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n+    return sec\n+\n+\n+@app.post(\"/token\")\n+def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n+    data = request_data.parse()\n+    access_token = data.username + \":\" + data.password\n+    return {\"access_token\": access_token}\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+    is_offer: bool\n+\n+\n+class FakeDB:\n+    def __init__(self):\n+        self.data = {\n+            \"johndoe\": {\n+                \"username\": \"johndoe\",\n+                \"password\": \"shouldbehashed\",\n+                \"fist_name\": \"John\",\n+                \"last_name\": \"Doe\",\n+            }\n+        }\n+\n+\n+class DBConnectionManager:\n+    def __init__(self):\n+        self.db = FakeDB()\n+\n+    def __call__(self):\n+        return self.db\n+\n+\n+connection_manager = DBConnectionManager()\n+\n+\n+class TokenUserData(BaseModel):\n+    username: str\n+    password: str\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    password: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+def require_token(\n+    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n+):\n+    raw_token = token.replace(\"Bearer \", \"\")\n+    # Never do this plaintext password usage in production\n+    username, password = raw_token.split(\":\")\n+    return TokenUserData(username=username, password=password)\n+\n+\n+def require_user(\n+    db: FakeDB = Depends(connection_manager),\n+    user_data: TokenUserData = Depends(require_token),\n+):\n+    return db.data[user_data.username]\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+@app.get(\"/dependency\", response_model=UserOut)\n+def get_dependency(user: UserInDB = Depends(require_user)):\n+    return user\n\n@@ -1,250 +0,0 @@\n-from fastapi import (\n-    Body,\n-    Cookie,\n-    Depends,\n-    FastAPI,\n-    File,\n-    Form,\n-    Header,\n-    Path,\n-    Query,\n-    Security,\n-)\n-from fastapi.security import (\n-    HTTPBasic,\n-    OAuth2,\n-    OAuth2PasswordBearer,\n-    OAuth2PasswordRequestForm,\n-)\n-from pydantic import BaseModel\n-from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n-from starlette.status import HTTP_202_ACCEPTED\n-\n-from .endpoints.a import router as router_a\n-from .endpoints.b import router as router_b\n-\n-app = FastAPI()\n-\n-\n-app.include_router(router_a)\n-app.include_router(router_b, prefix=\"/b\")\n-\n-\n-@app.get(\"/cookie\")\n-def get_cookie(coo=Cookie(None)):\n-    return coo\n-\n-\n-@app.get(\"/header\")\n-def get_header(head_name=Header(None)):\n-    return head_name\n-\n-\n-@app.get(\"/header_under\")\n-def get_header(head_name=Header(None, convert_underscores=False)):\n-    return head_name\n-\n-\n-@app.get(\"/security\")\n-def get_security(sec=Security(HTTPBasic())):\n-    return sec\n-\n-\n-reusable_oauth2 = OAuth2(\n-    flows={\n-        \"password\": {\n-            \"tokenUrl\": \"/token\",\n-            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n-        }\n-    }\n-)\n-\n-\n-@app.get(\"/security/oauth2\")\n-def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n-    return sec\n-\n-\n-@app.post(\"/token\")\n-def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n-    data = request_data.parse()\n-    access_token = data.username + \":\" + data.password\n-    return {\"access_token\": access_token}\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    price: float\n-    is_offer: bool\n-\n-\n-@app.put(\"/items/{item_id}\")\n-def put_item(item_id: str, item: Item):\n-    return item\n-\n-\n-@app.post(\"/items/\")\n-def post_item(item: Item):\n-    return item\n-\n-\n-@app.post(\"/items-all-params/{item_id}\")\n-def post_items_all_params(\n-    item_id: str = Path(...),\n-    body: Item = Body(...),\n-    query_a: int = Query(None),\n-    query_b=Query(None),\n-    coo: str = Cookie(None),\n-    x_head: int = Header(None),\n-    x_under: str = Header(None, convert_underscores=False),\n-):\n-    return {\n-        \"item_id\": item_id,\n-        \"body\": body,\n-        \"query_a\": query_a,\n-        \"query_b\": query_b,\n-        \"coo\": coo,\n-        \"x_head\": x_head,\n-        \"x_under\": x_under,\n-    }\n-\n-\n-@app.post(\"/items-all-params-defaults/{item_id}\")\n-def post_items_all_params_default(\n-    item_id: str,\n-    body_item_a: Item,\n-    body_item_b: Item,\n-    query_a: int,\n-    query_b: int,\n-    coo: str = Cookie(None),\n-    x_head: int = Header(None),\n-    x_under: str = Header(None, convert_underscores=False),\n-):\n-    return {\n-        \"item_id\": item_id,\n-        \"body_item_a\": body_item_a,\n-        \"body_item_b\": body_item_b,\n-        \"query_a\": query_a,\n-        \"query_b\": query_b,\n-        \"coo\": coo,\n-        \"x_head\": x_head,\n-        \"x_under\": x_under,\n-    }\n-\n-\n-@app.delete(\"/items/{item_id}\")\n-def delete_item(item_id: str):\n-    return item_id\n-\n-\n-@app.options(\"/options/\")\n-def options():\n-    return JSONResponse(headers={\"x-fastapi\": \"fast\"})\n-\n-\n-@app.head(\"/head/\")\n-def head():\n-    return {\"not sent\": \"nope\"}\n-\n-\n-@app.patch(\"/patch/{user_id}\")\n-def patch(user_id: str, increment: float):\n-    return {\"user_id\": user_id, \"total\": 5 + increment}\n-\n-\n-@app.trace(\"/trace/\")\n-def trace():\n-    return PlainTextResponse(media_type=\"message/http\")\n-\n-\n-@app.get(\"/model\", response_model=Item, status_code=HTTP_202_ACCEPTED)\n-def model():\n-    return {\"name\": \"Foo\", \"price\": \"5.0\", \"password\": \"not sent\"}\n-\n-\n-@app.get(\n-    \"/metadata\",\n-    tags=[\"tag1\", \"tag2\"],\n-    summary=\"The summary\",\n-    description=\"The description\",\n-    response_description=\"Response description\",\n-    deprecated=True,\n-    operation_id=\"a_very_long_and_strange_operation_id\",\n-)\n-def get_meta():\n-    return \"Foo\"\n-\n-\n-@app.get(\"/html\", content_type=HTMLResponse)\n-def get_html():\n-    return \"\"\"\n-    <html>\n-    <body>\n-    <h1>\n-    Some text inside\n-    </h1>\n-    </body>\n-    </html>\n-    \"\"\"\n-\n-\n-class FakeDB:\n-    def __init__(self):\n-        self.data = {\n-            \"johndoe\": {\n-                \"username\": \"johndoe\",\n-                \"password\": \"shouldbehashed\",\n-                \"fist_name\": \"John\",\n-                \"last_name\": \"Doe\",\n-            }\n-        }\n-\n-\n-class DBConnectionManager:\n-    def __init__(self):\n-        self.db = FakeDB()\n-\n-    def __call__(self):\n-        return self.db\n-\n-\n-connection_manager = DBConnectionManager()\n-\n-\n-class TokenUserData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-class UserInDB(BaseModel):\n-    username: str\n-    password: str\n-    fist_name: str\n-    last_name: str\n-\n-\n-def require_token(\n-    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n-):\n-    raw_token = token.replace(\"Bearer \", \"\")\n-    # Never do this plaintext password usage in production\n-    username, password = raw_token.split(\":\")\n-    return TokenUserData(username=username, password=password)\n-\n-\n-def require_user(\n-    db: FakeDB = Depends(connection_manager),\n-    user_data: TokenUserData = Depends(require_token),\n-):\n-    return db.data[user_data.username]\n-\n-\n-class UserOut(BaseModel):\n-    username: str\n-    fist_name: str\n-    last_name: str\n-\n-\n-@app.get(\"/dependency\", response_model=UserOut)\n-def get_dependency(user: UserInDB = Depends(require_user)):\n-    return user\n\n@@ -1,278 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from starlette.responses import JSONResponse\n-from starlette.testclient import TestClient\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    price: float = None\n-\n-\n-@app.delete(\"/items/{item_id}\")\n-def delete_item(item_id: str, item: Item):\n-    return {\"item_id\": item_id, \"item\": item}\n-\n-\n-@app.head(\"/items/{item_id}\")\n-def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n-\n-\n-@app.options(\"/items/{item_id}\")\n-def options_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n-\n-\n-@app.patch(\"/items/{item_id}\")\n-def patch_item(item_id: str, item: Item):\n-    return {\"item_id\": item_id, \"item\": item}\n-\n-\n-@app.trace(\"/items/{item_id}\")\n-def trace_item(item_id: str):\n-    return JSONResponse(media_type=\"message/http\")\n-\n-\n-client = TestClient(app)\n-\n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/{item_id}\": {\n-            \"delete\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Delete Item Delete\",\n-                \"operationId\": \"delete_item_items__item_id__delete\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            },\n-            \"options\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Options Item Options\",\n-                \"operationId\": \"options_item_items__item_id__options\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-            \"head\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Head Item Head\",\n-                \"operationId\": \"head_item_items__item_id__head\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-            \"patch\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Patch Item Patch\",\n-                \"operationId\": \"patch_item_items__item_id__patch\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            },\n-            \"trace\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Trace Item Trace\",\n-                \"operationId\": \"trace_item_items__item_id__trace\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            },\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Item\": {\n-                \"title\": \"Item\",\n-                \"required\": [\"name\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"type\": \"string\"},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n-def test_delete():\n-    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_head():\n-    response = client.head(\"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_options():\n-    response = client.head(\"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n-\n-\n-def test_patch():\n-    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n-\n-\n-def test_trace():\n-    response = client.request(\"trace\", \"/items/foo\")\n-    assert response.status_code == 200\n-    assert response.headers[\"content-type\"] == \"message/http\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
