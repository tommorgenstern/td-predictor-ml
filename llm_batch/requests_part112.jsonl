{"custom_id": "requests#60ea7f0c2def461a9ddc20e7af0fc90b68dbe0de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 41 | Churn Cumulative: 8559 | Contributors (this commit): 156 | Commits (past 90d): 7 | Contributors (cumulative): 184 | DMM Complexity: 1.0\n\nDIFF:\n@@ -633,7 +633,7 @@ class Session(SessionRedirectMixin):\n         kwargs.setdefault('stream', self.stream)\n         kwargs.setdefault('verify', self.verify)\n         kwargs.setdefault('cert', self.cert)\n-        kwargs.setdefault('proxies', self.proxies)\n+        kwargs.setdefault('proxies', self.rebuild_proxies(request, self.proxies))\n \n         # It's possible that users might accidentally send a Request object.\n         # Guard against that specific failure case.\n\n@@ -40,6 +40,9 @@ from urllib3.util import Timeout as Urllib3Timeout\n # listening on that port)\n TARPIT = 'http://10.255.255.1'\n \n+# This is to avoid waiting the timeout of using TARPIT\n+INVALID_PROXY='http://localhost:1'\n+\n try:\n     from ssl import SSLContext\n     del SSLContext\n@@ -551,6 +554,42 @@ class TestRequests:\n         with pytest.raises(InvalidProxyURL):\n             requests.get(httpbin(), proxies={'http': 'http:///example.com:8080'})\n \n+    def test_respect_proxy_env_on_send_self_prepared_request(self, httpbin):\n+        with override_environ(http_proxy=INVALID_PROXY):\n+            with pytest.raises(ProxyError):\n+                session = requests.Session()\n+                request = requests.Request('GET', httpbin())\n+                session.send(request.prepare())\n+\n+    def test_respect_proxy_env_on_send_session_prepared_request(self, httpbin):\n+        with override_environ(http_proxy=INVALID_PROXY):\n+            with pytest.raises(ProxyError):\n+                session = requests.Session()\n+                request = requests.Request('GET', httpbin())\n+                prepared = session.prepare_request(request)\n+                session.send(prepared)\n+\n+    def test_respect_proxy_env_on_send_with_redirects(self, httpbin):\n+        with override_environ(http_proxy=INVALID_PROXY):\n+            with pytest.raises(ProxyError):\n+                session = requests.Session()\n+                url = httpbin('redirect/1')\n+                print(url)\n+                request = requests.Request('GET', url)\n+                session.send(request.prepare())\n+\n+    def test_respect_proxy_env_on_get(self, httpbin):\n+        with override_environ(http_proxy=INVALID_PROXY):\n+            with pytest.raises(ProxyError):\n+                session = requests.Session()\n+                session.get(httpbin())\n+\n+    def test_respect_proxy_env_on_request(self, httpbin):\n+        with override_environ(http_proxy=INVALID_PROXY):\n+            with pytest.raises(ProxyError):\n+                session = requests.Session()\n+                session.request(method='GET', url=httpbin())\n+\n     def test_basicauth_with_netrc(self, httpbin):\n         auth = ('user', 'pass')\n         wrong_auth = ('wronguser', 'wrongpass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#516f84f490ccd352672847c6a3d23c67a13b3f98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1630 | Contributors (this commit): 48 | Commits (past 90d): 5 | Contributors (cumulative): 59 | DMM Complexity: 0.0\n\nDIFF:\n@@ -65,10 +65,8 @@ def check_compatibility(urllib3_version, chardet_version):\n     # Check chardet for compatibility.\n     major, minor, patch = chardet_version.split('.')[:3]\n     major, minor, patch = int(major), int(minor), int(patch)\n-    # chardet >= 3.0.2, < 3.1.0\n-    assert major == 3\n-    assert minor < 1\n-    assert patch >= 2\n+    # chardet >= 3.0.2, < 5.0.0\n+    assert (3, 0, 2) <= (major, minor, patch) < (5, 0, 0)\n \n \n def _check_cryptography(cryptography_version):\n\n@@ -42,7 +42,7 @@ if sys.argv[-1] == 'publish':\n packages = ['requests']\n \n requires = [\n-    'chardet>=3.0.2,<4',\n+    'chardet>=3.0.2,<5',\n     'idna>=2.5,<3',\n     'urllib3>=1.21.1,<1.27',\n     'certifi>=2017.4.17'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6de4f104cd8813e3fb2fca6c8297211794728cad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3739 | Contributors (this commit): 107 | Commits (past 90d): 4 | Contributors (cumulative): 107 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-requests.session\n-~~~~~~~~~~~~~~~~\n+requests.sessions\n+~~~~~~~~~~~~~~~~~\n \n This module provides a Session object to manage and persist settings across\n requests (cookies, auth, proxies).\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2b307dbefe21177af03f9feb37181a89a799fcc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 154 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'https://requests.readthedocs.io'\n-__version__ = '2.25.0'\n-__build__ = 0x022500\n+__version__ = '2.25.1'\n+__build__ = 0x022501\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f79d1ef42f646a1835eda6b1a50c54e7afe56784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 9848 | Contributors (this commit): 194 | Commits (past 90d): 1 | Contributors (cumulative): 194 | DMM Complexity: 0.0\n\nDIFF:\n@@ -877,7 +877,12 @@ class Response(object):\n         r\"\"\"Returns the json-encoded content of a response, if any.\n \n         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n-        :raises ValueError: If the response body does not contain valid json.\n+        :raises simplejson.JSONDecodeError: If the response body does not\n+            contain valid json and simplejson is installed.\n+        :raises json.JSONDecodeError: If the response body does not contain\n+            valid json and simplejson is not installed on Python 3.\n+        :raises ValueError: If the response body does not contain valid\n+            json and simplejson is not installed on Python 2.        \n         \"\"\"\n \n         if not self.encoding and self.content and len(self.content) > 3:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2674158826050ad8e134da3e09546f36466777b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1250 | Contributors (this commit): 54 | Commits (past 90d): 1 | Contributors (cumulative): 54 | DMM Complexity: 0.0\n\nDIFF:\n@@ -72,7 +72,6 @@ def get(url, params=None, **kwargs):\n     :rtype: requests.Response\n     \"\"\"\n \n-    kwargs.setdefault('allow_redirects', True)\n     return request('get', url, params=params, **kwargs)\n \n \n@@ -85,7 +84,6 @@ def options(url, **kwargs):\n     :rtype: requests.Response\n     \"\"\"\n \n-    kwargs.setdefault('allow_redirects', True)\n     return request('options', url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2c2138e811487b13020eb331482fb991fd399d4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 730 | Contributors (this commit): 37 | Commits (past 90d): 1 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,6 @@\n #!/usr/bin/env python\n # Learn more: https://github.com/kennethreitz/setup.py\n import os\n-import re\n import sys\n \n from codecs import open\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#05a1a21593c9c8e79393d35fae12c9c27a6f7605", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 20 | Churn Cumulative: 14921 | Contributors (this commit): 236 | Commits (past 90d): 4 | Contributors (cumulative): 295 | DMM Complexity: 0.5714285714285714\n\nDIFF:\n@@ -25,6 +25,10 @@ class RequestException(IOError):\n         super(RequestException, self).__init__(*args, **kwargs)\n \n \n+class InvalidJSONError(RequestException):\n+    \"\"\"A JSON error occurred.\"\"\"\n+\n+\n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n \n\n@@ -29,7 +29,7 @@ from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header, _copy_cookie_jar\n from .exceptions import (\n     HTTPError, MissingSchema, InvalidURL, ChunkedEncodingError,\n-    ContentDecodingError, ConnectionError, StreamConsumedError)\n+    ContentDecodingError, ConnectionError, StreamConsumedError, InvalidJSONError)\n from ._internal_utils import to_native_string, unicode_is_ascii\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n@@ -466,7 +466,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             # urllib3 requires a bytes-like body. Python 2's json.dumps\n             # provides this natively, but Python 3 gives a Unicode string.\n             content_type = 'application/json'\n-            body = complexjson.dumps(json)\n+\n+            try:\n+              body = complexjson.dumps(json, allow_nan=False)\n+            except ValueError as ve:\n+              raise InvalidJSONError(ve, request=self)\n+\n             if not isinstance(body, bytes):\n                 body = body.encode('utf-8')\n \n\n@@ -24,7 +24,7 @@ from requests.cookies import (\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n     MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n-    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError, InvalidProxyURL)\n+    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError, InvalidProxyURL, InvalidJSONError)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -2566,3 +2566,8 @@ class TestPreparingURLs(object):\n         r = requests.Request('GET', url=input, params=params)\n         p = r.prepare()\n         assert p.url == expected\n+\n+    def test_post_json_nan(self, httpbin):\n+        data = {\"foo\": float(\"nan\")}\n+        with pytest.raises(requests.exceptions.InvalidJSONError):\n+          r = requests.post(httpbin('post'), json=data)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ed84f55b22f19a1e1e8eea2e50963dce62052d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 14 | Files Changed: 6 | Hunks: 23 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 76 | Churn Cumulative: 11898 | Contributors (this commit): 241 | Commits (past 90d): 7 | Contributors (cumulative): 291 | DMM Complexity: 0.0\n\nDIFF:\n@@ -41,12 +41,20 @@ is at <https://requests.readthedocs.io>.\n \"\"\"\n \n import urllib3\n-import chardet\n import warnings\n from .exceptions import RequestsDependencyWarning\n \n+try:\n+    from charset_normalizer import __version__ as charset_normalizer_version\n+except ImportError:\n+    charset_normalizer_version = None\n \n-def check_compatibility(urllib3_version, chardet_version):\n+try:\n+    from chardet import __version__ as chardet_version\n+except ImportError:\n+    chardet_version = None\n+\n+def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):\n     urllib3_version = urllib3_version.split('.')\n     assert urllib3_version != ['dev']  # Verify urllib3 isn't installed from git.\n \n@@ -62,12 +70,19 @@ def check_compatibility(urllib3_version, chardet_version):\n     assert minor >= 21\n     assert minor <= 26\n \n-    # Check chardet for compatibility.\n+    # Check charset_normalizer for compatibility.\n+    if chardet_version:\n         major, minor, patch = chardet_version.split('.')[:3]\n         major, minor, patch = int(major), int(minor), int(patch)\n-    # chardet >= 3.0.2, < 5.0.0\n+        # chardet_version >= 3.0.2, < 5.0.0\n         assert (3, 0, 2) <= (major, minor, patch) < (5, 0, 0)\n-\n+    elif charset_normalizer_version:\n+        major, minor, patch = charset_normalizer_version.split('.')[:3]\n+        major, minor, patch = int(major), int(minor), int(patch)\n+        # charset_normalizer >= 2.0.0 < 3.0.0\n+        assert (2, 0, 0) <= (major, minor, patch) < (3, 0, 0)\n+    else:\n+        raise Exception(\"You need either charset_normalizer or chardet installed\")\n \n def _check_cryptography(cryptography_version):\n     # cryptography < 1.3.4\n@@ -82,10 +97,10 @@ def _check_cryptography(cryptography_version):\n \n # Check imported dependencies for compatibility.\n try:\n-    check_compatibility(urllib3.__version__, chardet.__version__)\n+    check_compatibility(urllib3.__version__, chardet_version, charset_normalizer_version)\n except (AssertionError, ValueError):\n-    warnings.warn(\"urllib3 ({}) or chardet ({}) doesn't match a supported \"\n-                  \"version!\".format(urllib3.__version__, chardet.__version__),\n+    warnings.warn(\"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \"\n+                  \"version!\".format(urllib3.__version__, chardet_version, charset_normalizer_version),\n                   RequestsDependencyWarning)\n \n # Attempt to enable urllib3's fallback for SNI support\n\n@@ -8,7 +8,10 @@ This module handles import compatibility issues between Python 2 and\n Python 3.\n \"\"\"\n \n+try:\n     import chardet\n+except ImportError:\n+    import charset_normalizer as chardet\n \n import sys\n \n\n@@ -8,10 +8,19 @@ import ssl\n \n import idna\n import urllib3\n-import chardet\n \n from . import __version__ as requests_version\n \n+try:\n+    import charset_normalizer\n+except ImportError:\n+    charset_normalizer = None\n+\n+try:\n+    import chardet\n+except ImportError:\n+    chardet = None\n+\n try:\n     from urllib3.contrib import pyopenssl\n except ImportError:\n@@ -71,6 +80,11 @@ def info():\n \n     implementation_info = _implementation()\n     urllib3_info = {'version': urllib3.__version__}\n+    charset_normalizer_info = {'version': None}\n+    chardet_info = {'version': None}\n+    if charset_normalizer:\n+        charset_normalizer_info = {'version': charset_normalizer.__version__}\n+    if chardet:\n         chardet_info = {'version': chardet.__version__}\n \n     pyopenssl_info = {\n@@ -99,9 +113,11 @@ def info():\n         'implementation': implementation_info,\n         'system_ssl': system_ssl_info,\n         'using_pyopenssl': pyopenssl is not None,\n+        'using_charset_normalizer': chardet is None,\n         'pyOpenSSL': pyopenssl_info,\n         'urllib3': urllib3_info,\n         'chardet': chardet_info,\n+        'charset_normalizer': charset_normalizer_info,\n         'cryptography': cryptography_info,\n         'idna': idna_info,\n         'requests': {\n\n@@ -731,7 +731,7 @@ class Response(object):\n \n     @property\n     def apparent_encoding(self):\n-        \"\"\"The apparent encoding, provided by the chardet library.\"\"\"\n+        \"\"\"The apparent encoding, provided by the charset_normalizer or chardet libraries.\"\"\"\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n@@ -845,7 +845,7 @@ class Response(object):\n         \"\"\"Content of the response, in unicode.\n \n         If Response.encoding is None, encoding will be guessed using\n-        ``chardet``.\n+        ``charset_normalizer`` or ``chardet``.\n \n         The encoding of the response content is determined based solely on HTTP\n         headers, following RFC 2616 to the letter. If you can take advantage of\n@@ -893,7 +893,7 @@ class Response(object):\n         if not self.encoding and self.content and len(self.content) > 3:\n             # No encoding set. JSON RFC 4627 section 3 states we should expect\n             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n-            # decoding fails, fall back to `self.text` (using chardet to make\n+            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n             # a best guess).\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n\n@@ -1,9 +1,17 @@\n import sys\n \n+try:\n+    import chardet\n+except ImportError:\n+    import charset_normalizer as chardet\n+    import warnings\n+\n+    warnings.filterwarnings('ignore', 'Trying to detect', module='charset_normalizer')\n+\n # This code exists for backwards compatibility reasons.\n # I don't like it either. Just look the other way. :)\n \n-for package in ('urllib3', 'idna', 'chardet'):\n+for package in ('urllib3', 'idna'):\n     locals()[package] = __import__(package)\n     # This traversal is apparently necessary such that the identities are\n     # preserved (requests.packages.urllib3.* is urllib3.*)\n@@ -11,4 +19,8 @@ for package in ('urllib3', 'idna', 'chardet'):\n         if mod == package or mod.startswith(package + '.'):\n             sys.modules['requests.packages.' + mod] = sys.modules[mod]\n \n+target = chardet.__name__\n+for mod in list(sys.modules):\n+    if mod == target or mod.startswith(target + '.'):\n+        sys.modules['requests.packages.' + target.replace(target, 'chardet')] = sys.modules[mod]\n # Kinda cool, though, right?\n\n@@ -41,7 +41,8 @@ if sys.argv[-1] == 'publish':\n packages = ['requests']\n \n requires = [\n-    'chardet>=3.0.2,<5',\n+    'charset_normalizer~=2.0.0; python_version >= \"3\"',\n+    'chardet>=3.0.2,<5; python_version < \"3\"',\n     'idna>=2.5,<3',\n     'urllib3>=1.21.1,<1.27',\n     'certifi>=2017.4.17'\n@@ -103,6 +104,7 @@ setup(\n         'security': ['pyOpenSSL >= 0.14', 'cryptography>=1.3.4'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n         'socks:sys_platform == \"win32\" and python_version == \"2.7\"': ['win_inet_pton'],\n+        'use_chardet_on_py3': ['chardet>=3.0.2,<5']\n     },\n     project_urls={\n         'Documentation': 'https://requests.readthedocs.io',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#24630743cecd3d0e9db7bee7e47381dbadf2d789", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 3081 | Contributors (this commit): 98 | Commits (past 90d): 1 | Contributors (cumulative): 98 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -256,13 +256,28 @@ def extract_zipped_paths(path):\n \n     # we have a valid zip archive and a valid member of that archive\n     tmp = tempfile.gettempdir()\n-    extracted_path = os.path.join(tmp, *member.split('/'))\n+    extracted_path = os.path.join(tmp, member.split('/')[-1])\n     if not os.path.exists(extracted_path):\n-        extracted_path = zip_file.extract(member, path=tmp)\n-\n+        # use read + write to avoid the creating nested folders, we only want the file, avoids mkdir racing condition\n+        with atomic_open(extracted_path) as file_handler:\n+            file_handler.write(zip_file.read(member))\n     return extracted_path\n \n \n+@contextlib.contextmanager\n+def atomic_open(filename):\n+    \"\"\"Write a file to the disk in an atomic fashion\"\"\"\n+    replacer = os.rename if sys.version_info[0] == 2 else os.replace\n+    tmp_descriptor, tmp_name = tempfile.mkstemp(dir=os.path.dirname(filename))\n+    try:\n+        with os.fdopen(tmp_descriptor, 'wb') as tmp_handler:\n+            yield tmp_handler\n+        replacer(tmp_name, filename)\n+    except BaseException:\n+        os.remove(tmp_name)\n+        raise\n+\n+\n def from_key_val_list(value):\n     \"\"\"Take an object and test to see if it can be represented as a\n     dictionary. Unless it can not be represented as such, return an\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5351469472eccee7ed1a6cae53341446c520d807", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 3089 | Contributors (this commit): 99 | Commits (past 90d): 2 | Contributors (cumulative): 99 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,7 @@ import tempfile\n import warnings\n import zipfile\n from collections import OrderedDict\n+from urllib3.util import make_headers\n \n from .__version__ import __version__\n from . import certs\n@@ -41,6 +42,11 @@ DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n DEFAULT_PORTS = {'http': 80, 'https': 443}\n \n+# Ensure that ', ' is used to preserve previous delimiter behavior.\n+DEFAULT_ACCEPT_ENCODING = \", \".join(\n+    re.split(r\",\\s*\", make_headers(accept_encoding=True)[\"accept-encoding\"])\n+)\n+\n \n if sys.platform == 'win32':\n     # provide a proxy_bypass version on Windows without DNS lookups\n@@ -835,7 +841,7 @@ def default_headers():\n     \"\"\"\n     return CaseInsensitiveDict({\n         'User-Agent': default_user_agent(),\n-        'Accept-Encoding': ', '.join(('gzip', 'deflate')),\n+        'Accept-Encoding': DEFAULT_ACCEPT_ENCODING,\n         'Accept': '*/*',\n         'Connection': 'keep-alive',\n     })\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#33cf965f7271ab4978ed551754db37865c4085db", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 737 | Contributors (this commit): 39 | Commits (past 90d): 2 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,8 @@ packages = ['requests']\n requires = [\n     'charset_normalizer~=2.0.0; python_version >= \"3\"',\n     'chardet>=3.0.2,<5; python_version < \"3\"',\n-    'idna>=2.5,<3',\n+    'idna>=2.5,<3; python_version < \"3\"',\n+    'idna>=2.5,<4; python_version >= \"3\"',\n     'urllib3>=1.21.1,<1.27',\n     'certifi>=2017.4.17'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f6c0619d892a41dcf84933810ffda89e9f6b10d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 742 | Contributors (this commit): 39 | Commits (past 90d): 3 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -78,7 +78,7 @@ setup(\n     package_data={'': ['LICENSE', 'NOTICE']},\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n-    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n+    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\",\n     install_requires=requires,\n     license=about['__license__'],\n     zip_safe=False,\n@@ -91,7 +91,6 @@ setup(\n         'Programming Language :: Python :: 2',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n-        'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n         'Programming Language :: Python :: 3.7',\n         'Programming Language :: Python :: 3.8',\n@@ -102,7 +101,7 @@ setup(\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n     extras_require={\n-        'security': ['pyOpenSSL >= 0.14', 'cryptography>=1.3.4'],\n+        'security': [],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n         'socks:sys_platform == \"win32\" and python_version == \"2.7\"': ['win_inet_pton'],\n         'use_chardet_on_py3': ['chardet>=3.0.2,<5']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e253eba5ed8922affe50089548a15fbda298fefd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 40 | Churn Cumulative: 4897 | Contributors (this commit): 80 | Commits (past 90d): 3 | Contributors (cumulative): 83 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,19 @@\n # -*- coding: utf-8 -*-\n \n+try:\n+    from http.server import HTTPServer\n+    from http.server import SimpleHTTPRequestHandler\n+except ImportError:\n+    from BaseHTTPServer import HTTPServer\n+    from SimpleHTTPServer import SimpleHTTPRequestHandler \n+\n+import ssl\n+import tempfile\n+import threading\n+\n import pytest\n from requests.compat import urljoin\n+import trustme\n \n \n def prepare_url(value):\n@@ -22,3 +34,25 @@ def httpbin(httpbin):\n @pytest.fixture\n def httpbin_secure(httpbin_secure):\n     return prepare_url(httpbin_secure)\n+\n+\n+@pytest.fixture\n+def nosan_server(tmp_path_factory):\n+    tmpdir = tmp_path_factory.mktemp(\"certs\")\n+    ca = trustme.CA()\n+    # only commonName, no subjectAltName\n+    server_cert = ca.issue_cert(common_name=u\"localhost\")\n+    ca_bundle = str(tmpdir / \"ca.pem\")\n+    ca.cert_pem.write_to_path(ca_bundle)\n+\n+    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n+    server_cert.configure_cert(context)\n+    server = HTTPServer((\"localhost\", 0), SimpleHTTPRequestHandler)\n+    server.socket = context.wrap_socket(server.socket, server_side=True)\n+    server_thread = threading.Thread(target=server.serve_forever)\n+    server_thread.start()\n+\n+    yield \"localhost\", server.server_address[1], ca_bundle\n+\n+    server.shutdown()\n+    server_thread.join()\n\n@@ -874,8 +874,9 @@ class TestRequests:\n         r = requests.get(httpbin(), cert='.')\n         assert r.status_code == 200\n \n-    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):\n+    def test_https_warnings(self, nosan_server):\n         \"\"\"warnings are emitted with requests.get\"\"\"\n+        host, port, ca_bundle = nosan_server\n         if HAS_MODERN_SSL or HAS_PYOPENSSL:\n             warnings_expected = ('SubjectAltNameWarning', )\n         else:\n@@ -885,8 +886,7 @@ class TestRequests:\n \n         with pytest.warns(None) as warning_records:\n             warnings.simplefilter('always')\n-            requests.get(httpbin_secure('status', '200'),\n-                         verify=httpbin_ca_bundle)\n+            requests.get(\"https://localhost:{}/\".format(port), verify=ca_bundle)\n \n         warning_records = [item for item in warning_records\n                            if item.category.__name__ != 'ResourceWarning']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a1a6a549a0143d9b32717dbe3d75cd543ae5a4f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 158 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'https://requests.readthedocs.io'\n-__version__ = '2.25.1'\n-__build__ = 0x022501\n+__version__ = '2.26.0'\n+__build__ = 0x022600\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#db575eeedcfdb03bf31285afd3033e301df8b685", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 10 | Files Changed: 5 | Hunks: 14 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 44 | Churn Cumulative: 16164 | Contributors (this commit): 259 | Commits (past 90d): 12 | Contributors (cumulative): 349 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -139,7 +139,7 @@ from .status_codes import codes\n from .exceptions import (\n     RequestException, Timeout, URLRequired,\n     TooManyRedirects, HTTPError, ConnectionError,\n-    FileModeWarning, ConnectTimeout, ReadTimeout\n+    FileModeWarning, ConnectTimeout, ReadTimeout, JSONDecodeError\n )\n \n # Set default logging handler to avoid \"No handler found\" warnings.\n\n@@ -28,8 +28,10 @@ is_py2 = (_ver[0] == 2)\n #: Python 3.x?\n is_py3 = (_ver[0] == 3)\n \n+has_simplejson = False\n try:\n     import simplejson as json\n+    has_simplejson = True\n except ImportError:\n     import json\n \n@@ -49,13 +51,13 @@ if is_py2:\n     # Keep OrderedDict for backwards compatibility.\n     from collections import Callable, Mapping, MutableMapping, OrderedDict\n \n-\n     builtin_str = str\n     bytes = str\n     str = unicode\n     basestring = basestring\n     numeric_types = (int, long, float)\n     integer_types = (int, long)\n+    JSONDecodeError = ValueError\n \n elif is_py3:\n     from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, quote_plus, unquote_plus, urldefrag\n@@ -66,6 +68,10 @@ elif is_py3:\n     # Keep OrderedDict for backwards compatibility.\n     from collections import OrderedDict\n     from collections.abc import Callable, Mapping, MutableMapping\n+    if has_simplejson:\n+        from simplejson import JSONDecodeError\n+    else:\n+        from json import JSONDecodeError\n \n     builtin_str = str\n     str = str\n\n@@ -8,6 +8,8 @@ This module contains the set of Requests' exceptions.\n \"\"\"\n from urllib3.exceptions import HTTPError as BaseHTTPError\n \n+from .compat import JSONDecodeError as CompatJSONDecodeError\n+\n \n class RequestException(IOError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n@@ -29,6 +31,10 @@ class InvalidJSONError(RequestException):\n     \"\"\"A JSON error occurred.\"\"\"\n \n \n+class JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):\n+    \"\"\"Couldn't decode the text into json\"\"\"\n+\n+\n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n \n\n@@ -29,7 +29,9 @@ from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header, _copy_cookie_jar\n from .exceptions import (\n     HTTPError, MissingSchema, InvalidURL, ChunkedEncodingError,\n-    ContentDecodingError, ConnectionError, StreamConsumedError, InvalidJSONError)\n+    ContentDecodingError, ConnectionError, StreamConsumedError,\n+    InvalidJSONError)\n+from .exceptions import JSONDecodeError as RequestsJSONDecodeError\n from ._internal_utils import to_native_string, unicode_is_ascii\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n@@ -38,7 +40,7 @@ from .utils import (\n from .compat import (\n     Callable, Mapping,\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes,\n-    is_py2, chardet, builtin_str, basestring)\n+    is_py2, chardet, builtin_str, basestring, JSONDecodeError)\n from .compat import json as complexjson\n from .status_codes import codes\n \n@@ -882,12 +884,8 @@ class Response(object):\n         r\"\"\"Returns the json-encoded content of a response, if any.\n \n         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n-        :raises simplejson.JSONDecodeError: If the response body does not\n-            contain valid json and simplejson is installed.\n-        :raises json.JSONDecodeError: If the response body does not contain\n-            valid json and simplejson is not installed on Python 3.\n-        :raises ValueError: If the response body does not contain valid\n-            json and simplejson is not installed on Python 2.        \n+        :raises requests.exceptions.JSONDecodeError: If the response body does not\n+            contain valid json.\n         \"\"\"\n \n         if not self.encoding and self.content and len(self.content) > 3:\n@@ -907,7 +905,16 @@ class Response(object):\n                     # and the server didn't bother to tell us what codec *was*\n                     # used.\n                     pass\n+\n+        try:\n             return complexjson.loads(self.text, **kwargs)\n+        except JSONDecodeError as e:\n+            # Catch JSON-related errors and raise as requests.JSONDecodeError\n+            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n+            if is_py2: # e is a ValueError\n+                raise RequestsJSONDecodeError(e.message)\n+            else:\n+                raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n \n     @property\n     def links(self):\n\n@@ -2571,3 +2571,8 @@ class TestPreparingURLs(object):\n         data = {\"foo\": float(\"nan\")}\n         with pytest.raises(requests.exceptions.InvalidJSONError):\n           r = requests.post(httpbin('post'), json=data)\n+\n+    def test_json_decode_compatibility(self, httpbin):\n+        r = requests.get(httpbin('bytes/20'))\n+        with pytest.raises(requests.exceptions.JSONDecodeError):\n+            r.json()\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b227e3cb82c8d42ea27790d615ecafe12528d3bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 182 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -78,7 +78,9 @@ class Server(threading.Thread):\n     def _create_socket_and_bind(self):\n         sock = socket.socket()\n         sock.bind((self.host, self.port))\n-        sock.listen(0)\n+        # NB: when Python 2.7 is no longer supported, the argument\n+        # can be removed to use a default backlog size\n+        sock.listen(5)\n         return sock\n \n     def _close_server_sock_ignore_errors(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8829f9f242149174e50f45e021ffb81fbbced70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 8 | Churn Cumulative: 4566 | Contributors (this commit): 105 | Commits (past 90d): 4 | Contributors (cumulative): 130 | DMM Complexity: 0.6\n\nDIFF:\n@@ -251,6 +251,10 @@ def extract_zipped_paths(path):\n     archive, member = os.path.split(path)\n     while archive and not os.path.exists(archive):\n         archive, prefix = os.path.split(archive)\n+        if not prefix:\n+            # If we don't check for an empty prefix after the split (in other words, archive remains unchanged after the split),\n+            # we _can_ end up in an infinite loop on a rare corner case affecting a small number of users\n+            break\n         member = '/'.join([prefix, member])\n \n     if not zipfile.is_zipfile(archive):\n\n@@ -285,6 +285,10 @@ class TestExtractZippedPaths:\n         assert os.path.exists(extracted_path)\n         assert filecmp.cmp(extracted_path, __file__)\n \n+    def test_invalid_unc_path(self):\n+        path = r\"\\\\localhost\\invalid\\location\"\n+        assert extract_zipped_paths(path) == path\n+\n \n class TestContentEncodingDetection:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2d30aeb7c6d7180b67e2bb01962f3383739a1c62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 22 | Churn Cumulative: 475 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,6 +24,28 @@ def test_chunked_upload():\n     assert r.request.headers['Transfer-Encoding'] == 'chunked'\n \n \n+def test_chunked_encoding_error():\n+    \"\"\"get a ChunkedEncodingError if the server returns a bad response\"\"\"\n+\n+    def incomplete_chunked_response_handler(sock):\n+        request_content = consume_socket_content(sock, timeout=0.5)\n+\n+        # The server never ends the request and doesn't provide any valid chunks\n+        sock.send(b\"HTTP/1.1 200 OK\\r\\n\" +\n+                  b\"Transfer-Encoding: chunked\\r\\n\")\n+\n+        return request_content\n+\n+    close_server = threading.Event()\n+    server = Server(incomplete_chunked_response_handler)\n+\n+    with server as (host, port):\n+        url = 'http://{}:{}/'.format(host, port)\n+        with pytest.raises(requests.exceptions.ChunkedEncodingError):\n+            r = requests.get(url)\n+        close_server.set()  # release server block\n+\n+\n def test_digestauth_401_count_reset_on_redirect():\n     \"\"\"Ensure we correctly reset num_401_calls after a successful digest auth,\n     followed by a 302 redirect to another digest auth prompt.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#10968357a19a146332c8dfd8e6d17006d746e580", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 31 | Churn Cumulative: 1857 | Contributors (this commit): 60 | Commits (past 90d): 3 | Contributors (cumulative): 63 | DMM Complexity: 0.8947368421052632\n\nDIFF:\n@@ -19,6 +19,7 @@ from urllib3.util.retry import Retry\n from urllib3.exceptions import ClosedPoolError\n from urllib3.exceptions import ConnectTimeoutError\n from urllib3.exceptions import HTTPError as _HTTPError\n+from urllib3.exceptions import InvalidHeader as _InvalidHeader\n from urllib3.exceptions import MaxRetryError\n from urllib3.exceptions import NewConnectionError\n from urllib3.exceptions import ProxyError as _ProxyError\n@@ -37,7 +38,7 @@ from .structures import CaseInsensitiveDict\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError, InvalidSchema, InvalidProxyURL,\n-                         InvalidURL)\n+                         InvalidURL, InvalidHeader)\n from .auth import _basic_auth_str\n \n try:\n@@ -527,6 +528,8 @@ class HTTPAdapter(BaseAdapter):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\n                 raise ReadTimeout(e, request=request)\n+            elif isinstance(e, _InvalidHeader):\n+                raise InvalidHeader(e, request=request)\n             else:\n                 raise\n \n\n@@ -46,6 +46,32 @@ def test_chunked_encoding_error():\n         close_server.set()  # release server block\n \n \n+def test_conflicting_content_lengths():\n+    \"\"\"Ensure we correctly throw an InvalidHeader error if multiple\n+    conflicting Content-Length headers are returned.\n+    \"\"\"\n+\n+    def multiple_content_length_response_handler(sock):\n+        request_content = consume_socket_content(sock, timeout=0.5)\n+\n+        sock.send(b\"HTTP/1.1 200 OK\\r\\n\" +\n+                  b\"Content-Type: text/plain\\r\\n\" +\n+                  b\"Content-Length: 16\\r\\n\" +\n+                  b\"Content-Length: 32\\r\\n\\r\\n\" +\n+                  b\"-- Bad Actor -- Original Content\\r\\n\")\n+\n+        return request_content\n+\n+    close_server = threading.Event()\n+    server = Server(multiple_content_length_response_handler)\n+\n+    with server as (host, port):\n+        url = 'http://{}:{}/'.format(host, port)\n+        with pytest.raises(requests.exceptions.InvalidHeader):\n+            r = requests.get(url)\n+        close_server.set()\n+\n+\n def test_digestauth_401_count_reset_on_redirect():\n     \"\"\"Ensure we correctly reset num_401_calls after a successful digest auth,\n     followed by a 302 redirect to another digest auth prompt.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6fbfca90b6029c22da90902e950edd9f6d37a838", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 30 | Churn Cumulative: 1887 | Contributors (this commit): 61 | Commits (past 90d): 7 | Contributors (cumulative): 65 | DMM Complexity: 0.9523809523809523\n\nDIFF:\n@@ -460,7 +460,8 @@ class HTTPAdapter(BaseAdapter):\n                 try:\n                     low_conn.putrequest(request.method,\n                                         url,\n-                                        skip_accept_encoding=True)\n+                                        skip_accept_encoding=True,\n+                                        skip_host='Host' in request.headers)\n \n                     for header, value in request.headers.items():\n                         low_conn.putheader(header, value)\n\n@@ -46,6 +46,33 @@ def test_chunked_encoding_error():\n         close_server.set()  # release server block\n \n \n+def test_chunked_upload_uses_only_specified_host_header():\n+    \"\"\"Ensure we use only the specified Host header for chunked requests.\"\"\"\n+    text_200 = (b'HTTP/1.1 200 OK\\r\\n'\n+                b'Content-Length: 0\\r\\n\\r\\n')\n+    wanted_host = 'sample-host'\n+    expected_header = 'Host: {}'.format(wanted_host).encode('utf-8')\n+    def single_host_resp_handler(sock):\n+        request_content = consume_socket_content(sock, timeout=0.5)\n+        assert expected_header in request_content\n+        assert request_content.count(b'Host: ') == 1\n+        sock.send(text_200)\n+\n+        return request_content\n+\n+    close_server = threading.Event()\n+\n+    server = Server(single_host_resp_handler, wait_to_close_event=close_server)\n+    data = iter([b'a', b'b', b'c'])\n+\n+    with server as (host, port):\n+        url = 'http://{}:{}/'.format(host, port)\n+        r = requests.post(url, data=data, headers={'Host': wanted_host}, stream=True)\n+        close_server.set()  # release server block\n+\n+    assert r.status_code == 200\n+\n+\n def test_conflicting_content_lengths():\n     \"\"\"Ensure we correctly throw an InvalidHeader error if multiple\n     conflicting Content-Length headers are returned.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4ab2550d667651e11229cf7e0489755fe6d998cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 9 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 54 | Churn Cumulative: 1941 | Contributors (this commit): 61 | Commits (past 90d): 5 | Contributors (cumulative): 65 | DMM Complexity: 0.9230769230769231\n\nDIFF:\n@@ -458,10 +458,11 @@ class HTTPAdapter(BaseAdapter):\n                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n \n                 try:\n+                    skip_host = 'Host' in request.headers\n                     low_conn.putrequest(request.method,\n                                         url,\n                                         skip_accept_encoding=True,\n-                                        skip_host='Host' in request.headers)\n+                                        skip_host=skip_host)\n \n                     for header, value in request.headers.items():\n                         low_conn.putheader(header, value)\n\n@@ -9,6 +9,18 @@ from tests.testserver.server import Server, consume_socket_content\n from .utils import override_environ\n \n \n+def echo_response_handler(sock):\n+    \"\"\"Simple handler that will take request and echo it back to requester.\"\"\"\n+    request_content = consume_socket_content(sock, timeout=0.5)\n+\n+    text_200 = (\n+        b'HTTP/1.1 200 OK\\r\\n'\n+        b'Content-Length: %d\\r\\n\\r\\n'\n+        b'%s'\n+    ) % (len(request_content), request_content)\n+    sock.send(text_200)\n+\n+\n def test_chunked_upload():\n     \"\"\"can safely send generators\"\"\"\n     close_server = threading.Event()\n@@ -48,29 +60,38 @@ def test_chunked_encoding_error():\n \n def test_chunked_upload_uses_only_specified_host_header():\n     \"\"\"Ensure we use only the specified Host header for chunked requests.\"\"\"\n-    text_200 = (b'HTTP/1.1 200 OK\\r\\n'\n-                b'Content-Length: 0\\r\\n\\r\\n')\n-    wanted_host = 'sample-host'\n-    expected_header = 'Host: {}'.format(wanted_host).encode('utf-8')\n-    def single_host_resp_handler(sock):\n-        request_content = consume_socket_content(sock, timeout=0.5)\n-        assert expected_header in request_content\n-        assert request_content.count(b'Host: ') == 1\n-        sock.send(text_200)\n-\n-        return request_content\n-\n     close_server = threading.Event()\n+    server = Server(echo_response_handler, wait_to_close_event=close_server)\n \n-    server = Server(single_host_resp_handler, wait_to_close_event=close_server)\n     data = iter([b'a', b'b', b'c'])\n+    custom_host = 'sample-host'\n \n     with server as (host, port):\n         url = 'http://{}:{}/'.format(host, port)\n-        r = requests.post(url, data=data, headers={'Host': wanted_host}, stream=True)\n+        r = requests.post(url, data=data, headers={'Host': custom_host}, stream=True)\n         close_server.set()  # release server block\n \n-    assert r.status_code == 200\n+    expected_header = b'Host: %s\\r\\n' % custom_host.encode('utf-8')\n+    assert expected_header in r.content\n+    assert r.content.count(b'Host: ') == 1\n+\n+\n+def test_chunked_upload_doesnt_skip_host_header():\n+    \"\"\"Ensure we don't omit all Host headers with chunked requests.\"\"\"\n+    close_server = threading.Event()\n+    server = Server(echo_response_handler, wait_to_close_event=close_server)\n+\n+    data = iter([b'a', b'b', b'c'])\n+\n+    with server as (host, port):\n+        expected_host = '{}:{}'.format(host, port)\n+        url = 'http://{}:{}/'.format(host, port)\n+        r = requests.post(url, data=data, stream=True)\n+        close_server.set()  # release server block\n+\n+    expected_header = b'Host: %s\\r\\n' % expected_host.encode('utf-8')\n+    assert expected_header in r.content\n+    assert r.content.count(b'Host: ') == 1\n \n \n def test_conflicting_content_lengths():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
