{"custom_id": "scrapy#9081e84e27ef49b4b10cfafddceca8e3aade4fdd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 152 | Lines Deleted: 122 | Files Changed: 4 | Hunks: 43 | Methods Changed: 32 | Complexity Δ (Sum/Max): 8/12 | Churn Δ: 274 | Churn Cumulative: 620 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,64 +1,7 @@\n from collections import defaultdict\n-from types import UnboundMethodType\n \n-from scrapy.utils.misc import arg_to_iter\n-from scrapy.utils.python import get_func_args\n-from scrapy.utils.datatypes import MergeDict\n from scrapy.newitem import Item\n-from scrapy.newitem.reducers import take_first\n-\n-def tree_expander(*functions, **default_loader_args):\n-    \"\"\"Create an ItemLoader expander from a list of functions using the tree\n-    expansion algorithm described below.\n-\n-    The functions can optionally accept a ``loader_args`` argument which (if\n-    present) will be used to pass loader arguments when the function is called.\n-\n-    The tree expansion algorithm consists in an ordered list of functions, each\n-    of which receives one value and can return zero, one or more values (as a\n-    list or iterable). If a function returns more than one value, the next\n-    function in the pipeline will be called with each of those values,\n-    potentially returning more values. Hence the name \"tree expansion\n-    algorithm\".\n-    \"\"\"\n-    def wrap_y(f):\n-        return lambda x, y, z: f(y)\n-\n-    def wrap_xy(f):\n-        return lambda x, y, z: f(x, y)\n-\n-    def wrap_yz(f):\n-        return lambda x, y, z: f(y, z)\n-\n-    wrapped_funcs = []\n-    for func in functions:\n-        if isinstance(func, UnboundMethodType):\n-            func = func.im_func\n-            if 'loader_args' in get_func_args(func):\n-                wfunc = func\n-            else:\n-                wfunc = wrap_xy(func)\n-        else:\n-            if 'loader_args' in get_func_args(func):\n-                wfunc = wrap_yz(func)\n-            else:\n-                wfunc = wrap_y(func)\n-        wrapped_funcs.append(wfunc)\n-\n-    def _expander(loader, value, loader_args):\n-        values = arg_to_iter(value)\n-        largs = default_loader_args\n-        if loader_args:\n-            largs = MergeDict(loader_args, default_loader_args)\n-        for func in wrapped_funcs:\n-            next_values = []\n-            for v in values:\n-                next_values += arg_to_iter(func(loader, v, largs))\n-            values = next_values\n-        return list(values)\n-\n-    return _expander\n-\n+from scrapy.newitem.loader.reducers import take_first\n \n class ItemLoader(object):\n \n@@ -71,23 +14,28 @@ class ItemLoader(object):\n         self._values = defaultdict(list)\n \n     def add_value(self, field_name, value, **new_loader_args):\n-        evalue = self._expand_value(field_name, value, new_loader_args)\n-        self._values[field_name].extend(evalue)\n+        self._values[field_name] += self._expand_value(field_name, value, \\\n+            new_loader_args)\n \n     def replace_value(self, field_name, value, **new_loader_args):\n-        evalue = self._expand_value(field_name, value, new_loader_args)\n-        self._values[field_name] = evalue\n+        self._values[field_name] = self._expand_value(field_name, value, \\\n+            new_loader_args)\n \n     def get_item(self):\n         item = self._item\n         for field_name in self._values:\n-            item[field_name] = self.get_value(field_name)\n+            item[field_name] = self.get_reduced_value(field_name)\n         return item\n \n-    def get_value(self, field_name):\n-        values = self._values[field_name]\n+    def get_expanded_value(self, field_name):\n+        return self._values[field_name]\n+\n+    def get_reduced_value(self, field_name):\n         reducer = self.get_reducer(field_name)\n-        return reducer(values)\n+        return reducer(self._values[field_name])\n+\n+    def get_expander(self, field_name):\n+        return getattr(self, 'expand_%s' % field_name, self.expand)\n \n     def get_reducer(self, field_name):\n         try:\n@@ -95,9 +43,6 @@ class ItemLoader(object):\n         except AttributeError:\n             return self._item.fields[field_name].get('reducer', self.reduce)\n \n-    def get_expander(self, field_name):\n-        return getattr(self, 'expand_%s' % field_name, self.expand)\n-\n     def _expand_value(self, field_name, value, new_loader_args):\n         if new_loader_args:\n             loader_args = self._loader_args.copy()\n@@ -110,5 +55,5 @@ class ItemLoader(object):\n     def expand(self, value, loader_args): # default expander\n         return value\n \n-    def reduce(self, values):\n+    def reduce(self, values): # default reducer\n         return take_first(values)\n\n@@ -0,0 +1,62 @@\n+\"\"\"\n+ItemLoader expanders\n+\"\"\"\n+\n+from types import UnboundMethodType\n+\n+from scrapy.utils.misc import arg_to_iter\n+from scrapy.utils.python import get_func_args\n+from scrapy.utils.datatypes import MergeDict\n+\n+def tree_expander(*functions, **default_loader_args):\n+    \"\"\"Create an ItemLoader expander from a list of functions using the tree\n+    expansion algorithm described below.\n+\n+    The functions can optionally accept a ``loader_args`` argument which (if\n+    present) will be used to pass loader arguments when the function is called.\n+\n+    The tree expansion algorithm consists in an ordered list of functions, each\n+    of which receives one value and can return zero, one or more values (as a\n+    list or iterable). If a function returns more than one value, the next\n+    function in the pipeline will be called with each of those values,\n+    potentially returning more values. Hence the name \"tree expansion\n+    algorithm\".\n+    \"\"\"\n+    def wrap_y(f):\n+        return lambda x, y, z: f(y)\n+\n+    def wrap_xy(f):\n+        return lambda x, y, z: f(x, y)\n+\n+    def wrap_yz(f):\n+        return lambda x, y, z: f(y, z)\n+\n+    wrapped_funcs = []\n+    for func in functions:\n+        if isinstance(func, UnboundMethodType):\n+            func = func.im_func\n+            if 'loader_args' in get_func_args(func):\n+                wfunc = func\n+            else:\n+                wfunc = wrap_xy(func)\n+        else:\n+            if 'loader_args' in get_func_args(func):\n+                wfunc = wrap_yz(func)\n+            else:\n+                wfunc = wrap_y(func)\n+        wrapped_funcs.append(wfunc)\n+\n+    def _expander(loader, value, loader_args):\n+        values = arg_to_iter(value)\n+        largs = default_loader_args\n+        if loader_args:\n+            largs = MergeDict(loader_args, default_loader_args)\n+        for func in wrapped_funcs:\n+            next_values = []\n+            for v in values:\n+                next_values += arg_to_iter(func(loader, v, largs))\n+            values = next_values\n+        return list(values)\n+\n+    return _expander\n+\n\n@@ -1,4 +1,6 @@\n-\"\"\"Some common reducers\"\"\"\n+\"\"\"\n+ItemLoader reducers\n+\"\"\"\n \n def take_first(values):\n     for value in values:\n\n@@ -1,6 +1,7 @@\n import unittest\n \n-from scrapy.newitem.loader import ItemLoader, tree_expander\n+from scrapy.newitem.loader import ItemLoader\n+from scrapy.newitem.loader.expanders import tree_expander\n from scrapy.newitem import Item, Field\n \n \n@@ -31,104 +32,124 @@ class InheritDefaultedItemLoader(DefaultedItemLoader):\n \n class ItemLoaderTest(unittest.TestCase):\n \n-    def test_basic(self):\n-        ib = TestItemLoader()\n+    def test_get_item(self):\n+        il = TestItemLoader()\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n-\n-        item = ib.get_item()\n+        il.add_value('name', u'marta')\n+        item = il.get_item()\n         self.assertEqual(item['name'], u'Marta')\n \n+    def test_add_value(self):\n+        il = TestItemLoader()\n+\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n+\n+        il.add_value('name', u'pepe')\n+        self.assertEqual(il.get_expanded_value('name'), [u'Marta', u'Pepe'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n+\n+    def test_replace_value(self):\n+        il = TestItemLoader()\n+\n+        il.replace_value('name', u'marta')\n+        self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n+\n+        il.replace_value('name', u'pepe')\n+        self.assertEqual(il.get_expanded_value('name'), [u'Pepe'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Pepe')\n+\n     def test_multiple_functions(self):\n         class TestItemLoader(BaseItemLoader):\n             expand_name = tree_expander(lambda v: v.title(), lambda v: v[:-1])\n \n-        ib = TestItemLoader()\n+        il = TestItemLoader()\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Mart')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'Mart')\n \n-        item = ib.get_item()\n+        item = il.get_item()\n         self.assertEqual(item['name'], u'Mart')\n \n     def test_defaulted(self):\n-        dib = DefaultedItemLoader()\n+        dil = DefaultedItemLoader()\n \n-        dib.add_value('name', u'marta')\n-        self.assertEqual(dib.get_value('name'), u'mart')\n+        dil.add_value('name', u'marta')\n+        self.assertEqual(dil.get_reduced_value('name'), u'mart')\n \n     def test_inherited_default(self):\n-        dib = InheritDefaultedItemLoader()\n+        dil = InheritDefaultedItemLoader()\n \n-        dib.add_value('name', u'marta')\n-        self.assertEqual(dib.get_value('name'), u'mart')\n+        dil.add_value('name', u'marta')\n+        self.assertEqual(dil.get_reduced_value('name'), u'mart')\n \n     def test_inheritance(self):\n         class ChildItemLoader(TestItemLoader):\n             expand_url = tree_expander(lambda v: v.lower())\n \n-        ib = ChildItemLoader()\n+        il = ChildItemLoader()\n \n-        ib.add_value('url', u'HTTP://scrapy.ORG')\n-        self.assertEqual(ib.get_value('url'), u'http://scrapy.org')\n+        il.add_value('url', u'HTTP://scrapy.ORG')\n+        self.assertEqual(il.get_reduced_value('url'), u'http://scrapy.org')\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n \n         class ChildChildItemLoader(ChildItemLoader):\n             expand_url = tree_expander(lambda v: v.upper())\n             expand_summary = tree_expander(lambda v: v)\n \n-        ib = ChildChildItemLoader()\n+        il = ChildChildItemLoader()\n \n-        ib.add_value('url', u'http://scrapy.org')\n-        self.assertEqual(ib.get_value('url'), u'HTTP://SCRAPY.ORG')\n+        il.add_value('url', u'http://scrapy.org')\n+        self.assertEqual(il.get_reduced_value('url'), u'HTTP://SCRAPY.ORG')\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'Marta')\n \n     def test_identity(self):\n         class IdentityDefaultedItemLoader(DefaultedItemLoader):\n             expand_name = tree_expander()\n \n-        ib = IdentityDefaultedItemLoader()\n+        il = IdentityDefaultedItemLoader()\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'marta')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'marta')\n \n     def test_staticmethods(self):\n         class ChildItemLoader(TestItemLoader):\n             expand_name = tree_expander(TestItemLoader.expand_name, unicode.swapcase)\n \n-        ib = ChildItemLoader()\n+        il = ChildItemLoader()\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'mARTA')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'mARTA')\n \n \n     def test_staticdefaults(self):\n         class ChildDefaultedItemLoader(DefaultedItemLoader):\n             expand_name = tree_expander(DefaultedItemLoader.expand, unicode.swapcase)\n \n-        ib = ChildDefaultedItemLoader()\n+        il = ChildDefaultedItemLoader()\n \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'MART')\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'MART')\n \n     def test_reducer(self):\n-        ib = TestItemLoader()\n+        il = TestItemLoader()\n \n-        ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar')\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n \n         class TakeFirstItemLoader(TestItemLoader):\n             reduce_name = staticmethod(u\" \".join)\n \n-        ib = TakeFirstItemLoader()\n+        il = TakeFirstItemLoader()\n \n-        ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar Ta')\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n \n     def test_loader_args(self):\n         def expander_func_with_args(value, loader_args):\n@@ -139,16 +160,16 @@ class ItemLoaderTest(unittest.TestCase):\n         class ChildItemLoader(TestItemLoader):\n             expand_url = tree_expander(expander_func_with_args)\n \n-        ib = ChildItemLoader(val=u'val')\n-        ib.add_value('url', u'text')\n-        self.assertEqual(ib.get_value('url'), 'val')\n+        il = ChildItemLoader(val=u'val')\n+        il.add_value('url', u'text')\n+        self.assertEqual(il.get_reduced_value('url'), 'val')\n \n-        ib = ChildItemLoader()\n-        ib.add_value('url', u'text', val=u'val')\n-        self.assertEqual(ib.get_value('url'), 'val')\n+        il = ChildItemLoader()\n+        il.add_value('url', u'text', val=u'val')\n+        self.assertEqual(il.get_reduced_value('url'), 'val')\n \n     def test_add_value_unknown_field(self):\n-        ib = TestItemLoader()\n-        ib.add_value('wrong_field', [u'lala', u'lolo'])\n+        il = TestItemLoader()\n+        il.add_value('wrong_field', [u'lala', u'lolo'])\n \n-        self.assertRaises(KeyError, ib.get_item)\n+        self.assertRaises(KeyError, il.get_item)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7bc7af0162225e8431e8f5cfaf3eae9fbd099a6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 191 | Lines Deleted: 137 | Files Changed: 5 | Hunks: 83 | Methods Changed: 54 | Complexity Δ (Sum/Max): 2/6 | Churn Δ: 328 | Churn Cumulative: 1027 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,7 +3,7 @@ from UserDict import DictMixin\n from scrapy.item.models import BaseItem\n \n class Field(dict):\n-    pass\n+    \"\"\"Container of field metadata\"\"\"\n \n class _ItemMeta(type):\n \n@@ -30,8 +30,7 @@ class Item(DictMixin, BaseItem):\n \n     def __init__(self, *args, **kwargs):\n         self._values = {}\n-\n-        if args or kwargs: # don't instantiate dict for simple (most common) case\n+        if args or kwargs: # avoid instantiating dict for most common case\n             for k, v in dict(*args, **kwargs).iteritems():\n                 self[k] = v\n \n@@ -70,8 +69,3 @@ class Item(DictMixin, BaseItem):\n         \"\"\"\n         values = ', '.join('%s=%r' % field for field in self.iteritems())\n         return \"%s(%s)\" % (self.__class__.__name__, values)\n-\n-    def get_id(self):\n-        \"\"\"Returns the unique id for this item.\"\"\"\n-        raise NotImplementedError\n-\n\n@@ -1,15 +1,19 @@\n from collections import defaultdict\n \n+from scrapy.utils.datatypes import MergeDict\n from scrapy.newitem import Item\n-from scrapy.newitem.loader.reducers import take_first\n+from scrapy.newitem.loader.reducers import TakeFirst\n+from scrapy.newitem.loader.expanders import IdentityExpander\n \n class ItemLoader(object):\n \n-    item_class = Item\n+    default_item_class = Item\n+    default_expander = IdentityExpander()\n+    default_reducer = TakeFirst()\n \n     def __init__(self, **loader_args):\n         self._response = loader_args.get('response')\n-        self._item = loader_args.get('item') or self.item_class()\n+        self._item = loader_args.setdefault('item', self.default_item_class())\n         self._loader_args = loader_args\n         self._values = defaultdict(list)\n \n@@ -35,25 +39,22 @@ class ItemLoader(object):\n         return reducer(self._values[field_name])\n \n     def get_expander(self, field_name):\n-        return getattr(self, 'expand_%s' % field_name, self.expand)\n+        expander = getattr(self, '%s_exp' % field_name, None)\n+        if not expander:\n+            expander = self._item.fields[field_name].get('expander', \\\n+                self.default_expander)\n+        return expander\n \n     def get_reducer(self, field_name):\n-        try:\n-            return getattr(self, 'reduce_%s' % field_name)\n-        except AttributeError:\n-            return self._item.fields[field_name].get('reducer', self.reduce)\n+        reducer = getattr(self, '%s_red' % field_name, None)\n+        if not reducer:\n+            reducer = self._item.fields[field_name].get('reducer', \\\n+                self.default_reducer)\n+        return reducer\n \n     def _expand_value(self, field_name, value, new_loader_args):\n-        if new_loader_args:\n-            loader_args = self._loader_args.copy()\n-            loader_args.update(new_loader_args)\n-        else: # shortcut for most common case\n         loader_args = self._loader_args\n+        if new_loader_args:\n+            loader_args = MergeDict(new_loader_args, self._loader_args)\n         expander = self.get_expander(field_name)\n         return expander(value, loader_args=loader_args)\n-\n-    def expand(self, value, loader_args): # default expander\n-        return value\n-\n-    def reduce(self, values): # default reducer\n-        return take_first(values)\n\n@@ -1,62 +1,59 @@\n \"\"\"\n-ItemLoader expanders\n+This module provides some commonly used Expanders\n \"\"\"\n \n-from types import UnboundMethodType\n-\n from scrapy.utils.misc import arg_to_iter\n from scrapy.utils.python import get_func_args\n from scrapy.utils.datatypes import MergeDict\n \n-def tree_expander(*functions, **default_loader_args):\n-    \"\"\"Create an ItemLoader expander from a list of functions using the tree\n-    expansion algorithm described below.\n+class TreeExpander(object):\n+    \"\"\"An expander which applies the given list of functions consecutively to\n+    each value returned by the previous function.\n \n-    The functions can optionally accept a ``loader_args`` argument which (if\n-    present) will be used to pass loader arguments when the function is called.\n+    The algorithm consists in an ordered list of functions, each of which\n+    receives one value and can return zero, one or more values (as a list or\n+    iterable). If a function returns more than one value, the next function in\n+    the list will be called with each of those values, potentially returning\n+    more values and thus expanding the execution into different branches, which\n+    is why this expander is called Tree Expander.\n     \n-    The tree expansion algorithm consists in an ordered list of functions, each\n-    of which receives one value and can return zero, one or more values (as a\n-    list or iterable). If a function returns more than one value, the next\n-    function in the pipeline will be called with each of those values,\n-    potentially returning more values. Hence the name \"tree expansion\n-    algorithm\".\n+    The expander functions can optionally receive a ``loader_args`` argument,\n+    which will contain the current active loader arguments.\n     \"\"\"\n-    def wrap_y(f):\n-        return lambda x, y, z: f(y)\n \n-    def wrap_xy(f):\n-        return lambda x, y, z: f(x, y)\n-\n-    def wrap_yz(f):\n-        return lambda x, y, z: f(y, z)\n-\n-    wrapped_funcs = []\n+    def __init__(self, *functions, **default_loader_args):\n+        self.default_loader_args = default_loader_args\n+        self.wrapped_funcs = []\n         for func in functions:\n-        if isinstance(func, UnboundMethodType):\n-            func = func.im_func\n             if 'loader_args' in get_func_args(func):\n-                wfunc = func\n+                wfunc = self.wrap_with_args(func)\n             else:\n-                wfunc = wrap_xy(func)\n-        else:\n-            if 'loader_args' in get_func_args(func):\n-                wfunc = wrap_yz(func)\n-            else:\n-                wfunc = wrap_y(func)\n-        wrapped_funcs.append(wfunc)\n+                wfunc = self.wrap_no_args(func)\n+            self.wrapped_funcs.append(wfunc)\n         \n-    def _expander(loader, value, loader_args):\n+    def wrap_no_args(self, f):\n+        return lambda x, y: f(x)\n+\n+    def wrap_with_args(self, f):\n+        return lambda x, y: f(x, loader_args=y)\n+\n+    def __call__(self, value, loader_args):\n         values = arg_to_iter(value)\n-        largs = default_loader_args\n+        largs = self.default_loader_args\n         if loader_args:\n-            largs = MergeDict(loader_args, default_loader_args)\n-        for func in wrapped_funcs:\n+            largs = MergeDict(loader_args, self.default_loader_args)\n+        for func in self.wrapped_funcs:\n             next_values = []\n             for v in values:\n-                next_values += arg_to_iter(func(loader, v, largs))\n+                next_values += arg_to_iter(func(v, largs))\n             values = next_values\n         return list(values)\n \n-    return _expander\n \n+class IdentityExpander(object):\n+    \"\"\"An expander which returns the original values unchanged. It doesn't\n+    support any constructor arguments.\n+    \"\"\"\n+\n+    def __call__(self, values, loader_args):\n+        return arg_to_iter(values)\n\n@@ -1,14 +1,33 @@\n \"\"\"\n-ItemLoader reducers\n+This module provides some commonly used Reducers\n \"\"\"\n \n-def take_first(values):\n+class TakeFirst(object):\n+    \"\"\"Return the first non-null value from the list to reduce\"\"\"\n+\n+    def __call__(self, values):\n         for value in values:\n             if value:\n                 return value\n \n-def identity(values):\n+\n+class Identity(object):\n+    \"\"\"Return the list to reduce untouched\"\"\"\n+\n+    def __call__(self, values):\n         return values\n \n-def join_strings(values):\n-    return u' '.join(values)\n+\n+class JoinStrings(object):\n+    \"\"\"Return a string with the contents of the list to reduce joined with the\n+    separator given in the constructor, which defaults to u' '. \n+\n+    When using the default separator, this reducer is equivalent to the\n+    function: u' '.join \n+    \"\"\"\n+\n+    def __init__(self, separator=u' '):\n+        self.separator = separator\n+\n+    def __call__(self, values):\n+        return self.separator.join(values)\n\n@@ -1,175 +1,218 @@\n import unittest\n \n from scrapy.newitem.loader import ItemLoader\n-from scrapy.newitem.loader.expanders import tree_expander\n+from scrapy.newitem.loader.expanders import TreeExpander, IdentityExpander\n+from scrapy.newitem.loader.reducers import JoinStrings, Identity\n from scrapy.newitem import Item, Field\n \n+# test items\n \n-class BaseItem(Item):\n+class NameItem(Item):\n     name = Field()\n \n-\n-class TestItem(BaseItem):\n+class TestItem(NameItem):\n     url = Field()\n     summary = Field()\n \n+# test loaders\n \n-class BaseItemLoader(ItemLoader):\n-    item_class = TestItem\n+class NameItemLoader(ItemLoader):\n+    default_item_class = TestItem\n \n+class TestItemLoader(NameItemLoader):\n+    name_exp = TreeExpander(lambda v: v.title())\n \n-class TestItemLoader(BaseItemLoader):\n-    expand_name = tree_expander(lambda v: v.title())\n+class DefaultedItemLoader(NameItemLoader):\n+    default_expander = TreeExpander(lambda v: v[:-1])\n \n+# test expanders\n \n-class DefaultedItemLoader(BaseItemLoader):\n-    expand = tree_expander(lambda v: v[:-1])\n-\n-\n-class InheritDefaultedItemLoader(DefaultedItemLoader):\n-    pass\n-\n+def expander_func_with_args(value, other=None, loader_args=None):\n+    if 'key' in loader_args:\n+        return loader_args['key']\n+    return value\n \n class ItemLoaderTest(unittest.TestCase):\n \n-    def test_get_item(self):\n-        il = TestItemLoader()\n+    def test_get_item_using_default_loader(self):\n+        i = TestItem()\n+        i['summary'] = u'lala'\n+        il = ItemLoader(item=i)\n+        il.add_value('name', u'marta')\n+        item = il.get_item()\n+        assert item is i\n+        self.assertEqual(item['summary'], u'lala')\n+        self.assertEqual(item['name'], u'marta')\n \n+    def test_get_item_using_custom_loader(self):\n+        il = TestItemLoader()\n         il.add_value('name', u'marta')\n         item = il.get_item()\n         self.assertEqual(item['name'], u'Marta')\n \n     def test_add_value(self):\n         il = TestItemLoader()\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n         self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-\n         il.add_value('name', u'pepe')\n         self.assertEqual(il.get_expanded_value('name'), [u'Marta', u'Pepe'])\n         self.assertEqual(il.get_reduced_value('name'), u'Marta')\n \n     def test_replace_value(self):\n         il = TestItemLoader()\n-\n         il.replace_value('name', u'marta')\n         self.assertEqual(il.get_expanded_value('name'), [u'Marta'])\n         self.assertEqual(il.get_reduced_value('name'), u'Marta')\n-\n         il.replace_value('name', u'pepe')\n         self.assertEqual(il.get_expanded_value('name'), [u'Pepe'])\n         self.assertEqual(il.get_reduced_value('name'), u'Pepe')\n \n-    def test_multiple_functions(self):\n-        class TestItemLoader(BaseItemLoader):\n-            expand_name = tree_expander(lambda v: v.title(), lambda v: v[:-1])\n+    def test_tree_expander_multiple_functions(self):\n+        class TestItemLoader(NameItemLoader):\n+            name_exp = TreeExpander(lambda v: v.title(), lambda v: v[:-1])\n \n         il = TestItemLoader()\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'Mart')\n-\n         item = il.get_item()\n         self.assertEqual(item['name'], u'Mart')\n \n-    def test_defaulted(self):\n-        dil = DefaultedItemLoader()\n+    def test_default_expander(self):\n+        il = DefaultedItemLoader()\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'mart')\n \n-        dil.add_value('name', u'marta')\n-        self.assertEqual(dil.get_reduced_value('name'), u'mart')\n+    def test_inherited_default_expander(self):\n+        class InheritDefaultedItemLoader(DefaultedItemLoader):\n+            pass\n \n-    def test_inherited_default(self):\n-        dil = InheritDefaultedItemLoader()\n+        il = InheritDefaultedItemLoader()\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'mart')\n \n-        dil.add_value('name', u'marta')\n-        self.assertEqual(dil.get_reduced_value('name'), u'mart')\n-\n-    def test_inheritance(self):\n+    def test_expander_inheritance(self):\n         class ChildItemLoader(TestItemLoader):\n-            expand_url = tree_expander(lambda v: v.lower())\n+            url_exp = TreeExpander(lambda v: v.lower())\n \n         il = ChildItemLoader()\n-\n         il.add_value('url', u'HTTP://scrapy.ORG')\n         self.assertEqual(il.get_reduced_value('url'), u'http://scrapy.org')\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'Marta')\n \n         class ChildChildItemLoader(ChildItemLoader):\n-            expand_url = tree_expander(lambda v: v.upper())\n-            expand_summary = tree_expander(lambda v: v)\n+            url_exp = TreeExpander(lambda v: v.upper())\n+            summary_exp = TreeExpander(lambda v: v)\n \n         il = ChildChildItemLoader()\n-\n         il.add_value('url', u'http://scrapy.org')\n         self.assertEqual(il.get_reduced_value('url'), u'HTTP://SCRAPY.ORG')\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'Marta')\n \n-    def test_identity(self):\n+    def test_empty_tree_expander(self):\n         class IdentityDefaultedItemLoader(DefaultedItemLoader):\n-            expand_name = tree_expander()\n+            name_exp = TreeExpander()\n \n         il = IdentityDefaultedItemLoader()\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'marta')\n \n-    def test_staticmethods(self):\n+    def test_identity_expander(self):\n+        class IdentityDefaultedItemLoader(DefaultedItemLoader):\n+            name_exp = IdentityExpander()\n+\n+        il = IdentityDefaultedItemLoader()\n+        il.add_value('name', u'marta')\n+        self.assertEqual(il.get_reduced_value('name'), u'marta')\n+\n+    def test_extend_expanders(self):\n         class ChildItemLoader(TestItemLoader):\n-            expand_name = tree_expander(TestItemLoader.expand_name, unicode.swapcase)\n+            name_exp = TreeExpander(TestItemLoader.name_exp, unicode.swapcase)\n \n         il = ChildItemLoader()\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'mARTA')\n \n-\n     def test_staticdefaults(self):\n         class ChildDefaultedItemLoader(DefaultedItemLoader):\n-            expand_name = tree_expander(DefaultedItemLoader.expand, unicode.swapcase)\n+            name_exp = TreeExpander(DefaultedItemLoader.default_expander, unicode.swapcase)\n \n         il = ChildDefaultedItemLoader()\n-\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'MART')\n \n-    def test_reducer(self):\n+    def test_reducer_using_function(self):\n         il = TestItemLoader()\n-\n         il.add_value('name', [u'mar', u'ta'])\n         self.assertEqual(il.get_reduced_value('name'), u'Mar')\n \n         class TakeFirstItemLoader(TestItemLoader):\n-            reduce_name = staticmethod(u\" \".join)\n+            name_red = u\" \".join\n \n         il = TakeFirstItemLoader()\n-\n         il.add_value('name', [u'mar', u'ta'])\n         self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n \n-    def test_loader_args(self):\n-        def expander_func_with_args(value, loader_args):\n-            if 'val' in loader_args:\n-                return loader_args['val']\n-            return value\n+    def test_reducer_using_classes(self):\n+        il = TestItemLoader()\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n \n+        class TakeFirstItemLoader(TestItemLoader):\n+            name_red = JoinStrings()\n+\n+        il = TakeFirstItemLoader()\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n+\n+        class TakeFirstItemLoader(TestItemLoader):\n+            name_red = JoinStrings(\"<br>\")\n+\n+        il = TakeFirstItemLoader()\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar<br>Ta')\n+\n+    def test_default_reducer(self):\n+        il = TestItemLoader()\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), u'Mar')\n+\n+        class LalaItemLoader(TestItemLoader):\n+            default_reducer = Identity()\n+\n+        il = LalaItemLoader()\n+        il.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(il.get_reduced_value('name'), [u'Mar', u'Ta'])\n+\n+    def test_expander_args_on_declaration(self):\n         class ChildItemLoader(TestItemLoader):\n-            expand_url = tree_expander(expander_func_with_args)\n+            url_exp = TreeExpander(expander_func_with_args, key=u'val')\n \n-        il = ChildItemLoader(val=u'val')\n+        il = ChildItemLoader()\n+        il.add_value('url', u'text', key=u'val')\n+        self.assertEqual(il.get_reduced_value('url'), 'val')\n+\n+    def test_expander_args_on_instantiation(self):\n+        class ChildItemLoader(TestItemLoader):\n+            url_exp = TreeExpander(expander_func_with_args)\n+\n+        il = ChildItemLoader(key=u'val')\n         il.add_value('url', u'text')\n         self.assertEqual(il.get_reduced_value('url'), 'val')\n \n+    def test_expander_args_on_assign(self):\n+        class ChildItemLoader(TestItemLoader):\n+            url_exp = TreeExpander(expander_func_with_args)\n+\n         il = ChildItemLoader()\n-        il.add_value('url', u'text', val=u'val')\n+        il.add_value('url', u'text', key=u'val')\n         self.assertEqual(il.get_reduced_value('url'), 'val')\n \n-    def test_add_value_unknown_field(self):\n+    def test_add_value_on_unknown_field(self):\n         il = TestItemLoader()\n-        il.add_value('wrong_field', [u'lala', u'lolo'])\n+        self.assertRaises(KeyError, il.add_value, 'wrong_field', [u'lala', u'lolo'])\n \n-        self.assertRaises(KeyError, il.get_item)\n+if __name__ == \"__main__\":\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a23ff3705063df065b1c7685a0aef74bbb8660bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 21 | Churn Cumulative: 789 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,8 +12,9 @@ class ItemLoader(object):\n     default_reducer = TakeFirst()\n \n     def __init__(self, **loader_args):\n-        self._response = loader_args.get('response')\n-        self._item = loader_args.setdefault('item', self.default_item_class())\n+        if 'item' not in loader_args:\n+            loader_args['item'] = self.default_item_class()\n+        self._item = loader_args['item']\n         self._loader_args = loader_args\n         self._values = defaultdict(list)\n \n\n@@ -127,7 +127,7 @@ class ItemLoaderTest(unittest.TestCase):\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'marta')\n \n-    def test_extend_expanders(self):\n+    def test_extend_custom_expanders(self):\n         class ChildItemLoader(TestItemLoader):\n             name_exp = TreeExpander(TestItemLoader.name_exp, unicode.swapcase)\n \n@@ -135,7 +135,7 @@ class ItemLoaderTest(unittest.TestCase):\n         il.add_value('name', u'marta')\n         self.assertEqual(il.get_reduced_value('name'), u'mARTA')\n \n-    def test_staticdefaults(self):\n+    def test_extend_default_expanders(self):\n         class ChildDefaultedItemLoader(DefaultedItemLoader):\n             name_exp = TreeExpander(DefaultedItemLoader.default_expander, unicode.swapcase)\n \n@@ -210,6 +210,18 @@ class ItemLoaderTest(unittest.TestCase):\n         il.add_value('url', u'text', key=u'val')\n         self.assertEqual(il.get_reduced_value('url'), 'val')\n \n+    def test_item_passed_to_expander_functions(self):\n+        def exp_func(value, loader_args):\n+            return loader_args['item']['name']\n+\n+        class ChildItemLoader(TestItemLoader):\n+            url_exp = TreeExpander(exp_func)\n+\n+        it = TestItem(name='marta')\n+        il = ChildItemLoader(item=it)\n+        il.add_value('url', u'text', key=u'val')\n+        self.assertEqual(il.get_reduced_value('url'), 'marta')\n+\n     def test_add_value_on_unknown_field(self):\n         il = TestItemLoader()\n         self.assertRaises(KeyError, il.add_value, 'wrong_field', [u'lala', u'lolo'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#de48406f104faf73a04ed5dd3b0f7489def63716", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 27/27 | Churn Δ: 3 | Churn Cumulative: 3 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -16,6 +16,9 @@ class ResponseTypes(object):\n \n     CLASSES = {\n         'text/html': 'scrapy.http.HtmlResponse',\n+        'application/atom+xml': 'scrapy.http.XmlResponse',\n+        'application/rdf+xml': 'scrapy.http.XmlResponse',\n+        'application/rss+xml': 'scrapy.http.XmlResponse',\n         'application/xhtml+xml': 'scrapy.http.HtmlResponse',\n         'application/xml': 'scrapy.http.XmlResponse',\n         'text/xml': 'scrapy.http.XmlResponse',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#80db8abee28c84ead88d041175398be2e9449f50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 32 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -6,10 +6,10 @@ caused by spiders code.\n The results are collected using the StatsCollector.\n \n This extension introduces a big impact on crawling performance, so enable only\n-when needed.\n+for debugging.\n \"\"\"\n \n-import datetime\n+from time import time\n \n from scrapy.xlib.pydispatch import dispatcher\n \n@@ -37,15 +37,14 @@ class SpiderProfiler(object):\n \n     def _profiled_callback(self, function, spider):\n         def new_callback(*args, **kwargs):\n-            tbefore = datetime.datetime.now()\n+            tbefore = time()\n             mbefore = self._memusage()\n             r = function(*args, **kwargs)\n-            tafter = datetime.datetime.now()\n             mafter = self._memusage()\n-            ct = tafter-tbefore\n+            ct = time() - tbefore\n             domain = spider.domain_name\n-            tcc = stats.get_value('profiling/total_callback_time', datetime.timedelta(0), domain=domain)\n-            sct = stats.get_value('profiling/slowest_callback_time', datetime.timedelta(0), domain=domain)\n+            tcc = stats.get_value('profiling/total_callback_time', 0, domain=domain)\n+            sct = stats.get_value('profiling/slowest_callback_time', 0, domain=domain)\n             stats.set_value('profiling/total_callback_time' % spider.domain_name, tcc+ct, domain=domain)\n             if ct > sct:\n                 stats.set_value('profiling/slowest_callback_time', ct, domain=domain)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#6ef991b71f30283eb1af4f427e2ee6e165388025", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 834 | Contributors (this commit): 4 | Commits (past 90d): 48 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -93,7 +93,7 @@ class ExecutionEngine(object):\n         if not self.running:\n             self.control_reactor = control_reactor\n             reactor.callLater(0, self._mainloop)\n-            self.start_time = datetime.now()\n+            self.start_time = datetime.utcnow()\n             signals.send_catch_log(signal=signals.engine_started, sender=self.__class__)\n             self.addtask(self._mainloop, 5.0)\n             for tsk, interval, now in self.tasks:\n@@ -328,7 +328,7 @@ class ExecutionEngine(object):\n         s = \"Execution engine status\\n\\n\"\n \n         global_tests = [\n-            \"datetime.now()-self.start_time\", \n+            \"datetime.utcnow()-self.start_time\", \n             \"self.is_idle()\", \n             \"self.scheduler.is_idle()\",\n             \"len(self.scheduler.pending_requests)\",\n\n@@ -18,7 +18,7 @@ class MysqlStatsCollector(StatsCollector):\n         \n     def close_domain(self, domain, reason):\n         if self._mysql_conn:\n-            stored = datetime.now()\n+            stored = datetime.utcnow()\n             datas = pickle.dumps(self._stats[domain])\n             table = 'domain_data_history'\n \n\n@@ -35,7 +35,7 @@ class SimpledbStatsCollector(StatsCollector):\n         super(SimpledbStatsCollector, self).close_domain(domain, reason)\n \n     def _persist_to_sdb(self, domain, stats):\n-        ts = datetime.now().isoformat()\n+        ts = datetime.utcnow().isoformat()\n         sdb_item_id = \"%s_%s\" % (domain, ts)\n         sdb_item = dict([(k, self._to_sdb_value(v)) for k, v in stats.iteritems()])\n         sdb_item['domain'] = domain\n\n@@ -29,12 +29,12 @@ class CoreStats(object):\n         dispatcher.connect(self.item_dropped, signal=signals.item_dropped)\n \n     def stats_domain_opened(self, domain):\n-        stats.set_value('start_time', datetime.datetime.now(), domain=domain)\n+        stats.set_value('start_time', datetime.datetime.utcnow(), domain=domain)\n         stats.set_value('envinfo/host', stats.get_value('envinfo/host'), domain=domain)\n         stats.inc_value('domain_count/opened')\n \n     def stats_domain_closing(self, domain, reason):\n-        stats.set_value('finish_time', datetime.datetime.now(), domain=domain)\n+        stats.set_value('finish_time', datetime.datetime.utcnow(), domain=domain)\n         stats.set_value('finish_status', 'OK' if reason == 'finished' else reason, domain=domain)\n         stats.inc_value('domain_count/%s' % reason, domain=domain)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c3f7bfea1fc050be15ad0c129928af8f3a7dc0da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 34 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,17 +3,18 @@ Functions for dealing with markup text\n \"\"\"\n \n import re\n-from htmlentitydefs import name2codepoint as entity_defs\n+from htmlentitydefs import name2codepoint\n \n from scrapy.utils.python import str_to_unicode\n \n _ent_re = re.compile(r'&(#?(x?))([^&;\\s]+);')\n _tag_re = re.compile(r'<[a-zA-Z\\/!].*?>', re.DOTALL)\n \n-def remove_entities(text, keep=(), remove_illegal=True):\n+def remove_entities(text, keep=(), remove_illegal=True, encoding='utf-8'):\n     \"\"\"Remove entities from the given text.\n \n-    'text' can be a unicode string or a regular string encoded as 'utf-8'\n+    'text' can be a unicode string or a regular string encoded in the given\n+    `encoding` (which defaults to 'utf-8').\n \n     If 'keep' is passed (with a list of entity names) those entities will\n     be kept (they won't be removed).\n@@ -30,7 +31,6 @@ def remove_entities(text, keep=(), remove_illegal=True):\n \n     def convert_entity(m):\n         entity_body = m.group(3)\n-\n         if m.group(1):\n             try:\n                 if m.group(2):\n@@ -43,20 +43,16 @@ def remove_entities(text, keep=(), remove_illegal=True):\n             if entity_body in keep:\n                 return m.group(0)\n             else:\n-                number = entity_defs.get(entity_body)\n-\n+                number = name2codepoint.get(entity_body)\n         if number is not None:\n             try:\n                 return unichr(number)\n             except ValueError:\n                 pass\n \n-        if remove_illegal:\n-            return u''\n-        else:\n-            return m.group(0)\n+        return u'' if remove_illegal else m.group(0)\n \n-    return _ent_re.sub(convert_entity, str_to_unicode(text))\n+    return _ent_re.sub(convert_entity, str_to_unicode(text, encoding))\n \n def has_entities(text):\n     return bool(_ent_re.search(str_to_unicode(text)))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d142489b8113ff70458f9b8c353669fe0d044d40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 30 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,6 +33,10 @@ class UtilsMarkupTest(unittest.TestCase):\n         # check browser hack for numeric character references in the 80-9F range\n         self.assertEqual(remove_entities('x&#153;y', encoding='cp1252'), u'x\\u2122y')\n \n+        # encoding\n+        self.assertEqual(remove_entities('x\\x99&#153;&#8482;y', encoding='cp1252'), \\\n+                         u'x\\u2122\\u2122\\u2122y')\n+\n     def test_replace_tags(self):\n         # make sure it always return uncode\n         assert isinstance(replace_tags('no entities'), unicode)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#3658acd9dac1dbf25266043ca18e6041118c949b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 1341 | Contributors (this commit): 3 | Commits (past 90d): 25 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -30,7 +30,7 @@ class Item(DictMixin, BaseItem):\n \n     def __init__(self, *args, **kwargs):\n         self._values = {}\n-        if args or kwargs: # avoid instantiating dict for most common case\n+        if args or kwargs: # avoid creating dict for most common case\n             for k, v in dict(*args, **kwargs).iteritems():\n                 self[k] = v\n \n@@ -39,11 +39,9 @@ class Item(DictMixin, BaseItem):\n             return self._values[key]\n         except KeyError:\n             field = self.fields[key]\n-            default_factory = field.get('default_factory')\n-            if default_factory:\n-                return default_factory()\n-            else:\n-                raise KeyError(key)\n+            if 'default' in field:\n+                return field['default']\n+            raise\n \n     def __setitem__(self, key, value):\n         if key in self.fields:\n\n@@ -44,7 +44,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_default_value(self):\n         class TestItem(Item):\n-            name = Field(default_factory=lambda: u'John')\n+            name = Field(default=u'John')\n  \n         i = TestItem()\n         self.assertEqual(i['name'], u'John')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#efa08318be39ded91ce9ce8a868e4ac8e6e4db93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 34 | Files Changed: 4 | Hunks: 11 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 48 | Churn Cumulative: 1007 | Contributors (this commit): 1 | Commits (past 90d): 19 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -11,10 +11,10 @@ class ItemLoader(object):\n     default_expander = IdentityExpander()\n     default_reducer = TakeFirst()\n \n-    def __init__(self, **loader_args):\n-        if 'item' not in loader_args:\n-            loader_args['item'] = self.default_item_class()\n-        self._item = loader_args['item']\n+    def __init__(self, item=None, **loader_args):\n+        if not item:\n+            item = self.default_item_class()\n+        self._item = loader_args['item'] = item\n         self._loader_args = loader_args\n         self._values = defaultdict(list)\n \n\n@@ -1,5 +1,7 @@\n \"\"\"\n-This module provides some commonly used Expanders\n+This module provides some commonly used Expanders.\n+\n+See documentation in docs/topics/newitem-loader.rst\n \"\"\"\n \n from scrapy.utils.misc import arg_to_iter\n@@ -7,19 +9,6 @@ from scrapy.utils.python import get_func_args\n from scrapy.utils.datatypes import MergeDict\n \n class TreeExpander(object):\n-    \"\"\"An expander which applies the given list of functions consecutively to\n-    each value returned by the previous function.\n-\n-    The algorithm consists in an ordered list of functions, each of which\n-    receives one value and can return zero, one or more values (as a list or\n-    iterable). If a function returns more than one value, the next function in\n-    the list will be called with each of those values, potentially returning\n-    more values and thus expanding the execution into different branches, which\n-    is why this expander is called Tree Expander.\n-    \n-    The expander functions can optionally receive a ``loader_args`` argument,\n-    which will contain the current active loader arguments.\n-    \"\"\"\n \n     def __init__(self, *functions, **default_loader_args):\n         self.default_loader_args = default_loader_args\n@@ -51,9 +40,6 @@ class TreeExpander(object):\n \n \n class IdentityExpander(object):\n-    \"\"\"An expander which returns the original values unchanged. It doesn't\n-    support any constructor arguments.\n-    \"\"\"\n \n     def __call__(self, values, loader_args):\n         return arg_to_iter(values)\n\n@@ -1,9 +1,10 @@\n \"\"\"\n-This module provides some commonly used Reducers\n+This module provides some commonly used Reducers.\n+\n+See documentation in docs/topics/newitem-loader.rst\n \"\"\"\n \n class TakeFirst(object):\n-    \"\"\"Return the first non-null value from the list to reduce\"\"\"\n \n     def __call__(self, values):\n         for value in values:\n@@ -12,19 +13,12 @@ class TakeFirst(object):\n \n \n class Identity(object):\n-    \"\"\"Return the list to reduce untouched\"\"\"\n \n     def __call__(self, values):\n         return values\n \n \n-class JoinStrings(object):\n-    \"\"\"Return a string with the contents of the list to reduce joined with the\n-    separator given in the constructor, which defaults to u' '. \n-\n-    When using the default separator, this reducer is equivalent to the\n-    function: u' '.join \n-    \"\"\"\n+class Join(object):\n \n     def __init__(self, separator=u' '):\n         self.separator = separator\n\n@@ -2,7 +2,7 @@ import unittest\n \n from scrapy.newitem.loader import ItemLoader\n from scrapy.newitem.loader.expanders import TreeExpander, IdentityExpander\n-from scrapy.newitem.loader.reducers import JoinStrings, Identity\n+from scrapy.newitem.loader.reducers import Join, Identity\n from scrapy.newitem import Item, Field\n \n # test items\n@@ -161,14 +161,14 @@ class ItemLoaderTest(unittest.TestCase):\n         self.assertEqual(il.get_reduced_value('name'), u'Mar')\n \n         class TakeFirstItemLoader(TestItemLoader):\n-            name_red = JoinStrings()\n+            name_red = Join()\n \n         il = TakeFirstItemLoader()\n         il.add_value('name', [u'mar', u'ta'])\n         self.assertEqual(il.get_reduced_value('name'), u'Mar Ta')\n \n         class TakeFirstItemLoader(TestItemLoader):\n-            name_red = JoinStrings(\"<br>\")\n+            name_red = Join(\"<br>\")\n \n         il = TakeFirstItemLoader()\n         il.add_value('name', [u'mar', u'ta'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
