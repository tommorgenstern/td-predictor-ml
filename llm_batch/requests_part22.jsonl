{"custom_id": "requests#c4f013a6f999c2e945e00b1f052074b9c9377842", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 1135 | Contributors (this commit): 9 | Commits (past 90d): 43 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,7 @@ This module implements the Requests API.\n from ._config import get_config\n from .models import Request, Response\n from .status_codes import codes\n-from .hooks import dispatch_hooks\n+from .hooks import dispatch_hook\n from .utils import cookiejar_from_dict, header_expand\n \n \n@@ -73,13 +73,13 @@ def request(method, url,\n     )\n \n     # Arguments manipulation hook.\n-    args = dispatch_hooks('args', hooks, args)\n+    args = dispatch_hook('args', hooks, args)\n \n     # Create Request object.\n     r = Request(**args)\n \n     # Pre-request hook.\n-    r = dispatch_hooks('pre_request', hooks, r)\n+    r = dispatch_hook('pre_request', hooks, r)\n \n     # Only construct the request (for async)\n     if _return_request:\n@@ -90,10 +90,10 @@ def request(method, url,\n \n     # TODO: Add these hooks inline.\n     # Post-request hook.\n-    r = dispatch_hooks('post_request', hooks, r)\n+    r = dispatch_hook('post_request', hooks, r)\n \n     # Response manipulation hook.\n-    r.response = dispatch_hooks('response', hooks, r.response)\n+    r.response = dispatch_hook('response', hooks, r.response)\n \n     return r.response\n \n\n@@ -26,7 +26,7 @@ import warnings\n import collections\n \n \n-def dispatch_hooks(key, hooks, hook_data):\n+def dispatch_hook(key, hooks, hook_data):\n     \"\"\"Dipatches a hook dictionary on a given peice of data.\"\"\"\n \n     hooks = (hooks or {}).get(key, [])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#93c44157bab8ba5fc4dfe7c4d890489b4fd02ff1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 26 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 98 | Churn Cumulative: 323 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,38 +4,84 @@\n requests.async\n ~~~~~~~~~~~~~~\n \n-    This module implements the main Requests system, after monkey-patching\n-    the urllib2 module with eventlet or gevent..\n-\n-    :copyright: (c) 2011 by Kenneth Reitz.\n-    :license: ISC, see LICENSE for more details.\n+This module contains an asynchronous replica of ``requests.api``, powered\n+by gevent. All API methods return a ``Request`` instance (as opposed to\n+``Response``). A list of requests can be sent with ``map()``.\n \"\"\"\n \n-\n-from __future__ import absolute_import\n-\n-import urllib\n-import urllib2\n-\n-from urllib2 import HTTPError\n-\n-\n try:\n-    import eventlet\n-    eventlet.monkey_patch()\n+    import gevent\n+    from gevent import monkey as curious_george\n except ImportError:\n-    pass\n+    raise RuntimeError('Gevent is required for requests.async.')\n \n-if not 'eventlet' in locals():\n-    try:\n-        from gevent import monkey\n-        monkey.patch_all()\n-    except ImportError:\n-        pass\n+# Monkey-patch.\n+curious_george.patch_all(thread=False)\n+\n+from . import api\n+from .hooks import dispatch_hook\n+from .packages.urllib3.poolmanager import PoolManager\n+\n+\n+__all__ = (\n+    'map',\n+    'get', 'head', 'post', 'put', 'patch', 'delete', 'request'\n+)\n+\n+\n+def _patched(f):\n+    \"\"\"Patches a given API function to not send.\"\"\"\n+\n+    def wrapped(*args, **kwargs):\n+        return f(*args, _return_request=True, **kwargs)\n+\n+    return wrapped\n+\n+\n+def _send(r, pools=None):\n+    \"\"\"Sends a given Request object.\"\"\"\n+\n+    if pools:\n+        r._pools = pools\n+\n+    r.send()\n+\n+    # Post-request hook.\n+    r = dispatch_hook('post_request', r.hooks, r)\n+\n+    # Response manipulation hook.\n+    r.response = dispatch_hook('response', r.hooks, r.response)\n+\n+    return r.response\n+\n+\n+# Patched requests.api functions.\n+get = _patched(api.get)\n+head = _patched(api.head)\n+post = _patched(api.post)\n+put = _patched(api.put)\n+patch = _patched(api.patch)\n+delete = _patched(api.delete)\n+request = _patched(api.request)\n+\n+\n+def map(requests, keep_alive=False):\n+    \"\"\"Concurrently converts a list of Requests to Responses.\n+\n+    :param requests: a collection of Request objects.\n+    :param keep_alive: If True, HTTP Keep-Alive will be used.\n+    \"\"\"\n+\n+    if keep_alive:\n+        pools = PoolManager(num_pools=len(requests), maxsize=1)\n+    else:\n+        pools = None\n+\n+    jobs = [gevent.spawn(_send, r, pools=pools) for r in requests]\n+    gevent.joinall(jobs)\n+\n+    return [r.response for r in requests]\n \n \n-if not 'eventlet' in locals():\n-    raise ImportError('No Async adaptations of urllib2 found!')\n \n \n-from .core import *\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9518d053a4423a58f1a835b1f721179ba2f1bd4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 9 | Churn Cumulative: 1050 | Contributors (this commit): 10 | Commits (past 90d): 42 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,13 +17,12 @@ from .status_codes import codes\n from .hooks import dispatch_hook\n from .utils import cookiejar_from_dict\n \n-from urlparse import urlparse\n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n def request(method, url,\n     params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-    timeout=None, allow_redirects=False, proxies=None, hooks=None):\n+    timeout=None, allow_redirects=False, proxies=None, hooks=None, return_response=True):\n \n     \"\"\"Constructs and sends a :class:`Request <models.Request>`.\n     Returns :class:`Response <models.Response>` object.\n@@ -68,6 +67,10 @@ def request(method, url,\n     # Pre-request hook.\n     r = dispatch_hook('pre_request', hooks, r)\n \n+    # Don't send if asked nicely.\n+    if not return_response:\n+        return r\n+\n     # Send the HTTP Request.\n     r.send()\n \n\n@@ -33,7 +33,7 @@ def _patched(f):\n     \"\"\"Patches a given API function to not send.\"\"\"\n \n     def wrapped(*args, **kwargs):\n-        return f(*args, _return_request=True, **kwargs)\n+        return f(*args, return_response=False, **kwargs)\n \n     return wrapped\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5537902796d75ef5ce739e89ee993a801da3b2c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 335 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -20,7 +20,6 @@ curious_george.patch_all(thread=False)\n \n from . import api\n from .hooks import dispatch_hook\n-from .packages.urllib3.poolmanager import PoolManager\n \n \n __all__ = (\n@@ -65,19 +64,14 @@ delete = _patched(api.delete)\n request = _patched(api.request)\n \n \n-def map(requests, keep_alive=False):\n+def map(requests):\n     \"\"\"Concurrently converts a list of Requests to Responses.\n \n     :param requests: a collection of Request objects.\n     :param keep_alive: If True, HTTP Keep-Alive will be used.\n     \"\"\"\n \n-    if keep_alive:\n-        pools = PoolManager(num_pools=len(requests), maxsize=1)\n-    else:\n-        pools = None\n-\n-    jobs = [gevent.spawn(_send, r, pools=pools) for r in requests]\n+    jobs = [gevent.spawn(_send, r) for r in requests]\n     gevent.joinall(jobs)\n \n     return [r.response for r in requests]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#892fcd6cc0cadd8308fa55f229cc611377dfe07d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 52/52 | Churn Δ: 5 | Churn Cumulative: 3551 | Contributors (this commit): 20 | Commits (past 90d): 148 | Contributors (cumulative): 28 | DMM Complexity: 0.5\n\nDIFF:\n@@ -54,6 +54,7 @@ def request(method, url,\n         cookiejar = cookies,\n         files = files,\n         auth = auth,\n+        hooks = hooks,\n         timeout = timeout or config.settings.timeout,\n         allow_redirects = allow_redirects,\n         proxies = proxies or config.settings.proxies,\n\n@@ -37,7 +37,7 @@ class Request(object):\n     def __init__(self,\n         url=None, headers=dict(), files=None, method=None, data=dict(),\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n-        allow_redirects=False, proxies=None):\n+        allow_redirects=False, proxies=None, hooks=None):\n \n         #: Float describ the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -94,6 +94,8 @@ class Request(object):\n         #: True if Request has been sent.\n         self.sent = False\n \n+        #: Event-handling hooks.\n+        self.hooks = hooks\n \n         # Header manipulation and defaults.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#76b8afee9476b38af6af1249565eda5ba48b0774", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1033 | Contributors (this commit): 15 | Commits (past 90d): 16 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ import requests\n from requests.sessions import Session\n \n \n-HTTPBIN_URL = 'http://httpbin.org/'\n+HTTPBIN_URL = 'http://httpbin.ep.io/'\n HTTPSBIN_URL = 'https://httpbin.ep.io/'\n \n # HTTPBIN_URL = 'http://staging.httpbin.org/'\n@@ -42,6 +42,8 @@ SERVICES = (httpbin, httpsbin)\n class RequestsTestSuite(unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n \n+    # It goes to eleven.\n+    _multiprocess_can_split_ = True\n \n     def setUp(self):\n         pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#597f0ae5fd2bf512737d022b8bc9f908657c47fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 2827 | Contributors (this commit): 19 | Commits (past 90d): 113 | Contributors (cumulative): 19 | DMM Complexity: 0.0\n\nDIFF:\n@@ -361,6 +361,8 @@ class Request(object):\n                 if hasattr(why, 'reason'):\n                     if isinstance(why.reason, socket.timeout):\n                         why = Timeout(why)\n+                    elif isinstance(why.reason, socket.error):\n+                        why = Timeout(why)\n \n                 self._build_response(why, is_error=True)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3afd07451c7a5298da51f895701ddec431614388", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 342 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -64,16 +64,19 @@ delete = _patched(api.delete)\n request = _patched(api.request)\n \n \n-def map(requests):\n+def map(requests, prefetch=True):\n     \"\"\"Concurrently converts a list of Requests to Responses.\n \n     :param requests: a collection of Request objects.\n-    :param keep_alive: If True, HTTP Keep-Alive will be used.\n+    :param prefetch: If False, the content will not be downloaded immediately.\n     \"\"\"\n \n     jobs = [gevent.spawn(_send, r) for r in requests]\n     gevent.joinall(jobs)\n \n+    if prefetch:\n+        [r.response.content for r in requests]\n+\n     return [r.response for r in requests]\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cc350d54b7274a2274af780d34288f4a23bdb6fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2680 | Contributors (this commit): 8 | Commits (past 90d): 17 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.1'\n-__build__ = 0x000601\n+__version__ = '0.6.3'\n+__build__ = 0x000603\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b14fa0764bc5e1340762e45af999334e9b74f642", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2828 | Contributors (this commit): 19 | Commits (past 90d): 114 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -182,7 +182,6 @@ class Request(object):\n                 response._close = resp.close\n \n                 if self.cookiejar:\n-\n                     response.cookies = dict_from_cookiejar(self.cookiejar)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aa31b6b4dd199ba733b5e03226a8019a2b9c7c66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 9/6 | Churn Δ: 16 | Churn Cumulative: 3570 | Contributors (this commit): 20 | Commits (past 90d): 152 | Contributors (cumulative): 28 | DMM Complexity: 0.38461538461538464\n\nDIFF:\n@@ -112,13 +112,9 @@ def get(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-    return request('GET', url, **kwargs)\n+\n     kwargs.setdefault('allow_redirects', True)\n     return request('GET', url, **kwargs)\n-    if \"allow_redirects\" not in kwargs:\n-        kwargs[\"allow_redirects\"] = True\n-\n-    return request('get', url, **kwargs)\n \n \n def head(url, **kwargs):\n@@ -141,13 +137,8 @@ def head(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-    return request('HEAD', url, **kwargs)\n     kwargs.setdefault('allow_redirects', True)\n     return request('HEAD', url, **kwargs)\n-    if \"allow_redirects\" not in kwargs:\n-        kwargs[\"allow_redirects\"] = True\n-\n-    return request('head', url, **kwargs)\n \n \n def post(url, data='', **kwargs):\n\n@@ -214,12 +214,7 @@ class Request(object):\n \n             while (\n                 ('location' in r.headers) and\n-                ((self.method in ('GET', 'HEAD')) or\n-                (r.status_code is codes.see_other) or\n-                (self.allow_redirects))\n                 ((r.status_code is codes.see_other) or (self.allow_redirects))\n-                ((r.status_code is codes.see_other) or\n-                (self.allow_redirects))\n             ):\n \n                 r.fo.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#33dec52b8eb4eb6ddc2677981bb5d5cf70ada59b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 26 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 764 | Contributors (this commit): 9 | Commits (past 90d): 38 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -38,6 +38,7 @@ def request(method, url,\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n+    :param return_response: (optional) If False, an un-sent Request object will returned.\n     \"\"\"\n \n     method = str(method).upper()\n@@ -96,19 +97,6 @@ def get(url, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n-    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n-    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n-    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n-    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n-    :param allow_redirects: (optional) Boolean. Set to False to disable redirect following.\n-    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n@@ -121,19 +109,6 @@ def head(url, **kwargs):\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n-    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n-    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n-    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n-    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n-    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n-    :param timeout: (optional) Float describing the timeout of the request.\n-    :param allow_redirects: (optional) Boolean. Set to False to disable redirect following.\n-    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#573ab095e44690e13047273b4f67eafcfd6613c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2843 | Contributors (this commit): 19 | Commits (past 90d): 116 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -189,7 +189,7 @@ class Request(object):\n \n             try:\n                 response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n-                response.fo = resp\n+                response.raw = resp\n \n                 if self.cookiejar:\n                     response.cookies = dict_from_cookiejar(self.cookiejar)\n@@ -217,7 +217,7 @@ class Request(object):\n                 ((r.status_code is codes.see_other) or (self.allow_redirects))\n             ):\n \n-                r.fo.close()\n+                r.raw.close()\n \n                 if not len(history) < settings.max_redirects:\n                     raise TooManyRedirects()\n@@ -407,7 +407,7 @@ class Response(object):\n         self.headers = CaseInsensitiveDict()\n \n         #: File-like object representation of response (for advanced usage).\n-        self.fo = None\n+        self.raw = None\n \n         #: Final URL location of Response.\n         self.url = None\n@@ -451,7 +451,7 @@ class Response(object):\n \n         def generate():\n             while 1:\n-                chunk = self.fo.read(chunk_size)\n+                chunk = self.raw.read(chunk_size)\n                 if not chunk:\n                     break\n                 yield chunk\n@@ -479,7 +479,7 @@ class Response(object):\n                                'already consumed')\n \n         # Read the contents.\n-        self._content = self.fo.read()\n+        self._content = self.raw.read()\n \n         # Decode GZip'd content.\n         if 'gzip' in self.headers.get('content-encoding', ''):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#244172bdd4b66ec7fdebdc76850b9ee08412a16c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2684 | Contributors (this commit): 8 | Commits (past 90d): 18 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.3'\n-__build__ = 0x000603\n+__version__ = '0.6.4'\n+__build__ = 0x000604\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9011852db06ae94e1c79900172a0000e846a44dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 15 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-\"\"\"\n-requests.monkeys\n-\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#84e89429f0414fe0d6b9497b16833bc6bee48957", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 346 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,7 +32,9 @@ def _patched(f):\n     \"\"\"Patches a given API function to not send.\"\"\"\n \n     def wrapped(*args, **kwargs):\n-        return f(*args, return_response=False, **kwargs)\n+        new_kwargs = dict(kwargs)\n+        new_kwargs['return_response'] = False\n+        return f(*args, **kwargs)\n \n     return wrapped\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35bfa9e91d93c695f5cd421148a472e61da05a11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 46 | Files Changed: 1 | Hunks: 13 | Methods Changed: 13 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 69 | Churn Cumulative: 1102 | Contributors (this commit): 15 | Commits (past 90d): 17 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -16,11 +16,7 @@ import requests\n from requests.sessions import Session\n \n \n-HTTPBIN_URL = 'http://httpbin.ep.io/'\n-HTTPSBIN_URL = 'https://httpbin.ep.io/'\n-\n-# HTTPBIN_URL = 'http://staging.httpbin.org/'\n-# HTTPSBIN_URL = 'https://httpbin-staging.ep.io/'\n+HTTPBIN_URL = 'http://127.0.0.1:44444/'\n \n \n def httpbin(*suffix):\n@@ -29,15 +25,9 @@ def httpbin(*suffix):\n     return HTTPBIN_URL + '/'.join(suffix)\n \n \n-def httpsbin(*suffix):\n-    \"\"\"Returns url for HTTPSBIN resource.\"\"\"\n-\n-    return HTTPSBIN_URL + '/'.join(suffix)\n-\n-\n-SERVICES = (httpbin, httpsbin)\n-\n+SERVICES = (httpbin, )\n \n+_httpbin = False\n \n class RequestsTestSuite(unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n@@ -46,12 +36,25 @@ class RequestsTestSuite(unittest.TestCase):\n     _multiprocess_can_split_ = True\n \n     def setUp(self):\n-        pass\n+\n+        global _httpbin\n+\n+        if not _httpbin:\n+            import envoy\n+            self.httpbin = envoy.connect('httpbin 44444')\n+            # print self.httpbin\n+\n+            _httpbin = True\n+            # print '!'/\n+\n+            import time\n+            time.sleep(1)\n+\n \n \n     def tearDown(self):\n         \"\"\"Teardown.\"\"\"\n-        pass\n+        # self.httpbin.kill()\n \n \n     def test_invalid_url(self):\n@@ -59,7 +62,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_HTTP_200_OK_GET(self):\n-        r = requests.get(httpbin('/'))\n+        r = requests.get(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n \n     def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n@@ -70,10 +73,6 @@ class RequestsTestSuite(unittest.TestCase):\n \tr = requests.get(httpbin('redirect', '1'), allow_redirects=False)\n \tself.assertEqual(r.status_code, 302)\n \n-    def test_HTTPS_200_OK_GET(self):\n-        r = requests.get(httpsbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n \n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n@@ -112,12 +111,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_HTTP_200_OK_HEAD(self):\n-        r = requests.head(httpbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTPS_200_OK_HEAD(self):\n-        r = requests.head(httpsbin('/'))\n+        r = requests.head(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n \n \n@@ -126,21 +120,11 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n \n-    def test_HTTPS_200_OK_PUT(self):\n-        r = requests.put(httpsbin('put'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n     def test_HTTP_200_OK_PATCH(self):\n         r = requests.patch(httpbin('patch'))\n         self.assertEqual(r.status_code, 200)\n \n \n-    def test_HTTPS_200_OK_PATCH(self):\n-        r = requests.patch(httpsbin('patch'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n     def test_AUTH_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n@@ -206,7 +190,7 @@ class RequestsTestSuite(unittest.TestCase):\n             r = requests.get(service('status', '500'))\n             self.assertEqual(bool(r), False)\n \n-            r = requests.get(service('/'))\n+            r = requests.get(service('/get'))\n             self.assertEqual(bool(r), True)\n \n \n@@ -257,7 +241,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n         for service in SERVICES:\n \n-            url = service('/')\n+            url = service('/get')\n \n             requests.get(url, params={'foo': u'føø'})\n             requests.get(url, params={u'føø': u'føø'})\n@@ -470,14 +454,7 @@ class RequestsTestSuite(unittest.TestCase):\n     def test_session_HTTP_200_OK_GET(self):\n \n         s = Session()\n-        r = s.get(httpbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_session_HTTPS_200_OK_GET(self):\n-\n-        s = Session()\n-        r = s.get(httpsbin('/'))\n+        r = s.get(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d85c5356dc0cb0e288ff39c6802a1fcaaf7be635", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 1108 | Contributors (this commit): 15 | Commits (past 90d): 18 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -370,9 +370,9 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(rbody.get('data'), 'foobar')\n \n \n-    def test_idna(self):\n-        r = requests.get(u'http://➡.ws/httpbin')\n-        assert 'httpbin' in r.url\n+    # def test_idna(self):\n+    #     r = requests.get(u'http://➡.ws/httpbin')\n+    #     assert 'httpbin' in r.url\n \n \n     def test_urlencoded_get_query_multivalued_param(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#12997080a8331f6b1e22aa91fad625a3be58b056", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 1127 | Contributors (this commit): 15 | Commits (past 90d): 19 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,8 +3,11 @@\n \n from __future__ import with_statement\n \n-import unittest\n+import time\n import cookielib\n+import unittest\n+\n+import envoy\n \n try:\n     import omnijson as json\n@@ -16,7 +19,8 @@ import requests\n from requests.sessions import Session\n \n \n-HTTPBIN_URL = 'http://127.0.0.1:44444/'\n+HTTPBIN_URL = 'http://0.0.0.0:7045/'\n+# HTTPBIN_URL = 'http://127.0.0.1:8000/'\n \n \n def httpbin(*suffix):\n@@ -40,14 +44,10 @@ class RequestsTestSuite(unittest.TestCase):\n         global _httpbin\n \n         if not _httpbin:\n-            import envoy\n-            self.httpbin = envoy.connect('httpbin 44444')\n-            # print self.httpbin\n+\n+            self.httpbin = envoy.connect('gunicorn httpbin:app --bind=0.0.0.0:7045')\n \n             _httpbin = True\n-            # print '!'/\n-\n-            import time\n             time.sleep(1)\n \n \n@@ -122,6 +122,9 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_HTTP_200_OK_PATCH(self):\n         r = requests.patch(httpbin('patch'))\n+        print r.__dict__\n+        print r.content\n+        print r.url\n         self.assertEqual(r.status_code, 200)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7a0f3638b5fc8e196cfeebc4e506ea627d992483", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1133 | Contributors (this commit): 15 | Commits (past 90d): 20 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -5,6 +5,7 @@ from __future__ import with_statement\n \n import time\n import cookielib\n+import os\n import unittest\n \n import envoy\n@@ -18,8 +19,9 @@ import requests\n \n from requests.sessions import Session\n \n+PORT = os.environ.get('HTTPBIN_PORT', '7045')\n \n-HTTPBIN_URL = 'http://0.0.0.0:7045/'\n+HTTPBIN_URL = 'http://0.0.0.0:%s/' % (PORT)\n # HTTPBIN_URL = 'http://127.0.0.1:8000/'\n \n \n@@ -45,7 +47,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n         if not _httpbin:\n \n-            self.httpbin = envoy.connect('gunicorn httpbin:app --bind=0.0.0.0:7045')\n+            self.httpbin = envoy.connect('gunicorn httpbin:app --bind=0.0.0.0:%s' % (PORT))\n \n             _httpbin = True\n             time.sleep(1)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#60917e0b9ffce90967051fe34cfdecbe817f9665", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1138 | Contributors (this commit): 15 | Commits (past 90d): 21 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -124,9 +124,6 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_HTTP_200_OK_PATCH(self):\n         r = requests.patch(httpbin('patch'))\n-        print r.__dict__\n-        print r.content\n-        print r.url\n         self.assertEqual(r.status_code, 200)\n \n \n@@ -270,7 +267,7 @@ class RequestsTestSuite(unittest.TestCase):\n             r = requests.get(httpbin(''))\n             r.raise_for_status()\n \n-        with requests.settings(timeout=0.0000001):\n+        with requests.settings(timeout=0.0000000001):\n             self.assertRaises(requests.Timeout, test)\n \n         with requests.settings(timeout=100):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a688f026dc9051a61f9ba6ffd6a9457640ce6374", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 13 | Churn Cumulative: 1151 | Contributors (this commit): 15 | Commits (past 90d): 22 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -261,19 +261,6 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(r.status_code, 401)\n \n \n-    def test_settings(self):\n-\n-        def test():\n-            r = requests.get(httpbin(''))\n-            r.raise_for_status()\n-\n-        with requests.settings(timeout=0.0000000001):\n-            self.assertRaises(requests.Timeout, test)\n-\n-        with requests.settings(timeout=100):\n-            requests.get(httpbin(''))\n-\n-\n     def test_urlencoded_post_data(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#65a765fe882ab30f794be8108abf9defd05900c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 9 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 81 | Churn Cumulative: 364 | Contributors (this commit): 2 | Commits (past 90d): 22 | Contributors (cumulative): 2 | DMM Complexity: 0.35714285714285715\n\nDIFF:\n@@ -16,21 +16,60 @@ from .utils import add_dict_to_cookiejar\n \n \n \n+def merge_kwargs(local_kwarg, default_kwarg):\n+    \"\"\"Merges kwarg dictionaries.\n+\n+    If a local key in the dictionary is set to None, it will be removed.\n+    \"\"\"\n+\n+    if default_kwarg is None:\n+        return local_kwarg\n+\n+    if local_kwarg is None:\n+        return default_kwarg\n+\n+    # Bypass if not a dictionary (e.g. timeout)\n+    if not hasattr(default_kwarg, 'items'):\n+        return local_kwarg\n+\n+\n+\n+    # Update new values.\n+    kwargs = default_kwarg.copy()\n+    kwargs.update(local_kwarg)\n+\n+    # Remove keys that are set to None.\n+    for (k,v) in local_kwarg.items():\n+        if v is None:\n+            del kwargs[k]\n+\n+    return kwargs\n+\n+\n class Session(object):\n     \"\"\"A Requests session.\"\"\"\n \n     __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks']\n \n \n-    def __init__(self, **kwargs):\n+    def __init__(self,\n+        headers=None,\n+        cookies=None,\n+        auth=None,\n+        timeout=None,\n+        proxies=None,\n+        hooks=None):\n+\n+        self.headers = headers or {}\n+        self.cookies = cookies or {}\n+        self.auth = auth\n+        self.timeout = timeout\n+        self.proxies = proxies or {}\n+        self.hooks = hooks or {}\n \n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n \n-        # Map args from kwargs to instance-local variables\n-        map(lambda k, v: (k in self.__attrs__) and setattr(self, k, v),\n-                kwargs.iterkeys(), kwargs.itervalues())\n-\n         # Map and wrap requests.api methods\n         self._map_api_methods()\n \n@@ -42,10 +81,8 @@ class Session(object):\n         return self\n \n     def __exit__(self, *args):\n-        # print args\n         pass\n \n-\n     def _map_api_methods(self):\n         \"\"\"Reads each available method from requests.api and decorates\n         them with a wrapper, which inserts any instance-local attributes\n@@ -54,23 +91,35 @@ class Session(object):\n \n         def pass_args(func):\n             def wrapper_func(*args, **kwargs):\n-                inst_attrs = dict((k, v) for k, v in self.__dict__.iteritems()\n-                        if k in self.__attrs__)\n-                # Combine instance-local values with kwargs values, with\n-                # priority to values in kwargs\n-                kwargs = dict(inst_attrs.items() + kwargs.items())\n+\n+                # Argument collector.\n+                _kwargs = {}\n \n                 # If a session request has a cookie_dict, inject the\n                 # values into the existing CookieJar instead.\n                 if isinstance(kwargs.get('cookies', None), dict):\n                     kwargs['cookies'] = add_dict_to_cookiejar(\n-                        inst_attrs['cookies'], kwargs['cookies']\n+                        self.cookies, kwargs['cookies']\n                     )\n \n-                if kwargs.get('headers', None) and inst_attrs.get('headers', None):\n-                    kwargs['headers'].update(inst_attrs['headers'])\n+                for attr in self.__attrs__:\n+                # for attr in ['headers',]:\n+                    s_val = self.__dict__.get(attr)\n+                    r_val = kwargs.get(attr)\n+\n+                    new_attr = merge_kwargs(r_val, s_val)\n+\n+                    # Skip attributes that were set to None.\n+                    if new_attr is not None:\n+                        _kwargs[attr] = new_attr\n+\n+                # Make sure we didn't miss anything.\n+                for (k, v) in kwargs.items():\n+                    if k not in _kwargs:\n+                        _kwargs[k] = v\n+\n+                return func(*args, **_kwargs)\n \n-                return func(*args, **kwargs)\n             return wrapper_func\n \n         # Map and decorate each function available in requests.api\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec94f5030c9087372ac31f240e25cf51bf420241", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 1160 | Contributors (this commit): 15 | Commits (past 90d): 23 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -453,13 +453,18 @@ class RequestsTestSuite(unittest.TestCase):\n \n         s = Session()\n         s.headers = heads\n+\n         # Make 2 requests from Session object, should send header both times\n         r1 = s.get(httpbin('user-agent'))\n-\n         assert heads['User-agent'] in r1.content\n-        r2 = s.get(httpbin('user-agent'))\n \n+        r2 = s.get(httpbin('user-agent'))\n         assert heads['User-agent'] in r2.content\n+\n+        new_heads = {'User-agent': 'blah'}\n+        r3 = s.get(httpbin('user-agent'), headers=new_heads)\n+        assert new_heads['User-agent'] in r3.content\n+\n         self.assertEqual(r2.status_code, 200)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b37b977d205d8619b057d3e017083e42498692be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2688 | Contributors (this commit): 8 | Commits (past 90d): 19 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.4'\n-__build__ = 0x000604\n+__version__ = '0.6.5'\n+__build__ = 0x000605\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8c74860fd1ae29c1ebc5896df9614076c34d1b6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 370 | Contributors (this commit): 2 | Commits (past 90d): 23 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -49,7 +49,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n class Session(object):\n     \"\"\"A Requests session.\"\"\"\n \n-    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks']\n+    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params']\n \n \n     def __init__(self,\n@@ -58,7 +58,8 @@ class Session(object):\n         auth=None,\n         timeout=None,\n         proxies=None,\n-        hooks=None):\n+        hooks=None,\n+        params=None):\n \n         self.headers = headers or {}\n         self.cookies = cookies or {}\n@@ -66,6 +67,7 @@ class Session(object):\n         self.timeout = timeout\n         self.proxies = proxies or {}\n         self.hooks = hooks or {}\n+        self.params = params or {}\n \n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7dc75ce3ce6c897edb3fd34d659615119818a078", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 28 | Churn Cumulative: 1188 | Contributors (this commit): 15 | Commits (past 90d): 24 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -468,5 +468,33 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r2.status_code, 200)\n \n \n+    def test_session_persistent_params(self):\n+\n+        params = {'a': 'a_test'}\n+\n+        s = Session()\n+        s.params = params\n+\n+        # Make 2 requests from Session object, should send header both times\n+        r1 = s.get(httpbin('get'))\n+        assert params['a'] in r1.content\n+\n+\n+        params2 = {'b': 'b_test'}\n+\n+        r2 = s.get(httpbin('get'), params=params2)\n+        assert params['a'] in r2.content\n+        assert params2['b'] in r2.content\n+\n+\n+        params3 = {'b': 'b_test', 'a': None, 'c': 'c_test'}\n+\n+        r3 = s.get(httpbin('get'), params=params3)\n+\n+        assert not params['a'] in r3.content\n+        assert params3['b'] in r3.content\n+        assert params3['c'] in r3.content\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d938f3208968949decbb0a21292deb1451c211d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2692 | Contributors (this commit): 8 | Commits (past 90d): 20 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.6.5'\n-__build__ = 0x000605\n+__version__ = '0.6.6'\n+__build__ = 0x000606\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#055f7c1eb6172736e830120532934077ee87c102", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 14 | Files Changed: 7 | Hunks: 14 | Methods Changed: 8 | Complexity Δ (Sum/Max): -35/0 | Churn Δ: 28 | Churn Cumulative: 5259 | Contributors (this commit): 23 | Commits (past 90d): 246 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@\n requests.api\n ~~~~~~~~~~~~\n \n-This module impliments the Requests API.\n+This module implements the Requests API.\n \n :copyright: (c) 2011 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n\n@@ -7,7 +7,7 @@ requests.exceptions\n \"\"\"\n \n class RequestException(Exception):\n-    \"\"\"There was an ambiguous exception that occured while handling your\n+    \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n class AuthenticationError(RequestException):\n\n@@ -26,7 +26,7 @@ import warnings\n \n \n def dispatch_hook(key, hooks, hook_data):\n-    \"\"\"Dipatches a hook dictionary on a given peice of data.\"\"\"\n+    \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n \n     hooks = hooks or dict()\n \n\n@@ -41,14 +41,14 @@ class Request(object):\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n         allow_redirects=False, proxies=None, hooks=None):\n \n-        #: Float describ the timeout of the request.\n+        #: Float describes the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n         self.timeout = timeout\n \n         #: Request URL.\n         self.url = url\n \n-        #: Dictonary of HTTP Headers to attach to the :class:`Request <Request>`.\n+        #: Dictionary of HTTP Headers to attach to the :class:`Request <Request>`.\n         self.headers = headers\n \n         #: Dictionary of files to multipart upload (``{filename: content}``).\n@@ -361,7 +361,7 @@ class Request(object):\n                     resp = opener(req)\n \n                     if settings.timeout_fallback:\n-                        # restore gobal timeout\n+                        # restore global timeout\n                         socket.setdefaulttimeout(old_timeout)\n \n                 if self.cookiejar is not None:\n@@ -412,10 +412,10 @@ class Response(object):\n         #: Final URL location of Response.\n         self.url = None\n \n-        #: True if no :attr:`error` occured.\n+        #: True if no :attr:`error` occurred.\n         self.ok = False\n \n-        #: Resulting :class:`HTTPError` of request, if one occured.\n+        #: Resulting :class:`HTTPError` of request, if one occurred.\n         self.error = None\n \n         #: A list of :class:`Response <Response>` objects from\n@@ -497,7 +497,7 @@ class Response(object):\n \n \n     def raise_for_status(self):\n-        \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occured.\"\"\"\n+        \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n         if self.error:\n             raise self.error\n \n\n@@ -130,6 +130,6 @@ class Session(object):\n \n \n def session(**kwargs):\n-    \"\"\"Returns a :class:`Session` for context-managment.\"\"\"\n+    \"\"\"Returns a :class:`Session` for context-management.\"\"\"\n \n     return Session(**kwargs)\n\\ No newline at end of file\n\n@@ -47,13 +47,13 @@ _codes = {\n     412: ('precondition_failed', 'precondition'),\n     413: ('request_entity_too_large',),\n     414: ('request_uri_too_large',),\n-    415: ('unspported_media_type', 'unspported_media', 'media_type'),\n+    415: ('unsupported_media_type', 'unsupported_media', 'media_type'),\n     416: ('requested_range_not_satisfiable', 'requested_range', 'range_not_satisfiable'),\n     417: ('expectation_failed',),\n     418: ('im_a_teapot', 'teapot', 'i_am_a_teapot'),\n     422: ('unprocessable_entity', 'unprocessable'),\n     423: ('locked',),\n-    424: ('failed_depdendency', 'depdendency'),\n+    424: ('failed_dependency', 'dependency'),\n     425: ('unordered_collection', 'unordered'),\n     426: ('upgrade_required', 'upgrade'),\n     444: ('no_response', 'none'),\n\n@@ -55,7 +55,7 @@ def header_expand(headers):\n                 collector.append(', ')\n \n \n-    # Remove trailing seperators.\n+    # Remove trailing separators.\n     if collector[-1] in (', ', '; '):\n         del collector[-1]\n \n@@ -199,7 +199,7 @@ def stream_decode_response_unicode(iterator, r):\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n-    :param r: Reponse object to get unicode content from.\n+    :param r: Response object to get unicode content from.\n \n     Tried:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
