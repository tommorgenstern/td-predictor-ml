{"custom_id": "flask#10b0d6b33f7a4414fd3f4474c0deceed2e40117e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 49 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/7 | Churn Δ: 101 | Churn Cumulative: 2735 | Contributors (this commit): 9 | Commits (past 90d): 21 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,7 @@\n import os\n+import pkgutil\n import socket\n+import sys\n import typing as t\n import warnings\n from datetime import timedelta\n@@ -677,6 +679,55 @@ def send_from_directory(directory: str, path: str, **kwargs: t.Any) -> \"Response\n     )\n \n \n+def get_root_path(import_name: str) -> str:\n+    \"\"\"Find the root path of a package, or the path that contains a\n+    module. If it cannot be found, returns the current working\n+    directory.\n+\n+    Not to be confused with the value returned by :func:`find_package`.\n+\n+    :meta private:\n+    \"\"\"\n+    # Module already imported and has a file attribute. Use that first.\n+    mod = sys.modules.get(import_name)\n+\n+    if mod is not None and hasattr(mod, \"__file__\"):\n+        return os.path.dirname(os.path.abspath(mod.__file__))\n+\n+    # Next attempt: check the loader.\n+    loader = pkgutil.get_loader(import_name)\n+\n+    # Loader does not exist or we're referring to an unloaded main\n+    # module or a main module without path (interactive sessions), go\n+    # with the current working directory.\n+    if loader is None or import_name == \"__main__\":\n+        return os.getcwd()\n+\n+    if hasattr(loader, \"get_filename\"):\n+        filepath = loader.get_filename(import_name)  # type: ignore\n+    else:\n+        # Fall back to imports.\n+        __import__(import_name)\n+        mod = sys.modules[import_name]\n+        filepath = getattr(mod, \"__file__\", None)\n+\n+        # If we don't have a file path it might be because it is a\n+        # namespace package. In this case pick the root path from the\n+        # first module that is contained in the package.\n+        if filepath is None:\n+            raise RuntimeError(\n+                \"No root path can be found for the provided module\"\n+                f\" {import_name!r}. This can happen because the module\"\n+                \" came from an import hook that does not provide file\"\n+                \" name information or because it's a namespace package.\"\n+                \" In this case the root path needs to be explicitly\"\n+                \" provided.\"\n+            )\n+\n+    # filepath is import_name.py for a module, or __init__.py for a package.\n+    return os.path.dirname(os.path.abspath(filepath))\n+\n+\n class locked_cached_property(werkzeug.utils.cached_property):\n     \"\"\"A :func:`property` that is only evaluated once. Like\n     :class:`werkzeug.utils.cached_property` except access uses a lock\n\n@@ -14,6 +14,7 @@ from werkzeug.exceptions import HTTPException\n \n from .cli import AppGroup\n from .globals import current_app\n+from .helpers import get_root_path\n from .helpers import locked_cached_property\n from .helpers import send_from_directory\n from .templating import _default_template_ctx_processor\n@@ -745,55 +746,6 @@ def _endpoint_from_view_func(view_func: t.Callable) -> str:\n     return view_func.__name__\n \n \n-def get_root_path(import_name: str) -> str:\n-    \"\"\"Find the root path of a package, or the path that contains a\n-    module. If it cannot be found, returns the current working\n-    directory.\n-\n-    Not to be confused with the value returned by :func:`find_package`.\n-\n-    :meta private:\n-    \"\"\"\n-    # Module already imported and has a file attribute. Use that first.\n-    mod = sys.modules.get(import_name)\n-\n-    if mod is not None and hasattr(mod, \"__file__\"):\n-        return os.path.dirname(os.path.abspath(mod.__file__))\n-\n-    # Next attempt: check the loader.\n-    loader = pkgutil.get_loader(import_name)\n-\n-    # Loader does not exist or we're referring to an unloaded main\n-    # module or a main module without path (interactive sessions), go\n-    # with the current working directory.\n-    if loader is None or import_name == \"__main__\":\n-        return os.getcwd()\n-\n-    if hasattr(loader, \"get_filename\"):\n-        filepath = loader.get_filename(import_name)  # type: ignore\n-    else:\n-        # Fall back to imports.\n-        __import__(import_name)\n-        mod = sys.modules[import_name]\n-        filepath = getattr(mod, \"__file__\", None)\n-\n-        # If we don't have a file path it might be because it is a\n-        # namespace package. In this case pick the root path from the\n-        # first module that is contained in the package.\n-        if filepath is None:\n-            raise RuntimeError(\n-                \"No root path can be found for the provided module\"\n-                f\" {import_name!r}. This can happen because the module\"\n-                \" came from an import hook that does not provide file\"\n-                \" name information or because it's a namespace package.\"\n-                \" In this case the root path needs to be explicitly\"\n-                \" provided.\"\n-            )\n-\n-    # filepath is import_name.py for a module, or __init__.py for a package.\n-    return os.path.dirname(os.path.abspath(filepath))\n-\n-\n def _matching_loader_thinks_module_is_package(loader, mod_name):\n     \"\"\"Attempt to figure out if the given name is a package or a module.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#26a6cc0f94dd25390e2b2d7462bb4a414a862b16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 19 | Churn Cumulative: 2888 | Contributors (this commit): 56 | Commits (past 90d): 11 | Contributors (cumulative): 65 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,7 +7,7 @@ setup(\n         \"Werkzeug>=2.0.0rc4\",\n         \"Jinja2>=3.0.0rc1\",\n         \"itsdangerous>=2.0.0rc2\",\n-        \"click>=8.0.0rc1\",\n+        \"click>=7.1.2\",\n     ],\n     extras_require={\n         \"async\": [\"asgiref>=3.2\"],\n\n@@ -979,6 +979,13 @@ debug mode.\n \n \n def main() -> None:\n+    if int(click.__version__[0]) < 8:\n+        warnings.warn(\n+            \"Using the `flask` cli with Click 7 is deprecated and\"\n+            \" will not be supported starting with Flask 2.1.\"\n+            \" Please upgrade to Click 8 as soon as possible.\",\n+            DeprecationWarning,\n+        )\n     # TODO omit sys.argv once https://github.com/pallets/click/issues/536 is fixed\n     cli.main(args=sys.argv[1:])\n \n\n@@ -5,6 +5,7 @@ import ssl\n import sys\n import types\n from functools import partial\n+from unittest.mock import patch\n \n import click\n import pytest\n@@ -21,6 +22,7 @@ from flask.cli import FlaskGroup\n from flask.cli import get_version\n from flask.cli import load_dotenv\n from flask.cli import locate_app\n+from flask.cli import main as cli_main\n from flask.cli import NoAppException\n from flask.cli import prepare_import\n from flask.cli import run_command\n@@ -660,3 +662,11 @@ def test_cli_empty(app):\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n     assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n+\n+\n+def test_click_7_deprecated():\n+    with patch(\"flask.cli.cli\"):\n+        if int(click.__version__[0]) < 8:\n+            pytest.deprecated_call(cli_main, match=\".* Click 7 is deprecated\")\n+        else:\n+            cli_main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cb13128cf03b2f1b3c5b48eab518e57e7b5f6516", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 29 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 33 | Churn Cumulative: 1337 | Contributors (this commit): 9 | Commits (past 90d): 12 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -819,33 +819,8 @@ def run_async(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:\n         )\n \n     @wraps(func)\n-    def outer(*args: t.Any, **kwargs: t.Any) -> t.Any:\n-        \"\"\"This function grabs the current context for the inner function.\n+    def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n+        return async_to_sync(func)(*args, **kwargs)\n \n-        This is similar to the copy_current_xxx_context functions in the\n-        ctx module, except it has an async inner.\n-        \"\"\"\n-        ctx = None\n-\n-        if _request_ctx_stack.top is not None:\n-            ctx = _request_ctx_stack.top.copy()\n-\n-        @wraps(func)\n-        async def inner(*a: t.Any, **k: t.Any) -> t.Any:\n-            \"\"\"This restores the context before awaiting the func.\n-\n-            This is required as the function must be awaited within the\n-            context. Only calling ``func`` (as per the\n-            ``copy_current_xxx_context`` functions) doesn't work as the\n-            with block will close before the coroutine is awaited.\n-            \"\"\"\n-            if ctx is not None:\n-                with ctx:\n-                    return await func(*a, **k)\n-            else:\n-                return await func(*a, **k)\n-\n-        return async_to_sync(inner)(*args, **kwargs)\n-\n-    outer._flask_sync_wrapper = True  # type: ignore\n-    return outer\n+    wrapper._flask_sync_wrapper = True  # type: ignore\n+    return wrapper\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7f87f3dd93baf45d5f69f02a2dcf4493dfc4a1be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 68 | Files Changed: 5 | Hunks: 38 | Methods Changed: 31 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 106 | Churn Cumulative: 5001 | Contributors (this commit): 18 | Commits (past 90d): 50 | Contributors (cumulative): 31 | DMM Complexity: 0.23076923076923078\n\nDIFF:\n@@ -35,12 +35,12 @@ from .globals import _request_ctx_stack\n from .globals import g\n from .globals import request\n from .globals import session\n+from .helpers import async_to_sync\n from .helpers import get_debug_flag\n from .helpers import get_env\n from .helpers import get_flashed_messages\n from .helpers import get_load_dotenv\n from .helpers import locked_cached_property\n-from .helpers import run_async\n from .helpers import url_for\n from .json import jsonify\n from .logging import create_logger\n@@ -1080,14 +1080,12 @@ class Flask(Scaffold):\n         self.url_map.add(rule)\n         if view_func is not None:\n             old_func = self.view_functions.get(endpoint)\n-            if getattr(old_func, \"_flask_sync_wrapper\", False):\n-                old_func = old_func.__wrapped__  # type: ignore\n             if old_func is not None and old_func != view_func:\n                 raise AssertionError(\n                     \"View function mapping is overwriting an existing\"\n                     f\" endpoint function: {endpoint}\"\n                 )\n-            self.view_functions[endpoint] = self.ensure_sync(view_func)\n+            self.view_functions[endpoint] = view_func\n \n     @setupmethod\n     def template_filter(self, name: t.Optional[str] = None) -> t.Callable:\n@@ -1208,7 +1206,7 @@ class Flask(Scaffold):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        self.before_first_request_funcs.append(self.ensure_sync(f))\n+        self.before_first_request_funcs.append(f)\n         return f\n \n     @setupmethod\n@@ -1241,7 +1239,7 @@ class Flask(Scaffold):\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        self.teardown_appcontext_funcs.append(self.ensure_sync(f))\n+        self.teardown_appcontext_funcs.append(f)\n         return f\n \n     @setupmethod\n@@ -1308,7 +1306,7 @@ class Flask(Scaffold):\n         handler = self._find_error_handler(e)\n         if handler is None:\n             return e\n-        return handler(e)\n+        return self.ensure_sync(handler)(e)\n \n     def trap_http_exception(self, e: Exception) -> bool:\n         \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n@@ -1375,7 +1373,7 @@ class Flask(Scaffold):\n         if handler is None:\n             raise\n \n-        return handler(e)\n+        return self.ensure_sync(handler)(e)\n \n     def handle_exception(self, e: Exception) -> Response:\n         \"\"\"Handle an exception that did not have an error handler\n@@ -1422,7 +1420,7 @@ class Flask(Scaffold):\n         handler = self._find_error_handler(server_error)\n \n         if handler is not None:\n-            server_error = handler(server_error)\n+            server_error = self.ensure_sync(handler)(server_error)\n \n         return self.finalize_request(server_error, from_error_handler=True)\n \n@@ -1484,7 +1482,7 @@ class Flask(Scaffold):\n         ):\n             return self.make_default_options_response()\n         # otherwise dispatch to the handler for that endpoint\n-        return self.view_functions[rule.endpoint](**req.view_args)\n+        return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n \n     def full_dispatch_request(self) -> Response:\n         \"\"\"Dispatches the request and on top of that performs request\n@@ -1545,7 +1543,7 @@ class Flask(Scaffold):\n             if self._got_first_request:\n                 return\n             for func in self.before_first_request_funcs:\n-                func()\n+                self.ensure_sync(func)()\n             self._got_first_request = True\n \n     def make_default_options_response(self) -> Response:\n@@ -1581,7 +1579,7 @@ class Flask(Scaffold):\n         .. versionadded:: 2.0\n         \"\"\"\n         if iscoroutinefunction(func):\n-            return run_async(func)\n+            return async_to_sync(func)\n \n         return func\n \n@@ -1807,7 +1805,7 @@ class Flask(Scaffold):\n             if bp in self.before_request_funcs:\n                 funcs = chain(funcs, self.before_request_funcs[bp])\n         for func in funcs:\n-            rv = func()\n+            rv = self.ensure_sync(func)()\n             if rv is not None:\n                 return rv\n \n@@ -1834,7 +1832,7 @@ class Flask(Scaffold):\n         if None in self.after_request_funcs:\n             funcs = chain(funcs, reversed(self.after_request_funcs[None]))\n         for handler in funcs:\n-            response = handler(response)\n+            response = self.ensure_sync(handler)(response)\n         if not self.session_interface.is_null_session(ctx.session):\n             self.session_interface.save_session(self, ctx.session, response)\n         return response\n@@ -1871,7 +1869,7 @@ class Flask(Scaffold):\n             if bp in self.teardown_request_funcs:\n                 funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n         for func in funcs:\n-            func(exc)\n+            self.ensure_sync(func)(exc)\n         request_tearing_down.send(self, exc=exc)\n \n     def do_teardown_appcontext(\n@@ -1894,7 +1892,7 @@ class Flask(Scaffold):\n         if exc is _sentinel:\n             exc = sys.exc_info()[1]\n         for func in reversed(self.teardown_appcontext_funcs):\n-            func(exc)\n+            self.ensure_sync(func)(exc)\n         appcontext_tearing_down.send(self, exc=exc)\n \n     def app_context(self) -> AppContext:\n\n@@ -292,13 +292,10 @@ class Blueprint(Scaffold):\n         # Merge blueprint data into parent.\n         if first_registration:\n \n-            def extend(bp_dict, parent_dict, ensure_sync=False):\n+            def extend(bp_dict, parent_dict):\n                 for key, values in bp_dict.items():\n                     key = self.name if key is None else f\"{self.name}.{key}\"\n \n-                    if ensure_sync:\n-                        values = [app.ensure_sync(func) for func in values]\n-\n                     parent_dict[key].extend(values)\n \n             for key, value in self.error_handler_spec.items():\n@@ -307,8 +304,7 @@ class Blueprint(Scaffold):\n                     dict,\n                     {\n                         code: {\n-                            exc_class: app.ensure_sync(func)\n-                            for exc_class, func in code_values.items()\n+                            exc_class: func for exc_class, func in code_values.items()\n                         }\n                         for code, code_values in value.items()\n                     },\n@@ -316,16 +312,13 @@ class Blueprint(Scaffold):\n                 app.error_handler_spec[key] = value\n \n             for endpoint, func in self.view_functions.items():\n-                app.view_functions[endpoint] = app.ensure_sync(func)\n+                app.view_functions[endpoint] = func\n \n-            extend(\n-                self.before_request_funcs, app.before_request_funcs, ensure_sync=True\n-            )\n-            extend(self.after_request_funcs, app.after_request_funcs, ensure_sync=True)\n+            extend(self.before_request_funcs, app.before_request_funcs)\n+            extend(self.after_request_funcs, app.after_request_funcs)\n             extend(\n                 self.teardown_request_funcs,\n                 app.teardown_request_funcs,\n-                ensure_sync=True,\n             )\n             extend(self.url_default_functions, app.url_default_functions)\n             extend(self.url_value_preprocessors, app.url_value_preprocessors)\n@@ -478,9 +471,7 @@ class Blueprint(Scaffold):\n         before each request, even if outside of a blueprint.\n         \"\"\"\n         self.record_once(\n-            lambda s: s.app.before_request_funcs.setdefault(None, []).append(\n-                s.app.ensure_sync(f)\n-            )\n+            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n         )\n         return f\n \n@@ -490,9 +481,7 @@ class Blueprint(Scaffold):\n         \"\"\"Like :meth:`Flask.before_first_request`.  Such a function is\n         executed before the first request to the application.\n         \"\"\"\n-        self.record_once(\n-            lambda s: s.app.before_first_request_funcs.append(s.app.ensure_sync(f))\n-        )\n+        self.record_once(lambda s: s.app.before_first_request_funcs.append(f))\n         return f\n \n     def after_app_request(self, f: AfterRequestCallable) -> AfterRequestCallable:\n@@ -500,9 +489,7 @@ class Blueprint(Scaffold):\n         is executed after each request, even if outside of the blueprint.\n         \"\"\"\n         self.record_once(\n-            lambda s: s.app.after_request_funcs.setdefault(None, []).append(\n-                s.app.ensure_sync(f)\n-            )\n+            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n         )\n         return f\n \n@@ -553,14 +540,3 @@ class Blueprint(Scaffold):\n             lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n         )\n         return f\n-\n-    def ensure_sync(self, f: t.Callable) -> t.Callable:\n-        \"\"\"Ensure the function is synchronous.\n-\n-        Override if you would like custom async to sync behaviour in\n-        this blueprint. Otherwise the app's\n-        :meth:`~flask.Flask.ensure_sync` is used.\n-\n-        .. versionadded:: 2.0\n-        \"\"\"\n-        return f\n\n@@ -6,7 +6,6 @@ import typing as t\n import warnings\n from datetime import timedelta\n from functools import update_wrapper\n-from functools import wraps\n from threading import RLock\n \n import werkzeug.utils\n@@ -803,10 +802,15 @@ def is_ip(value: str) -> bool:\n     return False\n \n \n-def run_async(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:\n-    \"\"\"Return a sync function that will run the coroutine function *func*.\"\"\"\n+def async_to_sync(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:\n+    \"\"\"Return a sync function that will run the coroutine function *func*.\n+\n+    This can be used as so\n+\n+        result = async_to_async(func)(*args, **kwargs)\n+    \"\"\"\n     try:\n-        from asgiref.sync import async_to_sync\n+        from asgiref.sync import async_to_sync as asgiref_async_to_sync\n     except ImportError:\n         raise RuntimeError(\n             \"Install Flask with the 'async' extra in order to use async views.\"\n@@ -818,9 +822,4 @@ def run_async(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:\n             \"Async cannot be used with this combination of Python & Greenlet versions.\"\n         )\n \n-    @wraps(func)\n-    def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n-        return async_to_sync(func)(*args, **kwargs)\n-\n-    wrapper._flask_sync_wrapper = True  # type: ignore\n-    return wrapper\n+    return asgiref_async_to_sync(func)\n\n@@ -521,7 +521,7 @@ class Scaffold:\n         \"\"\"\n \n         def decorator(f):\n-            self.view_functions[endpoint] = self.ensure_sync(f)\n+            self.view_functions[endpoint] = f\n             return f\n \n         return decorator\n@@ -545,7 +545,7 @@ class Scaffold:\n         return value from the view, and further request handling is\n         stopped.\n         \"\"\"\n-        self.before_request_funcs.setdefault(None, []).append(self.ensure_sync(f))\n+        self.before_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     @setupmethod\n@@ -561,7 +561,7 @@ class Scaffold:\n         should not be used for actions that must execute, such as to\n         close resources. Use :meth:`teardown_request` for that.\n         \"\"\"\n-        self.after_request_funcs.setdefault(None, []).append(self.ensure_sync(f))\n+        self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     @setupmethod\n@@ -600,7 +600,7 @@ class Scaffold:\n            debugger can still access it.  This behavior can be controlled\n            by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n         \"\"\"\n-        self.teardown_request_funcs.setdefault(None, []).append(self.ensure_sync(f))\n+        self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     @setupmethod\n@@ -706,7 +706,7 @@ class Scaffold:\n                 \" instead.\"\n             )\n \n-        self.error_handler_spec[None][code][exc_class] = self.ensure_sync(f)\n+        self.error_handler_spec[None][code][exc_class] = f\n \n     @staticmethod\n     def _get_exc_class_and_code(\n@@ -734,9 +734,6 @@ class Scaffold:\n         else:\n             return exc_class, None\n \n-    def ensure_sync(self, func: t.Callable) -> t.Callable:\n-        raise NotImplementedError()\n-\n \n def _endpoint_from_view_func(view_func: t.Callable) -> str:\n     \"\"\"Internal helper that returns the default endpoint for a given\n\n@@ -6,7 +6,7 @@ import pytest\n from flask import Blueprint\n from flask import Flask\n from flask import request\n-from flask.helpers import run_async\n+from flask.helpers import async_to_sync\n \n pytest.importorskip(\"asgiref\")\n \n@@ -137,4 +137,4 @@ def test_async_before_after_request():\n @pytest.mark.skipif(sys.version_info >= (3, 7), reason=\"should only raise Python < 3.7\")\n def test_async_runtime_error():\n     with pytest.raises(RuntimeError):\n-        run_async(None)\n+        async_to_sync(None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2889da67cb15ac6d5d882781d54014286d9ae010", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 28 | Files Changed: 3 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/3 | Churn Δ: 62 | Churn Cumulative: 3007 | Contributors (this commit): 16 | Commits (past 90d): 33 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,6 +16,7 @@ from werkzeug.exceptions import BadRequest\n from werkzeug.exceptions import BadRequestKeyError\n from werkzeug.exceptions import HTTPException\n from werkzeug.exceptions import InternalServerError\n+from werkzeug.local import ContextVar\n from werkzeug.routing import BuildError\n from werkzeug.routing import Map\n from werkzeug.routing import MapAdapter\n@@ -35,7 +36,6 @@ from .globals import _request_ctx_stack\n from .globals import g\n from .globals import request\n from .globals import session\n-from .helpers import async_to_sync\n from .helpers import get_debug_flag\n from .helpers import get_env\n from .helpers import get_flashed_messages\n@@ -1579,10 +1579,40 @@ class Flask(Scaffold):\n         .. versionadded:: 2.0\n         \"\"\"\n         if iscoroutinefunction(func):\n-            return async_to_sync(func)\n+            return self.async_to_sync(func)\n \n         return func\n \n+    def async_to_sync(\n+        self, func: t.Callable[..., t.Coroutine]\n+    ) -> t.Callable[..., t.Any]:\n+        \"\"\"Return a sync function that will run the coroutine function.\n+\n+        .. code-block:: python\n+\n+            result = app.async_to_sync(func)(*args, **kwargs)\n+\n+        Override this method to change how the app converts async code\n+        to be synchronously callable.\n+\n+        .. versionadded:: 2.0\n+        \"\"\"\n+        try:\n+            from asgiref.sync import async_to_sync as asgiref_async_to_sync\n+        except ImportError:\n+            raise RuntimeError(\n+                \"Install Flask with the 'async' extra in order to use async views.\"\n+            )\n+\n+        # Check that Werkzeug isn't using its fallback ContextVar class.\n+        if ContextVar.__module__ == \"werkzeug.local\":\n+            raise RuntimeError(\n+                \"Async cannot be used with this combination of Python \"\n+                \"and Greenlet versions.\"\n+            )\n+\n+        return asgiref_async_to_sync(func)\n+\n     def make_response(self, rv: ResponseReturnValue) -> Response:\n         \"\"\"Convert the return value from a view function to an instance of\n         :attr:`response_class`.\n\n@@ -10,7 +10,6 @@ from threading import RLock\n \n import werkzeug.utils\n from werkzeug.exceptions import NotFound\n-from werkzeug.local import ContextVar\n from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n \n@@ -800,26 +799,3 @@ def is_ip(value: str) -> bool:\n             return True\n \n     return False\n-\n-\n-def async_to_sync(func: t.Callable[..., t.Coroutine]) -> t.Callable[..., t.Any]:\n-    \"\"\"Return a sync function that will run the coroutine function *func*.\n-\n-    This can be used as so\n-\n-        result = async_to_async(func)(*args, **kwargs)\n-    \"\"\"\n-    try:\n-        from asgiref.sync import async_to_sync as asgiref_async_to_sync\n-    except ImportError:\n-        raise RuntimeError(\n-            \"Install Flask with the 'async' extra in order to use async views.\"\n-        )\n-\n-    # Check that Werkzeug isn't using its fallback ContextVar class.\n-    if ContextVar.__module__ == \"werkzeug.local\":\n-        raise RuntimeError(\n-            \"Async cannot be used with this combination of Python & Greenlet versions.\"\n-        )\n-\n-    return asgiref_async_to_sync(func)\n\n@@ -6,7 +6,6 @@ import pytest\n from flask import Blueprint\n from flask import Flask\n from flask import request\n-from flask.helpers import async_to_sync\n \n pytest.importorskip(\"asgiref\")\n \n@@ -136,5 +135,6 @@ def test_async_before_after_request():\n \n @pytest.mark.skipif(sys.version_info >= (3, 7), reason=\"should only raise Python < 3.7\")\n def test_async_runtime_error():\n+    app = Flask(__name__)\n     with pytest.raises(RuntimeError):\n-        async_to_sync(None)\n+        app.async_to_sync(None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e2b7d1056c6c8f6f26a4b9dfcc5dc4b2ef87f573", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 134 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered\n from .templating import render_template\n from .templating import render_template_string\n \n-__version__ = \"2.0.0rc1\"\n+__version__ = \"2.0.0rc2\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#79ac96f1239601eb12f6f69fcb3ce6cb269ac5fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1960 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -20,6 +20,7 @@ extensions = [\n     \"sphinx_issues\",\n     \"sphinx_tabs.tabs\",\n ]\n+autodoc_typehints = \"description\"\n intersphinx_mapping = {\n     \"python\": (\"https://docs.python.org/3/\", None),\n     \"werkzeug\": (\"https://werkzeug.palletsprojects.com/\", None),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3a5532b4ed0db5cfd826e7fd2006ede6e873b028", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 875 | Contributors (this commit): 31 | Commits (past 90d): 4 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -4,9 +4,9 @@ from setuptools import setup\n setup(\n     name=\"Flask\",\n     install_requires=[\n-        \"Werkzeug>=2.0.0rc4\",\n-        \"Jinja2>=3.0.0rc1\",\n-        \"itsdangerous>=2.0.0rc2\",\n+        \"Werkzeug>=2.0\",\n+        \"Jinja2>=3.0\",\n+        \"itsdangerous>=2.0\",\n         \"click>=7.1.2\",\n     ],\n     extras_require={\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1403d35e2a107e0fc693a09898cf605bb18989ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 2109 | Contributors (this commit): 13 | Commits (past 90d): 20 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -704,7 +704,7 @@ class Flask(Scaffold):\n             session=session,\n             g=g,\n         )\n-        rv.policies[\"json.dumps_function\"] = json.dumps  # type: ignore\n+        rv.policies[\"json.dumps_function\"] = json.dumps\n         return rv\n \n     def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n\n@@ -5,7 +5,7 @@ import uuid\n import warnings\n from datetime import date\n \n-from jinja2.utils import htmlsafe_json_dumps as _jinja_htmlsafe_dumps  # type: ignore\n+from jinja2.utils import htmlsafe_json_dumps as _jinja_htmlsafe_dumps\n from werkzeug.http import http_date\n \n from ..globals import current_app\n\n@@ -51,18 +51,21 @@ class DispatchingJinjaLoader(BaseLoader):\n     def __init__(self, app: \"Flask\") -> None:\n         self.app = app\n \n-    def get_source(\n+    def get_source(  # type: ignore\n         self, environment: Environment, template: str\n-    ) -> t.Tuple[str, t.Optional[str], t.Callable]:\n+    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n         if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n             return self._get_source_explained(environment, template)\n         return self._get_source_fast(environment, template)\n \n     def _get_source_explained(\n         self, environment: Environment, template: str\n-    ) -> t.Tuple[str, t.Optional[str], t.Callable]:\n+    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n         attempts = []\n-        trv = None\n+        rv: t.Optional[t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]\n+        trv: t.Optional[\n+            t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]\n+        ] = None\n \n         for srcobj, loader in self._iter_loaders(template):\n             try:\n@@ -83,7 +86,7 @@ class DispatchingJinjaLoader(BaseLoader):\n \n     def _get_source_fast(\n         self, environment: Environment, template: str\n-    ) -> t.Tuple[str, t.Optional[str], t.Callable]:\n+    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:\n         for _srcobj, loader in self._iter_loaders(template):\n             try:\n                 return loader.get_source(environment, template)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8e63d39913f9a7bb887066025724569aa3423a6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 136 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered\n from .templating import render_template\n from .templating import render_template_string\n \n-__version__ = \"2.0.0rc2\"\n+__version__ = \"2.0.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6fb1101f7075b4ff8197f3ef3b9fecfa41dc34ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 138 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered\n from .templating import render_template\n from .templating import render_template_string\n \n-__version__ = \"2.0.0\"\n+__version__ = \"2.0.1.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2846abaefed01f1da0d58ca3a83a2a09bea71e9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 140 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered\n from .templating import render_template\n from .templating import render_template_string\n \n-__version__ = \"2.0.1.dev0\"\n+__version__ = \"2.1.0.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#80a4e62096f4010235823180462b4d6e058d025a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 877 | Contributors (this commit): 31 | Commits (past 90d): 5 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -7,7 +7,7 @@ setup(\n         \"Werkzeug>=2.0\",\n         \"Jinja2>=3.0\",\n         \"itsdangerous>=2.0\",\n-        \"click>=7.1.2\",\n+        \"click>=8.0\",\n     ],\n     extras_require={\n         \"async\": [\"asgiref>=3.2\"],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#52adf2ec219a0cb9abcfd116ec104c9a362c602a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1962 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -78,7 +78,7 @@ def github_link(name, rawtext, text, lineno, inliner, options=None, content=None\n         words = None\n \n     if packaging.version.parse(release).is_devrelease:\n-        url = f\"{base_url}master/{text}\"\n+        url = f\"{base_url}main/{text}\"\n     else:\n         url = f\"{base_url}{release}/{text}\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fc82dd50e39700b14799df17578e2497b8f0248c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 1396 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -642,7 +642,9 @@ def safe_join(directory: str, *pathnames: str) -> str:\n     return path\n \n \n-def send_from_directory(directory: str, path: str, **kwargs: t.Any) -> \"Response\":\n+def send_from_directory(\n+    directory: str, path: str, filename: t.Optional[str] = None, **kwargs: t.Any\n+) -> \"Response\":\n     \"\"\"Send a file from within a directory using :func:`send_file`.\n \n     .. code-block:: python\n@@ -666,12 +668,24 @@ def send_from_directory(directory: str, path: str, **kwargs: t.Any) -> \"Response\n         ``directory``.\n     :param kwargs: Arguments to pass to :func:`send_file`.\n \n+    .. versionchanged:: 2.0\n+        ``path`` replaces the ``filename`` parameter.\n+\n     .. versionadded:: 2.0\n         Moved the implementation to Werkzeug. This is now a wrapper to\n         pass some Flask-specific arguments.\n \n     .. versionadded:: 0.5\n     \"\"\"\n+    if filename is not None:\n+        warnings.warn(\n+            \"The 'filename' parameter has been renamed to 'path'. The\"\n+            \" old name will be removed in Flask 2.1.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        path = filename\n+\n     return werkzeug.utils.send_from_directory(  # type: ignore\n         directory, path, **_prepare_send_file_kwargs(**kwargs)\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#89475e5d1e3e25ce56c9d9411496528f4a1ba82b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 41 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 82 | Churn Cumulative: 222 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,46 +1,46 @@\n from markupsafe import escape\n from markupsafe import Markup\n-from werkzeug.exceptions import abort\n-from werkzeug.utils import redirect\n+from werkzeug.exceptions import abort as abort\n+from werkzeug.utils import redirect as redirect\n \n-from . import json\n-from .app import Flask\n-from .app import Request\n-from .app import Response\n-from .blueprints import Blueprint\n-from .config import Config\n-from .ctx import after_this_request\n-from .ctx import copy_current_request_context\n-from .ctx import has_app_context\n-from .ctx import has_request_context\n-from .globals import _app_ctx_stack\n-from .globals import _request_ctx_stack\n-from .globals import current_app\n-from .globals import g\n-from .globals import request\n-from .globals import session\n-from .helpers import flash\n-from .helpers import get_flashed_messages\n-from .helpers import get_template_attribute\n-from .helpers import make_response\n-from .helpers import safe_join\n-from .helpers import send_file\n-from .helpers import send_from_directory\n-from .helpers import stream_with_context\n-from .helpers import url_for\n-from .json import jsonify\n-from .signals import appcontext_popped\n-from .signals import appcontext_pushed\n-from .signals import appcontext_tearing_down\n-from .signals import before_render_template\n-from .signals import got_request_exception\n-from .signals import message_flashed\n-from .signals import request_finished\n-from .signals import request_started\n-from .signals import request_tearing_down\n-from .signals import signals_available\n-from .signals import template_rendered\n-from .templating import render_template\n-from .templating import render_template_string\n+from . import json as json\n+from .app import Flask as Flask\n+from .app import Request as Request\n+from .app import Response as Response\n+from .blueprints import Blueprint as Blueprint\n+from .config import Config as Config\n+from .ctx import after_this_request as after_this_request\n+from .ctx import copy_current_request_context as copy_current_request_context\n+from .ctx import has_app_context as has_app_context\n+from .ctx import has_request_context as has_request_context\n+from .globals import _app_ctx_stack as _app_ctx_stack\n+from .globals import _request_ctx_stack as _request_ctx_stack\n+from .globals import current_app as current_app\n+from .globals import g as g\n+from .globals import request as request\n+from .globals import session as session\n+from .helpers import flash as flash\n+from .helpers import get_flashed_messages as get_flashed_messages\n+from .helpers import get_template_attribute as get_template_attribute\n+from .helpers import make_response as make_response\n+from .helpers import safe_join as safe_join\n+from .helpers import send_file as send_file\n+from .helpers import send_from_directory as send_from_directory\n+from .helpers import stream_with_context as stream_with_context\n+from .helpers import url_for as url_for\n+from .json import jsonify as jsonify\n+from .signals import appcontext_popped as appcontext_popped\n+from .signals import appcontext_pushed as appcontext_pushed\n+from .signals import appcontext_tearing_down as appcontext_tearing_down\n+from .signals import before_render_template as before_render_template\n+from .signals import got_request_exception as got_request_exception\n+from .signals import message_flashed as message_flashed\n+from .signals import request_finished as request_finished\n+from .signals import request_started as request_started\n+from .signals import request_tearing_down as request_tearing_down\n+from .signals import signals_available as signals_available\n+from .signals import template_rendered as template_rendered\n+from .templating import render_template as render_template\n+from .templating import render_template_string as render_template_string\n \n __version__ = \"2.0.1.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2baaa8fd8ebdd0f7bf7a24bff4855ef53476c92d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 38 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@ from werkzeug.local import LocalStack\n \n if t.TYPE_CHECKING:\n     from .app import Flask\n-    from .ctx import AppContext\n+    from .ctx import _AppCtxGlobals\n     from .sessions import SessionMixin\n     from .wrappers import Request\n \n@@ -53,5 +53,7 @@ _request_ctx_stack = LocalStack()\n _app_ctx_stack = LocalStack()\n current_app: \"Flask\" = LocalProxy(_find_app)  # type: ignore\n request: \"Request\" = LocalProxy(partial(_lookup_req_object, \"request\"))  # type: ignore\n-session: \"SessionMixin\" = LocalProxy(partial(_lookup_req_object, \"session\"))  # type: ignore # noqa: B950\n-g: \"AppContext\" = LocalProxy(partial(_lookup_app_object, \"g\"))  # type: ignore\n+session: \"SessionMixin\" = LocalProxy(  # type: ignore\n+    partial(_lookup_req_object, \"session\")\n+)\n+g: \"_AppCtxGlobals\" = LocalProxy(partial(_lookup_app_object, \"g\"))  # type: ignore\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6fe7f45725dd0fc94fb3ce7ab3b3ff477b10401a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 22 | Churn Cumulative: 204 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -41,6 +41,24 @@ class _AppCtxGlobals:\n         .. versionadded:: 0.10\n     \"\"\"\n \n+    # Define attr methods to let mypy know this is a namespace object\n+    # that has arbitrary attributes.\n+\n+    def __getattr__(self, name: str) -> t.Any:\n+        try:\n+            return self.__dict__[name]\n+        except KeyError:\n+            raise AttributeError(name) from None\n+\n+    def __setattr__(self, name: str, value: t.Any) -> None:\n+        self.__dict__[name] = value\n+\n+    def __delattr__(self, name: str) -> None:\n+        try:\n+            del self.__dict__[name]\n+        except KeyError:\n+            raise AttributeError(name) from None\n+\n     def get(self, name: str, default: t.Optional[t.Any] = None) -> t.Any:\n         \"\"\"Get an attribute by name, or a default value. Like\n         :meth:`dict.get`.\n@@ -78,10 +96,10 @@ class _AppCtxGlobals:\n         \"\"\"\n         return self.__dict__.setdefault(name, default)\n \n-    def __contains__(self, item: t.Any) -> bool:\n+    def __contains__(self, item: str) -> bool:\n         return item in self.__dict__\n \n-    def __iter__(self) -> t.Iterator:\n+    def __iter__(self) -> t.Iterator[str]:\n         return iter(self.__dict__)\n \n     def __repr__(self) -> str:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#25884c433f1eddf4537694d4c5f9f78cd9a14955", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 1703 | Contributors (this commit): 13 | Commits (past 90d): 20 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -72,6 +72,7 @@ from .wrappers import Request\n from .wrappers import Response\n \n if t.TYPE_CHECKING:\n+    import typing_extensions as te\n     from .blueprints import Blueprint\n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n@@ -1441,7 +1442,7 @@ class Flask(Scaffold):\n             f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n         )\n \n-    def raise_routing_exception(self, request: Request) -> t.NoReturn:\n+    def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":\n         \"\"\"Exceptions that are recording during routing are reraised with\n         this method.  During debug we are not reraising redirect requests\n         for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n\n@@ -12,6 +12,7 @@ from .helpers import is_ip\n from .json.tag import TaggedJSONSerializer\n \n if t.TYPE_CHECKING:\n+    import typing_extensions as te\n     from .app import Flask\n     from .wrappers import Request, Response\n \n@@ -92,7 +93,7 @@ class NullSession(SecureCookieSession):\n     but fail on setting.\n     \"\"\"\n \n-    def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n+    def _fail(self, *args: t.Any, **kwargs: t.Any) -> \"te.NoReturn\":\n         raise RuntimeError(\n             \"The session is unavailable because no secret \"\n             \"key was set.  Set the secret_key on the \"\n\n@@ -8,6 +8,7 @@ from . import json\n from .globals import current_app\n \n if t.TYPE_CHECKING:\n+    import typing_extensions as te\n     from werkzeug.routing import Rule\n \n \n@@ -91,7 +92,7 @@ class Request(RequestBase):\n \n             attach_enctype_error_multidict(self)\n \n-    def on_json_loading_failed(self, e: Exception) -> t.NoReturn:\n+    def on_json_loading_failed(self, e: Exception) -> \"te.NoReturn\":\n         if current_app and current_app.debug:\n             raise BadRequest(f\"Failed to decode JSON object: {e}\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
