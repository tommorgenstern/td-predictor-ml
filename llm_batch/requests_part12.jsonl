{"custom_id": "requests#f319006813c76454d5a0dfccebc6d73f02de88f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 3 | Churn Cumulative: 3 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,6 +24,9 @@ class Session(object):\n         # Map and wrap requests.api methods\n         self._map_api_methods()\n \n+    def __repr__(self):\n+        return '<requests-client at %s>' % (id(self))\n+\n     def _map_api_methods(self):\n         \"\"\" Reads each available method from requests.api and decorates\n         them with a wrapper that inserts any instance-local attributes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#853383a8d3e58ba30c6682cd7ddc0f2d82f42b18", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 8 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -29,8 +29,9 @@ class Session(object):\n \n     def _map_api_methods(self):\n         \"\"\"Reads each available method from requests.api and decorates\n-        them with a wrapper that inserts any instance-local attributes\n-        (from __attrs__) that have been set, combining them with **kwargs \"\"\"\n+        them with a wrapper, which inserts any instance-local attributes\n+        (from __attrs__) that have been set, combining them with **kwargs.\n+        \"\"\"\n         def pass_args(func):\n             def wrapper_func(*args, **kwargs):\n                 inst_attrs = dict((k, v) for k, v in self.__dict__.iteritems()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5bb18810d4a9bad0255628dde7d3d2825ca5113a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 15 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -16,22 +16,26 @@ class Session(object):\n     __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies']\n \n     def __init__(self, **kwargs):\n+\n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n+\n         # Map args from kwargs to instance-local variables\n         map(lambda k, v: (k in self.__attrs__) and setattr(self, k, v),\n                 kwargs.iterkeys(), kwargs.itervalues())\n+\n         # Map and wrap requests.api methods\n         self._map_api_methods()\n \n     def __repr__(self):\n-        return '<requests-client at %s>' % (id(self))\n+        return '<requests-client at 0x%x>' % (id(self))\n \n     def _map_api_methods(self):\n         \"\"\"Reads each available method from requests.api and decorates\n         them with a wrapper, which inserts any instance-local attributes\n         (from __attrs__) that have been set, combining them with **kwargs.\n         \"\"\"\n+\n         def pass_args(func):\n             def wrapper_func(*args, **kwargs):\n                 inst_attrs = dict((k, v) for k, v in self.__dict__.iteritems()\n@@ -41,6 +45,7 @@ class Session(object):\n                 kwargs = dict(inst_attrs.items() + kwargs.items())\n                 return func(*args, **kwargs)\n             return wrapper_func\n+\n         # Map and decorate each function available in requests.api\n         map(lambda fn: setattr(self, fn, pass_args(getattr(requests.api, fn))),\n                 requests.api.__all__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#efba606e574707968ec2b35985b8cbb78213cb71", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 20 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,8 +13,11 @@ import requests.api\n import cookielib\n \n class Session(object):\n+    \"\"\"A Requests session.\"\"\"\n+\n     __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies']\n \n+\n     def __init__(self, **kwargs):\n \n         # Set up a CookieJar to be used by default\n@@ -27,9 +30,11 @@ class Session(object):\n         # Map and wrap requests.api methods\n         self._map_api_methods()\n \n+\n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n \n+\n     def _map_api_methods(self):\n         \"\"\"Reads each available method from requests.api and decorates\n         them with a wrapper, which inserts any instance-local attributes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#519b9cee969e7364654a05ed466db253d35370d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 22 | Churn Cumulative: 42 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,13 +9,16 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n \n-import requests.api\n import cookielib\n \n+from . import api\n+\n+\n+\n class Session(object):\n     \"\"\"A Requests session.\"\"\"\n \n-    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies']\n+    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks']\n \n \n     def __init__(self, **kwargs):\n@@ -34,6 +37,13 @@ class Session(object):\n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n \n+    def __enter__(self):\n+        return self\n+\n+    def __exit__(self, *args):\n+        # print args\n+        pass\n+\n \n     def _map_api_methods(self):\n         \"\"\"Reads each available method from requests.api and decorates\n@@ -52,7 +62,11 @@ class Session(object):\n             return wrapper_func\n \n         # Map and decorate each function available in requests.api\n-        map(lambda fn: setattr(self, fn, pass_args(getattr(requests.api, fn))),\n-                requests.api.__all__)\n+        map(lambda fn: setattr(self, fn, pass_args(getattr(api, fn))),\n+                api.__all__)\n \n \n+def session(**kwargs):\n+    \"\"\"Returns a :class:`Session` for context-managment.\"\"\"\n+\n+    return Session(**kwargs)\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fc04d8a368b373945f2b7d701a683d1167ff4101", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 118 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -53,8 +53,12 @@ class Settings(object):\n                 return None\n         return object.__getattribute__(self, key)\n \n+\n settings = Settings()\n+\n settings.base_headers = {'User-Agent': 'python-requests.org'}\n settings.accept_gzip = True\n settings.proxies = None\n-settings.timeout_fallback = True # Use socket.setdefaulttimeout() as fallback?\n+\n+#: Use socket.setdefaulttimeout() as fallback?\n+settings.timeout_fallback = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d0cb56932c251667420e4876f99f5fa6b5c8a9a6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/5 | Churn Δ: 38 | Churn Cumulative: 457 | Contributors (this commit): 5 | Commits (past 90d): 20 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,15 +12,16 @@ This module impliments the Requests API.\n \"\"\"\n \n import config\n-from .models import Request, Response, AuthManager, AuthObject, auth_manager\n+from .models import Request, Response, AuthObject\n from .status_codes import codes\n+from .hooks import dispatch_hook\n \n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n def request(method, url,\n     params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-    timeout=None, allow_redirects=False, proxies=None):\n+    timeout=None, allow_redirects=False, proxies=None, hooks=None):\n \n     \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n@@ -37,7 +38,7 @@ def request(method, url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    r = Request(\n+    args = dict(\n         method = method,\n         url = url,\n         data = data,\n@@ -45,12 +46,16 @@ def request(method, url,\n         headers = headers,\n         cookiejar = cookies,\n         files = files,\n-        auth = auth or auth_manager.get_auth(url),\n+        auth = auth,\n         timeout = timeout or config.settings.timeout,\n         allow_redirects = allow_redirects,\n         proxies = proxies or config.settings.proxies\n     )\n \n+    args = dispatch_hook('args', hooks, args)\n+\n+    r = Request(**args)\n+\n     r.send()\n \n     return r.response\n\n@@ -0,0 +1,25 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.hooks\n+~~~~~~~~~~~~~~\n+\n+This module provides the capabilities for the Requests hooks system.\n+\"\"\"\n+\n+import warnings\n+\n+def dispatch_hook(key, hooks, hook_data):\n+    \"\"\"\"\"\"\n+\n+    hooks = hooks or dict()\n+\n+    if key in hooks:\n+        try:\n+            return hooks.get(key).__call__(hook_data) or hook_data\n+\n+        except Exception, why:\n+            warnings.warn(str(why))\n+\n+\n+    return hook_data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#86a06c5c184272ffd8e6fd4a33b427400713f739", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2636 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n-from models import HTTPError, auth_manager\n+from models import HTTPError\n from api import *\n from exceptions import *\n from status_codes import codes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9322d13f610fc26f63cc51c8c4b0a907d7392153", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 16 | Methods Changed: 6 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 40 | Churn Cumulative: 947 | Contributors (this commit): 11 | Commits (past 90d): 30 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,7 +13,7 @@ except ImportError:\n \n import requests\n \n-from requests.session import Session\n+from requests.sessions import Session\n \n \n HTTPBIN_URL = 'http://httpbin.org/'\n@@ -132,22 +132,21 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n \n-    def test_AUTH_HTTPS_200_OK_GET(self):\n+    def test_AUTH_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n \n             auth = ('user', 'pass')\n             url = service('basic-auth', 'user', 'pass')\n-            r = requests.get(url, auth=auth)\n \n+            r = requests.get(url, auth=auth)\n+            # print r.__dict__\n             self.assertEqual(r.status_code, 200)\n \n+\n             r = requests.get(url)\n             self.assertEqual(r.status_code, 200)\n \n-            # reset auto authentication\n-            requests.auth_manager.empty()\n-\n \n     def test_POSTBIN_GET_POST_FILES(self):\n \n@@ -245,21 +244,6 @@ class RequestsTestSuite(unittest.TestCase):\n         r.content.decode('ascii')\n \n \n-    def test_autoauth(self):\n-\n-        http_auth = ('user', 'pass')\n-        requests.auth_manager.add_auth('httpbin.org', http_auth)\n-\n-        r = requests.get(httpbin('basic-auth', 'user', 'pass'))\n-        self.assertEquals(r.status_code, 200)\n-\n-\n-        requests.auth_manager.add_auth('httpbin.ep.io', http_auth)\n-\n-        r = requests.get(httpsbin('basic-auth', 'user', 'pass'))\n-        self.assertEquals(r.status_code, 200)\n-\n-\n     def test_unicode_get(self):\n \n         for service in SERVICES:\n@@ -457,25 +441,33 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_session_HTTP_200_OK_GET(self):\n+\n         s = Session()\n         r = s.get(httpbin('/'))\n         self.assertEqual(r.status_code, 200)\n \n+\n     def test_session_HTTPS_200_OK_GET(self):\n+\n         s = Session()\n         r = s.get(httpsbin('/'))\n         self.assertEqual(r.status_code, 200)\n \n+\n     def test_session_persistent_headers(self):\n+\n         heads = {'User-agent': 'Mozilla/5.0'}\n+\n         s = Session()\n         s.headers = heads\n         # Make 2 requests from Session object, should send header both times\n-        r1 = s.get(httpbin('user-agent')\n+        r1 = s.get(httpbin('user-agent'))\n+\n         assert heads['User-agent'] in r1.content\n-        r2 = s.get(httpbin('user-agent')\n+        r2 = s.get(httpbin('user-agent'))\n+\n         assert heads['User-agent'] in r2.content\n-        self.assertEqual(r.status_code, 200)\n+        self.assertEqual(r2.status_code, 200)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7322aa5b6442af61a7c0d96c33c7e253215b6f95", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1427 | Contributors (this commit): 11 | Commits (past 90d): 64 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,8 @@ def request(method, url,\n     params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n     timeout=None, allow_redirects=False, proxies=None, hooks=None):\n \n-    \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n+    \"\"\"Constructs and sends a :class:`Request <models.Request>`.\n+    Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n\n@@ -38,7 +38,8 @@ class Request(object):\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n         allow_redirects=False, proxies=None):\n \n-        #: Float describ the timeout of the request. (Use socket.setdefaulttimeout() as fallback)\n+        #: Float describ the timeout of the request.\n+        # (Use socket.setdefaulttimeout() as fallback)\n         self.timeout = timeout\n \n         #: Request URL.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#17d3e1d498cd8afade26a31ec313739a71550eed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 11 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 1003 | Contributors (this commit): 10 | Commits (past 90d): 45 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -44,23 +44,31 @@ class Request(object):\n \n         #: Request URL.\n         self.url = url\n+\n         #: Dictonary of HTTP Headers to attach to the :class:`Request <models.Request>`.\n         self.headers = headers\n+\n         #: Dictionary of files to multipart upload (``{filename: content}``).\n         self.files = files\n+\n         #: HTTP Method to use. Available: GET, HEAD, PUT, POST, DELETE.\n         self.method = method\n+\n         #: Dictionary or byte of request body data to attach to the\n         #: :class:`Request <models.Request>`.\n         self.data = None\n+\n         #: Dictionary or byte of querystring data to attach to the\n         #: :class:`Request <models.Request>`.\n         self.params = None\n+\n         #: True if :class:`Request <models.Request>` is part of a redirect chain (disables history\n         #: and HTTPError storage).\n         self.redirect = redirect\n+\n         #: Set to True if full redirects are allowed (e.g. re-POST-ing of data at new ``Location``)\n         self.allow_redirects = allow_redirects\n+\n         # Dictionary mapping protocol to the URL of the proxy (e.g. {'http': 'foo.bar:3128'})\n         self.proxies = proxies\n \n@@ -75,10 +83,13 @@ class Request(object):\n             auth = AuthObject(*auth)\n         if not auth:\n             auth = auth_manager.get_auth(self.url)\n+\n         #: :class:`AuthObject` to attach to :class:`Request <models.Request>`.\n         self.auth = auth\n+\n         #: CookieJar to attach to :class:`Request <models.Request>`.\n         self.cookiejar = cookiejar\n+\n         #: True if Request has been sent.\n         self.sent = False\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#24da41005c5d36922516d22aa9d596ec88a1a8d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1008 | Contributors (this commit): 10 | Commits (past 90d): 46 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -260,7 +260,7 @@ class Request(object):\n \n \n     def _build_url(self):\n-        \"\"\"Build the actual URL to use\"\"\"\n+        \"\"\"Build the actual URL to use.\"\"\"\n \n         # Support for unicode domain names.\n         parsed_url = list(urlparse(self.url))\n@@ -286,6 +286,7 @@ class Request(object):\n         :param anyway: If True, request will be sent, even if it has\n         already been sent.\n         \"\"\"\n+\n         self._checks()\n         success = False\n \n@@ -495,8 +496,10 @@ class AuthManager(object):\n \n     def reduce_uri(self, uri, default_port=True):\n         \"\"\"Accept authority or URI and extract only the authority and path.\"\"\"\n+\n         # note HTTP URLs do not have a userinfo component\n         parts = urllib2.urlparse.urlsplit(uri)\n+\n         if parts[1]:\n             # URI\n             scheme = parts[0]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#783e540d6dc63c3fdebdcc94d163a05a54127dd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1010 | Contributors (this commit): 10 | Commits (past 90d): 47 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -510,7 +510,9 @@ class AuthManager(object):\n             scheme = None\n             authority = uri\n             path = '/'\n+\n         host, port = urllib2.splitport(authority)\n+\n         if default_port and port is None and scheme is not None:\n             dport = {\"http\": 80,\n                      \"https\": 443,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ba43d0fe5ff5b1705e94ae1b7f2abfe744c56d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 40 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -5,6 +5,21 @@ requests.hooks\n ~~~~~~~~~~~~~~\n \n This module provides the capabilities for the Requests hooks system.\n+\n+Available hooks:\n+\n+``args``:\n+    A dictionary of the arguments being sent to Request().\n+\n+``pre-request``:\n+    The Request object, directly before being sent.\n+\n+``post-request``:\n+    The Request object, directly after being sent.\n+\n+``response``:\n+    The response generated from a Request.\n+\n \"\"\"\n \n import warnings\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e102c1b4ca68c19920dfb835f89719985f532b2c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 272 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -155,7 +155,7 @@ html_sidebars = {\n #html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-html_show_sourcelink = True\n+html_show_sourcelink = False\n \n # If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n html_show_sphinx = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8ef0e88220dd5c87e6489a174ce4d87654a6b2dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 439 | Contributors (this commit): 5 | Commits (past 90d): 21 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -50,12 +50,12 @@ def request(method, url,\n         auth = auth,\n         timeout = timeout or config.settings.timeout,\n         allow_redirects = allow_redirects,\n-        proxies = proxies or config.settings.proxies\n+        proxies = proxies or config.settings.proxies,\n     )\n \n     args = dispatch_hook('args', hooks, args)\n \n-    r = Request(**args)\n+    r = Request(hooks=hooks, **args)\n \n     r.send()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e8a14e133d8c2dc35a76e0a2a2ae3151c171c26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 1070 | Contributors (this commit): 10 | Commits (past 90d): 51 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,10 +11,10 @@ Available hooks:\n ``args``:\n     A dictionary of the arguments being sent to Request().\n \n-``pre-request``:\n+``pre_request``:\n     The Request object, directly before being sent.\n \n-``post-request``:\n+``post_request``:\n     The Request object, directly after being sent.\n \n ``response``:\n\n@@ -16,6 +16,7 @@ from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n from .config import settings\n+from .hooks import dispatch_hook\n from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n@@ -36,7 +37,7 @@ class Request(object):\n     def __init__(self,\n         url=None, headers=dict(), files=None, method=None, data=dict(),\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n-        allow_redirects=False, proxies=None):\n+        allow_redirects=False, proxies=None, hooks=None):\n \n         #: Float describ the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -93,6 +94,9 @@ class Request(object):\n         #: True if Request has been sent.\n         self.sent = False\n \n+        #: Dictionary of event hook callbacks.\n+        self.hooks = hooks\n+\n \n         # Header manipulation and defaults.\n \n@@ -323,10 +327,18 @@ class Request(object):\n             try:\n                 opener = self._get_opener()\n                 try:\n+\n+                    # pre-request hook.\n+                    self.__dict__.update(\n+                        dispatch_hook('pre_request',\n+                            self.hooks, self.__dict__)\n+                    )\n+\n                     resp = opener(req, timeout=self.timeout)\n+\n                 except TypeError, err:\n                     # timeout argument is new since Python v2.6\n-                    if not \"timeout\" in str(err):\n+                    if not 'timeout' in str(err):\n                         raise\n \n                     if settings.timeout_fallback:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2a0eff9c7130371874a07ec74806cc703ebad2cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 46 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ Available hooks:\n import warnings\n \n def dispatch_hook(key, hooks, hook_data):\n-    \"\"\"\"\"\"\n+    \"\"\"Dipatches a hook dictionary on a given peice of data.\"\"\"\n \n     hooks = hooks or dict()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7836536459b6a15796c004440d3f927281808455", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1029 | Contributors (this commit): 10 | Commits (past 90d): 49 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -370,6 +370,9 @@ class Request(object):\n \n         self.sent = self.response.ok\n \n+        self.__dict__.update(\n+            dispatch_hook('post_request', self.hooks, self.__dict__))\n+\n         return self.sent\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#281ab5a8f9403135ffd05ff40f177529decd749e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 1490 | Contributors (this commit): 11 | Commits (past 90d): 72 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -53,12 +53,24 @@ def request(method, url,\n         proxies = proxies or config.settings.proxies,\n     )\n \n+    # Arguments manipulation hook.\n     args = dispatch_hook('args', hooks, args)\n \n+\n     r = Request(hooks=hooks, **args)\n \n+    # Pre-request hook.\n+    r = dispatch_hook('pre_request', hooks, r)\n+\n+    # Send the HTTP Request.\n     r.send()\n \n+    # Post-request hook.\n+    r = dispatch_hook('post_request', hooks, r)\n+\n+    # Response manipulation hook.\n+    r.response = dispatch_hook('response', hooks, r.response)\n+\n     return r.response\n \n \n\n@@ -16,7 +16,6 @@ from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n from .config import settings\n-from .hooks import dispatch_hook\n from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n@@ -328,12 +327,6 @@ class Request(object):\n                 opener = self._get_opener()\n                 try:\n \n-                    # pre-request hook.\n-                    self.__dict__.update(\n-                        dispatch_hook('pre_request',\n-                            self.hooks, self.__dict__)\n-                    )\n-\n                     resp = opener(req, timeout=self.timeout)\n \n                 except TypeError, err:\n@@ -370,9 +363,6 @@ class Request(object):\n \n         self.sent = self.response.ok\n \n-        self.__dict__.update(\n-            dispatch_hook('post_request', self.hooks, self.__dict__))\n-\n         return self.sent\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#855c27370790c0ba781d20f776a907fa5e2995ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 48 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -24,6 +24,7 @@ Available hooks:\n \n import warnings\n \n+\n def dispatch_hook(key, hooks, hook_data):\n     \"\"\"Dipatches a hook dictionary on a given peice of data.\"\"\"\n \n@@ -36,5 +37,4 @@ def dispatch_hook(key, hooks, hook_data):\n         except Exception, why:\n             warnings.warn(str(why))\n \n-\n     return hook_data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#51038497f6551e132bee06c1220daa69a7b7a71d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 452 | Contributors (this commit): 5 | Commits (past 90d): 23 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -56,7 +56,6 @@ def request(method, url,\n     # Arguments manipulation hook.\n     args = dispatch_hook('args', hooks, args)\n \n-\n     r = Request(hooks=hooks, **args)\n \n     # Pre-request hook.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b0a0b509da5df358b1ab2f66f0aa6aebad27bd16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2637 | Contributors (this commit): 7 | Commits (past 90d): 11 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -22,5 +22,6 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from models import HTTPError\n from api import *\n from exceptions import *\n+from sessions import session\n from status_codes import codes\n from config import settings\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7e255177dc206ec22118ef98b3b857c598073bd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): -6/4 | Churn Δ: 32 | Churn Cumulative: 1120 | Contributors (this commit): 11 | Commits (past 90d): 53 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,6 +20,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicA\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n+from .utils import dict_from_cookiejar\n from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod\n \n \n@@ -187,6 +188,12 @@ class Request(object):\n                 response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n                 response.read = resp.read\n                 response.close = resp.close\n+\n+                if self.cookiejar:\n+\n+                    response.cookies = dict_from_cookiejar(self.cookiejar)\n+\n+\n             except AttributeError:\n                 pass\n \n@@ -397,6 +404,7 @@ class Response(object):\n         self.history = []\n         #: The Request that created the Response.\n         self.request = None\n+        self.cookies = None\n \n \n     def __repr__(self):\n\n@@ -0,0 +1,24 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+requests.utils\n+~~~~~~~~~~~~~~\n+\n+This module provides utlity functions that are used within Requests\n+that are also useful for external consumption.\n+\n+\"\"\"\n+\n+\n+def dict_from_cookiejar(cookiejar):\n+    \"\"\"Returns a key/value dictoinary from a CookieJar.\"\"\"\n+\n+    cookie_dict = {}\n+\n+    for _, cookies in cookiejar._cookies.items():\n+        for _, cookies in cookies.items():\n+            for cookie in cookies.values():\n+                cookie_dict[cookie.name] = cookie.value\n+\n+    return cookie_dict\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d9e571737716e2929386f5279ce80c130d772a5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 26 | Churn Cumulative: 50 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,9 +9,12 @@ that are also useful for external consumption.\n \n \"\"\"\n \n+import Cookie\n+import cookielib\n+\n \n def dict_from_cookiejar(cookiejar):\n-    \"\"\"Returns a key/value dictoinary from a CookieJar.\"\"\"\n+    \"\"\"Returns a key/value dictionary from a CookieJar.\"\"\"\n \n     cookie_dict = {}\n \n@@ -22,3 +25,24 @@ def dict_from_cookiejar(cookiejar):\n \n     return cookie_dict\n \n+\n+def cookiejar_from_dict(cookie_dict, domain=None):\n+    \"\"\"Returns a CookieJar from a key/value dictoinary.\"\"\"\n+\n+    # create cookiejar\n+    cj = cookielib.CookieJar()\n+\n+    for k, v in cookie_dict.items():\n+\n+        # create cookie\n+        ck = Cookie.SimpleCookie()\n+        ck.name = v\n+        ck.expires = 0\n+        ck.path = '/'\n+        ck.domain = domain\n+\n+        # add cookie to cookiejar\n+        cj.set_cookie(ck)\n+\n+    return cj\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d0aa0175e6b32bdb5b4f6b87c07d02c0088fcdea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2641 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.5.1'\n-__build__ = 0x000501\n+__version__ = '0.6.0'\n+__build__ = 0x000600\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec33ce9d29d591e18ded52018501942d3eb02776", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 52 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,7 @@ def dict_from_cookiejar(cookiejar):\n \n \n def cookiejar_from_dict(cookie_dict, domain=None):\n-    \"\"\"Returns a CookieJar from a key/value dictoinary.\"\"\"\n+    \"\"\"Returns a CookieJar from a key/value dictionary.\"\"\"\n \n     # create cookiejar\n     cj = cookielib.CookieJar()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7024a60004db98e467260402e6c2f5338e9d619", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 36 | Churn Cumulative: 88 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,7 +9,6 @@ that are also useful for external consumption.\n \n \"\"\"\n \n-import Cookie\n import cookielib\n \n \n@@ -21,28 +20,45 @@ def dict_from_cookiejar(cookiejar):\n     for _, cookies in cookiejar._cookies.items():\n         for _, cookies in cookies.items():\n             for cookie in cookies.values():\n+                # print cookie\n                 cookie_dict[cookie.name] = cookie.value\n \n     return cookie_dict\n \n \n-def cookiejar_from_dict(cookie_dict, domain=None):\n+def cookiejar_from_dict(cookie_dict):\n     \"\"\"Returns a CookieJar from a key/value dictionary.\"\"\"\n \n+    # return cookiejar if one was passed in\n+    if isinstance(cookie_dict, cookielib.CookieJar):\n+        return cookie_dict\n+\n     # create cookiejar\n     cj = cookielib.CookieJar()\n \n     for k, v in cookie_dict.items():\n \n-        # create cookie\n-        ck = Cookie.SimpleCookie()\n-        ck.name = v\n-        ck.expires = 0\n-        ck.path = '/'\n-        ck.domain = domain\n+        cookie = cookielib.Cookie(\n+            version=0,\n+            name=k,\n+            value=v,\n+            port=None,\n+            port_specified=False,\n+            domain='',\n+            domain_specified=False,\n+            domain_initial_dot=False,\n+            path='/',\n+            path_specified=True,\n+            secure=False,\n+            expires=None,\n+            discard=True,\n+            comment=None,\n+            comment_url=None,\n+            rest={'HttpOnly': None},\n+            rfc2109=False\n+        )\n \n         # add cookie to cookiejar\n-        cj.set_cookie(ck)\n+        cj.set_cookie(cookie)\n \n     return cj\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#66391e5c9da77889ebaf1c8a1cd3f84543d6943b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 459 | Contributors (this commit): 5 | Commits (past 90d): 24 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,7 +15,9 @@ import config\n from .models import Request, Response, AuthObject\n from .status_codes import codes\n from .hooks import dispatch_hook\n+from .utils import cookiejar_from_dict\n \n+from urlparse import urlparse\n \n __all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n@@ -39,6 +41,11 @@ def request(method, url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n+    if cookies is None:\n+        cookies = {}\n+\n+    cookies = cookiejar_from_dict(cookies)\n+\n     args = dict(\n         method = method,\n         url = url,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#467766cfe8b2f4f13f5bee1346b9ab7a8cbfcb62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 51 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,6 +12,7 @@ requests (cookies, auth, proxies).\n import cookielib\n \n from . import api\n+from .utils import add_dict_to_cookiejar\n \n \n \n@@ -58,6 +59,14 @@ class Session(object):\n                 # Combine instance-local values with kwargs values, with\n                 # priority to values in kwargs\n                 kwargs = dict(inst_attrs.items() + kwargs.items())\n+\n+                # If a session request has a cookie_dict, inject the\n+                # values into the existing CookieJar instead.\n+                if isinstance(kwargs.get('cookies', None), dict):\n+                    kwargs['cookies'] = add_dict_to_cookiejar(\n+                        inst_attrs['cookies'], kwargs['cookies']\n+                    )\n+\n                 return func(*args, **kwargs)\n             return wrapper_func\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e477fce2112dc7078363c34798facbde7be4f7c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 96 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,14 @@ def cookiejar_from_dict(cookie_dict):\n     # create cookiejar\n     cj = cookielib.CookieJar()\n \n+    cj = add_dict_to_cookiejar(cj, cookie_dict)\n+\n+    return cj\n+\n+\n+def add_dict_to_cookiejar(cj, cookie_dict):\n+    \"\"\"Returns a CookieJar from a key/value dictionary.\"\"\"\n+\n     for k, v in cookie_dict.items():\n \n         cookie = cookielib.Cookie(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7307298d28a30ed893d095338a36f7f62a7f1b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 3 | Churn Cumulative: 54 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -67,6 +67,9 @@ class Session(object):\n                         inst_attrs['cookies'], kwargs['cookies']\n                     )\n \n+                if kwargs.get('headers', None) and inst_attrs.get('headers', None):\n+                    kwargs['headers'].update(inst_attrs['headers'])\n+\n                 return func(*args, **kwargs)\n             return wrapper_func\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3f8f1dc00c11c501c9596a8d8008e40d4d99179f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 122 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ class Settings(object):\n     _singleton = {}\n \n     # attributes with defaults\n-    __attrs__ = ('timeout', 'verbose')\n+    __attrs__ = []\n \n     def __init__(self, **kwargs):\n         super(Settings, self).__init__()\n@@ -59,6 +59,8 @@ settings = Settings()\n settings.base_headers = {'User-Agent': 'python-requests.org'}\n settings.accept_gzip = True\n settings.proxies = None\n+settings.verbose = None\n+settings.timeout = None\n \n #: Use socket.setdefaulttimeout() as fallback?\n settings.timeout_fallback = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e0ae2b415513268df3b56cb1d396b01f2888dcdf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 10 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 1575 | Contributors (this commit): 12 | Commits (past 90d): 78 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,7 +33,7 @@ def request(method, url,\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n     :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n@@ -87,7 +87,7 @@ def get(url, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n@@ -103,7 +103,7 @@ def head(url, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n@@ -120,7 +120,7 @@ def post(url, data='', **kwargs):\n     :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n@@ -138,7 +138,7 @@ def put(url, data='', **kwargs):\n     :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n@@ -156,7 +156,7 @@ def patch(url, data='', **kwargs):\n     :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n@@ -174,7 +174,7 @@ def delete(url, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n-    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n\n@@ -37,7 +37,7 @@ class Request(object):\n     def __init__(self,\n         url=None, headers=dict(), files=None, method=None, data=dict(),\n         params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n-        allow_redirects=False, proxies=None, hooks=None):\n+        allow_redirects=False, proxies=None):\n \n         #: Float describ the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -94,9 +94,6 @@ class Request(object):\n         #: True if Request has been sent.\n         self.sent = False\n \n-        #: Dictionary of event hook callbacks.\n-        self.hooks = hooks\n-\n \n         # Header manipulation and defaults.\n \n@@ -404,6 +401,7 @@ class Response(object):\n         self.history = []\n         #: The Request that created the Response.\n         self.request = None\n+        #: A dictionary of Cookies the server sent back.\n         self.cookies = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
