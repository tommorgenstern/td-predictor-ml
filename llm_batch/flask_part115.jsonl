{"custom_id": "flask#b55ccae72aba110ae08e8ef0a9cfb8649750594a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2144 | Contributors (this commit): 18 | Commits (past 90d): 4 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -171,7 +171,7 @@ def make_response(*args: t.Any) -> Response:\n         return current_app.response_class()\n     if len(args) == 1:\n         args = args[0]\n-    return current_app.make_response(args)  # type: ignore\n+    return current_app.make_response(args)\n \n \n def url_for(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d5abfadd7132c9a78e14e5ba6c07aed47115280", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1292 | Contributors (this commit): 15 | Commits (past 90d): 1 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -795,7 +795,9 @@ def _validate_key(ctx, param, value):\n \n         if is_context:\n             raise click.BadParameter(\n-                'When \"--cert\" is an SSLContext object, \"--key is not used.', ctx, param\n+                'When \"--cert\" is an SSLContext object, \"--key\" is not used.',\n+                ctx,\n+                param,\n             )\n \n         if not cert:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8fdab74cc80c39f45aa65da5dd029c8d262756c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2146 | Contributors (this commit): 19 | Commits (past 90d): 5 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -49,7 +49,7 @@ def get_load_dotenv(default: bool = True) -> bool:\n \n \n def stream_with_context(\n-    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n+    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n ) -> t.Iterator[t.AnyStr]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#700fc7d928b7a625b04e6865b3eb282043e90f7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 14 | Churn Cumulative: 174 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -305,10 +305,22 @@ class TaggedJSONSerializer:\n \n         return self.tags[key].to_python(value[key])\n \n+    def _untag_scan(self, value: t.Any) -> t.Any:\n+        if isinstance(value, dict):\n+            # untag each item recursively\n+            value = {k: self._untag_scan(v) for k, v in value.items()}\n+            # untag the dict itself\n+            value = self.untag(value)\n+        elif isinstance(value, list):\n+            # untag each item recursively\n+            value = [self._untag_scan(item) for item in value]\n+\n+        return value\n+\n     def dumps(self, value: t.Any) -> str:\n         \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n         return dumps(self.tag(value), separators=(\",\", \":\"))\n \n     def loads(self, value: str) -> t.Any:\n         \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n-        return loads(value, object_hook=self.untag)\n+        return self._untag_scan(loads(value))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#08d3185e87cfeccc4bf4d26ee5c4c0dfd4ec8564", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2778 | Contributors (this commit): 24 | Commits (past 90d): 9 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -115,7 +115,7 @@ class _AppCtxGlobals:\n \n \n def after_this_request(\n-    f: ft.AfterRequestCallable[t.Any]\n+    f: ft.AfterRequestCallable[t.Any],\n ) -> ft.AfterRequestCallable[t.Any]:\n     \"\"\"Executes a function after this request.  This is useful to modify\n     response objects.  The function is passed the response object and has\n\n@@ -48,7 +48,7 @@ def get_load_dotenv(default: bool = True) -> bool:\n \n \n def stream_with_context(\n-    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]]\n+    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n ) -> t.Iterator[t.AnyStr]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ecc057dd4857e655f0844b781899a917852042a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 114 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,7 @@ from collections import defaultdict\n from functools import update_wrapper\n \n import click\n+from jinja2 import BaseLoader\n from jinja2 import FileSystemLoader\n from werkzeug.exceptions import default_exceptions\n from werkzeug.exceptions import HTTPException\n@@ -272,7 +273,7 @@ class Scaffold:\n         self._static_url_path = value\n \n     @cached_property\n-    def jinja_loader(self) -> FileSystemLoader | None:\n+    def jinja_loader(self) -> BaseLoader | None:\n         \"\"\"The Jinja loader for this object's templates. By default this\n         is a class :class:`jinja2.loaders.FileSystemLoader` to\n         :attr:`template_folder` if it is set.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1af8f95785b85d0937153ee63d504c0b51934d80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 3371 | Contributors (this commit): 42 | Commits (past 90d): 4 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -858,7 +858,9 @@ class SeparatedPathType(click.Path):\n         self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n     ) -> t.Any:\n         items = self.split_envvar_value(value)\n-        return [super().convert(item, param, ctx) for item in items]\n+        # can't call no-arg super() inside list comprehension until Python 3.12\n+        super_convert = super().convert\n+        return [super_convert(item, param, ctx) for item in items]\n \n \n @click.command(\"run\", short_help=\"Run a development server.\")\n\n@@ -679,3 +679,8 @@ def test_cli_empty(app):\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n     assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n+\n+\n+def test_run_exclude_patterns():\n+    ctx = run_command.make_context(\"run\", [\"--exclude-patterns\", __file__])\n+    assert ctx.params[\"exclude_patterns\"] == [__file__]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#87d5f5b9a9697434e6d972b021201105eabb54e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 25 | Files Changed: 6 | Hunks: 18 | Methods Changed: 9 | Complexity Δ (Sum/Max): -8/0 | Churn Δ: 44 | Churn Cumulative: 4767 | Contributors (this commit): 36 | Commits (past 90d): 8 | Contributors (cumulative): 46 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,16 +11,22 @@ release, version = get_version(\"Flask\")\n \n # General --------------------------------------------------------------\n \n-master_doc = \"index\"\n+default_role = \"code\"\n extensions = [\n     \"sphinx.ext.autodoc\",\n+    \"sphinx.ext.extlinks\",\n     \"sphinx.ext.intersphinx\",\n     \"sphinxcontrib.log_cabinet\",\n-    \"pallets_sphinx_themes\",\n-    \"sphinx_issues\",\n     \"sphinx_tabs.tabs\",\n+    \"pallets_sphinx_themes\",\n ]\n+autodoc_member_order = \"bysource\"\n autodoc_typehints = \"description\"\n+autodoc_preserve_defaults = True\n+extlinks = {\n+    \"issue\": (\"https://github.com/pallets/flask/issues/%s\", \"#%s\"),\n+    \"pr\": (\"https://github.com/pallets/flask/pull/%s\", \"#%s\"),\n+}\n intersphinx_mapping = {\n     \"python\": (\"https://docs.python.org/3/\", None),\n     \"werkzeug\": (\"https://werkzeug.palletsprojects.com/\", None),\n@@ -31,7 +37,6 @@ intersphinx_mapping = {\n     \"wtforms\": (\"https://wtforms.readthedocs.io/\", None),\n     \"blinker\": (\"https://blinker.readthedocs.io/\", None),\n }\n-issues_github_path = \"pallets/flask\"\n \n # HTML -----------------------------------------------------------------\n \n@@ -57,10 +62,6 @@ html_logo = \"_static/flask-vertical.png\"\n html_title = f\"Flask Documentation ({version})\"\n html_show_sourcelink = False\n \n-# LaTeX ----------------------------------------------------------------\n-\n-latex_documents = [(master_doc, f\"Flask-{version}.tex\", html_title, author, \"manual\")]\n-\n # Local Extensions -----------------------------------------------------\n \n \n\n@@ -229,15 +229,13 @@ def prepare_import(path: str) -> str:\n @t.overload\n def locate_app(\n     module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True] = True\n-) -> Flask:\n-    ...\n+) -> Flask: ...\n \n \n @t.overload\n def locate_app(\n     module_name: str, app_name: str | None, raise_if_not_found: t.Literal[False] = ...\n-) -> Flask | None:\n-    ...\n+) -> Flask | None: ...\n \n \n def locate_app(\n\n@@ -27,12 +27,10 @@ class ConfigAttribute(t.Generic[T]):\n         self.get_converter = get_converter\n \n     @t.overload\n-    def __get__(self, obj: None, owner: None) -> te.Self:\n-        ...\n+    def __get__(self, obj: None, owner: None) -> te.Self: ...\n \n     @t.overload\n-    def __get__(self, obj: App, owner: type[App]) -> T:\n-        ...\n+    def __get__(self, obj: App, owner: type[App]) -> T: ...\n \n     def __get__(self, obj: App | None, owner: type[App] | None = None) -> T | te.Self:\n         if obj is None:\n\n@@ -40,6 +40,7 @@ be processed before ``dict``.\n \n     app.session_interface.serializer.register(TagOrderedDict, index=0)\n \"\"\"\n+\n from __future__ import annotations\n \n import typing as t\n\n@@ -176,7 +176,7 @@ def test_jsonify_aware_datetimes(tz):\n def test_jsonify_uuid_types(app, client):\n     \"\"\"Test jsonify with uuid.UUID types\"\"\"\n \n-    test_uuid = uuid.UUID(bytes=b\"\\xDE\\xAD\\xBE\\xEF\" * 4)\n+    test_uuid = uuid.UUID(bytes=b\"\\xde\\xad\\xbe\\xef\" * 4)\n     url = \"/uuid_test\"\n     app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n \n\n@@ -17,20 +17,16 @@ async def after_async(response: Response) -> Response:\n \n \n @app.before_request\n-def before_sync() -> None:\n-    ...\n+def before_sync() -> None: ...\n \n \n @app.before_request\n-async def before_async() -> None:\n-    ...\n+async def before_async() -> None: ...\n \n \n @app.teardown_appcontext\n-def teardown_sync(exc: BaseException | None) -> None:\n-    ...\n+def teardown_sync(exc: BaseException | None) -> None: ...\n \n \n @app.teardown_appcontext\n-async def teardown_async(exc: BaseException | None) -> None:\n-    ...\n+async def teardown_async(exc: BaseException | None) -> None: ...\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#db461112c70d5f2bf93c7a6ac27eeb665c232dd0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 361 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -277,6 +277,14 @@ class SessionInterface:\n session_json_serializer = TaggedJSONSerializer()\n \n \n+def _lazy_sha1(string: bytes = b\"\") -> t.Any:\n+    \"\"\"Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\n+    SHA-1, in which case the import and use as a default would fail before the\n+    developer can configure something else.\n+    \"\"\"\n+    return hashlib.sha1(string)\n+\n+\n class SecureCookieSessionInterface(SessionInterface):\n     \"\"\"The default session interface that stores sessions in signed cookies\n     through the :mod:`itsdangerous` module.\n@@ -286,7 +294,7 @@ class SecureCookieSessionInterface(SessionInterface):\n     #: signing of cookie based sessions.\n     salt = \"cookie-session\"\n     #: the hash function to use for the signature.  The default is sha1\n-    digest_method = staticmethod(hashlib.sha1)\n+    digest_method = staticmethod(_lazy_sha1)\n     #: the name of the itsdangerous supported key derivation.  The default\n     #: is hmac.\n     key_derivation = \"hmac\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5fdce4c331ac530280cc941179d364a07f4a1088", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 64 | Churn Cumulative: 7792 | Contributors (this commit): 33 | Commits (past 90d): 17 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -241,6 +241,16 @@ class Flask(App):\n             root_path=root_path,\n         )\n \n+        #: The Click command group for registering CLI commands for this\n+        #: object. The commands are available from the ``flask`` command\n+        #: once the application has been discovered and blueprints have\n+        #: been registered.\n+        self.cli = cli.AppGroup()\n+\n+        # Set the name of the Click group in case someone wants to add\n+        # the app's commands to another CLI tool.\n+        self.cli.name = self.name\n+\n         # Add a static route using the provided static_url_path, static_host,\n         # and static_folder if there is a configured static_folder.\n         # Note we do this without checking if static_folder exists.\n\n@@ -4,16 +4,54 @@ import os\n import typing as t\n from datetime import timedelta\n \n+from .cli import AppGroup\n from .globals import current_app\n from .helpers import send_from_directory\n from .sansio.blueprints import Blueprint as SansioBlueprint\n from .sansio.blueprints import BlueprintSetupState as BlueprintSetupState  # noqa\n+from .sansio.scaffold import _sentinel\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from .wrappers import Response\n \n \n class Blueprint(SansioBlueprint):\n+    def __init__(\n+        self,\n+        name: str,\n+        import_name: str,\n+        static_folder: str | os.PathLike[str] | None = None,\n+        static_url_path: str | None = None,\n+        template_folder: str | os.PathLike[str] | None = None,\n+        url_prefix: str | None = None,\n+        subdomain: str | None = None,\n+        url_defaults: dict[str, t.Any] | None = None,\n+        root_path: str | None = None,\n+        cli_group: str | None = _sentinel,  # type: ignore\n+    ) -> None:\n+        super().__init__(\n+            name,\n+            import_name,\n+            static_folder,\n+            static_url_path,\n+            template_folder,\n+            url_prefix,\n+            subdomain,\n+            url_defaults,\n+            root_path,\n+            cli_group,\n+        )\n+\n+        #: The Click command group for registering CLI commands for this\n+        #: object. The commands are available from the ``flask`` command\n+        #: once the application has been discovered and blueprints have\n+        #: been registered.\n+        self.cli = AppGroup()\n+\n+        # Set the name of the Click group in case someone wants to add\n+        # the app's commands to another CLI tool.\n+        self.cli.name = self.name\n+\n     def get_send_file_max_age(self, filename: str | None) -> int | None:\n         \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n         value for a given file path if it wasn't passed.\n\n@@ -410,10 +410,6 @@ class App(Scaffold):\n         # request.\n         self._got_first_request = False\n \n-        # Set the name of the Click group in case someone wants to add\n-        # the app's commands to another CLI tool.\n-        self.cli.name = self.name\n-\n     def _check_setup_finished(self, f_name: str) -> None:\n         if self._got_first_request:\n             raise AssertionError(\n\n@@ -8,7 +8,6 @@ import typing as t\n from collections import defaultdict\n from functools import update_wrapper\n \n-import click\n from jinja2 import BaseLoader\n from jinja2 import FileSystemLoader\n from werkzeug.exceptions import default_exceptions\n@@ -16,10 +15,12 @@ from werkzeug.exceptions import HTTPException\n from werkzeug.utils import cached_property\n \n from .. import typing as ft\n-from ..cli import AppGroup\n from ..helpers import get_root_path\n from ..templating import _default_template_ctx_processor\n \n+if t.TYPE_CHECKING:  # pragma: no cover\n+    from click import Group\n+\n # a singleton sentinel value for parameter defaults\n _sentinel = object()\n \n@@ -66,6 +67,7 @@ class Scaffold:\n     .. versionadded:: 2.0\n     \"\"\"\n \n+    cli: Group\n     name: str\n     _static_folder: str | None = None\n     _static_url_path: str | None = None\n@@ -97,12 +99,6 @@ class Scaffold:\n         #: up resources contained in the package.\n         self.root_path = root_path\n \n-        #: The Click command group for registering CLI commands for this\n-        #: object. The commands are available from the ``flask`` command\n-        #: once the application has been discovered and blueprints have\n-        #: been registered.\n-        self.cli: click.Group = AppGroup()\n-\n         #: A dictionary mapping endpoint names to view functions.\n         #:\n         #: To register a view function, use the :meth:`route` decorator.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ccf125bf30102beedafb3ecef72376bfb6c90a4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 363 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -368,7 +368,7 @@ class SecureCookieSessionInterface(SessionInterface):\n         val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore\n         response.set_cookie(\n             name,\n-            val,  # type: ignore\n+            val,\n             expires=expires,\n             httponly=httponly,\n             domain=domain,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a363642a32880114c7944b1017f2f69bd4cc00eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 209 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -71,7 +71,7 @@ class Request(RequestBase):\n         reconstruct the same URL or a modified URL.\n         \"\"\"\n         if self.url_rule is not None:\n-            return self.url_rule.endpoint\n+            return self.url_rule.endpoint  # type: ignore[no-any-return]\n \n         return None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eb1182a10e757b5e76009c69fdf3a88a5afc6840", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 367 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -365,10 +365,10 @@ class SecureCookieSessionInterface(SessionInterface):\n             return\n \n         expires = self.get_expiration_time(app, session)\n-        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore\n+        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore[union-attr]\n         response.set_cookie(\n             name,\n-            val,  # type: ignore\n+            val,\n             expires=expires,\n             httponly=httponly,\n             domain=domain,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#860a25c390eba8e6c089a818b02800dd9d789864", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2171 | Contributors (this commit): 19 | Commits (past 90d): 1 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -91,7 +91,7 @@ def stream_with_context(\n             gen = generator_or_function(*args, **kwargs)  # type: ignore[operator]\n             return stream_with_context(gen)\n \n-        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type]\n+        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type, return-value]\n \n     def generator() -> t.Iterator[t.AnyStr | None]:\n         ctx = _cv_request.get(None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c7da8c2aa3a923fc620ad480a8831a8a0f21ab37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1337 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -291,7 +291,7 @@ class App(Scaffold):\n         instance_path: str | None = None,\n         instance_relative_config: bool = False,\n         root_path: str | None = None,\n-    ):\n+    ) -> None:\n         super().__init__(\n             import_name=import_name,\n             static_folder=static_folder,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d718ecf6d3dfc4656d262154c59672437c1ea075", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 6162 | Contributors (this commit): 28 | Commits (past 90d): 3 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -198,6 +198,7 @@ class Flask(App):\n             \"PREFERRED_URL_SCHEME\": \"http\",\n             \"TEMPLATES_AUTO_RELOAD\": None,\n             \"MAX_COOKIE_SIZE\": 4093,\n+            \"PROVIDE_AUTOMATIC_OPTIONS\": True,\n         }\n     )\n \n\n@@ -638,7 +638,7 @@ class App(Scaffold):\n             )\n \n         if provide_automatic_options is None:\n-            if \"OPTIONS\" not in methods:\n+            if \"OPTIONS\" not in methods and self.config[\"PROVIDE_AUTOMATIC_OPTIONS\"]:\n                 provide_automatic_options = True\n                 required_methods.add(\"OPTIONS\")\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#28d5a4d71824ff5823ae310e3fd014b48b33d583", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 68 | Lines Deleted: 42 | Files Changed: 3 | Hunks: 16 | Methods Changed: 11 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 110 | Churn Cumulative: 10370 | Contributors (this commit): 68 | Commits (past 90d): 4 | Contributors (cumulative): 83 | DMM Complexity: 1.0\n\nDIFF:\n@@ -320,9 +320,10 @@ class Flask(App):\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n \n         For example, if the file ``schema.sql`` is next to the file\n         ``app.py`` where the ``Flask`` app is defined, it can be opened\n@@ -333,31 +334,46 @@ class Flask(App):\n             with app.open_resource(\"schema.sql\") as f:\n                 conn.executescript(f.read())\n \n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n \n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n \n-    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Opens a resource from the application's instance folder\n-        (:attr:`instance_path`).  Otherwise works like\n-        :meth:`open_resource`.  Instance resources can also be opened for\n-        writing.\n+        if mode == \"rb\":\n+            return open(path, mode)\n \n-        :param resource: the name of the resource.  To access resources within\n-                         subfolders use forward slashes as separator.\n-        :param mode: resource file opening mode, default is 'rb'.\n+        return open(path, mode, encoding=encoding)\n+\n+    def open_instance_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to the application's instance folder\n+        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n+        instance folder can be opened for writing.\n+\n+        :param resource: Path to the resource relative to :attr:`instance_path`.\n+        :param mode: Open the file in this mode.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n+\n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n-        return open(os.path.join(self.instance_path, resource), mode)\n+        path = os.path.join(self.instance_path, resource)\n+\n+        if \"b\" in mode:\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n \n     def create_jinja_environment(self) -> Environment:\n         \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n\n@@ -101,29 +101,28 @@ class Blueprint(SansioBlueprint):\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n+        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n+        method.\n \n-        For example, if the file ``schema.sql`` is next to the file\n-        ``app.py`` where the ``Flask`` app is defined, it can be opened\n-        with:\n-\n-        .. code-block:: python\n-\n-            with app.open_resource(\"schema.sql\") as f:\n-                conn.executescript(f.read())\n-\n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n \n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n+\n+        if mode == \"rb\":\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n\n@@ -334,16 +334,27 @@ class TestHelpers:\n             assert rv.data == b\"Hello\"\n             assert rv.mimetype == \"text/html\"\n \n+\n @pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n-    def test_open_resource(self, mode):\n+def test_open_resource(mode):\n     app = flask.Flask(__name__)\n \n     with app.open_resource(\"static/index.html\", mode) as f:\n         assert \"<h1>Hello World!</h1>\" in str(f.read())\n \n+\n @pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n-    def test_open_resource_exceptions(self, mode):\n+def test_open_resource_exceptions(mode):\n     app = flask.Flask(__name__)\n \n     with pytest.raises(ValueError):\n         app.open_resource(\"static/index.html\", mode)\n+\n+\n+@pytest.mark.parametrize(\"encoding\", (\"utf-8\", \"utf-16-le\"))\n+def test_open_resource_with_encoding(tmp_path, encoding):\n+    app = flask.Flask(__name__, root_path=os.fspath(tmp_path))\n+    (tmp_path / \"test\").write_text(\"test\", encoding=encoding)\n+\n+    with app.open_resource(\"test\", mode=\"rt\", encoding=encoding) as f:\n+        assert f.read() == \"test\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#176fdfa0002360670f698d3828cfff11f97349f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 2632 | Contributors (this commit): 19 | Commits (past 90d): 2 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -47,9 +47,21 @@ def get_load_dotenv(default: bool = True) -> bool:\n     return val.lower() in (\"0\", \"false\", \"no\")\n \n \n+@t.overload\n+def stream_with_context(\n+    generator_or_function: t.Iterator[t.AnyStr],\n+) -> t.Iterator[t.AnyStr]: ...\n+\n+\n+@t.overload\n+def stream_with_context(\n+    generator_or_function: t.Callable[..., t.Iterator[t.AnyStr]],\n+) -> t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]: ...\n+\n+\n def stream_with_context(\n     generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n-) -> t.Iterator[t.AnyStr]:\n+) -> t.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n     memory leaks with badly written WSGI middlewares.  The downside is that if\n\n@@ -113,7 +113,7 @@ def _default(o: t.Any) -> t.Any:\n         return str(o)\n \n     if dataclasses and dataclasses.is_dataclass(o):\n-        return dataclasses.asdict(o)\n+        return dataclasses.asdict(o)  # type: ignore[call-overload]\n \n     if hasattr(o, \"__html__\"):\n         return str(o.__html__())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b337d210583a3f5f84d0f70b56ae9a82b029dab5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 449 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def _default(o: t.Any) -> t.Any:\n         return str(o)\n \n     if dataclasses and dataclasses.is_dataclass(o):\n-        return dataclasses.asdict(o)  # type: ignore[call-overload]\n+        return dataclasses.asdict(o)  # type: ignore[arg-type]\n \n     if hasattr(o, \"__html__\"):\n         return str(o.__html__())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dffe3034825edc4f84aded013fc9c6590e545ed5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2187 | Contributors (this commit): 19 | Commits (past 90d): 2 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -103,7 +103,7 @@ def stream_with_context(\n             gen = generator_or_function(*args, **kwargs)  # type: ignore[operator]\n             return stream_with_context(gen)\n \n-        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type, return-value]\n+        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type]\n \n     def generator() -> t.Iterator[t.AnyStr | None]:\n         ctx = _cv_request.get(None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9e831e915fa875423af0c0de8f53a3780055919e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 17 | Files Changed: 8 | Hunks: 17 | Methods Changed: 12 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 35 | Churn Cumulative: 12479 | Contributors (this commit): 59 | Commits (past 90d): 15 | Contributors (cumulative): 99 | DMM Complexity: 0.0\n\nDIFF:\n@@ -59,6 +59,7 @@ if t.TYPE_CHECKING:  # pragma: no cover\n \n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n+    from .typing import HeadersValue\n \n T_shell_context_processor = t.TypeVar(\n     \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n@@ -349,7 +350,7 @@ class Flask(App):\n         path = os.path.join(self.root_path, resource)\n \n         if mode == \"rb\":\n-            return open(path, mode)\n+            return open(path, mode)  # pyright: ignore\n \n         return open(path, mode, encoding=encoding)\n \n@@ -1163,7 +1164,8 @@ class Flask(App):\n            response object.\n         \"\"\"\n \n-        status = headers = None\n+        status: int | None = None\n+        headers: HeadersValue | None = None\n \n         # unpack tuple returns\n         if isinstance(rv, tuple):\n@@ -1175,7 +1177,7 @@ class Flask(App):\n             # decide if a 2-tuple has status or headers\n             elif len_rv == 2:\n                 if isinstance(rv[1], (Headers, dict, tuple, list)):\n-                    rv, headers = rv\n+                    rv, headers = rv  # pyright: ignore\n                 else:\n                     rv, status = rv  # type: ignore[assignment,misc]\n             # other sized tuples are not allowed\n\n@@ -123,6 +123,6 @@ class Blueprint(SansioBlueprint):\n         path = os.path.join(self.root_path, resource)\n \n         if mode == \"rb\":\n-            return open(path, mode)\n+            return open(path, mode)  # pyright: ignore\n \n         return open(path, mode, encoding=encoding)\n\n@@ -323,9 +323,9 @@ class ScriptInfo:\n         \"\"\"\n         if self._loaded_app is not None:\n             return self._loaded_app\n-\n+        app: Flask | None = None\n         if self.create_app is not None:\n-            app: Flask | None = self.create_app()\n+            app = self.create_app()\n         else:\n             if self.app_import_path:\n                 path, name = (\n@@ -549,7 +549,7 @@ class FlaskGroup(AppGroup):\n         set_debug_flag: bool = True,\n         **extra: t.Any,\n     ) -> None:\n-        params = list(extra.pop(\"params\", None) or ())\n+        params: list[click.Parameter] = list(extra.pop(\"params\", None) or ())\n         # Processing is done with option callbacks instead of a group\n         # callback. This allows users to make a custom group callback\n         # without losing the behavior. --env-file must come first so\n@@ -587,7 +587,7 @@ class FlaskGroup(AppGroup):\n             # Use a backport on Python < 3.10. We technically have\n             # importlib.metadata on 3.8+, but the API changed in 3.10,\n             # so use the backport for consistency.\n-            import importlib_metadata as metadata\n+            import importlib_metadata as metadata  # pyright: ignore\n \n         for ep in metadata.entry_points(group=\"flask.commands\"):\n             self.add_command(ep.load(), ep.name)\n@@ -934,7 +934,7 @@ def run_command(\n     option.\n     \"\"\"\n     try:\n-        app: WSGIApplication = info.load_app()\n+        app: WSGIApplication = info.load_app()  # pyright: ignore\n     except Exception as e:\n         if is_running_from_reloader():\n             # When reloading, print out the error immediately, but raise\n\n@@ -599,7 +599,7 @@ def get_root_path(import_name: str) -> str:\n         return os.getcwd()\n \n     if hasattr(loader, \"get_filename\"):\n-        filepath = loader.get_filename(import_name)\n+        filepath = loader.get_filename(import_name)  # pyright: ignore\n     else:\n         # Fall back to imports.\n         __import__(import_name)\n\n@@ -628,7 +628,7 @@ class App(Scaffold):\n         methods = {item.upper() for item in methods}\n \n         # Methods that should always be added\n-        required_methods = set(getattr(view_func, \"required_methods\", ()))\n+        required_methods: set[str] = set(getattr(view_func, \"required_methods\", ()))\n \n         # starting with Flask 0.8 the view_func object can disable and\n         # force-enable the automatic options handling.\n\n@@ -79,8 +79,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n             path = url.path\n \n             if url.query:\n-                sep = b\"?\" if isinstance(url.query, bytes) else \"?\"\n-                path += sep + url.query\n+                path = f\"{path}?{url.query}\"\n \n         self.app = app\n         super().__init__(path, base_url, *args, **kwargs)\n\n@@ -61,7 +61,7 @@ class View:\n     #: decorator.\n     #:\n     #: .. versionadded:: 0.8\n-    decorators: t.ClassVar[list[t.Callable[[F], F]]] = []\n+    decorators: t.ClassVar[list[t.Callable[..., t.Any]]] = []\n \n     #: Create a new instance of this view class for every request by\n     #: default. If a view subclass sets this to ``False``, the same\n@@ -110,7 +110,7 @@ class View:\n                 return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n \n         else:\n-            self = cls(*class_args, **class_kwargs)\n+            self = cls(*class_args, **class_kwargs)  # pyright: ignore\n \n             def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                 return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n\n@@ -129,11 +129,11 @@ class Request(RequestBase):\n     def on_json_loading_failed(self, e: ValueError | None) -> t.Any:\n         try:\n             return super().on_json_loading_failed(e)\n-        except BadRequest as e:\n+        except BadRequest as ebr:\n             if current_app and current_app.debug:\n                 raise\n \n-            raise BadRequest() from e\n+            raise BadRequest() from ebr\n \n \n class Response(ResponseBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d610e44b396d11113bb6a5d168cc5e996a6dfb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 29 | Files Changed: 5 | Hunks: 17 | Methods Changed: 5 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 46 | Churn Cumulative: 7968 | Contributors (this commit): 48 | Commits (past 90d): 9 | Contributors (cumulative): 68 | DMM Complexity: 0.14285714285714285\n\nDIFF:\n@@ -1245,7 +1245,7 @@ class Flask(App):\n \n         # extend existing headers with provided headers\n         if headers:\n-            rv.headers.update(headers)  # type: ignore[arg-type]\n+            rv.headers.update(headers)\n \n         return rv\n \n\n@@ -150,13 +150,13 @@ class Config(dict):  # type: ignore[type-arg]\n         .. versionadded:: 2.1\n         \"\"\"\n         prefix = f\"{prefix}_\"\n-        len_prefix = len(prefix)\n \n         for key in sorted(os.environ):\n             if not key.startswith(prefix):\n                 continue\n \n             value = os.environ[key]\n+            key = key.removeprefix(prefix)\n \n             try:\n                 value = loads(value)\n@@ -164,9 +164,6 @@ class Config(dict):  # type: ignore[type-arg]\n                 # Keep the value as a string if loading failed.\n                 pass\n \n-            # Change to key.removeprefix(prefix) on Python >= 3.9.\n-            key = key[len_prefix:]\n-\n             if \"__\" not in key:\n                 # A non-nested key, set directly.\n                 self[key] = value\n\n@@ -5,7 +5,7 @@ import os\n import sys\n import typing as t\n from datetime import datetime\n-from functools import lru_cache\n+from functools import cache\n from functools import update_wrapper\n \n import werkzeug.utils\n@@ -623,7 +623,7 @@ def get_root_path(import_name: str) -> str:\n     return os.path.dirname(os.path.abspath(filepath))  # type: ignore[no-any-return]\n \n \n-@lru_cache(maxsize=None)\n+@cache\n def _split_blueprint_path(name: str) -> list[str]:\n     out: list[str] = [name]\n \n\n@@ -706,15 +706,6 @@ def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n     return view_func.__name__\n \n \n-def _path_is_relative_to(path: pathlib.PurePath, base: str) -> bool:\n-    # Path.is_relative_to doesn't exist until Python 3.9\n-    try:\n-        path.relative_to(base)\n-        return True\n-    except ValueError:\n-        return False\n-\n-\n def _find_package_path(import_name: str) -> str:\n     \"\"\"Find the path that contains the package or module.\"\"\"\n     root_mod_name, _, _ = import_name.partition(\".\")\n@@ -745,7 +736,7 @@ def _find_package_path(import_name: str) -> str:\n                 search_location = next(\n                     location\n                     for location in root_spec.submodule_search_locations\n-                    if _path_is_relative_to(package_path, location)\n+                    if package_path.is_relative_to(location)\n                 )\n             else:\n                 # Pick the first path.\n@@ -777,7 +768,7 @@ def find_package(import_name: str) -> tuple[str | None, str]:\n     py_prefix = os.path.abspath(sys.prefix)\n \n     # installed to the system\n-    if _path_is_relative_to(pathlib.PurePath(package_path), py_prefix):\n+    if pathlib.PurePath(package_path).is_relative_to(py_prefix):\n         return py_prefix, package_path\n \n     site_parent, site_folder = os.path.split(package_path)\n\n@@ -12,7 +12,7 @@ ResponseValue = t.Union[\n     \"Response\",\n     str,\n     bytes,\n-    t.List[t.Any],\n+    list[t.Any],\n     # Only dict is actually accepted, but Mapping allows for TypedDict.\n     t.Mapping[str, t.Any],\n     t.Iterator[str],\n@@ -21,21 +21,21 @@ ResponseValue = t.Union[\n \n # the possible types for an individual HTTP header\n # This should be a Union, but mypy doesn't pass unless it's a TypeVar.\n-HeaderValue = t.Union[str, t.List[str], t.Tuple[str, ...]]\n+HeaderValue = t.Union[str, list[str], tuple[str, ...]]\n \n # the possible types for HTTP headers\n HeadersValue = t.Union[\n     \"Headers\",\n     t.Mapping[str, HeaderValue],\n-    t.Sequence[t.Tuple[str, HeaderValue]],\n+    t.Sequence[tuple[str, HeaderValue]],\n ]\n \n # The possible types returned by a route function.\n ResponseReturnValue = t.Union[\n     ResponseValue,\n-    t.Tuple[ResponseValue, HeadersValue],\n-    t.Tuple[ResponseValue, int],\n-    t.Tuple[ResponseValue, int, HeadersValue],\n+    tuple[ResponseValue, HeadersValue],\n+    tuple[ResponseValue, int],\n+    tuple[ResponseValue, int, HeadersValue],\n     \"WSGIApplication\",\n ]\n \n@@ -56,21 +56,21 @@ BeforeRequestCallable = t.Union[\n     t.Callable[[], t.Optional[ResponseReturnValue]],\n     t.Callable[[], t.Awaitable[t.Optional[ResponseReturnValue]]],\n ]\n-ShellContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n+ShellContextProcessorCallable = t.Callable[[], dict[str, t.Any]]\n TeardownCallable = t.Union[\n     t.Callable[[t.Optional[BaseException]], None],\n     t.Callable[[t.Optional[BaseException]], t.Awaitable[None]],\n ]\n TemplateContextProcessorCallable = t.Union[\n-    t.Callable[[], t.Dict[str, t.Any]],\n-    t.Callable[[], t.Awaitable[t.Dict[str, t.Any]]],\n+    t.Callable[[], dict[str, t.Any]],\n+    t.Callable[[], t.Awaitable[dict[str, t.Any]]],\n ]\n TemplateFilterCallable = t.Callable[..., t.Any]\n TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n-URLDefaultCallable = t.Callable[[str, t.Dict[str, t.Any]], None]\n+URLDefaultCallable = t.Callable[[str, dict[str, t.Any]], None]\n URLValuePreprocessorCallable = t.Callable[\n-    [t.Optional[str], t.Optional[t.Dict[str, t.Any]]], None\n+    [t.Optional[str], t.Optional[dict[str, t.Any]]], None\n ]\n \n # This should take Exception, but that either breaks typing the argument\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
