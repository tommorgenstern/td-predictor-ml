{"custom_id": "fastapi#dd6ab23b62187c8b60563bbf2f5324c8b8a901d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 72 | Churn Cumulative: 72 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI\n+from fastapi.openapi.utils import get_openapi\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items():\n+    return [{\"name\": \"Foo\"}]\n+\n+\n+def custom_openapi():\n+    if app.openapi_schema:\n+        return app.openapi_schema\n+    openapi_schema = get_openapi(\n+        title=\"Custom title\",\n+        version=\"2.5.0\",\n+        description=\"This is a very custom OpenAPI schema\",\n+        routes=app.routes,\n+    )\n+    openapi_schema[\"info\"][\"x-logo\"] = {\n+        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n+    }\n+    app.openapi_schema = openapi_schema\n+    return app.openapi_schema\n+\n+\n+app.openapi = custom_openapi\n\n\n@@ -0,0 +1,44 @@\n+from starlette.testclient import TestClient\n+\n+from extending_openapi.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\n+        \"title\": \"Custom title\",\n+        \"version\": \"2.5.0\",\n+        \"description\": \"This is a very custom OpenAPI schema\",\n+        \"x-logo\": {\"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"},\n+    },\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"name\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f806ba642a24497e5fa693afa59b5752eeb1afae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 600 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -100,7 +100,6 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n                 lenient_issubclass(param.annotation, param_supported_types)\n                 or param.annotation == param.empty\n             ), f\"Path params must be of one of the supported types\"\n-            param = signature_params[param_name]\n             add_param_to_fields(\n                 param=param,\n                 dependant=dependant,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#deff2b6678ca7636683d814efe5dbec917910d7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 101 | Contributors (this commit): 1 | Commits (past 90d): 27 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.10.2\"\n+__version__ = \"0.10.3\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1426b6200a12b83cc1e362adab70d7153f30c7f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 86 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,6 +3,7 @@ from sqlalchemy import Boolean, Column, Integer, String, create_engine\n from sqlalchemy.ext.declarative import declarative_base, declared_attr\n from sqlalchemy.orm import Session, sessionmaker\n from starlette.requests import Request\n+from starlette.responses import Response\n \n # SQLAlchemy specific code, as with any other app\n SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n@@ -66,7 +67,10 @@ def read_user(user_id: int, db: Session = Depends(get_db)):\n \n @app.middleware(\"http\")\n async def db_session_middleware(request: Request, call_next):\n+    response = Response('', status_code=500)\n+    try:\n         request.state.db = SessionLocal()\n         response = await call_next(request)\n+    finally:\n         request.state.db.close()\n     return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fad3a9e1dcc077493aed8057278607994ee61ef1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1003 | Lines Deleted: 24 | Files Changed: 14 | Hunks: 63 | Methods Changed: 73 | Complexity Δ (Sum/Max): 79/10 | Churn Δ: 1027 | Churn Cumulative: 1703 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 14 | DMM Complexity: 0.81\n\nDIFF:\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi.openapi.models import APIKey, APIKeyIn\n from fastapi.security.base import SecurityBase\n from starlette.exceptions import HTTPException\n@@ -10,42 +12,54 @@ class APIKeyBase(SecurityBase):\n \n \n class APIKeyQuery(APIKeyBase):\n-    def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(**{\"in\": APIKeyIn.query}, name=name)\n+    def __init__(self, *, name: str, scheme_name: str = None, auto_error: bool = True):\n+        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.query}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         api_key: str = request.query_params.get(self.model.name)\n         if not api_key:\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return api_key\n \n \n class APIKeyHeader(APIKeyBase):\n-    def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(**{\"in\": APIKeyIn.header}, name=name)\n+    def __init__(self, *, name: str, scheme_name: str = None, auto_error: bool = True):\n+        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.header}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         api_key: str = request.headers.get(self.model.name)\n         if not api_key:\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return api_key\n \n \n class APIKeyCookie(APIKeyBase):\n-    def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(**{\"in\": APIKeyIn.cookie}, name=name)\n+    def __init__(self, *, name: str, scheme_name: str = None, auto_error: bool = True):\n+        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.cookie}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         api_key: str = request.cookies.get(self.model.name)\n         if not api_key:\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return api_key\n\n@@ -1,5 +1,6 @@\n import binascii\n from base64 import b64decode\n+from typing import Optional\n \n from fastapi.openapi.models import (\n     HTTPBase as HTTPBaseModel,\n@@ -24,27 +25,38 @@ class HTTPAuthorizationCredentials(BaseModel):\n \n \n class HTTPBase(SecurityBase):\n-    def __init__(self, *, scheme: str, scheme_name: str = None):\n+    def __init__(\n+        self, *, scheme: str, scheme_name: str = None, auto_error: bool = True\n+    ):\n         self.model = HTTPBaseModel(scheme=scheme)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(\n+        self, request: Request\n+    ) -> Optional[HTTPAuthorizationCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n \n \n class HTTPBasic(HTTPBase):\n-    def __init__(self, *, scheme_name: str = None, realm: str = None):\n+    def __init__(\n+        self, *, scheme_name: str = None, realm: str = None, auto_error: bool = True\n+    ):\n         self.model = HTTPBaseModel(scheme=\"basic\")\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.realm = realm\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[HTTPBasicCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         # before implementing headers with 401 errors, wait for: https://github.com/encode/starlette/issues/295\n@@ -53,9 +65,12 @@ class HTTPBasic(HTTPBase):\n             status_code=HTTP_403_FORBIDDEN, detail=\"Invalid authentication credentials\"\n         )\n         if not authorization or scheme.lower() != \"basic\":\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         try:\n             data = b64decode(param).decode(\"ascii\")\n         except (ValueError, UnicodeDecodeError, binascii.Error):\n@@ -67,17 +82,29 @@ class HTTPBasic(HTTPBase):\n \n \n class HTTPBearer(HTTPBase):\n-    def __init__(self, *, bearerFormat: str = None, scheme_name: str = None):\n+    def __init__(\n+        self,\n+        *,\n+        bearerFormat: str = None,\n+        scheme_name: str = None,\n+        auto_error: bool = True\n+    ):\n         self.model = HTTPBearerModel(bearerFormat=bearerFormat)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(\n+        self, request: Request\n+    ) -> Optional[HTTPAuthorizationCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         if scheme.lower() != \"bearer\":\n             raise HTTPException(\n                 status_code=HTTP_403_FORBIDDEN,\n@@ -87,17 +114,23 @@ class HTTPBearer(HTTPBase):\n \n \n class HTTPDigest(HTTPBase):\n-    def __init__(self, *, scheme_name: str = None):\n+    def __init__(self, *, scheme_name: str = None, auto_error: bool = True):\n         self.model = HTTPBaseModel(scheme=\"digest\")\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(\n+        self, request: Request\n+    ) -> Optional[HTTPAuthorizationCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         if scheme.lower() != \"digest\":\n             raise HTTPException(\n                 status_code=HTTP_403_FORBIDDEN,\n\n@@ -113,32 +113,49 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n \n class OAuth2(SecurityBase):\n     def __init__(\n-        self, *, flows: OAuthFlowsModel = OAuthFlowsModel(), scheme_name: str = None\n+        self,\n+        *,\n+        flows: OAuthFlowsModel = OAuthFlowsModel(),\n+        scheme_name: str = None,\n+        auto_error: bool = True\n     ):\n         self.model = OAuth2Model(flows=flows)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         authorization: str = request.headers.get(\"Authorization\")\n         if not authorization:\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return authorization\n \n \n class OAuth2PasswordBearer(OAuth2):\n-    def __init__(self, tokenUrl: str, scheme_name: str = None, scopes: dict = None):\n+    def __init__(\n+        self,\n+        tokenUrl: str,\n+        scheme_name: str = None,\n+        scopes: dict = None,\n+        auto_error: bool = True,\n+    ):\n         if not scopes:\n             scopes = {}\n         flows = OAuthFlowsModel(password={\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n-        super().__init__(flows=flows, scheme_name=scheme_name)\n+        super().__init__(flows=flows, scheme_name=scheme_name, auto_error=auto_error)\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         if not authorization or scheme.lower() != \"bearer\":\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return param\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\n from fastapi.security.base import SecurityBase\n from starlette.exceptions import HTTPException\n@@ -6,14 +8,20 @@ from starlette.status import HTTP_403_FORBIDDEN\n \n \n class OpenIdConnect(SecurityBase):\n-    def __init__(self, *, openIdConnectUrl: str, scheme_name: str = None):\n+    def __init__(\n+        self, *, openIdConnectUrl: str, scheme_name: str = None, auto_error: bool = True\n+    ):\n         self.model = OpenIdConnectModel(openIdConnectUrl=openIdConnectUrl)\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> str:\n+    async def __call__(self, request: Request) -> Optional[str]:\n         authorization: str = request.headers.get(\"Authorization\")\n         if not authorization:\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                 )\n+            else:\n+                return None\n         return authorization\n\n@@ -0,0 +1,75 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyCookie\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyCookie(name=\"key\", auto_error=False)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    else:\n+        return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyCookie\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,74 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyHeader\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyHeader(name=\"key\", auto_error=False)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyHeader\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,74 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyQuery\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyQuery(name=\"key\", auto_error=False)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(api_key)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyQuery\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,62 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBase(scheme=\"Other\", auto_error=False)\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+):\n+    if credentials is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBase\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,79 @@\n+from base64 import b64encode\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+from requests.auth import HTTPBasicAuth\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBasic(auto_error=False)\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: Optional[HTTPBasicCredentials] = Security(security)):\n+    if credentials is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"username\": credentials.username, \"password\": credentials.password}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBasic\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_basic():\n+    auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n+    response = client.get(\"/users/me\", auth=auth)\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n+\n+\n+def test_security_http_basic_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_security_http_basic_invalid_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n+    )\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_security_http_basic_non_basic_credentials():\n+    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n+    auth_header = f\"Basic {payload}\"\n+    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,68 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBearer(auto_error=False)\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+):\n+    if credentials is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,70 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPDigest(auto_error=False)\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+):\n+    if credentials is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPDigest\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,254 @@\n+from typing import Optional\n+\n+import pytest\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import OAuth2\n+from fastapi.security.oauth2 import OAuth2PasswordRequestFormStrict\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"/token\",\n+            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n+        }\n+    },\n+    auto_error=False,\n+)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.post(\"/login\")\n+def read_current_user(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n+    return form_data\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/login\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Current User Post\",\n+                \"operationId\": \"read_current_user_login_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_read_current_user\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"OAuth2\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_read_current_user\": {\n+                \"title\": \"Body_read_current_user\",\n+                \"required\": [\"grant_type\", \"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant_Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client_Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client_Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"password\": {\n+                        \"scopes\": {\n+                            \"read:users\": \"Read the users\",\n+                            \"write:users\": \"Create users\",\n+                        },\n+                        \"tokenUrl\": \"/token\",\n+                    }\n+                },\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+required_params = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"username\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"password\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+grant_type_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+grant_type_incorrect = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": 'string does not match regex \"password\"',\n+            \"type\": \"value_error.str.regex\",\n+            \"ctx\": {\"pattern\": \"password\"},\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"data,expected_status,expected_response\",\n+    [\n+        (None, 422, required_params),\n+        ({\"username\": \"johndoe\", \"password\": \"secret\"}, 422, grant_type_required),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+            422,\n+            grant_type_incorrect,\n+        ),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n+            200,\n+            {\n+                \"grant_type\": \"password\",\n+                \"username\": \"johndoe\",\n+                \"password\": \"secret\",\n+                \"scopes\": [],\n+                \"client_id\": None,\n+                \"client_secret\": None,\n+            },\n+        ),\n+    ],\n+)\n+def test_strict_login(data, expected_status, expected_response):\n+    response = client.post(\"/login\", data=data)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,71 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2PasswordBearer\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\", auto_error=False)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    if token is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,80 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security.open_id_connect_url import OpenIdConnect\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oid = OpenIdConnect(openIdConnectUrl=\"/openid\", auto_error=False)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(oid)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"OpenIdConnect\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OpenIdConnect\": {\"type\": \"openIdConnect\", \"openIdConnectUrl\": \"/openid\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#37e030651796ffc4691fa259d308c135d226cfe6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 88 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -67,7 +67,7 @@ def read_user(user_id: int, db: Session = Depends(get_db)):\n \n @app.middleware(\"http\")\n async def db_session_middleware(request: Request, call_next):\n-    response = Response('', status_code=500)\n+    response = Response(\"Internal server error\", status_code=500)\n     try:\n         request.state.db = SessionLocal()\n         response = await call_next(request)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c59ddc8a24a6f45dcef5731b093154b49258044e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 103 | Contributors (this commit): 1 | Commits (past 90d): 28 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.10.3\"\n+__version__ = \"0.11.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
