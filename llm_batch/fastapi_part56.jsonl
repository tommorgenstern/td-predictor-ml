{"custom_id": "fastapi#ca437cdfabe7673b838cf42889ba1c653acd2228", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 277 | Lines Deleted: 257 | Files Changed: 88 | Hunks: 234 | Methods Changed: 61 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 534 | Churn Cumulative: 1902 | Contributors (this commit): 9 | Commits (past 90d): 102 | Contributors (cumulative): 128 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.responses import FileResponse\n@@ -23,7 +23,7 @@ app = FastAPI()\n         }\n     },\n )\n-async def read_item(item_id: str, img: Optional[bool] = None):\n+async def read_item(item_id: str, img: Union[bool, None] = None):\n     if img:\n         return FileResponse(\"image.png\", media_type=\"image/png\")\n     else:\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.responses import FileResponse\n@@ -25,7 +25,7 @@ app = FastAPI()\n     response_model=Item,\n     responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n )\n-async def read_item(item_id: str, img: Optional[bool] = None):\n+async def read_item(item_id: str, img: Union[bool, None] = None):\n     if img:\n         return FileResponse(\"image.png\", media_type=\"image/png\")\n     else:\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import BackgroundTasks, Depends, FastAPI\n \n@@ -10,7 +10,7 @@ def write_log(message: str):\n         log.write(message)\n \n \n-def get_query(background_tasks: BackgroundTasks, q: Optional[str] = None):\n+def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n     if q:\n         message = f\"found query: {q}\\n\"\n         background_tasks.add_task(write_log, message)\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -6,9 +6,9 @@ from pydantic import BaseModel\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -6,9 +6,9 @@ from pydantic import BaseModel\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -6,9 +6,9 @@ from pydantic import BaseModel\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -6,16 +6,16 @@ from pydantic import BaseModel\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item, q: Optional[str] = None):\n+async def create_item(item_id: int, item: Item, q: Union[str, None] = None):\n     result = {\"item_id\": item_id, **item.dict()}\n     if q:\n         result.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: list = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: List[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: list[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n-    image: Optional[Image] = None\n+    image: Union[Image, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n-    image: Optional[Image] = None\n+    image: Union[Image, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n-    image: Optional[Image] = None\n+    image: Union[Image, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n-    image: Optional[Image] = None\n+    image: Union[Image, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional, Set\n+from typing import List, Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n-    images: Optional[List[Image]] = None\n+    images: Union[List[Image], None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n-    images: Optional[list[Image]] = None\n+    images: Union[list[Image], None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional, Set\n+from typing import List, Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,16 +13,16 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n-    images: Optional[List[Image]] = None\n+    images: Union[List[Image], None] = None\n \n \n class Offer(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     items: List[Item]\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,16 +13,16 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n-    images: Optional[list[Image]] = None\n+    images: Union[list[Image], None] = None\n \n \n class Offer(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     items: list[Item]\n \n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: Optional[str] = None\n-    description: Optional[str] = None\n-    price: Optional[float] = None\n+    name: Union[str, None] = None\n+    description: Union[str, None] = None\n+    price: Union[float, None] = None\n     tax: float = 10.5\n     tags: List[str] = []\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: Optional[str] = None\n-    description: Optional[str] = None\n-    price: Optional[float] = None\n+    name: Union[str, None] = None\n+    description: Union[str, None] = None\n+    price: Union[float, None] = None\n     tax: float = 10.5\n     tags: list[str] = []\n \n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: Optional[str] = None\n-    description: Optional[str] = None\n-    price: Optional[float] = None\n+    name: Union[str, None] = None\n+    description: Union[str, None] = None\n+    price: Union[float, None] = None\n     tax: float = 10.5\n     tags: List[str] = []\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: Optional[str] = None\n-    description: Optional[str] = None\n-    price: Optional[float] = None\n+    name: Union[str, None] = None\n+    description: Union[str, None] = None\n+    price: Union[float, None] = None\n     tax: float = 10.5\n     tags: list[str] = []\n \n\n@@ -1,5 +1,5 @@\n from dataclasses import dataclass\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -8,8 +8,8 @@ from fastapi import FastAPI\n class Item:\n     name: str\n     price: float\n-    description: Optional[str] = None\n-    tax: Optional[float] = None\n+    description: Union[str, None] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n\n@@ -1,5 +1,5 @@\n from dataclasses import dataclass, field\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n \n@@ -9,8 +9,8 @@ class Item:\n     name: str\n     price: float\n     tags: List[str] = field(default_factory=list)\n-    description: Optional[str] = None\n-    tax: Optional[float] = None\n+    description: Union[str, None] = None\n+    tax: Union[float, None] = None\n \n \n app = FastAPI()\n\n@@ -1,5 +1,5 @@\n from dataclasses import field  # (1)\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from pydantic.dataclasses import dataclass  # (2)\n@@ -8,7 +8,7 @@ from pydantic.dataclasses import dataclass  # (2)\n @dataclass\n class Item:\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n @dataclass\n\n@@ -1,11 +1,13 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n \n app = FastAPI()\n \n \n-async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+async def common_parameters(\n+    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n+):\n     return {\"q\": q, \"skip\": skip, \"limit\": limit}\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n \n@@ -9,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n \n@@ -9,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n \n@@ -9,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,16 +1,17 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Cookie, Depends, FastAPI\n \n app = FastAPI()\n \n \n-def query_extractor(q: Optional[str] = None):\n+def query_extractor(q: Union[str, None] = None):\n     return q\n \n \n def query_or_cookie_extractor(\n-    q: str = Depends(query_extractor), last_query: Optional[str] = Cookie(default=None)\n+    q: str = Depends(query_extractor),\n+    last_query: Union[str, None] = Cookie(default=None),\n ):\n     if not q:\n         return last_query\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n from fastapi.testclient import TestClient\n@@ -6,7 +6,9 @@ from fastapi.testclient import TestClient\n app = FastAPI()\n \n \n-async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+async def common_parameters(\n+    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n+):\n     return {\"q\": q, \"skip\": skip, \"limit\": limit}\n \n \n@@ -23,7 +25,7 @@ async def read_users(commons: dict = Depends(common_parameters)):\n client = TestClient(app)\n \n \n-async def override_dependency(q: Optional[str] = None):\n+async def override_dependency(q: Union[str, None] = None):\n     return {\"q\": q, \"skip\": 5, \"limit\": 10}\n \n \n\n@@ -1,5 +1,5 @@\n from datetime import datetime\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -11,7 +11,7 @@ fake_db = {}\n class Item(BaseModel):\n     title: str\n     timestamp: datetime\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n app = FastAPI()\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, time, timedelta\n-from typing import Optional\n+from typing import Union\n from uuid import UUID\n \n from fastapi import Body, FastAPI\n@@ -10,10 +10,10 @@ app = FastAPI()\n @app.put(\"/items/{item_id}\")\n async def read_items(\n     item_id: UUID,\n-    start_datetime: Optional[datetime] = Body(default=None),\n-    end_datetime: Optional[datetime] = Body(default=None),\n-    repeat_at: Optional[time] = Body(default=None),\n-    process_after: Optional[timedelta] = Body(default=None),\n+    start_datetime: Union[datetime, None] = Body(default=None),\n+    end_datetime: Union[datetime, None] = Body(default=None),\n+    repeat_at: Union[time, None] = Body(default=None),\n+    process_after: Union[timedelta, None] = Body(default=None),\n ):\n     start_process = start_datetime + process_after\n     duration = end_datetime - start_process\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n@@ -10,20 +10,20 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n class UserOut(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n class UserInDB(BaseModel):\n     username: str\n     hashed_password: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n def fake_password_hasher(raw_password: str):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n@@ -9,7 +9,7 @@ app = FastAPI()\n class UserBase(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n class UserIn(UserBase):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Header\n \n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(user_agent: Optional[str] = Header(default=None)):\n+async def read_items(user_agent: Union[str, None] = Header(default=None)):\n     return {\"User-Agent\": user_agent}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Header\n \n@@ -7,6 +7,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: Optional[str] = Header(default=None, convert_underscores=False)\n+    strange_header: Union[str, None] = Header(default=None, convert_underscores=False)\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI, Header\n \n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: Optional[List[str]] = Header(default=None)):\n+async def read_items(x_token: Union[List[str], None] = Header(default=None)):\n     return {\"X-Token values\": x_token}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, Header\n \n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: Optional[list[str]] = Header(default=None)):\n+async def read_items(x_token: Union[list[str], None] = Header(default=None)):\n     return {\"X-Token values\": x_token}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from couchbase import LOCKMODE_WAIT\n from couchbase.bucket import Bucket\n@@ -23,9 +23,9 @@ def get_bucket():\n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n class UserInDB(User):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import APIRouter, FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Invoice(BaseModel):\n     id: str\n-    title: Optional[str] = None\n+    title: Union[str, None] = None\n     customer: str\n     total: float\n \n@@ -33,7 +33,7 @@ def invoice_notification(body: InvoiceEvent):\n \n \n @app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\n-def create_invoice(invoice: Invoice, callback_url: Optional[HttpUrl] = None):\n+def create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n     \"\"\"\n     Create an invoice.\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI, status\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, status\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional, Set\n+from typing import Set, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: set[str] = set()\n \n \n\n@@ -0,0 +1,5 @@\n+from typing import Optional\n+\n+\n+def say_hi(name: Optional[str]):\n+    print(f\"Hey {name}!\")\n\n@@ -0,0 +1,2 @@\n+def say_hi(name: str | None):\n+    print(f\"Hey {name}!\")\n\n@@ -1,5 +1,5 @@\n from datetime import datetime\n-from typing import List, Optional\n+from typing import List, Union\n \n from pydantic import BaseModel\n \n@@ -7,7 +7,7 @@ from pydantic import BaseModel\n class User(BaseModel):\n     id: int\n     name = \"John Doe\"\n-    signup_ts: Optional[datetime] = None\n+    signup_ts: Union[datetime, None] = None\n     friends: List[int] = []\n \n \n\n@@ -1,5 +1,5 @@\n from datetime import datetime\n-from typing import Optional\n+from typing import Union\n \n from pydantic import BaseModel\n \n@@ -7,7 +7,7 @@ from pydantic import BaseModel\n class User(BaseModel):\n     id: int\n     name = \"John Doe\"\n-    signup_ts: Optional[datetime] = None\n+    signup_ts: Union[datetime, None] = None\n     friends: list[int] = []\n \n \n\n@@ -0,0 +1,8 @@\n+from typing import Optional\n+\n+from pydantic import BaseModel\n+\n+\n+class User(BaseModel):\n+    name: str\n+    age: Optional[int]\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_item(item_id: str, q: Optional[str] = None):\n+async def read_item(item_id: str, q: Union[str, None] = None):\n     if q:\n         return {\"item_id\": item_id, \"q\": q}\n     return {\"item_id\": item_id}\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_item(item_id: str, q: Optional[str] = None, short: bool = False):\n+async def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n     item = {\"item_id\": item_id}\n     if q:\n         item.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/users/{user_id}/items/{item_id}\")\n async def read_user_item(\n-    user_id: int, item_id: str, q: Optional[str] = None, short: bool = False\n+    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n ):\n     item = {\"item_id\": item_id, \"owner_id\": user_id}\n     if q:\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/{item_id}\")\n async def read_user_item(\n-    item_id: str, needy: str, skip: int = 0, limit: Optional[int] = None\n+    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n ):\n     item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n     return item\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Optional[str] = None):\n+async def read_items(q: Union[str, None] = None):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI, File, UploadFile\n \n@@ -6,7 +6,7 @@ app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(file: Optional[bytes] = File(default=None)):\n+async def create_file(file: Union[bytes, None] = File(default=None)):\n     if not file:\n         return {\"message\": \"No file sent\"}\n     else:\n@@ -14,7 +14,7 @@ async def create_file(file: Optional[bytes] = File(default=None)):\n \n \n @app.post(\"/uploadfile/\")\n-async def create_upload_file(file: Optional[UploadFile] = None):\n+async def create_upload_file(file: Union[UploadFile, None] = None):\n     if not file:\n         return {\"message\": \"No upload file sent\"}\n     else:\n\n@@ -1,5 +1,5 @@\n from datetime import datetime\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -10,7 +10,7 @@ from pydantic import BaseModel\n class Item(BaseModel):\n     title: str\n     timestamp: datetime\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: List[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n     tags: list[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n@@ -10,7 +10,7 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n # Don't do this in production!\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n@@ -10,13 +10,13 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n class UserOut(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: Optional[str] = None\n+    full_name: Union[str, None] = None\n \n \n @app.post(\"/user/\", response_model=UserOut)\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     tax: float = 10.5\n     tags: List[str] = []\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     tax: float = 10.5\n     tags: list[str] = []\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     tax: float = 10.5\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n     tax: float = 10.5\n \n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n     class Config:\n         schema_extra = {\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import FastAPI\n from pydantic import BaseModel, Field\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str = Field(example=\"Foo\")\n-    description: Optional[str] = Field(default=None, example=\"A very nice Item\")\n+    description: Union[str, None] = Field(default=None, example=\"A very nice Item\")\n     price: float = Field(example=35.4)\n-    tax: Optional[float] = Field(default=None, example=3.2)\n+    tax: Union[float, None] = Field(default=None, example=3.2)\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n     price: float\n-    tax: Optional[float] = None\n+    tax: Union[float, None] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI\n from fastapi.security import OAuth2PasswordBearer\n@@ -11,9 +11,9 @@ oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n def fake_decode_token(token):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n@@ -33,9 +33,9 @@ oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n class UserInDB(User):\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, timedelta\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n@@ -31,14 +31,14 @@ class Token(BaseModel):\n \n \n class TokenData(BaseModel):\n-    username: Optional[str] = None\n+    username: Union[str, None] = None\n \n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n class UserInDB(User):\n@@ -75,7 +75,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n+def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, timedelta\n-from typing import List, Optional\n+from typing import List, Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n@@ -42,15 +42,15 @@ class Token(BaseModel):\n \n \n class TokenData(BaseModel):\n-    username: Optional[str] = None\n+    username: Union[str, None] = None\n     scopes: List[str] = []\n \n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n class UserInDB(User):\n@@ -90,7 +90,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n+def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, timedelta\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n@@ -42,15 +42,15 @@ class Token(BaseModel):\n \n \n class TokenData(BaseModel):\n-    username: Optional[str] = None\n+    username: Union[str, None] = None\n     scopes: list[str] = []\n \n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: Union[str, None] = None\n+    full_name: Union[str, None] = None\n+    disabled: Union[bool, None] = None\n \n \n class UserInDB(User):\n@@ -90,7 +90,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n+def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -1,11 +1,11 @@\n-from typing import List, Optional\n+from typing import List, Union\n \n from pydantic import BaseModel\n \n \n class ItemBase(BaseModel):\n     title: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n class ItemCreate(ItemBase):\n\n@@ -1,11 +1,11 @@\n-from typing import Optional\n+from typing import Union\n \n from pydantic import BaseModel\n \n \n class ItemBase(BaseModel):\n     title: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n class ItemCreate(ItemBase):\n\n@@ -1,4 +1,4 @@\n-from typing import Any, List, Optional\n+from typing import Any, List, Union\n \n import peewee\n from pydantic import BaseModel\n@@ -15,7 +15,7 @@ class PeeweeGetterDict(GetterDict):\n \n class ItemBase(BaseModel):\n     title: str\n-    description: Optional[str] = None\n+    description: Union[str, None] = None\n \n \n class ItemCreate(ItemBase):\n\n@@ -1,4 +1,4 @@\n-from typing import Optional\n+from typing import Union\n \n from fastapi import Cookie, Depends, FastAPI, Query, WebSocket, status\n from fastapi.responses import HTMLResponse\n@@ -57,8 +57,8 @@ async def get():\n \n async def get_cookie_or_token(\n     websocket: WebSocket,\n-    session: Optional[str] = Cookie(default=None),\n-    token: Optional[str] = Query(default=None),\n+    session: Union[str, None] = Cookie(default=None),\n+    token: Union[str, None] = Query(default=None),\n ):\n     if session is None and token is None:\n         await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n@@ -69,7 +69,7 @@ async def get_cookie_or_token(\n async def websocket_endpoint(\n     websocket: WebSocket,\n     item_id: str,\n-    q: Optional[int] = None,\n+    q: Union[int, None] = None,\n     cookie_or_token: str = Depends(get_cookie_or_token),\n ):\n     await websocket.accept()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#acab64b3c355a2aeb13c7739a639f9fe2a03bc1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 62 | Churn Cumulative: 62 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,62 @@\n+from typing import Union\n+\n+from fastapi import Body, FastAPI, Query\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/query\")\n+def read_query(q: Union[str, None]):\n+    return q\n+\n+\n+@app.get(\"/explicit-query\")\n+def read_explicit_query(q: Union[str, None] = Query()):\n+    return q\n+\n+\n+@app.post(\"/body-embed\")\n+def send_body_embed(b: Union[str, None] = Body(embed=True)):\n+    return b\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_required_nonable_query_invalid():\n+    response = client.get(\"/query\")\n+    assert response.status_code == 422\n+\n+\n+def test_required_noneable_query_value():\n+    response = client.get(\"/query\", params={\"q\": \"foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == \"foo\"\n+\n+\n+def test_required_nonable_explicit_query_invalid():\n+    response = client.get(\"/explicit-query\")\n+    assert response.status_code == 422\n+\n+\n+def test_required_nonable_explicit_query_value():\n+    response = client.get(\"/explicit-query\", params={\"q\": \"foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == \"foo\"\n+\n+\n+def test_required_nonable_body_embed_no_content():\n+    response = client.post(\"/body-embed\")\n+    assert response.status_code == 422\n+\n+\n+def test_required_nonable_body_embed_invalid():\n+    response = client.post(\"/body-embed\", json={\"invalid\": \"invalid\"})\n+    assert response.status_code == 422\n+\n+\n+def test_required_noneable_body_embed_value():\n+    response = client.post(\"/body-embed\", json={\"b\": \"foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == \"foo\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1876ebc77949a9a254909ec61ea0c09365169ec2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 364 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.77.1\"\n+__version__ = \"0.78.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b7686435777d1d4f79adad8f29191039bbc558b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 17 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 961 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n import logging\n import sys\n from pathlib import Path\n-from typing import Optional\n+from typing import Union\n \n import httpx\n from github import Github\n@@ -14,7 +14,7 @@ github_api = \"https://api.github.com\"\n class Settings(BaseSettings):\n     github_repository: str\n     github_event_path: Path\n-    github_event_name: Optional[str] = None\n+    github_event_name: Union[str, None] = None\n     input_token: SecretStr\n     input_deploy_url: str\n \n@@ -42,7 +42,7 @@ if __name__ == \"__main__\":\n     except ValidationError as e:\n         logging.error(f\"Error parsing event file: {e.errors()}\")\n         sys.exit(0)\n-    use_pr: Optional[PullRequest] = None\n+    use_pr: Union[PullRequest, None] = None\n     for pr in repo.get_pulls():\n         if pr.head.sha == event.workflow_run.head_commit.id:\n             use_pr = pr\n\n@@ -2,7 +2,7 @@ import logging\n import random\n import time\n from pathlib import Path\n-from typing import Dict, Optional\n+from typing import Dict, Union\n \n import yaml\n from github import Github\n@@ -18,8 +18,8 @@ class Settings(BaseSettings):\n     github_repository: str\n     input_token: SecretStr\n     github_event_path: Path\n-    github_event_name: Optional[str] = None\n-    input_debug: Optional[bool] = False\n+    github_event_name: Union[str, None] = None\n+    input_debug: Union[bool, None] = False\n \n \n class PartialGitHubEventIssue(BaseModel):\n\n@@ -4,7 +4,7 @@ import sys\n from collections import Counter, defaultdict\n from datetime import datetime, timedelta, timezone\n from pathlib import Path\n-from typing import Container, DefaultDict, Dict, List, Optional, Set\n+from typing import Container, DefaultDict, Dict, List, Set, Union\n \n import httpx\n import yaml\n@@ -133,7 +133,7 @@ class Author(BaseModel):\n \n class CommentsNode(BaseModel):\n     createdAt: datetime\n-    author: Optional[Author] = None\n+    author: Union[Author, None] = None\n \n \n class Comments(BaseModel):\n@@ -142,7 +142,7 @@ class Comments(BaseModel):\n \n class IssuesNode(BaseModel):\n     number: int\n-    author: Optional[Author] = None\n+    author: Union[Author, None] = None\n     title: str\n     createdAt: datetime\n     state: str\n@@ -179,7 +179,7 @@ class Labels(BaseModel):\n \n \n class ReviewNode(BaseModel):\n-    author: Optional[Author] = None\n+    author: Union[Author, None] = None\n     state: str\n \n \n@@ -190,7 +190,7 @@ class Reviews(BaseModel):\n class PullRequestNode(BaseModel):\n     number: int\n     labels: Labels\n-    author: Optional[Author] = None\n+    author: Union[Author, None] = None\n     title: str\n     createdAt: datetime\n     state: str\n@@ -263,7 +263,7 @@ class Settings(BaseSettings):\n \n \n def get_graphql_response(\n-    *, settings: Settings, query: str, after: Optional[str] = None\n+    *, settings: Settings, query: str, after: Union[str, None] = None\n ):\n     headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n     variables = {\"after\": after}\n@@ -280,19 +280,19 @@ def get_graphql_response(\n     return data\n \n \n-def get_graphql_issue_edges(*, settings: Settings, after: Optional[str] = None):\n+def get_graphql_issue_edges(*, settings: Settings, after: Union[str, None] = None):\n     data = get_graphql_response(settings=settings, query=issues_query, after=after)\n     graphql_response = IssuesResponse.parse_obj(data)\n     return graphql_response.data.repository.issues.edges\n \n \n-def get_graphql_pr_edges(*, settings: Settings, after: Optional[str] = None):\n+def get_graphql_pr_edges(*, settings: Settings, after: Union[str, None] = None):\n     data = get_graphql_response(settings=settings, query=prs_query, after=after)\n     graphql_response = PRsResponse.parse_obj(data)\n     return graphql_response.data.repository.pullRequests.edges\n \n \n-def get_graphql_sponsor_edges(*, settings: Settings, after: Optional[str] = None):\n+def get_graphql_sponsor_edges(*, settings: Settings, after: Union[str, None] = None):\n     data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n     graphql_response = SponsorsResponse.parse_obj(data)\n     return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n\n@@ -1,7 +1,7 @@\n import logging\n from datetime import datetime\n from pathlib import Path\n-from typing import List, Optional\n+from typing import List, Union\n \n import httpx\n from github import Github\n@@ -16,7 +16,7 @@ class Settings(BaseSettings):\n     input_token: SecretStr\n     github_repository: str\n     github_event_path: Path\n-    github_event_name: Optional[str] = None\n+    github_event_name: Union[str, None] = None\n \n \n class Artifact(BaseModel):\n@@ -74,7 +74,7 @@ if __name__ == \"__main__\":\n         logging.info(f\"Docs preview was notified: {notified}\")\n         if not notified:\n             artifact_name = f\"docs-zip-{commit}\"\n-            use_artifact: Optional[Artifact] = None\n+            use_artifact: Union[Artifact, None] = None\n             for artifact in artifacts_response.artifacts:\n                 if artifact.name == artifact_name:\n                     use_artifact = artifact\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
