{"custom_id": "fastapi#38f191dcd30c7e7b7d422b4406f8eb8c6805b09d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 447 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.103.2\"\n+__version__ = \"0.104.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c13aa9ed5f19feccdb41a8af465cbaa1de218630", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 15867 | Contributors (this commit): 54 | Commits (past 90d): 8 | Contributors (cumulative): 71 | DMM Complexity: 0.5\n\nDIFF:\n@@ -86,13 +86,6 @@ class FastAPI(Starlette):\n                 **Note**: you probably shouldn't use this parameter, it is inherited\n                 from Starlette and supported for compatibility.\n \n-                In FastAPI, you normally would use the *path operation* decorators,\n-                like:\n-\n-                * `app.get()`\n-                * `app.post()`\n-                * etc.\n-\n                 ---\n \n                 A list of routes to serve incoming HTTP and WebSocket requests.\n\n@@ -624,13 +624,6 @@ class APIRouter(routing.Router):\n                 **Note**: you probably shouldn't use this parameter, it is inherited\n                 from Starlette and supported for compatibility.\n \n-                In FastAPI, you normally would use the *path operation* decorators,\n-                like:\n-\n-                * `router.get()`\n-                * `router.post()`\n-                * etc.\n-\n                 ---\n \n                 A list of routes to serve incoming HTTP and WebSocket requests.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dc7838eec310454d9b1a41712e75d220e18e2bdd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 67 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 67 | Churn Cumulative: 146 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,67 +0,0 @@\n-import inspect\n-import os\n-\n-import requests\n-\n-room_id = \"5c9c9540d73408ce4fbc1403\"  # FastAPI\n-# room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n-\n-gitter_token = os.getenv(\"GITTER_TOKEN\")\n-assert gitter_token\n-github_token = os.getenv(\"GITHUB_TOKEN\")\n-assert github_token\n-tag_name = os.getenv(\"TAG\")\n-assert tag_name\n-\n-\n-def get_github_graphql(tag_name: str):\n-    github_graphql = \"\"\"\n-    {\n-    repository(owner: \"tiangolo\", name: \"fastapi\") {\n-        release (tagName: \"{{tag_name}}\" ) {\n-        description\n-        }\n-      }\n-    }\n-    \"\"\"\n-    github_graphql = github_graphql.replace(\"{{tag_name}}\", tag_name)\n-    return github_graphql\n-\n-\n-def get_github_release_text(tag_name: str):\n-    url = \"https://api.github.com/graphql\"\n-    headers = {\"Authorization\": f\"Bearer {github_token}\"}\n-    github_graphql = get_github_graphql(tag_name=tag_name)\n-    response = requests.post(url, json={\"query\": github_graphql}, headers=headers)\n-    assert response.status_code == 200\n-    data = response.json()\n-    return data[\"data\"][\"repository\"][\"release\"][\"description\"]\n-\n-\n-def get_gitter_message(release_text: str):\n-    text = f\"\"\"\n-    New release! :tada: :rocket:\n-    (by FastAPI bot)\n-\n-    ## {tag_name}\n-    \"\"\"\n-    text = inspect.cleandoc(text) + \"\\n\\n\" + release_text\n-    return text\n-\n-\n-def send_gitter_message(text: str):\n-    headers = {\"Authorization\": f\"Bearer {gitter_token}\"}\n-    url = f\"https://api.gitter.im/v1/rooms/{room_id}/chatMessages\"\n-    data = {\"text\": text}\n-    response = requests.post(url, headers=headers, json=data)\n-    assert response.status_code == 200\n-\n-\n-def main():\n-    release_text = get_github_release_text(tag_name=tag_name)\n-    text = get_gitter_message(release_text=release_text)\n-    send_gitter_message(text=text)\n-\n-\n-if __name__ == \"__main__\":\n-    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ae84ff6e44d45fe75e96fb12ae225046d99c29e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 4 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 1052 | Contributors (this commit): 23 | Commits (past 90d): 4 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Subscription(BaseModel):\n     username: str\n-    montly_fee: float\n+    monthly_fee: float\n     start_date: datetime\n \n \n\n@@ -117,7 +117,7 @@ def create_cloned_field(\n     if PYDANTIC_V2:\n         return field\n     # cloned_types caches already cloned types to support recursive models and improve\n-    # performance by avoiding unecessary cloning\n+    # performance by avoiding unnecessary cloning\n     if cloned_types is None:\n         cloned_types = _CLONED_TYPES_CACHE\n \n\n@@ -85,7 +85,7 @@ def test_openapi_schema():\n                 \"Subscription\": {\n                     \"properties\": {\n                         \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"montly_fee\": {\"type\": \"number\", \"title\": \"Montly Fee\"},\n+                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                         \"start_date\": {\n                             \"type\": \"string\",\n                             \"format\": \"date-time\",\n@@ -93,7 +93,7 @@ def test_openapi_schema():\n                         },\n                     },\n                     \"type\": \"object\",\n-                    \"required\": [\"username\", \"montly_fee\", \"start_date\"],\n+                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                     \"title\": \"Subscription\",\n                 },\n                 \"ValidationError\": {\n\n@@ -13,7 +13,7 @@ bearer_scheme = HTTPBearer()\n \n class Subscription(BaseModel):\n     username: str\n-    montly_fee: float\n+    monthly_fee: float\n     start_date: datetime\n \n \n@@ -93,7 +93,7 @@ def test_openapi_schema():\n                 \"Subscription\": {\n                     \"properties\": {\n                         \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"montly_fee\": {\"type\": \"number\", \"title\": \"Montly Fee\"},\n+                        \"monthly_fee\": {\"type\": \"number\", \"title\": \"Monthly Fee\"},\n                         \"start_date\": {\n                             \"type\": \"string\",\n                             \"format\": \"date-time\",\n@@ -101,7 +101,7 @@ def test_openapi_schema():\n                         },\n                     },\n                     \"type\": \"object\",\n-                    \"required\": [\"username\", \"montly_fee\", \"start_date\"],\n+                    \"required\": [\"username\", \"monthly_fee\", \"start_date\"],\n                     \"title\": \"Subscription\",\n                 },\n                 \"ValidationError\": {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9bfbacfe98c877ba661e0e40c8dcac7571de819a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 144 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -24,7 +24,7 @@ def get_missing_translation_content(docs_dir: str) -> str:\n @lru_cache()\n def get_mkdocs_material_langs() -> List[str]:\n     material_path = Path(material.__file__).parent\n-    material_langs_path = material_path / \"partials\" / \"languages\"\n+    material_langs_path = material_path / \"templates\" / \"partials\" / \"languages\"\n     langs = [file.stem for file in material_langs_path.glob(\"*.html\")]\n     return langs\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2e14c69c311d89dde86e8c033df87773a3a50121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 49 | Files Changed: 33 | Hunks: 40 | Methods Changed: 32 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 94 | Churn Cumulative: 14130 | Contributors (this commit): 59 | Commits (past 90d): 48 | Contributors (cumulative): 109 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,6 +10,6 @@ app = FastAPI()\n async def read_items(\n     strange_header: Annotated[\n         Union[str, None], Header(convert_underscores=False)\n-    ] = None\n+    ] = None,\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -9,6 +9,6 @@ app = FastAPI()\n async def read_items(\n     strange_header: Annotated[\n         Union[str, None], Header(convert_underscores=False)\n-    ] = None\n+    ] = None,\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -9,7 +9,7 @@ app = FastAPI()\n async def read_items(\n     q: Union[str, None] = Query(\n         default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n-    )\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -10,7 +10,7 @@ app = FastAPI()\n async def read_items(\n     q: Annotated[\n         Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -9,7 +9,7 @@ app = FastAPI()\n async def read_items(\n     q: Annotated[\n         str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -9,7 +9,7 @@ app = FastAPI()\n async def read_items(\n     q: Annotated[\n         str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -9,7 +9,7 @@ app = FastAPI()\n async def read_items(\n     q: Annotated[\n         Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -5,8 +5,9 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str\n-    | None = Query(default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\")\n+    q: str | None = Query(\n+        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -12,7 +12,7 @@ async def read_items(\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n         min_length=3,\n-    )\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -15,7 +15,7 @@ async def read_items(\n             description=\"Query string for the items to search in the database that have a good match\",\n             min_length=3,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -14,7 +14,7 @@ async def read_items(\n             description=\"Query string for the items to search in the database that have a good match\",\n             min_length=3,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -14,7 +14,7 @@ async def read_items(\n             description=\"Query string for the items to search in the database that have a good match\",\n             min_length=3,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -5,13 +5,12 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str\n-    | None = Query(\n+    q: str | None = Query(\n         default=None,\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n         min_length=3,\n-    )\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -16,7 +16,7 @@ async def read_items(\n         max_length=50,\n         pattern=\"^fixedquery$\",\n         deprecated=True,\n-    )\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -19,7 +19,7 @@ async def read_items(\n             pattern=\"^fixedquery$\",\n             deprecated=True,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -18,7 +18,7 @@ async def read_items(\n             pattern=\"^fixedquery$\",\n             deprecated=True,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -18,7 +18,7 @@ async def read_items(\n             pattern=\"^fixedquery$\",\n             deprecated=True,\n         ),\n-    ] = None\n+    ] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -5,8 +5,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str\n-    | None = Query(\n+    q: str | None = Query(\n         default=None,\n         alias=\"item-query\",\n         title=\"Query string\",\n@@ -15,7 +14,7 @@ async def read_items(\n         max_length=50,\n         pattern=\"^fixedquery$\",\n         deprecated=True,\n-    )\n+    ),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ from .config import Settings\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return Settings()\n \n\n@@ -8,7 +8,7 @@ from .config import Settings\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return Settings()\n \n\n@@ -8,7 +8,7 @@ from .config import Settings\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return Settings()\n \n\n@@ -7,7 +7,7 @@ from . import config\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return config.Settings()\n \n\n@@ -8,7 +8,7 @@ from . import config\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return config.Settings()\n \n\n@@ -8,7 +8,7 @@ from . import config\n app = FastAPI()\n \n \n-@lru_cache()\n+@lru_cache\n def get_settings():\n     return config.Settings()\n \n\n@@ -197,9 +197,9 @@ if PYDANTIC_V2:\n         if \"$ref\" not in json_schema:\n             # TODO remove when deprecating Pydantic v1\n             # Ref: https://github.com/pydantic/pydantic/blob/d61792cc42c80b13b23e3ffa74bc37ec7c77f7d1/pydantic/schema.py#L207\n-            json_schema[\n-                \"title\"\n-            ] = field.field_info.title or field.alias.title().replace(\"_\", \" \")\n+            json_schema[\"title\"] = (\n+                field.field_info.title or field.alias.title().replace(\"_\", \" \")\n+            )\n         return json_schema\n \n     def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n\n@@ -896,9 +896,7 @@ class FastAPI(Starlette):\n                 [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                 \"\"\"\n             ),\n-        ] = (\n-            webhooks or routing.APIRouter()\n-        )\n+        ] = webhooks or routing.APIRouter()\n         self.root_path = root_path or openapi_prefix\n         self.state: Annotated[\n             State,\n@@ -951,7 +949,7 @@ class FastAPI(Starlette):\n         )\n         self.exception_handlers: Dict[\n             Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n-        ] = ({} if exception_handlers is None else dict(exception_handlers))\n+        ] = {} if exception_handlers is None else dict(exception_handlers)\n         self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n         self.exception_handlers.setdefault(\n             RequestValidationError, request_validation_exception_handler\n\n@@ -210,7 +210,7 @@ class HTTPBasic(HTTPBase):\n         try:\n             data = b64decode(param).decode(\"ascii\")\n         except (ValueError, UnicodeDecodeError, binascii.Error):\n-            raise invalid_user_credentials_exc\n+            raise invalid_user_credentials_exc  # noqa: B904\n         username, separator, password = data.partition(\":\")\n         if not separator:\n             raise invalid_user_credentials_exc\n\n@@ -626,9 +626,7 @@ class SecurityScopes:\n                 The list of all the scopes required by dependencies.\n                 \"\"\"\n             ),\n-        ] = (\n-            scopes or []\n-        )\n+        ] = scopes or []\n         self.scope_str: Annotated[\n             str,\n             Doc(\n\n@@ -152,7 +152,8 @@ def create_cloned_field(\n         ]\n     if field.key_field:  # type: ignore[attr-defined]\n         new_field.key_field = create_cloned_field(  # type: ignore[attr-defined]\n-            field.key_field, cloned_types=cloned_types  # type: ignore[attr-defined]\n+            field.key_field,  # type: ignore[attr-defined]\n+            cloned_types=cloned_types,\n         )\n     new_field.validators = field.validators  # type: ignore[attr-defined]\n     new_field.pre_validators = field.pre_validators  # type: ignore[attr-defined]\n\n@@ -36,7 +36,7 @@ site_path = Path(\"site\").absolute()\n build_site_path = Path(\"site_build\").absolute()\n \n \n-@lru_cache()\n+@lru_cache\n def is_mkdocs_insiders() -> bool:\n     version = metadata.version(\"mkdocs-material\")\n     return \"insiders\" in version\n@@ -104,7 +104,7 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n def build_lang(\n     lang: str = typer.Argument(\n         ..., callback=lang_callback, autocompletion=complete_existing_lang\n-    )\n+    ),\n ) -> None:\n     \"\"\"\n     Build the docs for a language.\n@@ -251,7 +251,7 @@ def serve() -> None:\n def live(\n     lang: str = typer.Argument(\n         None, callback=lang_callback, autocompletion=complete_existing_lang\n-    )\n+    ),\n ) -> None:\n     \"\"\"\n     Serve with livereload a docs site for a specific language.\n\n@@ -14,14 +14,14 @@ non_traslated_sections = [\n ]\n \n \n-@lru_cache()\n+@lru_cache\n def get_missing_translation_content(docs_dir: str) -> str:\n     docs_dir_path = Path(docs_dir)\n     missing_translation_path = docs_dir_path.parent.parent / \"missing-translation.md\"\n     return missing_translation_path.read_text(encoding=\"utf-8\")\n \n \n-@lru_cache()\n+@lru_cache\n def get_mkdocs_material_langs() -> List[str]:\n     material_path = Path(material.__file__).parent\n     material_langs_path = material_path / \"templates\" / \"partials\" / \"languages\"\n\n@@ -28,7 +28,7 @@ def examples(\n                 \"value\": {\"data\": \"Data in Body examples, example2\"},\n             },\n         },\n-    )\n+    ),\n ):\n     return item\n \n\n@@ -40,7 +40,7 @@ def create_app():\n                 {\"data\": \"Data in Body examples, example1\"},\n                 {\"data\": \"Data in Body examples, example2\"},\n             ],\n-        )\n+        ),\n     ):\n         return item\n \n@@ -54,7 +54,7 @@ def create_app():\n                     {\"data\": \"examples example_examples 1\"},\n                     {\"data\": \"examples example_examples 2\"},\n                 ],\n-            )\n+            ),\n         ):\n             return item\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#758a8f29e1c5b11a44499d23f003d61febb6e617", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 632 | Contributors (this commit): 13 | Commits (past 90d): 6 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,8 +14,8 @@ async def custom_swagger_ui_html():\n         openapi_url=app.openapi_url,\n         title=app.title + \" - Swagger UI\",\n         oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n-        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n-        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n+        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n+        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\",\n     )\n \n \n\n@@ -53,7 +53,7 @@ def get_swagger_ui_html(\n             It is normally set to a CDN URL.\n             \"\"\"\n         ),\n-    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n+    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\",\n     swagger_css_url: Annotated[\n         str,\n         Doc(\n@@ -63,7 +63,7 @@ def get_swagger_ui_html(\n             It is normally set to a CDN URL.\n             \"\"\"\n         ),\n-    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n+    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css\",\n     swagger_favicon_url: Annotated[\n         str,\n         Doc(\n\n@@ -20,8 +20,10 @@ def client():\n def test_swagger_ui_html(client: TestClient):\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n-    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\" in response.text\n-    assert \"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\" in response.text\n+    assert (\n+        \"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\" in response.text\n+    )\n+    assert \"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\" in response.text\n \n \n def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7e5afe2cb9bf1fa30c04a4dd393ea397a46db29b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 449 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.104.0\"\n+__version__ = \"0.104.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6f5aa81c076d22e38afbe7d602db6730e28bc3cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 34 | Files Changed: 4 | Hunks: 20 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 89 | Churn Cumulative: 3835 | Contributors (this commit): 31 | Commits (past 90d): 7 | Contributors (cumulative): 38 | DMM Complexity: 0.6470588235294118\n\nDIFF:\n@@ -249,7 +249,12 @@ if PYDANTIC_V2:\n         return is_bytes_sequence_annotation(field.type_)\n \n     def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n-        return type(field_info).from_annotation(annotation)\n+        cls = type(field_info)\n+        merged_field_info = cls.from_annotation(annotation)\n+        new_field_info = copy(field_info)\n+        new_field_info.metadata = merged_field_info.metadata\n+        new_field_info.annotation = merged_field_info.annotation\n+        return new_field_info\n \n     def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n         origin_type = (\n\n@@ -325,10 +325,11 @@ def analyze_param(\n     field_info = None\n     depends = None\n     type_annotation: Any = Any\n-    if (\n-        annotation is not inspect.Signature.empty\n-        and get_origin(annotation) is Annotated\n-    ):\n+    use_annotation: Any = Any\n+    if annotation is not inspect.Signature.empty:\n+        use_annotation = annotation\n+        type_annotation = annotation\n+    if get_origin(use_annotation) is Annotated:\n         annotated_args = get_args(annotation)\n         type_annotation = annotated_args[0]\n         fastapi_annotations = [\n@@ -336,14 +337,21 @@ def analyze_param(\n             for arg in annotated_args[1:]\n             if isinstance(arg, (FieldInfo, params.Depends))\n         ]\n-        assert (\n-            len(fastapi_annotations) <= 1\n-        ), f\"Cannot specify multiple `Annotated` FastAPI arguments for {param_name!r}\"\n-        fastapi_annotation = next(iter(fastapi_annotations), None)\n+        fastapi_specific_annotations = [\n+            arg\n+            for arg in fastapi_annotations\n+            if isinstance(arg, (params.Param, params.Body, params.Depends))\n+        ]\n+        if fastapi_specific_annotations:\n+            fastapi_annotation: Union[\n+                FieldInfo, params.Depends, None\n+            ] = fastapi_specific_annotations[-1]\n+        else:\n+            fastapi_annotation = None\n         if isinstance(fastapi_annotation, FieldInfo):\n             # Copy `field_info` because we mutate `field_info.default` below.\n             field_info = copy_field_info(\n-                field_info=fastapi_annotation, annotation=annotation\n+                field_info=fastapi_annotation, annotation=use_annotation\n             )\n             assert field_info.default is Undefined or field_info.default is Required, (\n                 f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n@@ -356,8 +364,6 @@ def analyze_param(\n                 field_info.default = Required\n         elif isinstance(fastapi_annotation, params.Depends):\n             depends = fastapi_annotation\n-    elif annotation is not inspect.Signature.empty:\n-        type_annotation = annotation\n \n     if isinstance(value, params.Depends):\n         assert depends is None, (\n@@ -402,15 +408,15 @@ def analyze_param(\n             # We might check here that `default_value is Required`, but the fact is that the same\n             # parameter might sometimes be a path parameter and sometimes not. See\n             # `tests/test_infer_param_optionality.py` for an example.\n-            field_info = params.Path(annotation=type_annotation)\n+            field_info = params.Path(annotation=use_annotation)\n         elif is_uploadfile_or_nonable_uploadfile_annotation(\n             type_annotation\n         ) or is_uploadfile_sequence_annotation(type_annotation):\n-            field_info = params.File(annotation=type_annotation, default=default_value)\n+            field_info = params.File(annotation=use_annotation, default=default_value)\n         elif not field_annotation_is_scalar(annotation=type_annotation):\n-            field_info = params.Body(annotation=type_annotation, default=default_value)\n+            field_info = params.Body(annotation=use_annotation, default=default_value)\n         else:\n-            field_info = params.Query(annotation=type_annotation, default=default_value)\n+            field_info = params.Query(annotation=use_annotation, default=default_value)\n \n     field = None\n     if field_info is not None:\n@@ -424,8 +430,8 @@ def analyze_param(\n             and getattr(field_info, \"in_\", None) is None\n         ):\n             field_info.in_ = params.ParamTypes.query\n-        use_annotation = get_annotation_from_field_info(\n-            type_annotation,\n+        use_annotation_from_field_info = get_annotation_from_field_info(\n+            use_annotation,\n             field_info,\n             param_name,\n         )\n@@ -436,7 +442,7 @@ def analyze_param(\n         field_info.alias = alias\n         field = create_response_field(\n             name=param_name,\n-            type_=use_annotation,\n+            type_=use_annotation_from_field_info,\n             default=field_info.default,\n             alias=alias,\n             required=field_info.default in (Required, Undefined),\n@@ -466,16 +472,17 @@ def is_body_param(*, param_field: ModelField, is_path_param: bool) -> bool:\n \n \n def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n-    field_info = cast(params.Param, field.field_info)\n-    if field_info.in_ == params.ParamTypes.path:\n+    field_info = field.field_info\n+    field_info_in = getattr(field_info, \"in_\", None)\n+    if field_info_in == params.ParamTypes.path:\n         dependant.path_params.append(field)\n-    elif field_info.in_ == params.ParamTypes.query:\n+    elif field_info_in == params.ParamTypes.query:\n         dependant.query_params.append(field)\n-    elif field_info.in_ == params.ParamTypes.header:\n+    elif field_info_in == params.ParamTypes.header:\n         dependant.header_params.append(field)\n     else:\n         assert (\n-            field_info.in_ == params.ParamTypes.cookie\n+            field_info_in == params.ParamTypes.cookie\n         ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n         dependant.cookie_params.append(field)\n \n\n@@ -1,6 +1,8 @@\n import pytest\n from fastapi import Depends, FastAPI, Path\n from fastapi.param_functions import Query\n+from fastapi.testclient import TestClient\n+from fastapi.utils import PYDANTIC_V2\n from typing_extensions import Annotated\n \n app = FastAPI()\n@@ -28,18 +30,13 @@ def test_no_annotated_defaults():\n             pass  # pragma: nocover\n \n \n-def test_no_multiple_annotations():\n+def test_multiple_annotations():\n     async def dep():\n         pass  # pragma: nocover\n \n-    with pytest.raises(\n-        AssertionError,\n-        match=\"Cannot specify multiple `Annotated` FastAPI arguments for 'foo'\",\n-    ):\n-\n-        @app.get(\"/\")\n-        async def get(foo: Annotated[int, Query(min_length=1), Query()]):\n-            pass  # pragma: nocover\n+    @app.get(\"/multi-query\")\n+    async def get(foo: Annotated[int, Query(gt=2), Query(lt=10)]):\n+        return foo\n \n     with pytest.raises(\n         AssertionError,\n@@ -64,3 +61,15 @@ def test_no_multiple_annotations():\n         @app.get(\"/\")\n         async def get3(foo: Annotated[int, Query(min_length=1)] = Depends(dep)):\n             pass  # pragma: nocover\n+\n+    client = TestClient(app)\n+    response = client.get(\"/multi-query\", params={\"foo\": \"5\"})\n+    assert response.status_code == 200\n+    assert response.json() == 5\n+\n+    response = client.get(\"/multi-query\", params={\"foo\": \"123\"})\n+    assert response.status_code == 422\n+\n+    if PYDANTIC_V2:\n+        response = client.get(\"/multi-query\", params={\"foo\": \"1\"})\n+        assert response.status_code == 422\n\n@@ -57,7 +57,7 @@ foo_is_short = {\n             {\n                 \"ctx\": {\"min_length\": 1},\n                 \"loc\": [\"query\", \"foo\"],\n-                \"msg\": \"String should have at least 1 characters\",\n+                \"msg\": \"String should have at least 1 character\",\n                 \"type\": \"string_too_short\",\n                 \"input\": \"\",\n                 \"url\": match_pydantic_error_url(\"string_too_short\"),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b98c65cb36b5f6ee159f4b2a99fbc380247b8820", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 14 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -6,6 +6,5 @@ from pydantic import BaseModel\n \n DecoratedCallable = TypeVar(\"DecoratedCallable\", bound=Callable[..., Any])\n UnionType = getattr(types, \"UnionType\", Union)\n-NoneType = getattr(types, \"UnionType\", None)\n ModelNameMap = Dict[Union[Type[BaseModel], Type[Enum]], str]\n IncEx = Union[Set[int], Set[str], Dict[int, Any], Dict[str, Any]]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d8185efb6effd36c162bc7ab8e1e2c597fb3b7a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 451 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.104.1\"\n+__version__ = \"0.105.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#91510db62012b817627833e896ddb579056c5922", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 453 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.105.0\"\n+__version__ = \"0.106.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f933fd6ff8db06ff77be8406ad56b6b07f13a532", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 455 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.106.0\"\n+__version__ = \"0.107.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c55f90df32101006ad3ddd8060d30f24c8f44eb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 7 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,4 +13,6 @@ templates = Jinja2Templates(directory=\"templates\")\n \n @app.get(\"/items/{id}\", response_class=HTMLResponse)\n async def read_item(request: Request, id: str):\n-    return templates.TemplateResponse(\"item.html\", {\"request\": request, \"id\": id})\n+    return templates.TemplateResponse(\n+        request=request, name=\"item.html\", context={\"id\": id}\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fe0249a23ebb294be183b3e2cab82addbd68c42c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 457 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.107.0\"\n+__version__ = \"0.108.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dd790c34ff6f92dba68bef0f46a4a18ba7015f94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 6 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 174 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ def get_username():\n     try:\n         yield \"Rick\"\n     except OwnerError as e:\n-        raise HTTPException(status_code=400, detail=f\"Onwer error: {e}\")\n+        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n \n \n @app.get(\"/items/{item_id}\")\n\n@@ -18,7 +18,7 @@ def get_username():\n     try:\n         yield \"Rick\"\n     except OwnerError as e:\n-        raise HTTPException(status_code=400, detail=f\"Onwer error: {e}\")\n+        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n \n \n @app.get(\"/items/{item_id}\")\n\n@@ -19,7 +19,7 @@ def get_username():\n     try:\n         yield \"Rick\"\n     except OwnerError as e:\n-        raise HTTPException(status_code=400, detail=f\"Onwer error: {e}\")\n+        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n \n \n @app.get(\"/items/{item_id}\")\n\n@@ -14,7 +14,7 @@ def test_get_no_item():\n def test_owner_error():\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Onwer error: Rick\"}\n+    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n \n \n def test_get_item():\n\n@@ -14,7 +14,7 @@ def test_get_no_item():\n def test_owner_error():\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Onwer error: Rick\"}\n+    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n \n \n def test_get_item():\n\n@@ -14,7 +14,7 @@ def test_get_no_item():\n def test_owner_error():\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Onwer error: Rick\"}\n+    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n \n \n def test_get_item():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e9ffa20c8e916336bd37c4f1477e0ec04445e0ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 4 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 73 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -15,5 +15,5 @@ app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     return {\"item_id\": item_id, **item.dict()}\n\n@@ -13,5 +13,5 @@ app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     return {\"item_id\": item_id, **item.dict()}\n\n@@ -15,7 +15,7 @@ app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item, q: Union[str, None] = None):\n+async def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n     result = {\"item_id\": item_id, **item.dict()}\n     if q:\n         result.update({\"q\": q})\n\n@@ -13,7 +13,7 @@ app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item, q: str | None = None):\n+async def update_item(item_id: int, item: Item, q: str | None = None):\n     result = {\"item_id\": item_id, **item.dict()}\n     if q:\n         result.update({\"q\": q})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4491ea688201db4f32d294b8a73862b9df367d99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 64 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -7,7 +7,7 @@ from .database import Base\n class User(Base):\n     __tablename__ = \"users\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     email = Column(String, unique=True, index=True)\n     hashed_password = Column(String)\n     is_active = Column(Boolean, default=True)\n@@ -18,7 +18,7 @@ class User(Base):\n class Item(Base):\n     __tablename__ = \"items\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     title = Column(String, index=True)\n     description = Column(String, index=True)\n     owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n@@ -7,7 +7,7 @@ from .database import Base\n class User(Base):\n     __tablename__ = \"users\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     email = Column(String, unique=True, index=True)\n     hashed_password = Column(String)\n     is_active = Column(Boolean, default=True)\n@@ -18,7 +18,7 @@ class User(Base):\n class Item(Base):\n     __tablename__ = \"items\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     title = Column(String, index=True)\n     description = Column(String, index=True)\n     owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n@@ -7,7 +7,7 @@ from .database import Base\n class User(Base):\n     __tablename__ = \"users\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     email = Column(String, unique=True, index=True)\n     hashed_password = Column(String)\n     is_active = Column(Boolean, default=True)\n@@ -18,7 +18,7 @@ class User(Base):\n class Item(Base):\n     __tablename__ = \"items\"\n \n-    id = Column(Integer, primary_key=True, index=True)\n+    id = Column(Integer, primary_key=True)\n     title = Column(String, index=True)\n     description = Column(String, index=True)\n     owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a1ea70804401625d50811e32840b08d94426805d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 123 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -33,6 +33,6 @@ async def create_item(item: Item, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n-        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+        raise HTTPException(status_code=409, detail=\"Item already exists\")\n     fake_db[item.id] = item\n     return item\n\n@@ -61,5 +61,5 @@ def test_create_existing_item():\n             \"description\": \"There goes my stealer\",\n         },\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 409\n     assert response.json() == {\"detail\": \"Item already exists\"}\n\n@@ -31,6 +31,6 @@ async def create_item(item: Item, x_token: str = Header()):\n     if x_token != fake_secret_token:\n         raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n     if item.id in fake_db:\n-        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+        raise HTTPException(status_code=409, detail=\"Item already exists\")\n     fake_db[item.id] = item\n     return item\n\n@@ -61,5 +61,5 @@ def test_create_existing_item():\n             \"description\": \"There goes my stealer\",\n         },\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 409\n     assert response.json() == {\"detail\": \"Item already exists\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#423cdd24ccd38957e50be5016c6feb88a5bb3ba4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,8 @@ from typing import Union\n import httpx\n from github import Github\n from github.PullRequest import PullRequest\n-from pydantic import BaseModel, BaseSettings, SecretStr, ValidationError\n+from pydantic import BaseModel, SecretStr, ValidationError\n+from pydantic_settings import BaseSettings\n \n github_api = \"https://api.github.com\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#60e1259ca4c69feb8698f65ffd9744ae92db0721", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8465 | Contributors (this commit): 41 | Commits (past 90d): 4 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -4328,7 +4328,7 @@ class APIRouter(routing.Router):\n         app = FastAPI()\n         router = APIRouter()\n \n-        @router.put(\"/items/{item_id}\")\n+        @router.trace(\"/items/{item_id}\")\n         def trace_item(item_id: str):\n             return None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
