{"custom_id": "flask#0207e90155abe937568727e4e9eca949b8247cd5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 330 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,6 +59,16 @@ def has_request_context():\n     return _request_ctx_stack.top is not None\n \n \n+def has_app_context():\n+    \"\"\"Worksl ike :func:`has_request_context` but for the application\n+    context.  You can also just do a boolean check on the\n+    :data:`current_app` object instead.\n+\n+    .. versionadded:: 0.9\n+    \"\"\"\n+    return _app_ctx_stack.top is not None\n+\n+\n class AppContext(object):\n     \"\"\"The application context binds an application object implicitly\n     to the current thread or greenlet, similar to how the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cf1641e5beec1ec11f418fa6e775fc44b9410180", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 30 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 68 | Churn Cumulative: 4378 | Contributors (this commit): 16 | Commits (past 90d): 14 | Contributors (cumulative): 19 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1354,37 +1354,48 @@ class Flask(_PackageBoundObject):\n                                 string as body\n         :class:`unicode`        a response object is created with the\n                                 string encoded to utf-8 as body\n-        :class:`tuple`          the response object is created with the\n-                                contents of the tuple as arguments\n         a WSGI function         the function is called as WSGI application\n                                 and buffered as response object\n+        :class:`tuple`          A tuple in the form ``(response, status,\n+                                headers)`` where `response` is any of the\n+                                types defined here, `status` is a string\n+                                or an integer and `headers` is a list of\n+                                a dictionary with header values.\n         ======================= ===========================================\n \n         :param rv: the return value from the view function\n+\n+        .. versionchanged:: 0.9\n+           Previously a tuple was interpreted as the arguments for the\n+           response object.\n         \"\"\"\n+        status = headers = None\n+        if isinstance(rv, tuple):\n+            rv, status, headers = rv + (None,) * (3 - len(rv))\n+\n         if rv is None:\n             raise ValueError('View function did not return a response')\n-        if isinstance(rv, self.response_class):\n-            return rv\n+\n+        if not isinstance(rv, self.response_class):\n+            # When we create a response object directly, we let the constructor\n+            # set the headers and status.  We do this because there can be\n+            # some extra logic involved when creating these objects with\n+            # specific values (like defualt content type selection).\n             if isinstance(rv, basestring):\n-            return self.response_class(rv)\n-        if isinstance(rv, tuple):\n-            if len(rv) > 0 and isinstance(rv[0], self.response_class):\n-                original = rv[0]\n-                new_response = self.response_class('', *rv[1:])\n-                if len(rv) < 3:\n-                    # The args for the response class are\n-                    # response=None, status=None, headers=None,\n-                    # mimetype=None, content_type=None, ...\n-                    # so if there's at least 3 elements the rv\n-                    # tuple contains header information so the\n-                    # headers from rv[0] \"win.\"\n-                    new_response.headers = original.headers\n-                new_response.response = original.response\n-                return new_response\n+                rv = self.response_class(rv, headers=headers, status=status)\n+                headers = status = None\n             else:\n-                return self.response_class(*rv)\n-        return self.response_class.force_type(rv, request.environ)\n+                rv = self.response_class.force_type(rv, request.environ)\n+\n+        if status is not None:\n+            if isinstance(status, basestring):\n+                rv.status = status\n+            else:\n+                rv.status_code = status\n+        if headers:\n+            rv.headers.extend(headers)\n+\n+        return rv\n \n     def create_url_adapter(self, request):\n         \"\"\"Creates a URL adapter for the given request.  The URL adapter\n\n@@ -631,7 +631,10 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return u'Hällo Wörld'.encode('utf-8')\n         @app.route('/args')\n         def from_tuple():\n-            return 'Meh', 400, {'X-Foo': 'Testing'}, 'text/plain'\n+            return 'Meh', 400, {\n+                'X-Foo': 'Testing',\n+                'Content-Type': 'text/plain; charset=utf-8'\n+            }\n         c = app.test_client()\n         self.assert_equal(c.get('/unicode').data, u'Hällo Wörld'.encode('utf-8'))\n         self.assert_equal(c.get('/string').data, u'Hällo Wörld'.encode('utf-8'))\n@@ -677,16 +680,10 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n             rv = flask.make_response(\n                 flask.Response('', headers={'Content-Type': 'text/html'}),\n-                400, None, 'application/json')\n-            self.assertEqual(rv.status_code, 400)\n-            self.assertEqual(rv.headers['Content-Type'], 'application/json')\n-\n-            rv = flask.make_response(\n-                flask.Response('', mimetype='application/json'),\n-                400, {'Content-Type': 'text/html'})\n+                400, [('X-Foo', 'bar')])\n             self.assertEqual(rv.status_code, 400)\n             self.assertEqual(rv.headers['Content-Type'], 'text/html')\n-\n+            self.assertEqual(rv.headers['X-Foo'], 'bar')\n \n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#34bbd3100bbfb9a406a417a9fe4e8944aa87c629", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 4 | Churn Cumulative: 1228 | Contributors (this commit): 17 | Commits (past 90d): 14 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -726,7 +726,9 @@ class _PackageBoundObject(object):\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        return {}\n+        options = {}\n+        options['cache_timeout'] = current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+        return options\n \n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9bed20c07c40a163077b936f740a4e96a6213688", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 89 | Lines Deleted: 10 | Files Changed: 4 | Hunks: 18 | Methods Changed: 11 | Complexity Δ (Sum/Max): 8/4 | Churn Δ: 99 | Churn Cumulative: 3378 | Contributors (this commit): 18 | Commits (past 90d): 19 | Contributors (cumulative): 23 | DMM Complexity: 0.9583333333333334\n\nDIFF:\n@@ -35,7 +35,7 @@ from .module import blueprint_is_module\n from .templating import DispatchingJinjaLoader, Environment, \\\n     _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n-    request_tearing_down\n+    request_tearing_down, appcontext_tearing_down\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -364,6 +364,14 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.7\n         self.teardown_request_funcs = {}\n \n+        #: A list of functions that are called when the application context\n+        #: is destroyed.  Since the application context is also torn down\n+        #: if the request ends this is the place to store code that disconnects\n+        #: from databases.\n+        #:\n+        #: .. versionadded:: 0.9\n+        self.teardown_appcontext_funcs = []\n+\n         #: A dictionary with lists of functions that can be used as URL\n         #: value processor functions.  Whenever a URL is built these functions\n         #: are called to modify the dictionary of values in place.  The key\n@@ -1106,10 +1114,42 @@ class Flask(_PackageBoundObject):\n         that they will fail.  If they do execute code that might fail they\n         will have to surround the execution of these code by try/except\n         statements and log ocurring errors.\n+\n+        When a teardown function was called because of a exception it will\n+        be passed an error object.\n         \"\"\"\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n \n+    @setupmethod\n+    def teardown_appcontext(self, f):\n+        \"\"\"Registers a function to be called when the application context\n+        ends.  These functions are typically also called when the request\n+        context is popped.\n+\n+        Example::\n+\n+            ctx = app.app_context()\n+            ctx.push()\n+            ...\n+            ctx.pop()\n+\n+        When ``ctx.pop()`` is executed in the above example, the teardown\n+        functions are called just before the app context moves from the\n+        stack of active contexts.  This becomes relevant if you are using\n+        such constructs in tests.\n+\n+        Since a request context typically also manages an application\n+        context it would also be called when you pop a request context.\n+\n+        When a teardown function was called because of an exception it will\n+        be passed an error object.\n+\n+        .. versionadded:: 0.9\n+        \"\"\"\n+        self.teardown_appcontext_funcs.append(f)\n+        return f\n+\n     @setupmethod\n     def context_processor(self, f):\n         \"\"\"Registers a template context processor function.\"\"\"\n@@ -1485,23 +1525,39 @@ class Flask(_PackageBoundObject):\n             self.save_session(ctx.session, response)\n         return response\n \n-    def do_teardown_request(self):\n+    def do_teardown_request(self, exc=None):\n         \"\"\"Called after the actual request dispatching and will\n         call every as :meth:`teardown_request` decorated function.  This is\n         not actually called by the :class:`Flask` object itself but is always\n         triggered when the request context is popped.  That way we have a\n         tighter control over certain resources under testing environments.\n+\n+        .. versionchanged:: 0.9\n+           Added the `exc` argument.  Previously this was always using the\n+           current exception information.\n         \"\"\"\n+        if exc is None:\n+            exc = sys.exc_info()[1]\n         funcs = reversed(self.teardown_request_funcs.get(None, ()))\n         bp = _request_ctx_stack.top.request.blueprint\n         if bp is not None and bp in self.teardown_request_funcs:\n             funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n-        exc = sys.exc_info()[1]\n         for func in funcs:\n             rv = func(exc)\n-            if rv is not None:\n-                return rv\n-        request_tearing_down.send(self)\n+        request_tearing_down.send(self, exc=exc)\n+\n+    def do_teardown_appcontext(self, exc=None):\n+        \"\"\"Called when an application context is popped.  This works pretty\n+        much the same as :meth:`do_teardown_request` but for the application\n+        context.\n+\n+        .. versionadded:: 0.9\n+        \"\"\"\n+        if exc is None:\n+            exc = sys.exc_info()[1]\n+        for func in reversed(self.teardown_appcontext_funcs):\n+            func(exc)\n+        appcontext_tearing_down.send(self, exc=exc)\n \n     def app_context(self):\n         \"\"\"Binds the application only.  For as long as the application is bound\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import sys\n+\n from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n@@ -86,8 +88,11 @@ class AppContext(object):\n         \"\"\"Binds the app context to the current context.\"\"\"\n         _app_ctx_stack.push(self)\n \n-    def pop(self):\n+    def pop(self, exc=None):\n         \"\"\"Pops the app context.\"\"\"\n+        if exc is None:\n+            exc = sys.exc_info()[1]\n+        self.app.do_teardown_appcontext(exc)\n         rv = _app_ctx_stack.pop()\n         assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n             % (rv, self)\n@@ -197,13 +202,18 @@ class RequestContext(object):\n         if self.session is None:\n             self.session = self.app.make_null_session()\n \n-    def pop(self):\n+    def pop(self, exc=None):\n         \"\"\"Pops the request context and unbinds it by doing that.  This will\n         also trigger the execution of functions registered by the\n         :meth:`~flask.Flask.teardown_request` decorator.\n+\n+        .. versionchanged:: 0.9\n+           Added the `exc` argument.\n         \"\"\"\n         self.preserved = False\n-        self.app.do_teardown_request()\n+        if exc is None:\n+            exc = sys.exc_info()[1]\n+        self.app.do_teardown_request(exc)\n         rv = _request_ctx_stack.pop()\n         assert rv is self, 'Popped wrong request context.  (%r instead of %r)' \\\n             % (rv, self)\n@@ -231,7 +241,7 @@ class RequestContext(object):\n            (tb is not None and self.app.preserve_context_on_exception):\n             self.preserved = True\n         else:\n-            self.pop()\n+            self.pop(exc_value)\n \n     def __repr__(self):\n         return '<%s \\'%s\\' [%s] of %s>' % (\n\n@@ -49,3 +49,4 @@ request_started = _signals.signal('request-started')\n request_finished = _signals.signal('request-finished')\n request_tearing_down = _signals.signal('request-tearing-down')\n got_request_exception = _signals.signal('got-request-exception')\n+appcontext_tearing_down = _signals.signal('appcontext-tearing-down')\n\n@@ -53,6 +53,18 @@ class AppContextTestCase(FlaskTestCase):\n             self.assert_equal(flask.current_app._get_current_object(), app)\n         self.assert_equal(flask._app_ctx_stack.top, None)\n \n+    def test_app_tearing_down(self):\n+        cleanup_stuff = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_appcontext\n+        def cleanup(exception):\n+            cleanup_stuff.append(exception)\n+\n+        with app.app_context():\n+            pass\n+\n+        self.assert_equal(cleanup_stuff, [None])\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cb54c462b809e36d12af571fa36affb4af3f7e96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 350 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -224,7 +224,7 @@ class RequestContext(object):\n \n         # Get rid of the app as well if necessary.\n         if self._pushed_application_context:\n-            self._pushed_application_context.pop()\n+            self._pushed_application_context.pop(exc)\n             self._pushed_application_context = None\n \n     def __enter__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d26af4fd6dd71793cf6373c1c18c82349494e0aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 184 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ from .helpers import url_for, jsonify, json_available, flash, \\\n     get_template_attribute, make_response, safe_join\n from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n-from .ctx import has_request_context\n+from .ctx import has_request_context, has_app_context\n from .module import Module\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9d09632dbfc0c08ab1a5290fbf282aad7d13e2f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 493 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ class BlueprintSetupState(object):\n         #: a reference to the current application\n         self.app = app\n \n-        #: a reference to the blurprint that created this setup state.\n+        #: a reference to the blueprint that created this setup state.\n         self.blueprint = blueprint\n \n         #: a dictionary with all options that were passed to the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a2eb5efcd8be834ca7e30e6392fa3a2067ad3a55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 254 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ class ExtensionImporter(object):\n             except ImportError:\n                 exc_type, exc_value, tb = sys.exc_info()\n                 # since we only establish the entry in sys.modules at the\n-                # very this seems to be redundant, but if recursive imports\n+                # end this seems to be redundant, but if recursive imports\n                 # happen we will call into the move import a second time.\n                 # On the second invocation we still don't have an entry for\n                 # fullname in sys.modules, but we will end up with the same\n@@ -71,7 +71,7 @@ class ExtensionImporter(object):\n \n                 # If it's an important traceback we reraise it, otherwise\n                 # we swallow it and try the next choice.  The skipped frame\n-                # is the one from __import__ above which we don't care about\n+                # is the one from __import__ above which we don't care about.\n                 if self.is_important_traceback(realname, tb):\n                     raise exc_type, exc_value, tb.tb_next\n                 continue\n@@ -106,7 +106,7 @@ class ExtensionImporter(object):\n         if module_name == important_module:\n             return True\n \n-        # Some python verisons will will clean up modules so early that the\n+        # Some python versions will clean up modules so early that the\n         # module name at that point is no longer set.  Try guessing from\n         # the filename then.\n         filename = os.path.abspath(tb.tb_frame.f_code.co_filename)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a3cb2a33829ee517530d30cd920e5d652b358086", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 4136 | Contributors (this commit): 27 | Commits (past 90d): 18 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -1360,7 +1360,7 @@ class Flask(_PackageBoundObject):\n     def make_default_options_response(self):\n         \"\"\"This method is called to create the default `OPTIONS` response.\n         This can be changed through subclassing to change the default\n-        behaviour of `OPTIONS` responses.\n+        behavior of `OPTIONS` responses.\n \n         .. versionadded:: 0.7\n         \"\"\"\n\n@@ -60,7 +60,7 @@ def _assert_have_json():\n         raise RuntimeError('simplejson not installed')\n \n \n-# figure out if simplejson escapes slashes.  This behaviour was changed\n+# figure out if simplejson escapes slashes.  This behavior was changed\n # from one version to another without reason.\n if not json_available or '\\\\/' not in json.dumps('/'):\n \n@@ -387,7 +387,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     .. versionadded:: 0.5\n        The `add_etags`, `cache_timeout` and `conditional` parameters were\n-       added.  The default behaviour is now to attach etags.\n+       added.  The default behavior is now to attach etags.\n \n     .. versionchanged:: 0.7\n        mimetype guessing and etag support for file objects was\n@@ -422,7 +422,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         file = filename_or_fp\n         filename = getattr(file, 'name', None)\n \n-        # XXX: this behaviour is now deprecated because it was unreliable.\n+        # XXX: this behavior is now deprecated because it was unreliable.\n         # removed in Flask 1.0\n         if not attachment_filename and not mimetype \\\n            and isinstance(filename, basestring):\n@@ -433,7 +433,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if add_etags:\n             warn(DeprecationWarning('In future flask releases etags will no '\n                 'longer be generated for file objects passed to the send_file '\n-                'function because this behaviour was unreliable.  Pass '\n+                'function because this behavior was unreliable.  Pass '\n                 'filenames instead if possible, otherwise attach an etag '\n                 'yourself based on another value'), stacklevel=2)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d90f0afe39724040d0be92df054e2b1438886134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 7 | Churn Cumulative: 551 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -73,14 +73,17 @@ class JSONTestCase(FlaskTestCase):\n         @app.route('/dict')\n         def return_dict():\n             return flask.jsonify(d)\n+        @app.route(\"/unpadded\")\n+        def return_padded_false():\n+            return flask.jsonify(d, padded=False)\n         @app.route(\"/padded\")\n-        def return_padded_json():\n+        def return_padded_true():\n             return flask.jsonify(d, padded=True)\n         @app.route(\"/padded_custom\")\n         def return_padded_json_custom_callback():\n             return flask.jsonify(d, padded='my_func_name')\n         c = app.test_client()\n-        for url in '/kw', '/dict':\n+        for url in '/kw', '/dict', '/unpadded':\n             rv = c.get(url)\n             self.assert_equal(rv.mimetype, 'application/json')\n             self.assert_equal(flask.json.loads(rv.data), d)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#36194697ae8371f42d3041c1f89b6f2e77c34826", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2902 | Contributors (this commit): 17 | Commits (past 90d): 8 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -1468,7 +1468,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         funcs = self.url_default_functions.get(None, ())\n         if '.' in endpoint:\n-            bp = endpoint.split('.', 1)[0]\n+            bp = endpoint.rsplit('.', 1)[0]\n             funcs = chain(funcs, self.url_default_functions.get(bp, ()))\n         for func in funcs:\n             func(endpoint, values)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb31188ec3882e9a6c6035b7a65ca257d424e31a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/2 | Churn Δ: 46 | Churn Cumulative: 5732 | Contributors (this commit): 28 | Commits (past 90d): 24 | Contributors (cumulative): 37 | DMM Complexity: 0.6086956521739131\n\nDIFF:\n@@ -329,6 +329,17 @@ class Flask(_PackageBoundObject):\n         #: decorator.\n         self.error_handler_spec = {None: self._error_handlers}\n \n+        #: If not `None`, this function is called when :meth:`url_for` raises\n+        #: :exc:`~werkzeug.routing.BuildError`, with the call signature::\n+        #:\n+        #:     self.build_error_handler(error, endpoint, **values)\n+        #:\n+        #: Here, `error` is the instance of `BuildError`, and `endpoint` and\n+        #: `**values` are the arguments passed into :meth:`url_for`.\n+        #:\n+        #: .. versionadded:: 0.9\n+        self.build_error_handler = None\n+\n         #: A dictionary with lists of functions that should be called at the\n         #: beginning of the request.  The key of the dictionary is the name of\n         #: the blueprint this function is active for, `None` for all requests.\n@@ -1473,6 +1484,15 @@ class Flask(_PackageBoundObject):\n         for func in funcs:\n             func(endpoint, values)\n \n+    def handle_build_error(self, error, endpoint, **values):\n+        \"\"\"Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.\n+\n+        Calls :attr:`build_error_handler` if it is not `None`.\n+        \"\"\"\n+        if self.build_error_handler is None:\n+            raise error\n+        return self.build_error_handler(error, endpoint, **values)\n+\n     def preprocess_request(self):\n         \"\"\"Called before the actual request dispatching and will\n         call every as :meth:`before_request` decorated function.\n\n@@ -20,6 +20,7 @@ import mimetypes\n from time import time\n from zlib import adler32\n from threading import RLock\n+from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n \n # try to load the best simplejson implementation available.  If JSON\n@@ -214,6 +215,10 @@ def url_for(endpoint, **values):\n     .. versionadded:: 0.9\n        The `_anchor` and `_method` parameters were added.\n \n+    .. versionadded:: 0.9\n+       Calls :meth:`Flask.handle_build_error` on\n+       :exc:`~werkzeug.routing.BuildError`.\n+\n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n     :param _external: if set to `True`, an absolute URL is generated.\n@@ -260,6 +265,15 @@ def url_for(endpoint, **values):\n     anchor = values.pop('_anchor', None)\n     method = values.pop('_method', None)\n     appctx.app.inject_url_defaults(endpoint, values)\n+    try:\n+        rv = url_adapter.build(endpoint, values, method=method,\n+                               force_external=external)\n+    except BuildError, error:\n+        values['_external'] = external\n+        values['_anchor'] = anchor\n+        values['_method'] = method\n+        return appctx.app.handle_build_error(error, endpoint, **values)\n+\n     rv = url_adapter.build(endpoint, values, method=method,\n                            force_external=external)\n     if anchor is not None:\n\n@@ -19,6 +19,7 @@ from threading import Thread\n from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n from werkzeug.exceptions import BadRequest, NotFound\n from werkzeug.http import parse_date\n+from werkzeug.routing import BuildError\n \n \n class BasicFunctionalityTestCase(FlaskTestCase):\n@@ -695,6 +696,17 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(flask.url_for('hello', name='test x', _external=True),\n                               'http://localhost/hello/test%20x')\n \n+    def test_build_error_handler(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            self.assertRaises(BuildError, flask.url_for, 'spam')\n+        def handler(error, endpoint, **values):\n+            # Just a test.\n+            return '/test_handler/'\n+        app.build_error_handler = handler\n+        with app.test_request_context():\n+            self.assert_equal(flask.url_for('spam'), '/test_handler/')\n+\n     def test_custom_converters(self):\n         from werkzeug.routing import BaseConverter\n         class ListConverter(BaseConverter):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8c8c524ddb791c2f7eed47b6d2e4317faf06a659", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 19 | Churn Cumulative: 4501 | Contributors (this commit): 17 | Commits (past 90d): 14 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1490,6 +1490,10 @@ class Flask(_PackageBoundObject):\n         Calls :attr:`build_error_handler` if it is not `None`.\n         \"\"\"\n         if self.build_error_handler is None:\n+            exc_type, exc_value, tb = sys.exc_info()\n+            if exc_value is error:\n+                raise exc_type, exc_value, tb\n+            else:\n                 raise error\n         return self.build_error_handler(error, endpoint, **values)\n \n\n@@ -698,8 +698,23 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n     def test_build_error_handler(self):\n         app = flask.Flask(__name__)\n+\n+        # Test base case, a URL which results in a BuildError.\n         with app.test_request_context():\n             self.assertRaises(BuildError, flask.url_for, 'spam')\n+\n+        # Verify the error is re-raised if not the current exception.\n+        try:\n+            with app.test_request_context():\n+                flask.url_for('spam')\n+        except BuildError, error:\n+            pass\n+        try:\n+            raise RuntimeError('Test case where BuildError is not current.')\n+        except RuntimeError:\n+            self.assertRaises(BuildError, app.handle_build_error, error, 'spam')\n+\n+        # Test a custom handler.\n         def handler(error, endpoint, **values):\n             # Just a test.\n             return '/test_handler/'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#148c50abf983eb8bbd8ecb565c9f98912048af46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 4211 | Contributors (this commit): 28 | Commits (past 90d): 24 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -1492,6 +1492,7 @@ class Flask(_PackageBoundObject):\n         if self.build_error_handler is None:\n             exc_type, exc_value, tb = sys.exc_info()\n             if exc_value is error:\n+                # exception is current, raise in context of original traceback.\n                 raise exc_type, exc_value, tb\n             else:\n                 raise error\n\n@@ -212,6 +212,40 @@ def url_for(endpoint, **values):\n \n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n+    To integrate applications, :class:`Flask` has a hook to intercept URL build\n+    errors through :attr:`Flask.build_error_handler`.  The `url_for` function\n+    results in a :exc:`~werkzeug.routing.BuildError` when the current app does\n+    not have a URL for the given endpoint and values.  When it does, the\n+    :data:`~flask.current_app` calls its :attr:`~Flask.build_error_handler` if\n+    it is not `None`, which can return a string to use as the result of\n+    `url_for` (instead of `url_for`'s default to raise the\n+    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\n+    An example::\n+\n+        def external_url_handler(error, endpoint, **values):\n+            \"Looks up an external URL when `url_for` cannot build a URL.\"\n+            # This is an example of hooking the build_error_handler.\n+            # Here, lookup_url is some utility function you've built\n+            # which looks up the endpoint in some external URL registry.\n+            url = lookup_url(endpoint, **values)\n+            if url is None:\n+                # External lookup did not have a URL.\n+                # Re-raise the BuildError, in context of original traceback.\n+                exc_type, exc_value, tb = sys.exc_info()\n+                if exc_value is error:\n+                    raise exc_type, exc_value, tb\n+                else:\n+                    raise error\n+            # url_for will use this result, instead of raising BuildError.\n+            return url\n+\n+        app.build_error_handler = external_url_handler\n+\n+    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n+    `endpoint` and `**values` are the arguments passed into `url_for`.  Note\n+    that this is for building URLs outside the current application, and not for\n+    handling 404 NotFound errors.\n+\n     .. versionadded:: 0.9\n        The `_anchor` and `_method` parameters were added.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2262ce4915aec0dfffa8e71244ebe10f72d11111", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 3 | Churn Cumulative: 86 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -72,6 +72,9 @@ class MemoryTestCase(FlaskTestCase):\n         # Trigger caches\n         fire()\n \n+        # This test only works on CPython 2.7.\n+        if sys.version_info >= (2, 7) and \\\n+                not hasattr(sys, 'pypy_translation_info'):\n             with self.assert_no_leak():\n                 for x in xrange(10):\n                     fire()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b31f2d9a640c154e41de6d9631e95cf105e96e1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 225 | Contributors (this commit): 9 | Commits (past 90d): 5 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,7 @@ setup(\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n-        'Werkzeug>=0.6.1',\n+        'Werkzeug>=0.7',\n         'Jinja2>=2.4'\n     ],\n     classifiers=[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#26da6a5365e1fd229932f167a299128f30fae154", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 33 | Files Changed: 4 | Hunks: 20 | Methods Changed: 11 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 105 | Churn Cumulative: 5508 | Contributors (this commit): 29 | Commits (past 90d): 34 | Contributors (cumulative): 41 | DMM Complexity: 0.9130434782608695\n\nDIFF:\n@@ -1041,12 +1041,6 @@ class Flask(_PackageBoundObject):\n             self.error_handler_spec.setdefault(key, {}).setdefault(None, []) \\\n                 .append((code_or_exception, f))\n \n-    def get_send_file_options(self, filename):\n-        # Override: Hooks in SEND_FILE_MAX_AGE_DEFAULT config.\n-        options = super(Flask, self).get_send_file_options(filename)\n-        options['cache_timeout'] = self.config['SEND_FILE_MAX_AGE_DEFAULT']\n-        return options\n-\n     @setupmethod\n     def template_filter(self, name=None):\n         \"\"\"A decorator that is used to register custom template filter.\n\n@@ -406,7 +406,7 @@ def get_flashed_messages(with_categories=False, category_filter=[]):\n \n def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n               attachment_filename=None, add_etags=True,\n-              cache_timeout=60 * 60 * 12, conditional=False):\n+              cache_timeout=None, conditional=False):\n     \"\"\"Sends the contents of a file to the client.  This will use the\n     most efficient method available and configured.  By default it will\n     try to use the WSGI server's file_wrapper support.  Alternatively\n@@ -420,10 +420,6 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     guessing requires a `filename` or an `attachment_filename` to be\n     provided.\n \n-    Note `get_send_file_options` in :class:`flask.Flask` hooks the\n-    ``SEND_FILE_MAX_AGE_DEFAULT`` configuration variable to set the default\n-    cache_timeout.\n-\n     Please never pass filenames to this function from user sources without\n     checking them first.  Something like this is usually sufficient to\n     avoid security problems::\n@@ -443,6 +439,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n        able to, otherwise attach an etag yourself.  This functionality\n        will be removed in Flask 1.0\n \n+    .. versionchanged:: 0.9\n+       cache_timeout pulls its default from application config, when None.\n+\n     :param filename_or_fp: the filename of the file to send.  This is\n                            relative to the :attr:`~Flask.root_path` if a\n                            relative path is specified.\n@@ -459,7 +458,11 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                                 differs from the file's filename.\n     :param add_etags: set to `False` to disable attaching of etags.\n     :param conditional: set to `True` to enable conditional responses.\n-    :param cache_timeout: the timeout in seconds for the headers.\n+\n+    :param cache_timeout: the timeout in seconds for the headers. When `None`\n+                          (default), this value is set by\n+                          :meth:`~Flask.get_send_file_max_age` of\n+                          :data:`~flask.current_app`.\n     \"\"\"\n     mtime = None\n     if isinstance(filename_or_fp, basestring):\n@@ -523,6 +526,8 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         rv.last_modified = int(mtime)\n \n     rv.cache_control.public = True\n+    if cache_timeout is None:\n+        cache_timeout = current_app.get_send_file_max_age(filename)\n     if cache_timeout:\n         rv.cache_control.max_age = cache_timeout\n         rv.expires = int(time() + cache_timeout)\n@@ -757,26 +762,31 @@ class _PackageBoundObject(object):\n             return FileSystemLoader(os.path.join(self.root_path,\n                                                  self.template_folder))\n \n-    def get_send_file_options(self, filename):\n-        \"\"\"Provides keyword arguments to send to :func:`send_from_directory`.\n+    def get_send_file_max_age(self, filename):\n+        \"\"\"Provides default cache_timeout for the :func:`send_file` functions.\n+\n+        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from\n+        the configuration of :data:`~flask.current_app`.\n+\n+        Static file functions such as :func:`send_from_directory` use this\n+        function, and :func:`send_file` calls this function on\n+        :data:`~flask.current_app` when the given cache_timeout is `None`. If a\n+        cache_timeout is given in :func:`send_file`, that timeout is used;\n+        otherwise, this method is called.\n \n         This allows subclasses to change the behavior when sending files based\n         on the filename.  For example, to set the cache timeout for .js files\n-        to 60 seconds (note the options are keywords for :func:`send_file`)::\n+        to 60 seconds::\n \n             class MyFlask(flask.Flask):\n-                def get_send_file_options(self, filename):\n-                    options = super(MyFlask, self).get_send_file_options(filename)\n-                    if filename.lower().endswith('.js'):\n-                        options['cache_timeout'] = 60\n-                        options['conditional'] = True\n-                    return options\n+                def get_send_file_max_age(self, name):\n+                    if name.lower().endswith('.js'):\n+                        return 60\n+                    return flask.Flask.get_send_file_max_age(self, name)\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        options = {}\n-        options['cache_timeout'] = current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n-        return options\n+        return current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n \n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n@@ -786,8 +796,11 @@ class _PackageBoundObject(object):\n         \"\"\"\n         if not self.has_static_folder:\n             raise RuntimeError('No static folder for this object')\n+        # Ensure get_send_file_max_age is called in all cases.\n+        # Here, we ensure get_send_file_max_age is called for Blueprints.\n+        cache_timeout = self.get_send_file_max_age(filename)\n         return send_from_directory(self.static_folder, filename,\n-                **self.get_send_file_options(filename))\n+                                   cache_timeout=cache_timeout)\n \n     def open_resource(self, resource, mode='rb'):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n\n@@ -386,6 +386,29 @@ class BlueprintTestCase(FlaskTestCase):\n         with flask.Flask(__name__).test_request_context():\n             self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n \n+    def test_default_static_cache_timeout(self):\n+        app = flask.Flask(__name__)\n+        class MyBlueprint(flask.Blueprint):\n+            def get_send_file_max_age(self, filename):\n+                return 100\n+\n+        blueprint = MyBlueprint('blueprint', __name__, static_folder='static')\n+        app.register_blueprint(blueprint)\n+\n+        # try/finally, in case other tests use this app for Blueprint tests.\n+        max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+        try:\n+            with app.test_request_context():\n+                unexpected_max_age = 3600\n+                if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == unexpected_max_age:\n+                    unexpected_max_age = 7200\n+                app.config['SEND_FILE_MAX_AGE_DEFAULT'] = unexpected_max_age\n+                rv = blueprint.send_static_file('index.html')\n+                cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+                self.assert_equal(cc.max_age, 100)\n+        finally:\n+            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n+\n     def test_templates_list(self):\n         from blueprintapp import app\n         templates = sorted(app.jinja_env.list_templates())\n\n@@ -237,28 +237,37 @@ class SendfileTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         # default cache timeout is 12 hours\n         with app.test_request_context():\n+            # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 12 * 60 * 60)\n+            # Test again with direct use of send_file utility.\n+            rv = flask.send_file('static/index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 12 * 60 * 60)\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n         with app.test_request_context():\n+            # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 3600)\n-        # override get_send_file_options with some new values and check them\n+            # Test again with direct use of send_file utility.\n+            rv = flask.send_file('static/index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 3600)\n         class StaticFileApp(flask.Flask):\n-            def get_send_file_options(self, filename):\n-                opts = super(StaticFileApp, self).get_send_file_options(filename)\n-                opts['cache_timeout'] = 10\n-                # this test catches explicit inclusion of the conditional\n-                # keyword arg in the guts\n-                opts['conditional'] = True\n-                return opts\n+            def get_send_file_max_age(self, filename):\n+                return 10\n         app = StaticFileApp(__name__)\n         with app.test_request_context():\n+            # Test with static file handler.\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 10)\n+            # Test again with direct use of send_file utility.\n+            rv = flask.send_file('static/index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 10)\n \n \n class LoggingTestCase(FlaskTestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#33bae1a8dcadbf56fb19ad814fa516b6468bb2cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 3377 | Contributors (this commit): 19 | Commits (past 90d): 24 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,7 +28,7 @@ from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     find_package\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n-from .ctx import RequestContext, AppContext\n+from .ctx import RequestContext, AppContext, _RequestGlobals\n from .globals import _request_ctx_stack, request\n from .sessions import SecureCookieSessionInterface\n from .module import blueprint_is_module\n@@ -148,6 +148,11 @@ class Flask(_PackageBoundObject):\n     #: :class:`~flask.Response` for more information.\n     response_class = Response\n \n+    #: The class that is used for the :data:`~flask.g` instance.\n+    #:\n+    #: .. versionadded:: 0.9\n+    request_globals_class = _RequestGlobals\n+\n     #: The debug flag.  Set this to `True` to enable debugging of the\n     #: application.  In debug mode the debugger will kick in when an unhandled\n     #: exception ocurrs and the integrated server will automatically reload\n\n@@ -18,6 +18,7 @@ from .module import blueprint_is_module\n \n \n class _RequestGlobals(object):\n+    \"\"\"A plain object.\"\"\"\n     pass\n \n \n@@ -139,7 +140,7 @@ class RequestContext(object):\n         self.app = app\n         self.request = app.request_class(environ)\n         self.url_adapter = app.create_url_adapter(self.request)\n-        self.g = _RequestGlobals()\n+        self.g = app.request_globals_class()\n         self.flashes = None\n         self.session = None\n \n\n@@ -65,6 +65,16 @@ class AppContextTestCase(FlaskTestCase):\n \n         self.assert_equal(cleanup_stuff, [None])\n \n+    def test_custom_request_globals_class(self):\n+        class CustomRequestGlobals(object):\n+            def __init__(self):\n+                self.spam = 'eggs'\n+        app = flask.Flask(__name__)\n+        app.request_globals_class = CustomRequestGlobals\n+        with app.test_request_context():\n+            self.assert_equal(\n+                flask.render_template_string('{{ g.spam }}'), 'eggs')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
