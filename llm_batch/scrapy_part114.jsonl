{"custom_id": "scrapy#bd7def8fd46574ac18740e8da9112f9016dd05a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 127 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,8 @@ __all__ = ['HtmlXPathSelector', 'XmlXPathSelector', 'XPathSelector', \\\n \n class XPathSelector(object_ref):\n \n-    __slots__ = ['response', 'text', 'expr', 'namespaces', '_root', '__weakref__']\n+    __slots__ = ['response', 'text', 'expr', 'namespaces', '_root', '_xpathev', \\\n+        '__weakref__']\n     _parser = etree.HTMLParser\n     _tostring_method = 'html'\n \n@@ -27,6 +28,7 @@ class XPathSelector(object_ref):\n         else:\n             self.response = response\n         self._root = root\n+        self._xpathev = None\n         self.namespaces = namespaces\n         self.expr = expr\n \n@@ -38,10 +40,15 @@ class XPathSelector(object_ref):\n                 base_url=self.response.url)\n         return self._root\n \n+    @property\n+    def xpathev(self):\n+        if self._xpathev is None:\n+            self._xpathev = etree.XPathEvaluator(self.root, namespaces=self.namespaces)\n+        return self._xpathev\n+\n     def select(self, xpath):\n-        xpatheval = etree.XPathEvaluator(self.root, namespaces=self.namespaces)\n         try:\n-            result = xpatheval(xpath)\n+            result = self.xpathev(xpath)\n         except etree.XPathError:\n             raise ValueError(\"Invalid XPath: %s\" % xpath)\n         if hasattr(result, '__iter__'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9c9a655cb4963db673b55891495006206390a025", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 282 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -54,7 +54,7 @@ class XPathSelector(object_ref):\n     def re(self, regex):\n         \"\"\"Return a list of unicode strings by applying the regex over all\n         current XPath selections, and flattening the results\"\"\"\n-        return extract_regex(regex, self.extract(), 'utf-8')\n+        return extract_regex(regex, self.extract())\n \n     def extract(self):\n         \"\"\"Return a unicode string of the content referenced by the XPathSelector\"\"\"\n\n@@ -59,7 +59,7 @@ class XPathSelector(object_ref):\n         return XPathSelectorList(result)\n \n     def re(self, regex):\n-        return extract_regex(regex, self.extract(), 'utf-8')\n+        return extract_regex(regex, self.extract())\n \n     def extract(self):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a8be54a8ea52754702221623342c9a58b71c5523", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 7 | Churn Cumulative: 41 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,17 +8,18 @@ class Environment(object):\n \n     implements(IEnvironment)\n \n-    def __init__(self, config):\n+    def __init__(self, config, initenv=os.environ):\n         self.dbs_dir = config.get('dbs_dir', 'dbs')\n         self.logs_dir = config.get('logs_dir', 'logs')\n         if config.cp.has_section('settings'):\n             self.settings = dict(config.cp.items('settings'))\n         else:\n             self.settings = {}\n+        self.initenv = initenv\n \n     def get_environment(self, message, slot, eggpath):\n         project = message['project']\n-        env = os.environ.copy()\n+        env = self.initenv.copy()\n         env['SCRAPY_PROJECT'] = project\n         if eggpath:\n             env['SCRAPY_EGGFILE'] = eggpath\n\n@@ -16,7 +16,7 @@ class EggStorageTest(unittest.TestCase):\n         config = Config(values={'eggs_dir': d, 'logs_dir': d})\n         config.cp.add_section('settings')\n         config.cp.set('settings', 'newbot', 'newbot.settings')\n-        self.environ = Environment(config)\n+        self.environ = Environment(config, initenv={})\n \n     def test_interface(self):\n         verifyObject(IEnvironment, self.environ)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9b9ab378049afb69edac266ba4236e6773f82cfb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 10 | Churn Cumulative: 452 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -55,7 +55,7 @@ class XPathSelector(object_ref):\n         if hasattr(result, '__iter__'):\n             result = [self.__class__(root=x, expr=xpath, namespaces=self.namespaces) \\\n                 for x in result]\n-        elif result:\n+        else:\n             result = [self.__class__(root=result, expr=xpath, namespaces=self.namespaces)]\n         return XPathSelectorList(result)\n \n\n@@ -45,6 +45,14 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n                          [u'12'])\n \n+    @libxml2debug\n+    def test_selector_boolean_result(self):\n+        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n+        response = TextResponse(url=\"http://example.com\", body=body)\n+        xs = HtmlXPathSelector(response)\n+        self.assertEqual(xs.select(\"//input[@name='a']/@name='a'\").extract(), [u'True'])\n+        self.assertEqual(xs.select(\"//input[@name='a']/@name='n'\").extract(), [u'False'])\n+\n     @libxml2debug\n     def test_selector_same_type(self):\n         \"\"\"Test XPathSelector returning the same type in x() method\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#665578bfe8e48b96e34ecc8bea1509d4bb5e6cce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 1448 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -121,7 +121,7 @@ OrderedDict = _import_OrderedDict()\n \n def _import_c_make_encoder():\n     try:\n-        from simplejson._speedups import make_encoder\n+        from scrapy.xlib.simplejson._speedups import make_encoder\n         return make_encoder\n     except ImportError:\n         return None\n\n@@ -4,10 +4,10 @@ import re\n import sys\n import struct\n \n-from simplejson.scanner import make_scanner\n+from scrapy.xlib.simplejson.scanner import make_scanner\n def _import_c_scanstring():\n     try:\n-        from simplejson._speedups import scanstring\n+        from scrapy.xlib.simplejson._speedups import scanstring\n         return scanstring\n     except ImportError:\n         return None\n\n@@ -5,13 +5,13 @@ from decimal import Decimal\n \n def _import_speedups():\n     try:\n-        from simplejson import _speedups\n+        from scrapy.xlib.simplejson import _speedups\n         return _speedups.encode_basestring_ascii, _speedups.make_encoder\n     except ImportError:\n         return None, None\n c_encode_basestring_ascii, c_make_encoder = _import_speedups()\n \n-from simplejson.decoder import PosInf\n+from scrapy.xlib.simplejson.decoder import PosInf\n \n ESCAPE = re.compile(r'[\\x00-\\x1f\\\\\"\\b\\f\\n\\r\\t]')\n ESCAPE_ASCII = re.compile(r'([\\\\\"]|[^\\ -~])')\n\n@@ -3,7 +3,7 @@\n import re\n def _import_c_make_scanner():\n     try:\n-        from simplejson._speedups import make_scanner\n+        from scrapy.xlib.simplejson._speedups import make_scanner\n         return make_scanner\n     except ImportError:\n         return None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d1f63237adec8ddcdc3f85d6f07fa2c8e772ded3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 206 | Lines Deleted: 372 | Files Changed: 4 | Hunks: 20 | Methods Changed: 31 | Complexity Δ (Sum/Max): -45/0 | Churn Δ: 578 | Churn Cumulative: 933 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 6 | DMM Complexity: 0.12949640287769784\n\nDIFF:\n@@ -7,7 +7,7 @@ image links only.\n from scrapy.link import Link\n from scrapy.utils.url import canonicalize_url, urljoin_rfc\n from scrapy.utils.python import unicode_to_str, flatten\n-from scrapy.selector import XPathSelectorList, HtmlXPathSelector\n+from scrapy.selector.libxml2sel import XPathSelectorList, HtmlXPathSelector\n \n class HTMLImageLinkExtractor(object):\n     '''HTMLImageLinkExtractor objects are intended to extract image links from HTML pages\n\n@@ -0,0 +1,182 @@\n+\"\"\"\n+Selectors tests, common for all backends\n+\"\"\"\n+\n+import re\n+import weakref\n+\n+from twisted.trial import unittest\n+\n+from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n+from scrapy.selector import XmlXPathSelector, HtmlXPathSelector, \\\n+    XPathSelector\n+from scrapy.utils.test import libxml2debug\n+\n+class XPathSelectorTestCase(unittest.TestCase):\n+\n+    xs_cls = XPathSelector\n+    hxs_cls = HtmlXPathSelector\n+    xxs_cls = XmlXPathSelector\n+\n+    @libxml2debug\n+    def test_selector_simple(self):\n+        \"\"\"Simple selector tests\"\"\"\n+        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n+        response = TextResponse(url=\"http://example.com\", body=body)\n+        xpath = self.hxs_cls(response)\n+\n+        xl = xpath.select('//input')\n+        self.assertEqual(2, len(xl))\n+        for x in xl:\n+            assert isinstance(x, self.hxs_cls)\n+\n+        self.assertEqual(xpath.select('//input').extract(),\n+                         [x.extract() for x in xpath.select('//input')])\n+\n+        self.assertEqual([x.extract() for x in xpath.select(\"//input[@name='a']/@name\")],\n+                         [u'a'])\n+        self.assertEqual([x.extract() for x in xpath.select(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n+                         [u'12.0'])\n+\n+        self.assertEqual(xpath.select(\"concat('xpath', 'rules')\").extract(),\n+                         [u'xpathrules'])\n+        self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n+                         [u'12'])\n+\n+    @libxml2debug\n+    def test_selector_same_type(self):\n+        \"\"\"Test XPathSelector returning the same type in x() method\"\"\"\n+        text = '<p>test<p>'\n+        assert isinstance(self.xxs_cls(text=text).select(\"//p\")[0],\n+                          self.xxs_cls)\n+        assert isinstance(self.hxs_cls(text=text).select(\"//p\")[0], \n+                          self.hxs_cls)\n+\n+    @libxml2debug\n+    def test_selector_xml_html(self):\n+        \"\"\"Test that XML and HTML XPathSelector's behave differently\"\"\"\n+\n+        # some text which is parsed differently by XML and HTML flavors\n+        text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n+\n+        self.assertEqual(self.xxs_cls(text=text).select(\"//div\").extract(),\n+                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n+\n+        self.assertEqual(self.hxs_cls(text=text).select(\"//div\").extract(),\n+                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n+\n+    @libxml2debug\n+    def test_selector_nested(self):\n+        \"\"\"Nested selector tests\"\"\"\n+        body = \"\"\"<body>\n+                    <div class='one'>\n+                      <ul>\n+                        <li>one</li><li>two</li>\n+                      </ul>\n+                    </div>\n+                    <div class='two'>\n+                      <ul>\n+                        <li>four</li><li>five</li><li>six</li>\n+                      </ul>\n+                    </div>\n+                  </body>\"\"\"\n+\n+        response = HtmlResponse(url=\"http://example.com\", body=body)\n+        x = self.hxs_cls(response)\n+\n+        divtwo = x.select('//div[@class=\"two\"]')\n+        self.assertEqual(divtwo.select(\"//li\").extract(),\n+                         [\"<li>one</li>\", \"<li>two</li>\", \"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n+        self.assertEqual(divtwo.select(\"./ul/li\").extract(),\n+                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n+        self.assertEqual(divtwo.select(\".//li\").extract(),\n+                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n+        self.assertEqual(divtwo.select(\"./li\").extract(),\n+                         [])\n+\n+    @libxml2debug\n+    def test_selector_re(self):\n+        body = \"\"\"<div>Name: Mary\n+                    <ul>\n+                      <li>Name: John</li>\n+                      <li>Age: 10</li>\n+                      <li>Name: Paul</li>\n+                      <li>Age: 20</li>\n+                    </ul>\n+                    Age: 20\n+                  </div>\n+\n+               \"\"\"\n+        response = HtmlResponse(url=\"http://example.com\", body=body)\n+        x = self.hxs_cls(response)\n+\n+        name_re = re.compile(\"Name: (\\w+)\")\n+        self.assertEqual(x.select(\"//ul/li\").re(name_re),\n+                         [\"John\", \"Paul\"])\n+        self.assertEqual(x.select(\"//ul/li\").re(\"Age: (\\d+)\"),\n+                         [\"10\", \"20\"])\n+\n+    @libxml2debug\n+    def test_selector_over_text(self):\n+        hxs = self.hxs_cls(text='<root>lala</root>')\n+        self.assertEqual(hxs.extract(),\n+                         u'<html><body><root>lala</root></body></html>')\n+\n+        xxs = self.xxs_cls(text='<root>lala</root>')\n+        self.assertEqual(xxs.extract(),\n+                         u'<root>lala</root>')\n+\n+        xxs = self.xxs_cls(text='<root>lala</root>')\n+        self.assertEqual(xxs.select('.').extract(),\n+                         [u'<root>lala</root>'])\n+\n+\n+    @libxml2debug\n+    def test_selector_invalid_xpath(self):\n+        response = XmlResponse(url=\"http://example.com\", body=\"<html></html>\")\n+        x = self.hxs_cls(response)\n+        xpath = \"//test[@foo='bar]\"\n+        try:\n+            x.select(xpath)\n+        except ValueError, e:\n+            assert xpath in str(e), \"Exception message does not contain invalid xpath\"\n+        except Exception:\n+            raise AssertionError(\"A invalid XPath does not raise ValueError\")\n+        else:\n+            raise AssertionError(\"A invalid XPath does not raise an exception\")\n+\n+    @libxml2debug\n+    def test_http_header_encoding_precedence(self):\n+        # u'\\xa3'     = pound symbol in unicode\n+        # u'\\xc2\\xa3' = pound symbol in utf-8\n+        # u'\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n+\n+        meta = u'<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n+        head = u'<head>' + meta + u'</head>'\n+        body_content = u'<span id=\"blank\">\\xa3</span>'\n+        body = u'<body>' + body_content + u'</body>'\n+        html = u'<html>' + head + body + u'</html>'\n+        encoding = 'utf-8'\n+        html_utf8 = html.encode(encoding)\n+\n+        headers = {'Content-Type': ['text/html; charset=utf-8']}\n+        response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n+        x = self.hxs_cls(response)\n+        self.assertEquals(x.select(\"//span[@id='blank']/text()\").extract(),\n+                          [u'\\xa3'])\n+\n+    @libxml2debug\n+    def test_empty_bodies(self):\n+        r1 = TextResponse('http://www.example.com', body='')\n+        self.hxs_cls(r1) # shouldn't raise error\n+        self.xxs_cls(r1) # shouldn't raise error\n+\n+    @libxml2debug\n+    def test_weakref_slots(self):\n+        \"\"\"Check that classes are using slots and are weak-referenceable\"\"\"\n+        for cls in [self.xs_cls, self.hxs_cls, self.xxs_cls]:\n+            x = cls()\n+            weakref.ref(x)\n+            assert not hasattr(x, '__dict__'), \"%s does not use __slots__\" % \\\n+                x.__class__.__name__\n+\n\n@@ -1,127 +1,21 @@\n-import re\n+\"\"\"\n+Selectors tests, specific for libxml2 backend\n+\"\"\"\n+\n import unittest\n-import weakref\n \n from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n-from scrapy.selector import XmlXPathSelector, HtmlXPathSelector, \\\n+from scrapy.selector.libxml2sel import XmlXPathSelector, HtmlXPathSelector, \\\n     XPathSelector\n from scrapy.selector.document import Libxml2Document\n from scrapy.utils.test import libxml2debug\n+from scrapy.tests.test_selector import XPathSelectorTestCase\n \n-class XPathSelectorTestCase(unittest.TestCase):\n-\n-    @libxml2debug\n-    def test_selector_simple(self):\n-        \"\"\"Simple selector tests\"\"\"\n-        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n-        response = TextResponse(url=\"http://example.com\", body=body)\n-        xpath = HtmlXPathSelector(response)\n-\n-        xl = xpath.select('//input')\n-        self.assertEqual(2, len(xl))\n-        for x in xl:\n-            assert isinstance(x, HtmlXPathSelector)\n-\n-        self.assertEqual(xpath.select('//input').extract(),\n-                         [x.extract() for x in xpath.select('//input')])\n-\n-        self.assertEqual([x.extract() for x in xpath.select(\"//input[@name='a']/@name\")],\n-                         [u'a'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n-                         [u'12.0'])\n-\n-        self.assertEqual(xpath.select(\"concat('xpath', 'rules')\").extract(),\n-                         [u'xpathrules'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n-                         [u'12'])\n-\n-    @libxml2debug\n-    def test_selector_same_type(self):\n-        \"\"\"Test XPathSelector returning the same type in x() method\"\"\"\n-        text = '<p>test<p>'\n-        assert isinstance(XmlXPathSelector(text=text).select(\"//p\")[0],\n-                          XmlXPathSelector)\n-        assert isinstance(HtmlXPathSelector(text=text).select(\"//p\")[0], \n-                          HtmlXPathSelector)\n-\n-    @libxml2debug\n-    def test_selector_xml_html(self):\n-        \"\"\"Test that XML and HTML XPathSelector's behave differently\"\"\"\n-\n-        # some text which is parsed differently by XML and HTML flavors\n-        text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n-\n-        self.assertEqual(XmlXPathSelector(text=text).select(\"//div\").extract(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n-\n-        self.assertEqual(HtmlXPathSelector(text=text).select(\"//div\").extract(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n-\n-    @libxml2debug\n-    def test_selector_nested(self):\n-        \"\"\"Nested selector tests\"\"\"\n-        body = \"\"\"<body>\n-                    <div class='one'>\n-                      <ul>\n-                        <li>one</li><li>two</li>\n-                      </ul>\n-                    </div>\n-                    <div class='two'>\n-                      <ul>\n-                        <li>four</li><li>five</li><li>six</li>\n-                      </ul>\n-                    </div>\n-                  </body>\"\"\"\n-\n-        response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = HtmlXPathSelector(response)\n-\n-        divtwo = x.select('//div[@class=\"two\"]')\n-        self.assertEqual(divtwo.select(\"//li\").extract(),\n-                         [\"<li>one</li>\", \"<li>two</li>\", \"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\"./ul/li\").extract(),\n-                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\".//li\").extract(),\n-                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\"./li\").extract(),\n-                         [])\n-\n-    @libxml2debug\n-    def test_selector_re(self):\n-        body = \"\"\"<div>Name: Mary\n-                    <ul>\n-                      <li>Name: John</li>\n-                      <li>Age: 10</li>\n-                      <li>Name: Paul</li>\n-                      <li>Age: 20</li>\n-                    </ul>\n-                    Age: 20\n-                  </div>\n-\n-               \"\"\"\n-        response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = HtmlXPathSelector(response)\n-\n-        name_re = re.compile(\"Name: (\\w+)\")\n-        self.assertEqual(x.select(\"//ul/li\").re(name_re),\n-                         [\"John\", \"Paul\"])\n-        self.assertEqual(x.select(\"//ul/li\").re(\"Age: (\\d+)\"),\n-                         [\"10\", \"20\"])\n-\n-    @libxml2debug\n-    def test_selector_over_text(self):\n-        hxs = HtmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(hxs.extract(),\n-                         u'<html><body><root>lala</root></body></html>')\n-\n-        xxs = XmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(xxs.extract(),\n-                         u'<root>lala</root>')\n-\n-        xxs = XmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(xxs.select('.').extract(),\n-                         [u'<root>lala</root>'])\n+class XPathSelectorTestCase(XPathSelectorTestCase):\n \n+    xs_cls = XPathSelector\n+    hxs_cls = HtmlXPathSelector\n+    xxs_cls = XmlXPathSelector\n \n     @libxml2debug\n     def test_selector_namespaces_simple(self):\n@@ -164,40 +58,6 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n         self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material\").extract()[0], '<material/>')\n \n-    @libxml2debug\n-    def test_selector_invalid_xpath(self):\n-        response = XmlResponse(url=\"http://example.com\", body=\"<html></html>\")\n-        x = HtmlXPathSelector(response)\n-        xpath = \"//test[@foo='bar]\"\n-        try:\n-            x.select(xpath)\n-        except ValueError, e:\n-            assert xpath in str(e), \"Exception message does not contain invalid xpath\"\n-        except Exception:\n-            raise AssertionError(\"A invalid XPath does not raise ValueError\")\n-        else:\n-            raise AssertionError(\"A invalid XPath does not raise an exception\")\n-\n-    @libxml2debug\n-    def test_http_header_encoding_precedence(self):\n-        # u'\\xa3'     = pound symbol in unicode\n-        # u'\\xc2\\xa3' = pound symbol in utf-8\n-        # u'\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n-\n-        meta = u'<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n-        head = u'<head>' + meta + u'</head>'\n-        body_content = u'<span id=\"blank\">\\xa3</span>'\n-        body = u'<body>' + body_content + u'</body>'\n-        html = u'<html>' + head + body + u'</html>'\n-        encoding = 'utf-8'\n-        html_utf8 = html.encode(encoding)\n-\n-        headers = {'Content-Type': ['text/html; charset=utf-8']}\n-        response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n-        x = HtmlXPathSelector(response)\n-        self.assertEquals(x.select(\"//span[@id='blank']/text()\").extract(),\n-                          [u'\\xa3'])\n-\n     @libxml2debug\n     def test_null_bytes(self):\n         hxs = HtmlXPathSelector(text='<root>la\\x00la</root>')\n@@ -239,20 +99,6 @@ class XPathSelectorTestCase(unittest.TestCase):\n             u'\\n  ',\n             u'\\n  pff\\n'])\n \n-    @libxml2debug\n-    def test_empty_bodies(self):\n-        r1 = TextResponse('http://www.example.com', body='')\n-        hxs = HtmlXPathSelector(r1) # shouldn't raise error\n-        xxs = XmlXPathSelector(r1) # shouldn't raise error\n-\n-    @libxml2debug\n-    def test_weakref_slots(self):\n-        \"\"\"Check that classes are using slots and are weak-referenceable\"\"\"\n-        for cls in [XPathSelector, HtmlXPathSelector, XmlXPathSelector]:\n-            x = cls()\n-            weakref.ref(x)\n-            assert not hasattr(x, '__dict__'), \"%s does not use __slots__\" % \\\n-                x.__class__.__name__\n \n class Libxml2DocumentTest(unittest.TestCase):\n \n\n@@ -1,50 +1,26 @@\n-# TODO: we should merge these tests with test_selector_libxml2.py\n+\"\"\"\n+Selectors tests, specific for lxml backend\n+\"\"\"\n \n-import re\n-import weakref\n-\n-from twisted.trial import unittest\n-\n-from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n-nolxml = False\n+from scrapy.http import TextResponse, XmlResponse\n+has_lxml = True\n try:\n     from scrapy.selector.lxmlsel import XmlXPathSelector, HtmlXPathSelector, \\\n         XPathSelector\n except ImportError:\n-    nolxml = True\n-\n+    has_lxml = False\n from scrapy.utils.test import libxml2debug\n+from scrapy.tests.test_selector import XPathSelectorTestCase\n \n-class XPathSelectorTestCase(unittest.TestCase):\n+class XPathSelectorTestCase(XPathSelectorTestCase):\n \n-    if nolxml:\n+    if has_lxml:\n+        xs_cls = XPathSelector\n+        hxs_cls = HtmlXPathSelector\n+        xxs_cls = XmlXPathSelector\n+    else:\n         skip = \"lxml not available\"\n \n-    @libxml2debug\n-    def test_selector_simple(self):\n-        \"\"\"Simple selector tests\"\"\"\n-        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n-        response = TextResponse(url=\"http://example.com\", body=body)\n-        xpath = HtmlXPathSelector(response)\n-\n-        xl = xpath.select('//input')\n-        self.assertEqual(2, len(xl))\n-        for x in xl:\n-            assert isinstance(x, HtmlXPathSelector)\n-\n-        self.assertEqual(xpath.select('//input').extract(),\n-                         [x.extract() for x in xpath.select('//input')])\n-\n-        self.assertEqual([x.extract() for x in xpath.select(\"//input[@name='a']/@name\")],\n-                         [u'a'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n-                         [u'12.0'])\n-\n-        self.assertEqual(xpath.select(\"concat('xpath', 'rules')\").extract(),\n-                         [u'xpathrules'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n-                         [u'12'])\n-\n     @libxml2debug\n     def test_selector_boolean_result(self):\n         body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n@@ -53,94 +29,6 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual(xs.select(\"//input[@name='a']/@name='a'\").extract(), [u'True'])\n         self.assertEqual(xs.select(\"//input[@name='a']/@name='n'\").extract(), [u'False'])\n \n-    @libxml2debug\n-    def test_selector_same_type(self):\n-        \"\"\"Test XPathSelector returning the same type in x() method\"\"\"\n-        text = '<p>test<p>'\n-        assert isinstance(XmlXPathSelector(text=text).select(\"//p\")[0],\n-                          XmlXPathSelector)\n-        assert isinstance(HtmlXPathSelector(text=text).select(\"//p\")[0], \n-                          HtmlXPathSelector)\n-\n-    @libxml2debug\n-    def test_selector_xml_html(self):\n-        \"\"\"Test that XML and HTML XPathSelector's behave differently\"\"\"\n-\n-        # some text which is parsed differently by XML and HTML flavors\n-        text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n-\n-        self.assertEqual(XmlXPathSelector(text=text).select(\"//div\").extract(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n-\n-        self.assertEqual(HtmlXPathSelector(text=text).select(\"//div\").extract(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n-\n-    @libxml2debug\n-    def test_selector_nested(self):\n-        \"\"\"Nested selector tests\"\"\"\n-        body = \"\"\"<body>\n-                    <div class='one'>\n-                      <ul>\n-                        <li>one</li><li>two</li>\n-                      </ul>\n-                    </div>\n-                    <div class='two'>\n-                      <ul>\n-                        <li>four</li><li>five</li><li>six</li>\n-                      </ul>\n-                    </div>\n-                  </body>\"\"\"\n-\n-        response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = HtmlXPathSelector(response)\n-\n-        divtwo = x.select('//div[@class=\"two\"]')\n-        self.assertEqual(divtwo.select(\"//li\").extract(),\n-                         [\"<li>one</li>\", \"<li>two</li>\", \"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\"./ul/li\").extract(),\n-                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\".//li\").extract(),\n-                         [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\"./li\").extract(),\n-                         [])\n-\n-    @libxml2debug\n-    def test_selector_re(self):\n-        body = \"\"\"<div>Name: Mary\n-                    <ul>\n-                      <li>Name: John</li>\n-                      <li>Age: 10</li>\n-                      <li>Name: Paul</li>\n-                      <li>Age: 20</li>\n-                    </ul>\n-                    Age: 20\n-                  </div>\n-\n-               \"\"\"\n-        response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = HtmlXPathSelector(response)\n-\n-        name_re = re.compile(\"Name: (\\w+)\")\n-        self.assertEqual(x.select(\"//ul/li\").re(name_re),\n-                         [\"John\", \"Paul\"])\n-        self.assertEqual(x.select(\"//ul/li\").re(\"Age: (\\d+)\"),\n-                         [\"10\", \"20\"])\n-\n-    @libxml2debug\n-    def test_selector_over_text(self):\n-        hxs = HtmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(hxs.extract(),\n-                         u'<html><body><root>lala</root></body></html>')\n-\n-        xxs = XmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(xxs.extract(),\n-                         u'<root>lala</root>')\n-\n-        xxs = XmlXPathSelector(text='<root>lala</root>')\n-        self.assertEqual(xxs.select('.').extract(),\n-                         [u'<root>lala</root>'])\n-\n-\n     @libxml2debug\n     def test_selector_namespaces_simple(self):\n         body = \"\"\"\n@@ -182,40 +70,6 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n         self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material/text()\").extract()[0], 'iron')\n \n-    @libxml2debug\n-    def test_selector_invalid_xpath(self):\n-        response = XmlResponse(url=\"http://example.com\", body=\"<html></html>\")\n-        x = HtmlXPathSelector(response)\n-        xpath = \"//test[@foo='bar]\"\n-        try:\n-            x.select(xpath)\n-        except ValueError, e:\n-            assert xpath in str(e), \"Exception message does not contain invalid xpath\"\n-        except Exception:\n-            raise AssertionError(\"A invalid XPath does not raise ValueError\")\n-        else:\n-            raise AssertionError(\"A invalid XPath does not raise an exception\")\n-\n-    @libxml2debug\n-    def test_http_header_encoding_precedence(self):\n-        # u'\\xa3'     = pound symbol in unicode\n-        # u'\\xc2\\xa3' = pound symbol in utf-8\n-        # u'\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n-\n-        meta = u'<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n-        head = u'<head>' + meta + u'</head>'\n-        body_content = u'<span id=\"blank\">\\xa3</span>'\n-        body = u'<body>' + body_content + u'</body>'\n-        html = u'<html>' + head + body + u'</html>'\n-        encoding = 'utf-8'\n-        html_utf8 = html.encode(encoding)\n-\n-        headers = {'Content-Type': ['text/html; charset=utf-8']}\n-        response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n-        x = HtmlXPathSelector(response)\n-        self.assertEquals(x.select(\"//span[@id='blank']/text()\").extract(),\n-                          [u'\\xa3'])\n-\n     # XXX: this test was disabled because lxml behaves inconsistently when\n     # handling null bytes between different 2.2.x versions, but it may be due\n     # to differences in libxml2 too. it's also unclear what should be the\n@@ -229,51 +83,3 @@ class XPathSelectorTestCase(unittest.TestCase):\n     #    xxs = XmlXPathSelector(text='<root>la\\x00la</root>')\n     #    self.assertEqual(xxs.extract(),\n     #                     u'<root>la</root>')\n-\n-    @libxml2debug\n-    def test_unquote(self):\n-        xmldoc = '\\n'.join((\n-            '<root>',\n-            '  lala',\n-            '  <node>',\n-            '    blabla&amp;more<!--comment-->a<b>test</b>oh',\n-            '    <![CDATA[lalalal&ppppp<b>PPPP</b>ppp&amp;la]]>',\n-            '  </node>',\n-            '  pff',\n-            '</root>'))\n-        xxs = XmlXPathSelector(text=xmldoc)\n-\n-        # this tests were commented out because they make no sense (pablo)\n-        #self.assertEqual(xxs.extract_unquoted(), u'')\n-        #self.assertEqual(xxs.select('/root').extract_unquoted(), [u''])\n-        #self.assertEqual(xxs.select('//*').extract_unquoted(), [u'', u'', u''])\n-\n-        self.assertEqual(xxs.select('/root/text()').extract_unquoted(), [\n-            u'lala',\n-            u'pff'])\n-\n-        self.assertEqual(xxs.select('//text()').extract_unquoted(), [\n-            u'lala',\n-            u'blabla&more',\n-            u'a',\n-            u'test',\n-            u'oh\\n    lalalal&ppppp<b>PPPP</b>ppp&amp;la',\n-            u'pff'])\n-\n-    @libxml2debug\n-    def test_empty_bodies(self):\n-        r1 = TextResponse('http://www.example.com', body='')\n-        hxs = HtmlXPathSelector(r1) # shouldn't raise error\n-        xxs = XmlXPathSelector(r1) # shouldn't raise error\n-\n-    @libxml2debug\n-    def test_weakref_slots(self):\n-        \"\"\"Check that classes are using slots and are weak-referenceable\"\"\"\n-        for cls in [XPathSelector, HtmlXPathSelector, XmlXPathSelector]:\n-            x = cls()\n-            weakref.ref(x)\n-            assert not hasattr(x, '__dict__'), \"%s does not use __slots__\" % \\\n-                x.__class__.__name__\n-\n-if __name__ == \"__main__\":\n-    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e625a8d56e765e3ef31971ac331b0e94e9bb003a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 94 | Files Changed: 3 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): -2/3 | Churn Δ: 150 | Churn Cumulative: 1044 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -52,6 +52,18 @@ class XPathSelectorTestCase(unittest.TestCase):\n         assert isinstance(self.hxs_cls(text=text).select(\"//p\")[0], \n                           self.hxs_cls)\n \n+    @libxml2debug\n+    def test_selector_boolean_result(self):\n+        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n+        response = TextResponse(url=\"http://example.com\", body=body)\n+        xs = self.hxs_cls(response)\n+        true = xs.select(\"//input[@name='a']/@name='a'\").extract()[0]\n+        false = xs.select(\"//input[@name='a']/@name='n'\").extract()[0]\n+\n+        # the actual result depends on the backend used\n+        assert true in [u'1', u'True'], true\n+        assert false in [u'0', u'False'], false\n+\n     @libxml2debug\n     def test_selector_xml_html(self):\n         \"\"\"Test that XML and HTML XPathSelector's behave differently\"\"\"\n@@ -94,6 +106,46 @@ class XPathSelectorTestCase(unittest.TestCase):\n         self.assertEqual(divtwo.select(\"./li\").extract(),\n                          [])\n \n+    @libxml2debug\n+    def test_selector_namespaces_simple(self):\n+        body = \"\"\"\n+        <test xmlns:somens=\"http://scrapy.org\">\n+           <somens:a id=\"foo\">take this</a>\n+           <a id=\"bar\">found</a>\n+        </test>\n+        \"\"\"\n+\n+        response = XmlResponse(url=\"http://example.com\", body=body)\n+        x = self.xxs_cls(response)\n+\n+        x.register_namespace(\"somens\", \"http://scrapy.org\")\n+        self.assertEqual(x.select(\"//somens:a/text()\").extract(),\n+                         [u'take this'])\n+\n+    @libxml2debug\n+    def test_selector_namespaces_multiple(self):\n+        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<BrowseNode xmlns=\"http://webservices.amazon.com/AWSECommerceService/2005-10-05\"\n+            xmlns:b=\"http://somens.com\"\n+            xmlns:p=\"http://www.scrapy.org/product\" >\n+    <b:Operation>hello</b:Operation>\n+    <TestTag b:att=\"value\"><Other>value</Other></TestTag>\n+    <p:SecondTestTag><material>iron</material><price>90</price><p:name>Dried Rose</p:name></p:SecondTestTag>\n+</BrowseNode>\n+        \"\"\"\n+        response = XmlResponse(url=\"http://example.com\", body=body)\n+        x = self.xxs_cls(response)\n+\n+        x.register_namespace(\"xmlns\", \"http://webservices.amazon.com/AWSECommerceService/2005-10-05\")\n+        x.register_namespace(\"p\", \"http://www.scrapy.org/product\")\n+        x.register_namespace(\"b\", \"http://somens.com\")\n+        self.assertEqual(len(x.select(\"//xmlns:TestTag\")), 1)\n+        self.assertEqual(x.select(\"//b:Operation/text()\").extract()[0], 'hello')\n+        self.assertEqual(x.select(\"//xmlns:TestTag/@b:att\").extract()[0], 'value')\n+        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:price/text()\").extract()[0], '90')\n+        self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n+        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material/text()\").extract()[0], 'iron')\n+\n     @libxml2debug\n     def test_selector_re(self):\n         body = \"\"\"<div>Name: Mary\n\n@@ -9,55 +9,14 @@ from scrapy.selector.libxml2sel import XmlXPathSelector, HtmlXPathSelector, \\\n     XPathSelector\n from scrapy.selector.document import Libxml2Document\n from scrapy.utils.test import libxml2debug\n-from scrapy.tests.test_selector import XPathSelectorTestCase\n+from scrapy.tests import test_selector\n \n-class XPathSelectorTestCase(XPathSelectorTestCase):\n+class Libxml2XPathSelectorTestCase(test_selector.XPathSelectorTestCase):\n \n     xs_cls = XPathSelector\n     hxs_cls = HtmlXPathSelector\n     xxs_cls = XmlXPathSelector\n \n-    @libxml2debug\n-    def test_selector_namespaces_simple(self):\n-        body = \"\"\"\n-        <test xmlns:somens=\"http://scrapy.org\">\n-           <somens:a id=\"foo\"/>\n-           <a id=\"bar\">found</a>\n-        </test>\n-        \"\"\"\n-\n-        response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = XmlXPathSelector(response)\n-        \n-        x.register_namespace(\"somens\", \"http://scrapy.org\")\n-        self.assertEqual(x.select(\"//somens:a\").extract(), \n-                         ['<somens:a id=\"foo\"/>'])\n-\n-\n-    @libxml2debug\n-    def test_selector_namespaces_multiple(self):\n-        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<BrowseNode xmlns=\"http://webservices.amazon.com/AWSECommerceService/2005-10-05\"\n-            xmlns:b=\"http://somens.com\"\n-            xmlns:p=\"http://www.scrapy.org/product\" >\n-    <b:Operation>hello</b:Operation>\n-    <TestTag b:att=\"value\"><Other>value</Other></TestTag>\n-    <p:SecondTestTag><material/><price>90</price><p:name>Dried Rose</p:name></p:SecondTestTag>\n-</BrowseNode>\n-        \"\"\"\n-        response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = XmlXPathSelector(response)\n-\n-        x.register_namespace(\"xmlns\", \"http://webservices.amazon.com/AWSECommerceService/2005-10-05\")\n-        x.register_namespace(\"p\", \"http://www.scrapy.org/product\")\n-        x.register_namespace(\"b\", \"http://somens.com\")\n-        self.assertEqual(len(x.select(\"//xmlns:TestTag\")), 1)\n-        self.assertEqual(x.select(\"//b:Operation/text()\").extract()[0], 'hello')\n-        self.assertEqual(x.select(\"//xmlns:TestTag/@b:att\").extract()[0], 'value')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:price/text()\").extract()[0], '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material\").extract()[0], '<material/>')\n-\n     @libxml2debug\n     def test_null_bytes(self):\n         hxs = HtmlXPathSelector(text='<root>la\\x00la</root>')\n\n@@ -10,9 +10,9 @@ try:\n except ImportError:\n     has_lxml = False\n from scrapy.utils.test import libxml2debug\n-from scrapy.tests.test_selector import XPathSelectorTestCase\n+from scrapy.tests import test_selector\n \n-class XPathSelectorTestCase(XPathSelectorTestCase):\n+class LxmlXPathSelectorTestCase(test_selector.XPathSelectorTestCase):\n \n     if has_lxml:\n         xs_cls = XPathSelector\n@@ -21,55 +21,6 @@ class XPathSelectorTestCase(XPathSelectorTestCase):\n     else:\n         skip = \"lxml not available\"\n \n-    @libxml2debug\n-    def test_selector_boolean_result(self):\n-        body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n-        response = TextResponse(url=\"http://example.com\", body=body)\n-        xs = HtmlXPathSelector(response)\n-        self.assertEqual(xs.select(\"//input[@name='a']/@name='a'\").extract(), [u'True'])\n-        self.assertEqual(xs.select(\"//input[@name='a']/@name='n'\").extract(), [u'False'])\n-\n-    @libxml2debug\n-    def test_selector_namespaces_simple(self):\n-        body = \"\"\"\n-        <test xmlns:somens=\"http://scrapy.org\">\n-           <somens:a id=\"foo\">take this</a>\n-           <a id=\"bar\">found</a>\n-        </test>\n-        \"\"\"\n-\n-        response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = XmlXPathSelector(response)\n-        \n-        x.register_namespace(\"somens\", \"http://scrapy.org\")\n-        self.assertEqual(x.select(\"//somens:a/text()\").extract(),\n-                         [u'take this'])\n-\n-\n-    @libxml2debug\n-    def test_selector_namespaces_multiple(self):\n-        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<BrowseNode xmlns=\"http://webservices.amazon.com/AWSECommerceService/2005-10-05\"\n-            xmlns:b=\"http://somens.com\"\n-            xmlns:p=\"http://www.scrapy.org/product\" >\n-    <b:Operation>hello</b:Operation>\n-    <TestTag b:att=\"value\"><Other>value</Other></TestTag>\n-    <p:SecondTestTag><material>iron</material><price>90</price><p:name>Dried Rose</p:name></p:SecondTestTag>\n-</BrowseNode>\n-        \"\"\"\n-        response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = XmlXPathSelector(response)\n-\n-        x.register_namespace(\"xmlns\", \"http://webservices.amazon.com/AWSECommerceService/2005-10-05\")\n-        x.register_namespace(\"p\", \"http://www.scrapy.org/product\")\n-        x.register_namespace(\"b\", \"http://somens.com\")\n-        self.assertEqual(len(x.select(\"//xmlns:TestTag\")), 1)\n-        self.assertEqual(x.select(\"//b:Operation/text()\").extract()[0], 'hello')\n-        self.assertEqual(x.select(\"//xmlns:TestTag/@b:att\").extract()[0], 'value')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:price/text()\").extract()[0], '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material/text()\").extract()[0], 'iron')\n-\n     # XXX: this test was disabled because lxml behaves inconsistently when\n     # handling null bytes between different 2.2.x versions, but it may be due\n     # to differences in libxml2 too. it's also unclear what should be the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#6f4be21d4c444e66b201532226993af6e382bce5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 114 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,5 @@\n \"\"\"\n-This is a middleware to respect robots.txt policies. To active it you must\n+This is a middleware to respect robots.txt policies. To activate it you must\n enable this middleware and enable the ROBOTSTXT_OBEY setting.\n \n \"\"\"\n@@ -8,7 +8,7 @@ import robotparser\n \n from scrapy.xlib.pydispatch import dispatcher\n \n-from scrapy import signals\n+from scrapy import signals, log\n from scrapy.project import crawler\n from scrapy.exceptions import NotConfigured, IgnoreRequest\n from scrapy.http import Request\n@@ -25,7 +25,6 @@ class RobotsTxtMiddleware(object):\n         self._parsers = {}\n         self._spider_netlocs = {}\n         self._useragents = {}\n-        self._pending = {}\n         dispatcher.connect(self.spider_opened, signals.spider_opened)\n         dispatcher.connect(self.spider_closed, signals.spider_closed)\n \n@@ -33,7 +32,8 @@ class RobotsTxtMiddleware(object):\n         useragent = self._useragents[spider]\n         rp = self.robot_parser(request, spider)\n         if rp and not rp.can_fetch(useragent, request.url):\n-            raise IgnoreRequest(\"URL forbidden by robots.txt: %s\" % request.url)\n+            log.msg(\"Forbidden by robots.txt: %s\" % request, log.DEBUG)\n+            raise IgnoreRequest\n \n     def robot_parser(self, request, spider):\n         url = urlparse_cached(request)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bc2d78406c712187c77e5b9333986529d7ac7a63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 339 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,7 +20,13 @@ class MediaPipeline(object):\n \n     def __init__(self, download_func=None):\n         self.spiderinfo = {}\n-        self._download_func = download_func or self._default_download_func()\n+        self._cached_download_func = download_func\n+\n+    @property\n+    def _download_func(self):\n+        if self._cached_download_func is None:\n+            self._cached_download_func = self._default_download_func()\n+        return self._cached_download_func\n \n     def _default_download_func(self):\n         from scrapy.project import crawler\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7f646541c3f9ca47e66ed3b71f981287dbcf812c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 29 | Churn Cumulative: 123 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,6 +4,7 @@ MemoryDebugger extension\n See documentation in docs/topics/extensions.rst\n \"\"\"\n \n+import os\n import gc\n import socket\n \n@@ -12,6 +13,7 @@ from scrapy.xlib.pydispatch import dispatcher\n from scrapy import signals\n from scrapy.exceptions import NotConfigured\n from scrapy.mail import MailSender\n+from scrapy.utils.trackref import format_live_refs\n from scrapy.conf import settings\n from scrapy import log\n \n@@ -22,7 +24,7 @@ class MemoryDebugger(object):\n             import libxml2\n             self.libxml2 = libxml2\n         except ImportError:\n-            raise NotConfigured\n+            self.libxml2 = None\n         if not settings.getbool('MEMDEBUG_ENABLED'):\n             raise NotConfigured\n \n@@ -33,6 +35,7 @@ class MemoryDebugger(object):\n         dispatcher.connect(self.engine_stopped, signals.engine_stopped)\n \n     def engine_started(self):\n+        if self.libxml2:\n             self.libxml2.debugMemory(1)\n \n     def engine_stopped(self):\n@@ -41,11 +44,12 @@ class MemoryDebugger(object):\n         self.log_or_send_report(report)\n \n     def collect_figures(self):\n-        self.libxml2.cleanupParser()\n         gc.collect()\n \n         figures = []\n         figures.append((\"Objects in gc.garbage\", len(gc.garbage), \"\"))\n+        if self.libxml2:\n+            self.libxml2.cleanupParser()\n             figures.append((\"libxml2 memory leak\", self.libxml2.debugMemory(1), \"bytes\"))\n         return figures\n \n@@ -54,6 +58,9 @@ class MemoryDebugger(object):\n         s += \"SCRAPY MEMORY DEBUGGER RESULTS\\n\\n\"\n         for f in figures:\n             s += \"%-30s : %d %s\\n\" % f\n+        if settings.getbool('TRACK_REFS'):\n+            s += os.linesep\n+            s += format_live_refs()\n         return s\n \n     def log_or_send_report(self, report):\n\n@@ -10,7 +10,7 @@ and no performance penalty at all when disabled (as object_ref becomes just an\n alias to object in that case).\n \"\"\"\n \n-import weakref\n+import weakref, os\n from collections import defaultdict\n from time import time\n from operator import itemgetter\n@@ -34,12 +34,10 @@ class object_ref(object):\n if not settings.getbool('TRACK_REFS'):\n     object_ref = object\n \n-def print_live_refs(ignore=NoneType):\n+def format_live_refs(ignore=NoneType):\n     if object_ref is object:\n-        print \"The trackref module is disabled. Use TRACK_REFS setting to enable it.\"\n-        return\n-    print \"Live References\"\n-    print\n+        return \"The trackref module is disabled. Use TRACK_REFS setting to enable it.\"\n+    s = \"Live References\" + os.linesep + os.linesep\n     now = time()\n     for cls, wdict in live_refs.iteritems():\n         if not wdict:\n@@ -47,8 +45,12 @@ def print_live_refs(ignore=NoneType):\n         if issubclass(cls, ignore):\n             continue\n         oldest = min(wdict.itervalues())\n-        print \"%-30s %6d   oldest: %ds ago\" % (cls.__name__, len(wdict), \\\n-            now-oldest)\n+        s += \"%-30s %6d   oldest: %ds ago\" % (cls.__name__, len(wdict), \\\n+            now-oldest) + os.linesep\n+    return s\n+\n+def print_live_refs(*a, **kw):\n+    print format_live_refs(*a, **kw)\n \n def get_oldest(class_name):\n     for cls, wdict in live_refs.iteritems():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
