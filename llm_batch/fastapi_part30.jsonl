{"custom_id": "fastapi#b20b2218cd7fde2114ee1cedf367bdba04df0381", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 143 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 17 | Complexity Δ (Sum/Max): 17/16 | Churn Δ: 147 | Churn Cumulative: 1310 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 8 | DMM Complexity: 0.9605263157894737\n\nDIFF:\n@@ -220,16 +220,18 @@ def get_dependant(\n             continue\n         param_field = get_param_field(param=param, default_schema=params.Query)\n         if param_name in path_param_names:\n-            assert param.default == param.empty or isinstance(\n-                param.default, params.Path\n-            ), \"Path params must have no defaults or use Path(...)\"\n             assert is_scalar_field(\n                 field=param_field\n             ), f\"Path params must be of one of the supported types\"\n+            if isinstance(param.default, params.Path):\n+                ignore_default = False\n+            else:\n+                ignore_default = True\n             param_field = get_param_field(\n                 param=param,\n                 default_schema=params.Path,\n                 force_type=params.ParamTypes.path,\n+                ignore_default=ignore_default,\n             )\n             add_param_to_fields(field=param_field, dependant=dependant)\n         elif is_scalar_field(field=param_field):\n@@ -272,10 +274,11 @@ def get_param_field(\n     param: inspect.Parameter,\n     default_schema: Type[params.Param] = params.Param,\n     force_type: params.ParamTypes = None,\n+    ignore_default: bool = False,\n ) -> Field:\n     default_value = Required\n     had_schema = False\n-    if not param.default == param.empty:\n+    if not param.default == param.empty and ignore_default is False:\n         default_value = param.default\n     if isinstance(default_value, Schema):\n         had_schema = True\n\n@@ -0,0 +1,136 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+user_router = APIRouter()\n+item_router = APIRouter()\n+\n+\n+@user_router.get(\"/\")\n+def get_users():\n+    return [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]\n+\n+\n+@user_router.get(\"/{user_id}\")\n+def get_user(user_id: str):\n+    return {\"user_id\": user_id}\n+\n+\n+@item_router.get(\"/\")\n+def get_items(user_id: str = None):\n+    if user_id is None:\n+        return [{\"item_id\": \"i1\", \"user_id\": \"u1\"}, {\"item_id\": \"i2\", \"user_id\": \"u2\"}]\n+    else:\n+        return [{\"item_id\": \"i2\", \"user_id\": user_id}]\n+\n+\n+@item_router.get(\"/{item_id}\")\n+def get_item(item_id: str, user_id: str = None):\n+    if user_id is None:\n+        return {\"item_id\": item_id}\n+    else:\n+        return {\"item_id\": item_id, \"user_id\": user_id}\n+\n+\n+app.include_router(user_router, prefix=\"/users\")\n+app.include_router(item_router, prefix=\"/items\")\n+\n+app.include_router(item_router, prefix=\"/users/{user_id}/items\")\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_get_users():\n+    \"\"\"Check that /users returns expected data\"\"\"\n+    response = client.get(\"/users\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]\n+\n+\n+def test_get_user():\n+    \"\"\"Check that /users/{user_id} returns expected data\"\"\"\n+    response = client.get(\"/users/abc123\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"user_id\": \"abc123\"}\n+\n+\n+def test_get_items_1():\n+    \"\"\"Check that /items returns expected data\"\"\"\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200\n+    assert response.json() == [\n+        {\"item_id\": \"i1\", \"user_id\": \"u1\"},\n+        {\"item_id\": \"i2\", \"user_id\": \"u2\"},\n+    ]\n+\n+\n+def test_get_items_2():\n+    \"\"\"Check that /items returns expected data with user_id specified\"\"\"\n+    response = client.get(\"/items?user_id=abc123\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n+\n+\n+def test_get_item_1():\n+    \"\"\"Check that /items/{item_id} returns expected data\"\"\"\n+    response = client.get(\"/items/item01\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"item01\"}\n+\n+\n+def test_get_item_2():\n+    \"\"\"Check that /items/{item_id} returns expected data with user_id specified\"\"\"\n+    response = client.get(\"/items/item01?user_id=abc123\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n+\n+\n+def test_get_users_items():\n+    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n+    response = client.get(\"/users/abc123/items\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n+\n+\n+def test_get_users_item():\n+    \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n+    response = client.get(\"/users/abc123/items/item01\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n+\n+\n+def test_schema_1():\n+    \"\"\"Check that the user_id is a required path parameter under /users\"\"\"\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    r = response.json()\n+\n+    d = {\n+        \"required\": True,\n+        \"schema\": {\"title\": \"User_Id\", \"type\": \"string\"},\n+        \"name\": \"user_id\",\n+        \"in\": \"path\",\n+    }\n+\n+    assert d in r[\"paths\"][\"/users/{user_id}\"][\"get\"][\"parameters\"]\n+    assert d in r[\"paths\"][\"/users/{user_id}/items/\"][\"get\"][\"parameters\"]\n+\n+\n+def test_schema_2():\n+    \"\"\"Check that the user_id is an optional query parameter under /items\"\"\"\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    r = response.json()\n+\n+    d = {\n+        \"required\": False,\n+        \"schema\": {\"title\": \"User_Id\", \"type\": \"string\"},\n+        \"name\": \"user_id\",\n+        \"in\": \"query\",\n+    }\n+\n+    assert d in r[\"paths\"][\"/items/{item_id}\"][\"get\"][\"parameters\"]\n+    assert d in r[\"paths\"][\"/items/\"][\"get\"][\"parameters\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#78272ac1f32bce5c972633006d301d16557eee9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 187 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.38.1\"\n+__version__ = \"0.39.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8505b716af3879c18bf47f9d57a07aae94b58bcf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 43 | Churn Cumulative: 2223 | Contributors (this commit): 12 | Commits (past 90d): 6 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -37,6 +37,7 @@ class FastAPI(Starlette):\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n         swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n+        swagger_ui_init_oauth: Optional[dict] = None,\n         **extra: Dict[str, Any],\n     ) -> None:\n         self.default_response_class = default_response_class\n@@ -57,6 +58,7 @@ class FastAPI(Starlette):\n         self.docs_url = docs_url\n         self.redoc_url = redoc_url\n         self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n+        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n         self.extra = extra\n         self.dependency_overrides: Dict[Callable, Callable] = {}\n \n@@ -98,6 +100,7 @@ class FastAPI(Starlette):\n                     openapi_url=openapi_url,\n                     title=self.title + \" - Swagger UI\",\n                     oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url,\n+                    init_oauth=self.swagger_ui_init_oauth,\n                 )\n \n             self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n\n@@ -1,5 +1,7 @@\n+import json\n from typing import Optional\n \n+from fastapi.encoders import jsonable_encoder\n from starlette.responses import HTMLResponse\n \n \n@@ -11,6 +13,7 @@ def get_swagger_ui_html(\n     swagger_css_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\",\n     swagger_favicon_url: str = \"https://fastapi.tiangolo.com/img/favicon.png\",\n     oauth2_redirect_url: Optional[str] = None,\n+    init_oauth: Optional[dict] = None,\n ) -> HTMLResponse:\n \n     html = f\"\"\"\n@@ -42,7 +45,14 @@ def get_swagger_ui_html(\n         ],\n         layout: \"BaseLayout\",\n         deepLinking: true\n-    })\n+    })\"\"\"\n+\n+    if init_oauth:\n+        html += f\"\"\"\n+        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n+        \"\"\"\n+\n+    html += \"\"\"\n     </script>\n     </body>\n     </html>\n\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+swagger_ui_init_oauth = {\"clientId\": \"the-foo-clients\", \"appName\": \"The Predendapp\"}\n+\n+app = FastAPI(swagger_ui_init_oauth=swagger_ui_init_oauth)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items():\n+    return {\"id\": \"foo\"}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_swagger_ui():\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200\n+    print(response.text)\n+    assert f\"ui.initOAuth\" in response.text\n+    assert f'\"appName\": \"The Predendapp\"' in response.text\n+    assert f'\"clientId\": \"the-foo-clients\"' in response.text\n+\n+\n+def test_response():\n+    response = client.get(\"/items/\")\n+    assert response.json() == {\"id\": \"foo\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3dbbecdd16ec43b4f4037e336acb04a7b27bf8df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 854 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -225,7 +225,7 @@ def get_openapi_path(\n             if (all_route_params or route.body_field) and not any(\n                 [\n                     status in operation[\"responses\"]\n-                    for status in [http422, \"4xx\", \"default\"]\n+                    for status in [http422, \"4XX\", \"default\"]\n                 ]\n             ):\n                 operation[\"responses\"][http422] = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4cea311e6ef112edfa1e42fde2f63b6ab2d7e413", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 281 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ def get_swagger_ui_html(\n ) -> HTMLResponse:\n \n     html = f\"\"\"\n-    <! doctype html>\n+    <!DOCTYPE html>\n     <html>\n     <head>\n     <link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\">\n@@ -104,7 +104,7 @@ def get_redoc_html(\n \n def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n     html = \"\"\"\n-    <!doctype html>\n+    <!DOCTYPE html>\n     <html lang=\"en-US\">\n     <body onload=\"run()\">\n     </body>\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c7dc26b7609f63d6f056b75f1050ab69a9356ef5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 145 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 145 | Churn Cumulative: 3190 | Contributors (this commit): 12 | Commits (past 90d): 11 | Contributors (cumulative): 14 | DMM Complexity: 0.9411764705882353\n\nDIFF:\n@@ -0,0 +1,30 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \\f\n+    :param item: User input.\n+    \"\"\"\n+    return item\n\n@@ -246,6 +246,9 @@ class APIRoute(routing.Route):\n             self.dependencies = []\n         self.summary = summary\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n+        # if a \"form feed\" character (page break) is found in the description text,\n+        # truncate description text to the content preceding the first \"form feed\"\n+        self.description = self.description.split(\"\\f\")[0]\n         self.response_description = response_description\n         self.responses = responses or {}\n         response_fields = {}\n\n@@ -0,0 +1,112 @@\n+from starlette.testclient import TestClient\n+\n+from path_operation_advanced_configuration.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create an item\",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\\n\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"uniqueItems\": True,\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_query_params_str_validations():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5fd83c5fa486687c495a0cab53ebccd948799f4a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 856 | Contributors (this commit): 10 | Commits (past 90d): 8 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -283,7 +283,7 @@ def get_openapi(\n                 if path_definitions:\n                     definitions.update(path_definitions)\n     if definitions:\n-        components.setdefault(\"schemas\", {}).update(definitions)\n+        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n     if components:\n         output[\"components\"] = components\n     output[\"paths\"] = paths\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fdb6d43e103bcf7a7325d796e37c9435c9460e4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 189 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.39.0\"\n+__version__ = \"0.40.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dd963511d699b463b416408a0ad705b3dda0d067", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 118 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 119 | Churn Cumulative: 3167 | Contributors (this commit): 12 | Commits (past 90d): 11 | Contributors (cumulative): 13 | DMM Complexity: 0.9523809523809523\n\nDIFF:\n@@ -348,8 +348,10 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = None,\n         name: str = None,\n+        route_class_override: Optional[Type[APIRoute]] = None,\n     ) -> None:\n-        route = self.route_class(\n+        route_class = route_class_override or self.route_class\n+        route = route_class(\n             path,\n             endpoint=endpoint,\n             response_model=response_model,\n@@ -487,6 +489,7 @@ class APIRouter(routing.Router):\n                     include_in_schema=route.include_in_schema,\n                     response_class=route.response_class or default_response_class,\n                     name=route.name,\n+                    route_class_override=type(route),\n                 )\n             elif isinstance(route, routing.Route):\n                 self.add_route(\n\n@@ -0,0 +1,114 @@\n+import pytest\n+from fastapi import APIRouter, FastAPI\n+from fastapi.routing import APIRoute\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class APIRouteA(APIRoute):\n+    x_type = \"A\"\n+\n+\n+class APIRouteB(APIRoute):\n+    x_type = \"B\"\n+\n+\n+class APIRouteC(APIRoute):\n+    x_type = \"C\"\n+\n+\n+router_a = APIRouter(route_class=APIRouteA)\n+router_b = APIRouter(route_class=APIRouteB)\n+router_c = APIRouter(route_class=APIRouteC)\n+\n+\n+@router_a.get(\"/\")\n+def get_a():\n+    return {\"msg\": \"A\"}\n+\n+\n+@router_b.get(\"/\")\n+def get_b():\n+    return {\"msg\": \"B\"}\n+\n+\n+@router_c.get(\"/\")\n+def get_c():\n+    return {\"msg\": \"C\"}\n+\n+\n+router_b.include_router(router=router_c, prefix=\"/c\")\n+router_a.include_router(router=router_b, prefix=\"/b\")\n+app.include_router(router=router_a, prefix=\"/a\")\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get A\",\n+                \"operationId\": \"get_a_a__get\",\n+            }\n+        },\n+        \"/a/b/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get B\",\n+                \"operationId\": \"get_b_a_b__get\",\n+            }\n+        },\n+        \"/a/b/c/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get C\",\n+                \"operationId\": \"get_c_a_b_c__get\",\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/a\", 200, {\"msg\": \"A\"}),\n+        (\"/a/b\", 200, {\"msg\": \"B\"}),\n+        (\"/a/b/c\", 200, {\"msg\": \"C\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_route_classes():\n+    routes = {}\n+    r: APIRoute\n+    for r in app.router.routes:\n+        routes[r.path] = r\n+    assert routes[\"/a/\"].x_type == \"A\"\n+    assert routes[\"/a/b/\"].x_type == \"B\"\n+    assert routes[\"/a/b/c/\"].x_type == \"C\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8c3ef76139590e0478e799375ec4c41703ea9f77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 193 | Lines Deleted: 4 | Files Changed: 8 | Hunks: 9 | Methods Changed: 22 | Complexity Δ (Sum/Max): 23/6 | Churn Δ: 197 | Churn Cumulative: 3250 | Contributors (this commit): 12 | Commits (past 90d): 18 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,37 @@\n+import gzip\n+from typing import Callable, List\n+\n+from fastapi import Body, FastAPI\n+from fastapi.routing import APIRoute\n+from starlette.requests import Request\n+from starlette.responses import Response\n+\n+\n+class GzipRequest(Request):\n+    async def body(self) -> bytes:\n+        if not hasattr(self, \"_body\"):\n+            body = await super().body()\n+            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n+                body = gzip.decompress(body)\n+            self._body = body\n+        return self._body\n+\n+\n+class GzipRoute(APIRoute):\n+    def get_route_handler(self) -> Callable:\n+        original_route_handler = super().get_route_handler()\n+\n+        async def custom_route_handler(request: Request) -> Response:\n+            request = GzipRequest(request.scope, request.receive)\n+            return await original_route_handler(request)\n+\n+        return custom_route_handler\n+\n+\n+app = FastAPI()\n+app.router.route_class = GzipRoute\n+\n+\n+@app.post(\"/sum\")\n+async def sum_numbers(numbers: List[int] = Body(...)):\n+    return {\"sum\": sum(numbers)}\n\n@@ -0,0 +1,31 @@\n+from typing import Callable, List\n+\n+from fastapi import Body, FastAPI, HTTPException\n+from fastapi.exceptions import RequestValidationError\n+from fastapi.routing import APIRoute\n+from starlette.requests import Request\n+from starlette.responses import Response\n+\n+\n+class ValidationErrorLoggingRoute(APIRoute):\n+    def get_route_handler(self) -> Callable:\n+        original_route_handler = super().get_route_handler()\n+\n+        async def custom_route_handler(request: Request) -> Response:\n+            try:\n+                return await original_route_handler(request)\n+            except RequestValidationError as exc:\n+                body = await request.body()\n+                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n+                raise HTTPException(status_code=422, detail=detail)\n+\n+        return custom_route_handler\n+\n+\n+app = FastAPI()\n+app.router.route_class = ValidationErrorLoggingRoute\n+\n+\n+@app.post(\"/\")\n+async def sum_numbers(numbers: List[int] = Body(...)):\n+    return sum(numbers)\n\n@@ -0,0 +1,41 @@\n+import time\n+from typing import Callable\n+\n+from fastapi import APIRouter, FastAPI\n+from fastapi.routing import APIRoute\n+from starlette.requests import Request\n+from starlette.responses import Response\n+\n+\n+class TimedRoute(APIRoute):\n+    def get_route_handler(self) -> Callable:\n+        original_route_handler = super().get_route_handler()\n+\n+        async def custom_route_handler(request: Request) -> Response:\n+            before = time.time()\n+            response: Response = await original_route_handler(request)\n+            duration = time.time() - before\n+            response.headers[\"X-Response-Time\"] = str(duration)\n+            print(f\"route duration: {duration}\")\n+            print(f\"route response: {response}\")\n+            print(f\"route response headers: {response.headers}\")\n+            return response\n+\n+        return custom_route_handler\n+\n+\n+app = FastAPI()\n+router = APIRouter(route_class=TimedRoute)\n+\n+\n+@app.get(\"/\")\n+async def not_timed():\n+    return {\"message\": \"Not timed\"}\n+\n+\n+@router.get(\"/timed\")\n+async def timed():\n+    return {\"message\": \"It's the time of my life\"}\n+\n+\n+app.include_router(router)\n\n@@ -65,7 +65,7 @@ def serialize_response(\n         return jsonable_encoder(response)\n \n \n-def get_app(\n+def get_request_handler(\n     dependant: Dependant,\n     body_field: Field = None,\n     status_code: int = 200,\n@@ -294,8 +294,10 @@ class APIRoute(routing.Route):\n             )\n         self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n         self.dependency_overrides_provider = dependency_overrides_provider\n-        self.app = request_response(\n-            get_app(\n+        self.app = request_response(self.get_route_handler())\n+\n+    def get_route_handler(self) -> Callable:\n+        return get_request_handler(\n             dependant=self.dependant,\n             body_field=self.body_field,\n             status_code=self.status_code,\n@@ -307,7 +309,6 @@ class APIRoute(routing.Route):\n             response_model_skip_defaults=self.response_model_skip_defaults,\n             dependency_overrides_provider=self.dependency_overrides_provider,\n         )\n-        )\n \n \n class APIRouter(routing.Router):\n\n\n@@ -0,0 +1,34 @@\n+import gzip\n+import json\n+\n+import pytest\n+from starlette.requests import Request\n+from starlette.testclient import TestClient\n+\n+from custom_request_and_route.tutorial001 import app\n+\n+\n+@app.get(\"/check-class\")\n+async def check_gzip_request(request: Request):\n+    return {\"request_class\": type(request).__name__}\n+\n+\n+client = TestClient(app)\n+\n+\n+@pytest.mark.parametrize(\"compress\", [True, False])\n+def test_gzip_request(compress):\n+    n = 1000\n+    headers = {}\n+    body = [1] * n\n+    data = json.dumps(body).encode()\n+    if compress:\n+        data = gzip.compress(data)\n+        headers[\"Content-Encoding\"] = \"gzip\"\n+    response = client.post(\"/sum\", data=data, headers=headers)\n+    assert response.json() == {\"sum\": n}\n+\n+\n+def test_request_class():\n+    response = client.get(\"/check-class\")\n+    assert response.json() == {\"request_class\": \"GzipRequest\"}\n\n@@ -0,0 +1,27 @@\n+from starlette.testclient import TestClient\n+\n+from custom_request_and_route.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_endpoint_works():\n+    response = client.post(\"/\", json=[1, 2, 3])\n+    assert response.json() == 6\n+\n+\n+def test_exception_handler_body_access():\n+    response = client.post(\"/\", json={\"numbers\": [1, 2, 3]})\n+\n+    assert response.json() == {\n+        \"detail\": {\n+            \"body\": '{\"numbers\": [1, 2, 3]}',\n+            \"errors\": [\n+                {\n+                    \"loc\": [\"body\", \"numbers\"],\n+                    \"msg\": \"value is not a valid list\",\n+                    \"type\": \"type_error.list\",\n+                }\n+            ],\n+        }\n+    }\n\n@@ -0,0 +1,18 @@\n+from starlette.testclient import TestClient\n+\n+from custom_request_and_route.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_get():\n+    response = client.get(\"/\")\n+    assert response.json() == {\"message\": \"Not timed\"}\n+    assert \"X-Response-Time\" not in response.headers\n+\n+\n+def test_get_timed():\n+    response = client.get(\"/timed\")\n+    assert response.json() == {\"message\": \"It's the time of my life\"}\n+    assert \"X-Response-Time\" in response.headers\n+    assert float(response.headers[\"X-Response-Time\"]) > 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6c7da43e517afbc4b521429c7908ec3a335bc473", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1920 | Contributors (this commit): 11 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,7 @@ from fastapi.openapi.docs import (\n from fastapi.openapi.utils import get_openapi\n from fastapi.params import Depends\n from starlette.applications import Starlette\n+from starlette.datastructures import State\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n from starlette.middleware.errors import ServerErrorMiddleware\n from starlette.requests import Request\n@@ -42,6 +43,7 @@ class FastAPI(Starlette):\n     ) -> None:\n         self.default_response_class = default_response_class\n         self._debug = debug\n+        self.state = State()\n         self.router: routing.APIRouter = routing.APIRouter(\n             routes, dependency_overrides_provider=self\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5592fa0f6f6b9c9b3ae774d80adb8163fcdedfdf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 191 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.40.0\"\n+__version__ = \"0.41.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3f9f4a0f8f7f5db50fbdc3157fe692cf4e68e13f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1001 | Lines Deleted: 47 | Files Changed: 14 | Hunks: 31 | Methods Changed: 104 | Complexity Δ (Sum/Max): 108/51 | Churn Δ: 1048 | Churn Cumulative: 4584 | Contributors (this commit): 15 | Commits (past 90d): 23 | Contributors (cumulative): 30 | DMM Complexity: 0.9949109414758269\n\nDIFF:\n@@ -1,21 +1,6 @@\n-from fastapi import Depends, FastAPI\n-\n-app = FastAPI()\n-\n-\n-class FixedContentQueryChecker:\n-    def __init__(self, fixed_content: str):\n-        self.fixed_content = fixed_content\n-\n-    def __call__(self, q: str = \"\"):\n-        if q:\n-            return self.fixed_content in q\n-        return False\n-\n-\n-checker = FixedContentQueryChecker(\"bar\")\n-\n-\n-@app.get(\"/query-checker/\")\n-async def read_query_check(fixed_content_included: bool = Depends(checker)):\n-    return {\"fixed_content_in_query\": fixed_content_included}\n+async def get_db():\n+    db = DBSession()\n+    try:\n+        yield db\n+    finally:\n+        db.close()\n\n@@ -0,0 +1,25 @@\n+from fastapi import Depends\n+\n+\n+async def dependency_a():\n+    dep_a = generate_dep_a()\n+    try:\n+        yield dep_a\n+    finally:\n+        dep_a.close()\n+\n+\n+async def dependency_b(dep_a=Depends(dependency_a)):\n+    dep_b = generate_dep_b()\n+    try:\n+        yield dep_b\n+    finally:\n+        dep_b.close(dep_a)\n+\n+\n+async def dependency_c(dep_b=Depends(dependency_b)):\n+    dep_c = generate_dep_c()\n+    try:\n+        yield dep_c\n+    finally:\n+        dep_c.close(dep_b)\n\n@@ -0,0 +1,25 @@\n+from fastapi import Depends\n+\n+\n+async def dependency_a():\n+    dep_a = generate_dep_a()\n+    try:\n+        yield dep_a\n+    finally:\n+        dep_a.close()\n+\n+\n+async def dependency_b(dep_a=Depends(dependency_a)):\n+    dep_b = generate_dep_b()\n+    try:\n+        yield dep_b\n+    finally:\n+        dep_b.close(dep_a)\n+\n+\n+async def dependency_c(dep_b=Depends(dependency_b)):\n+    dep_c = generate_dep_c()\n+    try:\n+        yield dep_c\n+    finally:\n+        dep_c.close(dep_b)\n\n@@ -0,0 +1,14 @@\n+class MySuperContextManager:\n+    def __init__(self):\n+        self.db = DBSession()\n+\n+    def __enter__(self):\n+        return self.db\n+\n+    def __exit__(self, exc_type, exc_value, traceback):\n+        self.db.close()\n+\n+\n+async def get_db():\n+    with MySuperContextManager() as db:\n+        yield db\n\n@@ -0,0 +1,21 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+class FixedContentQueryChecker:\n+    def __init__(self, fixed_content: str):\n+        self.fixed_content = fixed_content\n+\n+    def __call__(self, q: str = \"\"):\n+        if q:\n+            return self.fixed_content in q\n+        return False\n+\n+\n+checker = FixedContentQueryChecker(\"bar\")\n+\n+\n+@app.get(\"/query-checker/\")\n+async def read_query_check(fixed_content_included: bool = Depends(checker)):\n+    return {\"fixed_content_in_query\": fixed_content_included}\n\n@@ -0,0 +1,64 @@\n+from typing import List\n+\n+from fastapi import Depends, FastAPI, HTTPException\n+from sqlalchemy.orm import Session\n+from starlette.requests import Request\n+from starlette.responses import Response\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+@app.middleware(\"http\")\n+async def db_session_middleware(request: Request, call_next):\n+    response = Response(\"Internal server error\", status_code=500)\n+    try:\n+        request.state.db = SessionLocal()\n+        response = await call_next(request)\n+    finally:\n+        request.state.db.close()\n+    return response\n+\n+\n+# Dependency\n+def get_db(request: Request):\n+    return request.state.db\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=List[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=List[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -2,8 +2,6 @@ from typing import List\n \n from fastapi import Depends, FastAPI, HTTPException\n from sqlalchemy.orm import Session\n-from starlette.requests import Request\n-from starlette.responses import Response\n \n from . import crud, models, schemas\n from .database import SessionLocal, engine\n@@ -13,20 +11,13 @@ models.Base.metadata.create_all(bind=engine)\n app = FastAPI()\n \n \n-@app.middleware(\"http\")\n-async def db_session_middleware(request: Request, call_next):\n-    response = Response(\"Internal server error\", status_code=500)\n-    try:\n-        request.state.db = SessionLocal()\n-        response = await call_next(request)\n-    finally:\n-        request.state.db.close()\n-    return response\n-\n-\n # Dependency\n-def get_db(request: Request):\n-    return request.state.db\n+def get_db():\n+    try:\n+        db = SessionLocal()\n+        yield db\n+    finally:\n+        db.close()\n \n \n @app.post(\"/users/\", response_model=schemas.User)\n\n@@ -1,6 +1,7 @@\n from typing import Any, Callable, Dict, List, Optional, Sequence, Type, Union\n \n from fastapi import routing\n+from fastapi.concurrency import AsyncExitStack\n from fastapi.encoders import DictIntStrAny, SetIntStr\n from fastapi.exception_handlers import (\n     http_exception_handler,\n@@ -21,6 +22,7 @@ from starlette.middleware.errors import ServerErrorMiddleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n+from starlette.types import Receive, Scope, Send\n \n \n class FastAPI(Starlette):\n@@ -130,6 +132,14 @@ class FastAPI(Starlette):\n             RequestValidationError, request_validation_exception_handler\n         )\n \n+    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n+        if AsyncExitStack:\n+            async with AsyncExitStack() as stack:\n+                scope[\"fastapi_astack\"] = stack\n+                await super().__call__(scope, receive, send)\n+        else:\n+            await super().__call__(scope, receive, send)  # pragma: no cover\n+\n     def add_api_route(\n         self,\n         path: str,\n\n@@ -0,0 +1,45 @@\n+from typing import Any, Callable\n+\n+from starlette.concurrency import iterate_in_threadpool, run_in_threadpool  # noqa\n+\n+asynccontextmanager_error_message = \"\"\"\n+FastAPI's contextmanager_in_threadpool require Python 3.7 or above,\n+or the backport for Python 3.6, installed with:\n+    pip install async-generator\n+\"\"\"\n+\n+\n+def _fake_asynccontextmanager(func: Callable) -> Callable:\n+    def raiser(*args: Any, **kwargs: Any) -> Any:\n+        raise RuntimeError(asynccontextmanager_error_message)\n+\n+    return raiser\n+\n+\n+try:\n+    from contextlib import asynccontextmanager  # type: ignore\n+except ImportError:\n+    try:\n+        from async_generator import asynccontextmanager  # type: ignore\n+    except ImportError:  # pragma: no cover\n+        asynccontextmanager = _fake_asynccontextmanager\n+\n+try:\n+    from contextlib import AsyncExitStack  # type: ignore\n+except ImportError:\n+    try:\n+        from async_exit_stack import AsyncExitStack  # type: ignore\n+    except ImportError:  # pragma: no cover\n+        AsyncExitStack = None  # type: ignore\n+\n+\n+@asynccontextmanager\n+async def contextmanager_in_threadpool(cm: Any) -> Any:\n+    try:\n+        yield await run_in_threadpool(cm.__enter__)\n+    except Exception as e:\n+        ok = await run_in_threadpool(cm.__exit__, type(e), e, None)\n+        if not ok:\n+            raise e\n+    else:\n+        await run_in_threadpool(cm.__exit__, None, None, None)\n\n@@ -1,5 +1,6 @@\n import asyncio\n import inspect\n+from contextlib import contextmanager\n from copy import deepcopy\n from typing import (\n     Any,\n@@ -16,6 +17,12 @@ from typing import (\n )\n \n from fastapi import params\n+from fastapi.concurrency import (\n+    AsyncExitStack,\n+    _fake_asynccontextmanager,\n+    asynccontextmanager,\n+    contextmanager_in_threadpool,\n+)\n from fastapi.dependencies.models import Dependant, SecurityRequirement\n from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n@@ -195,6 +202,18 @@ def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) ->\n     return annotation\n \n \n+async_contextmanager_dependencies_error = \"\"\"\n+FastAPI dependencies with yield require Python 3.7 or above,\n+or the backports for Python 3.6, installed with:\n+    pip install async-exit-stack async-generator\n+\"\"\"\n+\n+\n+def check_dependency_contextmanagers() -> None:\n+    if AsyncExitStack is None or asynccontextmanager == _fake_asynccontextmanager:\n+        raise RuntimeError(async_contextmanager_dependencies_error)  # pragma: no cover\n+\n+\n def get_dependant(\n     *,\n     path: str,\n@@ -206,6 +225,8 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n+    if inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n+        check_dependency_contextmanagers()\n     dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n@@ -338,6 +359,16 @@ def is_coroutine_callable(call: Callable) -> bool:\n     return asyncio.iscoroutinefunction(call)\n \n \n+async def solve_generator(\n+    *, call: Callable, stack: AsyncExitStack, sub_values: Dict[str, Any]\n+) -> Any:\n+    if inspect.isgeneratorfunction(call):\n+        cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n+    elif inspect.isasyncgenfunction(call):\n+        cm = asynccontextmanager(call)(**sub_values)\n+    return await stack.enter_async_context(cm)\n+\n+\n async def solve_dependencies(\n     *,\n     request: Union[Request, WebSocket],\n@@ -410,6 +441,15 @@ async def solve_dependencies(\n             continue\n         if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n             solved = dependency_cache[sub_dependant.cache_key]\n+        elif inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n+            stack = request.scope.get(\"fastapi_astack\")\n+            if stack is None:\n+                raise RuntimeError(\n+                    async_contextmanager_dependencies_error\n+                )  # pragma: no cover\n+            solved = await solve_generator(\n+                call=call, stack=stack, sub_values=sub_values\n+            )\n         elif is_coroutine_callable(call):\n             solved = await call(**sub_values)\n         else:\n\n@@ -0,0 +1,349 @@\n+from typing import Dict\n+\n+import pytest\n+from fastapi import BackgroundTasks, Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+state = {\n+    \"/async\": \"asyncgen not started\",\n+    \"/sync\": \"generator not started\",\n+    \"/async_raise\": \"asyncgen raise not started\",\n+    \"/sync_raise\": \"generator raise not started\",\n+    \"context_a\": \"not started a\",\n+    \"context_b\": \"not started b\",\n+    \"bg\": \"not set\",\n+    \"sync_bg\": \"not set\",\n+}\n+\n+errors = []\n+\n+\n+async def get_state():\n+    return state\n+\n+\n+class AsyncDependencyError(Exception):\n+    pass\n+\n+\n+class SyncDependencyError(Exception):\n+    pass\n+\n+\n+class OtherDependencyError(Exception):\n+    pass\n+\n+\n+async def asyncgen_state(state: Dict[str, str] = Depends(get_state)):\n+    state[\"/async\"] = \"asyncgen started\"\n+    yield state[\"/async\"]\n+    state[\"/async\"] = \"asyncgen completed\"\n+\n+\n+def generator_state(state: Dict[str, str] = Depends(get_state)):\n+    state[\"/sync\"] = \"generator started\"\n+    yield state[\"/sync\"]\n+    state[\"/sync\"] = \"generator completed\"\n+\n+\n+async def asyncgen_state_try(state: Dict[str, str] = Depends(get_state)):\n+    state[\"/async_raise\"] = \"asyncgen raise started\"\n+    try:\n+        yield state[\"/async_raise\"]\n+    except AsyncDependencyError:\n+        errors.append(\"/async_raise\")\n+    finally:\n+        state[\"/async_raise\"] = \"asyncgen raise finalized\"\n+\n+\n+def generator_state_try(state: Dict[str, str] = Depends(get_state)):\n+    state[\"/sync_raise\"] = \"generator raise started\"\n+    try:\n+        yield state[\"/sync_raise\"]\n+    except SyncDependencyError:\n+        errors.append(\"/sync_raise\")\n+    finally:\n+        state[\"/sync_raise\"] = \"generator raise finalized\"\n+\n+\n+async def context_a(state: dict = Depends(get_state)):\n+    state[\"context_a\"] = \"started a\"\n+    try:\n+        yield state\n+    finally:\n+        state[\"context_a\"] = \"finished a\"\n+\n+\n+async def context_b(state: dict = Depends(context_a)):\n+    state[\"context_b\"] = \"started b\"\n+    try:\n+        yield state\n+    finally:\n+        state[\"context_b\"] = f\"finished b with a: {state['context_a']}\"\n+\n+\n+@app.get(\"/async\")\n+async def get_async(state: str = Depends(asyncgen_state)):\n+    return state\n+\n+\n+@app.get(\"/sync\")\n+async def get_sync(state: str = Depends(generator_state)):\n+    return state\n+\n+\n+@app.get(\"/async_raise\")\n+async def get_async_raise(state: str = Depends(asyncgen_state_try)):\n+    assert state == \"asyncgen raise started\"\n+    raise AsyncDependencyError()\n+\n+\n+@app.get(\"/sync_raise\")\n+async def get_sync_raise(state: str = Depends(generator_state_try)):\n+    assert state == \"generator raise started\"\n+    raise SyncDependencyError()\n+\n+\n+@app.get(\"/async_raise_other\")\n+async def get_async_raise_other(state: str = Depends(asyncgen_state_try)):\n+    assert state == \"asyncgen raise started\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/sync_raise_other\")\n+async def get_sync_raise_other(state: str = Depends(generator_state_try)):\n+    assert state == \"generator raise started\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/context_b\")\n+async def get_context_b(state: dict = Depends(context_b)):\n+    return state\n+\n+\n+@app.get(\"/context_b_raise\")\n+async def get_context_b_raise(state: dict = Depends(context_b)):\n+    assert state[\"context_b\"] == \"started b\"\n+    assert state[\"context_a\"] == \"started a\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/context_b_bg\")\n+async def get_context_b_bg(tasks: BackgroundTasks, state: dict = Depends(context_b)):\n+    async def bg(state: dict):\n+        state[\"bg\"] = f\"bg set - b: {state['context_b']} - a: {state['context_a']}\"\n+\n+    tasks.add_task(bg, state)\n+    return state\n+\n+\n+# Sync versions\n+\n+\n+@app.get(\"/sync_async\")\n+def get_sync_async(state: str = Depends(asyncgen_state)):\n+    return state\n+\n+\n+@app.get(\"/sync_sync\")\n+def get_sync_sync(state: str = Depends(generator_state)):\n+    return state\n+\n+\n+@app.get(\"/sync_async_raise\")\n+def get_sync_async_raise(state: str = Depends(asyncgen_state_try)):\n+    assert state == \"asyncgen raise started\"\n+    raise AsyncDependencyError()\n+\n+\n+@app.get(\"/sync_sync_raise\")\n+def get_sync_sync_raise(state: str = Depends(generator_state_try)):\n+    assert state == \"generator raise started\"\n+    raise SyncDependencyError()\n+\n+\n+@app.get(\"/sync_async_raise_other\")\n+def get_sync_async_raise_other(state: str = Depends(asyncgen_state_try)):\n+    assert state == \"asyncgen raise started\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/sync_sync_raise_other\")\n+def get_sync_sync_raise_other(state: str = Depends(generator_state_try)):\n+    assert state == \"generator raise started\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/sync_context_b\")\n+def get_sync_context_b(state: dict = Depends(context_b)):\n+    return state\n+\n+\n+@app.get(\"/sync_context_b_raise\")\n+def get_sync_context_b_raise(state: dict = Depends(context_b)):\n+    assert state[\"context_b\"] == \"started b\"\n+    assert state[\"context_a\"] == \"started a\"\n+    raise OtherDependencyError()\n+\n+\n+@app.get(\"/sync_context_b_bg\")\n+async def get_sync_context_b_bg(\n+    tasks: BackgroundTasks, state: dict = Depends(context_b)\n+):\n+    async def bg(state: dict):\n+        state[\n+            \"sync_bg\"\n+        ] = f\"sync_bg set - b: {state['context_b']} - a: {state['context_a']}\"\n+\n+    tasks.add_task(bg, state)\n+    return state\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_async_state():\n+    assert state[\"/async\"] == f\"asyncgen not started\"\n+    response = client.get(\"/async\")\n+    assert response.status_code == 200\n+    assert response.json() == f\"asyncgen started\"\n+    assert state[\"/async\"] == f\"asyncgen completed\"\n+\n+\n+def test_sync_state():\n+    assert state[\"/sync\"] == f\"generator not started\"\n+    response = client.get(\"/sync\")\n+    assert response.status_code == 200\n+    assert response.json() == f\"generator started\"\n+    assert state[\"/sync\"] == f\"generator completed\"\n+\n+\n+def test_async_raise_other():\n+    assert state[\"/async_raise\"] == \"asyncgen raise not started\"\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/async_raise_other\")\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" not in errors\n+\n+\n+def test_sync_raise_other():\n+    assert state[\"/sync_raise\"] == \"generator raise not started\"\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/sync_raise_other\")\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" not in errors\n+\n+\n+def test_async_raise():\n+    response = client.get(\"/async_raise\")\n+    assert response.status_code == 500\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_context_b():\n+    response = client.get(\"/context_b\")\n+    data = response.json()\n+    assert data[\"context_b\"] == \"started b\"\n+    assert data[\"context_a\"] == \"started a\"\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+\n+\n+def test_context_b_raise():\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/context_b_raise\")\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+\n+\n+def test_background_tasks():\n+    response = client.get(\"/context_b_bg\")\n+    data = response.json()\n+    assert data[\"context_b\"] == \"started b\"\n+    assert data[\"context_a\"] == \"started a\"\n+    assert data[\"bg\"] == \"not set\"\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+    assert state[\"bg\"] == \"bg set - b: started b - a: started a\"\n+\n+\n+def test_sync_raise():\n+    response = client.get(\"/sync_raise\")\n+    assert response.status_code == 500\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_async_state():\n+    response = client.get(\"/sync_async\")\n+    assert response.status_code == 200\n+    assert response.json() == f\"asyncgen started\"\n+    assert state[\"/async\"] == f\"asyncgen completed\"\n+\n+\n+def test_sync_sync_state():\n+    response = client.get(\"/sync_sync\")\n+    assert response.status_code == 200\n+    assert response.json() == f\"generator started\"\n+    assert state[\"/sync\"] == f\"generator completed\"\n+\n+\n+def test_sync_async_raise_other():\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/sync_async_raise_other\")\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" not in errors\n+\n+\n+def test_sync_sync_raise_other():\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/sync_sync_raise_other\")\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" not in errors\n+\n+\n+def test_sync_async_raise():\n+    response = client.get(\"/sync_async_raise\")\n+    assert response.status_code == 500\n+    assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n+    assert \"/async_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_sync_raise():\n+    response = client.get(\"/sync_sync_raise\")\n+    assert response.status_code == 500\n+    assert state[\"/sync_raise\"] == \"generator raise finalized\"\n+    assert \"/sync_raise\" in errors\n+    errors.clear()\n+\n+\n+def test_sync_context_b():\n+    response = client.get(\"/sync_context_b\")\n+    data = response.json()\n+    assert data[\"context_b\"] == \"started b\"\n+    assert data[\"context_a\"] == \"started a\"\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+\n+\n+def test_sync_context_b_raise():\n+    with pytest.raises(OtherDependencyError):\n+        client.get(\"/sync_context_b_raise\")\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+\n+\n+def test_sync_background_tasks():\n+    response = client.get(\"/sync_context_b_bg\")\n+    data = response.json()\n+    assert data[\"context_b\"] == \"started b\"\n+    assert data[\"context_a\"] == \"started a\"\n+    assert data[\"sync_bg\"] == \"not set\"\n+    assert state[\"context_b\"] == \"finished b with a: started a\"\n+    assert state[\"context_a\"] == \"finished a\"\n+    assert state[\"sync_bg\"] == \"sync_bg set - b: started b - a: started a\"\n\n@@ -0,0 +1,12 @@\n+import pytest\n+from fastapi.concurrency import _fake_asynccontextmanager\n+\n+\n+@_fake_asynccontextmanager\n+def never_run():\n+    pass  # pragma: no cover\n+\n+\n+def test_fake_async():\n+    with pytest.raises(RuntimeError):\n+        never_run()\n\n@@ -1,9 +1,8 @@\n+from pathlib import Path\n+\n+import pytest\n from starlette.testclient import TestClient\n \n-from sql_databases.sql_app.main import app\n-\n-client = TestClient(app)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n@@ -282,13 +281,24 @@ openapi_schema = {\n }\n \n \n-def test_openapi_schema():\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    # Import while creating the client to create the DB after starting the test session\n+    from sql_databases.sql_app.main import app\n+\n+    test_db = Path(\"./test.db\")\n+    with TestClient(app) as c:\n+        yield c\n+    test_db.unlink()\n+\n+\n+def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n \n \n-def test_create_user():\n+def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n     assert response.status_code == 200\n@@ -299,7 +309,7 @@ def test_create_user():\n     assert response.status_code == 400\n \n \n-def test_get_user():\n+def test_get_user(client):\n     response = client.get(\"/users/1\")\n     assert response.status_code == 200\n     data = response.json()\n@@ -307,12 +317,12 @@ def test_get_user():\n     assert \"id\" in data\n \n \n-def test_inexistent_user():\n+def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404\n \n \n-def test_get_users():\n+def test_get_users(client):\n     response = client.get(\"/users/\")\n     assert response.status_code == 200\n     data = response.json()\n@@ -320,7 +330,7 @@ def test_get_users():\n     assert \"id\" in data[0]\n \n \n-def test_create_item():\n+def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n     assert response.status_code == 200\n@@ -343,7 +353,7 @@ def test_create_item():\n     assert item_to_check[\"description\"] == item[\"description\"]\n \n \n-def test_read_items():\n+def test_read_items(client):\n     response = client.get(\"/items/\")\n     assert response.status_code == 200\n     data = response.json()\n\n@@ -0,0 +1,363 @@\n+from pathlib import Path\n+\n+import pytest\n+from starlette.testclient import TestClient\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Users_Users__Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Items_Items__Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner_Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is_Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    # Import while creating the client to create the DB after starting the test session\n+    from sql_databases.sql_app.alt_main import app\n+\n+    test_db = Path(\"./test.db\")\n+    with TestClient(app) as c:\n+        yield c\n+    test_db.unlink()\n+\n+\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400\n+\n+\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404\n+\n+\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
