{"custom_id": "scrapy#44ba7412777bdb20dc04460b882b2779fc3d177b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 29 | Churn Cumulative: 108 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,5 +1,7 @@\n+import sys\n import unittest\n from pq_classes import PriorityQueue1, PriorityQueue2, PriorityQueue3, PriorityQueue4, PriorityQueue5, PriorityQueue6\n+from pq_classes import *\n \n # (ITEM, PRIORITY)\n INPUT = [(1, -5), (30, -1), (80, -3), (4, 1), (6, 3), (20, 0), (50, -1)]\n@@ -7,9 +9,7 @@ OUTPUT = [(1, -5), (80, -3), (30, -1), (50, -1), (20, 0), (4, 1), (6, 3)]\n \n PRIOSIZE = reduce(max, (abs(i[1]) for i in INPUT + OUTPUT)) * 2\n \n-class PriorityQueue1TestCase(unittest.TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue1\n+class TestPriorityQueue(object):\n \n     def test_popping(self):\n         pq = self.PriorityQueue(PRIOSIZE)\n@@ -54,25 +54,14 @@ class PriorityQueue1TestCase(unittest.TestCase):\n         pq.pop()\n         self.assertEquals(len(pq), 0)\n \n-class PriorityQueue2TestCase(PriorityQueue1TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue2\n \n-class PriorityQueue3TestCase(PriorityQueue1TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue3\n+# automatically test any PriorityQueueN class defined at pq_classes\n+prioclasses = [(name, cls) for name, cls in globals().items() if name.startswith('PriorityQueue')]\n+for name, cls in prioclasses:\n+    testname = '%sTestCase' % name\n+    testcase = type(testname, (TestPriorityQueue, unittest.TestCase), {'PriorityQueue': cls})\n+    setattr(sys.modules[__name__], testname, testcase)\n \n-class PriorityQueue4TestCase(PriorityQueue1TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue4\n-\n-class PriorityQueue5TestCase(PriorityQueue1TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue5\n-\n-class PriorityQueue6TestCase(PriorityQueue1TestCase):\n-    def setUp(self):\n-        self.PriorityQueue = PriorityQueue6\n \n if __name__ == '__main__':\n     print \"\\n== Unit testing for every implementation ==\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#685807e3c42ba770b9886d5530e45fe13e92a0ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 264 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -216,20 +216,19 @@ class PriorityQueue6(object):\n         self.priolist = [deque() for _ in range(size)]\n \n     def push(self, item, priority=0):\n-        final = priority + self.zero\n-        if self.index > final:\n-            self.index = final\n-        self.priolist[final].appendleft(item)\n+        i = priority + self.zero\n+        self.priolist[i].appendleft(item)\n+        self.index = min(self.index, i)\n \n     def pop(self):\n         cached = self.priolist[self.index]\n-        if len(cached):\n+        if cached:\n             return (cached.pop(), self.index - self.zero)\n \n         for prio, queue in enumerate(self.priolist[self.index:]):\n-            if len(queue):\n-                final = prio + self.index - self.zero\n-                return (queue.pop(), final)\n+            if queue:\n+                self.index += prio\n+                return (queue.pop(), self.index - self.zero)\n \n         raise IndexError(\"pop from an empty queue\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1c659ce615e7a1ae3c11c53c4a244f6a5d918630", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 18 | Churn Cumulative: 463 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -245,4 +245,21 @@ class PriorityQueue6(object):\n         return bool(len(self))\n \n \n+from itertools import islice\n+class PriorityQueue6b(PriorityQueue6):\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n \n+    def pop(self):\n+        cached = self.priolist[self.index]\n+        if cached:\n+            return (cached.pop(), self.index - self.zero)\n+\n+        for prio, queue in enumerate(islice(self.priolist, self.index, None), self.index):\n+            if queue:\n+                self.index = prio\n+                return (queue.pop(), prio - self.zero)\n+\n+        raise IndexError(\"pop from an empty queue\")\n+\n+\n+__all__ = [name for name in globals().keys() if name.startswith('PriorityQueue')]\n\n@@ -15,6 +15,7 @@ TESTCASES = [\n        (\"deque+defaultdict+deque\", PriorityQueue4),\n        ('list+deque', PriorityQueue5),\n        ('list+deque+cache', PriorityQueue6),\n+       ('list+deque+cache+islice', PriorityQueue6b),\n        ]\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9d1855a66e630a2f40981438af9dd36b58c5ab4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 32 | Files Changed: 2 | Hunks: 16 | Methods Changed: 5 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 87 | Churn Cumulative: 550 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,9 +3,13 @@ from heapq import heappush, heappop\n import time\n from itertools import chain\n \n+#------------------------------------------------------------------------------\n \n class PriorityQueue1(object):\n-    \"\"\"A simple priority queue\"\"\"\n+    \"\"\"heapq\n+\n+    A simple priority queue\n+    \"\"\"\n \n     def __init__(self, size=1):\n         self.items = []\n@@ -26,9 +30,23 @@ class PriorityQueue1(object):\n     def __nonzero__(self):\n         return bool(self.items)\n \n-class PriorityQueue2(object):\n+\n+class PriorityQueue1b(PriorityQueue1):\n+    \"\"\"heapq+int\n+\n+    A simple priority queue using incremental integer instead of time.time()\n     \"\"\"\n-    Faster priority queue implementation, based on a dictionary of lists\n+    time = 0\n+\n+    def push(self, item, priority=0):\n+        self.time += 1\n+        heappush(self.items, (priority, time, item))\n+\n+#------------------------------------------------------------------------------\n+\n+class PriorityQueue2(object):\n+    \"\"\"dict+deque\n+\n     @author: Federico Feroldi <federico@cloudify.me>\n     \"\"\"\n     def __init__(self, size=1):\n@@ -67,8 +85,10 @@ class PriorityQueue2(object):\n                 return True\n         return False\n \n+#------------------------------------------------------------------------------\n+\n class PriorityQueue3(object):\n-    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+    \"\"\"deque+heapq\"\"\"\n \n     def __init__(self, size=1):\n         self.negitems = []\n@@ -108,10 +128,27 @@ class PriorityQueue3(object):\n         return bool(self.negitems and self.pzero and self.positems)\n \n \n+class PriorityQueue3b(PriorityQueue3):\n+    \"\"\"deque+heapq+int\"\"\"\n+\n+    left_time = 0\n+    righ_time = 0\n+\n+    def push(self, item, priority=0):\n+        if priority == 0:\n+            self.pzero.appendleft(item)\n+        elif priority < 0:\n+            self.left_time += 1\n+            heappush(self.negitems, (priority, self.left_time, item))\n+        else:\n+            self.righ_time += 1\n+            heappush(self.positems, (priority, self.righ_time, item))\n+\n+\n #------------------------------------------------------------------------------\n \n class PriorityQueue4(object):\n-    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+    \"\"\"deque+defaultdict+deque\"\"\"\n \n     def __init__(self, size=1):\n         self.negitems = defaultdict(deque)\n@@ -174,7 +211,7 @@ class PriorityQueue4(object):\n #------------------------------------------------------------------------------\n \n class PriorityQueue5(object):\n-    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+    \"\"\"list+deque\"\"\"\n \n     def __init__(self, size=1):\n         # preallocate deques for a fixed number of priorities\n@@ -205,15 +242,9 @@ class PriorityQueue5(object):\n     def __nonzero__(self):\n         return bool(len(self))\n \n-class PriorityQueue6(object):\n-    \"\"\"Priority queue using a deque for priority 0\"\"\"\n-\n-    def __init__(self, size=1):\n-        # preallocate deques for a fixed number of priorities\n-        size = size if size % 2 else size + 1\n-        self.zero = size // 2\n-        self.index = 0\n-        self.priolist = [deque() for _ in range(size)]\n+class PriorityQueue5b(PriorityQueue5):\n+    \"\"\"list+deque+cache\"\"\"\n+    index = 0\n \n     def push(self, item, priority=0):\n         i = priority + self.zero\n@@ -232,22 +263,10 @@ class PriorityQueue6(object):\n \n         raise IndexError(\"pop from an empty queue\")\n \n-    def __len__(self):\n-        return sum(len(v) for v in self.priolist)\n-\n-    def __iter__(self):\n-        for prio, queue in enumerate(self.priolist):\n-            final = prio - self.zero\n-            for i in reversed(queue):\n-                yield (i, final)\n-\n-    def __nonzero__(self):\n-        return bool(len(self))\n-\n \n from itertools import islice\n-class PriorityQueue6b(PriorityQueue6):\n-    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+class PriorityQueue5c(PriorityQueue5b):\n+    \"\"\"list+deque+cache+islice\"\"\"\n \n     def pop(self):\n         cached = self.priolist[self.index]\n@@ -261,5 +280,7 @@ class PriorityQueue6b(PriorityQueue6):\n \n         raise IndexError(\"pop from an empty queue\")\n \n+#------------------------------------------------------------------------------\n+\n \n __all__ = [name for name in globals().keys() if name.startswith('PriorityQueue')]\n\n@@ -10,12 +10,14 @@ TESTID = os.getpid()\n \n TESTCASES = [\n        (\"heapq\", PriorityQueue1),\n+       #(\"heapq+int\", PriorityQueue1b),\n        (\"dict+deque\", PriorityQueue2),\n        (\"deque+heapq\", PriorityQueue3),\n+       #(\"deque+heapq+int\", PriorityQueue3b),\n        (\"deque+defaultdict+deque\", PriorityQueue4),\n-       ('list+deque', PriorityQueue5),\n-       ('list+deque+cache', PriorityQueue6),\n-       ('list+deque+cache+islice', PriorityQueue6b),\n+       #('list+deque', PriorityQueue5),\n+       ('list+deque+cache', PriorityQueue5b),\n+       #('list+deque+cache+islice', PriorityQueue5c),\n        ]\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fdfa5302a4cdf9f22b51aa9d2334ed502635439d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 13 | Churn Cumulative: 481 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -132,7 +132,7 @@ class PriorityQueue3b(PriorityQueue3):\n     \"\"\"deque+heapq+int\"\"\"\n \n     left_time = 0\n-    righ_time = 0\n+    right_time = 0\n \n     def push(self, item, priority=0):\n         if priority == 0:\n@@ -141,8 +141,8 @@ class PriorityQueue3b(PriorityQueue3):\n             self.left_time += 1\n             heappush(self.negitems, (priority, self.left_time, item))\n         else:\n-            self.righ_time += 1\n-            heappush(self.positems, (priority, self.righ_time, item))\n+            self.right_time += 1\n+            heappush(self.positems, (priority, self.right_time, item))\n \n \n #------------------------------------------------------------------------------\n@@ -240,7 +240,7 @@ class PriorityQueue5(object):\n                 yield (i, final)\n \n     def __nonzero__(self):\n-        return bool(len(self))\n+        return any(d for d in self.priolist)\n \n class PriorityQueue5b(PriorityQueue5):\n     \"\"\"list+deque+cache\"\"\"\n@@ -283,4 +283,5 @@ class PriorityQueue5c(PriorityQueue5b):\n #------------------------------------------------------------------------------\n \n \n+\n __all__ = [name for name in globals().keys() if name.startswith('PriorityQueue')]\n\n@@ -54,6 +54,10 @@ class TestPriorityQueue(object):\n         pq.pop()\n         self.assertEquals(len(pq), 0)\n \n+    def test_indexerror(self):\n+        pq = self.PriorityQueue(PRIOSIZE)\n+        self.assertRaises(IndexError, pq.pop)\n+\n \n # automatically test any PriorityQueueN class defined at pq_classes\n prioclasses = [(name, cls) for name, cls in globals().items() if name.startswith('PriorityQueue')]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2e63ef60f17a5794aa99bba257cbcd3df72db914", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 113 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,5 @@\n import sys\n import unittest\n-from pq_classes import PriorityQueue1, PriorityQueue2, PriorityQueue3, PriorityQueue4, PriorityQueue5, PriorityQueue6\n from pq_classes import *\n \n # (ITEM, PRIORITY)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bd1be0ac67f9af0eb823ad8a959a2b7f0173d616", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 35 | Churn Cumulative: 225 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,7 @@ from pq_classes import *\n \n TESTID = os.getpid()\n \n-TESTCASES = [\n+TESTCASES = (\n        (\"heapq\", PriorityQueue1),\n        #(\"heapq+int\", PriorityQueue1b),\n        (\"dict+deque\", PriorityQueue2),\n@@ -18,7 +18,7 @@ TESTCASES = [\n        #('list+deque', PriorityQueue5),\n        ('list+deque+cache', PriorityQueue5b),\n        #('list+deque+cache+islice', PriorityQueue5c),\n-       ]\n+       )\n \n \n stmt_fmt = \"\"\"\n@@ -44,20 +44,37 @@ with open('%(samplefile)s') as samples:\n         randomprio.append(prio)\n \"\"\"\n \n-# def gen_random_priority(priorities):\n-#     return int(random.random() * priorities) - (priorities / 2)\n+\n+def _distribution(priorities, distribution):\n+    half = priorities // 2\n+    prio = -priorities\n+    while not (-half <= prio <= half):\n+        prio = round(distribution())\n+    return min(max(prio, -half), half)\n+\n+def normal_priority(priorities):\n+    sigma = priorities / 4.0\n+    dist = lambda: random.normalvariate(mu=0, sigma=sigma)\n+    return _distribution(priorities, dist)\n+\n+def gauss_priority(priorities):\n+    sigma = priorities / 4.0\n+    dist = lambda: random.gauss(mu=0, sigma=sigma)\n+    return _distribution(priorities, dist)\n+\n+def triangular_priority(priorities):\n+    half = priorities // 2\n+    return random.triangular(-half-1, half+1, 0)\n \n def uniform_priority(priorities):\n     return int(random.random() * priorities) - (priorities / 2)\n \n-def normal_priority(priorities):\n-    prio = int(random.normalvariate(priorities/2, priorities/4)) - (priorities / 2)\n-    return min(max(prio, -priorities/2), priorities/2)\n-\n \n PRIORITY_DISTRIBUTIONS = {\n         'uniform': uniform_priority,\n         'normal': normal_priority,\n+        'gauss': gauss_priority,\n+        'triangular': triangular_priority,\n         }\n \n \n@@ -71,7 +88,7 @@ def gen_samples(count, priorities, priority_distribution=uniform_priority):\n     return fn\n \n def runtests(pushpops=50*1000, times=30, priorities=1, samplefile=None, priority_distribution=uniform_priority):\n-    samplefile = samplefile or gen_samples(pushpops, priorities)\n+    samplefile = samplefile or gen_samples(pushpops, priorities, priority_distribution)\n \n     print \"\\n== With %s priorities (%s) ==\\n\" % (priorities, samplefile)\n     print \"pushpops = %s, times = %s\" % (pushpops, times)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#cab6387c876f97965618e238ba4c7710b3d84ea5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 87 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 29/29 | Churn Δ: 91 | Churn Cumulative: 685 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 4 | DMM Complexity: 0.3561643835616438\n\nDIFF:\n@@ -208,6 +208,91 @@ class PriorityQueue4(object):\n     def __nonzero__(self):\n         return bool(self.negitems or self.pzero or self.positems)\n \n+class PriorityQueue4b(object):\n+    \"\"\"deque+defaultdict+deque+cache\"\"\"\n+\n+    def __init__(self, size=1):\n+        self.negitems = defaultdict(deque)\n+        self.pzero = deque()\n+        self.positems = defaultdict(deque)\n+        self._sort_neg = False\n+        self._sort_pos = False\n+        self._cached_sorted_negitems = []\n+        self._cached_sorted_positems = []\n+\n+    def push(self, item, priority=0):\n+        if priority == 0:\n+            self.pzero.appendleft(item)\n+        elif priority < 0:\n+            if priority not in self.negitems:\n+                self._sort_neg = True\n+            self.negitems[priority].appendleft(item)\n+        else:\n+            if priority not in self.positems:\n+                self._sort_pos = True\n+            self.positems[priority].appendleft(item)\n+\n+    def pop(self):\n+        if self.negitems:\n+            if self._sort_neg:\n+                priorities = self.negitems.keys()\n+                priorities.sort()\n+                self._cached_sorted_negitems = priorities\n+                self._sort_neg = False\n+            else:\n+                priorities = self._cached_sorted_negitems\n+\n+            for priority in priorities:\n+                deq = self.negitems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        self._sort_neg = True\n+                        del self.negitems[priority]\n+                    return t\n+        elif self.pzero:\n+            return (self.pzero.pop(), 0)\n+        else:\n+            if self._sort_pos:\n+                priorities = self.positems.keys()\n+                priorities.sort()\n+                self._cached_sorted_positems = priorities\n+                self._sort_pos = False\n+            else:\n+                priorities = self._cached_sorted_positems\n+\n+            priorities = self.positems.keys()\n+            priorities.sort()\n+            for priority in priorities:\n+                deq = self.positems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        self._sort_pos = True\n+                        del self.positems[priority]\n+                    return t\n+        raise IndexError(\"pop from an empty queue\")\n+\n+    def __len__(self):\n+        total = sum(len(v) for v in self.negitems.values()) + \\\n+                len(self.pzero) + \\\n+                sum(len(v) for v in self.positems.values())\n+        return total\n+\n+    def __iter__(self):\n+        gen_negs = ((i, priority) \n+                    for priority in sorted(self.negitems.keys())\n+                    for i in reversed(self.negitems[priority]))\n+        gen_zeros = ((item,0) for item in self.pzero)\n+        gen_pos = ((i, priority) \n+                    for priority in sorted(self.positems.keys())\n+                    for i in reversed(self.positems[priority]))\n+        return chain(gen_negs, gen_zeros, gen_pos)\n+\n+\n+    def __nonzero__(self):\n+        return bool(self.negitems or self.pzero or self.positems)\n+\n #------------------------------------------------------------------------------\n \n class PriorityQueue5(object):\n@@ -282,6 +367,4 @@ class PriorityQueue5c(PriorityQueue5b):\n \n #------------------------------------------------------------------------------\n \n-\n-\n __all__ = [name for name in globals().keys() if name.startswith('PriorityQueue')]\n\n@@ -15,6 +15,7 @@ TESTCASES = (\n        (\"deque+heapq\", PriorityQueue3),\n        #(\"deque+heapq+int\", PriorityQueue3b),\n        (\"deque+defaultdict+deque\", PriorityQueue4),\n+       (\"deque+defaultdict+deque+cache\", PriorityQueue4b),\n        #('list+deque', PriorityQueue5),\n        ('list+deque+cache', PriorityQueue5b),\n        #('list+deque+cache+islice', PriorityQueue5c),\n@@ -38,8 +39,7 @@ from __main__ import %(PriorityClass)s as PriorityQueue\n q = PriorityQueue(%(priorities)i)\n \n randomprio = deque()\n-with open('%(samplefile)s') as samples:\n-    for line in samples:\n+for line in open('%(samplefile)s'):\n     prio = int(line.strip())\n     randomprio.append(prio)\n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#87e63216ef945e580c3f30675020d968f8ad7d9f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 11 | Methods Changed: 8 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 64 | Churn Cumulative: 186 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -41,20 +41,24 @@ class RetryMiddleware(object):\n                            ConnectionLost)\n \n     def __init__(self):\n-        self.failed_count = {}\n-        self.retry_times = settings.getint('RETRY_TIMES')\n+        self.max_retry_times = settings.getint('RETRY_TIMES')\n         self.retry_http_codes = map(int, settings.getlist('RETRY_HTTP_CODES'))\n \n     def process_exception(self, request, exception, spider):\n-        if isinstance(exception, self.EXCEPTIONS_TO_RETRY) or (isinstance(exception, HttpException) and (int(exception.status) in self.retry_http_codes)):\n-            fp = request_fingerprint(request)\n-            self.failed_count[fp] = self.failed_count.get(fp, 0) + 1\n+        if isinstance(exception, self.EXCEPTIONS_TO_RETRY) \\\n+                or (isinstance(exception, HttpException) \\\n+                        and (int(exception.status) in self.retry_http_codes)):\n \n-            if self.failed_count[fp] <= self.retry_times:\n-                log.msg(\"Retrying %s (failed %d times): %s\" % (request, self.failed_count[fp], exception), domain=spider.domain_name, level=log.DEBUG)\n+            retries = request.meta.get('retry_times', 0) + 1\n+\n+            if retries <= self.max_retry_times:\n+                log.msg(\"Retrying %s (failed %d times): %s\" % (request, retries, exception),\n+                        domain=spider.domain_name, level=log.DEBUG)\n                 retryreq = request.copy()\n+                retryreq.meta['retry_times'] = retries\n                 retryreq.dont_filter = True\n                 return retryreq\n             else:\n-                log.msg(\"Discarding %s (failed %d times): %s\" % (request, self.failed_count[fp], exception), domain=spider.domain_name, level=log.DEBUG)\n+                log.msg(\"Discarding %s (failed %d times): %s\" % (request, retries, exception),\n+                        domain=spider.domain_name, level=log.DEBUG)\n \n\n@@ -1,5 +1,9 @@\n import unittest\n \n+from twisted.internet.error import TimeoutError as ServerTimeoutError, DNSLookupError, \\\n+                                   ConnectionRefusedError, ConnectionDone, ConnectError, \\\n+                                   ConnectionLost\n+\n from scrapy.contrib.downloadermiddleware.retry import RetryMiddleware\n from scrapy.core.exceptions import HttpException\n from scrapy.spider import spiders\n@@ -10,18 +14,42 @@ class RetryTest(unittest.TestCase):\n         spiders.spider_modules = ['scrapy.tests.test_spiders']\n         spiders.reload()\n         self.spider = spiders.fromdomain('scrapytest.org')\n+        self.mw = RetryMiddleware()\n+        self.mw.max_retry_times = 2\n \n-    def test_process_exception(self):\n-        exception_404 = (Request('http://www.scrapytest.org/404'), HttpException('404', None, Response('http://www.scrapytest.org/404', body='')), self.spider)\n-        exception_503 = (Request('http://www.scrapytest.org/503'), HttpException('503', None, Response('http://www.scrapytest.org/503', body='')), self.spider)\n+    def test_process_exception_404(self):\n+        req404 = Request('http://www.scrapytest.org/404')\n+        exc404 = HttpException('404', None, Response('http://www.scrapytest.org/404', body=''))\n \n-        mw = RetryMiddleware()\n-        mw.retry_times = 1\n+        # dont retry 404s\n+        req = self.mw.process_exception(req404, exc404, self.spider)\n+        self.assertTrue(req is None)\n \n-        self.assertTrue(mw.process_exception(*exception_404) is None)\n+    def test_process_exception_503(self):\n+        req503 = Request('http://www.scrapytest.org/503')\n+        exc503 = HttpException('503', None, Response('http://www.scrapytest.org/503', body=''))\n+        self._test_retry_exception(req503, exc503)\n+\n+    def test_process_exception_twistederrors(self):\n+        for exc in (ServerTimeoutError, DNSLookupError, ConnectionRefusedError, ConnectionDone, ConnectError, ConnectionLost):\n+            req = Request('http://www.scrapytest.org/%s' % exc.__name__)\n+            self._test_retry_exception(req, exc())\n+\n+    def _test_retry_exception(self, req, exception):\n+        # first retry\n+        req = self.mw.process_exception(req, exception, self.spider)\n+        assert isinstance(req, Request)\n+        self.assertEqual(req.meta['retry_times'], 1)\n+\n+        # second retry\n+        req = self.mw.process_exception(req, exception, self.spider)\n+        assert isinstance(req, Request)\n+        self.assertEqual(req.meta['retry_times'], 2)\n+\n+        # discard it\n+        req = self.mw.process_exception(req, exception, self.spider)\n+        self.assertEqual(req, None)\n \n-        self.assertTrue(isinstance(mw.process_exception(*exception_503), Request))\n-        self.assertTrue(mw.process_exception(*exception_503) is None)\n \n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0b1184e47205948def5add84c9b8cab36b38295d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 16 | Files Changed: 3 | Hunks: 13 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 65 | Churn Cumulative: 530 | Contributors (this commit): 3 | Commits (past 90d): 33 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -135,6 +135,8 @@ NEWSPIDER_MODULE = ''\n \n PRIORITIZER = 'scrapy.core.prioritizers.RandomPrioritizer'\n \n+REDIRECTMIDDLEWARE_MAX_TIMES = 20 # uses Firefox default setting\n+\n REQUEST_HEADER_ACCEPT = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n REQUEST_HEADER_ACCEPT_LANGUAGE = 'en'\n \n@@ -145,6 +147,7 @@ REQUESTS_PER_DOMAIN = 8     # max simultaneous requests per domain\n RETRY_TIMES = 2 # initial response + 2 retries = 3 requests\n RETRY_HTTP_CODES = ['500', '503', '504', '400', '408', '200']\n \n+\n ROBOTSTXT_OBEY = False\n \n SCHEDULER = 'scrapy.core.scheduler.Scheduler'\n\n@@ -2,9 +2,7 @@ from scrapy import log\n from scrapy.core.exceptions import HttpException\n from scrapy.utils.url import urljoin_rfc as urljoin\n from scrapy.utils.response import get_meta_refresh\n-\n-class RedirectLoop(Exception):\n-    pass\n+from scrapy.conf import settings\n \n # some sites use meta-refresh for redirecting to a session expired page, so we\n # restrict automatic redirection to a maximum delay (in number of seconds)\n@@ -12,6 +10,9 @@ META_REFRESH_MAXSEC = 100\n MAX_REDIRECT_LOOP = 10\n \n class RedirectMiddleware(object):\n+    def __init__(self):\n+        self.max_redirect_times = settings.getint('REDIRECTMIDDLEWARE_MAX_TIMES')\n+\n     def process_exception(self, request, exception, spider):\n         if not isinstance(exception, HttpException):\n             return\n@@ -39,7 +40,18 @@ class RedirectMiddleware(object):\n         return response\n \n     def _redirect(self, redirected, request, spider, reason):\n-        domain = spider.domain_name\n-        log.msg(\"Redirecting (%s) to %s from %s\" % (reason, redirected, request), level=log.DEBUG, domain=domain)\n-        return redirected\n+        ttl = request.meta.setdefault('redirect_ttl', self.max_redirect_times)\n+        redirects = request.meta.get('redirect_times', 0) + 1\n+\n+        if ttl and redirects <= self.max_redirect_times:\n+            redirected.meta['redirect_times'] = redirects\n+            redirected.meta['redirect_ttl'] = ttl - 1\n+            redirected.dont_filter = request.dont_filter\n+            log.msg(\"Redirecting (%s) to %s from %s\" % (reason, redirected, request),\n+                    domain=spider.domain_name, level=log.DEBUG)\n+            return redirected\n+        else:\n+            log.msg(\"Discarding %s: max redirections reached\" % request,\n+                    domain=spider.domain_name, level=log.DEBUG)\n+\n \n\n@@ -13,14 +13,12 @@ class RedirectMiddlewareTest(unittest.TestCase):\n         spiders.reload()\n         self.spider = spiders.fromdomain('scrapytest.org')\n         dupefilter.open('scrapytest.org')\n+        self.mw = RedirectMiddleware()\n \n     def tearDown(self):\n         dupefilter.close('scrapytest.org')\n \n     def test_process_exception(self):\n-\n-        mw = RedirectMiddleware()\n-\n         url = 'http://www.example.com/301'\n         url2 = 'http://www.example.com/redirected'\n         req = Request(url)\n@@ -28,7 +26,7 @@ class RedirectMiddlewareTest(unittest.TestCase):\n         rsp = Response(url, headers=hdr)\n         exc = HttpException('301', None, rsp)\n \n-        req2 = mw.process_exception(req, exc, self.spider)\n+        req2 = self.mw.process_exception(req, exc, self.spider)\n         assert isinstance(req2, Request)\n         self.assertEqual(req2.url, url2)\n \n@@ -39,22 +37,19 @@ class RedirectMiddlewareTest(unittest.TestCase):\n         rsp = Response(url, headers=hdr)\n         exc = HttpException('302', None, rsp)\n \n-        req2 = mw.process_exception(req, exc, self.spider)\n+        req2 = self.mw.process_exception(req, exc, self.spider)\n         assert isinstance(req2, Request)\n         self.assertEqual(req2.url, url2)\n         self.assertEqual(req2.method, 'GET')\n         assert not req2.body\n \n     def test_process_response(self):\n-\n-        mw = RedirectMiddleware()\n-\n         body = \"\"\"<html>\n             <head><meta http-equiv=\"refresh\" content=\"5;url=http://example.org/newpage\" /></head>\n             </html>\"\"\"\n         req = Request(url='http://example.org')\n         rsp = Response(url='http://example.org', body=body)\n-        req2 = mw.process_response(req, rsp, self.spider)\n+        req2 = self.mw.process_response(req, rsp, self.spider)\n \n         assert isinstance(req2, Request)\n         self.assertEqual(req2.url, 'http://example.org/newpage')\n@@ -65,9 +60,32 @@ class RedirectMiddlewareTest(unittest.TestCase):\n             </html>\"\"\"\n         req = Request(url='http://example.org')\n         rsp = Response(url='http://example.org', body=body)\n-        rsp2 = mw.process_response(req, rsp, self.spider)\n+        rsp2 = self.mw.process_response(req, rsp, self.spider)\n \n         assert rsp is rsp2\n \n+    def test_max_redirect_times(self):\n+        self.mw.max_redirect_times = 1\n+        req = Request('http://scrapytest.org/302')\n+        exc = HttpException('302', None, Response('http://www.scrapytest.org/302', headers={'Location': '/redirected'}))\n+\n+        req = self.mw.process_exception(req, exc, self.spider)\n+        assert isinstance(req, Request)\n+        assert 'redirect_times' in req.meta\n+        self.assertEqual(req.meta['redirect_times'], 1)\n+\n+        req = self.mw.process_exception(req, exc, self.spider)\n+        self.assertEqual(req, None)\n+\n+    def test_ttl(self):\n+        self.mw.max_redirect_times = 100\n+        req = Request('http://scrapytest.org/302', meta={'redirect_ttl': 1})\n+        exc = HttpException('302', None, Response('http://www.scrapytest.org/302', headers={'Location': '/redirected'}))\n+\n+        req = self.mw.process_exception(req, exc, self.spider)\n+        assert isinstance(req, Request)\n+        req = self.mw.process_exception(req, exc, self.spider)\n+        self.assertEqual(req, None)\n+\n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#28f947d2b9c6a9069cf7c59a833d3647875e4707", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 97 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.2222222222222222\n\nDIFF:\n@@ -2,6 +2,7 @@\n Base class for Scrapy commands\n \"\"\"\n import os\n+import sys\n from scrapy.conf import settings\n \n class ScrapyCommand(object):\n@@ -44,6 +45,8 @@ class ScrapyCommand(object):\n         parser.add_option(\"--nolog\", dest=\"nolog\", action=\"store_true\", help=\"disable all log messages\")\n         parser.add_option(\"--profile\", dest=\"profile\", default=None, help=\"write profiling stats in FILE, to analyze later with: python -m pstats FILE\", metavar=\"FILE\")\n         parser.add_option(\"--pidfile\", dest=\"pidfile\", help=\"Write process pid to file FILE\", metavar=\"FILE\")\n+        parser.add_option(\"--set\", dest=\"settings\", action=\"append\", metavar=\"SETTING:VALUE\", default=[], \n+                            help=\"Override Scrapy setting SETTING with VALUE\")\n         \n     def process_options(self, args, opts):\n         if opts.logfile:\n@@ -69,6 +72,14 @@ class ScrapyCommand(object):\n             pid = os.getpid()\n             open(opts.pidfile, \"w\").write(str(pid))\n \n+        for setting in opts.settings:\n+            if ':' in setting:\n+                name, val = setting.split(':')\n+                settings.overrides[name] = val\n+            else:\n+                sys.stderr.write(\"%s: invalid argument --set=%s - proper format is -set=SETTING:VALUE'\\n\" % (sys.argv[0], setting))\n+                sys.exit(2)\n+\n     def run(self, args, opts):\n         \"\"\"\n         Entry point for running commands\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#cbe8f8ff45327daf35fbd2b094e675377444afba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 185 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -99,7 +99,6 @@ def execute():\n     execute_with_args(sys.argv)\n \n def execute_with_args(argv):\n-    spiders.load()\n     cmds = builtin_commands_dict()\n     cmds.update(custom_commands_dict())\n \n@@ -109,7 +108,7 @@ def execute_with_args(argv):\n     if not cmdname:\n         print \"Scrapy %s\\n\" % scrapy.__version__\n         print usage(argv)\n-        sys.exit()\n+        sys.exit(2)\n \n     parser = optparse.OptionParser()\n \n@@ -134,6 +133,7 @@ def execute_with_args(argv):\n     command_executed['opts'] = opts.__dict__.copy()\n \n     cmd.process_options(args, opts)\n+    spiders.load()\n     log.start() # start logging\n     if opts.profile:\n         log.msg(\"Profiling enabled. Analyze later with: python -m pstats %s\" % opts.profile)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#30a3df0c9d1dbb3e6a172b43a8621af4875fbac8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 103 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -46,7 +46,7 @@ class ScrapyCommand(object):\n         parser.add_option(\"--profile\", dest=\"profile\", default=None, help=\"write profiling stats in FILE, to analyze later with: python -m pstats FILE\", metavar=\"FILE\")\n         parser.add_option(\"--pidfile\", dest=\"pidfile\", help=\"Write process pid to file FILE\", metavar=\"FILE\")\n         parser.add_option(\"--set\", dest=\"settings\", action=\"append\", metavar=\"SETTING:VALUE\", default=[], \n-                            help=\"Override Scrapy setting SETTING with VALUE\")\n+                            help=\"Override Scrapy setting SETTING with VALUE. May be repeated.\")\n         \n     def process_options(self, args, opts):\n         if opts.logfile:\n@@ -74,10 +74,10 @@ class ScrapyCommand(object):\n \n         for setting in opts.settings:\n             if ':' in setting:\n-                name, val = setting.split(':')\n+                name, val = setting.split(':', 1)\n                 settings.overrides[name] = val\n             else:\n-                sys.stderr.write(\"%s: invalid argument --set=%s - proper format is -set=SETTING:VALUE'\\n\" % (sys.argv[0], setting))\n+                sys.stderr.write(\"%s: invalid argument --set=%s - proper format is --set=SETTING:VALUE'\\n\" % (sys.argv[0], setting))\n                 sys.exit(2)\n \n     def run(self, args, opts):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0c9631594d8e3d2e1917e2d46ec67afcf719d1bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 25 | Files Changed: 4 | Hunks: 11 | Methods Changed: 11 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 70 | Churn Cumulative: 1069 | Contributors (this commit): 3 | Commits (past 90d): 33 | Contributors (cumulative): 7 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -18,7 +18,7 @@ from scrapy.utils.defer import chain_deferred\n class Request(object):\n \n     def __init__(self, url, callback=None, method='GET', headers=None, body=None, \n-                 cookies=None, meta=None, encoding='utf-8', dont_filter=None):\n+                 cookies=None, meta=None, encoding='utf-8', dont_filter=False):\n \n         self._encoding = encoding  # this one has to be set first\n         self.method = method.upper()\n@@ -37,10 +37,13 @@ class Request(object):\n         self.cache = {}\n         \n     def set_url(self, url):\n-        assert isinstance(url, basestring), \\\n-            'Request url argument must be str or unicode, got %s:' % type(url).__name__\n+        if isinstance(url, basestring):\n             decoded_url = url if isinstance(url, unicode) else url.decode(self.encoding)\n             self._url = Url(safe_url_string(decoded_url, self.encoding))\n+        elif isinstance(url, Url):\n+            self._url = url\n+        else:\n+            raise TypeError('Request url must be str or unicode, got %s:' % type(url).__name__)\n     url = property(lambda x: x._url, set_url)\n \n     def set_body(self, body):\n@@ -76,26 +79,23 @@ class Request(object):\n         return \"%s(%s)\" % (self.__class__.__name__, repr(d))\n \n     def copy(self):\n-        \"\"\"Return a copy a of this Request\"\"\"\n-        new = copy.copy(self)\n-        new.cache = {}\n-        for att in self.__dict__:\n-            if att not in ['cache', 'url', 'deferred']:\n-                value = getattr(self, att)\n-                setattr(new, att, copy.copy(value))\n-        new.deferred = defer.Deferred()\n-        return new\n+        \"\"\"Return a copy of this Request\"\"\"\n+        return self.replace()\n \n-    def replace(self, url=None, method=None, headers=None, body=None, cookies=None, meta=None):\n+    def replace(self, url=None, callback=None, method=None, headers=None, body=None, \n+                cookies=None, meta=None, encoding=None, dont_filter=None):\n         \"\"\"Create a new Request with the same attributes except for those\n         given new values.\n         \"\"\"\n-        return self.__class__(url=url or self.url,\n-                              method=method or self.method,\n-                              headers=headers or copy.deepcopy(self.headers),\n-                              body=body or self.body,\n-                              cookies=cookies or self.cookies,\n-                              meta=meta or self.meta)\n+        return self.__class__(url=self.url if url is None else self.url,\n+                              callback=callback,\n+                              method=self.method if method is None else method,\n+                              headers=copy.deepcopy(self.headers) if headers is None else headers,\n+                              body=self.body if body is None else body,\n+                              cookies=self.cookies if cookies is None else cookies,\n+                              meta=self.meta if meta is None else meta,\n+                              encoding=self.encoding if encoding is None else encoding,\n+                              dont_filter=self.dont_filter if dont_filter is None else dont_filter)\n \n     def httprepr(self):\n         \"\"\" Return raw HTTP request representation (as string). This is\n\n@@ -55,12 +55,12 @@ class Response(object):\n         \"\"\"\n         if cls is None:\n             cls = self.__class__\n-        new = cls(url=url or self.url,\n-                  status=status or self.status,\n-                  headers=headers or copy.deepcopy(self.headers),\n-                  body=body or self.body,\n-                  meta=meta or self.meta,\n-                  flags=flags or self.flags,\n+        new = cls(url=self.url if url is None else url,\n+                  status=self.status if status is None else status,\n+                  headers=copy.deepcopy(self.headers) if headers is None else headers,\n+                  body=self.body if body is None else body,\n+                  meta=self.meta if meta is None else meta,\n+                  flags=self.flags if flags is None else flags,\n                   **kwargs)\n         return new\n \n\n@@ -7,6 +7,10 @@ class RequestTest(unittest.TestCase):\n         # Request requires url in the constructor\n         self.assertRaises(Exception, Request)\n \n+        # url argument must be basestring or Url\n+        self.assertRaises(TypeError, Request, 123)\n+        r = Request(Url('http://www.example.com'))\n+\n         r = Request(\"http://www.example.com\")\n         assert isinstance(r.url, Url)\n         self.assertEqual(r.url, \"http://www.example.com\")\n@@ -124,6 +128,8 @@ class RequestTest(unittest.TestCase):\n         # make sure headers attribute is shallow copied\n         assert r1.headers is not r2.headers, \"headers must be a shallow copy, not identical\"\n         self.assertEqual(r1.headers, r2.headers)\n+        self.assertEqual(r1.encoding, r2.encoding)\n+        self.assertEqual(r1.dont_filter, r2.dont_filter)\n \n         # Request.body can be identical since it's an immutable object (str)\n \n@@ -148,6 +154,13 @@ class RequestTest(unittest.TestCase):\n         self.assertEqual((r1.body, r2.body), ('', \"New body\"))\n         self.assertEqual((r1.headers, r2.headers), ({}, hdrs))\n \n+        # Empty attributes (which may fail if not compared properly)\n+        r3 = Request(\"http://www.example.com\", meta={'a': 1}, dont_filter=True)\n+        r4 = r3.replace(body='', meta={}, dont_filter=False)\n+        self.assertEqual(r4.body, '')\n+        self.assertEqual(r4.meta, {})\n+        assert r4.dont_filter is False\n+\n     def test_httprepr(self):\n         r1 = Request(\"http://www.example.com\")\n         self.assertEqual(r1.httprepr(), 'GET http://www.example.com HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n')\n\n@@ -97,6 +97,13 @@ class ResponseTest(unittest.TestCase):\n         self.assertEqual(r3.url, \"http://www.example.com/other\")\n         self.assertEqual(r3.encoding, \"latin1\")\n \n+        # Empty attributes (which may fail if not compared properly)\n+        r3 = Response(\"http://www.example.com\", meta={'a': 1}, flags=['cached'])\n+        r4 = r3.replace(body='', meta={}, flags=[])\n+        self.assertEqual(r4.body, '')\n+        self.assertEqual(r4.meta, {})\n+        self.assertEqual(r4.flags, [])\n+\n     def test_httprepr(self):\n         r1 = Response(\"http://www.example.com\")\n         self.assertEqual(r1.httprepr(), 'HTTP/1.1 200 OK\\r\\n\\r\\n')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d8c04407002e06bdd1b7650018540515272cbde6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 644 | Contributors (this commit): 2 | Commits (past 90d): 19 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -87,7 +87,7 @@ class Request(object):\n         \"\"\"Create a new Request with the same attributes except for those\n         given new values.\n         \"\"\"\n-        return self.__class__(url=self.url if url is None else self.url,\n+        return self.__class__(url=self.url if url is None else url,\n                               callback=callback,\n                               method=self.method if method is None else method,\n                               headers=copy.deepcopy(self.headers) if headers is None else headers,\n\n@@ -156,7 +156,8 @@ class RequestTest(unittest.TestCase):\n \n         # Empty attributes (which may fail if not compared properly)\n         r3 = Request(\"http://www.example.com\", meta={'a': 1}, dont_filter=True)\n-        r4 = r3.replace(body='', meta={}, dont_filter=False)\n+        r4 = r3.replace(url=\"http://www.example.com/2\", body='', meta={}, dont_filter=False)\n+        self.assertEqual(r4.url, \"http://www.example.com/2\")\n         self.assertEqual(r4.body, '')\n         self.assertEqual(r4.meta, {})\n         assert r4.dont_filter is False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7c4c17088afe1df9d5519223625d4fbc183e7134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 83 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,5 @@\n import unittest\n+import copy\n \n from scrapy.http import Headers\n \n@@ -73,4 +74,10 @@ class HeadersTest(unittest.TestCase):\n         self.assertEqual(h.getlist('Content-Type'), ['text/html'])\n         self.assertEqual(h.getlist('X-Forwarded-For'), ['ip1', 'ip2'])\n \n+    #def test_copy(self):\n+    #    h1 = Headers({'header1': ['value1', 'value2']})\n+    #    h2 = copy.copy(h1)\n+    #    self.assertEqual(h1, h2)\n+    #    self.assertEqual(h1.getlist('header1'), h2.getlist('header1'))\n+    #    assert h1.getlist('header1') is not h2.getlist('header1')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
