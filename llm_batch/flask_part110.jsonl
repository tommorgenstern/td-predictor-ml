{"custom_id": "flask#9c02f07f9bb4c88207c2a6860742c452c35d2948", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 14 | Files Changed: 4 | Hunks: 15 | Methods Changed: 13 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 51 | Churn Cumulative: 6253 | Contributors (this commit): 54 | Commits (past 90d): 9 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,3 @@\n-from markupsafe import escape\n-from markupsafe import Markup\n-\n from . import json as json\n from .app import Flask as Flask\n from .app import Request as Request\n@@ -68,4 +65,28 @@ def __getattr__(name):\n         )\n         return __request_ctx_stack\n \n+    if name == \"escape\":\n+        import warnings\n+        from markupsafe import escape\n+\n+        warnings.warn(\n+            \"'flask.escape' is deprecated and will be removed in Flask 2.4. Import\"\n+            \" 'markupsafe.escape' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return escape\n+\n+    if name == \"escape\":\n+        import warnings\n+        from markupsafe import Markup\n+\n+        warnings.warn(\n+            \"'flask.Markup' is deprecated and will be removed in Flask 2.4. Import\"\n+            \" 'markupsafe.Markup' instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return Markup\n+\n     raise AttributeError(name)\n\n@@ -9,6 +9,7 @@ from platform import python_implementation\n \n import pytest\n import werkzeug.serving\n+from markupsafe import Markup\n from werkzeug.exceptions import BadRequest\n from werkzeug.exceptions import Forbidden\n from werkzeug.exceptions import NotFound\n@@ -472,7 +473,7 @@ def test_session_special_types(app, client):\n     def dump_session_contents():\n         flask.session[\"t\"] = (1, 2, 3)\n         flask.session[\"b\"] = b\"\\xff\"\n-        flask.session[\"m\"] = flask.Markup(\"<html>\")\n+        flask.session[\"m\"] = Markup(\"<html>\")\n         flask.session[\"u\"] = the_uuid\n         flask.session[\"d\"] = now\n         flask.session[\"t_tag\"] = {\" t\": \"not-a-tuple\"}\n@@ -486,8 +487,8 @@ def test_session_special_types(app, client):\n         assert s[\"t\"] == (1, 2, 3)\n         assert type(s[\"b\"]) == bytes\n         assert s[\"b\"] == b\"\\xff\"\n-        assert type(s[\"m\"]) == flask.Markup\n-        assert s[\"m\"] == flask.Markup(\"<html>\")\n+        assert type(s[\"m\"]) == Markup\n+        assert s[\"m\"] == Markup(\"<html>\")\n         assert s[\"u\"] == the_uuid\n         assert s[\"d\"] == now\n         assert s[\"t_tag\"] == {\" t\": \"not-a-tuple\"}\n@@ -611,7 +612,7 @@ def test_extended_flashing(app):\n     def index():\n         flask.flash(\"Hello World\")\n         flask.flash(\"Hello World\", \"error\")\n-        flask.flash(flask.Markup(\"<em>Testing</em>\"), \"warning\")\n+        flask.flash(Markup(\"<em>Testing</em>\"), \"warning\")\n         return \"\"\n \n     @app.route(\"/test/\")\n@@ -620,7 +621,7 @@ def test_extended_flashing(app):\n         assert list(messages) == [\n             \"Hello World\",\n             \"Hello World\",\n-            flask.Markup(\"<em>Testing</em>\"),\n+            Markup(\"<em>Testing</em>\"),\n         ]\n         return \"\"\n \n@@ -631,7 +632,7 @@ def test_extended_flashing(app):\n         assert list(messages) == [\n             (\"message\", \"Hello World\"),\n             (\"error\", \"Hello World\"),\n-            (\"warning\", flask.Markup(\"<em>Testing</em>\")),\n+            (\"warning\", Markup(\"<em>Testing</em>\")),\n         ]\n         return \"\"\n \n@@ -650,7 +651,7 @@ def test_extended_flashing(app):\n         )\n         assert list(messages) == [\n             (\"message\", \"Hello World\"),\n-            (\"warning\", flask.Markup(\"<em>Testing</em>\")),\n+            (\"warning\", Markup(\"<em>Testing</em>\")),\n         ]\n         return \"\"\n \n@@ -659,7 +660,7 @@ def test_extended_flashing(app):\n         messages = flask.get_flashed_messages(category_filter=[\"message\", \"warning\"])\n         assert len(messages) == 2\n         assert messages[0] == \"Hello World\"\n-        assert messages[1] == flask.Markup(\"<em>Testing</em>\")\n+        assert messages[1] == Markup(\"<em>Testing</em>\")\n         return \"\"\n \n     # Create new test client on each test to clean flashed messages.\n\n@@ -3,8 +3,8 @@ from datetime import timezone\n from uuid import uuid4\n \n import pytest\n+from markupsafe import Markup\n \n-from flask import Markup\n from flask.json.tag import JSONTag\n from flask.json.tag import TaggedJSONSerializer\n \n\n@@ -3,6 +3,7 @@ import logging\n import pytest\n import werkzeug.serving\n from jinja2 import TemplateNotFound\n+from markupsafe import Markup\n \n import flask\n \n@@ -73,7 +74,7 @@ def test_escaping(app, client):\n     @app.route(\"/\")\n     def index():\n         return flask.render_template(\n-            \"escaping_template.html\", text=text, html=flask.Markup(text)\n+            \"escaping_template.html\", text=text, html=Markup(text)\n         )\n \n     lines = client.get(\"/\").data.splitlines()\n@@ -93,7 +94,7 @@ def test_no_escaping(app, client):\n     @app.route(\"/\")\n     def index():\n         return flask.render_template(\n-            \"non_escaping_template.txt\", text=text, html=flask.Markup(text)\n+            \"non_escaping_template.txt\", text=text, html=Markup(text)\n         )\n \n     lines = client.get(\"/\").data.splitlines()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a33c1785412075c09f9f55b3e25f2bc995ca461", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 7943 | Contributors (this commit): 67 | Commits (past 90d): 9 | Contributors (cumulative): 73 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,6 @@ import weakref\n from collections.abc import Iterator as _abc_Iterator\n from datetime import timedelta\n from itertools import chain\n-from threading import Lock\n from types import TracebackType\n \n import click\n@@ -496,7 +495,6 @@ class Flask(Scaffold):\n         # tracks internally if the application already handled at least one\n         # request.\n         self._got_first_request = False\n-        self._before_request_lock = Lock()\n \n         # Add a static route using the provided static_url_path, static_host,\n         # and static_folder if there is a configured static_folder.\n@@ -592,8 +590,18 @@ class Flask(Scaffold):\n         \"\"\"This attribute is set to ``True`` if the application started\n         handling the first request.\n \n+        .. deprecated:: 2.3\n+            Will be removed in Flask 2.4.\n+\n         .. versionadded:: 0.8\n         \"\"\"\n+        import warnings\n+\n+        warnings.warn(\n+            \"'got_first_request' is deprecated and will be removed in Flask 2.4.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         return self._got_first_request\n \n     def make_config(self, instance_relative: bool = False) -> Config:\n\n@@ -1657,7 +1657,6 @@ def test_no_setup_after_first_request(app, client):\n     def index():\n         return \"Awesome\"\n \n-    assert not app.got_first_request\n     assert client.get(\"/\").data == b\"Awesome\"\n \n     with pytest.raises(AssertionError) as exc_info:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fc03d0dfab64945169e1114cdc1fb39519a1e0c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 1319 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -207,19 +207,12 @@ class Blueprint(Scaffold):\n \n     def _check_setup_finished(self, f_name: str) -> None:\n         if self._got_registered_once:\n-            import warnings\n-\n-            warnings.warn(\n-                f\"The setup method '{f_name}' can no longer be called on\"\n-                f\" the blueprint '{self.name}'. It has already been\"\n-                \" registered at least once, any changes will not be\"\n-                \" applied consistently.\\n\"\n-                \"Make sure all imports, decorators, functions, etc.\"\n-                \" needed to set up the blueprint are done before\"\n-                \" registering it.\\n\"\n-                \"This warning will become an exception in Flask 2.3.\",\n-                UserWarning,\n-                stacklevel=3,\n+            raise AssertionError(\n+                f\"The setup method '{f_name}' can no longer be called on the blueprint\"\n+                f\" '{self.name}'. It has already been registered at least once, any\"\n+                \" changes will not be applied consistently.\\n\"\n+                \"Make sure all imports, decorators, functions, etc. needed to set up\"\n+                \" the blueprint are done before registering it.\"\n             )\n \n     @setupmethod\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4256fc63044fa0d9c2135443461689b1adaf386d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 10 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 7002 | Contributors (this commit): 39 | Commits (past 90d): 11 | Contributors (cumulative): 59 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,6 +26,7 @@ from werkzeug.routing import RoutingException\n from werkzeug.routing import Rule\n from werkzeug.serving import is_running_from_reloader\n from werkzeug.urls import url_quote\n+from werkzeug.utils import cached_property\n from werkzeug.utils import redirect as _wz_redirect\n from werkzeug.wrappers import Response as BaseResponse\n \n@@ -46,7 +47,6 @@ from .helpers import _split_blueprint_path\n from .helpers import get_debug_flag\n from .helpers import get_flashed_messages\n from .helpers import get_load_dotenv\n-from .helpers import locked_cached_property\n from .json.provider import DefaultJSONProvider\n from .json.provider import JSONProvider\n from .logging import create_logger\n@@ -531,7 +531,7 @@ class Flask(Scaffold):\n                 \" running it.\"\n             )\n \n-    @locked_cached_property\n+    @cached_property\n     def name(self) -> str:  # type: ignore\n         \"\"\"The name of the application.  This is usually the import name\n         with the difference that it's guessed from the run file if the\n@@ -548,7 +548,7 @@ class Flask(Scaffold):\n             return os.path.splitext(os.path.basename(fn))[0]\n         return self.import_name\n \n-    @locked_cached_property\n+    @cached_property\n     def logger(self) -> logging.Logger:\n         \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n         the same name as :attr:`name`.\n@@ -575,7 +575,7 @@ class Flask(Scaffold):\n         \"\"\"\n         return create_logger(self)\n \n-    @locked_cached_property\n+    @cached_property\n     def jinja_env(self) -> Environment:\n         \"\"\"The Jinja environment used to load templates.\n \n\n@@ -613,6 +613,10 @@ class locked_cached_property(werkzeug.utils.cached_property):\n     :class:`werkzeug.utils.cached_property` except access uses a lock\n     for thread safety.\n \n+    .. deprecated:: 2.3\n+        Will be removed in Flask 2.4. Use a lock inside the decorated function if\n+        locking is needed.\n+\n     .. versionchanged:: 2.0\n         Inherits from Werkzeug's ``cached_property`` (and ``property``).\n     \"\"\"\n@@ -623,6 +627,14 @@ class locked_cached_property(werkzeug.utils.cached_property):\n         name: t.Optional[str] = None,\n         doc: t.Optional[str] = None,\n     ) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"'locked_cached_property' is deprecated and will be removed in Flask 2.4.\"\n+            \" Use a lock inside the decorated function if locking is needed.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         super().__init__(fget, name=name, doc=doc)\n         self.lock = RLock()\n \n\n@@ -11,12 +11,12 @@ from functools import update_wrapper\n from jinja2 import FileSystemLoader\n from werkzeug.exceptions import default_exceptions\n from werkzeug.exceptions import HTTPException\n+from werkzeug.utils import cached_property\n \n from . import typing as ft\n from .cli import AppGroup\n from .globals import current_app\n from .helpers import get_root_path\n-from .helpers import locked_cached_property\n from .helpers import send_from_directory\n from .templating import _default_template_ctx_processor\n \n@@ -317,7 +317,7 @@ class Scaffold:\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    @locked_cached_property\n+    @cached_property\n     def jinja_loader(self) -> t.Optional[FileSystemLoader]:\n         \"\"\"The Jinja loader for this object's templates. By default this\n         is a class :class:`jinja2.loaders.FileSystemLoader` to\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b10b6d4af1127fdfb0a74221af0c020ced71fece", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 1613 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        text: bool = True,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,8 +245,8 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n-            import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -254,14 +255,18 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param text: Open the file in text or binary mode.\n         :return: ``True`` if the file was loaded successfully.\n \n+        .. versionchanged:: 2.3\n+            The ``text`` parameter was added.\n+\n         .. versionadded:: 2.0\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, \"r\" if text else \"rb\") as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n\n@@ -6,7 +6,6 @@ import pytest\n \n import flask\n \n-\n # config keys used for the TestConfig\n TEST_KEY = \"foo\"\n SECRET_KEY = \"config\"\n@@ -30,13 +29,23 @@ def test_config_from_object():\n     common_object_test(app)\n \n \n-def test_config_from_file():\n+def test_config_from_file_json():\n     app = flask.Flask(__name__)\n     current_dir = os.path.dirname(os.path.abspath(__file__))\n     app.config.from_file(os.path.join(current_dir, \"static\", \"config.json\"), json.load)\n     common_object_test(app)\n \n \n+def test_config_from_file_toml():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, text=False\n+    )\n+    common_object_test(app)\n+\n+\n def test_from_prefixed_env(monkeypatch):\n     monkeypatch.setenv(\"FLASK_STRING\", \"value\")\n     monkeypatch.setenv(\"FLASK_BOOL\", \"true\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c4b39ba2f3fede0555f18fc03b0f2499bb0d424b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 27/27 | Churn Δ: 9 | Churn Cumulative: 3494 | Contributors (this commit): 27 | Commits (past 90d): 7 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,6 +11,7 @@ from datetime import timedelta\n from itertools import chain\n from threading import Lock\n from types import TracebackType\n+from urllib.parse import quote as _url_quote\n \n import click\n from werkzeug.datastructures import Headers\n@@ -27,7 +28,6 @@ from werkzeug.routing import RequestRedirect\n from werkzeug.routing import RoutingException\n from werkzeug.routing import Rule\n from werkzeug.serving import is_running_from_reloader\n-from werkzeug.urls import url_quote\n from werkzeug.utils import redirect as _wz_redirect\n from werkzeug.wrappers import Response as BaseResponse\n \n@@ -2034,7 +2034,8 @@ class Flask(Scaffold):\n             return self.handle_url_build_error(error, endpoint, values)\n \n         if _anchor is not None:\n-            rv = f\"{rv}#{url_quote(_anchor)}\"\n+            _anchor = _url_quote(_anchor, safe=\"%!#$&'()*+,/:;=?@\")\n+            rv = f\"{rv}#{_anchor}\"\n \n         return rv\n \n\n@@ -3,11 +3,11 @@ from contextlib import contextmanager\n from contextlib import ExitStack\n from copy import copy\n from types import TracebackType\n+from urllib.parse import urlsplit\n \n import werkzeug.test\n from click.testing import CliRunner\n from werkzeug.test import Client\n-from werkzeug.urls import url_parse\n from werkzeug.wrappers import Request as BaseRequest\n \n from .cli import ScriptInfo\n@@ -68,7 +68,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n             if url_scheme is None:\n                 url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n \n-            url = url_parse(path)\n+            url = urlsplit(path)\n             base_url = (\n                 f\"{url.scheme or url_scheme}://{url.netloc or http_host}\"\n                 f\"/{app_root.lstrip('/')}\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b8b410014d85f9861acc87c5f21c9a55a42d09c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 8 | Churn Cumulative: 3288 | Contributors (this commit): 26 | Commits (past 90d): 9 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -190,6 +190,9 @@ class Blueprint(Scaffold):\n             root_path=root_path,\n         )\n \n+        if not name:\n+            raise ValueError(\"'name' may not be empty.\")\n+\n         if \".\" in name:\n             raise ValueError(\"'name' may not contain a dot '.' character.\")\n \n\n@@ -256,6 +256,11 @@ def test_dotted_name_not_allowed(app, client):\n         flask.Blueprint(\"app.ui\", __name__)\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+\n def test_dotted_names_from_app(app, client):\n     test = flask.Blueprint(\"test\", __name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#04c21387dbc454fb59cae9c9bb21a13358cb5a34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 56 | Files Changed: 4 | Hunks: 15 | Methods Changed: 7 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 101 | Churn Cumulative: 6822 | Contributors (this commit): 51 | Commits (past 90d): 10 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,7 +11,6 @@ from werkzeug.test import Client\n from werkzeug.wrappers import Request as BaseRequest\n \n from .cli import ScriptInfo\n-from .globals import _cv_request\n from .sessions import SessionMixin\n \n if t.TYPE_CHECKING:  # pragma: no cover\n@@ -137,40 +136,45 @@ class FlaskClient(Client):\n         :meth:`~flask.Flask.test_request_context` which are directly\n         passed through.\n         \"\"\"\n-        if self.cookie_jar is None:\n-            raise RuntimeError(\n-                \"Session transactions only make sense with cookies enabled.\"\n+        # new cookie interface for Werkzeug >= 2.3\n+        cookie_storage = self._cookies if hasattr(self, \"_cookies\") else self.cookie_jar\n+\n+        if cookie_storage is None:\n+            raise TypeError(\n+                \"Cookies are disabled. Create a client with 'use_cookies=True'.\"\n             )\n+\n         app = self.application\n-        environ_overrides = kwargs.setdefault(\"environ_overrides\", {})\n-        self.cookie_jar.inject_wsgi(environ_overrides)\n-        outer_reqctx = _cv_request.get(None)\n-        with app.test_request_context(*args, **kwargs) as c:\n-            session_interface = app.session_interface\n-            sess = session_interface.open_session(app, c.request)\n+        ctx = app.test_request_context(*args, **kwargs)\n+\n+        if hasattr(self, \"_add_cookies_to_wsgi\"):\n+            self._add_cookies_to_wsgi(ctx.request.environ)\n+        else:\n+            self.cookie_jar.inject_wsgi(ctx.request.environ)  # type: ignore[union-attr]\n+\n+        with ctx:\n+            sess = app.session_interface.open_session(app, ctx.request)\n+\n         if sess is None:\n-                raise RuntimeError(\n-                    \"Session backend did not open a session. Check the configuration\"\n-                )\n+            raise RuntimeError(\"Session backend did not open a session.\")\n \n-            # Since we have to open a new request context for the session\n-            # handling we want to make sure that we hide out own context\n-            # from the caller.  By pushing the original request context\n-            # (or None) on top of this and popping it we get exactly that\n-            # behavior.  It's important to not use the push and pop\n-            # methods of the actual request context object since that would\n-            # mean that cleanup handlers are called\n-            token = _cv_request.set(outer_reqctx)  # type: ignore[arg-type]\n-            try:\n         yield sess\n-            finally:\n-                _cv_request.reset(token)\n-\n         resp = app.response_class()\n-            if not session_interface.is_null_session(sess):\n-                session_interface.save_session(app, sess, resp)\n-            headers = resp.get_wsgi_headers(c.request.environ)\n-            self.cookie_jar.extract_wsgi(c.request.environ, headers)\n+\n+        if app.session_interface.is_null_session(sess):\n+            return\n+\n+        with ctx:\n+            app.session_interface.save_session(app, sess, resp)\n+\n+        if hasattr(self, \"_update_cookies_from_response\"):\n+            self._update_cookies_from_response(\n+                ctx.request.host.partition(\":\")[0], resp.headers.getlist(\"Set-Cookie\")\n+            )\n+        else:\n+            self.cookie_jar.extract_wsgi(  # type: ignore[union-attr]\n+                ctx.request.environ, resp.headers\n+            )\n \n     def _copy_environ(self, other):\n         out = {**self.environ_base, **other}\n\n@@ -261,8 +261,9 @@ def test_session_using_server_name(app, client):\n         return \"Hello World\"\n \n     rv = client.get(\"/\", \"http://example.com/\")\n-    assert \"domain=.example.com\" in rv.headers[\"set-cookie\"].lower()\n-    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    # or condition for Werkzeug < 2.3\n+    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n \n \n def test_session_using_server_name_and_port(app, client):\n@@ -274,8 +275,9 @@ def test_session_using_server_name_and_port(app, client):\n         return \"Hello World\"\n \n     rv = client.get(\"/\", \"http://example.com:8080/\")\n-    assert \"domain=.example.com\" in rv.headers[\"set-cookie\"].lower()\n-    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n+    cookie = rv.headers[\"set-cookie\"].lower()\n+    # or condition for Werkzeug < 2.3\n+    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n \n \n def test_session_using_server_name_port_and_path(app, client):\n@@ -337,7 +339,8 @@ def test_session_using_session_settings(app, client):\n \n     rv = client.get(\"/\", \"http://www.example.com:8080/test/\")\n     cookie = rv.headers[\"set-cookie\"].lower()\n-    assert \"domain=.example.com\" in cookie\n+    # or condition for Werkzeug < 2.3\n+    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n     assert \"path=/\" in cookie\n     assert \"secure\" in cookie\n     assert \"httponly\" not in cookie\n@@ -346,7 +349,8 @@ def test_session_using_session_settings(app, client):\n     rv = client.get(\"/clear\", \"http://www.example.com:8080/test/\")\n     cookie = rv.headers[\"set-cookie\"].lower()\n     assert \"session=;\" in cookie\n-    assert \"domain=.example.com\" in cookie\n+    # or condition for Werkzeug < 2.3\n+    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n     assert \"path=/\" in cookie\n     assert \"secure\" in cookie\n     assert \"samesite\" in cookie\n\n@@ -267,25 +267,6 @@ def _has_encoding(name):\n         return False\n \n \n-@pytest.mark.skipif(\n-    not _has_encoding(\"euc-kr\"), reason=\"The euc-kr encoding is required.\"\n-)\n-def test_modified_url_encoding(app, client):\n-    class ModifiedRequest(flask.Request):\n-        url_charset = \"euc-kr\"\n-\n-    app.request_class = ModifiedRequest\n-    app.url_map.charset = \"euc-kr\"\n-\n-    @app.route(\"/\")\n-    def index():\n-        return flask.request.args[\"foo\"]\n-\n-    rv = client.get(\"/\", query_string={\"foo\": \"정상처리\"}, charset=\"euc-kr\")\n-    assert rv.status_code == 200\n-    assert rv.get_data(as_text=True) == \"정상처리\"\n-\n-\n def test_json_key_sorting(app, client):\n     app.debug = True\n     assert app.json.sort_keys\n\n@@ -206,10 +206,10 @@ def test_session_transactions_keep_context(app, client, req_ctx):\n \n def test_session_transaction_needs_cookies(app):\n     c = app.test_client(use_cookies=False)\n-    with pytest.raises(RuntimeError) as e:\n+\n+    with pytest.raises(TypeError, match=\"Cookies are disabled.\"):\n         with c.session_transaction():\n             pass\n-    assert \"cookies\" in str(e.value)\n \n \n def test_test_client_context_binding(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c24f8c8199f8ceda7a7cfb5e91773eba595f5b67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 113 | Files Changed: 3 | Hunks: 15 | Methods Changed: 12 | Complexity Δ (Sum/Max): -21/0 | Churn Δ: 131 | Churn Cumulative: 7155 | Contributors (this commit): 57 | Commits (past 90d): 11 | Contributors (cumulative): 69 | DMM Complexity: 0.6065573770491803\n\nDIFF:\n@@ -3,6 +3,7 @@ import pkgutil\n import socket\n import sys\n import typing as t\n+import warnings\n from datetime import datetime\n from functools import lru_cache\n from functools import update_wrapper\n@@ -662,7 +663,16 @@ def is_ip(value: str) -> bool:\n \n     :return: True if string is an IP address\n     :rtype: bool\n+\n+    .. deprecated:: 2.3\n+        Will be removed in Flask 2.4.\n     \"\"\"\n+    warnings.warn(\n+        \"The 'is_ip' function is deprecated and will be removed in Flask 2.4.\",\n+        DeprecationWarning,\n+        stacklevel=2,\n+    )\n+\n     for family in (socket.AF_INET, socket.AF_INET6):\n         try:\n             socket.inet_pton(family, value)\n\n@@ -1,6 +1,5 @@\n import hashlib\n import typing as t\n-import warnings\n from collections.abc import MutableMapping\n from datetime import datetime\n from datetime import timezone\n@@ -9,7 +8,6 @@ from itsdangerous import BadSignature\n from itsdangerous import URLSafeTimedSerializer\n from werkzeug.datastructures import CallbackDict\n \n-from .helpers import is_ip\n from .json.tag import TaggedJSONSerializer\n \n if t.TYPE_CHECKING:  # pragma: no cover\n@@ -181,63 +179,18 @@ class SessionInterface:\n         return app.config[\"SESSION_COOKIE_NAME\"]\n \n     def get_cookie_domain(self, app: \"Flask\") -> t.Optional[str]:\n-        \"\"\"Returns the domain that should be set for the session cookie.\n+        \"\"\"The value of the ``Domain`` parameter on the session cookie. If not set,\n+        browsers will only send the cookie to the exact domain it was set from.\n+        Otherwise, they will send it to any subdomain of the given value as well.\n \n-        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise\n-        falls back to detecting the domain based on ``SERVER_NAME``.\n+        Uses the :data:`SESSION_COOKIE_DOMAIN` config.\n \n-        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is\n-        updated to avoid re-running the logic.\n+        .. versionchanged:: 2.3\n+            Not set by default, does not fall back to ``SERVER_NAME``.\n         \"\"\"\n-\n         rv = app.config[\"SESSION_COOKIE_DOMAIN\"]\n-\n-        # set explicitly, or cached from SERVER_NAME detection\n-        # if False, return None\n-        if rv is not None:\n         return rv if rv else None\n \n-        rv = app.config[\"SERVER_NAME\"]\n-\n-        # server name not set, cache False to return none next time\n-        if not rv:\n-            app.config[\"SESSION_COOKIE_DOMAIN\"] = False\n-            return None\n-\n-        # chop off the port which is usually not supported by browsers\n-        # remove any leading '.' since we'll add that later\n-        rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")\n-\n-        if \".\" not in rv:\n-            # Chrome doesn't allow names without a '.'. This should only\n-            # come up with localhost. Hack around this by not setting\n-            # the name, and show a warning.\n-            warnings.warn(\n-                f\"{rv!r} is not a valid cookie domain, it must contain\"\n-                \" a '.'. Add an entry to your hosts file, for example\"\n-                f\" '{rv}.localdomain', and use that instead.\"\n-            )\n-            app.config[\"SESSION_COOKIE_DOMAIN\"] = False\n-            return None\n-\n-        ip = is_ip(rv)\n-\n-        if ip:\n-            warnings.warn(\n-                \"The session cookie domain is an IP address. This may not work\"\n-                \" as intended in some browsers. Add an entry to your hosts\"\n-                ' file, for example \"localhost.localdomain\", and use that'\n-                \" instead.\"\n-            )\n-\n-        # if this is not an ip and app is mounted at the root, allow subdomain\n-        # matching by adding a '.' prefix\n-        if self.get_cookie_path(app) == \"/\" and not ip:\n-            rv = f\".{rv}\"\n-\n-        app.config[\"SESSION_COOKIE_DOMAIN\"] = rv\n-        return rv\n-\n     def get_cookie_path(self, app: \"Flask\") -> str:\n         \"\"\"Returns the path for which the cookie should be valid.  The\n         default implementation uses the value from the ``SESSION_COOKIE_PATH``\n\n@@ -251,36 +251,8 @@ def test_session(app, client):\n     assert client.get(\"/get\").data == b\"42\"\n \n \n-def test_session_using_server_name(app, client):\n-    app.config.update(SERVER_NAME=\"example.com\")\n-\n-    @app.route(\"/\")\n-    def index():\n-        flask.session[\"testing\"] = 42\n-        return \"Hello World\"\n-\n-    rv = client.get(\"/\", \"http://example.com/\")\n-    cookie = rv.headers[\"set-cookie\"].lower()\n-    # or condition for Werkzeug < 2.3\n-    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n-\n-\n-def test_session_using_server_name_and_port(app, client):\n-    app.config.update(SERVER_NAME=\"example.com:8080\")\n-\n-    @app.route(\"/\")\n-    def index():\n-        flask.session[\"testing\"] = 42\n-        return \"Hello World\"\n-\n-    rv = client.get(\"/\", \"http://example.com:8080/\")\n-    cookie = rv.headers[\"set-cookie\"].lower()\n-    # or condition for Werkzeug < 2.3\n-    assert \"domain=example.com\" in cookie or \"domain=.example.com\" in cookie\n-\n-\n-def test_session_using_server_name_port_and_path(app, client):\n-    app.config.update(SERVER_NAME=\"example.com:8080\", APPLICATION_ROOT=\"/foo\")\n+def test_session_path(app, client):\n+    app.config.update(APPLICATION_ROOT=\"/foo\")\n \n     @app.route(\"/\")\n     def index():\n@@ -288,9 +260,7 @@ def test_session_using_server_name_port_and_path(app, client):\n         return \"Hello World\"\n \n     rv = client.get(\"/\", \"http://example.com:8080/foo\")\n-    assert \"domain=example.com\" in rv.headers[\"set-cookie\"].lower()\n     assert \"path=/foo\" in rv.headers[\"set-cookie\"].lower()\n-    assert \"httponly\" in rv.headers[\"set-cookie\"].lower()\n \n \n def test_session_using_application_root(app, client):\n@@ -382,34 +352,6 @@ def test_session_using_samesite_attribute(app, client):\n     assert \"samesite=lax\" in cookie\n \n \n-def test_session_localhost_warning(recwarn, app, client):\n-    app.config.update(SERVER_NAME=\"localhost:5000\")\n-\n-    @app.route(\"/\")\n-    def index():\n-        flask.session[\"testing\"] = 42\n-        return \"testing\"\n-\n-    rv = client.get(\"/\", \"http://localhost:5000/\")\n-    assert \"domain\" not in rv.headers[\"set-cookie\"].lower()\n-    w = recwarn.pop(UserWarning)\n-    assert \"'localhost' is not a valid cookie domain\" in str(w.message)\n-\n-\n-def test_session_ip_warning(recwarn, app, client):\n-    app.config.update(SERVER_NAME=\"127.0.0.1:5000\")\n-\n-    @app.route(\"/\")\n-    def index():\n-        flask.session[\"testing\"] = 42\n-        return \"testing\"\n-\n-    rv = client.get(\"/\", \"http://127.0.0.1:5000/\")\n-    assert \"domain=127.0.0.1\" in rv.headers[\"set-cookie\"].lower()\n-    w = recwarn.pop(UserWarning)\n-    assert \"cookie domain is an IP\" in str(w.message)\n-\n-\n def test_missing_session(app):\n     app.secret_key = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b626a9387900a9f717eb42765275adc0bf0875e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 178 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -151,7 +151,7 @@ class Response(ResponseBase):\n         Added :attr:`max_cookie_size`.\n     \"\"\"\n \n-    default_mimetype = \"text/html\"\n+    default_mimetype: t.Optional[str] = \"text/html\"\n \n     json_module = json\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9cb1a7a52d7927071e2b737d52f902f006969e82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 59 | Files Changed: 4 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 88 | Churn Cumulative: 1733 | Contributors (this commit): 22 | Commits (past 90d): 8 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -32,7 +32,6 @@ from .signals import message_flashed as message_flashed\n from .signals import request_finished as request_finished\n from .signals import request_started as request_started\n from .signals import request_tearing_down as request_tearing_down\n-from .signals import signals_available as signals_available\n from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n@@ -89,4 +88,15 @@ def __getattr__(name):\n         )\n         return Markup\n \n+    if name == \"signals_available\":\n+        import warnings\n+\n+        warnings.warn(\n+            \"'signals_available' is deprecated and will be removed in Flask 2.4.\"\n+            \" Signals are always available\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return True\n+\n     raise AttributeError(name)\n\n@@ -1,49 +1,13 @@\n-import typing as t\n+from __future__ import annotations\n+\n+import typing as t\n+import warnings\n \n-try:\n from blinker import Namespace\n \n-    signals_available = True\n-except ImportError:\n-    signals_available = False\n-\n-    class Namespace:  # type: ignore\n-        def signal(self, name: str, doc: t.Optional[str] = None) -> \"_FakeSignal\":\n-            return _FakeSignal(name, doc)\n-\n-    class _FakeSignal:\n-        \"\"\"If blinker is unavailable, create a fake class with the same\n-        interface that allows sending of signals but will fail with an\n-        error on anything else.  Instead of doing anything on send, it\n-        will just ignore the arguments and do nothing instead.\n-        \"\"\"\n-\n-        def __init__(self, name: str, doc: t.Optional[str] = None) -> None:\n-            self.name = name\n-            self.__doc__ = doc\n-\n-        def send(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n-            pass\n-\n-        def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.Any:\n-            raise RuntimeError(\n-                \"Signalling support is unavailable because the blinker\"\n-                \" library is not installed.\"\n-            ) from None\n-\n-        connect = connect_via = connected_to = temporarily_connected_to = _fail\n-        disconnect = _fail\n-        has_receivers_for = receivers_for = _fail\n-        del _fail\n-\n-\n-# The namespace for code signals.  If you are not Flask code, do\n-# not put signals in here.  Create your own namespace instead.\n+# This namespace is only for signals provided by Flask itself.\n _signals = Namespace()\n \n-\n-# Core signals.  For usage examples grep the source code or consult\n-# the API documentation in docs/api.rst as well as docs/signals.rst\n template_rendered = _signals.signal(\"template-rendered\")\n before_render_template = _signals.signal(\"before-render-template\")\n request_started = _signals.signal(\"request-started\")\n@@ -54,3 +18,16 @@ appcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")\n appcontext_pushed = _signals.signal(\"appcontext-pushed\")\n appcontext_popped = _signals.signal(\"appcontext-popped\")\n message_flashed = _signals.signal(\"message-flashed\")\n+\n+\n+def __getattr__(name: str) -> t.Any:\n+    if name == \"signals_available\":\n+        warnings.warn(\n+            \"The 'signals_available' attribute is deprecated and will be removed in\"\n+            \" Flask 2.4. Signals are always available.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return True\n+\n+    raise AttributeError(name)\n\n@@ -1,16 +1,5 @@\n-import pytest\n-\n-try:\n-    import blinker\n-except ImportError:\n-    blinker = None\n-\n import flask\n \n-pytestmark = pytest.mark.skipif(\n-    blinker is None, reason=\"Signals require the blinker library.\"\n-)\n-\n \n def test_template_rendered(app, client):\n     @app.route(\"/\")\n\n@@ -10,11 +10,6 @@ from flask.json import jsonify\n from flask.testing import EnvironBuilder\n from flask.testing import FlaskCliRunner\n \n-try:\n-    import blinker\n-except ImportError:\n-    blinker = None\n-\n \n def test_environ_defaults_from_config(app, client):\n     app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n@@ -285,7 +280,6 @@ def test_json_request_and_response(app, client):\n         assert rv.get_json() == json_data\n \n \n-@pytest.mark.skipif(blinker is None, reason=\"blinker is not installed\")\n def test_client_json_no_app_context(app, client):\n     @app.route(\"/hello\", methods=[\"POST\"])\n     def hello():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8239765a4410d13d489e299a99e4a4c6951e190b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 13 | Methods Changed: 11 | Complexity Δ (Sum/Max): -27/0 | Churn Δ: 36 | Churn Cumulative: 5842 | Contributors (this commit): 39 | Commits (past 90d): 13 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1389,7 +1389,7 @@ class Flask(Scaffold):\n         .. versionadded:: 0.3\n         \"\"\"\n         exc_info = sys.exc_info()\n-        got_request_exception.send(self, exception=e)\n+        got_request_exception.send(self, _async_wrapper=self.ensure_sync, exception=e)\n         propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]\n \n         if propagate is None:\n@@ -1493,7 +1493,7 @@ class Flask(Scaffold):\n         self._got_first_request = True\n \n         try:\n-            request_started.send(self)\n+            request_started.send(self, _async_wrapper=self.ensure_sync)\n             rv = self.preprocess_request()\n             if rv is None:\n                 rv = self.dispatch_request()\n@@ -1521,7 +1521,9 @@ class Flask(Scaffold):\n         response = self.make_response(rv)\n         try:\n             response = self.process_response(response)\n-            request_finished.send(self, response=response)\n+            request_finished.send(\n+                self, _async_wrapper=self.ensure_sync, response=response\n+            )\n         except Exception:\n             if not from_error_handler:\n                 raise\n@@ -2052,7 +2054,7 @@ class Flask(Scaffold):\n                 for func in reversed(self.teardown_request_funcs[name]):\n                     self.ensure_sync(func)(exc)\n \n-        request_tearing_down.send(self, exc=exc)\n+        request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)\n \n     def do_teardown_appcontext(\n         self, exc: t.Optional[BaseException] = _sentinel  # type: ignore\n@@ -2077,7 +2079,7 @@ class Flask(Scaffold):\n         for func in reversed(self.teardown_appcontext_funcs):\n             self.ensure_sync(func)(exc)\n \n-        appcontext_tearing_down.send(self, exc=exc)\n+        appcontext_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)\n \n     def app_context(self) -> AppContext:\n         \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n\n@@ -242,7 +242,7 @@ class AppContext:\n     def push(self) -> None:\n         \"\"\"Binds the app context to the current context.\"\"\"\n         self._cv_tokens.append(_cv_app.set(self))\n-        appcontext_pushed.send(self.app)\n+        appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)\n \n     def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore\n         \"\"\"Pops the app context.\"\"\"\n@@ -260,7 +260,7 @@ class AppContext:\n                 f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"\n             )\n \n-        appcontext_popped.send(self.app)\n+        appcontext_popped.send(self.app, _async_wrapper=self.app.ensure_sync)\n \n     def __enter__(self) -> \"AppContext\":\n         self.push()\n\n@@ -327,8 +327,10 @@ def flash(message: str, category: str = \"message\") -> None:\n     flashes = session.get(\"_flashes\", [])\n     flashes.append((category, message))\n     session[\"_flashes\"] = flashes\n+    app = current_app._get_current_object()  # type: ignore\n     message_flashed.send(\n-        current_app._get_current_object(),  # type: ignore\n+        app,\n+        _async_wrapper=app.ensure_sync,\n         message=message,\n         category=category,\n     )\n\n@@ -126,9 +126,13 @@ class DispatchingJinjaLoader(BaseLoader):\n \n def _render(app: \"Flask\", template: Template, context: t.Dict[str, t.Any]) -> str:\n     app.update_template_context(context)\n-    before_render_template.send(app, template=template, context=context)\n+    before_render_template.send(\n+        app, _async_wrapper=app.ensure_sync, template=template, context=context\n+    )\n     rv = template.render(context)\n-    template_rendered.send(app, template=template, context=context)\n+    template_rendered.send(\n+        app, _async_wrapper=app.ensure_sync, template=template, context=context\n+    )\n     return rv\n \n \n@@ -163,11 +167,15 @@ def _stream(\n     app: \"Flask\", template: Template, context: t.Dict[str, t.Any]\n ) -> t.Iterator[str]:\n     app.update_template_context(context)\n-    before_render_template.send(app, template=template, context=context)\n+    before_render_template.send(\n+        app, _async_wrapper=app.ensure_sync, template=template, context=context\n+    )\n \n     def generate() -> t.Iterator[str]:\n         yield from template.generate(context)\n-        template_rendered.send(app, template=template, context=context)\n+        template_rendered.send(\n+            app, _async_wrapper=app.ensure_sync, template=template, context=context\n+        )\n \n     rv = generate()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#84c007d34f7f0b8737310fe4d67be12c463e0130", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 49 | Files Changed: 2 | Hunks: 14 | Methods Changed: 10 | Complexity Δ (Sum/Max): 4/6 | Churn Δ: 116 | Churn Cumulative: 3175 | Contributors (this commit): 39 | Commits (past 90d): 2 | Contributors (cumulative): 45 | DMM Complexity: 0.4375\n\nDIFF:\n@@ -9,7 +9,7 @@ import sys\n import traceback\n import typing as t\n from functools import update_wrapper\n-from operator import attrgetter\n+from operator import itemgetter\n \n import click\n from click.core import ParameterSource\n@@ -989,49 +989,62 @@ def shell_command() -> None:\n @click.option(\n     \"--sort\",\n     \"-s\",\n-    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),\n     default=\"endpoint\",\n     help=(\n-        'Method to sort routes by. \"match\" is the order that Flask will match '\n-        \"routes when dispatching a request.\"\n+        \"Method to sort routes by. 'match' is the order that Flask will match routes\"\n+        \" when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n @with_appcontext\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n-\n     rules = list(current_app.url_map.iter_rules())\n+\n     if not rules:\n         click.echo(\"No routes were registered.\")\n         return\n \n-    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n+    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n+    host_matching = current_app.url_map.host_matching\n+    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n+    rows = []\n \n-    if sort in (\"endpoint\", \"rule\"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == \"methods\":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n-\n-    rule_methods = [\n-        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n+    for rule in rules:\n+        row = [\n+            rule.endpoint,\n+            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n         ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n \n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*(\"-\" * width for width in widths)))\n+        row.append(rule.rule)\n+        rows.append(row)\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    headers = [\"Endpoint\", \"Methods\"]\n+    sorts = [\"endpoint\", \"methods\"]\n+\n+    if has_domain:\n+        headers.append(\"Host\" if host_matching else \"Subdomain\")\n+        sorts.append(\"domain\")\n+\n+    headers.append(\"Rule\")\n+    sorts.append(\"rule\")\n+\n+    try:\n+        rows.sort(key=itemgetter(sorts.index(sort)))\n+    except ValueError:\n+        pass\n+\n+    rows.insert(0, headers)\n+    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n+    rows.insert(1, [\"-\" * w for w in widths])\n+    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n+\n+    for row in rows:\n+        click.echo(template.format(*row))\n \n \n cli = FlaskGroup(\n\n@@ -433,16 +433,12 @@ class TestRoutes:\n     @pytest.fixture\n     def app(self):\n         app = Flask(__name__)\n-        app.testing = True\n-\n-        @app.route(\"/get_post/<int:x>/<int:y>\", methods=[\"GET\", \"POST\"])\n-        def yyy_get_post(x, y):\n-            pass\n-\n-        @app.route(\"/zzz_post\", methods=[\"POST\"])\n-        def aaa_post():\n-            pass\n-\n+        app.add_url_rule(\n+            \"/get_post/<int:x>/<int:y>\",\n+            methods=[\"GET\", \"POST\"],\n+            endpoint=\"yyy_get_post\",\n+        )\n+        app.add_url_rule(\"/zzz_post\", methods=[\"POST\"], endpoint=\"aaa_post\")\n         return app\n \n     @pytest.fixture\n@@ -450,17 +446,6 @@ class TestRoutes:\n         cli = FlaskGroup(create_app=lambda: app)\n         return partial(runner.invoke, cli)\n \n-    @pytest.fixture\n-    def invoke_no_routes(self, runner):\n-        def create_app():\n-            app = Flask(__name__, static_folder=None)\n-            app.testing = True\n-\n-            return app\n-\n-        cli = FlaskGroup(create_app=create_app)\n-        return partial(runner.invoke, cli)\n-\n     def expect_order(self, order, output):\n         # skip the header and match the start of each row\n         for expect, line in zip(order, output.splitlines()[2:]):\n@@ -493,11 +478,31 @@ class TestRoutes:\n         output = invoke([\"routes\", \"--all-methods\"]).output\n         assert \"GET, HEAD, OPTIONS, POST\" in output\n \n-    def test_no_routes(self, invoke_no_routes):\n-        result = invoke_no_routes([\"routes\"])\n+    def test_no_routes(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n         assert result.exit_code == 0\n         assert \"No routes were registered.\" in result.output\n \n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Subdomain\" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Host\" in result.output\n+\n \n def dotenv_not_available():\n     try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
