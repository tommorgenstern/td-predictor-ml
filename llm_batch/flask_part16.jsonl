{"custom_id": "flask#d8fcd4260e9194a03267ddb913a8b5d7cf0948d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 1 | Churn Cumulative: 1827 | Contributors (this commit): 11 | Commits (past 90d): 10 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -642,6 +642,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         app.config.update(\n             SERVER_NAME='localhost.localdomain:5000'\n         )\n+\n         @app.route('/')\n         def index():\n             return None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e774e3a69eeb9a811a22e73ff87267e8bf4f9027", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 746 | Contributors (this commit): 9 | Commits (past 90d): 6 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -391,11 +391,6 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n def safe_join(directory, filename):\n     \"\"\"Safely join `directory` and `filename`.\n \n-    :param directory: the base directory.\n-    :param filename: the untrusted filename relative to that directory.\n-    :raises: :class:`~werkzeug.exceptions.NotFound` if the retsulting path\n-             would fall out of `directory`.\n-\n     Example usage::\n \n         @app.route('/wiki/<path:filename>')\n@@ -404,6 +399,10 @@ def safe_join(directory, filename):\n             with open(filename, 'rb') as fd:\n                 content = fd.read() # Read and process the file content...\n \n+    :param directory: the base directory.\n+    :param filename: the untrusted filename relative to that directory.\n+    :raises: :class:`~werkzeug.exceptions.NotFound` if the retsulting path\n+             would fall out of `directory`.\n     \"\"\"\n     filename = posixpath.normpath(filename)\n     for sep in _os_alt_seps:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a4ea3159a27d775b53774cea2d47c733a460fb93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 5 | Churn Cumulative: 1595 | Contributors (this commit): 11 | Commits (past 90d): 9 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -574,10 +574,11 @@ class Flask(_PackageBoundObject):\n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, \\\n                 'A blueprint\\'s name collision ocurred between %r and ' \\\n-                '%r.' % (blueprint, self.blueprints[blueprint.name])\n+                '%r.  Both share the same name \"%s\"' % \\\n+                (blueprint, self.blueprints[blueprint.name], blueprint.name)\n         else:\n             self.blueprints[blueprint.name] = blueprint\n-        blueprint.register(self, **options)\n+        blueprint.register(self, options)\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#017117778ec477205eaba6acab951951808a60a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 749 | Contributors (this commit): 9 | Commits (past 90d): 7 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -166,7 +166,8 @@ def url_for(endpoint, **values):\n     ==================== ======================= =============================\n \n     Variable arguments that are unknown to the target endpoint are appended\n-    to the generated URL as query arguments.\n+    to the generated URL as query arguments.  If the value of a query argument\n+    is `None`, the whole pair is skipped.\n \n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#15c937b316b16b12df2375c706bcc93e3d37d33e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 9 | Churn Cumulative: 1604 | Contributors (this commit): 12 | Commits (past 90d): 10 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -928,15 +928,6 @@ class Flask(_PackageBoundObject):\n             finally:\n                 ctx.pop()\n \n-        The big advantage of this approach is that you can use it without\n-        the try/finally statement in a shell for interactive testing:\n-\n-        >>> ctx = app.test_request_context()\n-        >>> ctx.bind()\n-        >>> request.path\n-        u'/'\n-        >>> ctx.unbind()\n-\n         .. versionchanged:: 0.3\n            Added support for non-with statement usage and `with` statement\n            is now passed the ctx object.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#57920a5808c03d7d035f592a13a71ba627fe85da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 752 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -249,7 +249,8 @@ def get_flashed_messages(with_categories=False):\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', [])\n+        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes') \\\n+            if '_flashes' in session else []\n     if not with_categories:\n         return [x[1] for x in flashes]\n     return flashes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ea77d5e12d5148e8f42e449deac64f363c5db484", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 48 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -141,8 +141,8 @@ class Config(dict):\n \n         Objects are usually either modules or classes.\n \n-        Just the uppercase variables in that object are stored in the config\n-        after lowercasing.  Example usage::\n+        Just the uppercase variables in that object are stored in the config.\n+        Example usage::\n \n             app.config.from_object('yourapplication.default_config')\n             from yourapplication import default_config\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#41952d2b259efdd89634aef7f47afc4cef6e7190", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 8 | Churn Cumulative: 142 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -73,7 +73,13 @@ class Request(RequestBase):\n         if __debug__:\n             _assert_have_json()\n         if self.mimetype == 'application/json':\n-            return json.loads(self.data)\n+            request_charset = self.mimetype_params.get('charset')\n+            if request_charset is not None:\n+                j = json.loads(self.data, encoding=request_charset )\n+            else:\n+                j = json.loads(self.data)\n+\n+            return j\n \n \n class Response(ResponseBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d90765b0265eec81130172efe3250cd1e3c900bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 1839 | Contributors (this commit): 11 | Commits (past 90d): 9 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -785,6 +785,18 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n \n class JSONTestCase(unittest.TestCase):\n \n+    def test_json_body_encoding(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/')\n+        def index():\n+            return flask.request.json\n+\n+        c = app.test_client()\n+        resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n+                     content_type='application/json; charset=iso-8859-15')\n+        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n+\n     def test_jsonify(self):\n         d = dict(a=23, b=42, c=[1, 2, 3])\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7242abcfb22c5b7321dc658766e8b6f5486ff1c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@\n \n from __future__ import absolute_import\n \n-from logging import getLogger, StreamHandler, Formatter, Logger, DEBUG\n+from logging import getLogger, StreamHandler, Formatter, getLoggerClass, DEBUG\n \n \n def create_logger(app):\n@@ -21,6 +21,7 @@ def create_logger(app):\n     function also removes all attached handlers in case there was a\n     logger with the log name before.\n     \"\"\"\n+    Logger = getLoggerClass()\n \n     class DebugLogger(Logger):\n         def getEffectiveLevel(x):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e3f2dd8f080115d626437bbee3631f7cf5560ca5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 16 | Churn Cumulative: 1855 | Contributors (this commit): 11 | Commits (past 90d): 10 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -782,6 +782,22 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             t.start()\n             t.join()\n \n+    def test_max_content_length(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        app.config['MAX_CONTENT_LENGTH'] = 64\n+        @app.route('/accept', methods=['POST'])\n+        def accept_file():\n+            flask.request.form['myfile']\n+            assert False\n+        @app.errorhandler(413)\n+        def catcher(error):\n+            return '42'\n+\n+        c = app.test_client()\n+        rv = c.post('/accept', data={'myfile': 'foo' * 100})\n+        assert rv.data == '42'\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e71a5ff8de93801c30ed6daecac4b8502aa86813", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 115 | Lines Deleted: 38 | Files Changed: 5 | Hunks: 28 | Methods Changed: 13 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 153 | Churn Cumulative: 3958 | Contributors (this commit): 16 | Commits (past 90d): 27 | Contributors (cumulative): 30 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,7 +28,7 @@ from .session import Session\n \n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n-     request_finished, got_request_exception\n+     request_finished, got_request_exception, request_tearing_down\n \n # only import json if it's available\n if json_available:\n\n@@ -27,13 +27,14 @@ from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter, _endpoint_from_view_func\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n-from .ctx import _RequestContext\n+from .ctx import RequestContext\n from .globals import _request_ctx_stack, request\n from .session import Session, _NullSession\n from .module import _ModuleSetupState\n from .templating import _DispatchingJinjaLoader, \\\n     _default_template_ctx_processor\n-from .signals import request_started, request_finished, got_request_exception\n+from .signals import request_started, request_finished, got_request_exception, \\\n+    request_tearing_down\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -126,6 +127,9 @@ class Flask(_PackageBoundObject):\n     #: For example this might activate unittest helpers that have an\n     #: additional runtime cost which should not be enabled by default.\n     #:\n+    #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\n+    #: default it's implicitly enabled.\n+    #:\n     #: This attribute can also be configured from the config with the\n     #: `TESTING` configuration key.  Defaults to `False`.\n     testing = ConfigAttribute('TESTING')\n@@ -191,6 +195,7 @@ class Flask(_PackageBoundObject):\n         'DEBUG':                                False,\n         'TESTING':                              False,\n         'PROPAGATE_EXCEPTIONS':                 None,\n+        'PRESERVE_CONTEXT_ON_EXCEPTION':        None,\n         'SECRET_KEY':                           None,\n         'SESSION_COOKIE_NAME':                  'session',\n         'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n@@ -334,6 +339,19 @@ class Flask(_PackageBoundObject):\n             return rv\n         return self.testing or self.debug\n \n+    @property\n+    def preserve_context_on_exception(self):\n+        \"\"\"Returns the value of the `PRESERVE_CONTEXT_ON_EXCEPTION`\n+        configuration value in case it's set, otherwise a sensible default\n+        is returned.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        rv = self.config['PRESERVE_CONTEXT_ON_EXCEPTION']\n+        if rv is not None:\n+            return rv\n+        return self.debug\n+\n     @property\n     def logger(self):\n         \"\"\"A :class:`logging.Logger` object for this application.  The\n@@ -716,13 +734,35 @@ class Flask(_PackageBoundObject):\n         \"\"\"Register a function to be run after each request.  Your function\n         must take one parameter, a :attr:`response_class` object and return\n         a new response object or the same (see :meth:`process_response`).\n+\n+        As of Flask 0.7 this function might not be executed at the end of the\n+        request in case an unhandled exception ocurred.\n         \"\"\"\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n     def teardown_request(self, f):\n         \"\"\"Register a function to be run at the end of each request,\n-        regardless of whether there was an exception or not.\n+        regardless of whether there was an exception or not.  These functions\n+        are executed when the request context is popped, even if not an\n+        actual request was performed.\n+\n+        Example::\n+\n+            ctx = app.test_request_context()\n+            ctx.push()\n+            ...\n+            ctx.pop()\n+\n+        When ``ctx.pop()`` is executed in the above example, the teardown\n+        functions are called just before the request context moves from the\n+        stack of active contexts.  This becomes relevant if you are using\n+        such constructs in tests.\n+\n+        Generally teardown functions must take every necesary step to avoid\n+        that they will fail.  If they do execute code that might fail they\n+        will have to surround the execution of these code by try/except\n+        statements and log ocurring errors.\n         \"\"\"\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -770,9 +810,12 @@ class Flask(_PackageBoundObject):\n         return value of the view or error handler.  This does not have to\n         be a response object.  In order to convert the return value to a\n         proper response object, call :func:`make_response`.\n+\n+        .. versionchanged:: 0.7\n+           This no longer does the exception handling, this code was\n+           moved to the new :meth:`full_dispatch_request`.\n         \"\"\"\n         req = _request_ctx_stack.top.request\n-        try:\n         if req.routing_exception is not None:\n             raise req.routing_exception\n         rule = req.url_rule\n@@ -783,8 +826,23 @@ class Flask(_PackageBoundObject):\n             return self.make_default_options_response()\n         # otherwise dispatch to the handler for that endpoint\n         return self.view_functions[rule.endpoint](**req.view_args)\n+\n+    def full_dispatch_request(self):\n+        \"\"\"Dispatches the request and on top of that performs request\n+        pre and postprocessing as well as HTTP exception catching and\n+        error handling.\n+        \"\"\"\n+        try:\n+            request_started.send(self)\n+            rv = self.preprocess_request()\n+            if rv is None:\n+                rv = self.dispatch_request()\n         except HTTPException, e:\n-            return self.handle_http_exception(e)\n+            rv = self.handle_http_exception(e)\n+        response = self.make_response(rv)\n+        response = self.process_response(response)\n+        request_finished.send(self, response=response)\n+        return response\n \n     def make_default_options_response(self):\n         \"\"\"This method is called to create the default `OPTIONS` response.\n@@ -894,7 +952,10 @@ class Flask(_PackageBoundObject):\n \n     def do_teardown_request(self):\n         \"\"\"Called after the actual request dispatching and will\n-        call every as :meth:`teardown_request` decorated function.\n+        call every as :meth:`teardown_request` decorated function.  This is\n+        not actually called by the :class:`Flask` object itself but is always\n+        triggered when the request context is popped.  That way we have a\n+        tighter control over certain resources under testing environments.\n         \"\"\"\n         funcs = reversed(self.teardown_request_funcs.get(None, ()))\n         mod = request.module\n@@ -905,12 +966,13 @@ class Flask(_PackageBoundObject):\n             rv = func(exc)\n             if rv is not None:\n                 return rv\n+        request_tearing_down.send(self)\n \n     def request_context(self, environ):\n-        \"\"\"Creates a request context from the given environment and binds\n-        it to the current context.  This must be used in combination with\n-        the `with` statement because the request is only bound to the\n-        current context for the duration of the `with` block.\n+        \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given\n+        environment and binds it to the current context.  This must be used in\n+        combination with the `with` statement because the request is only bound\n+        to the current context for the duration of the `with` block.\n \n         Example usage::\n \n@@ -934,7 +996,7 @@ class Flask(_PackageBoundObject):\n \n         :param environ: a WSGI environment\n         \"\"\"\n-        return _RequestContext(self, environ)\n+        return RequestContext(self, environ)\n \n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n@@ -969,16 +1031,11 @@ class Flask(_PackageBoundObject):\n         Then you still have the original application object around and\n         can continue to call methods on it.\n \n-        .. versionchanged:: 0.4\n-           The :meth:`after_request` functions are now called even if an\n-           error handler took over request processing.  This ensures that\n-           even if an exception happens database have the chance to\n-           properly close the connection.\n-\n         .. versionchanged:: 0.7\n-           The :meth:`teardown_request` functions get called at the very end of\n-           processing the request. If an exception was thrown, it gets passed to\n-           each teardown_request function.\n+           The behavior of the before and after request callbacks was changed\n+           under error conditions and a new callback was added that will\n+           always execute at the end of the request, independent on if an\n+           error ocurred or not.  See :ref:`callbacks-and-errors`.\n \n         :param environ: a WSGI environment\n         :param start_response: a callable accepting a status code,\n@@ -987,20 +1044,9 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         with self.request_context(environ):\n             try:\n-                request_started.send(self)\n-                rv = self.preprocess_request()\n-                if rv is None:\n-                    rv = self.dispatch_request()\n-                response = self.make_response(rv)\n+                response = self.full_dispatch_request()\n             except Exception, e:\n                 response = self.make_response(self.handle_exception(e))\n-            try:\n-                response = self.process_response(response)\n-            except Exception, e:\n-                response = self.make_response(self.handle_exception(e))\n-            finally:\n-                self.do_teardown_request()\n-            request_finished.send(self, response=response)\n             return response(environ, start_response)\n \n     def __call__(self, environ, start_response):\n\n@@ -51,11 +51,34 @@ def has_request_context():\n     return _request_ctx_stack.top is not None\n \n \n-class _RequestContext(object):\n+class RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n     `_request_ctx_stack` and removed at the end of it.  It will create the\n     URL adapter and request object for the WSGI environment provided.\n+\n+    Do not attempt to use this class directly, instead use\n+    :meth:`~flask.Flask.test_request_context` and\n+    :meth:`~flask.Flask.request_context` to create this object.\n+\n+    When the request context is popped, it will evaluate all the\n+    functions registered on the application for teardown execution\n+    (:meth:`~flask.Flask.teardown_request`).\n+\n+    The request context is automatically popped at the end of the request\n+    for you.  In debug mode the request context is kept around if\n+    exceptions happen so that interactive debuggers have a chance to\n+    introspect the data.  With 0.4 this can also be forced for requests\n+    that did not fail and outside of `DEBUG` mode.  By setting\n+    ``'flask._preserve_context'`` to `True` on the WSGI environment the\n+    context will not pop itself at the end of the request.  This is used by\n+    the :meth:`~flask.Flask.test_client` for example to implement the\n+    deferred cleanup functionality.\n+\n+    You might find this helpful for unittests where you need the\n+    information from the context local around for a little longer.  Make\n+    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in\n+    that situation, otherwise your unittests will leak memory.\n     \"\"\"\n \n     def __init__(self, app, environ):\n@@ -74,7 +97,7 @@ class _RequestContext(object):\n             self.request.routing_exception = e\n \n     def push(self):\n-        \"\"\"Binds the request context.\"\"\"\n+        \"\"\"Binds the request context to the current context.\"\"\"\n         _request_ctx_stack.push(self)\n \n         # Open the session at the moment that the request context is\n@@ -85,7 +108,11 @@ class _RequestContext(object):\n             self.session = _NullSession()\n \n     def pop(self):\n-        \"\"\"Pops the request context.\"\"\"\n+        \"\"\"Pops the request context and unbinds it by doing that.  This will\n+        also trigger the execution of functions registered by the\n+        :meth:`~flask.Flask.teardown_request` decorator.\n+        \"\"\"\n+        self.app.do_teardown_request()\n         _request_ctx_stack.pop()\n \n     def __enter__(self):\n@@ -99,5 +126,5 @@ class _RequestContext(object):\n         # the context can be force kept alive for the test client.\n         # See flask.testing for how this works.\n         if not self.request.environ.get('flask._preserve_context') and \\\n-           (tb is None or not self.app.debug):\n+           (tb is None or not self.app.preserve_context_on_exception):\n             self.pop()\n\n@@ -47,4 +47,5 @@ _signals = Namespace()\n template_rendered = _signals.signal('template-rendered')\n request_started = _signals.signal('request-started')\n request_finished = _signals.signal('request-finished')\n+request_tearing_down = _signals.signal('request-tearing-down')\n got_request_exception = _signals.signal('got-request-exception')\n\n@@ -784,8 +784,11 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n \n     def test_max_content_length(self):\n         app = flask.Flask(__name__)\n-        app.debug = True\n         app.config['MAX_CONTENT_LENGTH'] = 64\n+        @app.before_request\n+        def always_first():\n+            flask.request.form['myfile']\n+            assert False\n         @app.route('/accept', methods=['POST'])\n         def accept_file():\n             flask.request.form['myfile']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ba6bf23e0d08ca0b9163b4e5c37b3d2fd274b1b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 33 | Files Changed: 1 | Hunks: 4 | Methods Changed: 8 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 46 | Churn Cumulative: 1906 | Contributors (this commit): 11 | Commits (past 90d): 12 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -398,37 +398,6 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'after' in evts\n         assert rv == 'request|after'\n \n-    def test_after_request_errors(self):\n-        app = flask.Flask(__name__)\n-        called = []\n-        @app.after_request\n-        def after_request(response):\n-            called.append(True)\n-            return response\n-        @app.route('/')\n-        def fails():\n-            1/0\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n-        assert 'Internal Server Error' in rv.data\n-        assert len(called) == 1\n-\n-    def test_after_request_handler_error(self):\n-        called = []\n-        app = flask.Flask(__name__)\n-        @app.after_request\n-        def after_request(response):\n-            called.append(True)\n-            1/0\n-            return response\n-        @app.route('/')\n-        def fails():\n-            1/0\n-        rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n-        assert 'Internal Server Error' in rv.data\n-        assert len(called) == 1\n-\n     def test_teardown_request_handler(self):\n         called = []\n         app = flask.Flask(__name__)\n@@ -460,7 +429,6 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'Response' in rv.data\n         assert len(called) == 1\n \n-\n     def test_teardown_request_handler_error(self):\n         called = []\n         app = flask.Flask(__name__)\n@@ -494,7 +462,6 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'Internal Server Error' in rv.data\n         assert len(called) == 2\n \n-\n     def test_before_after_request_order(self):\n         called = []\n         app = flask.Flask(__name__)\n@@ -547,6 +514,19 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.status_code == 500\n         assert 'internal server error' == rv.data\n \n+    def test_teardown_on_pop(self):\n+        buffer = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def end_of_request(exception):\n+            buffer.append(exception)\n+\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        assert buffer == []\n+        ctx.pop()\n+        assert buffer == [None]\n+\n     def test_response_creation(self):\n         app = flask.Flask(__name__)\n         @app.route('/unicode')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#115d31ddbfac0773794f115eada88a75d651a0f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1716 | Contributors (this commit): 12 | Commits (past 90d): 10 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -831,6 +831,8 @@ class Flask(_PackageBoundObject):\n         \"\"\"Dispatches the request and on top of that performs request\n         pre and postprocessing as well as HTTP exception catching and\n         error handling.\n+\n+        .. versionadded:: 0.7\n         \"\"\"\n         try:\n             request_started.send(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b51ecd7f212588b3d7363db90a4ab8318ec2fa80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 464 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -47,11 +47,10 @@ def before_request():\n     g.db = connect_db()\n \n \n-@app.after_request\n-def after_request(response):\n+@app.teardown_request\n+def teardown_request(exception):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n     g.db.close()\n-    return response\n \n \n @app.route('/')\n\n@@ -82,11 +82,10 @@ def before_request():\n                           [session['user_id']], one=True)\n \n \n-@app.after_request\n-def after_request(response):\n+@app.teardown_request\n+def teardown_request(exception):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n     g.db.close()\n-    return response\n \n \n @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#086ecdb91829d43a9b948c6d97524d8de18e2fa4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 1729 | Contributors (this commit): 12 | Commits (past 90d): 11 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -793,10 +793,21 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded: 0.3\n         \"\"\"\n+        exc_type, exc_value, tb = sys.exc_info()\n+\n         got_request_exception.send(self, exception=e)\n         handler = self.error_handlers.get(500)\n+\n         if self.propagate_exceptions:\n-            raise\n+            # if we want to repropagate the exception, we can attempt to\n+            # raise it with the whole traceback in case we can do that\n+            # (the function was actually called from the except part)\n+            # otherwise, we just raise the error again\n+            if exc_value is e:\n+                raise exc_type, exc_value, tb\n+            else:\n+                raise e\n+\n         self.logger.exception('Exception on %s [%s]' % (\n             request.path,\n             request.method\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f7e71b518f30923f494750e476f30d91c415723e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 17 | Methods Changed: 21 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 43 | Churn Cumulative: 2023 | Contributors (this commit): 12 | Commits (past 90d): 15 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -583,6 +583,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n+        first_registration = False\n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, \\\n                 'A blueprint\\'s name collision ocurred between %r and ' \\\n@@ -590,7 +591,8 @@ class Flask(_PackageBoundObject):\n                 (blueprint, self.blueprints[blueprint.name], blueprint.name)\n         else:\n             self.blueprints[blueprint.name] = blueprint\n-        blueprint.register(self, options)\n+            first_registration = True\n+        blueprint.register(self, options, first_registration)\n \n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n\n@@ -10,6 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import os\n+from functools import update_wrapper\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n \n@@ -19,10 +20,11 @@ class BlueprintSetupState(object):\n     application.\n     \"\"\"\n \n-    def __init__(self, blueprint, app, options):\n+    def __init__(self, blueprint, app, options, first_registration):\n         self.app = app\n         self.blueprint = blueprint\n         self.options = options\n+        self.first_registration = first_registration\n \n         subdomain = self.options.get('subdomain')\n         if subdomain is None:\n@@ -64,17 +66,23 @@ class Blueprint(_PackageBoundObject):\n     def _record(self, func):\n         self.deferred_functions.append(func)\n \n-    def make_setup_state(self, app, options):\n-        return BlueprintSetupState(self, app, options)\n+    def _record_once(self, func):\n+        def wrapper(state):\n+            if state.first_registration:\n+                func(state)\n+        return self._record(update_wrapper(wrapper, func))\n \n-    def register(self, app, options):\n+    def make_setup_state(self, app, options, first_registration=False):\n+        return BlueprintSetupState(self, app, options, first_registration)\n+\n+    def register(self, app, options, first_registration=False):\n         \"\"\"Called by :meth:`Flask.register_blueprint` to register a blueprint\n         on the application.  This can be overridden to customize the register\n         behavior.  Keyword arguments from\n         :func:`~flask.Flask.register_blueprint` are directly forwarded to this\n         method in the `options` dictionary.\n         \"\"\"\n-        state = self.make_setup_state(app, options)\n+        state = self.make_setup_state(app, options, first_registration)\n         if self.has_static_folder:\n             state.add_url_rule(self.static_url_path + '/<path:filename>',\n                                view_func=self.send_static_file,\n@@ -96,9 +104,8 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.add_url_rule` but for a module.  The endpoint for\n         the :func:`url_for` function is prefixed with the name of the module.\n         \"\"\"\n-        def register_rule(state):\n-            state.add_url_rule(rule, endpoint, view_func, **options)\n-        self._record(register_rule)\n+        self._record(lambda s:\n+            s.add_url_rule(rule, endpoint, view_func, **options))\n \n     def endpoint(self, endpoint):\n         \"\"\"Like :meth:`Flask.endpoint` but for a module.  This does not\n@@ -108,7 +115,7 @@ class Blueprint(_PackageBoundObject):\n         def decorator(f):\n             def register_endpoint(state):\n                 state.app.view_functions[endpoint] = f\n-            self._record(register_endpoint)\n+            self._record_once(register_endpoint)\n             return f\n         return decorator\n \n@@ -117,7 +124,7 @@ class Blueprint(_PackageBoundObject):\n         is only executed before each request that is handled by a function of\n         that module.\n         \"\"\"\n-        self._record(lambda s: s.app.before_request_funcs\n+        self._record_once(lambda s: s.app.before_request_funcs\n             .setdefault(self.name, []).append(f))\n         return f\n \n@@ -125,7 +132,7 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n         before each request, even if outside of a module.\n         \"\"\"\n-        self._record(lambda s: s.app.before_request_funcs\n+        self._record_once(lambda s: s.app.before_request_funcs\n             .setdefault(None, []).append(f))\n         return f\n \n@@ -134,7 +141,7 @@ class Blueprint(_PackageBoundObject):\n         is only executed after each request that is handled by a function of\n         that module.\n         \"\"\"\n-        self._record(lambda s: s.app.after_request_funcs\n+        self._record_once(lambda s: s.app.after_request_funcs\n             .setdefault(self.name, []).append(f))\n         return f\n \n@@ -142,7 +149,7 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.after_request` but for a module.  Such a function\n         is executed after each request, even if outside of the module.\n         \"\"\"\n-        self._record(lambda s: s.app.after_request_funcs\n+        self._record_once(lambda s: s.app.after_request_funcs\n             .setdefault(None, []).append(f))\n         return f\n \n@@ -150,7 +157,7 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.context_processor` but for a module.  This\n         function is only executed for requests handled by a module.\n         \"\"\"\n-        self._record(lambda s: s.app.template_context_processors\n+        self._record_once(lambda s: s.app.template_context_processors\n             .setdefault(self.name, []).append(f))\n         return f\n \n@@ -158,7 +165,7 @@ class Blueprint(_PackageBoundObject):\n         \"\"\"Like :meth:`Flask.context_processor` but for a module.  Such a\n         function is executed each request, even if outside of the module.\n         \"\"\"\n-        self._record(lambda s: s.app.template_context_processors\n+        self._record_once(lambda s: s.app.template_context_processors\n             .setdefault(None, []).append(f))\n         return f\n \n@@ -167,6 +174,6 @@ class Blueprint(_PackageBoundObject):\n         handler is used for all requests, even if outside of the module.\n         \"\"\"\n         def decorator(f):\n-            self._record(lambda s: s.app.errorhandler(code)(f))\n+            self._record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n         return decorator\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5da1fc22153032923b1560a34a0f346d6517a12d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 81 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/5 | Churn Δ: 82 | Churn Cumulative: 2105 | Contributors (this commit): 12 | Commits (past 90d): 17 | Contributors (cumulative): 13 | DMM Complexity: 0.5172413793103449\n\nDIFF:\n@@ -269,6 +269,28 @@ class Flask(_PackageBoundObject):\n         #: .. versionadded:: 0.7\n         self.teardown_request_funcs = {}\n \n+        #: A dictionary with lists of functions that can be used as URL\n+        #: value processor functions.  Whenever a URL is built these functions\n+        #: are called to modify the dictionary of values in place.  The key\n+        #: `None` here is used for application wide\n+        #: callbacks, otherwise the key is the name of the blueprint.\n+        #: Each of these functions has the chance to modify the dictionary\n+        #:\n+        #: .. versionadded:: 0.7\n+        self.url_value_preprocessors = {}\n+\n+        #: A dictionary with lists of functions that can be used as URL value\n+        #: preprocessors.  The key `None` here is used for application wide\n+        #: callbacks, otherwise the key is the name of the blueprint.\n+        #: Each of these functions has the chance to modify the dictionary\n+        #: of URL values before they are used as the keyword arguments of the\n+        #: view function.  For each function registered this one should also\n+        #: provide a :meth:`url_defaults` function that adds the parameters\n+        #: automatically again that were removed that way.\n+        #:\n+        #: .. versionadded:: 0.7\n+        self.url_default_functions = {}\n+\n         #: A dictionary with list of functions that are called without argument\n         #: to populate the template context.  The key of the dictionary is the\n         #: name of the blueprint this function is active for, `None` for all\n@@ -826,6 +848,22 @@ class Flask(_PackageBoundObject):\n         self.template_context_processors[None].append(f)\n         return f\n \n+    def url_value_preprocessor(self, f):\n+        \"\"\"Registers a function as URL value preprocessor for all view\n+        functions of the application.  It's called before the view functions\n+        are called and can modify the url values provided.\n+        \"\"\"\n+        self.url_value_preprocessors.setdefault(None, []).append(f)\n+        return f\n+\n+    def url_defaults(self, f):\n+        \"\"\"Callback function for URL defaults for all view functions of the\n+        application.  It's called with the endpoint and values and should\n+        update the values passed in place.\n+        \"\"\"\n+        self.url_default_functions.setdefault(None, []).append(f)\n+        return f\n+\n     def handle_http_exception(self, e):\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\n         registered error handlers and fall back to returning the\n@@ -981,9 +1019,19 @@ class Flask(_PackageBoundObject):\n         If any of these function returns a value it's handled as\n         if it was the return value from the view and further\n         request handling is stopped.\n+\n+        This also triggers the :meth:`url_value_processor` functions before\n+        the actualy :meth:`before_request` functions are called.\n         \"\"\"\n-        funcs = self.before_request_funcs.get(None, ())\n         bp = request.blueprint\n+\n+        funcs = self.url_value_preprocessors.get(None, ())\n+        if bp is not None and bp in self.url_value_preprocessors:\n+            funcs = chain(funcs, self.url_value_preprocessors[bp])\n+        for func in funcs:\n+            func(request.endpoint, request.values)\n+\n+        funcs = self.before_request_funcs.get(None, ())\n         if bp is not None and bp in self.before_request_funcs:\n             funcs = chain(funcs, self.before_request_funcs[bp])\n         for func in funcs:\n\n@@ -177,3 +177,35 @@ class Blueprint(_PackageBoundObject):\n             self._record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n         return decorator\n+\n+    def url_value_preprocessor(self, f):\n+        \"\"\"Registers a function as URL value preprocessor for this\n+        blueprint.  It's called before the view functions are called and\n+        can modify the url values provided.\n+        \"\"\"\n+        self._record_once(lambda s: s.app.url_value_preprocessors\n+            .setdefault(self.name, []).append(f))\n+        return f\n+\n+    def url_defaults(self, f):\n+        \"\"\"Callback function for URL defaults for this module.  It's called\n+        with the endpoint and values and should update the values passed\n+        in place.\n+        \"\"\"\n+        self._record_once(lambda s: s.app.url_default_functions\n+            .setdefault(self.name, []).append(f))\n+        return f\n+\n+    def app_url_value_preprocessor(self, f):\n+        \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\n+        \"\"\"\n+        self._record_once(lambda s: s.app.url_value_preprocessor\n+            .setdefault(self.name, []).append(f))\n+        return f\n+\n+    def app_url_defaults(self, f):\n+        \"\"\"Same as :meth:`url_defaults` but application wide.\n+        \"\"\"\n+        self._record_once(lambda s: s.app.url_default_functions\n+            .setdefault(None, []).append(f))\n+        return f\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4d6cd1a3901495f66513934bb7e1a6ac58116400", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 15 | Churn Cumulative: 2681 | Contributors (this commit): 18 | Commits (past 90d): 24 | Contributors (cumulative): 22 | DMM Complexity: 0.875\n\nDIFF:\n@@ -1013,6 +1013,20 @@ class Flask(_PackageBoundObject):\n         return self.url_map.bind_to_environ(request.environ,\n             server_name=self.config['SERVER_NAME'])\n \n+    def inject_url_defaults(self, endpoint, values):\n+        \"\"\"Injects the URL defaults for the given endpoint directly into\n+        the values dictionary passed.  This is used internally and\n+        automatically called on URL building.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n+        funcs = self.url_default_functions.get(None, ())\n+        if '.' in endpoint:\n+            bp = endpoint.split('.', 1)[0]\n+            funcs = chain(funcs, self.url_default_functions.get(bp, ()))\n+        for func in funcs:\n+            func(endpoint, values)\n+\n     def preprocess_request(self):\n         \"\"\"Called before the actual request dispatching and will\n         call every as :meth:`before_request` decorated function.\n\n@@ -180,6 +180,7 @@ def url_for(endpoint, **values):\n         elif endpoint.startswith('.'):\n             endpoint = endpoint[1:]\n     external = values.pop('_external', False)\n+    ctx.app.inject_url_defaults(endpoint, values)\n     return ctx.url_adapter.build(endpoint, values, force_external=external)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#db28217574c119b65f4a5c9dcc7922656d60f22b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2030 | Contributors (this commit): 13 | Commits (past 90d): 20 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,7 @@ from .helpers import url_for, jsonify, json_available, flash, \\\n from .globals import current_app, g, request, session, _request_ctx_stack\n from .ctx import has_request_context\n from .module import Module\n+from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n from .session import Session\n \n\n@@ -1043,7 +1043,7 @@ class Flask(_PackageBoundObject):\n         if bp is not None and bp in self.url_value_preprocessors:\n             funcs = chain(funcs, self.url_value_preprocessors[bp])\n         for func in funcs:\n-            func(request.endpoint, request.values)\n+            func(request.endpoint, request.view_args)\n \n         funcs = self.before_request_funcs.get(None, ())\n         if bp is not None and bp in self.before_request_funcs:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
