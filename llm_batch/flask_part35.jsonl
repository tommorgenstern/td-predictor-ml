{"custom_id": "flask#6caaa8a527134dc9aff6d5c442969e96f9c00f21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 32 | Files Changed: 12 | Hunks: 32 | Methods Changed: 29 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 64 | Churn Cumulative: 9623 | Contributors (this commit): 49 | Commits (past 90d): 20 | Contributors (cumulative): 95 | DMM Complexity: None\n\nDIFF:\n@@ -1478,7 +1478,7 @@ class Flask(_PackageBoundObject):\n             rv = self.preprocess_request()\n             if rv is None:\n                 rv = self.dispatch_request()\n-        except Exception, e:\n+        except Exception as e:\n             rv = self.handle_user_exception(e)\n         response = self.make_response(rv)\n         response = self.process_response(response)\n@@ -1516,9 +1516,9 @@ class Flask(_PackageBoundObject):\n             methods = []\n             try:\n                 adapter.match(method='--')\n-            except MethodNotAllowed, e:\n+            except MethodNotAllowed as e:\n                 methods = e.valid_methods\n-            except HTTPException, e:\n+            except HTTPException as e:\n                 pass\n         rv = self.response_class()\n         rv.allow.update(methods)\n@@ -1626,7 +1626,7 @@ class Flask(_PackageBoundObject):\n                 rv = handler(error, endpoint, values)\n                 if rv is not None:\n                     return rv\n-            except BuildError, error:\n+            except BuildError as error:\n                 pass\n \n         # At this point we want to reraise the exception.  If the error is\n@@ -1807,7 +1807,7 @@ class Flask(_PackageBoundObject):\n         with self.request_context(environ):\n             try:\n                 response = self.full_dispatch_request()\n-            except Exception, e:\n+            except Exception as e:\n                 response = self.make_response(self.handle_exception(e))\n             return response(environ, start_response)\n \n\n@@ -127,7 +127,7 @@ class Config(dict):\n         d.__file__ = filename\n         try:\n             execfile(filename, d.__dict__)\n-        except IOError, e:\n+        except IOError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                 return False\n             e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n\n@@ -279,7 +279,7 @@ class RequestContext(object):\n             url_rule, self.request.view_args = \\\n                 self.url_adapter.match(return_rule=True)\n             self.request.url_rule = url_rule\n-        except HTTPException, e:\n+        except HTTPException as e:\n             self.request.routing_exception = e\n \n     def push(self):\n\n@@ -76,7 +76,7 @@ def attach_enctype_error_multidict(request):\n         def __getitem__(self, key):\n             try:\n                 return oldcls.__getitem__(self, key)\n-            except KeyError, e:\n+            except KeyError as e:\n                 if key not in request.form:\n                     raise\n                 raise DebugFilesKeyError(request, key)\n\n@@ -301,7 +301,7 @@ def url_for(endpoint, **values):\n     try:\n         rv = url_adapter.build(endpoint, values, method=method,\n                                force_external=external)\n-    except BuildError, error:\n+    except BuildError as error:\n         # We need to inject the values again so that the app callback can\n         # deal with that sort of stuff.\n         values['_external'] = external\n\n@@ -220,5 +220,5 @@ def main():\n     \"\"\"Runs the testsuite as command line application.\"\"\"\n     try:\n         unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n-    except Exception, e:\n+    except Exception as e:\n         print 'Error: %s' % e\n\n@@ -256,7 +256,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def expect_exception(f, *args, **kwargs):\n             try:\n                 f(*args, **kwargs)\n-            except RuntimeError, e:\n+            except RuntimeError as e:\n                 self.assert_(e.args and 'session is unavailable' in e.args[0])\n             else:\n                 self.assert_(False, 'expected exception')\n@@ -629,7 +629,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         c = app.test_client()\n         try:\n             c.get('/fail')\n-        except KeyError, e:\n+        except KeyError as e:\n             self.assert_(isinstance(e, BadRequest))\n         else:\n             self.fail('Expected exception')\n@@ -645,7 +645,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         c = app.test_client()\n         try:\n             c.get('/fail')\n-        except NotFound, e:\n+        except NotFound as e:\n             pass\n         else:\n             self.fail('Expected exception')\n@@ -664,7 +664,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         with app.test_client() as c:\n             try:\n                 c.post('/fail', data={'foo': 'index.txt'})\n-            except DebugFilesKeyError, e:\n+            except DebugFilesKeyError as e:\n                 self.assert_('no file contents were transmitted' in str(e))\n                 self.assert_('This was submitted: \"index.txt\"' in str(e))\n             else:\n@@ -755,7 +755,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             with app.test_request_context():\n                 flask.url_for('spam')\n-        except BuildError, error:\n+        except BuildError as error:\n             pass\n         try:\n             raise RuntimeError('Test case where BuildError is not current.')\n@@ -802,7 +802,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return None\n         try:\n             app.test_client().get('/')\n-        except ValueError, e:\n+        except ValueError as e:\n             self.assert_equal(str(e), 'View function did not return a response')\n             pass\n         else:\n@@ -843,7 +843,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             rv = app.test_client().get('/', 'https://localhost.localdomain')\n             # Werkzeug 0.8\n             self.assert_equal(rv.status_code, 404)\n-        except ValueError, e:\n+        except ValueError as e:\n             # Werkzeug 0.7\n             self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:443') does not match the \" + \\\n@@ -854,7 +854,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             rv = app.test_client().get('/', 'http://foo.localhost')\n             # Werkzeug 0.8\n             self.assert_equal(rv.status_code, 404)\n-        except ValueError, e:\n+        except ValueError as e:\n             # Werkzeug 0.7\n             self.assert_equal(str(e), \"the server name provided \" + \\\n                     \"('localhost.localdomain') does not match the \" + \\\n@@ -975,7 +975,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             @app.route('/foo')\n             def broken():\n                 return 'Meh'\n-        except AssertionError, e:\n+        except AssertionError as e:\n             self.assert_('A setup function was called' in str(e))\n         else:\n             self.fail('Expected exception')\n@@ -1009,7 +1009,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         with app.test_client() as c:\n             try:\n                 c.post('/foo', data={})\n-            except AssertionError, e:\n+            except AssertionError as e:\n                 self.assert_('http://localhost/foo/' in str(e))\n                 self.assert_('Make sure to directly send your POST-request '\n                              'to this URL' in str(e))\n\n@@ -183,7 +183,7 @@ class ModuleTestCase(FlaskTestCase):\n         with app.test_request_context():\n             try:\n                 flask.render_template('missing.html')\n-            except TemplateNotFound, e:\n+            except TemplateNotFound as e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n                 self.assert_(0, 'expected exception')\n@@ -378,7 +378,7 @@ class BlueprintTestCase(FlaskTestCase):\n         with app.test_request_context():\n             try:\n                 flask.render_template('missing.html')\n-            except TemplateNotFound, e:\n+            except TemplateNotFound as e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n                 self.assert_(0, 'expected exception')\n\n@@ -57,7 +57,7 @@ class ConfigTestCase(FlaskTestCase):\n             app = flask.Flask(__name__)\n             try:\n                 app.config.from_envvar('FOO_SETTINGS')\n-            except RuntimeError, e:\n+            except RuntimeError as e:\n                 self.assert_(\"'FOO_SETTINGS' is not set\" in str(e))\n             else:\n                 self.assert_(0, 'expected exception')\n@@ -76,7 +76,7 @@ class ConfigTestCase(FlaskTestCase):\n             try:\n                 app = flask.Flask(__name__)\n                 app.config.from_envvar('FOO_SETTINGS')\n-            except IOError, e:\n+            except IOError as e:\n                 msg = str(e)\n                 self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n                                             'file (No such file or directory):'))\n@@ -91,7 +91,7 @@ class ConfigTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         try:\n             app.config.from_pyfile('missing.cfg')\n-        except IOError, e:\n+        except IOError as e:\n             msg = str(e)\n             self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n                                         'file (No such file or directory):'))\n@@ -141,7 +141,7 @@ class InstanceTestCase(FlaskTestCase):\n         here = os.path.abspath(os.path.dirname(__file__))\n         try:\n             flask.Flask(__name__, instance_path='instance')\n-        except ValueError, e:\n+        except ValueError as e:\n             self.assert_('must be absolute' in str(e))\n         else:\n             self.fail('Expected value error')\n\n@@ -58,7 +58,7 @@ class RequestContextTestCase(FlaskTestCase):\n         try:\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n-        except Exception, e:\n+        except Exception as e:\n             self.assert_(isinstance(e, ValueError))\n             self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:5000') does not match the \" + \\\n@@ -68,7 +68,7 @@ class RequestContextTestCase(FlaskTestCase):\n             app.config.update(SERVER_NAME='localhost')\n             with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n                 pass\n-        except ValueError, e:\n+        except ValueError as e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n             )\n@@ -77,7 +77,7 @@ class RequestContextTestCase(FlaskTestCase):\n             app.config.update(SERVER_NAME='localhost:80')\n             with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n                 pass\n-        except ValueError, e:\n+        except ValueError as e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n             )\n\n@@ -106,7 +106,7 @@ class TestToolsTestCase(FlaskTestCase):\n             try:\n                 with c.session_transaction() as sess:\n                     pass\n-            except RuntimeError, e:\n+            except RuntimeError as e:\n                 self.assert_('Session backend did not open a session' in str(e))\n             else:\n                 self.fail('Expected runtime error')\n@@ -130,7 +130,7 @@ class TestToolsTestCase(FlaskTestCase):\n         try:\n             with c.session_transaction() as s:\n                 pass\n-        except RuntimeError, e:\n+        except RuntimeError as e:\n             self.assert_('cookies' in str(e))\n         else:\n             self.fail('Expected runtime error')\n\n@@ -101,7 +101,7 @@ class Request(RequestBase):\n                 if request_charset is not None:\n                     return json.loads(self.data, encoding=request_charset)\n                 return json.loads(self.data)\n-            except ValueError, e:\n+            except ValueError as e:\n                 return self.on_json_loading_failed(e)\n \n     def on_json_loading_failed(self, e):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b52b7b1f9322e7ab3e69a387dbfe9fe14de4c401", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 67 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -126,7 +126,7 @@ class Config(dict):\n         d = imp.new_module('config')\n         d.__file__ = filename\n         try:\n-            execfile(filename, d.__dict__)\n+            exec(compile(open(filename).read(), filename, 'exec'), d.__dict__)\n         except IOError, e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                 return False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b8b769ad41edeb2320774d88502dd998df272397", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3204 | Contributors (this commit): 23 | Commits (past 90d): 5 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -590,7 +590,7 @@ class Flask(_PackageBoundObject):\n         # Hack to support the init_jinja_globals method which is supported\n         # until 1.0 but has an API deficiency.\n         if getattr(self.init_jinja_globals, 'im_func', None) is not \\\n-           Flask.init_jinja_globals.im_func:\n+           Flask.init_jinja_globals.__func__:\n             from warnings import warn\n             warn(DeprecationWarning('This flask class uses a customized '\n                 'init_jinja_globals() method which is deprecated. '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#40fad2ece80e8bf6784e137028645fa66a3cd9c2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1317 | Contributors (this commit): 18 | Commits (past 90d): 8 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -161,8 +161,7 @@ def jsonify(*args, **kwargs):\n             \"id\": 42\n         }\n \n-    This requires Python 2.6 or an installed version of simplejson.  For\n-    security reasons only objects are supported toplevel.  For more\n+    For security reasons only objects are supported toplevel.  For more\n     information about this, have a look at :ref:`json-security`.\n \n     .. versionadded:: 0.2\n\n@@ -92,8 +92,6 @@ class Request(RequestBase):\n     def json(self):\n         \"\"\"If the mimetype is `application/json` this will contain the\n         parsed JSON data.  Otherwise this will be `None`.\n-\n-        This requires Python 2.6 or an installed version of simplejson.\n         \"\"\"\n         if self.mimetype == 'application/json':\n             request_charset = self.mimetype_params.get('charset')\n\n@@ -287,9 +287,7 @@ def main():\n         args = ['.']\n \n     if ast is None:\n-        parser.error('Python 2.6 or later is required to run the upgrade script.\\n'\n-                     'The runtime requirements for Flask 0.7 however are still '\n-                     'Python 2.5.')\n+        parser.error('Python 2.6 or later is required to run the upgrade script.')\n \n     for path in args:\n         scan_path(path, teardown=not options.no_teardown)\n\n@@ -101,7 +101,6 @@ setup(\n         'License :: OSI Approved :: BSD License',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n-        'Programming Language :: Python :: 2.5',\n         'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1b753cb1b1764de5bf3afe1f96032362208febc6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 253 | Contributors (this commit): 11 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,13 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask._compat\n+    ~~~~~~~~~~~~~\n+\n+    Some py2/py3 compatibility support that is not yet available in\n+    \"six\" 1.3.0.\n+    There are bugs open for \"six\" for all this stuff, so we can remove it\n+    again from here as soon as we require a new enough \"six\" release.\n+\n+    :copyright: (c) 2013 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n\n@@ -90,6 +90,7 @@ setup(\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n+        'six>=1.3.0',\n         'Werkzeug>=0.7',\n         'Jinja2>=2.4',\n         'itsdangerous>=0.17'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cfbfff2d2692a94bdb29133c2e7bb6b792cb337d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 749 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -10,6 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import print_function\n from __future__ import with_statement\n \n import os\n@@ -221,4 +222,4 @@ def main():\n     try:\n         unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n     except Exception, e:\n-        print 'Error: %s' % e\n+        print('Error: %s' % e)\n\n@@ -113,7 +113,7 @@ class LimitedLoaderMockWrapper(object):\n     def __getattr__(self, name):\n         if name in ('archive', 'get_filename'):\n             msg = 'Mocking a loader which does not have `%s.`' % name\n-            raise AttributeError, msg\n+            raise AttributeError(msg)\n         return getattr(self.loader, name)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0f8c47c988fbecc30785959065a53e00861c8558", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 850 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -17,6 +17,7 @@ from werkzeug.datastructures import CallbackDict\n from . import Markup, json\n \n from itsdangerous import URLSafeTimedSerializer, BadSignature\n+import six\n \n \n def total_seconds(td):\n@@ -68,7 +69,7 @@ class TaggedJSONSerializer(object):\n             elif isinstance(value, datetime):\n                 return {' d': http_date(value)}\n             elif isinstance(value, dict):\n-                return dict((k, _tag(v)) for k, v in value.iteritems())\n+                return dict((k, _tag(v)) for k, v in six.iteritems(value))\n             elif isinstance(value, str):\n                 try:\n                     return unicode(value)\n\n@@ -15,6 +15,7 @@ from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n from .globals import _request_ctx_stack, _app_ctx_stack\n from .signals import template_rendered\n from .module import blueprint_is_module\n+import six\n \n \n def _default_template_ctx_processor():\n@@ -79,7 +80,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         except (ValueError, KeyError):\n             pass\n \n-        for blueprint in self.app.blueprints.itervalues():\n+        for blueprint in six.itervalues(self.app.blueprints):\n             if blueprint_is_module(blueprint):\n                 continue\n             loader = blueprint.jinja_loader\n@@ -92,7 +93,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         if loader is not None:\n             result.update(loader.list_templates())\n \n-        for name, blueprint in self.app.blueprints.iteritems():\n+        for name, blueprint in six.iteritems(self.app.blueprints):\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 for template in loader.list_templates():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dcd052366b43df7bfe730c2e991ff37c617ba52b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2839 | Contributors (this commit): 26 | Commits (past 90d): 7 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -26,6 +26,7 @@ from functools import update_wrapper\n \n from werkzeug.datastructures import Headers\n from werkzeug.exceptions import NotFound\n+import six\n \n # this was moved in 0.7\n try:\n@@ -128,7 +129,7 @@ def stream_with_context(generator_or_function):\n     # pushed.  This item is discarded.  Then when the iteration continues the\n     # real generator is executed.\n     wrapped_g = generator()\n-    wrapped_g.next()\n+    six.advance_iterator(wrapped_g)\n     return wrapped_g\n \n \n\n@@ -85,7 +85,7 @@ class TaggedJSONSerializer(object):\n         def object_hook(obj):\n             if len(obj) != 1:\n                 return obj\n-            the_key, the_value = obj.iteritems().next()\n+            the_key, the_value = six.advance_iterator(obj.iteritems())\n             if the_key == ' t':\n                 return tuple(the_value)\n             elif the_key == ' u':\n\n@@ -18,6 +18,7 @@ from logging import StreamHandler\n from StringIO import StringIO\n from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n+import six\n \n \n def has_encoding(name):\n@@ -507,7 +508,7 @@ class StreamingTestCase(FlaskTestCase):\n             def close(self):\n                 called.append(42)\n             def next(self):\n-                return self._gen.next()\n+                return six.advance_iterator(self._gen)\n         @app.route('/')\n         def index():\n             def generate():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#522cd0009367d1f775b0e978681426773f51ce14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 9 | Files Changed: 6 | Hunks: 13 | Methods Changed: 15 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 4329 | Contributors (this commit): 12 | Commits (past 90d): 18 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -17,6 +17,7 @@ from werkzeug.http import http_date\n # Use the same json implementation as itsdangerous on which we\n # depend anyways.\n from itsdangerous import simplejson as _json\n+import six\n \n \n # figure out if simplejson escapes slashes.  This behavior was changed\n@@ -59,7 +60,7 @@ class JSONEncoder(_json.JSONEncoder):\n         if isinstance(o, uuid.UUID):\n             return str(o)\n         if hasattr(o, '__html__'):\n-            return unicode(o.__html__())\n+            return six.text_type(o.__html__())\n         return _json.JSONEncoder.default(self, o)\n \n \n\n@@ -63,7 +63,7 @@ class TaggedJSONSerializer(object):\n             elif isinstance(value, uuid.UUID):\n                 return {' u': value.hex}\n             elif callable(getattr(value, '__html__', None)):\n-                return {' m': unicode(value.__html__())}\n+                return {' m': six.text_type(value.__html__())}\n             elif isinstance(value, list):\n                 return [_tag(x) for x in value]\n             elif isinstance(value, datetime):\n@@ -72,7 +72,7 @@ class TaggedJSONSerializer(object):\n                 return dict((k, _tag(v)) for k, v in six.iteritems(value))\n             elif isinstance(value, str):\n                 try:\n-                    return unicode(value)\n+                    return six.text_type(value)\n                 except UnicodeError:\n                     raise UnexpectedUnicodeError(u'A byte string with '\n                         u'non-ASCII data was passed to the session system '\n\n@@ -22,6 +22,7 @@ from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n from werkzeug.exceptions import BadRequest, NotFound\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n+import six\n \n \n class BasicFunctionalityTestCase(FlaskTestCase):\n@@ -277,7 +278,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         @app.route('/test')\n         def test():\n-            return unicode(flask.session.permanent)\n+            return six.text_type(flask.session.permanent)\n \n         client = app.test_client()\n         rv = client.get('/')\n\n@@ -18,6 +18,7 @@ from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n from werkzeug.exceptions import NotFound\n from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n+import six\n \n \n # import moduleapp here because it uses deprecated features and we don't\n@@ -304,7 +305,7 @@ class BlueprintTestCase(FlaskTestCase):\n \n         @bp.route('/bar')\n         def bar(bar):\n-            return unicode(bar)\n+            return six.text_type(bar)\n \n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n\n@@ -36,7 +36,7 @@ class JSONTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         @app.route('/json', methods=['POST'])\n         def return_json():\n-            return unicode(flask.request.json)\n+            return six.text_type(flask.request.json)\n         c = app.test_client()\n         rv = c.post('/json', data='malformed', content_type='application/json')\n         self.assert_equal(rv.status_code, 400)\n@@ -45,7 +45,7 @@ class JSONTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         @app.route('/json', methods=['POST'])\n         def return_json():\n-            return unicode(flask.request.json)\n+            return six.text_type(flask.request.json)\n         c = app.test_client()\n         rv = c.post('/json', data='malformed', content_type='application/json')\n         self.assert_equal(rv.status_code, 400)\n@@ -97,7 +97,7 @@ class JSONTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         @app.route('/add', methods=['POST'])\n         def add():\n-            return unicode(flask.request.json['a'] + flask.request.json['b'])\n+            return six.text_type(flask.request.json['a'] + flask.request.json['b'])\n         c = app.test_client()\n         rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n                             content_type='application/json')\n\n@@ -14,6 +14,7 @@ from __future__ import with_statement\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n+import six\n \n \n class TestToolsTestCase(FlaskTestCase):\n@@ -85,7 +86,7 @@ class TestToolsTestCase(FlaskTestCase):\n \n         @app.route('/')\n         def index():\n-            return unicode(flask.session['foo'])\n+            return six.text_type(flask.session['foo'])\n \n         with app.test_client() as c:\n             with c.session_transaction() as sess:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#287905e67c2f22df3c3055a0cca025931726cd02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 145 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ from __future__ import with_statement\n import sys\n import unittest\n from flask.testsuite import FlaskTestCase\n-\n+from six import reload_module\n \n class ExtImportHookTestCase(FlaskTestCase):\n \n@@ -29,7 +29,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n                 entry == 'flaskext') and value is not None:\n                 sys.modules.pop(entry, None)\n         from flask import ext\n-        reload(ext)\n+        reload_module(ext)\n \n         # reloading must not add more hooks\n         import_hooks = 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c618db92d6059ab1262ea2450b0f81a94cdad901", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 147 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ from __future__ import with_statement\n import sys\n import unittest\n from flask.testsuite import FlaskTestCase\n-from six import reload_module\n+from six.moves import reload_module\n \n class ExtImportHookTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#506db0eab2bf9e514177d8b46e2708f10601cf36", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 247 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -38,6 +38,7 @@ Links\n   <http://github.com/mitsuhiko/flask/zipball/master#egg=Flask-dev>`_\n \n \"\"\"\n+from __future__ import print_function\n from setuptools import Command, setup\n \n class run_audit(Command):\n@@ -59,7 +60,7 @@ class run_audit(Command):\n         try:\n             import pyflakes.scripts.pyflakes as flakes\n         except ImportError:\n-            print \"Audit requires PyFlakes installed in your system.\"\n+            print(\"Audit requires PyFlakes installed in your system.\")\n             sys.exit(-1)\n \n         warns = 0\n@@ -71,9 +72,9 @@ class run_audit(Command):\n                     if file != '__init__.py' and file.endswith('.py') :\n                         warns += flakes.checkPath(os.path.join(root, file))\n         if warns > 0:\n-            print \"Audit finished with total %d warnings.\" % warns\n+            print(\"Audit finished with total %d warnings.\" % warns)\n         else:\n-            print \"No problems found in sourcecode.\"\n+            print(\"No problems found in sourcecode.\")\n \n setup(\n     name='Flask',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aecc41deb8d5cb8a1505be52648c78432e9238ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 534 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import with_statement\n+\n import sys\n from functools import update_wrapper\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a503520ac51d16558ce91f7d7fc9d30a910d928c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 100 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 104 | Churn Cumulative: 117 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,11 +3,107 @@\n     flask._compat\n     ~~~~~~~~~~~~~\n \n-    Some py2/py3 compatibility support that is not yet available in\n-    \"six\" 1.3.0.\n-    There are bugs open for \"six\" for all this stuff, so we can remove it\n-    again from here as soon as we require a new enough \"six\" release.\n+    Some py2/py3 compatibility support based on a stripped down\n+    version of six so we don't have to depend on a specific version\n+    of it.\n \n     :copyright: (c) 2013 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import sys\n+\n+PY2 = sys.version_info[0] == 2\n+PYPY = hasattr(sys, 'pypy_translation_info')\n+_identity = lambda x: x\n+\n+\n+if not PY2:\n+    unichr = chr\n+    range_type = range\n+    text_type = str\n+    string_types = (str,)\n+\n+    iterkeys = lambda d: iter(d.keys())\n+    itervalues = lambda d: iter(d.values())\n+    iteritems = lambda d: iter(d.items())\n+\n+    import pickle\n+    from io import BytesIO, StringIO\n+    NativeStringIO = StringIO\n+\n+    def reraise(tp, value, tb=None):\n+        if value.__traceback__ is not tb:\n+            raise value.with_traceback(tb)\n+        raise value\n+\n+    ifilter = filter\n+    imap = map\n+    izip = zip\n+    intern = sys.intern\n+\n+    implements_iterator = _identity\n+    implements_to_string = _identity\n+    encode_filename = _identity\n+    get_next = lambda x: x.__next__\n+\n+else:\n+    unichr = unichr\n+    text_type = unicode\n+    range_type = xrange\n+    string_types = (str, unicode)\n+\n+    iterkeys = lambda d: d.iterkeys()\n+    itervalues = lambda d: d.itervalues()\n+    iteritems = lambda d: d.iteritems()\n+\n+    import cPickle as pickle\n+    from cStringIO import StringIO as BytesIO, StringIO\n+    NativeStringIO = BytesIO\n+\n+    exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n+\n+    from itertools import imap, izip, ifilter\n+    intern = intern\n+\n+    def implements_iterator(cls):\n+        cls.next = cls.__next__\n+        del cls.__next__\n+        return cls\n+\n+    def implements_to_string(cls):\n+        cls.__unicode__ = cls.__str__\n+        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n+        return cls\n+\n+    get_next = lambda x: x.next\n+\n+    def encode_filename(filename):\n+        if isinstance(filename, unicode):\n+            return filename.encode('utf-8')\n+        return filename\n+\n+\n+def with_metaclass(meta, *bases):\n+    # This requires a bit of explanation: the basic idea is to make a\n+    # dummy metaclass for one level of class instanciation that replaces\n+    # itself with the actual metaclass.  Because of internal type checks\n+    # we also need to make sure that we downgrade the custom metaclass\n+    # for one level to something closer to type (that's why __call__ and\n+    # __init__ comes back from type etc.).\n+    #\n+    # This has the advantage over six.with_metaclass in that it does not\n+    # introduce dummy classes into the final MRO.\n+    class metaclass(meta):\n+        __call__ = type.__call__\n+        __init__ = type.__init__\n+        def __new__(cls, name, this_bases, d):\n+            if this_bases is None:\n+                return type.__new__(cls, name, (), d)\n+            return meta(name, bases, d)\n+    return metaclass('temporary_class', None, {})\n+\n+\n+try:\n+    from urllib.parse import quote_from_bytes as url_quote\n+except ImportError:\n+    from urllib import quote as url_quote\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e1d356fb713f3272db2a23f9f898c34c5dc79dc0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 87 | Files Changed: 24 | Hunks: 55 | Methods Changed: 18 | Complexity Δ (Sum/Max): 27/31 | Churn Δ: 123 | Churn Cumulative: 11710 | Contributors (this commit): 49 | Commits (past 90d): 56 | Contributors (cumulative): 127 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,7 +9,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n+\n from sqlite3 import dbapi2 as sqlite3\n from flask import Flask, request, session, g, redirect, url_for, abort, \\\n      render_template, flash, _app_ctx_stack\n\n@@ -8,7 +8,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n+\n import time\n from sqlite3 import dbapi2 as sqlite3\n from hashlib import md5\n\n@@ -22,6 +22,7 @@ if not PY2:\n     range_type = range\n     text_type = str\n     string_types = (str,)\n+    integer_types = (int, )\n \n     iterkeys = lambda d: iter(d.keys())\n     itervalues = lambda d: iter(d.values())\n@@ -46,11 +47,14 @@ if not PY2:\n     encode_filename = _identity\n     get_next = lambda x: x.__next__\n \n+    from urllib.parse import urlparse\n+\n else:\n     unichr = unichr\n     text_type = unicode\n     range_type = xrange\n     string_types = (str, unicode)\n+    integer_types = (int, long)\n \n     iterkeys = lambda d: d.iterkeys()\n     itervalues = lambda d: d.itervalues()\n@@ -82,6 +86,8 @@ else:\n             return filename.encode('utf-8')\n         return filename\n \n+    from urlparse import urlparse\n+\n \n def with_metaclass(meta, *bases):\n     # This requires a bit of explanation: the basic idea is to make a\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import os\n import sys\n from threading import Lock\n@@ -36,6 +34,7 @@ from .templating import DispatchingJinjaLoader, Environment, \\\n     _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n     request_tearing_down, appcontext_tearing_down\n+from flask._compat import reraise, string_types, integer_types\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -585,21 +584,7 @@ class Flask(_PackageBoundObject):\n     @locked_cached_property\n     def jinja_env(self):\n         \"\"\"The Jinja2 environment used to load templates.\"\"\"\n-        rv = self.create_jinja_environment()\n-\n-        # Hack to support the init_jinja_globals method which is supported\n-        # until 1.0 but has an API deficiency.\n-        if getattr(self.init_jinja_globals, 'im_func', None) is not \\\n-           Flask.init_jinja_globals.__func__:\n-            from warnings import warn\n-            warn(DeprecationWarning('This flask class uses a customized '\n-                'init_jinja_globals() method which is deprecated. '\n-                'Move the code from that method into the '\n-                'create_jinja_environment() method instead.'))\n-            self.__dict__['jinja_env'] = rv\n-            self.init_jinja_globals()\n-\n-        return rv\n+        return self.create_jinja_environment()\n \n     @property\n     def got_first_request(self):\n@@ -1090,7 +1075,7 @@ class Flask(_PackageBoundObject):\n     def _register_error_handler(self, key, code_or_exception, f):\n         if isinstance(code_or_exception, HTTPException):\n             code_or_exception = code_or_exception.code\n-        if isinstance(code_or_exception, (int, long)):\n+        if isinstance(code_or_exception, integer_types):\n             assert code_or_exception != 500 or key is None, \\\n                 'It is currently not possible to register a 500 internal ' \\\n                 'server error on a per-blueprint level.'\n@@ -1137,7 +1122,7 @@ class Flask(_PackageBoundObject):\n           def is_prime(n):\n               if n == 2:\n                   return True\n-              for i in xrange(2, int(math.ceil(math.sqrt(n))) + 1):\n+              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                   if n % i == 0:\n                       return False\n               return True\n@@ -1383,7 +1368,7 @@ class Flask(_PackageBoundObject):\n             if isinstance(e, typecheck):\n                 return handler(e)\n \n-        raise exc_type, exc_value, tb\n+        reraise(exc_type, exc_value, tb)\n \n     def handle_exception(self, e):\n         \"\"\"Default exception handling that kicks in when an exception\n@@ -1405,7 +1390,7 @@ class Flask(_PackageBoundObject):\n             # (the function was actually called from the except part)\n             # otherwise, we just raise the error again\n             if exc_value is e:\n-                raise exc_type, exc_value, tb\n+                reraise(exc_type, exc_value, tb)\n             else:\n                 raise e\n \n@@ -1565,14 +1550,14 @@ class Flask(_PackageBoundObject):\n             # set the headers and status.  We do this because there can be\n             # some extra logic involved when creating these objects with\n             # specific values (like defualt content type selection).\n-            if isinstance(rv, basestring):\n+            if isinstance(rv, string_types):\n                 rv = self.response_class(rv, headers=headers, status=status)\n                 headers = status = None\n             else:\n                 rv = self.response_class.force_type(rv, request.environ)\n \n         if status is not None:\n-            if isinstance(status, basestring):\n+            if isinstance(status, string_types):\n                 rv.status = status\n             else:\n                 rv.status_code = status\n@@ -1633,7 +1618,7 @@ class Flask(_PackageBoundObject):\n         # still the same one we can reraise it with the original traceback,\n         # otherwise we raise it from here.\n         if error is exc_value:\n-            raise exc_type, exc_value, tb\n+            reraise(exc_type, exc_value, tb)\n         raise error\n \n     def preprocess_request(self):\n\n@@ -9,13 +9,12 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import imp\n import os\n import errno\n \n from werkzeug.utils import import_string\n+from flask._compat import string_types\n \n \n class ConfigAttribute(object):\n@@ -158,7 +157,7 @@ class Config(dict):\n \n         :param obj: an import name or object\n         \"\"\"\n-        if isinstance(obj, basestring):\n+        if isinstance(obj, string_types):\n             obj = import_string(obj)\n         for key in dir(obj):\n             if key.isupper():\n\n@@ -21,6 +21,7 @@\n \"\"\"\n import sys\n import os\n+from flask._compat import reraise\n \n \n class ExtensionImporter(object):\n@@ -77,7 +78,7 @@ class ExtensionImporter(object):\n                 # we swallow it and try the next choice.  The skipped frame\n                 # is the one from __import__ above which we don't care about\n                 if self.is_important_traceback(realname, tb):\n-                    raise exc_type, exc_value, tb.tb_next\n+                    reraise(exc_type, exc_value, tb.tb_next)\n                 continue\n             module = sys.modules[fullname] = sys.modules[realname]\n             if '.' not in modname:\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import os\n import sys\n import pkgutil\n@@ -27,6 +25,7 @@ from functools import update_wrapper\n from werkzeug.datastructures import Headers\n from werkzeug.exceptions import NotFound\n import six\n+from flask._compat import string_types, text_type\n \n # this was moved in 0.7\n try:\n@@ -467,7 +466,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                           :data:`~flask.current_app`.\n     \"\"\"\n     mtime = None\n-    if isinstance(filename_or_fp, basestring):\n+    if isinstance(filename_or_fp, string_types):\n         filename = filename_or_fp\n         file = None\n     else:\n@@ -478,7 +477,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         # XXX: this behavior is now deprecated because it was unreliable.\n         # removed in Flask 1.0\n         if not attachment_filename and not mimetype \\\n-           and isinstance(filename, basestring):\n+           and isinstance(filename, string_types):\n             warn(DeprecationWarning('The filename support for file objects '\n                 'passed to send_file is now deprecated.  Pass an '\n                 'attach_filename if you want mimetypes to be guessed.'),\n@@ -540,7 +539,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             os.path.getmtime(filename),\n             os.path.getsize(filename),\n             adler32(\n-                filename.encode('utf-8') if isinstance(filename, unicode)\n+                filename.encode('utf-8') if isinstance(filename, text_type)\n                 else filename\n             ) & 0xffffffff\n         ))\n\n@@ -10,12 +10,10 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n-from urlparse import urlparse\n+from flask._compat import urlparse\n \n \n def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n\n@@ -11,17 +11,16 @@\n \"\"\"\n \n from __future__ import print_function\n-from __future__ import with_statement\n \n import os\n import sys\n import flask\n import warnings\n import unittest\n-from StringIO import StringIO\n from functools import update_wrapper\n from contextlib import contextmanager\n from werkzeug.utils import import_string, find_modules\n+from flask._compat import reraise, StringIO\n \n \n def add_to_path(path):\n@@ -159,7 +158,7 @@ class _ExceptionCatcher(object):\n             self.test_case.fail('Expected exception of type %r' %\n                                 exception_name)\n         elif not issubclass(exc_type, self.exc_type):\n-            raise exc_type, exc_value, tb\n+            reraise(exc_type, exc_value, tb)\n         return True\n \n \n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import re\n import uuid\n import flask\n@@ -1060,7 +1058,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             1/0\n \n         c = app.test_client()\n-        for x in xrange(3):\n+        for x in range(3):\n             with self.assert_raises(ZeroDivisionError):\n                 c.get('/fail')\n \n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n import warnings\n\n@@ -8,7 +8,6 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n \n import os\n import sys\n\n@@ -9,30 +9,13 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase, catch_warnings\n \n \n class DeprecationsTestCase(FlaskTestCase):\n-\n-    def test_init_jinja_globals(self):\n-        class MyFlask(flask.Flask):\n-            def init_jinja_globals(self):\n-                self.jinja_env.globals['foo'] = '42'\n-\n-        with catch_warnings() as log:\n-            app = MyFlask(__name__)\n-            @app.route('/')\n-            def foo():\n-                return app.jinja_env.globals['foo']\n-\n-            c = app.test_client()\n-            self.assert_equal(c.get('/').data, '42')\n-            self.assert_equal(len(log), 1)\n-            self.assert_('init_jinja_globals' in str(log[0]['message']))\n+    \"\"\"not used currently\"\"\"\n \n \n def suite():\n\n@@ -8,7 +8,6 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n \n import sys\n import unittest\n@@ -22,7 +21,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n         # that a real flaskext could be in there which would disable our\n         # fake package.  Secondly we want to make sure that the flaskext\n         # import hook does not break on reloading.\n-        for entry, value in sys.modules.items():\n+        for entry, value in list(sys.modules.items()):\n             if (entry.startswith('flask.ext.') or\n                 entry.startswith('flask_') or\n                 entry.startswith('flaskext.') or\n@@ -100,7 +99,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n         self.assert_equal(test_function(), 42)\n \n     def test_flaskext_broken_package_no_module_caching(self):\n-        for x in xrange(2):\n+        for x in range(2):\n             with self.assert_raises(ImportError):\n                 import flask.ext.broken\n \n\n@@ -9,16 +9,14 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import os\n import flask\n import unittest\n from logging import StreamHandler\n-from StringIO import StringIO\n from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n import six\n+from flask._compat import StringIO\n \n \n def has_encoding(name):\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import os\n import gc\n import sys\n@@ -77,7 +75,7 @@ class MemoryTestCase(FlaskTestCase):\n         if sys.version_info >= (2, 7) and \\\n                 not hasattr(sys, 'pypy_translation_info'):\n             with self.assert_no_leak():\n-                for x in xrange(10):\n+                for x in range(10):\n                     fire()\n \n     def test_safe_join_toplevel_pardir(self):\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n try:\n\n@@ -8,7 +8,6 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n \n import flask\n import unittest\n\n@@ -11,9 +11,9 @@\n \"\"\"\n import flask\n import unittest\n-from StringIO import StringIO\n from logging import StreamHandler\n from flask.testsuite import FlaskTestCase\n+from flask._compat import StringIO\n \n \n class FlaskSubclassingTestCase(FlaskTestCase):\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n\n@@ -8,7 +8,7 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n+\n import flask\n import flask.views\n import unittest\n\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import os\n import sys\n import shutil\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
